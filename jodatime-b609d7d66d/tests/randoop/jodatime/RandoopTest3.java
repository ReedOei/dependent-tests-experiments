package randoop.jodatime;

import junit.framework.*;

public class RandoopTest3 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test1"); }


    org.joda.time.DateTime var0 = org.joda.time.DateTime.now();
    long var1 = var0.getMillis();
    org.joda.time.DateTime.Property var2 = var0.yearOfEra();
    org.joda.time.DateTime var4 = var0.withMillisOfDay(216);
    org.joda.time.PeriodType var5 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var6 = new org.joda.time.MutablePeriod(var5);
    var6.addDays(1);
    org.joda.time.Duration var10 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var12 = org.joda.time.Duration.standardHours((-1L));
    boolean var13 = var10.isShorterThan((org.joda.time.ReadableDuration)var12);
    var6.add((org.joda.time.ReadableDuration)var12);
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var12, (org.joda.time.ReadableInstant)var15);
    var16.clear();
    org.joda.time.PeriodType var18 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var19 = new org.joda.time.MutablePeriod(var18);
    var19.addDays(1);
    org.joda.time.Duration var23 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var25 = org.joda.time.Duration.standardHours((-1L));
    boolean var26 = var23.isShorterThan((org.joda.time.ReadableDuration)var25);
    var19.add((org.joda.time.ReadableDuration)var25);
    var16.add((org.joda.time.ReadablePeriod)var19);
    org.joda.time.chrono.JulianChronology var29 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var30 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var29);
    org.joda.time.LocalDate var31 = var30.toLocalDate();
    org.joda.time.MutableDateTime var32 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var33 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var30, (org.joda.time.ReadableInstant)var32);
    org.joda.time.MutableDateTime var34 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var35 = var34.year();
    boolean var36 = var32.isBefore((org.joda.time.ReadableInstant)var34);
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    boolean var41 = var38.isShorterThan((org.joda.time.ReadableDuration)var40);
    org.joda.time.Duration var43 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var45 = org.joda.time.Duration.standardHours((-1L));
    boolean var46 = var43.isShorterThan((org.joda.time.ReadableDuration)var45);
    org.joda.time.Duration var47 = var38.plus((org.joda.time.ReadableDuration)var43);
    var34.add((org.joda.time.ReadableDuration)var43);
    org.joda.time.Hours var49 = var43.toStandardHours();
    org.joda.time.chrono.EthiopicChronology var50 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
    var19.setPeriod((org.joda.time.ReadableDuration)var43, (org.joda.time.Chronology)var50);
    org.joda.time.DateTime var52 = var4.plus((org.joda.time.ReadableDuration)var43);
    org.joda.time.DateTime var55 = var52.withDurationAdded(1L, 15795333);
    org.joda.time.format.DateTimeFormatter var56 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
    org.joda.time.chrono.EthiopicChronology var60 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var61 = var60.hours();
    org.joda.time.LocalTime var62 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var60);
    org.joda.time.Period var63 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var60);
    org.joda.time.DateTimeField var64 = var60.millisOfSecond();
    org.joda.time.chrono.LenientChronology var65 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var60);
    org.joda.time.format.DateTimeFormatter var66 = var56.withChronology((org.joda.time.Chronology)var65);
    org.joda.time.chrono.ISOChronology var67 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
    org.joda.time.tz.FixedDateTimeZone var72 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var74 = var72.getOffsetFromLocal(1377742981323L);
    org.joda.time.Chronology var75 = var67.withZone((org.joda.time.DateTimeZone)var72);
    long var77 = var72.nextTransition(9L);
    org.joda.time.Chronology var78 = var65.withZone((org.joda.time.DateTimeZone)var72);
    org.joda.time.DateTime var79 = var55.withZone((org.joda.time.DateTimeZone)var72);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTime var84 = var55.withTime(682, 23544431, 16, 12);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 9L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test2() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test2"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    var1.addDays(1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    var1.add((org.joda.time.ReadableDuration)var7);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var7, (org.joda.time.ReadableInstant)var10);
    var11.clear();
    org.joda.time.PeriodType var13 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var14 = new org.joda.time.MutablePeriod(var13);
    var14.addDays(1);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    boolean var21 = var18.isShorterThan((org.joda.time.ReadableDuration)var20);
    var14.add((org.joda.time.ReadableDuration)var20);
    var11.add((org.joda.time.ReadablePeriod)var14);
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.LocalDate var26 = var25.toLocalDate();
    org.joda.time.MutableDateTime var27 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var28 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var25, (org.joda.time.ReadableInstant)var27);
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var30 = var29.year();
    boolean var31 = var27.isBefore((org.joda.time.ReadableInstant)var29);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    boolean var41 = var38.isShorterThan((org.joda.time.ReadableDuration)var40);
    org.joda.time.Duration var42 = var33.plus((org.joda.time.ReadableDuration)var38);
    var29.add((org.joda.time.ReadableDuration)var38);
    org.joda.time.Hours var44 = var38.toStandardHours();
    org.joda.time.chrono.EthiopicChronology var45 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
    var14.setPeriod((org.joda.time.ReadableDuration)var38, (org.joda.time.Chronology)var45);
    var14.clear();
    org.joda.time.MutableDateTime var48 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var49 = var48.year();
    org.joda.time.MutableDateTime.Property var50 = var48.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var51 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var52 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var51);
    org.joda.time.Period var57 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var59 = var57.plusSeconds(100);
    org.joda.time.Period var61 = var57.minusMillis(10);
    boolean var62 = var52.equals((java.lang.Object)10);
    org.joda.time.Weeks var63 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var48, (org.joda.time.ReadableInstant)var52);
    org.joda.time.Duration var64 = var14.toDurationFrom((org.joda.time.ReadableInstant)var52);
    int var65 = var14.getMonths();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);

  }

  public void test3() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test3"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    int var5 = var2.getRoundingMode();
    var2.addMillis(100);
    var2.setSecondOfMinute(10);
    org.joda.time.PeriodType var10 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var11 = new org.joda.time.Period((org.joda.time.ReadableDuration)var1, (org.joda.time.ReadableInstant)var2, var10);
    org.joda.time.Days var12 = var11.toStandardDays();
    org.joda.time.Hours var13 = var12.toStandardHours();
    java.lang.String var14 = var13.toString();
    org.joda.time.Days var15 = var13.toStandardDays();
    org.joda.time.Hours var17 = var13.multipliedBy(2013);
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var20 = new org.joda.time.MutableDateTime();
    var20.setWeekOfWeekyear(1);
    int var23 = var20.getRoundingMode();
    var20.addMillis(100);
    var20.setSecondOfMinute(10);
    org.joda.time.PeriodType var28 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var29 = new org.joda.time.Period((org.joda.time.ReadableDuration)var19, (org.joda.time.ReadableInstant)var20, var28);
    org.joda.time.Days var30 = var29.toStandardDays();
    org.joda.time.Hours var31 = var30.toStandardHours();
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var34 = new org.joda.time.MutableDateTime();
    var34.setWeekOfWeekyear(1);
    int var37 = var34.getRoundingMode();
    var34.addMillis(100);
    var34.setSecondOfMinute(10);
    org.joda.time.PeriodType var42 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var43 = new org.joda.time.Period((org.joda.time.ReadableDuration)var33, (org.joda.time.ReadableInstant)var34, var42);
    org.joda.time.Days var44 = var43.toStandardDays();
    org.joda.time.Hours var45 = var44.toStandardHours();
    java.lang.String var46 = var45.toString();
    org.joda.time.Hours var47 = var31.plus(var45);
    org.joda.time.Hours var48 = var13.plus(var45);
    org.joda.time.Duration var50 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var51 = new org.joda.time.MutableDateTime();
    var51.setWeekOfWeekyear(1);
    int var54 = var51.getRoundingMode();
    var51.addMillis(100);
    var51.setSecondOfMinute(10);
    org.joda.time.PeriodType var59 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var60 = new org.joda.time.Period((org.joda.time.ReadableDuration)var50, (org.joda.time.ReadableInstant)var51, var59);
    org.joda.time.Days var61 = var60.toStandardDays();
    org.joda.time.Hours var62 = var61.toStandardHours();
    org.joda.time.Duration var64 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var65 = new org.joda.time.MutableDateTime();
    var65.setWeekOfWeekyear(1);
    int var68 = var65.getRoundingMode();
    var65.addMillis(100);
    var65.setSecondOfMinute(10);
    org.joda.time.PeriodType var73 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var74 = new org.joda.time.Period((org.joda.time.ReadableDuration)var64, (org.joda.time.ReadableInstant)var65, var73);
    org.joda.time.Days var75 = var74.toStandardDays();
    org.joda.time.Hours var76 = var75.toStandardHours();
    java.lang.String var77 = var76.toString();
    org.joda.time.Hours var78 = var62.plus(var76);
    org.joda.time.DurationFieldType var79 = var78.getFieldType();
    boolean var80 = var48.isLessThan(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PT0H"+ "'", var14.equals("PT0H"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "PT0H"+ "'", var46.equals("PT0H"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "PT0H"+ "'", var77.equals("PT0H"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);

  }

  public void test4() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test4"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    org.joda.time.YearMonthDay var4 = var2.plusDays((-1));
    org.joda.time.YearMonthDay.Property var5 = var2.year();
    org.joda.time.chrono.JulianChronology var6 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var7 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var6);
    org.joda.time.LocalDate var8 = var7.toLocalDate();
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var10 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableInstant)var9);
    org.joda.time.MutableDateTime var11 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var12 = var11.year();
    boolean var13 = var9.isBefore((org.joda.time.ReadableInstant)var11);
    org.joda.time.Duration var15 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var17 = org.joda.time.Duration.standardHours((-1L));
    boolean var18 = var15.isShorterThan((org.joda.time.ReadableDuration)var17);
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var22 = org.joda.time.Duration.standardHours((-1L));
    boolean var23 = var20.isShorterThan((org.joda.time.ReadableDuration)var22);
    org.joda.time.Duration var24 = var15.plus((org.joda.time.ReadableDuration)var20);
    var11.add((org.joda.time.ReadableDuration)var20);
    org.joda.time.Hours var26 = var20.toStandardHours();
    org.joda.time.YearMonthDay var28 = var2.withPeriodAdded((org.joda.time.ReadablePeriod)var26, 2013);
    org.joda.time.YearMonthDay var30 = var28.withDayOfMonth(23);
    org.joda.time.tz.FixedDateTimeZone var35 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var37 = var35.getOffsetFromLocal(1377742981323L);
    org.joda.time.DateTimeZone var39 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.chrono.JulianChronology var40 = org.joda.time.chrono.JulianChronology.getInstance(var39);
    long var42 = var35.getMillisKeepLocal(var39, 1377746580759L);
    int var44 = var35.getStandardOffset(1377768182707L);
    org.joda.time.DateTime var45 = var30.toDateTimeAtMidnight((org.joda.time.DateTimeZone)var35);
    org.joda.time.DateTime var46 = var30.toDateTimeAtCurrentTime();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1377746580754L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 228);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test5() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test5"); }


    org.joda.time.YearMonth var1 = new org.joda.time.YearMonth(10L);
    org.joda.time.chrono.EthiopicChronology var2 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.YearMonth var3 = var1.withChronologyRetainFields((org.joda.time.Chronology)var2);
    java.lang.String var4 = var3.toString();
    org.joda.time.DateTimeFieldType[] var5 = var3.getFieldTypes();
    int var6 = var3.getMonthOfYear();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var8 = var3.toString("8619 seconds");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "1970-01"+ "'", var4.equals("1970-01"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1);

  }

  public void test6() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test6"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.MutableDateTime var8 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var9 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var6, (org.joda.time.ReadableInstant)var8);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var11 = var10.year();
    boolean var12 = var8.isBefore((org.joda.time.ReadableInstant)var10);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    boolean var22 = var19.isShorterThan((org.joda.time.ReadableDuration)var21);
    org.joda.time.Duration var23 = var14.plus((org.joda.time.ReadableDuration)var19);
    var10.add((org.joda.time.ReadableDuration)var19);
    org.joda.time.Seconds var25 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var10);
    org.joda.time.Weeks var26 = var25.toStandardWeeks();
    org.joda.time.chrono.JulianChronology var27 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var28 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var27);
    org.joda.time.LocalDate var29 = var28.toLocalDate();
    org.joda.time.MutableDateTime var30 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var31 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var28, (org.joda.time.ReadableInstant)var30);
    org.joda.time.chrono.JulianChronology var32 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var33 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var32);
    org.joda.time.LocalDate var34 = var33.toLocalDate();
    org.joda.time.MutableDateTime var35 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var36 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var33, (org.joda.time.ReadableInstant)var35);
    org.joda.time.MutableDateTime var37 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var38 = var37.year();
    boolean var39 = var35.isBefore((org.joda.time.ReadableInstant)var37);
    org.joda.time.Duration var41 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var43 = org.joda.time.Duration.standardHours((-1L));
    boolean var44 = var41.isShorterThan((org.joda.time.ReadableDuration)var43);
    org.joda.time.Duration var46 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var48 = org.joda.time.Duration.standardHours((-1L));
    boolean var49 = var46.isShorterThan((org.joda.time.ReadableDuration)var48);
    org.joda.time.Duration var50 = var41.plus((org.joda.time.ReadableDuration)var46);
    var37.add((org.joda.time.ReadableDuration)var46);
    org.joda.time.Seconds var52 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var28, (org.joda.time.ReadableInstant)var37);
    org.joda.time.Weeks var53 = var52.toStandardWeeks();
    org.joda.time.Duration var55 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var57 = org.joda.time.Duration.standardHours((-1L));
    boolean var58 = var55.isShorterThan((org.joda.time.ReadableDuration)var57);
    org.joda.time.Duration var60 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var62 = org.joda.time.Duration.standardHours((-1L));
    boolean var63 = var60.isShorterThan((org.joda.time.ReadableDuration)var62);
    org.joda.time.Duration var64 = var55.plus((org.joda.time.ReadableDuration)var60);
    boolean var65 = var53.equals((java.lang.Object)var64);
    boolean var66 = var26.isLessThan(var53);
    org.joda.time.DurationFieldType var67 = var53.getFieldType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test7() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test7"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var24 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var23);
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var26 = var25.year();
    boolean var27 = var23.isBefore((org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var28 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var25);
    boolean var30 = var28.isAfter(10L);
    org.joda.time.MutableDateTime var31 = new org.joda.time.MutableDateTime();
    var31.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var34 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var31.setChronology((org.joda.time.Chronology)var34);
    org.joda.time.Interval var36 = var28.withChronology((org.joda.time.Chronology)var34);
    org.joda.time.Weeks var37 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval)var36);
    org.joda.time.Interval var38 = var36.toInterval();
    org.joda.time.MutableInterval var39 = var38.toMutableInterval();
    org.joda.time.chrono.JulianChronology var40 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var41 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var40);
    org.joda.time.LocalDate var42 = var41.toLocalDate();
    org.joda.time.MutableDateTime var43 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var44 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var41, (org.joda.time.ReadableInstant)var43);
    org.joda.time.MutableDateTime var45 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var46 = var45.year();
    boolean var47 = var43.isBefore((org.joda.time.ReadableInstant)var45);
    org.joda.time.Duration var49 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var51 = org.joda.time.Duration.standardHours((-1L));
    boolean var52 = var49.isShorterThan((org.joda.time.ReadableDuration)var51);
    org.joda.time.Duration var54 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var56 = org.joda.time.Duration.standardHours((-1L));
    boolean var57 = var54.isShorterThan((org.joda.time.ReadableDuration)var56);
    org.joda.time.Duration var58 = var49.plus((org.joda.time.ReadableDuration)var54);
    var45.add((org.joda.time.ReadableDuration)var54);
    org.joda.time.chrono.JulianChronology var60 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var61 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var60);
    org.joda.time.LocalDate var62 = var61.toLocalDate();
    org.joda.time.MutableDateTime var63 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var64 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var61, (org.joda.time.ReadableInstant)var63);
    org.joda.time.MutableDateTime var65 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var66 = var65.year();
    boolean var67 = var63.isBefore((org.joda.time.ReadableInstant)var65);
    org.joda.time.Interval var68 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var45, (org.joda.time.ReadableInstant)var65);
    org.joda.time.Interval var69 = var68.toInterval();
    org.joda.time.Partial var70 = new org.joda.time.Partial();
    java.lang.String var71 = var70.toString();
    org.joda.time.PeriodType var72 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var73 = new org.joda.time.MutablePeriod(var72);
    org.joda.time.DurationFieldType[] var74 = var73.getFieldTypes();
    org.joda.time.Partial var75 = var70.plus((org.joda.time.ReadablePeriod)var73);
    org.joda.time.Interval var76 = var69.withPeriodAfterStart((org.joda.time.ReadablePeriod)var73);
    boolean var77 = var39.contains((org.joda.time.ReadableInterval)var69);
    boolean var78 = var39.isBeforeNow();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "[]"+ "'", var71.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);

  }

  public void test8() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test8"); }


    org.joda.time.chrono.JulianChronology var7 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var8 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var7);
    org.joda.time.LocalDate var9 = var8.toLocalDate();
    org.joda.time.LocalDate var11 = var9.minusMonths(0);
    org.joda.time.DateTime var12 = var9.toDateTimeAtMidnight();
    org.joda.time.DateTime var14 = var12.withMillis(100L);
    int var15 = var12.getWeekyear();
    org.joda.time.LocalDateTime var16 = var12.toLocalDateTime();
    org.joda.time.LocalTime var17 = var12.toLocalTime();
    org.joda.time.LocalDateTime var18 = var12.toLocalDateTime();
    org.joda.time.DateTime var20 = var12.minusSeconds(33);
    org.joda.time.DateTime var22 = var12.minusWeeks(14);
    org.joda.time.chrono.BuddhistChronology var23 = org.joda.time.chrono.BuddhistChronology.getInstance();
    org.joda.time.DateTimeField var24 = var23.minuteOfDay();
    org.joda.time.LocalDate var25 = new org.joda.time.LocalDate((java.lang.Object)var12, (org.joda.time.Chronology)var23);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDateTime var26 = new org.joda.time.LocalDateTime(24, 86399, 22, 36, 20, 3, 85450, (org.joda.time.Chronology)var23);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1969);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test9() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test9"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.LocalTime var3 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var1);
    org.joda.time.LocalTime var5 = var3.withMillisOfSecond(1);
    org.joda.time.LocalTime var7 = var5.minusHours((-1));
    org.joda.time.Partial var8 = new org.joda.time.Partial((org.joda.time.ReadablePartial)var5);
    org.joda.time.chrono.JulianChronology var9 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var10 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var9);
    org.joda.time.LocalDate var11 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var9);
    org.joda.time.DateTimeField var12 = var9.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var13 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var14 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var15 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var14);
    org.joda.time.LocalDate var16 = var15.toLocalDate();
    org.joda.time.LocalDate var18 = var16.minusMonths(0);
    int[] var20 = var13.get((org.joda.time.ReadablePartial)var18, 100L);
    org.joda.time.chrono.EthiopicChronology var24 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var25 = var24.hours();
    org.joda.time.LocalTime var26 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var24);
    org.joda.time.Period var27 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var24);
    org.joda.time.DateTimeField var28 = var24.millisOfSecond();
    org.joda.time.DateTimeField var29 = var24.secondOfDay();
    org.joda.time.field.SkipDateTimeField var31 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var13, var29, 100);
    org.joda.time.LocalDateTime var32 = org.joda.time.LocalDateTime.now();
    int var33 = var32.getDayOfYear();
    org.joda.time.Chronology var34 = var32.getChronology();
    int var35 = var32.getYearOfCentury();
    int var36 = var31.getMaximumValue((org.joda.time.ReadablePartial)var32);
    boolean var38 = var31.isLeap(1L);
    org.joda.time.LocalDateTime var39 = org.joda.time.LocalDateTime.now();
    int var40 = var39.getDayOfYear();
    int var41 = var31.getMinimumValue((org.joda.time.ReadablePartial)var39);
    org.joda.time.DurationField var42 = var31.getDurationField();
    org.joda.time.DateTimeFieldType var43 = var31.getType();
    org.joda.time.field.OffsetDateTimeField var47 = new org.joda.time.field.OffsetDateTimeField(var12, var43, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var50 = new org.joda.time.IllegalFieldValueException(var43, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.Partial var51 = var8.without(var43);
    org.joda.time.chrono.EthiopicChronology var52 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var53 = var52.dayOfYear();
    org.joda.time.YearMonthDay var54 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var52);
    org.joda.time.YearMonthDay var56 = var54.plusDays((-1));
    org.joda.time.YearMonthDay.Property var57 = var54.year();
    org.joda.time.chrono.JulianChronology var58 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var59 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var58);
    org.joda.time.LocalDate var60 = var59.toLocalDate();
    org.joda.time.MutableDateTime var61 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var62 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var59, (org.joda.time.ReadableInstant)var61);
    org.joda.time.MutableDateTime var63 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var64 = var63.year();
    boolean var65 = var61.isBefore((org.joda.time.ReadableInstant)var63);
    org.joda.time.Duration var67 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var69 = org.joda.time.Duration.standardHours((-1L));
    boolean var70 = var67.isShorterThan((org.joda.time.ReadableDuration)var69);
    org.joda.time.Duration var72 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var74 = org.joda.time.Duration.standardHours((-1L));
    boolean var75 = var72.isShorterThan((org.joda.time.ReadableDuration)var74);
    org.joda.time.Duration var76 = var67.plus((org.joda.time.ReadableDuration)var72);
    var63.add((org.joda.time.ReadableDuration)var72);
    org.joda.time.Hours var78 = var72.toStandardHours();
    org.joda.time.YearMonthDay var80 = var54.withPeriodAdded((org.joda.time.ReadablePeriod)var78, 2013);
    org.joda.time.YearMonthDay var82 = var80.withDayOfMonth(23);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var83 = var51.isEqual((org.joda.time.ReadablePartial)var82);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test10() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test10"); }


    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var3 = new org.joda.time.DateMidnight((-1L), (org.joda.time.Chronology)var2);
    org.joda.time.LocalTime var4 = org.joda.time.LocalTime.fromMillisOfDay(1377768182707L, (org.joda.time.Chronology)var2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var12 = var2.getDateTimeMillis(25785, (-13), 110, 12217, 33, 853, 200);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test11() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test11"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.withMonthOfYear(1);
    org.joda.time.DateMidnight var5 = var2.toDateMidnight();
    org.joda.time.LocalDate var7 = var2.plusDays((-1));
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var8);
    org.joda.time.LocalDate var10 = var9.toLocalDate();
    org.joda.time.LocalDate var12 = var10.withMonthOfYear(1);
    org.joda.time.DateMidnight var13 = var10.toDateMidnight();
    org.joda.time.LocalDate var15 = var10.plusDays((-1));
    org.joda.time.Minutes var16 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadablePartial)var2, (org.joda.time.ReadablePartial)var15);
    int var17 = var16.getMinutes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == (-1440));

  }

  public void test12() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test12"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    int var24 = var19.getSecondOfMinute();
    int var25 = var19.getDayOfYear();
    org.joda.time.LocalDateTime.Property var26 = var19.secondOfMinute();
    org.joda.time.LocalDateTime.Property var27 = var19.yearOfEra();
    org.joda.time.LocalDateTime var29 = var19.minusDays(2005);
    org.joda.time.LocalDateTime.Property var30 = var29.dayOfMonth();
    org.joda.time.LocalDateTime.Property var31 = var29.centuryOfEra();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test13() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test13"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.LocalTime var3 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var1);
    org.joda.time.LocalTime var5 = var3.withMillisOfSecond(1);
    org.joda.time.LocalTime var6 = org.joda.time.LocalTime.now();
    boolean var7 = var5.isAfter((org.joda.time.ReadablePartial)var6);
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var8);
    org.joda.time.LocalDate var10 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var8);
    org.joda.time.DurationField var11 = var8.hours();
    boolean var12 = var6.equals((java.lang.Object)var8);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    var15.setWeekOfWeekyear(1);
    int var18 = var15.getRoundingMode();
    var15.addMillis(100);
    var15.setSecondOfMinute(10);
    org.joda.time.PeriodType var23 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var24 = new org.joda.time.Period((org.joda.time.ReadableDuration)var14, (org.joda.time.ReadableInstant)var15, var23);
    org.joda.time.Days var25 = var24.toStandardDays();
    org.joda.time.LocalTime var26 = var6.minus((org.joda.time.ReadablePeriod)var24);
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    var29.setWeekOfWeekyear(1);
    int var32 = var29.getRoundingMode();
    var29.addMillis(100);
    var29.setSecondOfMinute(10);
    org.joda.time.PeriodType var37 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var38 = new org.joda.time.Period((org.joda.time.ReadableDuration)var28, (org.joda.time.ReadableInstant)var29, var37);
    org.joda.time.Days var39 = var38.toStandardDays();
    org.joda.time.chrono.JulianChronology var40 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var41 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var40);
    org.joda.time.Period var46 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var48 = var46.plusSeconds(100);
    org.joda.time.Period var50 = var46.minusMillis(10);
    boolean var51 = var41.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var52 = var41.dayOfYear();
    org.joda.time.chrono.JulianChronology var53 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var54 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var53);
    org.joda.time.LocalDate var55 = var54.toLocalDate();
    org.joda.time.LocalDate var57 = var55.minusMonths(0);
    org.joda.time.DateTime var58 = var55.toDateTimeAtMidnight();
    org.joda.time.DateTime var60 = var58.withCenturyOfEra(4);
    org.joda.time.Days var61 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var41, (org.joda.time.ReadableInstant)var60);
    org.joda.time.Days var63 = var61.dividedBy(1);
    boolean var64 = var39.isGreaterThan(var61);
    org.joda.time.DurationFieldType var65 = var39.getFieldType();
    org.joda.time.Period var67 = var24.withField(var65, 0);
    org.joda.time.Weeks var68 = var24.toStandardWeeks();
    org.joda.time.Weeks var69 = var68.negated();
    org.joda.time.Minutes var70 = org.joda.time.Minutes.standardMinutesIn((org.joda.time.ReadablePeriod)var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test14() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test14"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.DateMidnight.Property var21 = var4.monthOfYear();
    int var22 = var4.getYearOfCentury();
    long var23 = var4.getMillis();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 604800000L);

  }

  public void test15() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test15"); }


    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = new org.joda.time.DateMidnight((-1L), (org.joda.time.Chronology)var1);
    java.util.Date var3 = var2.toDate();
    org.joda.time.LocalDate var4 = var2.toLocalDate();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test16() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test16"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    int var3 = var0.getYearOfCentury();
    org.joda.time.LocalDateTime var5 = var0.withCenturyOfEra(2);
    org.joda.time.LocalDateTime var7 = var0.plusMinutes(70541200);
    org.joda.time.chrono.ISOChronology var8 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
    org.joda.time.tz.FixedDateTimeZone var13 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var15 = var13.getOffsetFromLocal(1377742981323L);
    org.joda.time.Chronology var16 = var8.withZone((org.joda.time.DateTimeZone)var13);
    org.joda.time.LocalTime var17 = new org.joda.time.LocalTime((org.joda.time.DateTimeZone)var13);
    org.joda.time.LocalDateTime var18 = var7.withFields((org.joda.time.ReadablePartial)var17);
    org.joda.time.chrono.JulianChronology var19 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var20 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var19);
    org.joda.time.LocalDate var21 = var20.toLocalDate();
    org.joda.time.LocalDate var23 = var21.minusMonths(0);
    org.joda.time.DateTime var24 = var21.toDateTimeAtMidnight();
    org.joda.time.DateTime var26 = var24.withMillis(100L);
    org.joda.time.chrono.JulianChronology var27 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var28 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var27);
    org.joda.time.LocalDate var29 = var28.toLocalDate();
    org.joda.time.DateMidnight var31 = var28.minusWeeks((-1));
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var34 = new org.joda.time.MutableDateTime();
    var34.setWeekOfWeekyear(1);
    int var37 = var34.getRoundingMode();
    var34.addMillis(100);
    var34.setSecondOfMinute(10);
    org.joda.time.PeriodType var42 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var43 = new org.joda.time.Period((org.joda.time.ReadableDuration)var33, (org.joda.time.ReadableInstant)var34, var42);
    org.joda.time.Days var44 = var43.toStandardDays();
    org.joda.time.DurationFieldType var45 = var44.getFieldType();
    org.joda.time.DateMidnight var47 = var31.withFieldAdded(var45, 1);
    org.joda.time.DateMidnight.Property var48 = var31.monthOfYear();
    org.joda.time.Duration var50 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var51 = new org.joda.time.MutableDateTime();
    var51.setWeekOfWeekyear(1);
    int var54 = var51.getRoundingMode();
    var51.addMillis(100);
    var51.setSecondOfMinute(10);
    org.joda.time.PeriodType var59 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var60 = new org.joda.time.Period((org.joda.time.ReadableDuration)var50, (org.joda.time.ReadableInstant)var51, var59);
    org.joda.time.PeriodType var61 = var59.withWeeksRemoved();
    org.joda.time.Period var62 = new org.joda.time.Period((org.joda.time.ReadableInstant)var26, (org.joda.time.ReadableInstant)var31, var59);
    org.joda.time.chrono.JulianChronology var65 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var66 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var65);
    org.joda.time.LocalDate var67 = var66.toLocalDate();
    org.joda.time.LocalDate var69 = var67.withMonthOfYear(1);
    org.joda.time.LocalDate var71 = var69.withEra(1);
    org.joda.time.LocalDate.Property var72 = var69.yearOfCentury();
    org.joda.time.Period var77 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var79 = var77.plusYears((-1));
    org.joda.time.Minutes var80 = var77.toStandardMinutes();
    org.joda.time.Minutes var82 = org.joda.time.Minutes.minutes(10);
    org.joda.time.Minutes var83 = var80.minus(var82);
    org.joda.time.PeriodType var84 = var80.getPeriodType();
    boolean var85 = var69.equals((java.lang.Object)var84);
    org.joda.time.chrono.JulianChronology var86 = org.joda.time.chrono.JulianChronology.getInstance();
    org.joda.time.MutablePeriod var87 = new org.joda.time.MutablePeriod(9L, var84, (org.joda.time.Chronology)var86);
    org.joda.time.LocalTime var88 = org.joda.time.LocalTime.fromMillisOfDay(1377742993058L, (org.joda.time.Chronology)var86);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Period var89 = new org.joda.time.Period((java.lang.Object)var18, var59, (org.joda.time.Chronology)var86);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test17() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test17"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    int var2 = var1.getSeconds();
    int var3 = var1.getMonths();
    var1.setWeeks((-1));
    org.joda.time.Weeks var6 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod)var1);
    org.joda.time.Weeks var8 = var6.multipliedBy(86399);
    org.joda.time.Duration var9 = var6.toStandardDuration();
    org.joda.time.Weeks var11 = var6.multipliedBy(12182);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test18() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test18"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    int var5 = var2.getRoundingMode();
    var2.addMillis(100);
    var2.setSecondOfMinute(10);
    org.joda.time.PeriodType var10 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var11 = new org.joda.time.Period((org.joda.time.ReadableDuration)var1, (org.joda.time.ReadableInstant)var2, var10);
    org.joda.time.Days var12 = var11.toStandardDays();
    org.joda.time.Hours var13 = var12.toStandardHours();
    java.lang.String var14 = var13.toString();
    org.joda.time.Days var15 = var13.toStandardDays();
    org.joda.time.Minutes var16 = var15.toStandardMinutes();
    int var17 = var15.size();
    java.lang.String var18 = var15.toString();
    org.joda.time.Period var20 = org.joda.time.Period.days(1);
    org.joda.time.Duration var22 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    var23.setWeekOfWeekyear(1);
    int var26 = var23.getRoundingMode();
    var23.addMillis(100);
    var23.setSecondOfMinute(10);
    org.joda.time.PeriodType var31 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var32 = new org.joda.time.Period((org.joda.time.ReadableDuration)var22, (org.joda.time.ReadableInstant)var23, var31);
    org.joda.time.Days var33 = var32.toStandardDays();
    org.joda.time.Period var34 = var20.minus((org.joda.time.ReadablePeriod)var33);
    boolean var35 = var15.isGreaterThan(var33);
    org.joda.time.Weeks var36 = var15.toStandardWeeks();
    org.joda.time.Days var38 = var15.plus((-948));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PT0H"+ "'", var14.equals("PT0H"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "P0D"+ "'", var18.equals("P0D"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test19() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test19"); }


    org.joda.time.DateTimeZone var1 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstance(var1);
    org.joda.time.chrono.IslamicChronology var3 = org.joda.time.chrono.IslamicChronology.getInstance(var1);
    org.joda.time.DateTime var11 = new org.joda.time.DateTime(0, 4, 28, 1, 28, 1, 1);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate.Property var13 = var12.weekyear();
    org.joda.time.format.DateTimeFormatter var14 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
    org.joda.time.chrono.EthiopicChronology var18 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var19 = var18.hours();
    org.joda.time.LocalTime var20 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var18);
    org.joda.time.Period var21 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var18);
    org.joda.time.DateTimeField var22 = var18.millisOfSecond();
    org.joda.time.chrono.LenientChronology var23 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var18);
    org.joda.time.format.DateTimeFormatter var24 = var14.withChronology((org.joda.time.Chronology)var23);
    org.joda.time.tz.FixedDateTimeZone var29 = new org.joda.time.tz.FixedDateTimeZone("PT0H", "ISOChronology[UTC]", 100, 13);
    org.joda.time.PeriodType var30 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var31 = new org.joda.time.MutablePeriod(var30);
    var31.addDays(1);
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var37 = org.joda.time.Duration.standardHours((-1L));
    boolean var38 = var35.isShorterThan((org.joda.time.ReadableDuration)var37);
    var31.add((org.joda.time.ReadableDuration)var37);
    org.joda.time.MutableDateTime var40 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var37, (org.joda.time.ReadableInstant)var40);
    var41.clear();
    org.joda.time.MutableDateTime var43 = new org.joda.time.MutableDateTime();
    org.joda.time.chrono.JulianChronology var44 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var45 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var44);
    org.joda.time.LocalDate var46 = var45.toLocalDate();
    org.joda.time.MutableDateTime var47 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var48 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var45, (org.joda.time.ReadableInstant)var47);
    org.joda.time.MutableDateTime var49 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var50 = var49.year();
    boolean var51 = var47.isBefore((org.joda.time.ReadableInstant)var49);
    org.joda.time.Duration var53 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var55 = org.joda.time.Duration.standardHours((-1L));
    boolean var56 = var53.isShorterThan((org.joda.time.ReadableDuration)var55);
    org.joda.time.Duration var58 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var60 = org.joda.time.Duration.standardHours((-1L));
    boolean var61 = var58.isShorterThan((org.joda.time.ReadableDuration)var60);
    org.joda.time.Duration var62 = var53.plus((org.joda.time.ReadableDuration)var58);
    var49.add((org.joda.time.ReadableDuration)var58);
    org.joda.time.MutableDateTime.Property var64 = var49.dayOfWeek();
    var41.setPeriod((org.joda.time.ReadableInstant)var43, (org.joda.time.ReadableInstant)var49);
    boolean var66 = var29.equals((java.lang.Object)var41);
    org.joda.time.Chronology var67 = var23.withZone((org.joda.time.DateTimeZone)var29);
    boolean var69 = var29.isStandardOffset((-100L));
    org.joda.time.DateTimeZone.setDefault((org.joda.time.DateTimeZone)var29);
    org.joda.time.Interval var71 = var12.toInterval((org.joda.time.DateTimeZone)var29);
    org.joda.time.Chronology var72 = var3.withZone((org.joda.time.DateTimeZone)var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test20() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test20"); }


    org.joda.time.PeriodType var1 = org.joda.time.PeriodType.yearDay();
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var2.setChronology((org.joda.time.Chronology)var5);
    org.joda.time.MutablePeriod var7 = new org.joda.time.MutablePeriod(0L, var1, (org.joda.time.Chronology)var5);
    int var8 = var7.getWeeks();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);

  }

  public void test21() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test21"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var1 = var0.year();
    org.joda.time.MutableDateTime.Property var2 = var0.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var4 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var3);
    org.joda.time.Period var9 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var11 = var9.plusSeconds(100);
    org.joda.time.Period var13 = var9.minusMillis(10);
    boolean var14 = var4.equals((java.lang.Object)10);
    org.joda.time.Weeks var15 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var0, (org.joda.time.ReadableInstant)var4);
    org.joda.time.MutableDateTime var16 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var17 = var16.year();
    org.joda.time.MutableDateTime.Property var18 = var16.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var19 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var20 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var19);
    org.joda.time.Period var25 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var27 = var25.plusSeconds(100);
    org.joda.time.Period var29 = var25.minusMillis(10);
    boolean var30 = var20.equals((java.lang.Object)10);
    org.joda.time.Weeks var31 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var16, (org.joda.time.ReadableInstant)var20);
    boolean var32 = var15.isLessThan(var31);
    org.joda.time.Weeks var34 = var31.dividedBy(1);
    org.joda.time.Days var35 = var31.toStandardDays();
    org.joda.time.Days var37 = var35.plus(12);
    org.joda.time.Seconds var38 = var35.toStandardSeconds();
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var41 = new org.joda.time.MutableDateTime();
    var41.setWeekOfWeekyear(1);
    int var44 = var41.getRoundingMode();
    var41.addMillis(100);
    var41.setSecondOfMinute(10);
    org.joda.time.PeriodType var49 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var50 = new org.joda.time.Period((org.joda.time.ReadableDuration)var40, (org.joda.time.ReadableInstant)var41, var49);
    org.joda.time.Days var51 = var50.toStandardDays();
    org.joda.time.chrono.JulianChronology var52 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var53 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var52);
    org.joda.time.Period var58 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var60 = var58.plusSeconds(100);
    org.joda.time.Period var62 = var58.minusMillis(10);
    boolean var63 = var53.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var64 = var53.dayOfYear();
    org.joda.time.chrono.JulianChronology var65 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var66 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var65);
    org.joda.time.LocalDate var67 = var66.toLocalDate();
    org.joda.time.LocalDate var69 = var67.minusMonths(0);
    org.joda.time.DateTime var70 = var67.toDateTimeAtMidnight();
    org.joda.time.DateTime var72 = var70.withCenturyOfEra(4);
    org.joda.time.Days var73 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var53, (org.joda.time.ReadableInstant)var72);
    org.joda.time.Days var75 = var73.dividedBy(1);
    boolean var76 = var51.isGreaterThan(var73);
    org.joda.time.DurationFieldType var77 = var51.getFieldType();
    org.joda.time.Days var79 = var51.plus(759);
    org.joda.time.Duration var81 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var82 = new org.joda.time.MutableDateTime();
    var82.setWeekOfWeekyear(1);
    int var85 = var82.getRoundingMode();
    var82.addMillis(100);
    var82.setSecondOfMinute(10);
    org.joda.time.PeriodType var90 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var91 = new org.joda.time.Period((org.joda.time.ReadableDuration)var81, (org.joda.time.ReadableInstant)var82, var90);
    org.joda.time.Days var92 = var91.toStandardDays();
    java.lang.String var93 = var92.toString();
    org.joda.time.Days var95 = var92.plus(692);
    boolean var96 = var51.isGreaterThan(var95);
    org.joda.time.Days var97 = var35.minus(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var93 + "' != '" + "P0D"+ "'", var93.equals("P0D"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);

  }

  public void test22() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test22"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    var0.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var0.setChronology((org.joda.time.Chronology)var3);
    org.joda.time.DateTimeField var5 = var3.clockhourOfHalfday();
    org.joda.time.format.DateTimeFormatterBuilder var6 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var8 = var6.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var10 = var6.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var11 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var12 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var11);
    org.joda.time.LocalDate var13 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var14 = var11.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var15 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var16 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var17 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var16);
    org.joda.time.LocalDate var18 = var17.toLocalDate();
    org.joda.time.LocalDate var20 = var18.minusMonths(0);
    int[] var22 = var15.get((org.joda.time.ReadablePartial)var20, 100L);
    org.joda.time.chrono.EthiopicChronology var26 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var27 = var26.hours();
    org.joda.time.LocalTime var28 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var26);
    org.joda.time.Period var29 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var26);
    org.joda.time.DateTimeField var30 = var26.millisOfSecond();
    org.joda.time.DateTimeField var31 = var26.secondOfDay();
    org.joda.time.field.SkipDateTimeField var33 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var15, var31, 100);
    org.joda.time.LocalDateTime var34 = org.joda.time.LocalDateTime.now();
    int var35 = var34.getDayOfYear();
    org.joda.time.Chronology var36 = var34.getChronology();
    int var37 = var34.getYearOfCentury();
    int var38 = var33.getMaximumValue((org.joda.time.ReadablePartial)var34);
    boolean var40 = var33.isLeap(1L);
    org.joda.time.LocalDateTime var41 = org.joda.time.LocalDateTime.now();
    int var42 = var41.getDayOfYear();
    int var43 = var33.getMinimumValue((org.joda.time.ReadablePartial)var41);
    org.joda.time.DurationField var44 = var33.getDurationField();
    org.joda.time.DateTimeFieldType var45 = var33.getType();
    org.joda.time.field.OffsetDateTimeField var49 = new org.joda.time.field.OffsetDateTimeField(var14, var45, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var52 = new org.joda.time.IllegalFieldValueException(var45, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var55 = var6.appendFraction(var45, 33, (-948));
    org.joda.time.field.DividedDateTimeField var57 = new org.joda.time.field.DividedDateTimeField(var5, var45, 100);
    int var58 = var57.getMaximumValue();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);

  }

  public void test23() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test23"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalTime var1 = org.joda.time.LocalTime.parse("\uFFFD\uFFFD\uFFFD\uFFFD-W\uFFFD\uFFFD-\uFFFDT00:01:22");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test24() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test24"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var5 = var0.appendYear(23, 8);
    org.joda.time.format.DateTimeFormatterBuilder var8 = var5.appendFractionOfSecond(21, 51);
    org.joda.time.format.DateTimeFormatterBuilder var10 = var8.appendMonthOfYear(20);
    org.joda.time.format.DateTimeFormatterBuilder var13 = var8.appendCenturyOfEra(948, (-3));
    org.joda.time.format.DateTimeFormatterBuilder var14 = var13.appendMonthOfYearShortText();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test25() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test25"); }


    org.joda.time.Period var4 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var6 = var4.plusYears((-1));
    org.joda.time.Minutes var7 = var4.toStandardMinutes();
    org.joda.time.Minutes var9 = org.joda.time.Minutes.minutes(10);
    org.joda.time.Minutes var10 = var7.minus(var9);
    org.joda.time.Minutes var12 = var10.plus(4);
    org.joda.time.PeriodType var13 = var12.getPeriodType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test26() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test26"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.LocalTime var3 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var1);
    org.joda.time.LocalTime var5 = var3.withMillisOfSecond(1);
    org.joda.time.LocalTime var7 = var5.minusHours((-1));
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    var10.setWeekOfWeekyear(1);
    int var13 = var10.getRoundingMode();
    var10.addMillis(100);
    var10.setSecondOfMinute(10);
    org.joda.time.PeriodType var18 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var19 = new org.joda.time.Period((org.joda.time.ReadableDuration)var9, (org.joda.time.ReadableInstant)var10, var18);
    org.joda.time.LocalTime var20 = var7.plus((org.joda.time.ReadablePeriod)var19);
    int var21 = var7.getSecondOfMinute();
    org.joda.time.LocalTime var23 = var7.minusSeconds(15795333);
    org.joda.time.TimeOfDay var24 = new org.joda.time.TimeOfDay();
    int var25 = var24.size();
    org.joda.time.chrono.EthiopicChronology var27 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var28 = var27.hours();
    org.joda.time.LocalTime var29 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var27);
    org.joda.time.LocalTime var31 = var29.withMillisOfSecond(1);
    org.joda.time.LocalTime var33 = var31.minusHours((-1));
    org.joda.time.Years var34 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var24, (org.joda.time.ReadablePartial)var33);
    org.joda.time.chrono.EthiopicChronology var35 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var36 = var35.dayOfYear();
    org.joda.time.YearMonthDay var37 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var35);
    org.joda.time.TimeOfDay var38 = var24.withChronologyRetainFields((org.joda.time.Chronology)var35);
    org.joda.time.TimeOfDay var40 = var38.plusMillis(2005);
    java.lang.String var41 = var38.toString();
    org.joda.time.TimeOfDay var43 = var38.plusSeconds(4);
    org.joda.time.chrono.JulianChronology var44 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var45 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var44);
    org.joda.time.LocalDate var46 = var45.toLocalDate();
    org.joda.time.MutableDateTime var47 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var48 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var45, (org.joda.time.ReadableInstant)var47);
    org.joda.time.chrono.JulianChronology var49 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var50 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var49);
    org.joda.time.LocalDate var51 = var50.toLocalDate();
    org.joda.time.MutableDateTime var52 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var53 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var50, (org.joda.time.ReadableInstant)var52);
    org.joda.time.MutableDateTime var54 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var55 = var54.year();
    boolean var56 = var52.isBefore((org.joda.time.ReadableInstant)var54);
    org.joda.time.Duration var58 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var60 = org.joda.time.Duration.standardHours((-1L));
    boolean var61 = var58.isShorterThan((org.joda.time.ReadableDuration)var60);
    org.joda.time.Duration var63 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var65 = org.joda.time.Duration.standardHours((-1L));
    boolean var66 = var63.isShorterThan((org.joda.time.ReadableDuration)var65);
    org.joda.time.Duration var67 = var58.plus((org.joda.time.ReadableDuration)var63);
    var54.add((org.joda.time.ReadableDuration)var63);
    org.joda.time.Seconds var69 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var45, (org.joda.time.ReadableInstant)var54);
    org.joda.time.Seconds var70 = var69.negated();
    org.joda.time.Seconds var72 = var70.plus(240);
    org.joda.time.TimeOfDay var73 = var38.plus((org.joda.time.ReadablePeriod)var70);
    org.joda.time.Seconds var75 = var70.dividedBy(51);
    org.joda.time.LocalTime var76 = var23.minus((org.joda.time.ReadablePeriod)var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "T00:00:00.110"+ "'", var41.equals("T00:00:00.110"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test27() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test27"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.PeriodType var2 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var3 = new org.joda.time.MutablePeriod(var2);
    int var4 = var3.getSeconds();
    int var5 = var3.getMonths();
    var3.setWeeks((-1));
    org.joda.time.Weeks var8 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod)var3);
    org.joda.time.Weeks var10 = var8.multipliedBy(86399);
    org.joda.time.Duration var11 = var8.toStandardDuration();
    org.joda.time.Duration var13 = var11.plus(1377735781323L);
    org.joda.time.Interval var14 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableDuration)var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test28() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test28"); }


    org.joda.time.PeriodType var1 = org.joda.time.PeriodType.yearDay();
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var2.setChronology((org.joda.time.Chronology)var5);
    org.joda.time.MutablePeriod var7 = new org.joda.time.MutablePeriod(0L, var1, (org.joda.time.Chronology)var5);
    org.joda.time.LocalTime var8 = new org.joda.time.LocalTime((org.joda.time.Chronology)var5);
    java.lang.String var9 = var8.toString();
    org.joda.time.LocalTime var11 = var8.minusSeconds(884);
    org.joda.time.LocalTime.Property var12 = var8.millisOfDay();
    org.joda.time.DateTime var13 = var8.toDateTimeToday();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "00:00:00.010"+ "'", var9.equals("00:00:00.010"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test29() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test29"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.withMonthOfYear(1);
    org.joda.time.DateMidnight var5 = var2.toDateMidnight();
    int var6 = var2.getWeekyear();
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var8 = var7.year();
    org.joda.time.MutableDateTime.Property var9 = var7.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.Period var16 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var18 = var16.plusSeconds(100);
    org.joda.time.Period var20 = var16.minusMillis(10);
    boolean var21 = var11.equals((java.lang.Object)10);
    org.joda.time.Weeks var22 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableInstant)var11);
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var24 = var23.year();
    org.joda.time.MutableDateTime.Property var25 = var23.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var26 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var27 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var26);
    org.joda.time.Period var32 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var34 = var32.plusSeconds(100);
    org.joda.time.Period var36 = var32.minusMillis(10);
    boolean var37 = var27.equals((java.lang.Object)10);
    org.joda.time.Weeks var38 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var23, (org.joda.time.ReadableInstant)var27);
    org.joda.time.Weeks var39 = var22.minus(var38);
    org.joda.time.MutableDateTime var40 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var41 = var40.year();
    org.joda.time.MutableDateTime.Property var42 = var40.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var43 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var44 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var43);
    org.joda.time.Period var49 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var51 = var49.plusSeconds(100);
    org.joda.time.Period var53 = var49.minusMillis(10);
    boolean var54 = var44.equals((java.lang.Object)10);
    org.joda.time.Weeks var55 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var40, (org.joda.time.ReadableInstant)var44);
    org.joda.time.MutableDateTime var56 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var57 = var56.year();
    org.joda.time.MutableDateTime.Property var58 = var56.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var59 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var60 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var59);
    org.joda.time.Period var65 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var67 = var65.plusSeconds(100);
    org.joda.time.Period var69 = var65.minusMillis(10);
    boolean var70 = var60.equals((java.lang.Object)10);
    org.joda.time.Weeks var71 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var56, (org.joda.time.ReadableInstant)var60);
    org.joda.time.Weeks var72 = var55.minus(var71);
    boolean var73 = var39.isGreaterThan(var55);
    org.joda.time.LocalDate var74 = var2.minus((org.joda.time.ReadablePeriod)var39);
    org.joda.time.LocalDate.Property var75 = var2.year();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1969);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test30() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test30"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    org.joda.time.LocalTime var1 = var0.toLocalTime();
    org.joda.time.LocalDateTime.Property var2 = var0.year();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test31() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test31"); }


    org.joda.time.MutableInterval var0 = new org.joda.time.MutableInterval();
    org.joda.time.MutableInterval var1 = var0.copy();
    org.joda.time.DateTime var2 = var1.getStart();
    java.util.Date var3 = var2.toDate();
    org.joda.time.DateTime var4 = var2.withLaterOffsetAtOverlap();
    int var5 = var4.getMillisOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 100);

  }

  public void test32() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test32"); }


    org.joda.time.DateTime var0 = org.joda.time.DateTime.now();
    org.joda.time.DateTime var2 = var0.withMillis(0L);
    org.joda.time.DateTime var4 = var0.minusMonths(33);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.LocalDate var9 = var7.minusMonths(0);
    org.joda.time.DateTime var10 = var7.toDateTimeAtMidnight();
    org.joda.time.DateTime var12 = var10.withMillis(100L);
    int var13 = var10.getWeekyear();
    org.joda.time.DateTime var15 = var10.withYear(86399);
    org.joda.time.DateTime.Property var16 = var15.year();
    org.joda.time.Hours var17 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadableInstant)var0, (org.joda.time.ReadableInstant)var15);
    org.joda.time.chrono.EthiopicChronology var18 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var19 = var18.dayOfYear();
    org.joda.time.YearMonthDay var20 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var18);
    int var21 = var20.getYear();
    org.joda.time.YearMonthDay var23 = var20.withYear(28);
    org.joda.time.Instant var25 = new org.joda.time.Instant(2762381894421796L);
    long var26 = var25.getMillis();
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var30 = org.joda.time.Duration.standardHours((-1L));
    boolean var31 = var28.isShorterThan((org.joda.time.ReadableDuration)var30);
    org.joda.time.Duration var32 = var28.toDuration();
    org.joda.time.Duration var34 = org.joda.time.Duration.standardHours((-1L));
    boolean var35 = var32.isShorterThan((org.joda.time.ReadableDuration)var34);
    org.joda.time.Years var37 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var38 = var37.getPeriodType();
    org.joda.time.Period var39 = new org.joda.time.Period((org.joda.time.ReadableInstant)var25, (org.joda.time.ReadableDuration)var32, var38);
    org.joda.time.YearMonthDay var40 = var20.minus((org.joda.time.ReadablePeriod)var39);
    org.joda.time.tz.FixedDateTimeZone var45 = new org.joda.time.tz.FixedDateTimeZone("PT0H", "ISOChronology[UTC]", 100, 13);
    org.joda.time.PeriodType var46 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var47 = new org.joda.time.MutablePeriod(var46);
    var47.addDays(1);
    org.joda.time.Duration var51 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var53 = org.joda.time.Duration.standardHours((-1L));
    boolean var54 = var51.isShorterThan((org.joda.time.ReadableDuration)var53);
    var47.add((org.joda.time.ReadableDuration)var53);
    org.joda.time.MutableDateTime var56 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var57 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var53, (org.joda.time.ReadableInstant)var56);
    var57.clear();
    org.joda.time.MutableDateTime var59 = new org.joda.time.MutableDateTime();
    org.joda.time.chrono.JulianChronology var60 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var61 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var60);
    org.joda.time.LocalDate var62 = var61.toLocalDate();
    org.joda.time.MutableDateTime var63 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var64 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var61, (org.joda.time.ReadableInstant)var63);
    org.joda.time.MutableDateTime var65 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var66 = var65.year();
    boolean var67 = var63.isBefore((org.joda.time.ReadableInstant)var65);
    org.joda.time.Duration var69 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var71 = org.joda.time.Duration.standardHours((-1L));
    boolean var72 = var69.isShorterThan((org.joda.time.ReadableDuration)var71);
    org.joda.time.Duration var74 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var76 = org.joda.time.Duration.standardHours((-1L));
    boolean var77 = var74.isShorterThan((org.joda.time.ReadableDuration)var76);
    org.joda.time.Duration var78 = var69.plus((org.joda.time.ReadableDuration)var74);
    var65.add((org.joda.time.ReadableDuration)var74);
    org.joda.time.MutableDateTime.Property var80 = var65.dayOfWeek();
    var57.setPeriod((org.joda.time.ReadableInstant)var59, (org.joda.time.ReadableInstant)var65);
    boolean var82 = var45.equals((java.lang.Object)var57);
    boolean var83 = var45.isFixed();
    org.joda.time.LocalTime var84 = org.joda.time.LocalTime.now((org.joda.time.DateTimeZone)var45);
    org.joda.time.DateTime var85 = var20.toDateTimeAtCurrentTime((org.joda.time.DateTimeZone)var45);
    org.joda.time.DateTime var86 = var0.toDateTime((org.joda.time.DateTimeZone)var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 1969);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1962);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2762381894421796L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test33() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test33"); }


    org.joda.time.MonthDay var1 = new org.joda.time.MonthDay(1377746597600L);

  }

  public void test34() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test34"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.DurationField var19 = var18.getRangeDurationField();
    int var21 = var18.getMaximumValue(2762381894421796L);
    boolean var22 = var18.isSupported();
    org.joda.time.Instant var23 = org.joda.time.Instant.now();
    org.joda.time.DateTimeZone var25 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.MutableDateTime var26 = var23.toMutableDateTime(var25);
    org.joda.time.MonthDay var27 = org.joda.time.MonthDay.now(var25);
    int[] var31 = new int[] { 1, 1, 0};
    int var32 = var18.getMaximumValue((org.joda.time.ReadablePartial)var27, var31);
    org.joda.time.format.DateTimeFormatterBuilder var33 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var35 = var33.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var37 = var33.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var38 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var39 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var38);
    org.joda.time.LocalDate var40 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var38);
    org.joda.time.DateTimeField var41 = var38.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var42 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var43 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var44 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var43);
    org.joda.time.LocalDate var45 = var44.toLocalDate();
    org.joda.time.LocalDate var47 = var45.minusMonths(0);
    int[] var49 = var42.get((org.joda.time.ReadablePartial)var47, 100L);
    org.joda.time.chrono.EthiopicChronology var53 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var54 = var53.hours();
    org.joda.time.LocalTime var55 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var53);
    org.joda.time.Period var56 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var53);
    org.joda.time.DateTimeField var57 = var53.millisOfSecond();
    org.joda.time.DateTimeField var58 = var53.secondOfDay();
    org.joda.time.field.SkipDateTimeField var60 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var42, var58, 100);
    org.joda.time.LocalDateTime var61 = org.joda.time.LocalDateTime.now();
    int var62 = var61.getDayOfYear();
    org.joda.time.Chronology var63 = var61.getChronology();
    int var64 = var61.getYearOfCentury();
    int var65 = var60.getMaximumValue((org.joda.time.ReadablePartial)var61);
    boolean var67 = var60.isLeap(1L);
    org.joda.time.LocalDateTime var68 = org.joda.time.LocalDateTime.now();
    int var69 = var68.getDayOfYear();
    int var70 = var60.getMinimumValue((org.joda.time.ReadablePartial)var68);
    org.joda.time.DurationField var71 = var60.getDurationField();
    org.joda.time.DateTimeFieldType var72 = var60.getType();
    org.joda.time.field.OffsetDateTimeField var76 = new org.joda.time.field.OffsetDateTimeField(var41, var72, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var79 = new org.joda.time.IllegalFieldValueException(var72, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var82 = var33.appendFraction(var72, 33, (-948));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MonthDay.Property var83 = var27.property(var72);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test35() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test35"); }


    org.joda.time.PeriodType var2 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var3 = new org.joda.time.MutablePeriod(var2);
    var3.addDays(1);
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    boolean var10 = var7.isShorterThan((org.joda.time.ReadableDuration)var9);
    var3.add((org.joda.time.ReadableDuration)var9);
    org.joda.time.MutableDateTime var12 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var13 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var9, (org.joda.time.ReadableInstant)var12);
    var13.clear();
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var16 = new org.joda.time.MutablePeriod(var15);
    var16.addDays(1);
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var22 = org.joda.time.Duration.standardHours((-1L));
    boolean var23 = var20.isShorterThan((org.joda.time.ReadableDuration)var22);
    var16.add((org.joda.time.ReadableDuration)var22);
    var13.add((org.joda.time.ReadablePeriod)var16);
    org.joda.time.chrono.JulianChronology var26 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var27 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var26);
    org.joda.time.LocalDate var28 = var27.toLocalDate();
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var30 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var27, (org.joda.time.ReadableInstant)var29);
    org.joda.time.MutableDateTime var31 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var32 = var31.year();
    boolean var33 = var29.isBefore((org.joda.time.ReadableInstant)var31);
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var37 = org.joda.time.Duration.standardHours((-1L));
    boolean var38 = var35.isShorterThan((org.joda.time.ReadableDuration)var37);
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var42 = org.joda.time.Duration.standardHours((-1L));
    boolean var43 = var40.isShorterThan((org.joda.time.ReadableDuration)var42);
    org.joda.time.Duration var44 = var35.plus((org.joda.time.ReadableDuration)var40);
    var31.add((org.joda.time.ReadableDuration)var40);
    org.joda.time.chrono.JulianChronology var46 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var47 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var46);
    org.joda.time.LocalDate var48 = var47.toLocalDate();
    org.joda.time.MutableDateTime var49 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var50 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var47, (org.joda.time.ReadableInstant)var49);
    org.joda.time.MutableDateTime var51 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var52 = var51.year();
    boolean var53 = var49.isBefore((org.joda.time.ReadableInstant)var51);
    org.joda.time.Interval var54 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var31, (org.joda.time.ReadableInstant)var51);
    boolean var56 = var54.isAfter(10L);
    org.joda.time.MutableDateTime var57 = new org.joda.time.MutableDateTime();
    var57.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var60 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var57.setChronology((org.joda.time.Chronology)var60);
    org.joda.time.Interval var62 = var54.withChronology((org.joda.time.Chronology)var60);
    var13.setPeriod((org.joda.time.ReadableInterval)var54);
    org.joda.time.Duration var65 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var66 = new org.joda.time.MutableDateTime();
    var66.setWeekOfWeekyear(1);
    int var69 = var66.getRoundingMode();
    var66.addMillis(100);
    var66.setSecondOfMinute(10);
    org.joda.time.PeriodType var74 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var75 = new org.joda.time.Period((org.joda.time.ReadableDuration)var65, (org.joda.time.ReadableInstant)var66, var74);
    org.joda.time.Days var76 = var75.toStandardDays();
    org.joda.time.Hours var77 = var76.toStandardHours();
    org.joda.time.Interval var78 = var54.withPeriodBeforeEnd((org.joda.time.ReadablePeriod)var76);
    org.joda.time.Duration var79 = var78.toDuration();
    org.joda.time.Years var80 = org.joda.time.Years.yearsIn((org.joda.time.ReadableInterval)var78);
    java.lang.String var81 = var78.toString();
    org.joda.time.Instant var83 = new org.joda.time.Instant(2762381894421796L);
    long var84 = var83.getMillis();
    org.joda.time.Instant var87 = var83.withDurationAdded(100L, 216);
    org.joda.time.Interval var88 = var78.withEnd((org.joda.time.ReadableInstant)var83);
    org.joda.time.Chronology var89 = var88.getChronology();
    org.joda.time.Interval var90 = new org.joda.time.Interval((-1100L), 15946L, var89);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Interval var92 = var90.withStartMillis(1377742981L);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "1970-01-01T00:00:00.110+00:00:00.100/1970-01-01T00:00:00.110+00:00:00.100"+ "'", var81.equals("1970-01-01T00:00:00.110+00:00:00.100/1970-01-01T00:00:00.110+00:00:00.100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 2762381894421796L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test36() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test36"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    var5.addDays(104);
    org.joda.time.chrono.EthiopicChronology var22 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var23 = var22.dayOfYear();
    org.joda.time.YearMonthDay var24 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var22);
    int var25 = var24.getDayOfMonth();
    int var26 = var24.getDayOfMonth();
    org.joda.time.tz.FixedDateTimeZone var31 = new org.joda.time.tz.FixedDateTimeZone("PT0H", "ISOChronology[UTC]", 100, 13);
    org.joda.time.PeriodType var32 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var33 = new org.joda.time.MutablePeriod(var32);
    var33.addDays(1);
    org.joda.time.Duration var37 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var39 = org.joda.time.Duration.standardHours((-1L));
    boolean var40 = var37.isShorterThan((org.joda.time.ReadableDuration)var39);
    var33.add((org.joda.time.ReadableDuration)var39);
    org.joda.time.MutableDateTime var42 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var39, (org.joda.time.ReadableInstant)var42);
    var43.clear();
    org.joda.time.MutableDateTime var45 = new org.joda.time.MutableDateTime();
    org.joda.time.chrono.JulianChronology var46 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var47 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var46);
    org.joda.time.LocalDate var48 = var47.toLocalDate();
    org.joda.time.MutableDateTime var49 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var50 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var47, (org.joda.time.ReadableInstant)var49);
    org.joda.time.MutableDateTime var51 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var52 = var51.year();
    boolean var53 = var49.isBefore((org.joda.time.ReadableInstant)var51);
    org.joda.time.Duration var55 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var57 = org.joda.time.Duration.standardHours((-1L));
    boolean var58 = var55.isShorterThan((org.joda.time.ReadableDuration)var57);
    org.joda.time.Duration var60 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var62 = org.joda.time.Duration.standardHours((-1L));
    boolean var63 = var60.isShorterThan((org.joda.time.ReadableDuration)var62);
    org.joda.time.Duration var64 = var55.plus((org.joda.time.ReadableDuration)var60);
    var51.add((org.joda.time.ReadableDuration)var60);
    org.joda.time.MutableDateTime.Property var66 = var51.dayOfWeek();
    var43.setPeriod((org.joda.time.ReadableInstant)var45, (org.joda.time.ReadableInstant)var51);
    boolean var68 = var31.equals((java.lang.Object)var43);
    boolean var69 = var31.isFixed();
    boolean var70 = var31.isFixed();
    org.joda.time.DateTime var71 = var24.toDateTimeAtMidnight((org.joda.time.DateTimeZone)var31);
    org.joda.time.DateMidnight var72 = new org.joda.time.DateMidnight((org.joda.time.DateTimeZone)var31);
    org.joda.time.MutableDateTime var73 = org.joda.time.MutableDateTime.now((org.joda.time.DateTimeZone)var31);
    long var76 = var31.convertLocalToUTC(1377746580759L, true);
    var5.setZoneRetainFields((org.joda.time.DateTimeZone)var31);
    var5.setSecondOfDay(2013);
    org.joda.time.DateTime var80 = org.joda.time.DateTime.now();
    org.joda.time.DateTime var82 = var80.withMillis(0L);
    boolean var83 = var80.isBeforeNow();
    org.joda.time.DateTime var85 = var80.minusMonths(3);
    var5.setTime((org.joda.time.ReadableInstant)var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 1377746580659L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);

  }

  public void test37() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test37"); }


    org.joda.time.format.DateTimeFormatter var1 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
    org.joda.time.chrono.EthiopicChronology var5 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var6 = var5.hours();
    org.joda.time.LocalTime var7 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var5);
    org.joda.time.Period var8 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var5);
    org.joda.time.DateTimeField var9 = var5.millisOfSecond();
    org.joda.time.chrono.LenientChronology var10 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var5);
    org.joda.time.format.DateTimeFormatter var11 = var1.withChronology((org.joda.time.Chronology)var10);
    org.joda.time.chrono.ISOChronology var12 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
    org.joda.time.tz.FixedDateTimeZone var17 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var19 = var17.getOffsetFromLocal(1377742981323L);
    org.joda.time.Chronology var20 = var12.withZone((org.joda.time.DateTimeZone)var17);
    long var22 = var17.nextTransition(9L);
    org.joda.time.Chronology var23 = var10.withZone((org.joda.time.DateTimeZone)var17);
    org.joda.time.MonthDay var24 = new org.joda.time.MonthDay(1386411782707L, (org.joda.time.Chronology)var10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MonthDay var26 = var24.withDayOfMonth(630);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 9L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test38() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test38"); }


    org.joda.time.DateTimeZone var2 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstance(var2);
    org.joda.time.chrono.IslamicChronology var4 = org.joda.time.chrono.IslamicChronology.getInstance(var2);
    org.joda.time.LocalDateTime var5 = new org.joda.time.LocalDateTime(1377746593922L, (org.joda.time.Chronology)var4);
    org.joda.time.LocalDateTime var7 = var5.minusMinutes(21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test39() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test39"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.DateMidnight var3 = var1.plusDays(2013);
    org.joda.time.DateMidnight.Property var4 = var1.centuryOfEra();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Period var5 = new org.joda.time.Period((java.lang.Object)var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test40() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test40"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    int var24 = var19.getSecondOfMinute();
    int var25 = var19.getDayOfYear();
    org.joda.time.LocalDateTime.Property var26 = var19.secondOfMinute();
    org.joda.time.LocalDateTime.Property var27 = var19.dayOfWeek();
    org.joda.time.format.DateTimeFormatter var34 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
    org.joda.time.chrono.EthiopicChronology var38 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var39 = var38.hours();
    org.joda.time.LocalTime var40 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var38);
    org.joda.time.Period var41 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var38);
    org.joda.time.DateTimeField var42 = var38.millisOfSecond();
    org.joda.time.chrono.LenientChronology var43 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var38);
    org.joda.time.format.DateTimeFormatter var44 = var34.withChronology((org.joda.time.Chronology)var43);
    org.joda.time.tz.FixedDateTimeZone var49 = new org.joda.time.tz.FixedDateTimeZone("PT0H", "ISOChronology[UTC]", 100, 13);
    org.joda.time.PeriodType var50 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var51 = new org.joda.time.MutablePeriod(var50);
    var51.addDays(1);
    org.joda.time.Duration var55 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var57 = org.joda.time.Duration.standardHours((-1L));
    boolean var58 = var55.isShorterThan((org.joda.time.ReadableDuration)var57);
    var51.add((org.joda.time.ReadableDuration)var57);
    org.joda.time.MutableDateTime var60 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var57, (org.joda.time.ReadableInstant)var60);
    var61.clear();
    org.joda.time.MutableDateTime var63 = new org.joda.time.MutableDateTime();
    org.joda.time.chrono.JulianChronology var64 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var65 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var64);
    org.joda.time.LocalDate var66 = var65.toLocalDate();
    org.joda.time.MutableDateTime var67 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var68 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var65, (org.joda.time.ReadableInstant)var67);
    org.joda.time.MutableDateTime var69 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var70 = var69.year();
    boolean var71 = var67.isBefore((org.joda.time.ReadableInstant)var69);
    org.joda.time.Duration var73 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var75 = org.joda.time.Duration.standardHours((-1L));
    boolean var76 = var73.isShorterThan((org.joda.time.ReadableDuration)var75);
    org.joda.time.Duration var78 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var80 = org.joda.time.Duration.standardHours((-1L));
    boolean var81 = var78.isShorterThan((org.joda.time.ReadableDuration)var80);
    org.joda.time.Duration var82 = var73.plus((org.joda.time.ReadableDuration)var78);
    var69.add((org.joda.time.ReadableDuration)var78);
    org.joda.time.MutableDateTime.Property var84 = var69.dayOfWeek();
    var61.setPeriod((org.joda.time.ReadableInstant)var63, (org.joda.time.ReadableInstant)var69);
    boolean var86 = var49.equals((java.lang.Object)var61);
    org.joda.time.Chronology var87 = var43.withZone((org.joda.time.DateTimeZone)var49);
    org.joda.time.DateTime var88 = new org.joda.time.DateTime(3975, 241, 12196, (-59), 431, 12196, (org.joda.time.Chronology)var43);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MutableInterval var89 = new org.joda.time.MutableInterval((java.lang.Object)var27, (org.joda.time.Chronology)var43);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test41() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test41"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.YearMonthDay var3 = new org.joda.time.YearMonthDay(845, 69, 12217692);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }

  }

  public void test42() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test42"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.DurationField var19 = var18.getRangeDurationField();
    org.joda.time.field.OffsetDateTimeField var21 = new org.joda.time.field.OffsetDateTimeField((org.joda.time.DateTimeField)var18, 228);
    java.lang.String var23 = var21.getAsShortText(1377746593932L);
    org.joda.time.DurationField var24 = var21.getLeapDurationField();
    long var26 = var21.roundFloor((-86379208L));
    org.joda.time.TimeOfDay var27 = new org.joda.time.TimeOfDay();
    int var28 = var27.size();
    org.joda.time.TimeOfDay var30 = var27.withMillisOfSecond(1);
    org.joda.time.TimeOfDay var32 = new org.joda.time.TimeOfDay();
    int var33 = var32.size();
    org.joda.time.TimeOfDay var35 = var32.withMillisOfSecond(1);
    int[] var36 = var35.getValues();
    int[] var38 = var21.addWrapPartial((org.joda.time.ReadablePartial)var30, 0, var36, 1962);
    org.joda.time.TimeOfDay var40 = var30.minusMillis(15946);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "12422"+ "'", var23.equals("12422"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-86380100L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test43() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test43"); }


    org.joda.time.YearMonth var1 = new org.joda.time.YearMonth(0L);
    int var2 = var1.getYear();
    int var3 = var1.getMonthOfYear();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1970);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1);

  }

  public void test44() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test44"); }


    org.joda.time.Period var4 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var6 = var4.plusYears((-1));
    org.joda.time.Years var8 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var9 = var8.getPeriodType();
    org.joda.time.Period var10 = var4.normalizedStandard(var9);
    org.joda.time.PeriodType var11 = var9.withMillisRemoved();
    org.joda.time.PeriodType var12 = var11.withMonthsRemoved();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test45() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test45"); }


    org.joda.time.IllegalFieldValueException var2 = new org.joda.time.IllegalFieldValueException("T20:23:01.948", "Aug 23, 2013 12:00:00 AM");
    java.lang.Number var3 = var2.getUpperBound();
    java.lang.String var4 = var2.getFieldName();
    java.lang.String var5 = var2.getFieldName();
    org.joda.time.DurationFieldType var6 = var2.getDurationFieldType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "T20:23:01.948"+ "'", var4.equals("T20:23:01.948"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "T20:23:01.948"+ "'", var5.equals("T20:23:01.948"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test46() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test46"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    int var3 = var0.getWeekOfWeekyear();
    org.joda.time.LocalDateTime var5 = var0.withDayOfWeek(2);
    org.joda.time.LocalDateTime.Property var6 = var5.yearOfCentury();
    org.joda.time.LocalDateTime var8 = var5.plusHours(69);
    org.joda.time.LocalDateTime var10 = var5.minusHours((-22));
    org.joda.time.PeriodType var11 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var12 = new org.joda.time.MutablePeriod(var11);
    var12.addDays(1);
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    boolean var19 = var16.isShorterThan((org.joda.time.ReadableDuration)var18);
    var12.add((org.joda.time.ReadableDuration)var18);
    org.joda.time.DateTime var21 = org.joda.time.DateTime.now();
    org.joda.time.DateTime var23 = var21.withMillis(0L);
    org.joda.time.MutablePeriod var24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var18, (org.joda.time.ReadableInstant)var23);
    org.joda.time.LocalDateTime var25 = var10.minus((org.joda.time.ReadableDuration)var18);
    org.joda.time.Period var27 = org.joda.time.Period.days(9);
    org.joda.time.Period var29 = var27.withHours(124);
    org.joda.time.Period var32 = new org.joda.time.Period(10L, 1L);
    org.joda.time.Duration var34 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var35 = new org.joda.time.MutableDateTime();
    var35.setWeekOfWeekyear(1);
    int var38 = var35.getRoundingMode();
    var35.addMillis(100);
    var35.setSecondOfMinute(10);
    org.joda.time.PeriodType var43 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var44 = new org.joda.time.Period((org.joda.time.ReadableDuration)var34, (org.joda.time.ReadableInstant)var35, var43);
    org.joda.time.Days var45 = var44.toStandardDays();
    org.joda.time.DurationFieldType var46 = var45.getFieldType();
    int var47 = var32.get(var46);
    org.joda.time.IllegalFieldValueException var49 = new org.joda.time.IllegalFieldValueException(var46, "T20:23:01.948");
    org.joda.time.Period var51 = var27.withFieldAdded(var46, 999);
    org.joda.time.LocalDateTime var53 = var10.withFieldAdded(var46, 57600100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test47() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test47"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.DateTimeField var3 = var1.minuteOfHour();
    org.joda.time.LocalDate var4 = new org.joda.time.LocalDate(1L, (org.joda.time.Chronology)var1);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.MutableDateTime var8 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var9 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var6, (org.joda.time.ReadableInstant)var8);
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.MutableDateTime var13 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var14 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var11, (org.joda.time.ReadableInstant)var13);
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var16 = var15.year();
    boolean var17 = var13.isBefore((org.joda.time.ReadableInstant)var15);
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    boolean var22 = var19.isShorterThan((org.joda.time.ReadableDuration)var21);
    org.joda.time.Duration var24 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var26 = org.joda.time.Duration.standardHours((-1L));
    boolean var27 = var24.isShorterThan((org.joda.time.ReadableDuration)var26);
    org.joda.time.Duration var28 = var19.plus((org.joda.time.ReadableDuration)var24);
    var15.add((org.joda.time.ReadableDuration)var24);
    org.joda.time.Seconds var30 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var6, (org.joda.time.ReadableInstant)var15);
    org.joda.time.Seconds var32 = var30.plus(2005);
    org.joda.time.LocalDate var34 = var4.withPeriodAdded((org.joda.time.ReadablePeriod)var30, 104);
    org.joda.time.chrono.EthiopicChronology var36 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var37 = var36.hours();
    org.joda.time.LocalTime var38 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var36);
    org.joda.time.LocalTime var40 = var38.withMillisOfSecond(1);
    org.joda.time.LocalTime var41 = org.joda.time.LocalTime.now();
    boolean var42 = var40.isAfter((org.joda.time.ReadablePartial)var41);
    org.joda.time.LocalTime var44 = var40.withHourOfDay(4);
    org.joda.time.LocalTime var46 = var40.minusMinutes(33);
    org.joda.time.chrono.EthiopicChronology var47 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
    org.joda.time.DateTimeZone var49 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.YearMonth var50 = new org.joda.time.YearMonth(var49);
    org.joda.time.Chronology var51 = var47.withZone(var49);
    org.joda.time.DateTime var52 = var4.toDateTime(var46, var49);
    int var54 = var49.getOffsetFromLocal((-86390600L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 33);

  }

  public void test48() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test48"); }


    org.joda.time.format.PeriodFormatter var0 = org.joda.time.format.PeriodFormat.getDefault();
    org.joda.time.Months var2 = org.joda.time.Months.months((-1));
    org.joda.time.Months var4 = var2.plus(100);
    int var5 = var2.size();
    java.lang.String var6 = var0.print((org.joda.time.ReadablePeriod)var2);
    org.joda.time.format.PeriodPrinter var7 = var0.getPrinter();
    org.joda.time.PeriodType var8 = var0.getParseType();
    org.joda.time.MutablePeriod var10 = var0.parseMutablePeriod("8581 seconds");
    boolean var11 = var0.isPrinter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "-1 months"+ "'", var6.equals("-1 months"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);

  }

  public void test49() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test49"); }


    org.joda.time.DateTime var0 = new org.joda.time.DateTime();
    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var3 = new org.joda.time.DateMidnight((-1L), (org.joda.time.Chronology)var2);
    org.joda.time.chrono.JulianChronology var4 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var5 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var4);
    org.joda.time.LocalDate var6 = var5.toLocalDate();
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var8 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var7);
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var10 = var9.year();
    boolean var11 = var7.isBefore((org.joda.time.ReadableInstant)var9);
    org.joda.time.Duration var13 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var15 = org.joda.time.Duration.standardHours((-1L));
    boolean var16 = var13.isShorterThan((org.joda.time.ReadableDuration)var15);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    boolean var21 = var18.isShorterThan((org.joda.time.ReadableDuration)var20);
    org.joda.time.Duration var22 = var13.plus((org.joda.time.ReadableDuration)var18);
    var9.add((org.joda.time.ReadableDuration)var18);
    var9.setHourOfDay(10);
    org.joda.time.Years var26 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var3, (org.joda.time.ReadableInstant)var9);
    org.joda.time.Period var27 = new org.joda.time.Period((org.joda.time.ReadableInstant)var0, (org.joda.time.ReadableInstant)var9);
    org.joda.time.DateTime var29 = var0.plus(1377768182707L);
    org.joda.time.DateTime var31 = var0.withYear(893);
    org.joda.time.chrono.JulianChronology var32 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var33 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var32);
    org.joda.time.LocalDate var34 = var33.toLocalDate();
    org.joda.time.Instant var35 = var33.toInstant();
    org.joda.time.LocalDateTime var36 = org.joda.time.LocalDateTime.now();
    int var37 = var36.getDayOfYear();
    org.joda.time.Chronology var38 = var36.getChronology();
    org.joda.time.YearMonthDay var39 = new org.joda.time.YearMonthDay(var38);
    org.joda.time.YearMonthDay var41 = var39.plusYears(2013);
    org.joda.time.TimeOfDay var42 = new org.joda.time.TimeOfDay();
    int var43 = var42.size();
    org.joda.time.chrono.EthiopicChronology var45 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var46 = var45.hours();
    org.joda.time.LocalTime var47 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var45);
    org.joda.time.LocalTime var49 = var47.withMillisOfSecond(1);
    org.joda.time.LocalTime var51 = var49.minusHours((-1));
    org.joda.time.Years var52 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var42, (org.joda.time.ReadablePartial)var51);
    int var53 = var42.getMillisOfSecond();
    org.joda.time.TimeOfDay var55 = var42.minusMillis((-9));
    org.joda.time.chrono.ISOChronology var56 = org.joda.time.chrono.ISOChronology.getInstance();
    org.joda.time.tz.FixedDateTimeZone var61 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var63 = var61.getOffsetFromLocal(1377742981323L);
    org.joda.time.DateTimeZone var65 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.chrono.JulianChronology var66 = org.joda.time.chrono.JulianChronology.getInstance(var65);
    long var68 = var61.getMillisKeepLocal(var65, 1377746580759L);
    org.joda.time.Chronology var69 = var56.withZone(var65);
    java.util.TimeZone var70 = var65.toTimeZone();
    org.joda.time.DateTime var71 = var41.toDateTime(var55, var65);
    org.joda.time.DateTime var72 = var35.toDateTime(var65);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MutableInterval var73 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant)var0, (org.joda.time.ReadableInstant)var35);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 110);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 1377746580754L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test50() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test50"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.Instant var3 = var1.toInstant();
    org.joda.time.Chronology var4 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant)var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test51() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test51"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
    org.joda.time.DateTimeZone var2 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.YearMonth var3 = new org.joda.time.YearMonth(var2);
    org.joda.time.Chronology var4 = var0.withZone(var2);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.MutableDateTime var8 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var9 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var6, (org.joda.time.ReadableInstant)var8);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var11 = var10.year();
    boolean var12 = var8.isBefore((org.joda.time.ReadableInstant)var10);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    boolean var22 = var19.isShorterThan((org.joda.time.ReadableDuration)var21);
    org.joda.time.Duration var23 = var14.plus((org.joda.time.ReadableDuration)var19);
    var10.add((org.joda.time.ReadableDuration)var19);
    org.joda.time.chrono.JulianChronology var25 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var26 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var25);
    org.joda.time.LocalDate var27 = var26.toLocalDate();
    org.joda.time.MutableDateTime var28 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var29 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var26, (org.joda.time.ReadableInstant)var28);
    org.joda.time.MutableDateTime var30 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var31 = var30.year();
    boolean var32 = var28.isBefore((org.joda.time.ReadableInstant)var30);
    org.joda.time.Interval var33 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var10, (org.joda.time.ReadableInstant)var30);
    var10.setDayOfYear(104);
    org.joda.time.chrono.JulianChronology var36 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var37 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var36);
    org.joda.time.Period var42 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var44 = var42.plusSeconds(100);
    org.joda.time.Period var46 = var42.minusMillis(10);
    boolean var47 = var37.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var48 = var37.dayOfYear();
    int var49 = var37.getSecondOfDay();
    org.joda.time.DateMidnight var51 = var37.withWeekyear(240);
    var10.setDate((org.joda.time.ReadableInstant)var37);
    int var53 = var2.getOffset((org.joda.time.ReadableInstant)var37);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateMidnight var55 = var37.withEra(12182);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 33);

  }

  public void test52() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test52"); }


    org.joda.time.Period var7 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var9 = var7.plusYears((-1));
    org.joda.time.Years var11 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var12 = var11.getPeriodType();
    org.joda.time.Period var13 = var7.normalizedStandard(var12);
    org.joda.time.PeriodType var14 = var12.withMillisRemoved();
    org.joda.time.MutablePeriod var15 = new org.joda.time.MutablePeriod(var12);
    org.joda.time.PeriodType var16 = var12.withYearsRemoved();
    org.joda.time.Period var17 = new org.joda.time.Period(86400000L, var16);
    org.joda.time.LocalDateTime var18 = org.joda.time.LocalDateTime.now();
    int var19 = var18.getDayOfYear();
    org.joda.time.Chronology var20 = var18.getChronology();
    org.joda.time.chrono.StrictChronology var21 = org.joda.time.chrono.StrictChronology.getInstance(var20);
    org.joda.time.chrono.JulianChronology var22 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var23 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var22);
    org.joda.time.LocalDate var24 = var23.toLocalDate();
    org.joda.time.LocalDate var26 = var24.withMonthOfYear(1);
    org.joda.time.LocalDate var28 = var24.withWeekyear(1);
    org.joda.time.LocalDate var30 = var24.withDayOfYear(1);
    org.joda.time.LocalDate var32 = var30.minusMonths(16);
    boolean var33 = var21.equals((java.lang.Object)16);
    java.lang.String var34 = var21.toString();
    org.joda.time.Period var35 = new org.joda.time.Period(1000L, 1377742982607L, var16, (org.joda.time.Chronology)var21);
    org.joda.time.PeriodType var36 = org.joda.time.DateTimeUtils.getPeriodType(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "StrictChronology[ISOChronology[UTC]]"+ "'", var34.equals("StrictChronology[ISOChronology[UTC]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test53() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test53"); }


    org.joda.time.MutableDateTime var1 = new org.joda.time.MutableDateTime(1377746599386L);

  }

  public void test54() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test54"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    int var3 = var0.getWeekOfWeekyear();
    org.joda.time.LocalDateTime var5 = var0.withDayOfWeek(2);
    org.joda.time.LocalDateTime.Property var6 = var5.yearOfCentury();
    org.joda.time.LocalDateTime var8 = var5.plusHours(69);
    org.joda.time.LocalDateTime var10 = var5.minusHours((-22));
    org.joda.time.PeriodType var11 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var12 = new org.joda.time.MutablePeriod(var11);
    var12.addDays(1);
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    boolean var19 = var16.isShorterThan((org.joda.time.ReadableDuration)var18);
    var12.add((org.joda.time.ReadableDuration)var18);
    org.joda.time.DateTime var21 = org.joda.time.DateTime.now();
    org.joda.time.DateTime var23 = var21.withMillis(0L);
    org.joda.time.MutablePeriod var24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var18, (org.joda.time.ReadableInstant)var23);
    org.joda.time.LocalDateTime var25 = var10.minus((org.joda.time.ReadableDuration)var18);
    org.joda.time.format.DateTimeFormatterBuilder var26 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var28 = var26.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var30 = var26.appendClockhourOfHalfday(692);
    org.joda.time.format.DateTimeFormatterBuilder var31 = var30.appendTimeZoneId();
    org.joda.time.format.DateTimeFormatterBuilder var32 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var34 = var32.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var36 = var32.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var37 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var38 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var37);
    org.joda.time.LocalDate var39 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var37);
    org.joda.time.DateTimeField var40 = var37.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var41 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var42 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var43 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var42);
    org.joda.time.LocalDate var44 = var43.toLocalDate();
    org.joda.time.LocalDate var46 = var44.minusMonths(0);
    int[] var48 = var41.get((org.joda.time.ReadablePartial)var46, 100L);
    org.joda.time.chrono.EthiopicChronology var52 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var53 = var52.hours();
    org.joda.time.LocalTime var54 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var52);
    org.joda.time.Period var55 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var52);
    org.joda.time.DateTimeField var56 = var52.millisOfSecond();
    org.joda.time.DateTimeField var57 = var52.secondOfDay();
    org.joda.time.field.SkipDateTimeField var59 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var41, var57, 100);
    org.joda.time.LocalDateTime var60 = org.joda.time.LocalDateTime.now();
    int var61 = var60.getDayOfYear();
    org.joda.time.Chronology var62 = var60.getChronology();
    int var63 = var60.getYearOfCentury();
    int var64 = var59.getMaximumValue((org.joda.time.ReadablePartial)var60);
    boolean var66 = var59.isLeap(1L);
    org.joda.time.LocalDateTime var67 = org.joda.time.LocalDateTime.now();
    int var68 = var67.getDayOfYear();
    int var69 = var59.getMinimumValue((org.joda.time.ReadablePartial)var67);
    org.joda.time.DurationField var70 = var59.getDurationField();
    org.joda.time.DateTimeFieldType var71 = var59.getType();
    org.joda.time.field.OffsetDateTimeField var75 = new org.joda.time.field.OffsetDateTimeField(var40, var71, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var78 = new org.joda.time.IllegalFieldValueException(var71, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var81 = var32.appendFraction(var71, 33, (-948));
    org.joda.time.format.DateTimeFormatterBuilder var82 = var31.appendText(var71);
    org.joda.time.LocalDateTime var84 = var10.withField(var71, 25785);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDateTime var88 = var84.withDate(240, 22, 611);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test55() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test55"); }


    org.joda.time.TimeOfDay var0 = new org.joda.time.TimeOfDay();
    int var1 = var0.size();
    org.joda.time.chrono.EthiopicChronology var3 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var4 = var3.hours();
    org.joda.time.LocalTime var5 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var3);
    org.joda.time.LocalTime var7 = var5.withMillisOfSecond(1);
    org.joda.time.LocalTime var9 = var7.minusHours((-1));
    org.joda.time.Years var10 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var0, (org.joda.time.ReadablePartial)var9);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var12 = var11.dayOfYear();
    org.joda.time.YearMonthDay var13 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var11);
    org.joda.time.TimeOfDay var14 = var0.withChronologyRetainFields((org.joda.time.Chronology)var11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.TimeOfDay var16 = var0.withHourOfDay((-1440));
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test56() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test56"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.withMonthOfYear(1);
    org.joda.time.LocalDate var6 = var4.withEra(1);
    int var7 = var6.getDayOfYear();
    org.joda.time.chrono.IslamicChronology var8 = org.joda.time.chrono.IslamicChronology.getInstanceUTC();
    org.joda.time.format.DateTimeFormatter var9 = org.joda.time.format.ISODateTimeFormat.localDateParser();
    org.joda.time.DateTimeZone var10 = var9.getZone();
    org.joda.time.Chronology var11 = var8.withZone(var10);
    org.joda.time.Interval var12 = var6.toInterval(var10);
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var14 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var13);
    org.joda.time.LocalDate var15 = var14.toLocalDate();
    org.joda.time.LocalDate var17 = var15.minusMonths(0);
    org.joda.time.DateTime var18 = var17.toDateTimeAtMidnight();
    int var19 = var6.compareTo((org.joda.time.ReadablePartial)var17);
    org.joda.time.DateTimeZone var21 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.DateTimeZone var22 = org.joda.time.DateTimeUtils.getZone(var21);
    org.joda.time.LocalDateTime var23 = new org.joda.time.LocalDateTime(var21);
    org.joda.time.MonthDay var24 = new org.joda.time.MonthDay(var21);
    org.joda.time.DateMidnight var25 = var17.toDateMidnight(var21);
    org.joda.time.Period var30 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var32 = var30.plusYears((-1));
    org.joda.time.Minutes var33 = var30.toStandardMinutes();
    org.joda.time.Minutes var35 = org.joda.time.Minutes.minutes(10);
    org.joda.time.Minutes var36 = var33.minus(var35);
    org.joda.time.DurationFieldType var37 = var36.getFieldType();
    org.joda.time.Duration var38 = var36.toStandardDuration();
    org.joda.time.Seconds var39 = var36.toStandardSeconds();
    org.joda.time.DateMidnight var41 = var25.withPeriodAdded((org.joda.time.ReadablePeriod)var36, 6);
    int var42 = var25.getWeekyear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1969);

  }

  public void test57() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test57"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.LocalDateTime var3 = var0.minusSeconds(2005);
    org.joda.time.Chronology var4 = var0.getChronology();
    org.joda.time.DateTimeZone var6 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.MutableDateTime var7 = org.joda.time.MutableDateTime.now(var6);
    org.joda.time.DateTime var8 = var0.toDateTime(var6);
    int var9 = var0.getSecondOfMinute();
    org.joda.time.DateTime var10 = var0.toDateTime();
    org.joda.time.LocalDateTime var12 = var0.withYear(928);
    org.joda.time.LocalDateTime var14 = var0.withDayOfMonth(14);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDateTime var16 = var14.withMonthOfYear(379);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test58() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test58"); }


    org.joda.time.YearMonth var1 = new org.joda.time.YearMonth(10L);
    org.joda.time.chrono.EthiopicChronology var2 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.YearMonth var3 = var1.withChronologyRetainFields((org.joda.time.Chronology)var2);
    org.joda.time.YearMonth var5 = var3.withMonthOfYear(10);
    org.joda.time.Interval var6 = var3.toInterval();
    org.joda.time.YearMonth var8 = var3.minusYears((-17));
    org.joda.time.format.DateTimeFormatterBuilder var9 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var11 = var9.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var13 = var9.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var14 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var15 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var14);
    org.joda.time.LocalDate var16 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var14);
    org.joda.time.DateTimeField var17 = var14.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var18 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var19 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var20 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var19);
    org.joda.time.LocalDate var21 = var20.toLocalDate();
    org.joda.time.LocalDate var23 = var21.minusMonths(0);
    int[] var25 = var18.get((org.joda.time.ReadablePartial)var23, 100L);
    org.joda.time.chrono.EthiopicChronology var29 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var30 = var29.hours();
    org.joda.time.LocalTime var31 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var29);
    org.joda.time.Period var32 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var29);
    org.joda.time.DateTimeField var33 = var29.millisOfSecond();
    org.joda.time.DateTimeField var34 = var29.secondOfDay();
    org.joda.time.field.SkipDateTimeField var36 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var18, var34, 100);
    org.joda.time.LocalDateTime var37 = org.joda.time.LocalDateTime.now();
    int var38 = var37.getDayOfYear();
    org.joda.time.Chronology var39 = var37.getChronology();
    int var40 = var37.getYearOfCentury();
    int var41 = var36.getMaximumValue((org.joda.time.ReadablePartial)var37);
    boolean var43 = var36.isLeap(1L);
    org.joda.time.LocalDateTime var44 = org.joda.time.LocalDateTime.now();
    int var45 = var44.getDayOfYear();
    int var46 = var36.getMinimumValue((org.joda.time.ReadablePartial)var44);
    org.joda.time.DurationField var47 = var36.getDurationField();
    org.joda.time.DateTimeFieldType var48 = var36.getType();
    org.joda.time.field.OffsetDateTimeField var52 = new org.joda.time.field.OffsetDateTimeField(var17, var48, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var55 = new org.joda.time.IllegalFieldValueException(var48, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var58 = var9.appendFraction(var48, 33, (-948));
    org.joda.time.Partial var60 = new org.joda.time.Partial(var48, 4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.YearMonth.Property var61 = var3.property(var48);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test59() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test59"); }


    org.joda.time.format.DateTimeFormatter var0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
    boolean var1 = var0.isPrinter();
    java.util.Locale var2 = var0.getLocale();
    boolean var3 = var0.isPrinter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);

  }

  public void test60() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test60"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.DurationField var19 = var18.getRangeDurationField();
    int var21 = var18.getMaximumValue(2762381894421796L);
    boolean var22 = var18.isSupported();
    int var24 = var18.getMinimumValue(208L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);

  }

  public void test61() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test61"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    int var2 = var1.getSeconds();
    int var3 = var1.getMonths();
    var1.setWeeks((-1));
    org.joda.time.Weeks var6 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod)var1);
    org.joda.time.Days var7 = var6.toStandardDays();
    org.joda.time.MutableDateTime var8 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var9 = var8.year();
    org.joda.time.MutableDateTime.Property var10 = var8.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var11 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var12 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var11);
    org.joda.time.Period var17 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var19 = var17.plusSeconds(100);
    org.joda.time.Period var21 = var17.minusMillis(10);
    boolean var22 = var12.equals((java.lang.Object)10);
    org.joda.time.Weeks var23 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var8, (org.joda.time.ReadableInstant)var12);
    org.joda.time.MutableDateTime var24 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var25 = var24.year();
    org.joda.time.MutableDateTime.Property var26 = var24.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var27 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var28 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var27);
    org.joda.time.Period var33 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var35 = var33.plusSeconds(100);
    org.joda.time.Period var37 = var33.minusMillis(10);
    boolean var38 = var28.equals((java.lang.Object)10);
    org.joda.time.Weeks var39 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var24, (org.joda.time.ReadableInstant)var28);
    boolean var40 = var23.isLessThan(var39);
    org.joda.time.Weeks var42 = var39.dividedBy(1);
    org.joda.time.Days var43 = var39.toStandardDays();
    org.joda.time.Days var45 = var43.plus(12);
    org.joda.time.Duration var47 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var48 = new org.joda.time.MutableDateTime();
    var48.setWeekOfWeekyear(1);
    int var51 = var48.getRoundingMode();
    var48.addMillis(100);
    var48.setSecondOfMinute(10);
    org.joda.time.PeriodType var56 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var57 = new org.joda.time.Period((org.joda.time.ReadableDuration)var47, (org.joda.time.ReadableInstant)var48, var56);
    org.joda.time.Days var58 = var57.toStandardDays();
    org.joda.time.DurationFieldType var59 = var58.getFieldType();
    boolean var60 = var43.isLessThan(var58);
    org.joda.time.Days var61 = var7.plus(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test62() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test62"); }


    long var2 = org.joda.time.field.FieldUtils.safeSubtract((-208L), 86400000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-86400208L));

  }

  public void test63() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test63"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.LocalTime var3 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var1);
    org.joda.time.LocalTime var5 = var3.withMillisOfSecond(1);
    org.joda.time.chrono.JulianChronology var6 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var7 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var6);
    org.joda.time.LocalDate var8 = var7.toLocalDate();
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var10 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableInstant)var9);
    org.joda.time.chrono.JulianChronology var11 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var12 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var11);
    org.joda.time.LocalDate var13 = var12.toLocalDate();
    org.joda.time.MutableDateTime var14 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var15 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var12, (org.joda.time.ReadableInstant)var14);
    org.joda.time.MutableDateTime var16 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var17 = var16.year();
    boolean var18 = var14.isBefore((org.joda.time.ReadableInstant)var16);
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var22 = org.joda.time.Duration.standardHours((-1L));
    boolean var23 = var20.isShorterThan((org.joda.time.ReadableDuration)var22);
    org.joda.time.Duration var25 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    boolean var28 = var25.isShorterThan((org.joda.time.ReadableDuration)var27);
    org.joda.time.Duration var29 = var20.plus((org.joda.time.ReadableDuration)var25);
    var16.add((org.joda.time.ReadableDuration)var25);
    org.joda.time.Seconds var31 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableInstant)var16);
    org.joda.time.Seconds var33 = var31.plus(2005);
    org.joda.time.Minutes var34 = var31.toStandardMinutes();
    org.joda.time.Minutes var36 = var34.dividedBy(100);
    org.joda.time.LocalTime var37 = var3.plus((org.joda.time.ReadablePeriod)var36);
    org.joda.time.LocalTime var39 = var3.minusMinutes(22);
    int var40 = var39.getHourOfDay();
    org.joda.time.chrono.EthiopicChronology var42 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var43 = var42.hours();
    org.joda.time.LocalTime var44 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var42);
    org.joda.time.LocalTime var46 = var44.withMillisOfSecond(1);
    org.joda.time.chrono.JulianChronology var47 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var48 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var47);
    org.joda.time.LocalDate var49 = var48.toLocalDate();
    org.joda.time.MutableDateTime var50 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var51 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var48, (org.joda.time.ReadableInstant)var50);
    org.joda.time.chrono.JulianChronology var52 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var53 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var52);
    org.joda.time.LocalDate var54 = var53.toLocalDate();
    org.joda.time.MutableDateTime var55 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var56 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var53, (org.joda.time.ReadableInstant)var55);
    org.joda.time.MutableDateTime var57 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var58 = var57.year();
    boolean var59 = var55.isBefore((org.joda.time.ReadableInstant)var57);
    org.joda.time.Duration var61 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var63 = org.joda.time.Duration.standardHours((-1L));
    boolean var64 = var61.isShorterThan((org.joda.time.ReadableDuration)var63);
    org.joda.time.Duration var66 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var68 = org.joda.time.Duration.standardHours((-1L));
    boolean var69 = var66.isShorterThan((org.joda.time.ReadableDuration)var68);
    org.joda.time.Duration var70 = var61.plus((org.joda.time.ReadableDuration)var66);
    var57.add((org.joda.time.ReadableDuration)var66);
    org.joda.time.Seconds var72 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var48, (org.joda.time.ReadableInstant)var57);
    org.joda.time.Seconds var74 = var72.plus(2005);
    org.joda.time.Minutes var75 = var72.toStandardMinutes();
    org.joda.time.Minutes var77 = var75.dividedBy(100);
    org.joda.time.LocalTime var78 = var44.plus((org.joda.time.ReadablePeriod)var77);
    int var79 = var39.compareTo((org.joda.time.ReadablePartial)var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 1);

  }

  public void test64() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test64"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.YearMonth var1 = org.joda.time.YearMonth.parse("2013-08-29T03:23:16.665+00:00:00.759/2013-08-29T03:23:16.665+00:00:00.759");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test65() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test65"); }


    org.joda.time.LocalDateTime var1 = org.joda.time.LocalDateTime.now();
    int var2 = var1.getDayOfYear();
    org.joda.time.Chronology var3 = var1.getChronology();
    org.joda.time.chrono.StrictChronology var4 = org.joda.time.chrono.StrictChronology.getInstance(var3);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.LocalDate var9 = var7.withMonthOfYear(1);
    org.joda.time.LocalDate var11 = var7.withWeekyear(1);
    org.joda.time.LocalDate var13 = var7.withDayOfYear(1);
    org.joda.time.LocalDate var15 = var13.minusMonths(16);
    boolean var16 = var4.equals((java.lang.Object)16);
    org.joda.time.YearMonth var17 = new org.joda.time.YearMonth(0L, (org.joda.time.Chronology)var4);
    org.joda.time.format.DateTimeFormatter var18 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
    org.joda.time.chrono.EthiopicChronology var22 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var23 = var22.hours();
    org.joda.time.LocalTime var24 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var22);
    org.joda.time.Period var25 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var22);
    org.joda.time.DateTimeField var26 = var22.millisOfSecond();
    org.joda.time.chrono.LenientChronology var27 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var22);
    org.joda.time.format.DateTimeFormatter var28 = var18.withChronology((org.joda.time.Chronology)var27);
    org.joda.time.format.DateTimeFormatter var29 = var28.withZoneUTC();
    java.lang.String var30 = var17.toString(var29);
    org.joda.time.format.DateTimeFormatter var31 = var29.withOffsetParsed();
    org.joda.time.chrono.EthiopicChronology var33 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var34 = var33.hours();
    org.joda.time.LocalTime var35 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var33);
    org.joda.time.LocalTime var37 = var35.withMillisOfSecond(1);
    org.joda.time.LocalTime var38 = org.joda.time.LocalTime.now();
    boolean var39 = var37.isAfter((org.joda.time.ReadablePartial)var38);
    org.joda.time.LocalTime var41 = var37.withHourOfDay(4);
    org.joda.time.LocalTime var43 = var41.plusMillis(0);
    org.joda.time.DateTime var44 = var41.toDateTimeToday();
    java.lang.String var45 = var31.print((org.joda.time.ReadablePartial)var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "\uFFFD\uFFFD"+ "'", var30.equals("\uFFFD\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "04"+ "'", var45.equals("04"));

  }

  public void test66() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test66"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MonthDay var2 = new org.joda.time.MonthDay(12196, (-17));
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }

  }

  public void test67() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test67"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var1 = var0.year();
    org.joda.time.YearMonth var2 = new org.joda.time.YearMonth((java.lang.Object)var0);
    org.joda.time.YearMonth var4 = var2.plusMonths(100);
    int var5 = var2.size();
    org.joda.time.chrono.GregorianChronology var6 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.chrono.JulianChronology var7 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var8 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var7);
    org.joda.time.LocalDate var9 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var7);
    org.joda.time.DurationField var10 = var7.hours();
    org.joda.time.Chronology var11 = var7.withUTC();
    org.joda.time.chrono.JulianChronology var12 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var13 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var12);
    org.joda.time.LocalDate var14 = var13.toLocalDate();
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var16 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var13, (org.joda.time.ReadableInstant)var15);
    org.joda.time.MutableDateTime var17 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var18 = var17.year();
    boolean var19 = var15.isBefore((org.joda.time.ReadableInstant)var17);
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var23 = org.joda.time.Duration.standardHours((-1L));
    boolean var24 = var21.isShorterThan((org.joda.time.ReadableDuration)var23);
    org.joda.time.Duration var26 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    boolean var29 = var26.isShorterThan((org.joda.time.ReadableDuration)var28);
    org.joda.time.Duration var30 = var21.plus((org.joda.time.ReadableDuration)var26);
    var17.add((org.joda.time.ReadableDuration)var26);
    org.joda.time.chrono.JulianChronology var32 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var33 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var32);
    org.joda.time.LocalDate var34 = var33.toLocalDate();
    org.joda.time.MutableDateTime var35 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var36 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var33, (org.joda.time.ReadableInstant)var35);
    org.joda.time.MutableDateTime var37 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var38 = var37.year();
    boolean var39 = var35.isBefore((org.joda.time.ReadableInstant)var37);
    org.joda.time.Interval var40 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var17, (org.joda.time.ReadableInstant)var37);
    org.joda.time.DateTimeZone var41 = var37.getZone();
    org.joda.time.Chronology var42 = var7.withZone(var41);
    org.joda.time.Chronology var43 = var6.withZone(var41);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MutableDateTime var44 = new org.joda.time.MutableDateTime((java.lang.Object)var5, var41);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test68() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test68"); }


    org.joda.time.tz.UTCProvider var0 = new org.joda.time.tz.UTCProvider();
    org.joda.time.DateTimeZone var2 = var0.getZone("03:23:16.037");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test69() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test69"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var24 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var23);
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var26 = var25.year();
    boolean var27 = var23.isBefore((org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var28 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var25);
    org.joda.time.DateTime var29 = org.joda.time.DateTime.now();
    org.joda.time.DateTime var31 = var29.withMillis(0L);
    boolean var32 = var28.isAfter((org.joda.time.ReadableInstant)var29);
    org.joda.time.DateTime.Property var33 = var29.dayOfMonth();
    org.joda.time.DateTime var34 = var29.toDateTimeISO();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test70() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test70"); }


    org.joda.time.Months var1 = org.joda.time.Months.months(69);
    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var3 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var2);
    org.joda.time.LocalDate var4 = var3.toLocalDate();
    org.joda.time.DateMidnight var6 = var3.minusWeeks((-1));
    org.joda.time.Duration var8 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    var9.setWeekOfWeekyear(1);
    int var12 = var9.getRoundingMode();
    var9.addMillis(100);
    var9.setSecondOfMinute(10);
    org.joda.time.PeriodType var17 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var18 = new org.joda.time.Period((org.joda.time.ReadableDuration)var8, (org.joda.time.ReadableInstant)var9, var17);
    org.joda.time.Days var19 = var18.toStandardDays();
    org.joda.time.DurationFieldType var20 = var19.getFieldType();
    org.joda.time.DateMidnight var22 = var6.withFieldAdded(var20, 1);
    org.joda.time.chrono.JulianChronology var23 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var24 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var23);
    org.joda.time.LocalDate var25 = var24.toLocalDate();
    org.joda.time.DateMidnight var27 = var24.minusWeeks((-1));
    org.joda.time.Duration var29 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var30 = new org.joda.time.MutableDateTime();
    var30.setWeekOfWeekyear(1);
    int var33 = var30.getRoundingMode();
    var30.addMillis(100);
    var30.setSecondOfMinute(10);
    org.joda.time.PeriodType var38 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var39 = new org.joda.time.Period((org.joda.time.ReadableDuration)var29, (org.joda.time.ReadableInstant)var30, var38);
    org.joda.time.Days var40 = var39.toStandardDays();
    org.joda.time.DurationFieldType var41 = var40.getFieldType();
    org.joda.time.DateMidnight var43 = var27.withFieldAdded(var41, 1);
    org.joda.time.DateMidnight var45 = var6.withFieldAdded(var41, 13);
    org.joda.time.DateMidnight var48 = var6.withDurationAdded(9L, 21);
    org.joda.time.MutableInterval var49 = new org.joda.time.MutableInterval();
    long var50 = var49.getEndMillis();
    org.joda.time.Months var51 = org.joda.time.Months.monthsIn((org.joda.time.ReadableInterval)var49);
    org.joda.time.Months var53 = var51.plus(2013);
    org.joda.time.TimeOfDay var54 = new org.joda.time.TimeOfDay();
    int var55 = var54.size();
    org.joda.time.chrono.EthiopicChronology var57 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var58 = var57.hours();
    org.joda.time.LocalTime var59 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var57);
    org.joda.time.LocalTime var61 = var59.withMillisOfSecond(1);
    org.joda.time.LocalTime var63 = var61.minusHours((-1));
    org.joda.time.Years var64 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var54, (org.joda.time.ReadablePartial)var63);
    int var65 = var54.getMillisOfSecond();
    org.joda.time.chrono.JulianChronology var66 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.TimeOfDay var67 = var54.withChronologyRetainFields((org.joda.time.Chronology)var66);
    org.joda.time.Months var69 = org.joda.time.Months.months((-1));
    org.joda.time.Months var71 = var69.plus(100);
    int var72 = var69.size();
    org.joda.time.TimeOfDay var74 = var54.withPeriodAdded((org.joda.time.ReadablePeriod)var69, 2013);
    org.joda.time.Months var75 = var53.plus(var69);
    org.joda.time.DateMidnight var77 = var6.withPeriodAdded((org.joda.time.ReadablePeriod)var53, (-948));
    boolean var78 = var1.isLessThan(var53);
    org.joda.time.Months var79 = var1.negated();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 110);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test71() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test71"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var1 = org.joda.time.field.FieldUtils.safeToInt(2755493227240L);
      fail("Expected exception of type java.lang.ArithmeticException");
    } catch (java.lang.ArithmeticException e) {
      // Expected exception.
    }

  }

  public void test72() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test72"); }


    org.joda.time.Instant var0 = new org.joda.time.Instant();
    org.joda.time.Instant var1 = var0.toInstant();
    org.joda.time.PeriodType var2 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var3 = new org.joda.time.MutablePeriod(var2);
    var3.addDays(1);
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    boolean var10 = var7.isShorterThan((org.joda.time.ReadableDuration)var9);
    var3.add((org.joda.time.ReadableDuration)var9);
    org.joda.time.Duration var13 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var15 = org.joda.time.Duration.standardHours((-1L));
    boolean var16 = var13.isShorterThan((org.joda.time.ReadableDuration)var15);
    org.joda.time.Duration var17 = var13.toDuration();
    org.joda.time.chrono.JulianChronology var18 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var19 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var18);
    org.joda.time.LocalDate var20 = var19.toLocalDate();
    org.joda.time.MutableDateTime var21 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var22 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var19, (org.joda.time.ReadableInstant)var21);
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var24 = var23.year();
    boolean var25 = var21.isBefore((org.joda.time.ReadableInstant)var23);
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var29 = org.joda.time.Duration.standardHours((-1L));
    boolean var30 = var27.isShorterThan((org.joda.time.ReadableDuration)var29);
    org.joda.time.Duration var32 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var34 = org.joda.time.Duration.standardHours((-1L));
    boolean var35 = var32.isShorterThan((org.joda.time.ReadableDuration)var34);
    org.joda.time.Duration var36 = var27.plus((org.joda.time.ReadableDuration)var32);
    var23.add((org.joda.time.ReadableDuration)var32);
    org.joda.time.PeriodType var38 = org.joda.time.PeriodType.months();
    org.joda.time.Period var39 = new org.joda.time.Period((org.joda.time.ReadableDuration)var13, (org.joda.time.ReadableInstant)var23, var38);
    org.joda.time.Period var40 = new org.joda.time.Period((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableDuration)var9, var38);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Period var42 = var40.withDays(70);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test73() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test73"); }


    org.joda.time.format.PeriodFormatter var1 = org.joda.time.format.PeriodFormat.getDefault();
    org.joda.time.format.PeriodParser var2 = var1.getParser();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Period var3 = org.joda.time.Period.parse("PT-3600S", var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test74() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test74"); }


    org.joda.time.TimeOfDay var0 = new org.joda.time.TimeOfDay();
    int var1 = var0.size();
    org.joda.time.chrono.EthiopicChronology var3 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var4 = var3.hours();
    org.joda.time.LocalTime var5 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var3);
    org.joda.time.LocalTime var7 = var5.withMillisOfSecond(1);
    org.joda.time.LocalTime var9 = var7.minusHours((-1));
    org.joda.time.Years var10 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var0, (org.joda.time.ReadablePartial)var9);
    int var11 = var0.getMillisOfSecond();
    org.joda.time.TimeOfDay var13 = var0.minusMillis((-9));
    org.joda.time.tz.FixedDateTimeZone var18 = new org.joda.time.tz.FixedDateTimeZone("ConverterManager[6 instant,7 partial,5 duration,5 period,3 interval]", "ConverterManager[6 instant,7 partial,5 duration,5 period,3 interval]", 2, 759);
    org.joda.time.DateTime var19 = var13.toDateTimeToday((org.joda.time.DateTimeZone)var18);
    org.joda.time.YearMonth var21 = new org.joda.time.YearMonth(10L);
    org.joda.time.chrono.EthiopicChronology var22 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.YearMonth var23 = var21.withChronologyRetainFields((org.joda.time.Chronology)var22);
    org.joda.time.YearMonth var25 = var23.withMonthOfYear(10);
    org.joda.time.Interval var26 = var23.toInterval();
    org.joda.time.DateTimeZone var28 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.DateMidnight var29 = org.joda.time.DateMidnight.now(var28);
    org.joda.time.Interval var30 = var23.toInterval(var28);
    org.joda.time.chrono.BuddhistChronology var31 = org.joda.time.chrono.BuddhistChronology.getInstance(var28);
    org.joda.time.DateTime var32 = var19.withZoneRetainFields(var28);
    org.joda.time.DateTime var34 = var32.withSecondOfMinute(23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 110);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test75() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test75"); }


    org.joda.time.format.DateTimeFormatter var0 = org.joda.time.format.ISODateTimeFormat.dateParser();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test76() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test76"); }


    org.joda.time.tz.FixedDateTimeZone var4 = new org.joda.time.tz.FixedDateTimeZone("PT0H", "ISOChronology[UTC]", 100, 13);
    org.joda.time.PeriodType var5 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var6 = new org.joda.time.MutablePeriod(var5);
    var6.addDays(1);
    org.joda.time.Duration var10 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var12 = org.joda.time.Duration.standardHours((-1L));
    boolean var13 = var10.isShorterThan((org.joda.time.ReadableDuration)var12);
    var6.add((org.joda.time.ReadableDuration)var12);
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var12, (org.joda.time.ReadableInstant)var15);
    var16.clear();
    org.joda.time.MutableDateTime var18 = new org.joda.time.MutableDateTime();
    org.joda.time.chrono.JulianChronology var19 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var20 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var19);
    org.joda.time.LocalDate var21 = var20.toLocalDate();
    org.joda.time.MutableDateTime var22 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var23 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var20, (org.joda.time.ReadableInstant)var22);
    org.joda.time.MutableDateTime var24 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var25 = var24.year();
    boolean var26 = var22.isBefore((org.joda.time.ReadableInstant)var24);
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var30 = org.joda.time.Duration.standardHours((-1L));
    boolean var31 = var28.isShorterThan((org.joda.time.ReadableDuration)var30);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    org.joda.time.Duration var37 = var28.plus((org.joda.time.ReadableDuration)var33);
    var24.add((org.joda.time.ReadableDuration)var33);
    org.joda.time.MutableDateTime.Property var39 = var24.dayOfWeek();
    var16.setPeriod((org.joda.time.ReadableInstant)var18, (org.joda.time.ReadableInstant)var24);
    boolean var41 = var4.equals((java.lang.Object)var16);
    boolean var42 = var4.isFixed();
    boolean var43 = var4.isFixed();
    org.joda.time.chrono.EthiopicChronology var44 = org.joda.time.chrono.EthiopicChronology.getInstance((org.joda.time.DateTimeZone)var4);
    org.joda.time.DateTime var45 = org.joda.time.DateTime.now((org.joda.time.DateTimeZone)var4);
    org.joda.time.LocalDate var46 = org.joda.time.LocalDate.now((org.joda.time.DateTimeZone)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test77() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test77"); }


    org.joda.time.Instant var0 = new org.joda.time.Instant();
    org.joda.time.Instant var1 = var0.toInstant();
    org.joda.time.PeriodType var2 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var3 = new org.joda.time.MutablePeriod(var2);
    var3.addDays(1);
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    boolean var10 = var7.isShorterThan((org.joda.time.ReadableDuration)var9);
    var3.add((org.joda.time.ReadableDuration)var9);
    org.joda.time.Duration var13 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var15 = org.joda.time.Duration.standardHours((-1L));
    boolean var16 = var13.isShorterThan((org.joda.time.ReadableDuration)var15);
    org.joda.time.Duration var17 = var13.toDuration();
    org.joda.time.chrono.JulianChronology var18 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var19 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var18);
    org.joda.time.LocalDate var20 = var19.toLocalDate();
    org.joda.time.MutableDateTime var21 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var22 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var19, (org.joda.time.ReadableInstant)var21);
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var24 = var23.year();
    boolean var25 = var21.isBefore((org.joda.time.ReadableInstant)var23);
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var29 = org.joda.time.Duration.standardHours((-1L));
    boolean var30 = var27.isShorterThan((org.joda.time.ReadableDuration)var29);
    org.joda.time.Duration var32 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var34 = org.joda.time.Duration.standardHours((-1L));
    boolean var35 = var32.isShorterThan((org.joda.time.ReadableDuration)var34);
    org.joda.time.Duration var36 = var27.plus((org.joda.time.ReadableDuration)var32);
    var23.add((org.joda.time.ReadableDuration)var32);
    org.joda.time.PeriodType var38 = org.joda.time.PeriodType.months();
    org.joda.time.Period var39 = new org.joda.time.Period((org.joda.time.ReadableDuration)var13, (org.joda.time.ReadableInstant)var23, var38);
    org.joda.time.Period var40 = new org.joda.time.Period((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableDuration)var9, var38);
    org.joda.time.DateTime var41 = var1.toDateTimeISO();
    org.joda.time.DateTime var43 = var41.minusMillis(20);
    org.joda.time.MutableDateTime var44 = var43.toMutableDateTime();
    int var45 = var44.getMinuteOfHour();
    org.joda.time.DateTimeZone var47 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.YearMonth var48 = new org.joda.time.YearMonth(var47);
    org.joda.time.chrono.IslamicChronology var49 = org.joda.time.chrono.IslamicChronology.getInstance(var47);
    var44.setZoneRetainFields(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test78() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test78"); }


    org.joda.time.chrono.BuddhistChronology var2 = org.joda.time.chrono.BuddhistChronology.getInstance();
    org.joda.time.DurationField var3 = var2.minutes();
    java.lang.String var4 = var2.toString();
    org.joda.time.MutablePeriod var5 = new org.joda.time.MutablePeriod(1377746595607L, 80003L, (org.joda.time.Chronology)var2);
    org.joda.time.DateTimeField var6 = var2.centuryOfEra();
    org.joda.time.DurationField var7 = var2.halfdays();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "BuddhistChronology[PT0H]"+ "'", var4.equals("BuddhistChronology[PT0H]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test79() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test79"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.field.PreciseDurationField var22 = new org.joda.time.field.PreciseDurationField(var18, 1L);
    long var24 = var22.getMillis(104);
    long var27 = var22.getDifferenceAsLong(1377746617724L, 2755489629153L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 104L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1377743011429L));

  }

  public void test80() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test80"); }


    org.joda.time.Days var1 = org.joda.time.Days.days(15795333);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test81() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test81"); }


    org.joda.time.PeriodType var2 = org.joda.time.PeriodType.yearDay();
    org.joda.time.LocalDateTime var3 = org.joda.time.LocalDateTime.now();
    int var4 = var3.getDayOfYear();
    org.joda.time.Chronology var5 = var3.getChronology();
    org.joda.time.chrono.StrictChronology var6 = org.joda.time.chrono.StrictChronology.getInstance(var5);
    org.joda.time.DateTime var14 = new org.joda.time.DateTime(0, 4, 28, 1, 28, 1, 1);
    org.joda.time.LocalDate var15 = var14.toLocalDate();
    org.joda.time.LocalDate.Property var16 = var15.weekyear();
    long var18 = var6.set((org.joda.time.ReadablePartial)var15, 104L);
    org.joda.time.LocalTime var19 = new org.joda.time.LocalTime((org.joda.time.Chronology)var6);
    org.joda.time.MutablePeriod var20 = new org.joda.time.MutablePeriod((-62156990340999L), 1378524281334L, var2, (org.joda.time.Chronology)var6);
    org.joda.time.chrono.JulianChronology var21 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var22 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var21);
    org.joda.time.LocalDate var23 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var21);
    org.joda.time.DateTimeField var24 = var21.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var25 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var26 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var27 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var26);
    org.joda.time.LocalDate var28 = var27.toLocalDate();
    org.joda.time.LocalDate var30 = var28.minusMonths(0);
    int[] var32 = var25.get((org.joda.time.ReadablePartial)var30, 100L);
    org.joda.time.chrono.EthiopicChronology var36 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var37 = var36.hours();
    org.joda.time.LocalTime var38 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var36);
    org.joda.time.Period var39 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var36);
    org.joda.time.DateTimeField var40 = var36.millisOfSecond();
    org.joda.time.DateTimeField var41 = var36.secondOfDay();
    org.joda.time.field.SkipDateTimeField var43 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var25, var41, 100);
    org.joda.time.LocalDateTime var44 = org.joda.time.LocalDateTime.now();
    int var45 = var44.getDayOfYear();
    org.joda.time.Chronology var46 = var44.getChronology();
    int var47 = var44.getYearOfCentury();
    int var48 = var43.getMaximumValue((org.joda.time.ReadablePartial)var44);
    boolean var50 = var43.isLeap(1L);
    org.joda.time.LocalDateTime var51 = org.joda.time.LocalDateTime.now();
    int var52 = var51.getDayOfYear();
    int var53 = var43.getMinimumValue((org.joda.time.ReadablePartial)var51);
    org.joda.time.DurationField var54 = var43.getDurationField();
    org.joda.time.DateTimeFieldType var55 = var43.getType();
    org.joda.time.field.OffsetDateTimeField var59 = new org.joda.time.field.OffsetDateTimeField(var24, var55, 884, 3, 948);
    boolean var61 = var59.isLeap(4133240044002L);
    org.joda.time.DurationField var62 = var59.getLeapDurationField();
    java.lang.String var64 = var59.getAsText(208L);
    long var66 = var59.roundHalfEven(1377746617466L);
    boolean var67 = var6.equals((java.lang.Object)1377746617466L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-62157023999896L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "1092"+ "'", var64.equals("1092"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 1377746617466L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);

  }

  public void test82() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test82"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    var1.addDays(1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    var1.add((org.joda.time.ReadableDuration)var7);
    org.joda.time.Period var10 = var1.toPeriod();
    java.lang.Object var11 = var1.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test83() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test83"); }


    org.joda.time.DateTimeZone var1 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.chrono.GJChronology var2 = org.joda.time.chrono.GJChronology.getInstance(var1);
    java.lang.String var3 = var1.getID();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "+00:00:00.759"+ "'", var3.equals("+00:00:00.759"));

  }

  public void test84() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test84"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var5);
    org.joda.time.DateTimeField var8 = var5.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate var14 = var12.minusMonths(0);
    int[] var16 = var9.get((org.joda.time.ReadablePartial)var14, 100L);
    org.joda.time.chrono.EthiopicChronology var20 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var21 = var20.hours();
    org.joda.time.LocalTime var22 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var20);
    org.joda.time.Period var23 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var20);
    org.joda.time.DateTimeField var24 = var20.millisOfSecond();
    org.joda.time.DateTimeField var25 = var20.secondOfDay();
    org.joda.time.field.SkipDateTimeField var27 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var9, var25, 100);
    org.joda.time.LocalDateTime var28 = org.joda.time.LocalDateTime.now();
    int var29 = var28.getDayOfYear();
    org.joda.time.Chronology var30 = var28.getChronology();
    int var31 = var28.getYearOfCentury();
    int var32 = var27.getMaximumValue((org.joda.time.ReadablePartial)var28);
    boolean var34 = var27.isLeap(1L);
    org.joda.time.LocalDateTime var35 = org.joda.time.LocalDateTime.now();
    int var36 = var35.getDayOfYear();
    int var37 = var27.getMinimumValue((org.joda.time.ReadablePartial)var35);
    org.joda.time.DurationField var38 = var27.getDurationField();
    org.joda.time.DateTimeFieldType var39 = var27.getType();
    org.joda.time.field.OffsetDateTimeField var43 = new org.joda.time.field.OffsetDateTimeField(var8, var39, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var46 = new org.joda.time.IllegalFieldValueException(var39, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var49 = var0.appendFraction(var39, 33, (-948));
    org.joda.time.chrono.EthiopicChronology var50 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var51 = var50.minutes();
    org.joda.time.DateTimeField var52 = var50.year();
    org.joda.time.DurationField var53 = var50.hours();
    org.joda.time.field.UnsupportedDateTimeField var54 = org.joda.time.field.UnsupportedDateTimeField.getInstance(var39, var53);
    long var57 = var54.add(1377746581334L, (-15946L));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var59 = var54.get(1377742992241L);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1320340981334L);

  }

  public void test85() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test85"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.DurationField var19 = var18.getRangeDurationField();
    org.joda.time.DurationField var20 = var18.getLeapDurationField();
    int var22 = var18.getMinimumValue(100L);
    long var25 = var18.set((-86390600L), 12);
    org.joda.time.DurationField var26 = var18.getRangeDurationField();
    java.lang.String var28 = var18.getAsShortText((-60779281008478L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-86386600L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "8591"+ "'", var28.equals("8591"));

  }

  public void test86() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test86"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var2.appendMillisOfDay(611);
    var2.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test87() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test87"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    var1.addDays(1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    var1.add((org.joda.time.ReadableDuration)var7);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var7, (org.joda.time.ReadableInstant)var10);
    var11.clear();
    org.joda.time.PeriodType var13 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var14 = new org.joda.time.MutablePeriod(var13);
    var14.addDays(1);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    boolean var21 = var18.isShorterThan((org.joda.time.ReadableDuration)var20);
    var14.add((org.joda.time.ReadableDuration)var20);
    var11.add((org.joda.time.ReadablePeriod)var14);
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.LocalDate var26 = var25.toLocalDate();
    org.joda.time.MutableDateTime var27 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var28 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var25, (org.joda.time.ReadableInstant)var27);
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var30 = var29.year();
    boolean var31 = var27.isBefore((org.joda.time.ReadableInstant)var29);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    boolean var41 = var38.isShorterThan((org.joda.time.ReadableDuration)var40);
    org.joda.time.Duration var42 = var33.plus((org.joda.time.ReadableDuration)var38);
    var29.add((org.joda.time.ReadableDuration)var38);
    org.joda.time.chrono.JulianChronology var44 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var45 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var44);
    org.joda.time.LocalDate var46 = var45.toLocalDate();
    org.joda.time.MutableDateTime var47 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var48 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var45, (org.joda.time.ReadableInstant)var47);
    org.joda.time.MutableDateTime var49 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var50 = var49.year();
    boolean var51 = var47.isBefore((org.joda.time.ReadableInstant)var49);
    org.joda.time.Interval var52 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var29, (org.joda.time.ReadableInstant)var49);
    boolean var54 = var52.isAfter(10L);
    org.joda.time.MutableDateTime var55 = new org.joda.time.MutableDateTime();
    var55.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var58 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var55.setChronology((org.joda.time.Chronology)var58);
    org.joda.time.Interval var60 = var52.withChronology((org.joda.time.Chronology)var58);
    var11.setPeriod((org.joda.time.ReadableInterval)var52);
    org.joda.time.Duration var63 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var64 = new org.joda.time.MutableDateTime();
    var64.setWeekOfWeekyear(1);
    int var67 = var64.getRoundingMode();
    var64.addMillis(100);
    var64.setSecondOfMinute(10);
    org.joda.time.PeriodType var72 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var73 = new org.joda.time.Period((org.joda.time.ReadableDuration)var63, (org.joda.time.ReadableInstant)var64, var72);
    org.joda.time.Days var74 = var73.toStandardDays();
    org.joda.time.Hours var75 = var74.toStandardHours();
    org.joda.time.Interval var76 = var52.withPeriodBeforeEnd((org.joda.time.ReadablePeriod)var74);
    org.joda.time.LocalDateTime var77 = org.joda.time.LocalDateTime.now();
    int var78 = var77.getDayOfYear();
    org.joda.time.Chronology var79 = var77.getChronology();
    int var80 = var77.getYearOfCentury();
    org.joda.time.Duration var82 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var83 = new org.joda.time.MutableDateTime();
    var83.setWeekOfWeekyear(1);
    int var86 = var83.getRoundingMode();
    var83.addMillis(100);
    var83.setSecondOfMinute(10);
    org.joda.time.PeriodType var91 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var92 = new org.joda.time.Period((org.joda.time.ReadableDuration)var82, (org.joda.time.ReadableInstant)var83, var91);
    org.joda.time.Days var93 = var92.toStandardDays();
    boolean var94 = var77.equals((java.lang.Object)var93);
    boolean var95 = var74.isGreaterThan(var93);
    org.joda.time.Days var97 = var93.minus(4);
    org.joda.time.Minutes var98 = var93.toStandardMinutes();
    java.lang.String var99 = var98.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var99 + "' != '" + "PT0M"+ "'", var99.equals("PT0M"));

  }

  public void test88() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test88"); }


    org.joda.time.DateTimeZone var1 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstance(var1);
    org.joda.time.Chronology var3 = var2.withUTC();
    org.joda.time.Partial var4 = new org.joda.time.Partial((org.joda.time.Chronology)var2);
    java.lang.String var5 = var4.toStringList();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[]"+ "'", var5.equals("[]"));

  }

  public void test89() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test89"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    int var2 = var1.getSeconds();
    int var3 = var1.getMonths();
    var1.setWeeks((-1));
    org.joda.time.Weeks var6 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod)var1);
    org.joda.time.Minutes var7 = var6.toStandardMinutes();
    org.joda.time.MutableDateTime var8 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var9 = var8.year();
    org.joda.time.MutableDateTime.Property var10 = var8.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var11 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var12 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var11);
    org.joda.time.Period var17 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var19 = var17.plusSeconds(100);
    org.joda.time.Period var21 = var17.minusMillis(10);
    boolean var22 = var12.equals((java.lang.Object)10);
    org.joda.time.Weeks var23 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var8, (org.joda.time.ReadableInstant)var12);
    org.joda.time.MutableDateTime var24 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var25 = var24.year();
    org.joda.time.MutableDateTime.Property var26 = var24.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var27 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var28 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var27);
    org.joda.time.Period var33 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var35 = var33.plusSeconds(100);
    org.joda.time.Period var37 = var33.minusMillis(10);
    boolean var38 = var28.equals((java.lang.Object)10);
    org.joda.time.Weeks var39 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var24, (org.joda.time.ReadableInstant)var28);
    org.joda.time.Weeks var40 = var23.minus(var39);
    org.joda.time.Weeks var42 = var39.minus(3);
    boolean var43 = var6.isLessThan(var42);
    int var44 = var6.getWeeks();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1));

  }

  public void test90() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test90"); }


    org.joda.time.DateTimeZone var1 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstance(var1);
    org.joda.time.chrono.IslamicChronology var3 = org.joda.time.chrono.IslamicChronology.getInstance(var1);
    org.joda.time.DateTime var4 = org.joda.time.DateTime.now(var1);
    java.util.GregorianCalendar var5 = var4.toGregorianCalendar();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test91() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test91"); }


    org.joda.time.chrono.EthiopicChronology var7 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var8 = var7.hours();
    org.joda.time.LocalTime var9 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var7);
    org.joda.time.Period var10 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var7);
    org.joda.time.DateTimeField var11 = var7.millisOfSecond();
    org.joda.time.chrono.LenientChronology var12 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var7);
    org.joda.time.LocalDateTime var13 = new org.joda.time.LocalDateTime((org.joda.time.Chronology)var7);
    org.joda.time.chrono.StrictChronology var14 = org.joda.time.chrono.StrictChronology.getInstance((org.joda.time.Chronology)var7);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.TimeOfDay var15 = new org.joda.time.TimeOfDay(3, (-13), 682, 73392, (org.joda.time.Chronology)var7);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test92() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test92"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.chrono.JulianChronology var21 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var22 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var21);
    org.joda.time.LocalDate var23 = var22.toLocalDate();
    org.joda.time.DateMidnight var25 = var22.minusWeeks((-1));
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var28 = new org.joda.time.MutableDateTime();
    var28.setWeekOfWeekyear(1);
    int var31 = var28.getRoundingMode();
    var28.addMillis(100);
    var28.setSecondOfMinute(10);
    org.joda.time.PeriodType var36 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var37 = new org.joda.time.Period((org.joda.time.ReadableDuration)var27, (org.joda.time.ReadableInstant)var28, var36);
    org.joda.time.Days var38 = var37.toStandardDays();
    org.joda.time.DurationFieldType var39 = var38.getFieldType();
    org.joda.time.DateMidnight var41 = var25.withFieldAdded(var39, 1);
    org.joda.time.DateMidnight var43 = var4.withFieldAdded(var39, 13);
    java.util.GregorianCalendar var44 = var43.toGregorianCalendar();
    org.joda.time.LocalDateTime var45 = org.joda.time.LocalDateTime.fromCalendarFields((java.util.Calendar)var44);
    org.joda.time.YearMonthDay var46 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar)var44);
    org.joda.time.MonthDay var47 = org.joda.time.MonthDay.fromCalendarFields((java.util.Calendar)var44);
    int var48 = var47.getMonthOfYear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 1);

  }

  public void test93() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test93"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var2.toDateTimeAtMidnight();
    org.joda.time.DateTime var7 = var5.withMillis(100L);
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var8);
    org.joda.time.LocalDate var10 = var9.toLocalDate();
    org.joda.time.DateMidnight var12 = var9.minusWeeks((-1));
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    var15.setWeekOfWeekyear(1);
    int var18 = var15.getRoundingMode();
    var15.addMillis(100);
    var15.setSecondOfMinute(10);
    org.joda.time.PeriodType var23 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var24 = new org.joda.time.Period((org.joda.time.ReadableDuration)var14, (org.joda.time.ReadableInstant)var15, var23);
    org.joda.time.Days var25 = var24.toStandardDays();
    org.joda.time.DurationFieldType var26 = var25.getFieldType();
    org.joda.time.DateMidnight var28 = var12.withFieldAdded(var26, 1);
    org.joda.time.DateMidnight.Property var29 = var12.monthOfYear();
    org.joda.time.Duration var31 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var32 = new org.joda.time.MutableDateTime();
    var32.setWeekOfWeekyear(1);
    int var35 = var32.getRoundingMode();
    var32.addMillis(100);
    var32.setSecondOfMinute(10);
    org.joda.time.PeriodType var40 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var41 = new org.joda.time.Period((org.joda.time.ReadableDuration)var31, (org.joda.time.ReadableInstant)var32, var40);
    org.joda.time.PeriodType var42 = var40.withWeeksRemoved();
    org.joda.time.Period var43 = new org.joda.time.Period((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableInstant)var12, var40);
    org.joda.time.Instant var44 = new org.joda.time.Instant();
    org.joda.time.Instant var45 = var44.toInstant();
    org.joda.time.PeriodType var46 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var47 = new org.joda.time.MutablePeriod(var46);
    var47.addDays(1);
    org.joda.time.Duration var51 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var53 = org.joda.time.Duration.standardHours((-1L));
    boolean var54 = var51.isShorterThan((org.joda.time.ReadableDuration)var53);
    var47.add((org.joda.time.ReadableDuration)var53);
    org.joda.time.Duration var57 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var59 = org.joda.time.Duration.standardHours((-1L));
    boolean var60 = var57.isShorterThan((org.joda.time.ReadableDuration)var59);
    org.joda.time.Duration var61 = var57.toDuration();
    org.joda.time.chrono.JulianChronology var62 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var63 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var62);
    org.joda.time.LocalDate var64 = var63.toLocalDate();
    org.joda.time.MutableDateTime var65 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var66 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var63, (org.joda.time.ReadableInstant)var65);
    org.joda.time.MutableDateTime var67 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var68 = var67.year();
    boolean var69 = var65.isBefore((org.joda.time.ReadableInstant)var67);
    org.joda.time.Duration var71 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var73 = org.joda.time.Duration.standardHours((-1L));
    boolean var74 = var71.isShorterThan((org.joda.time.ReadableDuration)var73);
    org.joda.time.Duration var76 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var78 = org.joda.time.Duration.standardHours((-1L));
    boolean var79 = var76.isShorterThan((org.joda.time.ReadableDuration)var78);
    org.joda.time.Duration var80 = var71.plus((org.joda.time.ReadableDuration)var76);
    var67.add((org.joda.time.ReadableDuration)var76);
    org.joda.time.PeriodType var82 = org.joda.time.PeriodType.months();
    org.joda.time.Period var83 = new org.joda.time.Period((org.joda.time.ReadableDuration)var57, (org.joda.time.ReadableInstant)var67, var82);
    org.joda.time.Period var84 = new org.joda.time.Period((org.joda.time.ReadableInstant)var45, (org.joda.time.ReadableDuration)var53, var82);
    org.joda.time.DateTime var85 = var7.plus((org.joda.time.ReadableDuration)var53);
    org.joda.time.LocalTime var86 = var7.toLocalTime();
    org.joda.time.LocalTime var88 = var86.withMillisOfDay(1);
    org.joda.time.LocalTime var90 = var86.plusSeconds(12217692);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test94() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test94"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    int var2 = var1.getSeconds();
    int var3 = var1.getMonths();
    var1.setWeeks((-1));
    org.joda.time.Weeks var6 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod)var1);
    org.joda.time.Minutes var7 = var6.toStandardMinutes();
    org.joda.time.Duration var8 = var7.toStandardDuration();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test95() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test95"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.Months var6 = org.joda.time.Months.months((-1));
    org.joda.time.Months var8 = var6.plus(100);
    int var9 = var6.size();
    org.joda.time.LocalDate var10 = var2.plus((org.joda.time.ReadablePeriod)var6);
    java.lang.String var11 = var2.toString();
    org.joda.time.LocalDate var13 = var2.plusDays((-22));
    org.joda.time.LocalDate.Property var14 = var2.monthOfYear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "1969-12-19"+ "'", var11.equals("1969-12-19"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test96() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test96"); }


    org.joda.time.format.PeriodFormatter var0 = org.joda.time.format.ISOPeriodFormat.alternate();
    org.joda.time.PeriodType var3 = org.joda.time.PeriodType.yearDay();
    org.joda.time.LocalDateTime var4 = org.joda.time.LocalDateTime.now();
    int var5 = var4.getDayOfYear();
    org.joda.time.Chronology var6 = var4.getChronology();
    org.joda.time.chrono.StrictChronology var7 = org.joda.time.chrono.StrictChronology.getInstance(var6);
    org.joda.time.DateTime var15 = new org.joda.time.DateTime(0, 4, 28, 1, 28, 1, 1);
    org.joda.time.LocalDate var16 = var15.toLocalDate();
    org.joda.time.LocalDate.Property var17 = var16.weekyear();
    long var19 = var7.set((org.joda.time.ReadablePartial)var16, 104L);
    org.joda.time.LocalTime var20 = new org.joda.time.LocalTime((org.joda.time.Chronology)var7);
    org.joda.time.MutablePeriod var21 = new org.joda.time.MutablePeriod((-62156990340999L), 1378524281334L, var3, (org.joda.time.Chronology)var7);
    var21.addYears(11);
    int var24 = var21.getSeconds();
    int var27 = var0.parseInto((org.joda.time.ReadWritablePeriod)var21, "1969-12-31T16:00:00.000-08:00/1969-12-31T16:00:00.000-08:00", (-34));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-62157023999896L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-34));

  }

  public void test97() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test97"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    var1.addDays(1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    var1.add((org.joda.time.ReadableDuration)var7);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var7, (org.joda.time.ReadableInstant)var10);
    var11.clear();
    org.joda.time.PeriodType var13 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var14 = new org.joda.time.MutablePeriod(var13);
    var14.addDays(1);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    boolean var21 = var18.isShorterThan((org.joda.time.ReadableDuration)var20);
    var14.add((org.joda.time.ReadableDuration)var20);
    var11.add((org.joda.time.ReadablePeriod)var14);
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.LocalDate var26 = var25.toLocalDate();
    org.joda.time.MutableDateTime var27 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var28 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var25, (org.joda.time.ReadableInstant)var27);
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var30 = var29.year();
    boolean var31 = var27.isBefore((org.joda.time.ReadableInstant)var29);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    boolean var41 = var38.isShorterThan((org.joda.time.ReadableDuration)var40);
    org.joda.time.Duration var42 = var33.plus((org.joda.time.ReadableDuration)var38);
    var29.add((org.joda.time.ReadableDuration)var38);
    org.joda.time.Hours var44 = var38.toStandardHours();
    org.joda.time.chrono.EthiopicChronology var45 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
    var14.setPeriod((org.joda.time.ReadableDuration)var38, (org.joda.time.Chronology)var45);
    int var47 = var14.getDays();
    org.joda.time.format.PeriodFormatter var48 = org.joda.time.format.PeriodFormat.getDefault();
    org.joda.time.Months var50 = org.joda.time.Months.months((-1));
    org.joda.time.Months var52 = var50.plus(100);
    int var53 = var50.size();
    java.lang.String var54 = var48.print((org.joda.time.ReadablePeriod)var50);
    org.joda.time.format.PeriodPrinter var55 = var48.getPrinter();
    org.joda.time.PeriodType var56 = var48.getParseType();
    java.lang.String var57 = var14.toString(var48);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var59 = var14.getValue(80);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "-1 months"+ "'", var54.equals("-1 months"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "-1 hours"+ "'", var57.equals("-1 hours"));

  }

  public void test98() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test98"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.DateMidnight.Property var21 = var4.monthOfYear();
    int var22 = var4.getYearOfCentury();
    org.joda.time.PeriodType var23 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var24 = new org.joda.time.MutablePeriod(var23);
    var24.addDays(1);
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var30 = org.joda.time.Duration.standardHours((-1L));
    boolean var31 = var28.isShorterThan((org.joda.time.ReadableDuration)var30);
    var24.add((org.joda.time.ReadableDuration)var30);
    org.joda.time.MutableDateTime var33 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var30, (org.joda.time.ReadableInstant)var33);
    var34.clear();
    org.joda.time.PeriodType var36 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var37 = new org.joda.time.MutablePeriod(var36);
    var37.addDays(1);
    org.joda.time.Duration var41 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var43 = org.joda.time.Duration.standardHours((-1L));
    boolean var44 = var41.isShorterThan((org.joda.time.ReadableDuration)var43);
    var37.add((org.joda.time.ReadableDuration)var43);
    var34.add((org.joda.time.ReadablePeriod)var37);
    org.joda.time.chrono.JulianChronology var47 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var48 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var47);
    org.joda.time.LocalDate var49 = var48.toLocalDate();
    org.joda.time.MutableDateTime var50 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var51 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var48, (org.joda.time.ReadableInstant)var50);
    org.joda.time.MutableDateTime var52 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var53 = var52.year();
    boolean var54 = var50.isBefore((org.joda.time.ReadableInstant)var52);
    org.joda.time.Duration var56 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var58 = org.joda.time.Duration.standardHours((-1L));
    boolean var59 = var56.isShorterThan((org.joda.time.ReadableDuration)var58);
    org.joda.time.Duration var61 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var63 = org.joda.time.Duration.standardHours((-1L));
    boolean var64 = var61.isShorterThan((org.joda.time.ReadableDuration)var63);
    org.joda.time.Duration var65 = var56.plus((org.joda.time.ReadableDuration)var61);
    var52.add((org.joda.time.ReadableDuration)var61);
    org.joda.time.Hours var67 = var61.toStandardHours();
    org.joda.time.chrono.EthiopicChronology var68 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
    var37.setPeriod((org.joda.time.ReadableDuration)var61, (org.joda.time.Chronology)var68);
    int var70 = var37.getDays();
    org.joda.time.format.PeriodFormatter var71 = org.joda.time.format.PeriodFormat.getDefault();
    org.joda.time.Months var73 = org.joda.time.Months.months((-1));
    org.joda.time.Months var75 = var73.plus(100);
    int var76 = var73.size();
    java.lang.String var77 = var71.print((org.joda.time.ReadablePeriod)var73);
    org.joda.time.format.PeriodPrinter var78 = var71.getPrinter();
    org.joda.time.PeriodType var79 = var71.getParseType();
    java.lang.String var80 = var37.toString(var71);
    org.joda.time.MutableInterval var81 = new org.joda.time.MutableInterval();
    org.joda.time.MutableInterval var82 = var81.copy();
    org.joda.time.DateTime var83 = var82.getStart();
    org.joda.time.Chronology var84 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval)var82);
    var37.setPeriod((org.joda.time.ReadableInterval)var82);
    org.joda.time.DateMidnight var86 = var4.minus((org.joda.time.ReadablePeriod)var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "-1 months"+ "'", var77.equals("-1 months"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "-1 hours"+ "'", var80.equals("-1 hours"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test99() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test99"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    var0.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var0.setChronology((org.joda.time.Chronology)var3);
    org.joda.time.DateTimeField var5 = var3.clockhourOfHalfday();
    org.joda.time.format.DateTimeFormatterBuilder var6 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var8 = var6.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var10 = var6.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var11 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var12 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var11);
    org.joda.time.LocalDate var13 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var14 = var11.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var15 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var16 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var17 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var16);
    org.joda.time.LocalDate var18 = var17.toLocalDate();
    org.joda.time.LocalDate var20 = var18.minusMonths(0);
    int[] var22 = var15.get((org.joda.time.ReadablePartial)var20, 100L);
    org.joda.time.chrono.EthiopicChronology var26 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var27 = var26.hours();
    org.joda.time.LocalTime var28 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var26);
    org.joda.time.Period var29 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var26);
    org.joda.time.DateTimeField var30 = var26.millisOfSecond();
    org.joda.time.DateTimeField var31 = var26.secondOfDay();
    org.joda.time.field.SkipDateTimeField var33 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var15, var31, 100);
    org.joda.time.LocalDateTime var34 = org.joda.time.LocalDateTime.now();
    int var35 = var34.getDayOfYear();
    org.joda.time.Chronology var36 = var34.getChronology();
    int var37 = var34.getYearOfCentury();
    int var38 = var33.getMaximumValue((org.joda.time.ReadablePartial)var34);
    boolean var40 = var33.isLeap(1L);
    org.joda.time.LocalDateTime var41 = org.joda.time.LocalDateTime.now();
    int var42 = var41.getDayOfYear();
    int var43 = var33.getMinimumValue((org.joda.time.ReadablePartial)var41);
    org.joda.time.DurationField var44 = var33.getDurationField();
    org.joda.time.DateTimeFieldType var45 = var33.getType();
    org.joda.time.field.OffsetDateTimeField var49 = new org.joda.time.field.OffsetDateTimeField(var14, var45, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var52 = new org.joda.time.IllegalFieldValueException(var45, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var55 = var6.appendFraction(var45, 33, (-948));
    org.joda.time.field.DividedDateTimeField var57 = new org.joda.time.field.DividedDateTimeField(var5, var45, 100);
    long var60 = var57.add((-86386600L), 13);
    boolean var62 = var57.isLeap(1377768182711L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 4593613400L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);

  }

  public void test100() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test100"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var1 = var0.year();
    org.joda.time.MutableDateTime.Property var2 = var0.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var4 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var3);
    org.joda.time.Period var9 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var11 = var9.plusSeconds(100);
    org.joda.time.Period var13 = var9.minusMillis(10);
    boolean var14 = var4.equals((java.lang.Object)10);
    org.joda.time.Weeks var15 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var0, (org.joda.time.ReadableInstant)var4);
    org.joda.time.Chronology var16 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant)var0);
    org.joda.time.DateTime var17 = org.joda.time.DateTime.now(var16);
    org.joda.time.DateTimeZone var19 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.DateTimeZone var20 = org.joda.time.DateTimeUtils.getZone(var19);
    org.joda.time.DateTime var21 = var17.toDateTime(var19);
    org.joda.time.DateTime var23 = var21.plusMinutes(985);
    org.joda.time.DateTime var25 = var21.plusDays(767326786);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test101() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test101"); }


    org.joda.time.chrono.GJChronology var0 = org.joda.time.chrono.GJChronology.getInstanceUTC();
    java.lang.String var1 = var0.toString();
    org.joda.time.DurationField var2 = var0.eras();
    org.joda.time.Period var4 = org.joda.time.Period.days(1);
    org.joda.time.Period var6 = var4.minusHours(0);
    boolean var7 = var0.equals((java.lang.Object)var6);
    org.joda.time.MutableInterval var8 = new org.joda.time.MutableInterval();
    org.joda.time.MutableInterval var9 = var8.copy();
    org.joda.time.DateTime var10 = var9.getStart();
    java.util.Date var11 = var10.toDate();
    org.joda.time.MonthDay var12 = org.joda.time.MonthDay.fromDateFields(var11);
    org.joda.time.Period var17 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var19 = var17.plusSeconds(100);
    org.joda.time.Period var21 = var19.withSeconds(0);
    int var22 = var21.getMonths();
    org.joda.time.MonthDay var23 = var12.minus((org.joda.time.ReadablePeriod)var21);
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.LocalDate var26 = var25.toLocalDate();
    org.joda.time.MutableDateTime var27 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var28 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var25, (org.joda.time.ReadableInstant)var27);
    org.joda.time.chrono.JulianChronology var29 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var30 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var29);
    org.joda.time.LocalDate var31 = var30.toLocalDate();
    org.joda.time.MutableDateTime var32 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var33 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var30, (org.joda.time.ReadableInstant)var32);
    org.joda.time.MutableDateTime var34 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var35 = var34.year();
    boolean var36 = var32.isBefore((org.joda.time.ReadableInstant)var34);
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    boolean var41 = var38.isShorterThan((org.joda.time.ReadableDuration)var40);
    org.joda.time.Duration var43 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var45 = org.joda.time.Duration.standardHours((-1L));
    boolean var46 = var43.isShorterThan((org.joda.time.ReadableDuration)var45);
    org.joda.time.Duration var47 = var38.plus((org.joda.time.ReadableDuration)var43);
    var34.add((org.joda.time.ReadableDuration)var43);
    org.joda.time.Seconds var49 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var25, (org.joda.time.ReadableInstant)var34);
    org.joda.time.Seconds var50 = var49.negated();
    org.joda.time.Seconds var52 = var50.plus(240);
    org.joda.time.MonthDay var53 = var23.plus((org.joda.time.ReadablePeriod)var52);
    org.joda.time.MonthDay var55 = var23.minusMonths(22);
    org.joda.time.PeriodType var56 = org.joda.time.PeriodType.months();
    java.lang.String var57 = var56.toString();
    org.joda.time.PeriodType var58 = var56.withMinutesRemoved();
    org.joda.time.MutablePeriod var59 = new org.joda.time.MutablePeriod(var56);
    org.joda.time.MonthDay var60 = var23.plus((org.joda.time.ReadablePeriod)var59);
    boolean var61 = var0.equals((java.lang.Object)var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "GJChronology[UTC]"+ "'", var1.equals("GJChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "PeriodType[Months]"+ "'", var57.equals("PeriodType[Months]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);

  }

  public void test102() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test102"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var4 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var3);
    org.joda.time.LocalDate var5 = var4.toLocalDate();
    org.joda.time.MutableDateTime var6 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var7 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var4, (org.joda.time.ReadableInstant)var6);
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var8);
    org.joda.time.LocalDate var10 = var9.toLocalDate();
    org.joda.time.MutableDateTime var11 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var12 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var9, (org.joda.time.ReadableInstant)var11);
    org.joda.time.MutableDateTime var13 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var14 = var13.year();
    boolean var15 = var11.isBefore((org.joda.time.ReadableInstant)var13);
    org.joda.time.Duration var17 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    boolean var20 = var17.isShorterThan((org.joda.time.ReadableDuration)var19);
    org.joda.time.Duration var22 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var24 = org.joda.time.Duration.standardHours((-1L));
    boolean var25 = var22.isShorterThan((org.joda.time.ReadableDuration)var24);
    org.joda.time.Duration var26 = var17.plus((org.joda.time.ReadableDuration)var22);
    var13.add((org.joda.time.ReadableDuration)var22);
    org.joda.time.Seconds var28 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var4, (org.joda.time.ReadableInstant)var13);
    org.joda.time.Weeks var29 = var28.toStandardWeeks();
    org.joda.time.Duration var31 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    boolean var34 = var31.isShorterThan((org.joda.time.ReadableDuration)var33);
    org.joda.time.Duration var36 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    boolean var39 = var36.isShorterThan((org.joda.time.ReadableDuration)var38);
    org.joda.time.Duration var40 = var31.plus((org.joda.time.ReadableDuration)var36);
    boolean var41 = var29.equals((java.lang.Object)var40);
    org.joda.time.LocalDateTime var43 = var0.withDurationAdded((org.joda.time.ReadableDuration)var40, 10);
    int var44 = var0.getDayOfMonth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);

  }

  public void test103() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test103"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.parse("2013-08-29T03:23:19.999+00:00:00.759/2013-08-29T03:23:19.999+00:00:00.759");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test104() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test104"); }


    org.joda.time.DateTimeZone var1 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.YearMonth var2 = new org.joda.time.YearMonth(var1);
    org.joda.time.chrono.IslamicChronology var3 = org.joda.time.chrono.IslamicChronology.getInstance(var1);
    org.joda.time.Chronology var4 = var3.withUTC();
    org.joda.time.DateTimeZone var6 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.DateTimeZone var7 = org.joda.time.DateTimeUtils.getZone(var6);
    org.joda.time.Chronology var8 = var3.withZone(var6);
    org.joda.time.Duration var10 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var11 = new org.joda.time.MutableDateTime();
    var11.setWeekOfWeekyear(1);
    int var14 = var11.getRoundingMode();
    var11.addMillis(100);
    var11.setSecondOfMinute(10);
    org.joda.time.PeriodType var19 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var20 = new org.joda.time.Period((org.joda.time.ReadableDuration)var10, (org.joda.time.ReadableInstant)var11, var19);
    org.joda.time.MutableDateTime var21 = var11.copy();
    org.joda.time.MutableDateTime var22 = new org.joda.time.MutableDateTime();
    var22.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var25 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var22.setChronology((org.joda.time.Chronology)var25);
    org.joda.time.DateMidnight var27 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var25);
    var21.setChronology((org.joda.time.Chronology)var25);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.chrono.GJChronology var30 = org.joda.time.chrono.GJChronology.getInstance(var6, (org.joda.time.ReadableInstant)var21, 269);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test105() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test105"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    boolean var25 = var18.isLeap(1L);
    org.joda.time.LocalDateTime var26 = org.joda.time.LocalDateTime.now();
    int var27 = var26.getDayOfYear();
    int var28 = var18.getMinimumValue((org.joda.time.ReadablePartial)var26);
    long var31 = var18.addWrapField(1000L, 15795333);
    org.joda.time.DateTimeField var32 = var18.getWrappedField();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 70534000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test106() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test106"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var0);
    org.joda.time.DateTimeField var3 = var0.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.LocalDate var9 = var7.minusMonths(0);
    int[] var11 = var4.get((org.joda.time.ReadablePartial)var9, 100L);
    org.joda.time.chrono.EthiopicChronology var15 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var16 = var15.hours();
    org.joda.time.LocalTime var17 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var15);
    org.joda.time.Period var18 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var15);
    org.joda.time.DateTimeField var19 = var15.millisOfSecond();
    org.joda.time.DateTimeField var20 = var15.secondOfDay();
    org.joda.time.field.SkipDateTimeField var22 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var4, var20, 100);
    org.joda.time.LocalDateTime var23 = org.joda.time.LocalDateTime.now();
    int var24 = var23.getDayOfYear();
    org.joda.time.Chronology var25 = var23.getChronology();
    int var26 = var23.getYearOfCentury();
    int var27 = var22.getMaximumValue((org.joda.time.ReadablePartial)var23);
    boolean var29 = var22.isLeap(1L);
    org.joda.time.LocalDateTime var30 = org.joda.time.LocalDateTime.now();
    int var31 = var30.getDayOfYear();
    int var32 = var22.getMinimumValue((org.joda.time.ReadablePartial)var30);
    org.joda.time.DurationField var33 = var22.getDurationField();
    org.joda.time.DateTimeFieldType var34 = var22.getType();
    org.joda.time.field.OffsetDateTimeField var38 = new org.joda.time.field.OffsetDateTimeField(var3, var34, 884, 3, 948);
    long var40 = var38.roundCeiling(3L);
    org.joda.time.chrono.EthiopicChronology var41 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var42 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var43 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var42);
    org.joda.time.LocalDate var44 = var43.toLocalDate();
    org.joda.time.LocalDate var46 = var44.minusMonths(0);
    int[] var48 = var41.get((org.joda.time.ReadablePartial)var46, 100L);
    org.joda.time.chrono.EthiopicChronology var52 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var53 = var52.hours();
    org.joda.time.LocalTime var54 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var52);
    org.joda.time.Period var55 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var52);
    org.joda.time.DateTimeField var56 = var52.millisOfSecond();
    org.joda.time.DateTimeField var57 = var52.secondOfDay();
    org.joda.time.field.SkipDateTimeField var59 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var41, var57, 100);
    org.joda.time.LocalDateTime var60 = org.joda.time.LocalDateTime.now();
    int var61 = var60.getDayOfYear();
    org.joda.time.Chronology var62 = var60.getChronology();
    int var63 = var60.getYearOfCentury();
    int var64 = var59.getMaximumValue((org.joda.time.ReadablePartial)var60);
    int var65 = var60.getSecondOfMinute();
    int var66 = var60.getDayOfYear();
    org.joda.time.LocalDateTime.Property var67 = var60.secondOfMinute();
    org.joda.time.LocalDateTime.Property var68 = var60.yearOfEra();
    org.joda.time.LocalTime var69 = var60.toLocalTime();
    int var70 = var38.getMaximumValue((org.joda.time.ReadablePartial)var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 3L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 948);

  }

  public void test107() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test107"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    int var3 = var0.getWeekOfWeekyear();
    org.joda.time.LocalDateTime var5 = var0.withDayOfWeek(2);
    org.joda.time.LocalDateTime.Property var6 = var0.weekyear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test108() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test108"); }


    org.joda.time.LocalDateTime var1 = org.joda.time.LocalDateTime.now();
    int var2 = var1.getDayOfYear();
    org.joda.time.Chronology var3 = var1.getChronology();
    org.joda.time.chrono.StrictChronology var4 = org.joda.time.chrono.StrictChronology.getInstance(var3);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.LocalDate var9 = var7.withMonthOfYear(1);
    org.joda.time.LocalDate var11 = var7.withWeekyear(1);
    org.joda.time.LocalDate var13 = var7.withDayOfYear(1);
    org.joda.time.LocalDate var15 = var13.minusMonths(16);
    boolean var16 = var4.equals((java.lang.Object)16);
    org.joda.time.YearMonth var17 = new org.joda.time.YearMonth(0L, (org.joda.time.Chronology)var4);
    org.joda.time.format.DateTimeFormatter var18 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
    org.joda.time.chrono.EthiopicChronology var22 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var23 = var22.hours();
    org.joda.time.LocalTime var24 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var22);
    org.joda.time.Period var25 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var22);
    org.joda.time.DateTimeField var26 = var22.millisOfSecond();
    org.joda.time.chrono.LenientChronology var27 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var22);
    org.joda.time.format.DateTimeFormatter var28 = var18.withChronology((org.joda.time.Chronology)var27);
    org.joda.time.format.DateTimeFormatter var29 = var28.withZoneUTC();
    java.lang.String var30 = var17.toString(var29);
    org.joda.time.chrono.JulianChronology var31 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var32 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var31);
    org.joda.time.Period var37 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var39 = var37.plusSeconds(100);
    org.joda.time.Period var41 = var37.minusMillis(10);
    boolean var42 = var32.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var43 = var32.dayOfYear();
    int var44 = var32.getSecondOfDay();
    org.joda.time.DateMidnight var46 = var32.withWeekyear(240);
    org.joda.time.DateMidnight var48 = var46.minusMonths(28);
    org.joda.time.DateTimeZone var49 = var48.getZone();
    org.joda.time.Interval var50 = var17.toInterval(var49);
    org.joda.time.DateMidnight var51 = new org.joda.time.DateMidnight(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "\uFFFD\uFFFD"+ "'", var30.equals("\uFFFD\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test109() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test109"); }


    org.joda.time.chrono.GregorianChronology var0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
    org.joda.time.DurationField var1 = var0.weeks();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test110() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test110"); }


    org.joda.time.DateTime var0 = new org.joda.time.DateTime();
    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var3 = new org.joda.time.DateMidnight((-1L), (org.joda.time.Chronology)var2);
    org.joda.time.chrono.JulianChronology var4 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var5 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var4);
    org.joda.time.LocalDate var6 = var5.toLocalDate();
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var8 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var7);
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var10 = var9.year();
    boolean var11 = var7.isBefore((org.joda.time.ReadableInstant)var9);
    org.joda.time.Duration var13 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var15 = org.joda.time.Duration.standardHours((-1L));
    boolean var16 = var13.isShorterThan((org.joda.time.ReadableDuration)var15);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    boolean var21 = var18.isShorterThan((org.joda.time.ReadableDuration)var20);
    org.joda.time.Duration var22 = var13.plus((org.joda.time.ReadableDuration)var18);
    var9.add((org.joda.time.ReadableDuration)var18);
    var9.setHourOfDay(10);
    org.joda.time.Years var26 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var3, (org.joda.time.ReadableInstant)var9);
    org.joda.time.Period var27 = new org.joda.time.Period((org.joda.time.ReadableInstant)var0, (org.joda.time.ReadableInstant)var9);
    org.joda.time.DateTime var29 = var0.plus(1377768182707L);
    org.joda.time.DateTime var31 = var0.withYear(893);
    org.joda.time.DateTime var33 = var0.minusDays(12196);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTime var35 = var33.withEra(7);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test111() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test111"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var2.toDateTimeAtMidnight();
    org.joda.time.DateTime var7 = var5.withMillis(100L);
    org.joda.time.DateTime.Property var8 = var7.era();
    org.joda.time.TimeOfDay var9 = var7.toTimeOfDay();
    org.joda.time.TimeOfDay var11 = var9.plusSeconds(100);
    org.joda.time.chrono.JulianChronology var12 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var13 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var12);
    org.joda.time.LocalDate var14 = var13.toLocalDate();
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var16 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var13, (org.joda.time.ReadableInstant)var15);
    org.joda.time.chrono.JulianChronology var17 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var18 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var17);
    org.joda.time.LocalDate var19 = var18.toLocalDate();
    org.joda.time.MutableDateTime var20 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var21 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var18, (org.joda.time.ReadableInstant)var20);
    org.joda.time.MutableDateTime var22 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var23 = var22.year();
    boolean var24 = var20.isBefore((org.joda.time.ReadableInstant)var22);
    org.joda.time.Duration var26 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    boolean var29 = var26.isShorterThan((org.joda.time.ReadableDuration)var28);
    org.joda.time.Duration var31 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    boolean var34 = var31.isShorterThan((org.joda.time.ReadableDuration)var33);
    org.joda.time.Duration var35 = var26.plus((org.joda.time.ReadableDuration)var31);
    var22.add((org.joda.time.ReadableDuration)var31);
    org.joda.time.Seconds var37 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var13, (org.joda.time.ReadableInstant)var22);
    org.joda.time.Duration var38 = var37.toStandardDuration();
    org.joda.time.TimeOfDay var40 = var11.withPeriodAdded((org.joda.time.ReadablePeriod)var37, 948);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.TimeOfDay var42 = var11.withHourOfDay(41);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test112() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test112"); }


    org.joda.time.MutableInterval var0 = new org.joda.time.MutableInterval();
    long var1 = var0.getEndMillis();
    org.joda.time.Months var2 = org.joda.time.Months.monthsIn((org.joda.time.ReadableInterval)var0);
    org.joda.time.Months var4 = var2.plus(240);
    org.joda.time.Months var6 = var2.multipliedBy(240);
    org.joda.time.Months var7 = var6.negated();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test113() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test113"); }


    org.joda.time.LocalDateTime var1 = org.joda.time.LocalDateTime.now();
    int var2 = var1.getDayOfYear();
    org.joda.time.Chronology var3 = var1.getChronology();
    org.joda.time.chrono.StrictChronology var4 = org.joda.time.chrono.StrictChronology.getInstance(var3);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.LocalDate var9 = var7.withMonthOfYear(1);
    org.joda.time.LocalDate var11 = var7.withWeekyear(1);
    org.joda.time.LocalDate var13 = var7.withDayOfYear(1);
    org.joda.time.LocalDate var15 = var13.minusMonths(16);
    boolean var16 = var4.equals((java.lang.Object)16);
    org.joda.time.YearMonth var17 = new org.joda.time.YearMonth(0L, (org.joda.time.Chronology)var4);
    org.joda.time.Chronology var18 = var4.withUTC();
    org.joda.time.DateTimeField var19 = var4.millisOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test114() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test114"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var2.toDateTimeAtMidnight();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTime var7 = var5.withMinuteOfHour(227);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test115() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test115"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    int var24 = var19.getSecondOfMinute();
    int var25 = var19.getDayOfYear();
    org.joda.time.LocalDateTime.Property var26 = var19.secondOfMinute();
    org.joda.time.LocalDateTime.Property var27 = var19.yearOfEra();
    org.joda.time.LocalDateTime var29 = var19.minusDays(2005);
    int var30 = var19.getCenturyOfEra();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 19);

  }

  public void test116() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test116"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    int var3 = var2.getYear();
    org.joda.time.Period var6 = new org.joda.time.Period(10L, 1L);
    org.joda.time.Duration var8 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    var9.setWeekOfWeekyear(1);
    int var12 = var9.getRoundingMode();
    var9.addMillis(100);
    var9.setSecondOfMinute(10);
    org.joda.time.PeriodType var17 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var18 = new org.joda.time.Period((org.joda.time.ReadableDuration)var8, (org.joda.time.ReadableInstant)var9, var17);
    org.joda.time.Days var19 = var18.toStandardDays();
    org.joda.time.DurationFieldType var20 = var19.getFieldType();
    int var21 = var6.get(var20);
    org.joda.time.YearMonthDay var22 = var2.minus((org.joda.time.ReadablePeriod)var6);
    org.joda.time.DateTime var23 = var22.toDateTimeAtCurrentTime();
    org.joda.time.chrono.JulianChronology var25 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var26 = new org.joda.time.DateMidnight((-1L), (org.joda.time.Chronology)var25);
    org.joda.time.chrono.JulianChronology var27 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var28 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var27);
    org.joda.time.LocalDate var29 = var28.toLocalDate();
    org.joda.time.MutableDateTime var30 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var31 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var28, (org.joda.time.ReadableInstant)var30);
    org.joda.time.MutableDateTime var32 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var33 = var32.year();
    boolean var34 = var30.isBefore((org.joda.time.ReadableInstant)var32);
    org.joda.time.Duration var36 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    boolean var39 = var36.isShorterThan((org.joda.time.ReadableDuration)var38);
    org.joda.time.Duration var41 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var43 = org.joda.time.Duration.standardHours((-1L));
    boolean var44 = var41.isShorterThan((org.joda.time.ReadableDuration)var43);
    org.joda.time.Duration var45 = var36.plus((org.joda.time.ReadableDuration)var41);
    var32.add((org.joda.time.ReadableDuration)var41);
    var32.setHourOfDay(10);
    org.joda.time.Years var49 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var26, (org.joda.time.ReadableInstant)var32);
    org.joda.time.YearMonthDay var50 = var22.minus((org.joda.time.ReadablePeriod)var49);
    org.joda.time.YearMonthDay var52 = var22.plusYears(16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1962);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test117() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test117"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.LocalTime var3 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var1);
    org.joda.time.LocalTime var5 = var3.withMillisOfSecond(1);
    org.joda.time.LocalTime var6 = org.joda.time.LocalTime.now();
    boolean var7 = var5.isAfter((org.joda.time.ReadablePartial)var6);
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var8);
    org.joda.time.LocalDate var10 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var8);
    org.joda.time.DurationField var11 = var8.hours();
    boolean var12 = var6.equals((java.lang.Object)var8);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    var15.setWeekOfWeekyear(1);
    int var18 = var15.getRoundingMode();
    var15.addMillis(100);
    var15.setSecondOfMinute(10);
    org.joda.time.PeriodType var23 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var24 = new org.joda.time.Period((org.joda.time.ReadableDuration)var14, (org.joda.time.ReadableInstant)var15, var23);
    org.joda.time.Days var25 = var24.toStandardDays();
    org.joda.time.LocalTime var26 = var6.minus((org.joda.time.ReadablePeriod)var24);
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    var29.setWeekOfWeekyear(1);
    int var32 = var29.getRoundingMode();
    var29.addMillis(100);
    var29.setSecondOfMinute(10);
    org.joda.time.PeriodType var37 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var38 = new org.joda.time.Period((org.joda.time.ReadableDuration)var28, (org.joda.time.ReadableInstant)var29, var37);
    org.joda.time.Days var39 = var38.toStandardDays();
    org.joda.time.chrono.JulianChronology var40 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var41 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var40);
    org.joda.time.Period var46 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var48 = var46.plusSeconds(100);
    org.joda.time.Period var50 = var46.minusMillis(10);
    boolean var51 = var41.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var52 = var41.dayOfYear();
    org.joda.time.chrono.JulianChronology var53 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var54 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var53);
    org.joda.time.LocalDate var55 = var54.toLocalDate();
    org.joda.time.LocalDate var57 = var55.minusMonths(0);
    org.joda.time.DateTime var58 = var55.toDateTimeAtMidnight();
    org.joda.time.DateTime var60 = var58.withCenturyOfEra(4);
    org.joda.time.Days var61 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var41, (org.joda.time.ReadableInstant)var60);
    org.joda.time.Days var63 = var61.dividedBy(1);
    boolean var64 = var39.isGreaterThan(var61);
    org.joda.time.DurationFieldType var65 = var39.getFieldType();
    org.joda.time.Period var67 = var24.withField(var65, 0);
    org.joda.time.Weeks var68 = var67.toStandardWeeks();
    org.joda.time.chrono.JulianChronology var69 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var70 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var69);
    org.joda.time.LocalDate var71 = var70.toLocalDate();
    org.joda.time.MutableDateTime var72 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var73 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var70, (org.joda.time.ReadableInstant)var72);
    org.joda.time.chrono.JulianChronology var74 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var75 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var74);
    org.joda.time.LocalDate var76 = var75.toLocalDate();
    org.joda.time.MutableDateTime var77 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var78 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var75, (org.joda.time.ReadableInstant)var77);
    org.joda.time.MutableDateTime var79 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var80 = var79.year();
    boolean var81 = var77.isBefore((org.joda.time.ReadableInstant)var79);
    org.joda.time.Duration var83 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var85 = org.joda.time.Duration.standardHours((-1L));
    boolean var86 = var83.isShorterThan((org.joda.time.ReadableDuration)var85);
    org.joda.time.Duration var88 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var90 = org.joda.time.Duration.standardHours((-1L));
    boolean var91 = var88.isShorterThan((org.joda.time.ReadableDuration)var90);
    org.joda.time.Duration var92 = var83.plus((org.joda.time.ReadableDuration)var88);
    var79.add((org.joda.time.ReadableDuration)var88);
    org.joda.time.Seconds var94 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var70, (org.joda.time.ReadableInstant)var79);
    org.joda.time.Weeks var95 = var94.toStandardWeeks();
    org.joda.time.Duration var96 = var95.toStandardDuration();
    org.joda.time.Weeks var97 = var68.minus(var95);
    org.joda.time.Hours var98 = var68.toStandardHours();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test118() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test118"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    int var3 = var0.getYearOfCentury();
    org.joda.time.LocalDateTime var5 = var0.withCenturyOfEra(2);
    org.joda.time.LocalDateTime var7 = var0.plusMinutes(70541200);
    org.joda.time.chrono.ISOChronology var8 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
    org.joda.time.tz.FixedDateTimeZone var13 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var15 = var13.getOffsetFromLocal(1377742981323L);
    org.joda.time.Chronology var16 = var8.withZone((org.joda.time.DateTimeZone)var13);
    org.joda.time.LocalTime var17 = new org.joda.time.LocalTime((org.joda.time.DateTimeZone)var13);
    org.joda.time.LocalDateTime var18 = var7.withFields((org.joda.time.ReadablePartial)var17);
    org.joda.time.LocalDateTime.Property var19 = var7.weekyear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test119() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test119"); }


    org.joda.time.Seconds var1 = org.joda.time.Seconds.seconds(216);
    org.joda.time.Hours var2 = var1.toStandardHours();
    int var3 = var1.getSeconds();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 216);

  }

  public void test120() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test120"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.DateMidnight.Property var21 = var4.monthOfYear();
    org.joda.time.DateMidnight var23 = var4.withYear(884);
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.Period var30 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var32 = var30.plusSeconds(100);
    org.joda.time.Period var34 = var30.minusMillis(10);
    boolean var35 = var25.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var36 = var25.dayOfYear();
    org.joda.time.chrono.JulianChronology var37 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var38 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var37);
    org.joda.time.LocalDate var39 = var38.toLocalDate();
    org.joda.time.LocalDate var41 = var39.minusMonths(0);
    org.joda.time.DateTime var42 = var39.toDateTimeAtMidnight();
    org.joda.time.DateTime var44 = var42.withCenturyOfEra(4);
    org.joda.time.Days var45 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var25, (org.joda.time.ReadableInstant)var44);
    org.joda.time.chrono.EthiopicChronology var47 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var48 = var47.hours();
    org.joda.time.LocalTime var49 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var47);
    org.joda.time.LocalTime var51 = var49.withMillisOfSecond(1);
    org.joda.time.LocalTime var52 = org.joda.time.LocalTime.now();
    boolean var53 = var51.isAfter((org.joda.time.ReadablePartial)var52);
    org.joda.time.chrono.JulianChronology var54 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var55 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var54);
    org.joda.time.LocalDate var56 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var54);
    org.joda.time.DurationField var57 = var54.hours();
    boolean var58 = var52.equals((java.lang.Object)var54);
    org.joda.time.Duration var60 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var61 = new org.joda.time.MutableDateTime();
    var61.setWeekOfWeekyear(1);
    int var64 = var61.getRoundingMode();
    var61.addMillis(100);
    var61.setSecondOfMinute(10);
    org.joda.time.PeriodType var69 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var70 = new org.joda.time.Period((org.joda.time.ReadableDuration)var60, (org.joda.time.ReadableInstant)var61, var69);
    org.joda.time.Days var71 = var70.toStandardDays();
    org.joda.time.LocalTime var72 = var52.minus((org.joda.time.ReadablePeriod)var70);
    org.joda.time.DateMidnight var73 = var25.plus((org.joda.time.ReadablePeriod)var70);
    org.joda.time.DateMidnight var75 = var25.plus(1L);
    org.joda.time.Minutes var76 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadableInstant)var4, (org.joda.time.ReadableInstant)var25);
    org.joda.time.Period var81 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var83 = var81.plusYears((-1));
    org.joda.time.Minutes var84 = var81.toStandardMinutes();
    org.joda.time.Minutes var86 = org.joda.time.Minutes.minutes(10);
    org.joda.time.Minutes var87 = var84.minus(var86);
    org.joda.time.Period var92 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var94 = var92.plusYears((-1));
    org.joda.time.Minutes var95 = var92.toStandardMinutes();
    org.joda.time.Minutes var96 = var84.plus(var95);
    org.joda.time.Minutes var97 = var76.plus(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);

  }

  public void test121() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test121"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    boolean var25 = var18.isLeap(1L);
    boolean var26 = var18.isSupported();
    long var29 = var18.getDifferenceAsLong(1377742981948L, 9L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MutableDateTime var30 = new org.joda.time.MutableDateTime((java.lang.Object)var18);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1377742981L);

  }

  public void test122() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test122"); }


    long var2 = org.joda.time.field.FieldUtils.safeMultiply((-3600000L), 34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-122400000L));

  }

  public void test123() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test123"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    int var5 = var2.getRoundingMode();
    var2.addMillis(100);
    var2.setSecondOfMinute(10);
    org.joda.time.PeriodType var10 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var11 = new org.joda.time.Period((org.joda.time.ReadableDuration)var1, (org.joda.time.ReadableInstant)var2, var10);
    org.joda.time.Days var12 = var11.toStandardDays();
    org.joda.time.Hours var13 = var12.toStandardHours();
    java.lang.String var14 = var13.toString();
    org.joda.time.Days var15 = var13.toStandardDays();
    org.joda.time.Minutes var16 = var15.toStandardMinutes();
    int var17 = var15.size();
    java.lang.String var18 = var15.toString();
    org.joda.time.chrono.JulianChronology var19 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var20 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var19);
    org.joda.time.LocalDate var21 = var20.toLocalDate();
    org.joda.time.DateMidnight var23 = var20.minusWeeks((-1));
    org.joda.time.Duration var25 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var26 = new org.joda.time.MutableDateTime();
    var26.setWeekOfWeekyear(1);
    int var29 = var26.getRoundingMode();
    var26.addMillis(100);
    var26.setSecondOfMinute(10);
    org.joda.time.PeriodType var34 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var35 = new org.joda.time.Period((org.joda.time.ReadableDuration)var25, (org.joda.time.ReadableInstant)var26, var34);
    org.joda.time.Days var36 = var35.toStandardDays();
    org.joda.time.DurationFieldType var37 = var36.getFieldType();
    org.joda.time.DateMidnight var39 = var23.withFieldAdded(var37, 1);
    org.joda.time.MutableInterval var40 = new org.joda.time.MutableInterval();
    org.joda.time.MutableInterval var41 = var40.copy();
    org.joda.time.DateTime var42 = var41.getStart();
    org.joda.time.Duration var44 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var46 = org.joda.time.Duration.standardHours((-1L));
    boolean var47 = var44.isShorterThan((org.joda.time.ReadableDuration)var46);
    org.joda.time.Duration var48 = var44.toDuration();
    org.joda.time.chrono.JulianChronology var49 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var50 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var49);
    org.joda.time.LocalDate var51 = var50.toLocalDate();
    org.joda.time.MutableDateTime var52 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var53 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var50, (org.joda.time.ReadableInstant)var52);
    org.joda.time.MutableDateTime var54 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var55 = var54.year();
    boolean var56 = var52.isBefore((org.joda.time.ReadableInstant)var54);
    org.joda.time.Duration var58 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var60 = org.joda.time.Duration.standardHours((-1L));
    boolean var61 = var58.isShorterThan((org.joda.time.ReadableDuration)var60);
    org.joda.time.Duration var63 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var65 = org.joda.time.Duration.standardHours((-1L));
    boolean var66 = var63.isShorterThan((org.joda.time.ReadableDuration)var65);
    org.joda.time.Duration var67 = var58.plus((org.joda.time.ReadableDuration)var63);
    var54.add((org.joda.time.ReadableDuration)var63);
    org.joda.time.PeriodType var69 = org.joda.time.PeriodType.months();
    org.joda.time.Period var70 = new org.joda.time.Period((org.joda.time.ReadableDuration)var44, (org.joda.time.ReadableInstant)var54, var69);
    org.joda.time.MutablePeriod var71 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant)var23, (org.joda.time.ReadableInstant)var42, var69);
    org.joda.time.DateMidnight var73 = var23.withYear(33);
    org.joda.time.MutableInterval var74 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod)var15, (org.joda.time.ReadableInstant)var73);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateMidnight var76 = var73.withEra((-17));
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PT0H"+ "'", var14.equals("PT0H"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "P0D"+ "'", var18.equals("P0D"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test124() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test124"); }


    org.joda.time.MutableInterval var0 = new org.joda.time.MutableInterval();
    var0.setStartMillis((-1L));
    org.joda.time.Chronology var3 = var0.getChronology();
    org.joda.time.MutableInterval var4 = new org.joda.time.MutableInterval();
    long var5 = var4.getEndMillis();
    org.joda.time.Months var6 = org.joda.time.Months.monthsIn((org.joda.time.ReadableInterval)var4);
    org.joda.time.Chronology var7 = var4.getChronology();
    boolean var8 = var0.isAfter((org.joda.time.ReadableInterval)var4);
    org.joda.time.Months var9 = org.joda.time.Months.monthsIn((org.joda.time.ReadableInterval)var0);
    org.joda.time.Instant var10 = new org.joda.time.Instant();
    long var11 = var10.getMillis();
    org.joda.time.MutableDateTime var12 = var10.toMutableDateTimeISO();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setStart((org.joda.time.ReadableInstant)var12);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test125() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test125"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var5);
    org.joda.time.DateTimeField var8 = var5.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate var14 = var12.minusMonths(0);
    int[] var16 = var9.get((org.joda.time.ReadablePartial)var14, 100L);
    org.joda.time.chrono.EthiopicChronology var20 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var21 = var20.hours();
    org.joda.time.LocalTime var22 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var20);
    org.joda.time.Period var23 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var20);
    org.joda.time.DateTimeField var24 = var20.millisOfSecond();
    org.joda.time.DateTimeField var25 = var20.secondOfDay();
    org.joda.time.field.SkipDateTimeField var27 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var9, var25, 100);
    org.joda.time.LocalDateTime var28 = org.joda.time.LocalDateTime.now();
    int var29 = var28.getDayOfYear();
    org.joda.time.Chronology var30 = var28.getChronology();
    int var31 = var28.getYearOfCentury();
    int var32 = var27.getMaximumValue((org.joda.time.ReadablePartial)var28);
    boolean var34 = var27.isLeap(1L);
    org.joda.time.LocalDateTime var35 = org.joda.time.LocalDateTime.now();
    int var36 = var35.getDayOfYear();
    int var37 = var27.getMinimumValue((org.joda.time.ReadablePartial)var35);
    org.joda.time.DurationField var38 = var27.getDurationField();
    org.joda.time.DateTimeFieldType var39 = var27.getType();
    org.joda.time.field.OffsetDateTimeField var43 = new org.joda.time.field.OffsetDateTimeField(var8, var39, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var46 = new org.joda.time.IllegalFieldValueException(var39, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var49 = var0.appendFraction(var39, 33, (-948));
    org.joda.time.chrono.EthiopicChronology var50 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var51 = var50.minutes();
    org.joda.time.DateTimeField var52 = var50.year();
    org.joda.time.DurationField var53 = var50.hours();
    org.joda.time.field.UnsupportedDateTimeField var54 = org.joda.time.field.UnsupportedDateTimeField.getInstance(var39, var53);
    java.lang.String var55 = var54.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "secondOfDay"+ "'", var55.equals("secondOfDay"));

  }

  public void test126() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test126"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    int var2 = var1.getSeconds();
    int var3 = var1.getMonths();
    org.joda.time.DateTimeZone var6 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.chrono.ISOChronology var7 = org.joda.time.chrono.ISOChronology.getInstance(var6);
    org.joda.time.DurationField var8 = var7.millis();
    var1.add((-7200000L), (org.joda.time.Chronology)var7);
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.Period var16 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var18 = var16.plusSeconds(100);
    org.joda.time.Period var20 = var16.minusMillis(10);
    boolean var21 = var11.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var22 = var11.dayOfYear();
    org.joda.time.chrono.JulianChronology var23 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var24 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var23);
    org.joda.time.LocalDate var25 = var24.toLocalDate();
    org.joda.time.LocalDate var27 = var25.minusMonths(0);
    org.joda.time.DateTime var28 = var25.toDateTimeAtMidnight();
    org.joda.time.DateTime var30 = var28.withCenturyOfEra(4);
    org.joda.time.Days var31 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var11, (org.joda.time.ReadableInstant)var30);
    org.joda.time.DateMidnight var33 = var11.plusMonths(10);
    org.joda.time.chrono.JulianChronology var34 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var35 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var34);
    org.joda.time.LocalDate var36 = var35.toLocalDate();
    org.joda.time.MutableDateTime var37 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var38 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var35, (org.joda.time.ReadableInstant)var37);
    org.joda.time.MutableDateTime var39 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var40 = var39.year();
    boolean var41 = var37.isBefore((org.joda.time.ReadableInstant)var39);
    org.joda.time.Duration var43 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var45 = org.joda.time.Duration.standardHours((-1L));
    boolean var46 = var43.isShorterThan((org.joda.time.ReadableDuration)var45);
    org.joda.time.Duration var48 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var50 = org.joda.time.Duration.standardHours((-1L));
    boolean var51 = var48.isShorterThan((org.joda.time.ReadableDuration)var50);
    org.joda.time.Duration var52 = var43.plus((org.joda.time.ReadableDuration)var48);
    var39.add((org.joda.time.ReadableDuration)var48);
    org.joda.time.Years var54 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var33, (org.joda.time.ReadableInstant)var39);
    var1.add((org.joda.time.ReadablePeriod)var54);
    var1.setWeeks(21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test127() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test127"); }


    org.joda.time.Instant var0 = org.joda.time.Instant.now();
    org.joda.time.DateTime var1 = var0.toDateTimeISO();
    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var3 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var2);
    org.joda.time.LocalDate var4 = var3.toLocalDate();
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var6 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var3, (org.joda.time.ReadableInstant)var5);
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var8 = var7.year();
    boolean var9 = var5.isBefore((org.joda.time.ReadableInstant)var7);
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var13 = org.joda.time.Duration.standardHours((-1L));
    boolean var14 = var11.isShorterThan((org.joda.time.ReadableDuration)var13);
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    boolean var19 = var16.isShorterThan((org.joda.time.ReadableDuration)var18);
    org.joda.time.Duration var20 = var11.plus((org.joda.time.ReadableDuration)var16);
    var7.add((org.joda.time.ReadableDuration)var16);
    org.joda.time.chrono.JulianChronology var22 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var23 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var22);
    org.joda.time.LocalDate var24 = var23.toLocalDate();
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var26 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var23, (org.joda.time.ReadableInstant)var25);
    org.joda.time.MutableDateTime var27 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var28 = var27.year();
    boolean var29 = var25.isBefore((org.joda.time.ReadableInstant)var27);
    org.joda.time.Interval var30 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableInstant)var27);
    org.joda.time.DateTimeZone var31 = var27.getZone();
    org.joda.time.Hours var32 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadableInstant)var0, (org.joda.time.ReadableInstant)var27);
    org.joda.time.Duration var34 = org.joda.time.Duration.standardHours(1377746598594L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Instant var36 = var0.withDurationAdded((org.joda.time.ReadableDuration)var34, 31);
      fail("Expected exception of type java.lang.ArithmeticException");
    } catch (java.lang.ArithmeticException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test128() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test128"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.MutableDateTime.Property var20 = var5.weekyear();
    org.joda.time.MutableDateTime.Property var21 = var5.year();
    boolean var23 = var5.equals((java.lang.Object)(byte)0);
    long var24 = var5.getMillis();
    org.joda.time.MutableDateTime var25 = var5.copy();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.setMillisOfSecond((-59));
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-3599990L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test129() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test129"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.DurationField var19 = var18.getRangeDurationField();
    org.joda.time.Partial var20 = new org.joda.time.Partial();
    java.lang.String var21 = var20.toStringList();
    org.joda.time.chrono.EthiopicChronology var23 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.LocalDate var26 = var25.toLocalDate();
    org.joda.time.LocalDate var28 = var26.minusMonths(0);
    int[] var30 = var23.get((org.joda.time.ReadablePartial)var28, 100L);
    org.joda.time.chrono.EthiopicChronology var34 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var35 = var34.hours();
    org.joda.time.LocalTime var36 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var34);
    org.joda.time.Period var37 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var34);
    org.joda.time.DateTimeField var38 = var34.millisOfSecond();
    org.joda.time.DateTimeField var39 = var34.secondOfDay();
    org.joda.time.field.SkipDateTimeField var41 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var23, var39, 100);
    org.joda.time.LocalDateTime var42 = org.joda.time.LocalDateTime.now();
    int var43 = var42.getDayOfYear();
    org.joda.time.Chronology var44 = var42.getChronology();
    int var45 = var42.getYearOfCentury();
    int var46 = var41.getMaximumValue((org.joda.time.ReadablePartial)var42);
    boolean var48 = var41.isLeap(1L);
    org.joda.time.LocalDateTime var49 = org.joda.time.LocalDateTime.now();
    int var50 = var49.getDayOfYear();
    int var51 = var41.getMinimumValue((org.joda.time.ReadablePartial)var49);
    long var54 = var41.addWrapField(9L, 228);
    org.joda.time.LocalDateTime var55 = org.joda.time.LocalDateTime.now();
    int var56 = var55.getDayOfYear();
    org.joda.time.Chronology var57 = var55.getChronology();
    org.joda.time.YearMonthDay var58 = new org.joda.time.YearMonthDay(var57);
    org.joda.time.YearMonth var61 = new org.joda.time.YearMonth(10L);
    org.joda.time.chrono.EthiopicChronology var62 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.YearMonth var63 = var61.withChronologyRetainFields((org.joda.time.Chronology)var62);
    org.joda.time.Years var65 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var66 = var65.getPeriodType();
    org.joda.time.Years var68 = org.joda.time.Years.years((-1));
    int var69 = var65.compareTo((org.joda.time.base.BaseSingleFieldPeriod)var68);
    int[] var72 = var62.get((org.joda.time.ReadablePeriod)var68, 0L, 0L);
    int[] var74 = var41.addWrapPartial((org.joda.time.ReadablePartial)var58, (-9), var72, 0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int[] var76 = var18.set((org.joda.time.ReadablePartial)var20, 38, var74, 46);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "[]"+ "'", var21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 228009L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test130() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test130"); }


    org.joda.time.Instant var1 = new org.joda.time.Instant(1377746597835L);
    org.joda.time.DateTime var2 = var1.toDateTimeISO();
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var4 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var3);
    org.joda.time.LocalDate var5 = var4.toLocalDate();
    org.joda.time.MutableDateTime var6 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var7 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var4, (org.joda.time.ReadableInstant)var6);
    org.joda.time.MutableDateTime var8 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var9 = var8.year();
    boolean var10 = var6.isBefore((org.joda.time.ReadableInstant)var8);
    org.joda.time.Duration var12 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    boolean var15 = var12.isShorterThan((org.joda.time.ReadableDuration)var14);
    org.joda.time.Duration var17 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    boolean var20 = var17.isShorterThan((org.joda.time.ReadableDuration)var19);
    org.joda.time.Duration var21 = var12.plus((org.joda.time.ReadableDuration)var17);
    var8.add((org.joda.time.ReadableDuration)var17);
    org.joda.time.chrono.JulianChronology var23 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var24 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var23);
    org.joda.time.LocalDate var25 = var24.toLocalDate();
    org.joda.time.MutableDateTime var26 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var27 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var24, (org.joda.time.ReadableInstant)var26);
    org.joda.time.MutableDateTime var28 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var29 = var28.year();
    boolean var30 = var26.isBefore((org.joda.time.ReadableInstant)var28);
    org.joda.time.Interval var31 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var8, (org.joda.time.ReadableInstant)var28);
    boolean var33 = var31.isAfter(10L);
    org.joda.time.MutableDateTime var34 = new org.joda.time.MutableDateTime();
    var34.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var37 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var34.setChronology((org.joda.time.Chronology)var37);
    org.joda.time.Interval var39 = var31.withChronology((org.joda.time.Chronology)var37);
    org.joda.time.DurationField var40 = var37.halfdays();
    org.joda.time.Chronology var41 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology)var37);
    org.joda.time.LocalDate var42 = new org.joda.time.LocalDate((java.lang.Object)var2, var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test131() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test131"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var24 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var23);
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var26 = var25.year();
    boolean var27 = var23.isBefore((org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var28 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var25);
    org.joda.time.DateTimeZone var29 = var25.getZone();
    org.joda.time.YearMonth var30 = org.joda.time.YearMonth.now(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test132() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test132"); }


    org.joda.time.LocalDateTime var1 = org.joda.time.LocalDateTime.now();
    int var2 = var1.getDayOfYear();
    org.joda.time.Chronology var3 = var1.getChronology();
    org.joda.time.chrono.StrictChronology var4 = org.joda.time.chrono.StrictChronology.getInstance(var3);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.LocalDate var9 = var7.withMonthOfYear(1);
    org.joda.time.LocalDate var11 = var7.withWeekyear(1);
    org.joda.time.LocalDate var13 = var7.withDayOfYear(1);
    org.joda.time.LocalDate var15 = var13.minusMonths(16);
    boolean var16 = var4.equals((java.lang.Object)16);
    org.joda.time.YearMonth var17 = new org.joda.time.YearMonth(0L, (org.joda.time.Chronology)var4);
    org.joda.time.format.DateTimeFormatter var18 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
    org.joda.time.chrono.EthiopicChronology var22 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var23 = var22.hours();
    org.joda.time.LocalTime var24 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var22);
    org.joda.time.Period var25 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var22);
    org.joda.time.DateTimeField var26 = var22.millisOfSecond();
    org.joda.time.chrono.LenientChronology var27 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var22);
    org.joda.time.format.DateTimeFormatter var28 = var18.withChronology((org.joda.time.Chronology)var27);
    org.joda.time.format.DateTimeFormatter var29 = var28.withZoneUTC();
    java.lang.String var30 = var17.toString(var29);
    org.joda.time.chrono.JulianChronology var31 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var32 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var31);
    org.joda.time.Period var37 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var39 = var37.plusSeconds(100);
    org.joda.time.Period var41 = var37.minusMillis(10);
    boolean var42 = var32.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var43 = var32.dayOfYear();
    int var44 = var32.getSecondOfDay();
    org.joda.time.DateMidnight var46 = var32.withWeekyear(240);
    org.joda.time.DateMidnight var48 = var46.minusMonths(28);
    org.joda.time.DateTimeZone var49 = var48.getZone();
    org.joda.time.Interval var50 = var17.toInterval(var49);
    org.joda.time.YearMonth var52 = var17.minusYears(2);
    org.joda.time.Duration var54 = org.joda.time.Duration.standardSeconds(1377742981948L);
    org.joda.time.chrono.JulianChronology var55 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var56 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var55);
    org.joda.time.LocalDate var57 = var56.toLocalDate();
    org.joda.time.MutableDateTime var58 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var59 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var56, (org.joda.time.ReadableInstant)var58);
    org.joda.time.MutableDateTime var60 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var61 = var60.year();
    boolean var62 = var58.isBefore((org.joda.time.ReadableInstant)var60);
    org.joda.time.Duration var64 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var66 = org.joda.time.Duration.standardHours((-1L));
    boolean var67 = var64.isShorterThan((org.joda.time.ReadableDuration)var66);
    org.joda.time.Duration var69 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var71 = org.joda.time.Duration.standardHours((-1L));
    boolean var72 = var69.isShorterThan((org.joda.time.ReadableDuration)var71);
    org.joda.time.Duration var73 = var64.plus((org.joda.time.ReadableDuration)var69);
    var60.add((org.joda.time.ReadableDuration)var69);
    org.joda.time.MutableDateTime.Property var75 = var60.weekyear();
    org.joda.time.MutableDateTime.Property var76 = var60.year();
    boolean var78 = var60.equals((java.lang.Object)(byte)0);
    var60.addDays(216);
    org.joda.time.Period var81 = var54.toPeriodFrom((org.joda.time.ReadableInstant)var60);
    java.util.GregorianCalendar var82 = var60.toGregorianCalendar();
    org.joda.time.chrono.EthiopicChronology var84 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var85 = var84.hours();
    org.joda.time.LocalTime var86 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var84);
    org.joda.time.LocalTime var88 = var86.withMillisOfSecond(1);
    org.joda.time.LocalTime var89 = org.joda.time.LocalTime.now();
    boolean var90 = var88.isAfter((org.joda.time.ReadablePartial)var89);
    org.joda.time.Chronology var91 = var89.getChronology();
    org.joda.time.MonthDay var92 = org.joda.time.MonthDay.now(var91);
    var60.setChronology(var91);
    org.joda.time.YearMonth var94 = var17.withChronologyRetainFields(var91);
    int var95 = var94.getMonthOfYear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "\uFFFD\uFFFD"+ "'", var30.equals("\uFFFD\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == 1);

  }

  public void test133() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test133"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    int var5 = var2.getRoundingMode();
    var2.addMillis(100);
    var2.setSecondOfMinute(10);
    org.joda.time.PeriodType var10 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var11 = new org.joda.time.Period((org.joda.time.ReadableDuration)var1, (org.joda.time.ReadableInstant)var2, var10);
    org.joda.time.PeriodType var12 = var10.withMillisRemoved();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test134() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test134"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.LocalTime var3 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var1);
    org.joda.time.LocalTime var5 = var3.withMillisOfSecond(1);
    org.joda.time.LocalTime var6 = org.joda.time.LocalTime.now();
    boolean var7 = var5.isAfter((org.joda.time.ReadablePartial)var6);
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var8);
    org.joda.time.LocalDate var10 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var8);
    org.joda.time.DurationField var11 = var8.hours();
    boolean var12 = var6.equals((java.lang.Object)var8);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    var15.setWeekOfWeekyear(1);
    int var18 = var15.getRoundingMode();
    var15.addMillis(100);
    var15.setSecondOfMinute(10);
    org.joda.time.PeriodType var23 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var24 = new org.joda.time.Period((org.joda.time.ReadableDuration)var14, (org.joda.time.ReadableInstant)var15, var23);
    org.joda.time.Days var25 = var24.toStandardDays();
    org.joda.time.LocalTime var26 = var6.minus((org.joda.time.ReadablePeriod)var24);
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    var29.setWeekOfWeekyear(1);
    int var32 = var29.getRoundingMode();
    var29.addMillis(100);
    var29.setSecondOfMinute(10);
    org.joda.time.PeriodType var37 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var38 = new org.joda.time.Period((org.joda.time.ReadableDuration)var28, (org.joda.time.ReadableInstant)var29, var37);
    org.joda.time.Days var39 = var38.toStandardDays();
    org.joda.time.chrono.JulianChronology var40 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var41 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var40);
    org.joda.time.Period var46 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var48 = var46.plusSeconds(100);
    org.joda.time.Period var50 = var46.minusMillis(10);
    boolean var51 = var41.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var52 = var41.dayOfYear();
    org.joda.time.chrono.JulianChronology var53 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var54 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var53);
    org.joda.time.LocalDate var55 = var54.toLocalDate();
    org.joda.time.LocalDate var57 = var55.minusMonths(0);
    org.joda.time.DateTime var58 = var55.toDateTimeAtMidnight();
    org.joda.time.DateTime var60 = var58.withCenturyOfEra(4);
    org.joda.time.Days var61 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var41, (org.joda.time.ReadableInstant)var60);
    org.joda.time.Days var63 = var61.dividedBy(1);
    boolean var64 = var39.isGreaterThan(var61);
    org.joda.time.DurationFieldType var65 = var39.getFieldType();
    org.joda.time.Period var67 = var24.withField(var65, 0);
    org.joda.time.Weeks var68 = var24.toStandardWeeks();
    org.joda.time.Period var69 = var24.toPeriod();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test135() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test135"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDateTime var1 = org.joda.time.LocalDateTime.parse("PT1M");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test136() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test136"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.withMonthOfYear(1);
    org.joda.time.LocalDate var6 = var2.withWeekyear(1);
    org.joda.time.LocalDate var8 = var2.withDayOfYear(1);
    org.joda.time.LocalDate var10 = var8.plusWeeks(73381948);
    org.joda.time.LocalDate.Property var11 = var10.dayOfYear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test137() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test137"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    var0.setWeekOfWeekyear(1);
    var0.addSeconds((-1));
    var0.addMonths(379);

  }

  public void test138() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test138"); }


    org.joda.time.Period var4 = new org.joda.time.Period(1, 10, 10, 1);
    int var5 = var4.getWeeks();
    org.joda.time.Period var6 = var4.toPeriod();
    int var7 = var6.getMonths();
    org.joda.time.MutablePeriod var8 = var6.toMutablePeriod();
    org.joda.time.LocalDateTime var9 = org.joda.time.LocalDateTime.now();
    int var10 = var9.getDayOfYear();
    org.joda.time.Chronology var11 = var9.getChronology();
    org.joda.time.chrono.JulianChronology var12 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var13 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var12);
    org.joda.time.LocalDate var14 = var13.toLocalDate();
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var16 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var13, (org.joda.time.ReadableInstant)var15);
    org.joda.time.chrono.JulianChronology var17 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var18 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var17);
    org.joda.time.LocalDate var19 = var18.toLocalDate();
    org.joda.time.MutableDateTime var20 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var21 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var18, (org.joda.time.ReadableInstant)var20);
    org.joda.time.MutableDateTime var22 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var23 = var22.year();
    boolean var24 = var20.isBefore((org.joda.time.ReadableInstant)var22);
    org.joda.time.Duration var26 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    boolean var29 = var26.isShorterThan((org.joda.time.ReadableDuration)var28);
    org.joda.time.Duration var31 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    boolean var34 = var31.isShorterThan((org.joda.time.ReadableDuration)var33);
    org.joda.time.Duration var35 = var26.plus((org.joda.time.ReadableDuration)var31);
    var22.add((org.joda.time.ReadableDuration)var31);
    org.joda.time.Seconds var37 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var13, (org.joda.time.ReadableInstant)var22);
    org.joda.time.Weeks var38 = var37.toStandardWeeks();
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var42 = org.joda.time.Duration.standardHours((-1L));
    boolean var43 = var40.isShorterThan((org.joda.time.ReadableDuration)var42);
    org.joda.time.Duration var45 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var47 = org.joda.time.Duration.standardHours((-1L));
    boolean var48 = var45.isShorterThan((org.joda.time.ReadableDuration)var47);
    org.joda.time.Duration var49 = var40.plus((org.joda.time.ReadableDuration)var45);
    boolean var50 = var38.equals((java.lang.Object)var49);
    org.joda.time.LocalDateTime var52 = var9.withDurationAdded((org.joda.time.ReadableDuration)var49, 10);
    var8.add((org.joda.time.ReadableDuration)var49);
    var8.setMillis(54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test139() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test139"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var2.toDateTimeAtMidnight();
    org.joda.time.DateTime var7 = var5.withCenturyOfEra(4);
    org.joda.time.DateTime.Property var8 = var7.monthOfYear();
    org.joda.time.DateTime var10 = var7.withSecondOfMinute(10);
    org.joda.time.YearMonthDay var11 = var10.toYearMonthDay();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test140() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test140"); }


    org.joda.time.DateTimeComparator var0 = org.joda.time.DateTimeComparator.getTimeOnlyInstance();
    org.joda.time.DateTimeFieldType var1 = var0.getUpperLimit();
    java.lang.String var2 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "DateTimeComparator[-dayOfYear]"+ "'", var2.equals("DateTimeComparator[-dayOfYear]"));

  }

  public void test141() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test141"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.MutableDateTime var21 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var22 = var21.year();
    org.joda.time.MutableDateTime.Property var23 = var21.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.Period var30 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var32 = var30.plusSeconds(100);
    org.joda.time.Period var34 = var30.minusMillis(10);
    boolean var35 = var25.equals((java.lang.Object)10);
    org.joda.time.Weeks var36 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var25);
    org.joda.time.MutableDateTime var37 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var38 = var37.year();
    org.joda.time.MutableDateTime.Property var39 = var37.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var40 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var41 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var40);
    org.joda.time.Period var46 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var48 = var46.plusSeconds(100);
    org.joda.time.Period var50 = var46.minusMillis(10);
    boolean var51 = var41.equals((java.lang.Object)10);
    org.joda.time.Weeks var52 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var37, (org.joda.time.ReadableInstant)var41);
    boolean var53 = var36.isLessThan(var52);
    org.joda.time.Weeks var55 = var52.dividedBy(1);
    org.joda.time.Days var56 = var52.toStandardDays();
    org.joda.time.Days var58 = var56.plus(12);
    org.joda.time.Duration var60 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var61 = new org.joda.time.MutableDateTime();
    var61.setWeekOfWeekyear(1);
    int var64 = var61.getRoundingMode();
    var61.addMillis(100);
    var61.setSecondOfMinute(10);
    org.joda.time.PeriodType var69 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var70 = new org.joda.time.Period((org.joda.time.ReadableDuration)var60, (org.joda.time.ReadableInstant)var61, var69);
    org.joda.time.Days var71 = var70.toStandardDays();
    org.joda.time.DurationFieldType var72 = var71.getFieldType();
    boolean var73 = var56.isLessThan(var71);
    org.joda.time.DateMidnight var75 = var4.withPeriodAdded((org.joda.time.ReadablePeriod)var56, 110);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test142() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test142"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    var1.addDays(1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    var1.add((org.joda.time.ReadableDuration)var7);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var7, (org.joda.time.ReadableInstant)var10);
    var11.clear();
    org.joda.time.PeriodType var13 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var14 = new org.joda.time.MutablePeriod(var13);
    var14.addDays(1);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    boolean var21 = var18.isShorterThan((org.joda.time.ReadableDuration)var20);
    var14.add((org.joda.time.ReadableDuration)var20);
    var11.add((org.joda.time.ReadablePeriod)var14);
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.LocalDate var26 = var25.toLocalDate();
    org.joda.time.MutableDateTime var27 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var28 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var25, (org.joda.time.ReadableInstant)var27);
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var30 = var29.year();
    boolean var31 = var27.isBefore((org.joda.time.ReadableInstant)var29);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    boolean var41 = var38.isShorterThan((org.joda.time.ReadableDuration)var40);
    org.joda.time.Duration var42 = var33.plus((org.joda.time.ReadableDuration)var38);
    var29.add((org.joda.time.ReadableDuration)var38);
    org.joda.time.chrono.JulianChronology var44 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var45 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var44);
    org.joda.time.LocalDate var46 = var45.toLocalDate();
    org.joda.time.MutableDateTime var47 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var48 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var45, (org.joda.time.ReadableInstant)var47);
    org.joda.time.MutableDateTime var49 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var50 = var49.year();
    boolean var51 = var47.isBefore((org.joda.time.ReadableInstant)var49);
    org.joda.time.Interval var52 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var29, (org.joda.time.ReadableInstant)var49);
    boolean var54 = var52.isAfter(10L);
    org.joda.time.MutableDateTime var55 = new org.joda.time.MutableDateTime();
    var55.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var58 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var55.setChronology((org.joda.time.Chronology)var58);
    org.joda.time.Interval var60 = var52.withChronology((org.joda.time.Chronology)var58);
    var11.setPeriod((org.joda.time.ReadableInterval)var52);
    org.joda.time.Months var63 = org.joda.time.Months.months((-1));
    org.joda.time.Months var65 = var63.plus(100);
    org.joda.time.MutableInterval var66 = new org.joda.time.MutableInterval();
    long var67 = var66.getEndMillis();
    org.joda.time.Months var68 = org.joda.time.Months.monthsIn((org.joda.time.ReadableInterval)var66);
    boolean var69 = var65.isGreaterThan(var68);
    org.joda.time.Interval var70 = var52.withPeriodBeforeEnd((org.joda.time.ReadablePeriod)var65);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Interval var72 = var52.withStartMillis(2731816026305L);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test143() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test143"); }


    long var2 = org.joda.time.field.FieldUtils.safeSubtract(1377746581948L, 15946L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1377746566002L);

  }

  public void test144() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test144"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    var0.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var0.setChronology((org.joda.time.Chronology)var3);
    org.joda.time.DateTimeField var5 = var3.clockhourOfHalfday();
    org.joda.time.format.DateTimeFormatterBuilder var6 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var8 = var6.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var10 = var6.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var11 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var12 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var11);
    org.joda.time.LocalDate var13 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var14 = var11.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var15 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var16 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var17 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var16);
    org.joda.time.LocalDate var18 = var17.toLocalDate();
    org.joda.time.LocalDate var20 = var18.minusMonths(0);
    int[] var22 = var15.get((org.joda.time.ReadablePartial)var20, 100L);
    org.joda.time.chrono.EthiopicChronology var26 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var27 = var26.hours();
    org.joda.time.LocalTime var28 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var26);
    org.joda.time.Period var29 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var26);
    org.joda.time.DateTimeField var30 = var26.millisOfSecond();
    org.joda.time.DateTimeField var31 = var26.secondOfDay();
    org.joda.time.field.SkipDateTimeField var33 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var15, var31, 100);
    org.joda.time.LocalDateTime var34 = org.joda.time.LocalDateTime.now();
    int var35 = var34.getDayOfYear();
    org.joda.time.Chronology var36 = var34.getChronology();
    int var37 = var34.getYearOfCentury();
    int var38 = var33.getMaximumValue((org.joda.time.ReadablePartial)var34);
    boolean var40 = var33.isLeap(1L);
    org.joda.time.LocalDateTime var41 = org.joda.time.LocalDateTime.now();
    int var42 = var41.getDayOfYear();
    int var43 = var33.getMinimumValue((org.joda.time.ReadablePartial)var41);
    org.joda.time.DurationField var44 = var33.getDurationField();
    org.joda.time.DateTimeFieldType var45 = var33.getType();
    org.joda.time.field.OffsetDateTimeField var49 = new org.joda.time.field.OffsetDateTimeField(var14, var45, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var52 = new org.joda.time.IllegalFieldValueException(var45, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var55 = var6.appendFraction(var45, 33, (-948));
    org.joda.time.field.DividedDateTimeField var57 = new org.joda.time.field.DividedDateTimeField(var5, var45, 100);
    long var60 = var57.add((-86386600L), 13);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var63 = var57.addWrapField(1377742982607L, 12);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 4593613400L);

  }

  public void test145() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test145"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.Period var6 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var8 = var6.plusSeconds(100);
    org.joda.time.Period var10 = var6.minusMillis(10);
    boolean var11 = var1.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var12 = var1.dayOfYear();
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var14 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var13);
    org.joda.time.LocalDate var15 = var14.toLocalDate();
    org.joda.time.LocalDate var17 = var15.minusMonths(0);
    org.joda.time.DateTime var18 = var15.toDateTimeAtMidnight();
    org.joda.time.DateTime var20 = var18.withCenturyOfEra(4);
    org.joda.time.Days var21 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var20);
    org.joda.time.Days var23 = var21.dividedBy(1);
    org.joda.time.Days var25 = var23.plus(240);
    org.joda.time.PeriodType var26 = var25.getPeriodType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test146() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test146"); }


    org.joda.time.chrono.ISOChronology var1 = org.joda.time.chrono.ISOChronology.getInstance();
    org.joda.time.tz.FixedDateTimeZone var6 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var8 = var6.getOffsetFromLocal(1377742981323L);
    org.joda.time.DateTimeZone var10 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.chrono.JulianChronology var11 = org.joda.time.chrono.JulianChronology.getInstance(var10);
    long var13 = var6.getMillisKeepLocal(var10, 1377746580759L);
    org.joda.time.Chronology var14 = var1.withZone(var10);
    java.util.TimeZone var15 = var10.toTimeZone();
    org.joda.time.LocalTime var16 = new org.joda.time.LocalTime(1320340981334L, var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 1377746580754L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test147() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test147"); }


    org.joda.time.Period var4 = new org.joda.time.Period(16, 100, 1, 16);
    org.joda.time.Period var6 = var4.minusWeeks(11);
    org.joda.time.PeriodType var8 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.DateTime var9 = org.joda.time.DateTime.now();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.MutableDateTime var13 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var14 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var11, (org.joda.time.ReadableInstant)var13);
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var16 = var15.year();
    boolean var17 = var13.isBefore((org.joda.time.ReadableInstant)var15);
    org.joda.time.MutableDateTime.Property var18 = var15.minuteOfHour();
    org.joda.time.MutableDateTime.Property var19 = var15.millisOfSecond();
    org.joda.time.Chronology var20 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant)var9, (org.joda.time.ReadableInstant)var15);
    org.joda.time.MutablePeriod var21 = new org.joda.time.MutablePeriod(9L, var8, var20);
    org.joda.time.PeriodType var22 = org.joda.time.PeriodType.months();
    org.joda.time.Duration var24 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    var25.setWeekOfWeekyear(1);
    int var28 = var25.getRoundingMode();
    var25.addMillis(100);
    var25.setSecondOfMinute(10);
    org.joda.time.PeriodType var33 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var34 = new org.joda.time.Period((org.joda.time.ReadableDuration)var24, (org.joda.time.ReadableInstant)var25, var33);
    org.joda.time.Days var35 = var34.toStandardDays();
    org.joda.time.DurationFieldType var36 = var35.getFieldType();
    int var37 = var22.indexOf(var36);
    var21.add(var36, 22);
    org.joda.time.Period var41 = var6.withField(var36, 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test148() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test148"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    var1.addDays(1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    var1.add((org.joda.time.ReadableDuration)var7);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var7, (org.joda.time.ReadableInstant)var10);
    var11.clear();
    org.joda.time.PeriodType var13 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var14 = new org.joda.time.MutablePeriod(var13);
    var14.addDays(1);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    boolean var21 = var18.isShorterThan((org.joda.time.ReadableDuration)var20);
    var14.add((org.joda.time.ReadableDuration)var20);
    var11.add((org.joda.time.ReadablePeriod)var14);
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.LocalDate var26 = var25.toLocalDate();
    org.joda.time.MutableDateTime var27 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var28 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var25, (org.joda.time.ReadableInstant)var27);
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var30 = var29.year();
    boolean var31 = var27.isBefore((org.joda.time.ReadableInstant)var29);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    boolean var41 = var38.isShorterThan((org.joda.time.ReadableDuration)var40);
    org.joda.time.Duration var42 = var33.plus((org.joda.time.ReadableDuration)var38);
    var29.add((org.joda.time.ReadableDuration)var38);
    org.joda.time.chrono.JulianChronology var44 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var45 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var44);
    org.joda.time.LocalDate var46 = var45.toLocalDate();
    org.joda.time.MutableDateTime var47 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var48 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var45, (org.joda.time.ReadableInstant)var47);
    org.joda.time.MutableDateTime var49 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var50 = var49.year();
    boolean var51 = var47.isBefore((org.joda.time.ReadableInstant)var49);
    org.joda.time.Interval var52 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var29, (org.joda.time.ReadableInstant)var49);
    boolean var54 = var52.isAfter(10L);
    org.joda.time.MutableDateTime var55 = new org.joda.time.MutableDateTime();
    var55.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var58 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var55.setChronology((org.joda.time.Chronology)var58);
    org.joda.time.Interval var60 = var52.withChronology((org.joda.time.Chronology)var58);
    var11.setPeriod((org.joda.time.ReadableInterval)var52);
    org.joda.time.Duration var63 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var64 = new org.joda.time.MutableDateTime();
    var64.setWeekOfWeekyear(1);
    int var67 = var64.getRoundingMode();
    var64.addMillis(100);
    var64.setSecondOfMinute(10);
    org.joda.time.PeriodType var72 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var73 = new org.joda.time.Period((org.joda.time.ReadableDuration)var63, (org.joda.time.ReadableInstant)var64, var72);
    org.joda.time.Days var74 = var73.toStandardDays();
    org.joda.time.Hours var75 = var74.toStandardHours();
    org.joda.time.Interval var76 = var52.withPeriodBeforeEnd((org.joda.time.ReadablePeriod)var74);
    boolean var77 = var52.containsNow();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);

  }

  public void test149() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test149"); }


    org.joda.time.format.PeriodFormatter var0 = org.joda.time.format.PeriodFormat.getDefault();
    java.util.Locale var1 = var0.getLocale();
    boolean var2 = var0.isPrinter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);

  }

  public void test150() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test150"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    int var3 = var2.getYear();
    org.joda.time.Period var6 = new org.joda.time.Period(10L, 1L);
    org.joda.time.Duration var8 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    var9.setWeekOfWeekyear(1);
    int var12 = var9.getRoundingMode();
    var9.addMillis(100);
    var9.setSecondOfMinute(10);
    org.joda.time.PeriodType var17 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var18 = new org.joda.time.Period((org.joda.time.ReadableDuration)var8, (org.joda.time.ReadableInstant)var9, var17);
    org.joda.time.Days var19 = var18.toStandardDays();
    org.joda.time.DurationFieldType var20 = var19.getFieldType();
    int var21 = var6.get(var20);
    org.joda.time.YearMonthDay var22 = var2.minus((org.joda.time.ReadablePeriod)var6);
    org.joda.time.LocalDate var23 = var2.toLocalDate();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDate var25 = var23.withMonthOfYear(23);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1962);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test151() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test151"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.withMonthOfYear(1);
    org.joda.time.LocalDate var6 = var2.withWeekyear(1);
    org.joda.time.LocalDate var8 = var2.withDayOfYear(1);
    org.joda.time.chrono.JulianChronology var9 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var10 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var9);
    org.joda.time.LocalDate var11 = var10.toLocalDate();
    org.joda.time.MutableDateTime var12 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var13 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var10, (org.joda.time.ReadableInstant)var12);
    org.joda.time.MutableDateTime var14 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var15 = var14.year();
    boolean var16 = var12.isBefore((org.joda.time.ReadableInstant)var14);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    boolean var21 = var18.isShorterThan((org.joda.time.ReadableDuration)var20);
    org.joda.time.Duration var23 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var25 = org.joda.time.Duration.standardHours((-1L));
    boolean var26 = var23.isShorterThan((org.joda.time.ReadableDuration)var25);
    org.joda.time.Duration var27 = var18.plus((org.joda.time.ReadableDuration)var23);
    var14.add((org.joda.time.ReadableDuration)var23);
    var14.addDays(104);
    org.joda.time.chrono.EthiopicChronology var31 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var32 = var31.dayOfYear();
    org.joda.time.YearMonthDay var33 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var31);
    int var34 = var33.getDayOfMonth();
    int var35 = var33.getDayOfMonth();
    org.joda.time.tz.FixedDateTimeZone var40 = new org.joda.time.tz.FixedDateTimeZone("PT0H", "ISOChronology[UTC]", 100, 13);
    org.joda.time.PeriodType var41 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var42 = new org.joda.time.MutablePeriod(var41);
    var42.addDays(1);
    org.joda.time.Duration var46 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var48 = org.joda.time.Duration.standardHours((-1L));
    boolean var49 = var46.isShorterThan((org.joda.time.ReadableDuration)var48);
    var42.add((org.joda.time.ReadableDuration)var48);
    org.joda.time.MutableDateTime var51 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var48, (org.joda.time.ReadableInstant)var51);
    var52.clear();
    org.joda.time.MutableDateTime var54 = new org.joda.time.MutableDateTime();
    org.joda.time.chrono.JulianChronology var55 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var56 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var55);
    org.joda.time.LocalDate var57 = var56.toLocalDate();
    org.joda.time.MutableDateTime var58 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var59 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var56, (org.joda.time.ReadableInstant)var58);
    org.joda.time.MutableDateTime var60 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var61 = var60.year();
    boolean var62 = var58.isBefore((org.joda.time.ReadableInstant)var60);
    org.joda.time.Duration var64 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var66 = org.joda.time.Duration.standardHours((-1L));
    boolean var67 = var64.isShorterThan((org.joda.time.ReadableDuration)var66);
    org.joda.time.Duration var69 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var71 = org.joda.time.Duration.standardHours((-1L));
    boolean var72 = var69.isShorterThan((org.joda.time.ReadableDuration)var71);
    org.joda.time.Duration var73 = var64.plus((org.joda.time.ReadableDuration)var69);
    var60.add((org.joda.time.ReadableDuration)var69);
    org.joda.time.MutableDateTime.Property var75 = var60.dayOfWeek();
    var52.setPeriod((org.joda.time.ReadableInstant)var54, (org.joda.time.ReadableInstant)var60);
    boolean var77 = var40.equals((java.lang.Object)var52);
    boolean var78 = var40.isFixed();
    boolean var79 = var40.isFixed();
    org.joda.time.DateTime var80 = var33.toDateTimeAtMidnight((org.joda.time.DateTimeZone)var40);
    org.joda.time.DateMidnight var81 = new org.joda.time.DateMidnight((org.joda.time.DateTimeZone)var40);
    org.joda.time.MutableDateTime var82 = org.joda.time.MutableDateTime.now((org.joda.time.DateTimeZone)var40);
    long var85 = var40.convertLocalToUTC(1377746580759L, true);
    var14.setZoneRetainFields((org.joda.time.DateTimeZone)var40);
    org.joda.time.DateMidnight var87 = var2.toDateMidnight((org.joda.time.DateTimeZone)var40);
    int var89 = var40.getStandardOffset(1377768182807L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 1377746580659L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 13);

  }

  public void test152() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test152"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    boolean var25 = var18.isLeap(1L);
    org.joda.time.LocalDateTime var26 = org.joda.time.LocalDateTime.now();
    int var27 = var26.getDayOfYear();
    int var28 = var18.getMinimumValue((org.joda.time.ReadablePartial)var26);
    org.joda.time.Duration var30 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var31 = new org.joda.time.MutableDateTime();
    var31.setWeekOfWeekyear(1);
    int var34 = var31.getRoundingMode();
    var31.addMillis(100);
    var31.setSecondOfMinute(10);
    org.joda.time.PeriodType var39 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var40 = new org.joda.time.Period((org.joda.time.ReadableDuration)var30, (org.joda.time.ReadableInstant)var31, var39);
    org.joda.time.Days var41 = var40.toStandardDays();
    org.joda.time.DurationFieldType var42 = var41.getFieldType();
    org.joda.time.LocalDateTime var44 = var26.withFieldAdded(var42, 100);
    org.joda.time.LocalDateTime var46 = var44.withCenturyOfEra(28);
    org.joda.time.LocalDateTime var48 = var46.withYear(85450);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test153() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test153"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.millis(1377746597600L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test154() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test154"); }


    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.LocalTime var6 = new org.joda.time.LocalTime((org.joda.time.Chronology)var5);
    org.joda.time.LocalDateTime var7 = new org.joda.time.LocalDateTime(1377768182717035L, (org.joda.time.Chronology)var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.TimeOfDay var8 = new org.joda.time.TimeOfDay(356, 200, 0, 3827137, (org.joda.time.Chronology)var5);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test155() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test155"); }


    org.joda.time.Period var4 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var6 = var4.plusSeconds(100);
    org.joda.time.chrono.JulianChronology var7 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var8 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var7);
    org.joda.time.LocalDate var9 = var8.toLocalDate();
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var11 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var8, (org.joda.time.ReadableInstant)var10);
    org.joda.time.MutableDateTime var12 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var13 = var12.year();
    boolean var14 = var10.isBefore((org.joda.time.ReadableInstant)var12);
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    boolean var19 = var16.isShorterThan((org.joda.time.ReadableDuration)var18);
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var23 = org.joda.time.Duration.standardHours((-1L));
    boolean var24 = var21.isShorterThan((org.joda.time.ReadableDuration)var23);
    org.joda.time.Duration var25 = var16.plus((org.joda.time.ReadableDuration)var21);
    var12.add((org.joda.time.ReadableDuration)var21);
    org.joda.time.chrono.JulianChronology var27 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var28 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var27);
    org.joda.time.LocalDate var29 = var28.toLocalDate();
    org.joda.time.MutableDateTime var30 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var31 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var28, (org.joda.time.ReadableInstant)var30);
    org.joda.time.MutableDateTime var32 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var33 = var32.year();
    boolean var34 = var30.isBefore((org.joda.time.ReadableInstant)var32);
    org.joda.time.Interval var35 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var12, (org.joda.time.ReadableInstant)var32);
    var12.setDayOfYear(104);
    org.joda.time.MutableDateTime.Property var38 = var12.weekyear();
    org.joda.time.Duration var39 = var6.toDurationTo((org.joda.time.ReadableInstant)var12);
    var12.addMillis(12196171);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test156() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test156"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.Period var6 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var8 = var6.plusSeconds(100);
    org.joda.time.Period var10 = var6.minusMillis(10);
    boolean var11 = var1.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var12 = var1.dayOfYear();
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var14 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var13);
    org.joda.time.LocalDate var15 = var14.toLocalDate();
    org.joda.time.LocalDate var17 = var15.minusMonths(0);
    org.joda.time.DateTime var18 = var15.toDateTimeAtMidnight();
    org.joda.time.DateTime var20 = var18.withCenturyOfEra(4);
    org.joda.time.Days var21 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var20);
    org.joda.time.DateTime var23 = var20.plusSeconds(10);
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.LocalDate var26 = var25.toLocalDate();
    org.joda.time.DateMidnight var28 = var25.minusWeeks((-1));
    org.joda.time.Duration var30 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var31 = new org.joda.time.MutableDateTime();
    var31.setWeekOfWeekyear(1);
    int var34 = var31.getRoundingMode();
    var31.addMillis(100);
    var31.setSecondOfMinute(10);
    org.joda.time.PeriodType var39 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var40 = new org.joda.time.Period((org.joda.time.ReadableDuration)var30, (org.joda.time.ReadableInstant)var31, var39);
    org.joda.time.Days var41 = var40.toStandardDays();
    org.joda.time.DurationFieldType var42 = var41.getFieldType();
    org.joda.time.DateMidnight var44 = var28.withFieldAdded(var42, 1);
    org.joda.time.MutableInterval var45 = new org.joda.time.MutableInterval();
    org.joda.time.MutableInterval var46 = var45.copy();
    org.joda.time.DateTime var47 = var46.getStart();
    org.joda.time.Duration var49 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var51 = org.joda.time.Duration.standardHours((-1L));
    boolean var52 = var49.isShorterThan((org.joda.time.ReadableDuration)var51);
    org.joda.time.Duration var53 = var49.toDuration();
    org.joda.time.chrono.JulianChronology var54 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var55 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var54);
    org.joda.time.LocalDate var56 = var55.toLocalDate();
    org.joda.time.MutableDateTime var57 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var58 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var55, (org.joda.time.ReadableInstant)var57);
    org.joda.time.MutableDateTime var59 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var60 = var59.year();
    boolean var61 = var57.isBefore((org.joda.time.ReadableInstant)var59);
    org.joda.time.Duration var63 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var65 = org.joda.time.Duration.standardHours((-1L));
    boolean var66 = var63.isShorterThan((org.joda.time.ReadableDuration)var65);
    org.joda.time.Duration var68 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var70 = org.joda.time.Duration.standardHours((-1L));
    boolean var71 = var68.isShorterThan((org.joda.time.ReadableDuration)var70);
    org.joda.time.Duration var72 = var63.plus((org.joda.time.ReadableDuration)var68);
    var59.add((org.joda.time.ReadableDuration)var68);
    org.joda.time.PeriodType var74 = org.joda.time.PeriodType.months();
    org.joda.time.Period var75 = new org.joda.time.Period((org.joda.time.ReadableDuration)var49, (org.joda.time.ReadableInstant)var59, var74);
    org.joda.time.MutablePeriod var76 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant)var28, (org.joda.time.ReadableInstant)var47, var74);
    org.joda.time.Duration var78 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var79 = new org.joda.time.MutableDateTime();
    var79.setWeekOfWeekyear(1);
    int var82 = var79.getRoundingMode();
    var79.addMillis(100);
    var79.setSecondOfMinute(10);
    org.joda.time.PeriodType var87 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var88 = new org.joda.time.Period((org.joda.time.ReadableDuration)var78, (org.joda.time.ReadableInstant)var79, var87);
    org.joda.time.PeriodType var89 = var87.withWeeksRemoved();
    org.joda.time.MutablePeriod var90 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant)var23, (org.joda.time.ReadableInstant)var28, var87);
    int var91 = var90.getDays();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == 6);

  }

  public void test157() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test157"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var2.toDateTimeAtMidnight();
    org.joda.time.DateTime var7 = var5.withCenturyOfEra(4);
    org.joda.time.DateTime.Property var8 = var7.monthOfYear();
    org.joda.time.chrono.JulianChronology var9 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var10 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var9);
    org.joda.time.Period var15 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var17 = var15.plusSeconds(100);
    org.joda.time.Period var19 = var15.minusMillis(10);
    boolean var20 = var10.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var21 = var10.dayOfYear();
    org.joda.time.chrono.JulianChronology var22 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var23 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var22);
    org.joda.time.LocalDate var24 = var23.toLocalDate();
    org.joda.time.LocalDate var26 = var24.minusMonths(0);
    org.joda.time.DateTime var27 = var24.toDateTimeAtMidnight();
    org.joda.time.DateTime var29 = var27.withCenturyOfEra(4);
    org.joda.time.Days var30 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var10, (org.joda.time.ReadableInstant)var29);
    org.joda.time.DateTime var32 = var29.plusSeconds(10);
    boolean var33 = var7.isAfter((org.joda.time.ReadableInstant)var29);
    org.joda.time.DateTime var35 = var29.withWeekOfWeekyear(2);
    org.joda.time.DateTime.Property var36 = var29.minuteOfDay();
    org.joda.time.DateTime var37 = var29.toDateTimeISO();
    org.joda.time.DateTime var39 = var29.withSecondOfMinute(38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test158() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test158"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.DateMidnight.Property var21 = var4.monthOfYear();
    org.joda.time.DateMidnight var23 = var4.withYear(884);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateMidnight var25 = var23.withYearOfCentury(200);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test159() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test159"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var5);
    org.joda.time.DateTimeField var8 = var5.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate var14 = var12.minusMonths(0);
    int[] var16 = var9.get((org.joda.time.ReadablePartial)var14, 100L);
    org.joda.time.chrono.EthiopicChronology var20 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var21 = var20.hours();
    org.joda.time.LocalTime var22 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var20);
    org.joda.time.Period var23 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var20);
    org.joda.time.DateTimeField var24 = var20.millisOfSecond();
    org.joda.time.DateTimeField var25 = var20.secondOfDay();
    org.joda.time.field.SkipDateTimeField var27 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var9, var25, 100);
    org.joda.time.LocalDateTime var28 = org.joda.time.LocalDateTime.now();
    int var29 = var28.getDayOfYear();
    org.joda.time.Chronology var30 = var28.getChronology();
    int var31 = var28.getYearOfCentury();
    int var32 = var27.getMaximumValue((org.joda.time.ReadablePartial)var28);
    boolean var34 = var27.isLeap(1L);
    org.joda.time.LocalDateTime var35 = org.joda.time.LocalDateTime.now();
    int var36 = var35.getDayOfYear();
    int var37 = var27.getMinimumValue((org.joda.time.ReadablePartial)var35);
    org.joda.time.DurationField var38 = var27.getDurationField();
    org.joda.time.DateTimeFieldType var39 = var27.getType();
    org.joda.time.field.OffsetDateTimeField var43 = new org.joda.time.field.OffsetDateTimeField(var8, var39, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var46 = new org.joda.time.IllegalFieldValueException(var39, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var49 = var0.appendFraction(var39, 33, (-948));
    org.joda.time.chrono.EthiopicChronology var50 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var51 = var50.minutes();
    org.joda.time.DateTimeField var52 = var50.year();
    org.joda.time.DurationField var53 = var50.hours();
    org.joda.time.field.UnsupportedDateTimeField var54 = org.joda.time.field.UnsupportedDateTimeField.getInstance(var39, var53);
    long var57 = var54.add((-1000L), 1377742981L);
    boolean var58 = var54.isLenient();
    long var61 = var54.add(1377742999393L, 12194);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var63 = var54.get(1377742981000L);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 4959874731599000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 1421641399393L);

  }

  public void test160() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test160"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var1 = var0.year();
    org.joda.time.PeriodType var2 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var3 = new org.joda.time.MutablePeriod(var2);
    var3.addDays(1);
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    boolean var10 = var7.isShorterThan((org.joda.time.ReadableDuration)var9);
    var3.add((org.joda.time.ReadableDuration)var9);
    org.joda.time.MutableDateTime var12 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var13 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var9, (org.joda.time.ReadableInstant)var12);
    var13.clear();
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var16 = new org.joda.time.MutablePeriod(var15);
    var16.addDays(1);
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var22 = org.joda.time.Duration.standardHours((-1L));
    boolean var23 = var20.isShorterThan((org.joda.time.ReadableDuration)var22);
    var16.add((org.joda.time.ReadableDuration)var22);
    var13.add((org.joda.time.ReadablePeriod)var16);
    org.joda.time.chrono.JulianChronology var26 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var27 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var26);
    org.joda.time.LocalDate var28 = var27.toLocalDate();
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var30 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var27, (org.joda.time.ReadableInstant)var29);
    org.joda.time.MutableDateTime var31 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var32 = var31.year();
    boolean var33 = var29.isBefore((org.joda.time.ReadableInstant)var31);
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var37 = org.joda.time.Duration.standardHours((-1L));
    boolean var38 = var35.isShorterThan((org.joda.time.ReadableDuration)var37);
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var42 = org.joda.time.Duration.standardHours((-1L));
    boolean var43 = var40.isShorterThan((org.joda.time.ReadableDuration)var42);
    org.joda.time.Duration var44 = var35.plus((org.joda.time.ReadableDuration)var40);
    var31.add((org.joda.time.ReadableDuration)var40);
    org.joda.time.Hours var46 = var40.toStandardHours();
    org.joda.time.chrono.EthiopicChronology var47 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
    var16.setPeriod((org.joda.time.ReadableDuration)var40, (org.joda.time.Chronology)var47);
    var0.add((org.joda.time.ReadableDuration)var40, 241);
    org.joda.time.chrono.JulianChronology var51 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var52 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var51);
    org.joda.time.LocalDate var53 = var52.toLocalDate();
    org.joda.time.DateMidnight var55 = var52.minusWeeks((-1));
    org.joda.time.DateMidnight var57 = var55.minusMonths(100);
    org.joda.time.MutablePeriod var58 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var40, (org.joda.time.ReadableInstant)var55);
    org.joda.time.MutableInterval var59 = new org.joda.time.MutableInterval();
    long var60 = var59.getEndMillis();
    org.joda.time.Months var61 = org.joda.time.Months.monthsIn((org.joda.time.ReadableInterval)var59);
    org.joda.time.Chronology var62 = var59.getChronology();
    org.joda.time.DateMidnight var63 = org.joda.time.DateMidnight.now(var62);
    org.joda.time.DateMidnight var64 = new org.joda.time.DateMidnight(var62);
    org.joda.time.Period var65 = var40.toPeriod(var62);
    org.joda.time.PeriodType var66 = org.joda.time.PeriodType.months();
    org.joda.time.PeriodType var67 = var66.withMinutesRemoved();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Period var68 = var65.withPeriodType(var67);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test161() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test161"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    org.joda.time.YearMonthDay var4 = var2.plusYears(13);
    org.joda.time.YearMonthDay var6 = var2.plusMonths(69);
    org.joda.time.chrono.JulianChronology var7 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var8 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var7);
    org.joda.time.LocalDate var9 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var7);
    org.joda.time.DateTimeField var10 = var7.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var12 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var13 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var12);
    org.joda.time.LocalDate var14 = var13.toLocalDate();
    org.joda.time.LocalDate var16 = var14.minusMonths(0);
    int[] var18 = var11.get((org.joda.time.ReadablePartial)var16, 100L);
    org.joda.time.chrono.EthiopicChronology var22 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var23 = var22.hours();
    org.joda.time.LocalTime var24 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var22);
    org.joda.time.Period var25 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var22);
    org.joda.time.DateTimeField var26 = var22.millisOfSecond();
    org.joda.time.DateTimeField var27 = var22.secondOfDay();
    org.joda.time.field.SkipDateTimeField var29 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var11, var27, 100);
    org.joda.time.LocalDateTime var30 = org.joda.time.LocalDateTime.now();
    int var31 = var30.getDayOfYear();
    org.joda.time.Chronology var32 = var30.getChronology();
    int var33 = var30.getYearOfCentury();
    int var34 = var29.getMaximumValue((org.joda.time.ReadablePartial)var30);
    boolean var36 = var29.isLeap(1L);
    org.joda.time.LocalDateTime var37 = org.joda.time.LocalDateTime.now();
    int var38 = var37.getDayOfYear();
    int var39 = var29.getMinimumValue((org.joda.time.ReadablePartial)var37);
    org.joda.time.DurationField var40 = var29.getDurationField();
    org.joda.time.DateTimeFieldType var41 = var29.getType();
    org.joda.time.field.OffsetDateTimeField var45 = new org.joda.time.field.OffsetDateTimeField(var10, var41, 884, 3, 948);
    long var47 = var45.roundCeiling(3L);
    int var49 = var45.getMaximumValue((-7200000L));
    long var52 = var45.add((-703990L), 4133240044002L);
    org.joda.time.DateTimeFieldType var53 = var45.getType();
    boolean var54 = var2.isSupported(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 3L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 948);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 4133239340012L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);

  }

  public void test162() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test162"); }


    org.joda.time.MutableDateTime var1 = new org.joda.time.MutableDateTime();
    var1.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var4 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var1.setChronology((org.joda.time.Chronology)var4);
    org.joda.time.DateTimeField var6 = var4.clockhourOfHalfday();
    org.joda.time.YearMonth var7 = new org.joda.time.YearMonth((org.joda.time.Chronology)var4);
    org.joda.time.Period var8 = new org.joda.time.Period(2762381894421796L, (org.joda.time.Chronology)var4);
    org.joda.time.TimeOfDay var9 = new org.joda.time.TimeOfDay((org.joda.time.Chronology)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test163() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test163"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.format.DateTimeFormatterBuilder var5 = var4.appendTimeZoneId();
    org.joda.time.format.DateTimeFormatterBuilder var6 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var8 = var6.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var10 = var6.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var11 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var12 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var11);
    org.joda.time.LocalDate var13 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var14 = var11.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var15 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var16 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var17 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var16);
    org.joda.time.LocalDate var18 = var17.toLocalDate();
    org.joda.time.LocalDate var20 = var18.minusMonths(0);
    int[] var22 = var15.get((org.joda.time.ReadablePartial)var20, 100L);
    org.joda.time.chrono.EthiopicChronology var26 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var27 = var26.hours();
    org.joda.time.LocalTime var28 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var26);
    org.joda.time.Period var29 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var26);
    org.joda.time.DateTimeField var30 = var26.millisOfSecond();
    org.joda.time.DateTimeField var31 = var26.secondOfDay();
    org.joda.time.field.SkipDateTimeField var33 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var15, var31, 100);
    org.joda.time.LocalDateTime var34 = org.joda.time.LocalDateTime.now();
    int var35 = var34.getDayOfYear();
    org.joda.time.Chronology var36 = var34.getChronology();
    int var37 = var34.getYearOfCentury();
    int var38 = var33.getMaximumValue((org.joda.time.ReadablePartial)var34);
    boolean var40 = var33.isLeap(1L);
    org.joda.time.LocalDateTime var41 = org.joda.time.LocalDateTime.now();
    int var42 = var41.getDayOfYear();
    int var43 = var33.getMinimumValue((org.joda.time.ReadablePartial)var41);
    org.joda.time.DurationField var44 = var33.getDurationField();
    org.joda.time.DateTimeFieldType var45 = var33.getType();
    org.joda.time.field.OffsetDateTimeField var49 = new org.joda.time.field.OffsetDateTimeField(var14, var45, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var52 = new org.joda.time.IllegalFieldValueException(var45, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var55 = var6.appendFraction(var45, 33, (-948));
    org.joda.time.format.DateTimeFormatterBuilder var56 = var5.appendText(var45);
    org.joda.time.format.DateTimeParser var57 = var5.toParser();
    org.joda.time.format.DateTimeFormatterBuilder var59 = var5.appendMinuteOfHour(69);
    org.joda.time.format.DateTimeFormatterBuilder var60 = var5.appendEraText();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test164() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test164"); }


    org.joda.time.chrono.ISOChronology var1 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay(1377742981000L, (org.joda.time.Chronology)var1);
    org.joda.time.DateMidnight var3 = var2.toDateMidnight();
    org.joda.time.YearMonthDay var5 = var2.minusDays(1970);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test165() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test165"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.Instant var3 = var1.toInstant();
    org.joda.time.LocalDateTime var4 = org.joda.time.LocalDateTime.now();
    int var5 = var4.getDayOfYear();
    org.joda.time.Chronology var6 = var4.getChronology();
    org.joda.time.YearMonthDay var7 = new org.joda.time.YearMonthDay(var6);
    org.joda.time.YearMonthDay var9 = var7.plusYears(2013);
    org.joda.time.TimeOfDay var10 = new org.joda.time.TimeOfDay();
    int var11 = var10.size();
    org.joda.time.chrono.EthiopicChronology var13 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var14 = var13.hours();
    org.joda.time.LocalTime var15 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var13);
    org.joda.time.LocalTime var17 = var15.withMillisOfSecond(1);
    org.joda.time.LocalTime var19 = var17.minusHours((-1));
    org.joda.time.Years var20 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var10, (org.joda.time.ReadablePartial)var19);
    int var21 = var10.getMillisOfSecond();
    org.joda.time.TimeOfDay var23 = var10.minusMillis((-9));
    org.joda.time.chrono.ISOChronology var24 = org.joda.time.chrono.ISOChronology.getInstance();
    org.joda.time.tz.FixedDateTimeZone var29 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var31 = var29.getOffsetFromLocal(1377742981323L);
    org.joda.time.DateTimeZone var33 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.chrono.JulianChronology var34 = org.joda.time.chrono.JulianChronology.getInstance(var33);
    long var36 = var29.getMillisKeepLocal(var33, 1377746580759L);
    org.joda.time.Chronology var37 = var24.withZone(var33);
    java.util.TimeZone var38 = var33.toTimeZone();
    org.joda.time.DateTime var39 = var9.toDateTime(var23, var33);
    org.joda.time.DateTime var40 = var3.toDateTime(var33);
    org.joda.time.DateMidnight var41 = org.joda.time.DateMidnight.now(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 110);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1377746580754L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test166() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test166"); }


    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = new org.joda.time.DateMidnight((-1L), (org.joda.time.Chronology)var1);
    org.joda.time.LocalTime var3 = new org.joda.time.LocalTime((org.joda.time.Chronology)var1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var6 = new org.joda.time.MutableDateTime();
    var6.setWeekOfWeekyear(1);
    int var9 = var6.getRoundingMode();
    var6.addMillis(100);
    var6.setSecondOfMinute(10);
    org.joda.time.PeriodType var14 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var15 = new org.joda.time.Period((org.joda.time.ReadableDuration)var5, (org.joda.time.ReadableInstant)var6, var14);
    org.joda.time.Days var16 = var15.toStandardDays();
    org.joda.time.DurationFieldType var17 = var16.getFieldType();
    org.joda.time.IllegalFieldValueException var21 = new org.joda.time.IllegalFieldValueException(var17, (java.lang.Number)28, (java.lang.Number)10.0d, (java.lang.Number)1377746580759L);
    java.lang.String var22 = var21.toString();
    boolean var23 = var3.equals((java.lang.Object)var21);
    org.joda.time.PeriodType var25 = org.joda.time.PeriodType.yearDay();
    org.joda.time.MutableDateTime var26 = new org.joda.time.MutableDateTime();
    var26.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var29 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var26.setChronology((org.joda.time.Chronology)var29);
    org.joda.time.MutablePeriod var31 = new org.joda.time.MutablePeriod(0L, var25, (org.joda.time.Chronology)var29);
    org.joda.time.LocalTime var32 = new org.joda.time.LocalTime((org.joda.time.Chronology)var29);
    java.lang.String var33 = var32.toString();
    org.joda.time.LocalTime var35 = var32.minusSeconds(884);
    int var36 = var35.getMillisOfDay();
    int var37 = var3.compareTo((org.joda.time.ReadablePartial)var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "org.joda.time.IllegalFieldValueException: Value 28 for days must be in the range [10.0,1377746580759]"+ "'", var22.equals("org.joda.time.IllegalFieldValueException: Value 28 for days must be in the range [10.0,1377746580759]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "00:00:00.010"+ "'", var33.equals("00:00:00.010"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 85516010);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == (-1));

  }

  public void test167() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test167"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.Period var6 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var8 = var6.plusSeconds(100);
    org.joda.time.Period var10 = var6.minusMillis(10);
    boolean var11 = var1.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var12 = var1.dayOfYear();
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var14 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var13);
    org.joda.time.LocalDate var15 = var14.toLocalDate();
    org.joda.time.LocalDate var17 = var15.minusMonths(0);
    org.joda.time.DateTime var18 = var15.toDateTimeAtMidnight();
    org.joda.time.DateTime var20 = var18.withCenturyOfEra(4);
    org.joda.time.Days var21 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var20);
    org.joda.time.chrono.EthiopicChronology var23 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var24 = var23.hours();
    org.joda.time.LocalTime var25 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var23);
    org.joda.time.LocalTime var27 = var25.withMillisOfSecond(1);
    org.joda.time.LocalTime var28 = org.joda.time.LocalTime.now();
    boolean var29 = var27.isAfter((org.joda.time.ReadablePartial)var28);
    org.joda.time.chrono.JulianChronology var30 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var31 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var30);
    org.joda.time.LocalDate var32 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var30);
    org.joda.time.DurationField var33 = var30.hours();
    boolean var34 = var28.equals((java.lang.Object)var30);
    org.joda.time.Duration var36 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var37 = new org.joda.time.MutableDateTime();
    var37.setWeekOfWeekyear(1);
    int var40 = var37.getRoundingMode();
    var37.addMillis(100);
    var37.setSecondOfMinute(10);
    org.joda.time.PeriodType var45 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var46 = new org.joda.time.Period((org.joda.time.ReadableDuration)var36, (org.joda.time.ReadableInstant)var37, var45);
    org.joda.time.Days var47 = var46.toStandardDays();
    org.joda.time.LocalTime var48 = var28.minus((org.joda.time.ReadablePeriod)var46);
    org.joda.time.DateMidnight var49 = var1.plus((org.joda.time.ReadablePeriod)var46);
    org.joda.time.DateMidnight var51 = var1.plus(1L);
    org.joda.time.Duration var53 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var54 = new org.joda.time.MutableDateTime();
    var54.setWeekOfWeekyear(1);
    int var57 = var54.getRoundingMode();
    var54.addMillis(100);
    var54.setSecondOfMinute(10);
    org.joda.time.PeriodType var62 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var63 = new org.joda.time.Period((org.joda.time.ReadableDuration)var53, (org.joda.time.ReadableInstant)var54, var62);
    org.joda.time.Days var64 = var63.toStandardDays();
    org.joda.time.Hours var65 = var64.toStandardHours();
    org.joda.time.DateMidnight var66 = var1.minus((org.joda.time.ReadablePeriod)var64);
    org.joda.time.chrono.JulianChronology var67 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var68 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var67);
    org.joda.time.LocalDate var69 = var68.toLocalDate();
    org.joda.time.LocalDate var71 = var69.minusMonths(0);
    org.joda.time.DateTime var72 = var69.toDateTimeAtMidnight();
    org.joda.time.DateTime var74 = var72.withCenturyOfEra(4);
    boolean var76 = var74.isEqual(35L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Seconds var77 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var66, (org.joda.time.ReadableInstant)var74);
      fail("Expected exception of type java.lang.ArithmeticException");
    } catch (java.lang.ArithmeticException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);

  }

  public void test168() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test168"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var1 = var0.year();
    org.joda.time.YearMonth var2 = new org.joda.time.YearMonth((java.lang.Object)var0);
    org.joda.time.chrono.EthiopicChronology var6 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var7 = var6.hours();
    org.joda.time.LocalTime var8 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var6);
    org.joda.time.Period var9 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var6);
    var0.add((org.joda.time.ReadablePeriod)var9);
    var0.addMonths((-17));
    org.joda.time.Duration var14 = org.joda.time.Duration.millis(957L);
    long var15 = var14.getStandardDays();
    var0.add((org.joda.time.ReadableDuration)var14, 2057);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0L);

  }

  public void test169() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test169"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    int var5 = var2.getRoundingMode();
    var2.addMillis(100);
    var2.setSecondOfMinute(10);
    org.joda.time.PeriodType var10 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var11 = new org.joda.time.Period((org.joda.time.ReadableDuration)var1, (org.joda.time.ReadableInstant)var2, var10);
    org.joda.time.Days var12 = var11.toStandardDays();
    org.joda.time.Hours var13 = var12.toStandardHours();
    java.lang.String var14 = var13.toString();
    org.joda.time.Days var15 = var13.toStandardDays();
    org.joda.time.Hours var17 = var13.multipliedBy(2013);
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var20 = new org.joda.time.MutableDateTime();
    var20.setWeekOfWeekyear(1);
    int var23 = var20.getRoundingMode();
    var20.addMillis(100);
    var20.setSecondOfMinute(10);
    org.joda.time.PeriodType var28 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var29 = new org.joda.time.Period((org.joda.time.ReadableDuration)var19, (org.joda.time.ReadableInstant)var20, var28);
    org.joda.time.Days var30 = var29.toStandardDays();
    org.joda.time.Hours var31 = var30.toStandardHours();
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var34 = new org.joda.time.MutableDateTime();
    var34.setWeekOfWeekyear(1);
    int var37 = var34.getRoundingMode();
    var34.addMillis(100);
    var34.setSecondOfMinute(10);
    org.joda.time.PeriodType var42 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var43 = new org.joda.time.Period((org.joda.time.ReadableDuration)var33, (org.joda.time.ReadableInstant)var34, var42);
    org.joda.time.Days var44 = var43.toStandardDays();
    org.joda.time.Hours var45 = var44.toStandardHours();
    java.lang.String var46 = var45.toString();
    org.joda.time.Hours var47 = var31.plus(var45);
    org.joda.time.Hours var48 = var13.plus(var45);
    org.joda.time.Hours var50 = var13.minus(21);
    org.joda.time.PeriodType var51 = var50.getPeriodType();
    java.lang.String var52 = var51.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PT0H"+ "'", var14.equals("PT0H"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "PT0H"+ "'", var46.equals("PT0H"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "PeriodType[Hours]"+ "'", var52.equals("PeriodType[Hours]"));

  }

  public void test170() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test170"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var5);
    org.joda.time.DateTimeField var8 = var5.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate var14 = var12.minusMonths(0);
    int[] var16 = var9.get((org.joda.time.ReadablePartial)var14, 100L);
    org.joda.time.chrono.EthiopicChronology var20 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var21 = var20.hours();
    org.joda.time.LocalTime var22 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var20);
    org.joda.time.Period var23 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var20);
    org.joda.time.DateTimeField var24 = var20.millisOfSecond();
    org.joda.time.DateTimeField var25 = var20.secondOfDay();
    org.joda.time.field.SkipDateTimeField var27 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var9, var25, 100);
    org.joda.time.LocalDateTime var28 = org.joda.time.LocalDateTime.now();
    int var29 = var28.getDayOfYear();
    org.joda.time.Chronology var30 = var28.getChronology();
    int var31 = var28.getYearOfCentury();
    int var32 = var27.getMaximumValue((org.joda.time.ReadablePartial)var28);
    boolean var34 = var27.isLeap(1L);
    org.joda.time.LocalDateTime var35 = org.joda.time.LocalDateTime.now();
    int var36 = var35.getDayOfYear();
    int var37 = var27.getMinimumValue((org.joda.time.ReadablePartial)var35);
    org.joda.time.DurationField var38 = var27.getDurationField();
    org.joda.time.DateTimeFieldType var39 = var27.getType();
    org.joda.time.field.OffsetDateTimeField var43 = new org.joda.time.field.OffsetDateTimeField(var8, var39, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var46 = new org.joda.time.IllegalFieldValueException(var39, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var49 = var0.appendFraction(var39, 33, (-948));
    org.joda.time.chrono.EthiopicChronology var50 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var51 = var50.minutes();
    org.joda.time.DateTimeField var52 = var50.year();
    org.joda.time.DurationField var53 = var50.hours();
    org.joda.time.field.UnsupportedDateTimeField var54 = org.joda.time.field.UnsupportedDateTimeField.getInstance(var39, var53);
    org.joda.time.DateTimeFieldType var55 = var54.getType();
    org.joda.time.DurationField var56 = var54.getDurationField();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var58 = var54.roundFloor(1377746599386L);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test171() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test171"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Interval var1 = org.joda.time.Interval.parse("1092");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test172() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test172"); }


    org.joda.time.chrono.ISOChronology var0 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
    org.joda.time.tz.FixedDateTimeZone var5 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var7 = var5.getOffsetFromLocal(1377742981323L);
    org.joda.time.Chronology var8 = var0.withZone((org.joda.time.DateTimeZone)var5);
    org.joda.time.Partial var9 = new org.joda.time.Partial(var8);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var11 = var9.toString("2056-W52-7T\uFFFD\uFFFD:\uFFFD\uFFFD:\uFFFD\uFFFD");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test173() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test173"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.DateTimeField var3 = var1.minuteOfHour();
    org.joda.time.LocalDate var4 = new org.joda.time.LocalDate(1L, (org.joda.time.Chronology)var1);
    org.joda.time.LocalDate.Property var5 = var4.weekyear();
    org.joda.time.PeriodType var6 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var7 = new org.joda.time.MutablePeriod(var6);
    var7.addDays(1);
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var13 = org.joda.time.Duration.standardHours((-1L));
    boolean var14 = var11.isShorterThan((org.joda.time.ReadableDuration)var13);
    var7.add((org.joda.time.ReadableDuration)var13);
    org.joda.time.MutableDateTime var16 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var13, (org.joda.time.ReadableInstant)var16);
    var17.clear();
    org.joda.time.PeriodType var19 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var20 = new org.joda.time.MutablePeriod(var19);
    var20.addDays(1);
    org.joda.time.Duration var24 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var26 = org.joda.time.Duration.standardHours((-1L));
    boolean var27 = var24.isShorterThan((org.joda.time.ReadableDuration)var26);
    var20.add((org.joda.time.ReadableDuration)var26);
    var17.add((org.joda.time.ReadablePeriod)var20);
    org.joda.time.chrono.JulianChronology var30 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var31 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var30);
    org.joda.time.LocalDate var32 = var31.toLocalDate();
    org.joda.time.MutableDateTime var33 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var34 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var31, (org.joda.time.ReadableInstant)var33);
    org.joda.time.MutableDateTime var35 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var36 = var35.year();
    boolean var37 = var33.isBefore((org.joda.time.ReadableInstant)var35);
    org.joda.time.Duration var39 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var41 = org.joda.time.Duration.standardHours((-1L));
    boolean var42 = var39.isShorterThan((org.joda.time.ReadableDuration)var41);
    org.joda.time.Duration var44 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var46 = org.joda.time.Duration.standardHours((-1L));
    boolean var47 = var44.isShorterThan((org.joda.time.ReadableDuration)var46);
    org.joda.time.Duration var48 = var39.plus((org.joda.time.ReadableDuration)var44);
    var35.add((org.joda.time.ReadableDuration)var44);
    org.joda.time.chrono.JulianChronology var50 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var51 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var50);
    org.joda.time.LocalDate var52 = var51.toLocalDate();
    org.joda.time.MutableDateTime var53 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var54 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var51, (org.joda.time.ReadableInstant)var53);
    org.joda.time.MutableDateTime var55 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var56 = var55.year();
    boolean var57 = var53.isBefore((org.joda.time.ReadableInstant)var55);
    org.joda.time.Interval var58 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var35, (org.joda.time.ReadableInstant)var55);
    boolean var60 = var58.isAfter(10L);
    org.joda.time.MutableDateTime var61 = new org.joda.time.MutableDateTime();
    var61.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var64 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var61.setChronology((org.joda.time.Chronology)var64);
    org.joda.time.Interval var66 = var58.withChronology((org.joda.time.Chronology)var64);
    var17.setPeriod((org.joda.time.ReadableInterval)var58);
    org.joda.time.LocalDate var69 = var4.withPeriodAdded((org.joda.time.ReadablePeriod)var17, 240);
    var17.setPeriod(10L);
    org.joda.time.chrono.EthiopicChronology var73 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
    var17.setPeriod(1386411782707L, (org.joda.time.Chronology)var73);
    org.joda.time.Period var79 = new org.joda.time.Period(1, 10, 10, 1);
    int var80 = var79.getWeeks();
    org.joda.time.Period var81 = var79.toPeriod();
    var17.setPeriod((org.joda.time.ReadablePeriod)var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }

  public void test174() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test174"); }


    org.joda.time.DateTime var7 = new org.joda.time.DateTime(0, 4, 28, 1, 28, 1, 1);
    int var8 = var7.getHourOfDay();
    org.joda.time.DateTime.Property var9 = var7.yearOfCentury();
    org.joda.time.LocalDate var10 = var7.toLocalDate();
    org.joda.time.tz.FixedDateTimeZone var15 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    org.joda.time.chrono.ISOChronology var16 = org.joda.time.chrono.ISOChronology.getInstance((org.joda.time.DateTimeZone)var15);
    org.joda.time.DateTime var17 = var7.withZoneRetainFields((org.joda.time.DateTimeZone)var15);
    org.joda.time.DateTime.Property var18 = var7.centuryOfEra();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test175() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test175"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var2 = var1.dayOfYear();
    org.joda.time.YearMonthDay var3 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var1);
    org.joda.time.YearMonthDay var5 = var3.plusYears(13);
    org.joda.time.DateTimeZone var7 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.Interval var8 = var3.toInterval(var7);
    org.joda.time.YearMonth var9 = org.joda.time.YearMonth.now(var7);
    org.joda.time.TimeOfDay var10 = new org.joda.time.TimeOfDay(var7);
    org.joda.time.LocalDate var11 = new org.joda.time.LocalDate(2755493229041L, var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test176() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test176"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.format.DateTimeFormatterBuilder var5 = var4.appendTimeZoneId();
    org.joda.time.format.DateTimeFormatterBuilder var6 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var8 = var6.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var10 = var6.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var11 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var12 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var11);
    org.joda.time.LocalDate var13 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var14 = var11.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var15 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var16 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var17 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var16);
    org.joda.time.LocalDate var18 = var17.toLocalDate();
    org.joda.time.LocalDate var20 = var18.minusMonths(0);
    int[] var22 = var15.get((org.joda.time.ReadablePartial)var20, 100L);
    org.joda.time.chrono.EthiopicChronology var26 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var27 = var26.hours();
    org.joda.time.LocalTime var28 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var26);
    org.joda.time.Period var29 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var26);
    org.joda.time.DateTimeField var30 = var26.millisOfSecond();
    org.joda.time.DateTimeField var31 = var26.secondOfDay();
    org.joda.time.field.SkipDateTimeField var33 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var15, var31, 100);
    org.joda.time.LocalDateTime var34 = org.joda.time.LocalDateTime.now();
    int var35 = var34.getDayOfYear();
    org.joda.time.Chronology var36 = var34.getChronology();
    int var37 = var34.getYearOfCentury();
    int var38 = var33.getMaximumValue((org.joda.time.ReadablePartial)var34);
    boolean var40 = var33.isLeap(1L);
    org.joda.time.LocalDateTime var41 = org.joda.time.LocalDateTime.now();
    int var42 = var41.getDayOfYear();
    int var43 = var33.getMinimumValue((org.joda.time.ReadablePartial)var41);
    org.joda.time.DurationField var44 = var33.getDurationField();
    org.joda.time.DateTimeFieldType var45 = var33.getType();
    org.joda.time.field.OffsetDateTimeField var49 = new org.joda.time.field.OffsetDateTimeField(var14, var45, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var52 = new org.joda.time.IllegalFieldValueException(var45, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var55 = var6.appendFraction(var45, 33, (-948));
    org.joda.time.format.DateTimeFormatterBuilder var56 = var5.appendText(var45);
    org.joda.time.format.DateTimeParser var57 = var5.toParser();
    org.joda.time.format.DateTimeFormatterBuilder var59 = var5.appendTwoDigitYear(23);
    org.joda.time.format.DateTimeFormatterBuilder var61 = var59.appendMinuteOfHour(24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test177() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test177"); }


    org.joda.time.Months var1 = org.joda.time.Months.months(567);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test178() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test178"); }


    org.joda.time.Period var1 = org.joda.time.Period.months((-948));
    org.joda.time.Months var3 = org.joda.time.Months.months((-1));
    org.joda.time.Months var5 = var3.plus(100);
    int var6 = var3.size();
    org.joda.time.Period var7 = var1.withFields((org.joda.time.ReadablePeriod)var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test179() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test179"); }


    org.joda.time.TimeOfDay var0 = new org.joda.time.TimeOfDay();
    int var1 = var0.size();
    org.joda.time.TimeOfDay var3 = var0.withMillisOfSecond(1);
    int var4 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 4);

  }

  public void test180() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test180"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalTime var4 = new org.joda.time.LocalTime(970, 38, 57600100, 57);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }

  }

  public void test181() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test181"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var2.toDateTimeAtMidnight();
    org.joda.time.DateTime var7 = var5.withMillis(100L);
    org.joda.time.Chronology var8 = var5.getChronology();
    org.joda.time.DateTime var9 = var5.toDateTimeISO();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test182() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test182"); }


    org.joda.time.Duration var2 = new org.joda.time.Duration(1377768182707035L, 1386411782707L);
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var4 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var3);
    org.joda.time.LocalDate var5 = var4.toLocalDate();
    org.joda.time.MutableDateTime var6 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var7 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var4, (org.joda.time.ReadableInstant)var6);
    org.joda.time.MutableDateTime var8 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var9 = var8.year();
    boolean var10 = var6.isBefore((org.joda.time.ReadableInstant)var8);
    org.joda.time.Duration var12 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    boolean var15 = var12.isShorterThan((org.joda.time.ReadableDuration)var14);
    org.joda.time.Duration var17 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    boolean var20 = var17.isShorterThan((org.joda.time.ReadableDuration)var19);
    org.joda.time.Duration var21 = var12.plus((org.joda.time.ReadableDuration)var17);
    var8.add((org.joda.time.ReadableDuration)var17);
    org.joda.time.MutableDateTime.Property var23 = var8.weekyear();
    org.joda.time.MutableDateTime.Property var24 = var8.year();
    boolean var26 = var8.isAfter(1L);
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    var29.setWeekOfWeekyear(1);
    int var32 = var29.getRoundingMode();
    var29.addMillis(100);
    var29.setSecondOfMinute(10);
    org.joda.time.PeriodType var37 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var38 = new org.joda.time.Period((org.joda.time.ReadableDuration)var28, (org.joda.time.ReadableInstant)var29, var37);
    org.joda.time.Days var39 = var38.toStandardDays();
    org.joda.time.Hours var40 = var39.toStandardHours();
    java.lang.String var41 = var40.toString();
    org.joda.time.Days var42 = var40.toStandardDays();
    org.joda.time.Minutes var43 = var42.toStandardMinutes();
    org.joda.time.Duration var44 = var43.toStandardDuration();
    org.joda.time.chrono.JulianChronology var45 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var46 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var45);
    org.joda.time.LocalDate var47 = var46.toLocalDate();
    org.joda.time.MutableDateTime var48 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var49 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var46, (org.joda.time.ReadableInstant)var48);
    org.joda.time.MutableDateTime var50 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var51 = var50.year();
    boolean var52 = var48.isBefore((org.joda.time.ReadableInstant)var50);
    var50.addMonths(104);
    org.joda.time.PeriodType var55 = org.joda.time.PeriodType.yearDay();
    org.joda.time.Period var56 = var44.toPeriodTo((org.joda.time.ReadableInstant)var50, var55);
    org.joda.time.Period var57 = new org.joda.time.Period((org.joda.time.ReadableDuration)var2, (org.joda.time.ReadableInstant)var8, var55);
    org.joda.time.PeriodType var59 = org.joda.time.PeriodType.yearDay();
    org.joda.time.MutableDateTime var60 = new org.joda.time.MutableDateTime();
    var60.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var63 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var60.setChronology((org.joda.time.Chronology)var63);
    org.joda.time.MutablePeriod var65 = new org.joda.time.MutablePeriod(0L, var59, (org.joda.time.Chronology)var63);
    org.joda.time.LocalTime var66 = new org.joda.time.LocalTime((org.joda.time.Chronology)var63);
    org.joda.time.LocalTime.Property var67 = var66.millisOfSecond();
    org.joda.time.TimeOfDay var68 = new org.joda.time.TimeOfDay();
    org.joda.time.TimeOfDay var70 = var68.minusHours(4);
    org.joda.time.Duration var72 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var73 = new org.joda.time.MutableDateTime();
    var73.setWeekOfWeekyear(1);
    int var76 = var73.getRoundingMode();
    var73.addMillis(100);
    var73.setSecondOfMinute(10);
    org.joda.time.PeriodType var81 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var82 = new org.joda.time.Period((org.joda.time.ReadableDuration)var72, (org.joda.time.ReadableInstant)var73, var81);
    org.joda.time.Period var83 = new org.joda.time.Period((org.joda.time.ReadablePartial)var66, (org.joda.time.ReadablePartial)var70, var81);
    boolean var84 = org.joda.time.field.FieldUtils.equals((java.lang.Object)var2, (java.lang.Object)var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "PT0H"+ "'", var41.equals("PT0H"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);

  }

  public void test183() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test183"); }


    org.joda.time.Instant var1 = new org.joda.time.Instant(2762381894421796L);
    long var2 = var1.getMillis();
    org.joda.time.Instant var5 = var1.withDurationAdded(100L, 216);
    org.joda.time.MutableDateTime var6 = var5.toMutableDateTime();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2762381894421796L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test184() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test184"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.LocalTime var3 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var1);
    org.joda.time.LocalTime var5 = var3.withMillisOfSecond(1);
    org.joda.time.LocalTime var7 = var5.minusHours((-1));
    org.joda.time.format.DateTimeFormatterBuilder var8 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var10 = var8.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var12 = var8.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var14 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var13);
    org.joda.time.LocalDate var15 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var13);
    org.joda.time.DateTimeField var16 = var13.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var17 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var18 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var19 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var18);
    org.joda.time.LocalDate var20 = var19.toLocalDate();
    org.joda.time.LocalDate var22 = var20.minusMonths(0);
    int[] var24 = var17.get((org.joda.time.ReadablePartial)var22, 100L);
    org.joda.time.chrono.EthiopicChronology var28 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var29 = var28.hours();
    org.joda.time.LocalTime var30 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var28);
    org.joda.time.Period var31 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var28);
    org.joda.time.DateTimeField var32 = var28.millisOfSecond();
    org.joda.time.DateTimeField var33 = var28.secondOfDay();
    org.joda.time.field.SkipDateTimeField var35 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var17, var33, 100);
    org.joda.time.LocalDateTime var36 = org.joda.time.LocalDateTime.now();
    int var37 = var36.getDayOfYear();
    org.joda.time.Chronology var38 = var36.getChronology();
    int var39 = var36.getYearOfCentury();
    int var40 = var35.getMaximumValue((org.joda.time.ReadablePartial)var36);
    boolean var42 = var35.isLeap(1L);
    org.joda.time.LocalDateTime var43 = org.joda.time.LocalDateTime.now();
    int var44 = var43.getDayOfYear();
    int var45 = var35.getMinimumValue((org.joda.time.ReadablePartial)var43);
    org.joda.time.DurationField var46 = var35.getDurationField();
    org.joda.time.DateTimeFieldType var47 = var35.getType();
    org.joda.time.field.OffsetDateTimeField var51 = new org.joda.time.field.OffsetDateTimeField(var16, var47, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var54 = new org.joda.time.IllegalFieldValueException(var47, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var57 = var8.appendFraction(var47, 33, (-948));
    org.joda.time.chrono.JulianChronology var58 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var59 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var58);
    org.joda.time.LocalDate var60 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var58);
    org.joda.time.DateTimeField var61 = var58.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var62 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var63 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var64 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var63);
    org.joda.time.LocalDate var65 = var64.toLocalDate();
    org.joda.time.LocalDate var67 = var65.minusMonths(0);
    int[] var69 = var62.get((org.joda.time.ReadablePartial)var67, 100L);
    org.joda.time.chrono.EthiopicChronology var73 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var74 = var73.hours();
    org.joda.time.LocalTime var75 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var73);
    org.joda.time.Period var76 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var73);
    org.joda.time.DateTimeField var77 = var73.millisOfSecond();
    org.joda.time.DateTimeField var78 = var73.secondOfDay();
    org.joda.time.field.SkipDateTimeField var80 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var62, var78, 100);
    org.joda.time.LocalDateTime var81 = org.joda.time.LocalDateTime.now();
    int var82 = var81.getDayOfYear();
    org.joda.time.Chronology var83 = var81.getChronology();
    int var84 = var81.getYearOfCentury();
    int var85 = var80.getMaximumValue((org.joda.time.ReadablePartial)var81);
    boolean var87 = var80.isLeap(1L);
    org.joda.time.LocalDateTime var88 = org.joda.time.LocalDateTime.now();
    int var89 = var88.getDayOfYear();
    int var90 = var80.getMinimumValue((org.joda.time.ReadablePartial)var88);
    org.joda.time.DurationField var91 = var80.getDurationField();
    org.joda.time.DateTimeFieldType var92 = var80.getType();
    org.joda.time.field.OffsetDateTimeField var96 = new org.joda.time.field.OffsetDateTimeField(var61, var92, 884, 3, 948);
    org.joda.time.DateTimeComparator var97 = org.joda.time.DateTimeComparator.getInstance(var47, var92);
    org.joda.time.LocalTime.Property var98 = var5.property(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test185() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test185"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var0);
    org.joda.time.DateTimeField var3 = var0.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.LocalDate var9 = var7.minusMonths(0);
    int[] var11 = var4.get((org.joda.time.ReadablePartial)var9, 100L);
    org.joda.time.chrono.EthiopicChronology var15 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var16 = var15.hours();
    org.joda.time.LocalTime var17 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var15);
    org.joda.time.Period var18 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var15);
    org.joda.time.DateTimeField var19 = var15.millisOfSecond();
    org.joda.time.DateTimeField var20 = var15.secondOfDay();
    org.joda.time.field.SkipDateTimeField var22 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var4, var20, 100);
    org.joda.time.LocalDateTime var23 = org.joda.time.LocalDateTime.now();
    int var24 = var23.getDayOfYear();
    org.joda.time.Chronology var25 = var23.getChronology();
    int var26 = var23.getYearOfCentury();
    int var27 = var22.getMaximumValue((org.joda.time.ReadablePartial)var23);
    boolean var29 = var22.isLeap(1L);
    org.joda.time.LocalDateTime var30 = org.joda.time.LocalDateTime.now();
    int var31 = var30.getDayOfYear();
    int var32 = var22.getMinimumValue((org.joda.time.ReadablePartial)var30);
    org.joda.time.DurationField var33 = var22.getDurationField();
    org.joda.time.DateTimeFieldType var34 = var22.getType();
    org.joda.time.field.OffsetDateTimeField var38 = new org.joda.time.field.OffsetDateTimeField(var3, var34, 884, 3, 948);
    boolean var40 = var38.isLeap(4133240044002L);
    org.joda.time.DurationField var41 = var38.getLeapDurationField();
    java.lang.String var43 = var38.getAsText(208L);
    long var46 = var38.addWrapField((-703463L), 318);
    org.joda.time.DurationField var47 = var38.getLeapDurationField();
    long var50 = var38.getDifferenceAsLong(1377742995215L, 1421641399393L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "1092"+ "'", var43.equals("1092"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-703990L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == (-43898404178L));

  }

  public void test186() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test186"); }


    long var2 = org.joda.time.field.FieldUtils.safeAdd(9L, 20792L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 20801L);

  }

  public void test187() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test187"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var5 = var0.appendYear(23, 8);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.format.DateTimeFormatterBuilder var8 = var5.appendFractionOfSecond((-3), 44);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test188() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test188"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.withMonthOfYear(1);
    org.joda.time.LocalDate var6 = var2.withWeekyear(1);
    org.joda.time.LocalDate var8 = var2.withDayOfYear(1);
    org.joda.time.LocalDate var10 = var8.minusMonths(16);
    org.joda.time.LocalDate var12 = var10.withWeekyear(240);
    org.joda.time.LocalDate.Property var13 = var10.era();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test189() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test189"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    int var3 = var0.getWeekOfWeekyear();
    org.joda.time.LocalDateTime var5 = var0.withYear(21);
    org.joda.time.LocalDateTime.Property var6 = var5.dayOfMonth();
    int var7 = var5.getDayOfWeek();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 5);

  }

  public void test190() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test190"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    int var5 = var2.getRoundingMode();
    var2.addMillis(100);
    var2.setSecondOfMinute(10);
    org.joda.time.PeriodType var10 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var11 = new org.joda.time.Period((org.joda.time.ReadableDuration)var1, (org.joda.time.ReadableInstant)var2, var10);
    org.joda.time.Days var12 = var11.toStandardDays();
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var14 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var13);
    org.joda.time.Period var19 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var21 = var19.plusSeconds(100);
    org.joda.time.Period var23 = var19.minusMillis(10);
    boolean var24 = var14.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var25 = var14.dayOfYear();
    org.joda.time.chrono.JulianChronology var26 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var27 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var26);
    org.joda.time.LocalDate var28 = var27.toLocalDate();
    org.joda.time.LocalDate var30 = var28.minusMonths(0);
    org.joda.time.DateTime var31 = var28.toDateTimeAtMidnight();
    org.joda.time.DateTime var33 = var31.withCenturyOfEra(4);
    org.joda.time.Days var34 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var14, (org.joda.time.ReadableInstant)var33);
    org.joda.time.Days var36 = var34.dividedBy(1);
    boolean var37 = var12.isGreaterThan(var34);
    org.joda.time.DurationFieldType var38 = var12.getFieldType();
    org.joda.time.Days var40 = var12.multipliedBy(4);
    org.joda.time.Duration var41 = var12.toStandardDuration();
    org.joda.time.Days var43 = var12.dividedBy(194);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test191() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test191"); }


    org.joda.time.format.PeriodFormatterBuilder var0 = new org.joda.time.format.PeriodFormatterBuilder();
    org.joda.time.format.PeriodFormatterBuilder var1 = var0.appendMillis();
    org.joda.time.format.PeriodFormatterBuilder var2 = var1.printZeroNever();
    org.joda.time.format.PeriodPrinter var3 = var2.toPrinter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test192() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test192"); }


    org.joda.time.MonthDay var1 = org.joda.time.MonthDay.parse("16");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test193() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test193"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var24 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var23);
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var26 = var25.year();
    boolean var27 = var23.isBefore((org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var28 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var25);
    boolean var30 = var28.isAfter(10L);
    org.joda.time.MutableDateTime var31 = new org.joda.time.MutableDateTime();
    var31.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var34 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var31.setChronology((org.joda.time.Chronology)var34);
    org.joda.time.Interval var36 = var28.withChronology((org.joda.time.Chronology)var34);
    boolean var37 = var28.isBeforeNow();
    boolean var38 = var28.containsNow();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);

  }

  public void test194() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test194"); }


    org.joda.time.Period var4 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var6 = var4.plusYears((-1));
    org.joda.time.Minutes var7 = var4.toStandardMinutes();
    org.joda.time.Minutes var9 = org.joda.time.Minutes.minutes(10);
    org.joda.time.Minutes var10 = var7.minus(var9);
    org.joda.time.Period var15 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var17 = var15.plusYears((-1));
    org.joda.time.Minutes var18 = var15.toStandardMinutes();
    org.joda.time.Minutes var19 = var7.plus(var18);
    org.joda.time.DurationFieldType var20 = var19.getFieldType();
    org.joda.time.Minutes var22 = var19.minus(51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test195() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test195"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    int var3 = var0.getYearOfCentury();
    org.joda.time.LocalDateTime var5 = var0.withCenturyOfEra(2);
    org.joda.time.LocalDateTime.Property var6 = var0.weekyear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test196() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test196"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    long var26 = var18.addWrapField(1377746581334L, 100);
    org.joda.time.DurationField var27 = var18.getRangeDurationField();
    org.joda.time.chrono.JulianChronology var28 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var29 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var28);
    org.joda.time.DateMidnight var31 = var29.plusDays(2013);
    org.joda.time.chrono.JulianChronology var32 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var33 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var32);
    org.joda.time.LocalDate var34 = var33.toLocalDate();
    org.joda.time.DateMidnight var36 = var33.minusWeeks((-1));
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var39 = new org.joda.time.MutableDateTime();
    var39.setWeekOfWeekyear(1);
    int var42 = var39.getRoundingMode();
    var39.addMillis(100);
    var39.setSecondOfMinute(10);
    org.joda.time.PeriodType var47 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var48 = new org.joda.time.Period((org.joda.time.ReadableDuration)var38, (org.joda.time.ReadableInstant)var39, var47);
    org.joda.time.Days var49 = var48.toStandardDays();
    org.joda.time.DurationFieldType var50 = var49.getFieldType();
    org.joda.time.DateMidnight var52 = var36.withFieldAdded(var50, 1);
    org.joda.time.field.PreciseDurationField var54 = new org.joda.time.field.PreciseDurationField(var50, 1L);
    org.joda.time.DateMidnight var56 = var31.withFieldAdded(var50, 228);
    org.joda.time.field.DecoratedDurationField var57 = new org.joda.time.field.DecoratedDurationField(var27, var50);
    long var60 = var57.add(1377746681334L, 9);
    org.joda.time.Duration var62 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var63 = new org.joda.time.MutableDateTime();
    var63.setWeekOfWeekyear(1);
    int var66 = var63.getRoundingMode();
    var63.addMillis(100);
    var63.setSecondOfMinute(10);
    org.joda.time.PeriodType var71 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var72 = new org.joda.time.Period((org.joda.time.ReadableDuration)var62, (org.joda.time.ReadableInstant)var63, var71);
    org.joda.time.Days var73 = var72.toStandardDays();
    org.joda.time.DurationFieldType var74 = var73.getFieldType();
    org.joda.time.field.DecoratedDurationField var75 = new org.joda.time.field.DecoratedDurationField((org.joda.time.DurationField)var57, var74);
    org.joda.time.field.UnsupportedDurationField var76 = org.joda.time.field.UnsupportedDurationField.getInstance(var74);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var79 = var76.getValueAsLong((-3600000L), 1377768182807L);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1377746681334L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1378524281334L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test197() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test197"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.months();
    java.lang.String var1 = var0.toString();
    org.joda.time.PeriodType var2 = org.joda.time.PeriodType.months();
    org.joda.time.Duration var4 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    var5.setWeekOfWeekyear(1);
    int var8 = var5.getRoundingMode();
    var5.addMillis(100);
    var5.setSecondOfMinute(10);
    org.joda.time.PeriodType var13 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var14 = new org.joda.time.Period((org.joda.time.ReadableDuration)var4, (org.joda.time.ReadableInstant)var5, var13);
    org.joda.time.Days var15 = var14.toStandardDays();
    org.joda.time.DurationFieldType var16 = var15.getFieldType();
    int var17 = var2.indexOf(var16);
    boolean var18 = var0.isSupported(var16);
    java.lang.String var19 = var0.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "PeriodType[Months]"+ "'", var1.equals("PeriodType[Months]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "Months"+ "'", var19.equals("Months"));

  }

  public void test198() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test198"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.format.DateTimeFormatterBuilder var5 = var4.appendTimeZoneId();
    org.joda.time.format.DateTimeFormatterBuilder var7 = var5.appendMillisOfDay(14400001);
    org.joda.time.format.DateTimeFormatterBuilder var9 = var7.appendMinuteOfHour(692);
    org.joda.time.format.DateTimeFormatterBuilder var10 = var9.appendMonthOfYearShortText();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test199() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test199"); }


    org.joda.time.LocalDateTime var1 = org.joda.time.LocalDateTime.now();
    int var2 = var1.getDayOfYear();
    org.joda.time.Chronology var3 = var1.getChronology();
    org.joda.time.chrono.StrictChronology var4 = org.joda.time.chrono.StrictChronology.getInstance(var3);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.LocalDate var9 = var7.withMonthOfYear(1);
    org.joda.time.LocalDate var11 = var7.withWeekyear(1);
    org.joda.time.LocalDate var13 = var7.withDayOfYear(1);
    org.joda.time.LocalDate var15 = var13.minusMonths(16);
    boolean var16 = var4.equals((java.lang.Object)16);
    org.joda.time.YearMonth var17 = new org.joda.time.YearMonth(0L, (org.joda.time.Chronology)var4);
    org.joda.time.Chronology var18 = var4.withUTC();
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var21 = new org.joda.time.MutableDateTime();
    var21.setWeekOfWeekyear(1);
    int var24 = var21.getRoundingMode();
    var21.addMillis(100);
    var21.setSecondOfMinute(10);
    org.joda.time.PeriodType var29 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var30 = new org.joda.time.Period((org.joda.time.ReadableDuration)var20, (org.joda.time.ReadableInstant)var21, var29);
    org.joda.time.Days var31 = var30.toStandardDays();
    org.joda.time.Hours var32 = var31.toStandardHours();
    java.lang.String var33 = var32.toString();
    org.joda.time.Days var34 = var32.toStandardDays();
    org.joda.time.Hours var36 = var32.multipliedBy(2013);
    org.joda.time.Seconds var37 = var36.toStandardSeconds();
    org.joda.time.Weeks var38 = var37.toStandardWeeks();
    boolean var39 = var4.equals((java.lang.Object)var37);
    org.joda.time.chrono.EthiopicChronology var40 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var41 = var40.dayOfYear();
    org.joda.time.YearMonthDay var42 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var40);
    org.joda.time.YearMonthDay var44 = var42.plusDays((-1));
    org.joda.time.DateTime var45 = var44.toDateTimeAtCurrentTime();
    org.joda.time.chrono.ISOChronology var46 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
    org.joda.time.tz.FixedDateTimeZone var51 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var53 = var51.getOffsetFromLocal(1377742981323L);
    org.joda.time.Chronology var54 = var46.withZone((org.joda.time.DateTimeZone)var51);
    org.joda.time.LocalTime var55 = new org.joda.time.LocalTime((org.joda.time.DateTimeZone)var51);
    org.joda.time.DateTime var56 = var44.toDateTimeAtMidnight((org.joda.time.DateTimeZone)var51);
    org.joda.time.Chronology var57 = var4.withZone((org.joda.time.DateTimeZone)var51);
    org.joda.time.Chronology var58 = var4.withUTC();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "PT0H"+ "'", var33.equals("PT0H"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test200() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test200"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTime var1 = new org.joda.time.DateTime((java.lang.Object)17);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test201() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test201"); }


    org.joda.time.PeriodType var1 = org.joda.time.PeriodType.yearDay();
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var2.setChronology((org.joda.time.Chronology)var5);
    org.joda.time.MutablePeriod var7 = new org.joda.time.MutablePeriod(0L, var1, (org.joda.time.Chronology)var5);
    org.joda.time.LocalTime var8 = new org.joda.time.LocalTime((org.joda.time.Chronology)var5);
    java.lang.String var9 = var8.toString();
    org.joda.time.LocalTime var11 = var8.withMinuteOfHour(12);
    org.joda.time.LocalTime var13 = var11.plusMinutes(12217692);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "00:00:00.010"+ "'", var9.equals("00:00:00.010"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test202() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test202"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.DurationField var19 = var18.getRangeDurationField();
    java.lang.String var20 = var18.toString();
    int var22 = var18.getMaximumValue((-122400000L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "DateTimeField[secondOfDay]"+ "'", var20.equals("DateTimeField[secondOfDay]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 86399);

  }

  public void test203() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test203"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    var5.addDays(104);
    org.joda.time.chrono.EthiopicChronology var22 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var23 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var24 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var23);
    org.joda.time.LocalDate var25 = var24.toLocalDate();
    org.joda.time.LocalDate var27 = var25.minusMonths(0);
    int[] var29 = var22.get((org.joda.time.ReadablePartial)var27, 100L);
    org.joda.time.chrono.EthiopicChronology var33 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var34 = var33.hours();
    org.joda.time.LocalTime var35 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var33);
    org.joda.time.Period var36 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var33);
    org.joda.time.DateTimeField var37 = var33.millisOfSecond();
    org.joda.time.DateTimeField var38 = var33.secondOfDay();
    org.joda.time.field.SkipDateTimeField var40 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var22, var38, 100);
    java.lang.String var42 = var40.getAsShortText(80003L);
    var5.setRounding((org.joda.time.DateTimeField)var40);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var45 = var40.remainder((-46884851968632734L));
      fail("Expected exception of type org.joda.time.chrono.LimitChronology.LimitException");
    } catch (Throwable e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "80"+ "'", var42.equals("80"));

  }

  public void test204() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test204"); }


    org.joda.time.TimeOfDay var0 = new org.joda.time.TimeOfDay();
    int var1 = var0.size();
    org.joda.time.TimeOfDay var3 = var0.withMillisOfSecond(1);
    org.joda.time.TimeOfDay var5 = var3.plusMinutes(4);
    org.joda.time.TimeOfDay.Property var6 = var3.minuteOfHour();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.TimeOfDay var8 = var3.withMinuteOfHour(85516010);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test205() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test205"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    org.joda.time.LocalDate var3 = new org.joda.time.LocalDate(var2);
    org.joda.time.format.DateTimeFormatter var4 = org.joda.time.format.ISODateTimeFormat.basicTTime();
    java.lang.String var5 = var3.toString(var4);
    org.joda.time.DateTime var6 = var3.toDateTimeAtStartOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "T\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD.000"+ "'", var5.equals("T\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD.000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test206() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test206"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.Period var6 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var8 = var6.plusSeconds(100);
    org.joda.time.Period var10 = var6.minusMillis(10);
    boolean var11 = var1.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var12 = var1.dayOfYear();
    int var13 = var1.getSecondOfDay();
    org.joda.time.DateMidnight var15 = var1.withWeekyear(240);
    org.joda.time.DateMidnight var17 = var15.minusMonths(28);
    org.joda.time.DateMidnight var19 = var15.plusWeeks(104);
    org.joda.time.TimeOfDay var20 = new org.joda.time.TimeOfDay();
    int var21 = var20.size();
    org.joda.time.chrono.EthiopicChronology var23 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var24 = var23.hours();
    org.joda.time.LocalTime var25 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var23);
    org.joda.time.LocalTime var27 = var25.withMillisOfSecond(1);
    org.joda.time.LocalTime var29 = var27.minusHours((-1));
    org.joda.time.Years var30 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var20, (org.joda.time.ReadablePartial)var29);
    org.joda.time.DurationFieldType var31 = var30.getFieldType();
    org.joda.time.IllegalFieldValueException var33 = new org.joda.time.IllegalFieldValueException(var31, "[]");
    org.joda.time.DateMidnight var35 = var15.withFieldAdded(var31, 14400001);
    org.joda.time.chrono.JulianChronology var37 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var38 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var37);
    org.joda.time.LocalDate var39 = var38.toLocalDate();
    org.joda.time.LocalDate var41 = var39.withMonthOfYear(1);
    org.joda.time.LocalDate var43 = var41.withEra(1);
    org.joda.time.LocalDate.Property var44 = var41.yearOfCentury();
    org.joda.time.Period var49 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var51 = var49.plusYears((-1));
    org.joda.time.Minutes var52 = var49.toStandardMinutes();
    org.joda.time.Minutes var54 = org.joda.time.Minutes.minutes(10);
    org.joda.time.Minutes var55 = var52.minus(var54);
    org.joda.time.PeriodType var56 = var52.getPeriodType();
    boolean var57 = var41.equals((java.lang.Object)var56);
    org.joda.time.chrono.JulianChronology var58 = org.joda.time.chrono.JulianChronology.getInstance();
    org.joda.time.MutablePeriod var59 = new org.joda.time.MutablePeriod(9L, var56, (org.joda.time.Chronology)var58);
    org.joda.time.Duration var61 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var63 = org.joda.time.Duration.standardHours((-1L));
    boolean var64 = var61.isShorterThan((org.joda.time.ReadableDuration)var63);
    org.joda.time.Duration var65 = var61.toDuration();
    org.joda.time.Duration var67 = org.joda.time.Duration.standardHours((-1L));
    boolean var68 = var65.isShorterThan((org.joda.time.ReadableDuration)var67);
    org.joda.time.chrono.GJChronology var69 = org.joda.time.chrono.GJChronology.getInstanceUTC();
    java.lang.String var70 = var69.toString();
    org.joda.time.DurationField var71 = var69.eras();
    org.joda.time.Chronology var72 = var69.withUTC();
    var59.setPeriod((org.joda.time.ReadableDuration)var67, (org.joda.time.Chronology)var69);
    org.joda.time.DateMidnight var74 = var35.plus((org.joda.time.ReadableDuration)var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "GJChronology[UTC]"+ "'", var70.equals("GJChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test207() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test207"); }


    org.joda.time.DateTime var0 = new org.joda.time.DateTime();
    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var3 = new org.joda.time.DateMidnight((-1L), (org.joda.time.Chronology)var2);
    org.joda.time.chrono.JulianChronology var4 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var5 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var4);
    org.joda.time.LocalDate var6 = var5.toLocalDate();
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var8 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var7);
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var10 = var9.year();
    boolean var11 = var7.isBefore((org.joda.time.ReadableInstant)var9);
    org.joda.time.Duration var13 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var15 = org.joda.time.Duration.standardHours((-1L));
    boolean var16 = var13.isShorterThan((org.joda.time.ReadableDuration)var15);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    boolean var21 = var18.isShorterThan((org.joda.time.ReadableDuration)var20);
    org.joda.time.Duration var22 = var13.plus((org.joda.time.ReadableDuration)var18);
    var9.add((org.joda.time.ReadableDuration)var18);
    var9.setHourOfDay(10);
    org.joda.time.Years var26 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var3, (org.joda.time.ReadableInstant)var9);
    org.joda.time.Period var27 = new org.joda.time.Period((org.joda.time.ReadableInstant)var0, (org.joda.time.ReadableInstant)var9);
    org.joda.time.DateTime var29 = var0.plus(1377768182707L);
    org.joda.time.DateTime var31 = var0.withYear(893);
    org.joda.time.LocalDateTime var32 = var0.toLocalDateTime();
    org.joda.time.Seconds var34 = org.joda.time.Seconds.seconds(216);
    org.joda.time.chrono.JulianChronology var35 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var36 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var35);
    org.joda.time.LocalDate var37 = var36.toLocalDate();
    org.joda.time.MutableDateTime var38 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var39 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var36, (org.joda.time.ReadableInstant)var38);
    org.joda.time.chrono.JulianChronology var40 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var41 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var40);
    org.joda.time.LocalDate var42 = var41.toLocalDate();
    org.joda.time.MutableDateTime var43 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var44 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var41, (org.joda.time.ReadableInstant)var43);
    org.joda.time.MutableDateTime var45 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var46 = var45.year();
    boolean var47 = var43.isBefore((org.joda.time.ReadableInstant)var45);
    org.joda.time.Duration var49 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var51 = org.joda.time.Duration.standardHours((-1L));
    boolean var52 = var49.isShorterThan((org.joda.time.ReadableDuration)var51);
    org.joda.time.Duration var54 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var56 = org.joda.time.Duration.standardHours((-1L));
    boolean var57 = var54.isShorterThan((org.joda.time.ReadableDuration)var56);
    org.joda.time.Duration var58 = var49.plus((org.joda.time.ReadableDuration)var54);
    var45.add((org.joda.time.ReadableDuration)var54);
    org.joda.time.Seconds var60 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var36, (org.joda.time.ReadableInstant)var45);
    org.joda.time.Duration var61 = var60.toStandardDuration();
    org.joda.time.Seconds var62 = var34.plus(var60);
    boolean var63 = var32.equals((java.lang.Object)var62);
    org.joda.time.LocalDateTime var65 = var32.minusYears(33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test208() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test208"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.MutableDateTime.Property var20 = var5.dayOfWeek();
    var5.addMonths((-9));
    org.joda.time.MutableDateTime.Property var23 = var5.era();
    org.joda.time.MutableDateTime var24 = new org.joda.time.MutableDateTime();
    var24.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var27 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var24.setChronology((org.joda.time.Chronology)var27);
    org.joda.time.DateTimeField var29 = var27.clockhourOfHalfday();
    org.joda.time.format.DateTimeFormatterBuilder var30 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var32 = var30.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var34 = var30.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var35 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var36 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var35);
    org.joda.time.LocalDate var37 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var35);
    org.joda.time.DateTimeField var38 = var35.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var39 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var40 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var41 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var40);
    org.joda.time.LocalDate var42 = var41.toLocalDate();
    org.joda.time.LocalDate var44 = var42.minusMonths(0);
    int[] var46 = var39.get((org.joda.time.ReadablePartial)var44, 100L);
    org.joda.time.chrono.EthiopicChronology var50 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var51 = var50.hours();
    org.joda.time.LocalTime var52 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var50);
    org.joda.time.Period var53 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var50);
    org.joda.time.DateTimeField var54 = var50.millisOfSecond();
    org.joda.time.DateTimeField var55 = var50.secondOfDay();
    org.joda.time.field.SkipDateTimeField var57 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var39, var55, 100);
    org.joda.time.LocalDateTime var58 = org.joda.time.LocalDateTime.now();
    int var59 = var58.getDayOfYear();
    org.joda.time.Chronology var60 = var58.getChronology();
    int var61 = var58.getYearOfCentury();
    int var62 = var57.getMaximumValue((org.joda.time.ReadablePartial)var58);
    boolean var64 = var57.isLeap(1L);
    org.joda.time.LocalDateTime var65 = org.joda.time.LocalDateTime.now();
    int var66 = var65.getDayOfYear();
    int var67 = var57.getMinimumValue((org.joda.time.ReadablePartial)var65);
    org.joda.time.DurationField var68 = var57.getDurationField();
    org.joda.time.DateTimeFieldType var69 = var57.getType();
    org.joda.time.field.OffsetDateTimeField var73 = new org.joda.time.field.OffsetDateTimeField(var38, var69, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var76 = new org.joda.time.IllegalFieldValueException(var69, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var79 = var30.appendFraction(var69, 33, (-948));
    org.joda.time.field.DividedDateTimeField var81 = new org.joda.time.field.DividedDateTimeField(var29, var69, 100);
    long var84 = var81.add((-86386600L), 13);
    org.joda.time.field.RemainderDateTimeField var85 = new org.joda.time.field.RemainderDateTimeField(var81);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.setRounding((org.joda.time.DateTimeField)var81, 15946);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 4593613400L);

  }

  public void test209() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test209"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.LocalTime var3 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var1);
    org.joda.time.LocalTime var5 = var3.withMillisOfSecond(1);
    org.joda.time.LocalTime var7 = var5.minusHours((-1));
    org.joda.time.LocalTime var9 = var5.plusMillis(4);
    org.joda.time.TimeOfDay var10 = new org.joda.time.TimeOfDay();
    int var11 = var10.size();
    org.joda.time.chrono.EthiopicChronology var13 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var14 = var13.hours();
    org.joda.time.LocalTime var15 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var13);
    org.joda.time.LocalTime var17 = var15.withMillisOfSecond(1);
    org.joda.time.LocalTime var19 = var17.minusHours((-1));
    org.joda.time.Years var20 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var10, (org.joda.time.ReadablePartial)var19);
    org.joda.time.chrono.EthiopicChronology var21 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var22 = var21.dayOfYear();
    org.joda.time.YearMonthDay var23 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var21);
    org.joda.time.TimeOfDay var24 = var10.withChronologyRetainFields((org.joda.time.Chronology)var21);
    org.joda.time.TimeOfDay var26 = var24.plusMillis(2005);
    java.lang.String var27 = var24.toString();
    org.joda.time.TimeOfDay var29 = var24.plusSeconds(4);
    boolean var30 = var9.isBefore((org.joda.time.ReadablePartial)var24);
    org.joda.time.TimeOfDay var32 = var24.minusMillis(884);
    int var33 = var24.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "T00:00:00.110"+ "'", var27.equals("T00:00:00.110"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 4);

  }

  public void test210() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test210"); }


    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var4 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var3);
    org.joda.time.LocalDate var5 = var4.toLocalDate();
    org.joda.time.MutableDateTime var6 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var7 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var4, (org.joda.time.ReadableInstant)var6);
    org.joda.time.MutableDateTime var8 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var9 = var8.year();
    boolean var10 = var6.isBefore((org.joda.time.ReadableInstant)var8);
    org.joda.time.Duration var12 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    boolean var15 = var12.isShorterThan((org.joda.time.ReadableDuration)var14);
    org.joda.time.Duration var17 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    boolean var20 = var17.isShorterThan((org.joda.time.ReadableDuration)var19);
    org.joda.time.Duration var21 = var12.plus((org.joda.time.ReadableDuration)var17);
    var8.add((org.joda.time.ReadableDuration)var17);
    org.joda.time.chrono.JulianChronology var23 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var24 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var23);
    org.joda.time.LocalDate var25 = var24.toLocalDate();
    org.joda.time.MutableDateTime var26 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var27 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var24, (org.joda.time.ReadableInstant)var26);
    org.joda.time.MutableDateTime var28 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var29 = var28.year();
    boolean var30 = var26.isBefore((org.joda.time.ReadableInstant)var28);
    org.joda.time.Interval var31 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var8, (org.joda.time.ReadableInstant)var28);
    boolean var33 = var31.isAfter(10L);
    org.joda.time.MutableDateTime var34 = new org.joda.time.MutableDateTime();
    var34.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var37 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var34.setChronology((org.joda.time.Chronology)var37);
    org.joda.time.Interval var39 = var31.withChronology((org.joda.time.Chronology)var37);
    org.joda.time.DurationField var40 = var37.halfdays();
    org.joda.time.LocalTime var41 = new org.joda.time.LocalTime((-703463L), (org.joda.time.Chronology)var37);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MutableInterval var42 = new org.joda.time.MutableInterval(1377746595607L, (-62156990340999L), (org.joda.time.Chronology)var37);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test211() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test211"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    int var2 = var1.getSeconds();
    int var3 = var1.getMonths();
    var1.setWeeks((-1));
    org.joda.time.Weeks var6 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod)var1);
    org.joda.time.Days var7 = var6.toStandardDays();
    org.joda.time.PeriodType var8 = var6.getPeriodType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test212() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test212"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.field.PreciseDurationField var22 = new org.joda.time.field.PreciseDurationField(var18, 1L);
    long var24 = var22.getMillis(104);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var27 = var22.getValue(1377746599106L, 35L);
      fail("Expected exception of type java.lang.ArithmeticException");
    } catch (java.lang.ArithmeticException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 104L);

  }

  public void test213() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test213"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.field.FieldUtils.verifyValueBounds("2013-08-29T02:23:39.501+00:00:00.100", 269, 14, 11);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }

  }

  public void test214() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test214"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.MutableDateTime var8 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var9 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var6, (org.joda.time.ReadableInstant)var8);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var11 = var10.year();
    boolean var12 = var8.isBefore((org.joda.time.ReadableInstant)var10);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    boolean var22 = var19.isShorterThan((org.joda.time.ReadableDuration)var21);
    org.joda.time.Duration var23 = var14.plus((org.joda.time.ReadableDuration)var19);
    var10.add((org.joda.time.ReadableDuration)var19);
    org.joda.time.Seconds var25 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var10);
    org.joda.time.Duration var26 = var25.toStandardDuration();
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var30 = org.joda.time.Duration.standardHours((-1L));
    boolean var31 = var28.isShorterThan((org.joda.time.ReadableDuration)var30);
    org.joda.time.Duration var32 = var28.toDuration();
    boolean var33 = var26.isShorterThan((org.joda.time.ReadableDuration)var32);
    org.joda.time.Duration var35 = var32.withMillis(228009L);
    org.joda.time.Duration var36 = var32.toDuration();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test215() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test215"); }


    org.joda.time.Period var1 = org.joda.time.Period.days(1);
    org.joda.time.Period var3 = var1.minusHours(0);
    int var4 = var3.getMinutes();
    int var5 = var3.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 8);

  }

  public void test216() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test216"); }


    org.joda.time.DateTime var7 = new org.joda.time.DateTime(0, 4, 28, 1, 28, 1, 1);
    int var8 = var7.getHourOfDay();
    org.joda.time.DateTime.Property var9 = var7.yearOfCentury();
    org.joda.time.LocalDate var10 = var7.toLocalDate();
    org.joda.time.tz.FixedDateTimeZone var15 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    org.joda.time.chrono.ISOChronology var16 = org.joda.time.chrono.ISOChronology.getInstance((org.joda.time.DateTimeZone)var15);
    org.joda.time.DateTime var17 = var7.withZoneRetainFields((org.joda.time.DateTimeZone)var15);
    int var19 = var15.getOffset((-86379208L));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.chrono.GregorianChronology var21 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone)var15, 12196);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 28);

  }

  public void test217() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test217"); }


    org.joda.time.YearMonth var1 = new org.joda.time.YearMonth(10L);
    org.joda.time.chrono.EthiopicChronology var2 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.YearMonth var3 = var1.withChronologyRetainFields((org.joda.time.Chronology)var2);
    org.joda.time.YearMonth var5 = var3.withMonthOfYear(10);
    org.joda.time.tz.FixedDateTimeZone var10 = new org.joda.time.tz.FixedDateTimeZone("ConverterManager[6 instant,7 partial,5 duration,5 period,3 interval]", "ConverterManager[6 instant,7 partial,5 duration,5 period,3 interval]", 2, 759);
    long var12 = var10.previousTransition(3L);
    org.joda.time.LocalDateTime var13 = new org.joda.time.LocalDateTime((org.joda.time.DateTimeZone)var10);
    boolean var14 = var10.isFixed();
    org.joda.time.Interval var15 = var5.toInterval((org.joda.time.DateTimeZone)var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 3L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test218() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test218"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var3 = org.joda.time.Duration.standardHours((-1L));
    boolean var4 = var1.isShorterThan((org.joda.time.ReadableDuration)var3);
    org.joda.time.Duration var5 = var1.toDuration();
    org.joda.time.Hours var6 = var1.toStandardHours();
    org.joda.time.Minutes var7 = var1.toStandardMinutes();
    org.joda.time.DateMidnight var9 = new org.joda.time.DateMidnight(104L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MutableInterval var10 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod)var7, (org.joda.time.ReadableInstant)var9);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test219() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test219"); }


    org.joda.time.Duration var2 = new org.joda.time.Duration(1377768182707035L, 1386411782707L);
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var4 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var3);
    org.joda.time.LocalDate var5 = var4.toLocalDate();
    org.joda.time.MutableDateTime var6 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var7 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var4, (org.joda.time.ReadableInstant)var6);
    org.joda.time.MutableDateTime var8 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var9 = var8.year();
    boolean var10 = var6.isBefore((org.joda.time.ReadableInstant)var8);
    org.joda.time.Duration var12 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    boolean var15 = var12.isShorterThan((org.joda.time.ReadableDuration)var14);
    org.joda.time.Duration var17 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    boolean var20 = var17.isShorterThan((org.joda.time.ReadableDuration)var19);
    org.joda.time.Duration var21 = var12.plus((org.joda.time.ReadableDuration)var17);
    var8.add((org.joda.time.ReadableDuration)var17);
    org.joda.time.MutableDateTime.Property var23 = var8.weekyear();
    org.joda.time.MutableDateTime.Property var24 = var8.year();
    boolean var26 = var8.isAfter(1L);
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    var29.setWeekOfWeekyear(1);
    int var32 = var29.getRoundingMode();
    var29.addMillis(100);
    var29.setSecondOfMinute(10);
    org.joda.time.PeriodType var37 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var38 = new org.joda.time.Period((org.joda.time.ReadableDuration)var28, (org.joda.time.ReadableInstant)var29, var37);
    org.joda.time.Days var39 = var38.toStandardDays();
    org.joda.time.Hours var40 = var39.toStandardHours();
    java.lang.String var41 = var40.toString();
    org.joda.time.Days var42 = var40.toStandardDays();
    org.joda.time.Minutes var43 = var42.toStandardMinutes();
    org.joda.time.Duration var44 = var43.toStandardDuration();
    org.joda.time.chrono.JulianChronology var45 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var46 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var45);
    org.joda.time.LocalDate var47 = var46.toLocalDate();
    org.joda.time.MutableDateTime var48 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var49 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var46, (org.joda.time.ReadableInstant)var48);
    org.joda.time.MutableDateTime var50 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var51 = var50.year();
    boolean var52 = var48.isBefore((org.joda.time.ReadableInstant)var50);
    var50.addMonths(104);
    org.joda.time.PeriodType var55 = org.joda.time.PeriodType.yearDay();
    org.joda.time.Period var56 = var44.toPeriodTo((org.joda.time.ReadableInstant)var50, var55);
    org.joda.time.Period var57 = new org.joda.time.Period((org.joda.time.ReadableDuration)var2, (org.joda.time.ReadableInstant)var8, var55);
    java.lang.String var58 = var55.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "PT0H"+ "'", var41.equals("PT0H"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "PeriodType[YearDay]"+ "'", var58.equals("PeriodType[YearDay]"));

  }

  public void test220() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test220"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.format.DateTimeFormatterBuilder var5 = var4.appendTimeZoneId();
    org.joda.time.format.DateTimeFormatterBuilder var6 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var8 = var6.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var10 = var6.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var11 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var12 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var11);
    org.joda.time.LocalDate var13 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var14 = var11.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var15 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var16 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var17 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var16);
    org.joda.time.LocalDate var18 = var17.toLocalDate();
    org.joda.time.LocalDate var20 = var18.minusMonths(0);
    int[] var22 = var15.get((org.joda.time.ReadablePartial)var20, 100L);
    org.joda.time.chrono.EthiopicChronology var26 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var27 = var26.hours();
    org.joda.time.LocalTime var28 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var26);
    org.joda.time.Period var29 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var26);
    org.joda.time.DateTimeField var30 = var26.millisOfSecond();
    org.joda.time.DateTimeField var31 = var26.secondOfDay();
    org.joda.time.field.SkipDateTimeField var33 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var15, var31, 100);
    org.joda.time.LocalDateTime var34 = org.joda.time.LocalDateTime.now();
    int var35 = var34.getDayOfYear();
    org.joda.time.Chronology var36 = var34.getChronology();
    int var37 = var34.getYearOfCentury();
    int var38 = var33.getMaximumValue((org.joda.time.ReadablePartial)var34);
    boolean var40 = var33.isLeap(1L);
    org.joda.time.LocalDateTime var41 = org.joda.time.LocalDateTime.now();
    int var42 = var41.getDayOfYear();
    int var43 = var33.getMinimumValue((org.joda.time.ReadablePartial)var41);
    org.joda.time.DurationField var44 = var33.getDurationField();
    org.joda.time.DateTimeFieldType var45 = var33.getType();
    org.joda.time.field.OffsetDateTimeField var49 = new org.joda.time.field.OffsetDateTimeField(var14, var45, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var52 = new org.joda.time.IllegalFieldValueException(var45, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var55 = var6.appendFraction(var45, 33, (-948));
    org.joda.time.format.DateTimeFormatterBuilder var56 = var5.appendText(var45);
    org.joda.time.format.DateTimeFormatterBuilder var58 = var56.appendHourOfHalfday(2);
    org.joda.time.format.DateTimeFormatterBuilder var61 = var56.appendFractionOfDay(62, 2013);
    org.joda.time.format.DateTimePrinter var62 = var56.toPrinter();
    org.joda.time.format.DateTimeFormatterBuilder var63 = var56.appendEraText();
    org.joda.time.format.DateTimeFormatterBuilder var64 = var56.appendEraText();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test221() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test221"); }


    org.joda.time.format.DateTimeFormatter var0 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var5 = var4.hours();
    org.joda.time.LocalTime var6 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var4);
    org.joda.time.Period var7 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var4);
    org.joda.time.DateTimeField var8 = var4.millisOfSecond();
    org.joda.time.chrono.LenientChronology var9 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var4);
    org.joda.time.format.DateTimeFormatter var10 = var0.withChronology((org.joda.time.Chronology)var9);
    org.joda.time.DateTimeField var11 = var9.secondOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test222() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test222"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.DurationField var19 = var18.getRangeDurationField();
    int var21 = var18.getMaximumValue(2762381894421796L);
    boolean var22 = var18.isSupported();
    org.joda.time.Instant var23 = org.joda.time.Instant.now();
    org.joda.time.DateTimeZone var25 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.MutableDateTime var26 = var23.toMutableDateTime(var25);
    org.joda.time.MonthDay var27 = org.joda.time.MonthDay.now(var25);
    int[] var31 = new int[] { 1, 1, 0};
    int var32 = var18.getMaximumValue((org.joda.time.ReadablePartial)var27, var31);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTimeFieldType var34 = var27.getFieldType(24430687);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 86399);

  }

  public void test223() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test223"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    var0.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var0.setChronology((org.joda.time.Chronology)var3);
    org.joda.time.DateTimeField var5 = var3.clockhourOfHalfday();
    org.joda.time.format.DateTimeFormatterBuilder var6 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var8 = var6.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var10 = var6.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var11 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var12 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var11);
    org.joda.time.LocalDate var13 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var14 = var11.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var15 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var16 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var17 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var16);
    org.joda.time.LocalDate var18 = var17.toLocalDate();
    org.joda.time.LocalDate var20 = var18.minusMonths(0);
    int[] var22 = var15.get((org.joda.time.ReadablePartial)var20, 100L);
    org.joda.time.chrono.EthiopicChronology var26 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var27 = var26.hours();
    org.joda.time.LocalTime var28 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var26);
    org.joda.time.Period var29 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var26);
    org.joda.time.DateTimeField var30 = var26.millisOfSecond();
    org.joda.time.DateTimeField var31 = var26.secondOfDay();
    org.joda.time.field.SkipDateTimeField var33 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var15, var31, 100);
    org.joda.time.LocalDateTime var34 = org.joda.time.LocalDateTime.now();
    int var35 = var34.getDayOfYear();
    org.joda.time.Chronology var36 = var34.getChronology();
    int var37 = var34.getYearOfCentury();
    int var38 = var33.getMaximumValue((org.joda.time.ReadablePartial)var34);
    boolean var40 = var33.isLeap(1L);
    org.joda.time.LocalDateTime var41 = org.joda.time.LocalDateTime.now();
    int var42 = var41.getDayOfYear();
    int var43 = var33.getMinimumValue((org.joda.time.ReadablePartial)var41);
    org.joda.time.DurationField var44 = var33.getDurationField();
    org.joda.time.DateTimeFieldType var45 = var33.getType();
    org.joda.time.field.OffsetDateTimeField var49 = new org.joda.time.field.OffsetDateTimeField(var14, var45, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var52 = new org.joda.time.IllegalFieldValueException(var45, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var55 = var6.appendFraction(var45, 33, (-948));
    org.joda.time.field.DividedDateTimeField var57 = new org.joda.time.field.DividedDateTimeField(var5, var45, 100);
    int var60 = var57.getDifference(1377742992740L, 1377746591916L);
    int var63 = var57.getDifference(1377769560460016L, (-86386600L));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var65 = var57.roundFloor(1377742999393L);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 3827137);

  }

  public void test224() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test224"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDate var1 = org.joda.time.LocalDate.parse("2057-06-07T00:00:00.000Z");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test225() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test225"); }


    org.joda.time.format.DateTimeFormatter var0 = org.joda.time.format.ISODateTimeFormat.timeElementParser();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test226() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test226"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.LocalDateTime var3 = var0.minusSeconds(2005);
    org.joda.time.LocalDateTime var5 = var3.withWeekOfWeekyear(1);
    org.joda.time.Chronology var6 = var3.getChronology();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDateTime var10 = var3.withDate(28, 767326786, 3);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test227() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test227"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardSeconds(1377742981948L);
    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var3 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var2);
    org.joda.time.LocalDate var4 = var3.toLocalDate();
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var6 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var3, (org.joda.time.ReadableInstant)var5);
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var8 = var7.year();
    boolean var9 = var5.isBefore((org.joda.time.ReadableInstant)var7);
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var13 = org.joda.time.Duration.standardHours((-1L));
    boolean var14 = var11.isShorterThan((org.joda.time.ReadableDuration)var13);
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    boolean var19 = var16.isShorterThan((org.joda.time.ReadableDuration)var18);
    org.joda.time.Duration var20 = var11.plus((org.joda.time.ReadableDuration)var16);
    var7.add((org.joda.time.ReadableDuration)var16);
    org.joda.time.MutableDateTime.Property var22 = var7.weekyear();
    org.joda.time.MutableDateTime.Property var23 = var7.year();
    boolean var25 = var7.equals((java.lang.Object)(byte)0);
    var7.addDays(216);
    org.joda.time.Period var28 = var1.toPeriodFrom((org.joda.time.ReadableInstant)var7);
    java.util.GregorianCalendar var29 = var7.toGregorianCalendar();
    var7.addMillis(12200);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var7.setTime(200, 12196171, 25785, 37);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test228() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test228"); }


    org.joda.time.format.DateTimeFormatter var4 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
    org.joda.time.chrono.EthiopicChronology var8 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var9 = var8.hours();
    org.joda.time.LocalTime var10 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var8);
    org.joda.time.Period var11 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var8);
    org.joda.time.DateTimeField var12 = var8.millisOfSecond();
    org.joda.time.chrono.LenientChronology var13 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var8);
    org.joda.time.format.DateTimeFormatter var14 = var4.withChronology((org.joda.time.Chronology)var13);
    org.joda.time.chrono.ISOChronology var15 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
    org.joda.time.tz.FixedDateTimeZone var20 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var22 = var20.getOffsetFromLocal(1377742981323L);
    org.joda.time.Chronology var23 = var15.withZone((org.joda.time.DateTimeZone)var20);
    long var25 = var20.nextTransition(9L);
    org.joda.time.Chronology var26 = var13.withZone((org.joda.time.DateTimeZone)var20);
    org.joda.time.YearMonth var27 = new org.joda.time.YearMonth(1377746580754L, (org.joda.time.Chronology)var13);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.TimeOfDay var28 = new org.joda.time.TimeOfDay(12196, 104, 42, (org.joda.time.Chronology)var13);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 9L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test229() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test229"); }


    org.joda.time.Instant var0 = new org.joda.time.Instant();
    org.joda.time.Instant var1 = var0.toInstant();
    org.joda.time.PeriodType var2 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var3 = new org.joda.time.MutablePeriod(var2);
    var3.addDays(1);
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    boolean var10 = var7.isShorterThan((org.joda.time.ReadableDuration)var9);
    var3.add((org.joda.time.ReadableDuration)var9);
    org.joda.time.Duration var13 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var15 = org.joda.time.Duration.standardHours((-1L));
    boolean var16 = var13.isShorterThan((org.joda.time.ReadableDuration)var15);
    org.joda.time.Duration var17 = var13.toDuration();
    org.joda.time.chrono.JulianChronology var18 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var19 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var18);
    org.joda.time.LocalDate var20 = var19.toLocalDate();
    org.joda.time.MutableDateTime var21 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var22 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var19, (org.joda.time.ReadableInstant)var21);
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var24 = var23.year();
    boolean var25 = var21.isBefore((org.joda.time.ReadableInstant)var23);
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var29 = org.joda.time.Duration.standardHours((-1L));
    boolean var30 = var27.isShorterThan((org.joda.time.ReadableDuration)var29);
    org.joda.time.Duration var32 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var34 = org.joda.time.Duration.standardHours((-1L));
    boolean var35 = var32.isShorterThan((org.joda.time.ReadableDuration)var34);
    org.joda.time.Duration var36 = var27.plus((org.joda.time.ReadableDuration)var32);
    var23.add((org.joda.time.ReadableDuration)var32);
    org.joda.time.PeriodType var38 = org.joda.time.PeriodType.months();
    org.joda.time.Period var39 = new org.joda.time.Period((org.joda.time.ReadableDuration)var13, (org.joda.time.ReadableInstant)var23, var38);
    org.joda.time.Period var40 = new org.joda.time.Period((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableDuration)var9, var38);
    org.joda.time.DateTime var41 = var1.toDateTimeISO();
    org.joda.time.LocalDateTime var42 = new org.joda.time.LocalDateTime((java.lang.Object)var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test230() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test230"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    int var5 = var2.getRoundingMode();
    var2.addMillis(100);
    var2.setSecondOfMinute(10);
    org.joda.time.PeriodType var10 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var11 = new org.joda.time.Period((org.joda.time.ReadableDuration)var1, (org.joda.time.ReadableInstant)var2, var10);
    org.joda.time.Days var12 = var11.toStandardDays();
    org.joda.time.Duration var13 = var12.toStandardDuration();
    org.joda.time.chrono.JulianChronology var14 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var15 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var14);
    org.joda.time.LocalDate var16 = var15.toLocalDate();
    org.joda.time.LocalDate var18 = var16.minusMonths(0);
    org.joda.time.DateTime var19 = var16.toDateTimeAtMidnight();
    int var20 = var19.getHourOfDay();
    org.joda.time.DateTime var22 = var19.withSecondOfMinute(10);
    org.joda.time.DateTime var25 = var19.withDurationAdded(3L, 34);
    org.joda.time.chrono.JulianChronology var26 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var27 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var26);
    org.joda.time.LocalDate var28 = var27.toLocalDate();
    org.joda.time.DateMidnight var30 = var27.minusWeeks((-1));
    org.joda.time.Duration var32 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var33 = new org.joda.time.MutableDateTime();
    var33.setWeekOfWeekyear(1);
    int var36 = var33.getRoundingMode();
    var33.addMillis(100);
    var33.setSecondOfMinute(10);
    org.joda.time.PeriodType var41 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var42 = new org.joda.time.Period((org.joda.time.ReadableDuration)var32, (org.joda.time.ReadableInstant)var33, var41);
    org.joda.time.Days var43 = var42.toStandardDays();
    org.joda.time.DurationFieldType var44 = var43.getFieldType();
    org.joda.time.DateMidnight var46 = var30.withFieldAdded(var44, 1);
    org.joda.time.MutableInterval var47 = new org.joda.time.MutableInterval();
    org.joda.time.MutableInterval var48 = var47.copy();
    org.joda.time.DateTime var49 = var48.getStart();
    org.joda.time.Duration var51 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var53 = org.joda.time.Duration.standardHours((-1L));
    boolean var54 = var51.isShorterThan((org.joda.time.ReadableDuration)var53);
    org.joda.time.Duration var55 = var51.toDuration();
    org.joda.time.chrono.JulianChronology var56 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var57 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var56);
    org.joda.time.LocalDate var58 = var57.toLocalDate();
    org.joda.time.MutableDateTime var59 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var60 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var57, (org.joda.time.ReadableInstant)var59);
    org.joda.time.MutableDateTime var61 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var62 = var61.year();
    boolean var63 = var59.isBefore((org.joda.time.ReadableInstant)var61);
    org.joda.time.Duration var65 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var67 = org.joda.time.Duration.standardHours((-1L));
    boolean var68 = var65.isShorterThan((org.joda.time.ReadableDuration)var67);
    org.joda.time.Duration var70 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var72 = org.joda.time.Duration.standardHours((-1L));
    boolean var73 = var70.isShorterThan((org.joda.time.ReadableDuration)var72);
    org.joda.time.Duration var74 = var65.plus((org.joda.time.ReadableDuration)var70);
    var61.add((org.joda.time.ReadableDuration)var70);
    org.joda.time.PeriodType var76 = org.joda.time.PeriodType.months();
    org.joda.time.Period var77 = new org.joda.time.Period((org.joda.time.ReadableDuration)var51, (org.joda.time.ReadableInstant)var61, var76);
    org.joda.time.MutablePeriod var78 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant)var30, (org.joda.time.ReadableInstant)var49, var76);
    org.joda.time.Period var79 = var13.toPeriodTo((org.joda.time.ReadableInstant)var25, var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test231() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test231"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var5 = var0.appendYear(23, 8);
    org.joda.time.format.DateTimeFormatterBuilder var7 = var5.appendWeekOfWeekyear(13);
    org.joda.time.format.DateTimeFormatter var8 = org.joda.time.format.ISODateTimeFormat.yearMonth();
    org.joda.time.format.DateTimeFormatterBuilder var9 = var7.append(var8);
    org.joda.time.format.DateTimeFormatterBuilder var12 = var9.appendYearOfEra(16, 23544431);
    org.joda.time.format.DateTimeFormatterBuilder var17 = var12.appendTimeZoneOffset("03:23:16.037", true, 5, 331);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test232() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test232"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var5);
    org.joda.time.DateTimeField var8 = var5.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate var14 = var12.minusMonths(0);
    int[] var16 = var9.get((org.joda.time.ReadablePartial)var14, 100L);
    org.joda.time.chrono.EthiopicChronology var20 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var21 = var20.hours();
    org.joda.time.LocalTime var22 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var20);
    org.joda.time.Period var23 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var20);
    org.joda.time.DateTimeField var24 = var20.millisOfSecond();
    org.joda.time.DateTimeField var25 = var20.secondOfDay();
    org.joda.time.field.SkipDateTimeField var27 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var9, var25, 100);
    org.joda.time.LocalDateTime var28 = org.joda.time.LocalDateTime.now();
    int var29 = var28.getDayOfYear();
    org.joda.time.Chronology var30 = var28.getChronology();
    int var31 = var28.getYearOfCentury();
    int var32 = var27.getMaximumValue((org.joda.time.ReadablePartial)var28);
    boolean var34 = var27.isLeap(1L);
    org.joda.time.LocalDateTime var35 = org.joda.time.LocalDateTime.now();
    int var36 = var35.getDayOfYear();
    int var37 = var27.getMinimumValue((org.joda.time.ReadablePartial)var35);
    org.joda.time.DurationField var38 = var27.getDurationField();
    org.joda.time.DateTimeFieldType var39 = var27.getType();
    org.joda.time.field.OffsetDateTimeField var43 = new org.joda.time.field.OffsetDateTimeField(var8, var39, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var46 = new org.joda.time.IllegalFieldValueException(var39, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var49 = var0.appendFraction(var39, 33, (-948));
    org.joda.time.Partial var51 = new org.joda.time.Partial(var39, 4);
    org.joda.time.DateTimeComparator var52 = org.joda.time.DateTimeComparator.getInstance(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test233() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test233"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    var1.addDays(1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    var1.add((org.joda.time.ReadableDuration)var7);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var7, (org.joda.time.ReadableInstant)var10);
    var11.clear();
    org.joda.time.PeriodType var13 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var14 = new org.joda.time.MutablePeriod(var13);
    var14.addDays(1);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    boolean var21 = var18.isShorterThan((org.joda.time.ReadableDuration)var20);
    var14.add((org.joda.time.ReadableDuration)var20);
    var11.add((org.joda.time.ReadablePeriod)var14);
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.LocalDate var26 = var25.toLocalDate();
    org.joda.time.MutableDateTime var27 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var28 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var25, (org.joda.time.ReadableInstant)var27);
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var30 = var29.year();
    boolean var31 = var27.isBefore((org.joda.time.ReadableInstant)var29);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    boolean var41 = var38.isShorterThan((org.joda.time.ReadableDuration)var40);
    org.joda.time.Duration var42 = var33.plus((org.joda.time.ReadableDuration)var38);
    var29.add((org.joda.time.ReadableDuration)var38);
    org.joda.time.chrono.JulianChronology var44 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var45 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var44);
    org.joda.time.LocalDate var46 = var45.toLocalDate();
    org.joda.time.MutableDateTime var47 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var48 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var45, (org.joda.time.ReadableInstant)var47);
    org.joda.time.MutableDateTime var49 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var50 = var49.year();
    boolean var51 = var47.isBefore((org.joda.time.ReadableInstant)var49);
    org.joda.time.Interval var52 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var29, (org.joda.time.ReadableInstant)var49);
    boolean var54 = var52.isAfter(10L);
    org.joda.time.MutableDateTime var55 = new org.joda.time.MutableDateTime();
    var55.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var58 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var55.setChronology((org.joda.time.Chronology)var58);
    org.joda.time.Interval var60 = var52.withChronology((org.joda.time.Chronology)var58);
    var11.setPeriod((org.joda.time.ReadableInterval)var52);
    var11.addMillis((-1));
    int var64 = var11.getWeeks();
    org.joda.time.DateTime var65 = org.joda.time.DateTime.now();
    org.joda.time.chrono.JulianChronology var66 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var67 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var66);
    org.joda.time.LocalDate var68 = var67.toLocalDate();
    org.joda.time.MutableDateTime var69 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var70 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var67, (org.joda.time.ReadableInstant)var69);
    org.joda.time.MutableDateTime var71 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var72 = var71.year();
    boolean var73 = var69.isBefore((org.joda.time.ReadableInstant)var71);
    org.joda.time.MutableDateTime.Property var74 = var71.minuteOfHour();
    org.joda.time.MutableDateTime.Property var75 = var71.millisOfSecond();
    org.joda.time.Chronology var76 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant)var65, (org.joda.time.ReadableInstant)var71);
    org.joda.time.Duration var77 = var11.toDurationFrom((org.joda.time.ReadableInstant)var71);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var71.setDate(24430, 8400, 24414169);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test234() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test234"); }


    org.joda.time.format.DateTimeFormatter var1 = org.joda.time.format.ISODateTimeFormat.dateHourMinuteSecond();
    org.joda.time.format.DateTimeFormatter var2 = var1.withZoneUTC();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalTime var3 = org.joda.time.LocalTime.parse("8592", var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test235() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test235"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.Period var6 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var8 = var6.plusSeconds(100);
    org.joda.time.Period var10 = var6.minusMillis(10);
    boolean var11 = var1.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var12 = var1.dayOfYear();
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var14 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var13);
    org.joda.time.LocalDate var15 = var14.toLocalDate();
    org.joda.time.LocalDate var17 = var15.minusMonths(0);
    org.joda.time.DateTime var18 = var15.toDateTimeAtMidnight();
    org.joda.time.DateTime var20 = var18.withCenturyOfEra(4);
    org.joda.time.Days var21 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var20);
    org.joda.time.DateTime var23 = var20.plusSeconds(10);
    org.joda.time.tz.FixedDateTimeZone var28 = new org.joda.time.tz.FixedDateTimeZone("PT0H", "ISOChronology[UTC]", 100, 13);
    org.joda.time.DateTime var29 = var20.toDateTime((org.joda.time.DateTimeZone)var28);
    org.joda.time.DateTime var31 = var20.withMillisOfSecond(768);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test236() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test236"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.DurationField var19 = var18.getRangeDurationField();
    org.joda.time.field.OffsetDateTimeField var21 = new org.joda.time.field.OffsetDateTimeField((org.joda.time.DateTimeField)var18, 228);
    java.lang.String var23 = var21.getAsShortText(1377746593932L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var25 = var21.remainder((-62157023999896L));
      fail("Expected exception of type org.joda.time.chrono.LimitChronology.LimitException");
    } catch (Throwable e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "12422"+ "'", var23.equals("12422"));

  }

  public void test237() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test237"); }


    org.joda.time.chrono.EthiopicChronology var6 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var7 = var6.hours();
    org.joda.time.DateMidnight var8 = new org.joda.time.DateMidnight(9L, (org.joda.time.Chronology)var6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTime var9 = new org.joda.time.DateTime(765, 765, 55, 11, 6, (org.joda.time.Chronology)var6);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test238() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test238"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.YearMonth var3 = new org.joda.time.YearMonth(1377746580754L, (org.joda.time.Chronology)var1);
    org.joda.time.LocalDateTime var4 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDateTime.Property var5 = var4.millisOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test239() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test239"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var2.toDateTimeAtMidnight();
    org.joda.time.DateTime var7 = var5.withMillis(100L);
    int var8 = var5.getWeekyear();
    org.joda.time.DateTime var10 = var5.withYear(86399);
    org.joda.time.DateTime.Property var11 = var10.centuryOfEra();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MutablePeriod var12 = new org.joda.time.MutablePeriod((java.lang.Object)var10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1969);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test240() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test240"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var1 = var0.year();
    org.joda.time.MutableDateTime.Property var2 = var0.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var4 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var3);
    org.joda.time.Period var9 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var11 = var9.plusSeconds(100);
    org.joda.time.Period var13 = var9.minusMillis(10);
    boolean var14 = var4.equals((java.lang.Object)10);
    org.joda.time.Weeks var15 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var0, (org.joda.time.ReadableInstant)var4);
    org.joda.time.Chronology var16 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant)var0);
    org.joda.time.DateTime var17 = org.joda.time.DateTime.now(var16);
    org.joda.time.DateTimeZone var19 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.DateTimeZone var20 = org.joda.time.DateTimeUtils.getZone(var19);
    org.joda.time.DateTime var21 = var17.toDateTime(var19);
    org.joda.time.DateTime var23 = var21.plusMinutes(985);
    org.joda.time.DateTime.Property var24 = var23.year();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test241() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test241"); }


    org.joda.time.PeriodType var1 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var2 = new org.joda.time.MutablePeriod(var1);
    var2.addDays(1);
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var8 = org.joda.time.Duration.standardHours((-1L));
    boolean var9 = var6.isShorterThan((org.joda.time.ReadableDuration)var8);
    var2.add((org.joda.time.ReadableDuration)var8);
    org.joda.time.MutableDateTime var11 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var12 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var8, (org.joda.time.ReadableInstant)var11);
    var12.clear();
    org.joda.time.PeriodType var14 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var15 = new org.joda.time.MutablePeriod(var14);
    var15.addDays(1);
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    boolean var22 = var19.isShorterThan((org.joda.time.ReadableDuration)var21);
    var15.add((org.joda.time.ReadableDuration)var21);
    var12.add((org.joda.time.ReadablePeriod)var15);
    org.joda.time.chrono.JulianChronology var25 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var26 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var25);
    org.joda.time.LocalDate var27 = var26.toLocalDate();
    org.joda.time.MutableDateTime var28 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var29 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var26, (org.joda.time.ReadableInstant)var28);
    org.joda.time.MutableDateTime var30 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var31 = var30.year();
    boolean var32 = var28.isBefore((org.joda.time.ReadableInstant)var30);
    org.joda.time.Duration var34 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var36 = org.joda.time.Duration.standardHours((-1L));
    boolean var37 = var34.isShorterThan((org.joda.time.ReadableDuration)var36);
    org.joda.time.Duration var39 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var41 = org.joda.time.Duration.standardHours((-1L));
    boolean var42 = var39.isShorterThan((org.joda.time.ReadableDuration)var41);
    org.joda.time.Duration var43 = var34.plus((org.joda.time.ReadableDuration)var39);
    var30.add((org.joda.time.ReadableDuration)var39);
    org.joda.time.chrono.JulianChronology var45 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var46 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var45);
    org.joda.time.LocalDate var47 = var46.toLocalDate();
    org.joda.time.MutableDateTime var48 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var49 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var46, (org.joda.time.ReadableInstant)var48);
    org.joda.time.MutableDateTime var50 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var51 = var50.year();
    boolean var52 = var48.isBefore((org.joda.time.ReadableInstant)var50);
    org.joda.time.Interval var53 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var30, (org.joda.time.ReadableInstant)var50);
    boolean var55 = var53.isAfter(10L);
    org.joda.time.MutableDateTime var56 = new org.joda.time.MutableDateTime();
    var56.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var59 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var56.setChronology((org.joda.time.Chronology)var59);
    org.joda.time.Interval var61 = var53.withChronology((org.joda.time.Chronology)var59);
    var12.setPeriod((org.joda.time.ReadableInterval)var53);
    var12.addMillis((-1));
    var12.setYears(10);
    org.joda.time.format.DateTimeFormatter var69 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
    org.joda.time.chrono.EthiopicChronology var73 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var74 = var73.hours();
    org.joda.time.LocalTime var75 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var73);
    org.joda.time.Period var76 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var73);
    org.joda.time.DateTimeField var77 = var73.millisOfSecond();
    org.joda.time.chrono.LenientChronology var78 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var73);
    org.joda.time.format.DateTimeFormatter var79 = var69.withChronology((org.joda.time.Chronology)var78);
    org.joda.time.chrono.ISOChronology var80 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
    org.joda.time.tz.FixedDateTimeZone var85 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var87 = var85.getOffsetFromLocal(1377742981323L);
    org.joda.time.Chronology var88 = var80.withZone((org.joda.time.DateTimeZone)var85);
    long var90 = var85.nextTransition(9L);
    org.joda.time.Chronology var91 = var78.withZone((org.joda.time.DateTimeZone)var85);
    org.joda.time.MutableDateTime var92 = new org.joda.time.MutableDateTime(1377746594906L, var91);
    var12.add(86400000L, var91);
    org.joda.time.YearMonth var94 = new org.joda.time.YearMonth(1377742981323L, var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 9L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);

  }

  public void test242() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test242"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.withMonthOfYear(1);
    org.joda.time.LocalDate var6 = var4.withEra(1);
    org.joda.time.LocalDate.Property var7 = var4.yearOfCentury();
    java.lang.String var8 = var4.toString();
    org.joda.time.DateTime var9 = var4.toDateTimeAtStartOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "1969-01-19"+ "'", var8.equals("1969-01-19"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test243() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test243"); }


    org.joda.time.Hours var1 = org.joda.time.Hours.hours(765);
    org.joda.time.Duration var2 = var1.toStandardDuration();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test244() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test244"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var3 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var5 = var3.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var7 = var5.appendDayOfWeek(8400);
    org.joda.time.format.DateTimeFormatterBuilder var9 = var7.appendLiteral("-1 hours");
    org.joda.time.format.DateTimeFormatterBuilder var11 = var7.appendClockhourOfDay(2005);
    org.joda.time.format.DateTimeFormatterBuilder var14 = var7.appendFractionOfSecond(630, 241);
    org.joda.time.format.DateTimeFormatterBuilder var15 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var17 = var15.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var19 = var15.appendClockhourOfHalfday(692);
    org.joda.time.format.DateTimeFormatterBuilder var20 = var19.appendTimeZoneId();
    org.joda.time.format.DateTimeParser var21 = var20.toParser();
    org.joda.time.format.DateTimeFormatterBuilder var23 = var20.appendDayOfYear(34);
    org.joda.time.format.DateTimeFormatterBuilder var24 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var26 = var24.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimePrinter var27 = var24.toPrinter();
    org.joda.time.format.DateTimeFormatter var28 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
    org.joda.time.chrono.EthiopicChronology var32 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var33 = var32.hours();
    org.joda.time.LocalTime var34 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var32);
    org.joda.time.Period var35 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var32);
    org.joda.time.DateTimeField var36 = var32.millisOfSecond();
    org.joda.time.chrono.LenientChronology var37 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var32);
    org.joda.time.format.DateTimeFormatter var38 = var28.withChronology((org.joda.time.Chronology)var37);
    org.joda.time.format.DateTimeFormatter var39 = var38.withZoneUTC();
    org.joda.time.format.DateTimeParser var40 = var38.getParser();
    org.joda.time.format.DateTimeFormatterBuilder var41 = var23.append(var27, var40);
    org.joda.time.format.DateTimeFormatter var42 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
    org.joda.time.chrono.EthiopicChronology var46 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var47 = var46.hours();
    org.joda.time.LocalTime var48 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var46);
    org.joda.time.Period var49 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var46);
    org.joda.time.DateTimeField var50 = var46.millisOfSecond();
    org.joda.time.chrono.LenientChronology var51 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var46);
    org.joda.time.format.DateTimeFormatter var52 = var42.withChronology((org.joda.time.Chronology)var51);
    org.joda.time.format.DateTimeFormatter var53 = var52.withZoneUTC();
    org.joda.time.format.DateTimeParser var54 = var52.getParser();
    org.joda.time.format.DateTimeFormatterBuilder var55 = var14.append(var27, var54);
    org.joda.time.format.DateTimeFormatterBuilder var56 = var0.append(var27);
    org.joda.time.format.DateTimeFormatter var57 = org.joda.time.format.ISODateTimeFormat.weekyearWeekDay();
    boolean var58 = var57.isOffsetParsed();
    org.joda.time.format.DateTimeParser var59 = var57.getParser();
    org.joda.time.format.DateTimeFormatter var60 = new org.joda.time.format.DateTimeFormatter(var27, var59);
    org.joda.time.format.DateTimeFormatterBuilder var61 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var63 = var61.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var65 = var61.appendClockhourOfHalfday(692);
    org.joda.time.format.DateTimeFormatterBuilder var66 = var65.appendTimeZoneId();
    org.joda.time.format.DateTimeParser var67 = var66.toParser();
    org.joda.time.format.DateTimeFormatter var68 = new org.joda.time.format.DateTimeFormatter(var27, var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test245() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test245"); }


    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.LocalDate var9 = var7.minusMonths(0);
    int[] var11 = var4.get((org.joda.time.ReadablePartial)var9, 100L);
    org.joda.time.DateTime var12 = new org.joda.time.DateTime(1377746581334L, (org.joda.time.Chronology)var4);
    org.joda.time.chrono.EthiopicChronology var16 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var17 = var16.hours();
    org.joda.time.LocalTime var18 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var16);
    org.joda.time.Period var19 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var16);
    org.joda.time.DateTimeField var20 = var16.millisOfSecond();
    org.joda.time.field.SkipDateTimeField var21 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var4, var20);
    org.joda.time.YearMonthDay var22 = new org.joda.time.YearMonthDay(240, 4, 9, (org.joda.time.Chronology)var4);
    org.joda.time.Chronology var23 = var4.withUTC();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test246() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test246"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    org.joda.time.LocalDate var3 = new org.joda.time.LocalDate(var2);
    org.joda.time.LocalDate var5 = var3.withWeekyear(28);
    org.joda.time.LocalDate var7 = var3.minusWeeks(15);
    org.joda.time.LocalDate.Property var8 = var7.weekOfWeekyear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test247() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test247"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var5);
    org.joda.time.DateTimeField var8 = var5.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate var14 = var12.minusMonths(0);
    int[] var16 = var9.get((org.joda.time.ReadablePartial)var14, 100L);
    org.joda.time.chrono.EthiopicChronology var20 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var21 = var20.hours();
    org.joda.time.LocalTime var22 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var20);
    org.joda.time.Period var23 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var20);
    org.joda.time.DateTimeField var24 = var20.millisOfSecond();
    org.joda.time.DateTimeField var25 = var20.secondOfDay();
    org.joda.time.field.SkipDateTimeField var27 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var9, var25, 100);
    org.joda.time.LocalDateTime var28 = org.joda.time.LocalDateTime.now();
    int var29 = var28.getDayOfYear();
    org.joda.time.Chronology var30 = var28.getChronology();
    int var31 = var28.getYearOfCentury();
    int var32 = var27.getMaximumValue((org.joda.time.ReadablePartial)var28);
    boolean var34 = var27.isLeap(1L);
    org.joda.time.LocalDateTime var35 = org.joda.time.LocalDateTime.now();
    int var36 = var35.getDayOfYear();
    int var37 = var27.getMinimumValue((org.joda.time.ReadablePartial)var35);
    org.joda.time.DurationField var38 = var27.getDurationField();
    org.joda.time.DateTimeFieldType var39 = var27.getType();
    org.joda.time.field.OffsetDateTimeField var43 = new org.joda.time.field.OffsetDateTimeField(var8, var39, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var46 = new org.joda.time.IllegalFieldValueException(var39, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var49 = var0.appendFraction(var39, 33, (-948));
    org.joda.time.chrono.EthiopicChronology var50 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var51 = var50.minutes();
    org.joda.time.DateTimeField var52 = var50.year();
    org.joda.time.DurationField var53 = var50.hours();
    org.joda.time.field.UnsupportedDateTimeField var54 = org.joda.time.field.UnsupportedDateTimeField.getInstance(var39, var53);
    long var57 = var54.add((-1000L), 1377742981L);
    java.lang.String var58 = var54.getName();
    long var61 = var54.add((-9L), 12194);
    boolean var62 = var54.isSupported();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 4959874731599000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "secondOfDay"+ "'", var58.equals("secondOfDay"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 43898399991L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);

  }

  public void test248() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test248"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.Period var6 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var8 = var6.plusSeconds(100);
    org.joda.time.Period var10 = var6.minusMillis(10);
    boolean var11 = var1.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var12 = var1.dayOfYear();
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var14 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var13);
    org.joda.time.LocalDate var15 = var14.toLocalDate();
    org.joda.time.LocalDate var17 = var15.minusMonths(0);
    org.joda.time.DateTime var18 = var15.toDateTimeAtMidnight();
    org.joda.time.DateTime var20 = var18.withCenturyOfEra(4);
    org.joda.time.Days var21 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var20);
    org.joda.time.DateMidnight var23 = var1.minusDays(567);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test249() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test249"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.format.DateTimeFormatterBuilder var5 = var4.appendTimeZoneId();
    org.joda.time.format.DateTimeFormatterBuilder var7 = var5.appendMillisOfDay(14400001);
    org.joda.time.format.DateTimeFormatterBuilder var9 = var7.appendMinuteOfHour(692);
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var10);
    org.joda.time.DateTimeField var13 = var10.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var14 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var15 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var16 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var15);
    org.joda.time.LocalDate var17 = var16.toLocalDate();
    org.joda.time.LocalDate var19 = var17.minusMonths(0);
    int[] var21 = var14.get((org.joda.time.ReadablePartial)var19, 100L);
    org.joda.time.chrono.EthiopicChronology var25 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var26 = var25.hours();
    org.joda.time.LocalTime var27 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var25);
    org.joda.time.Period var28 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var25);
    org.joda.time.DateTimeField var29 = var25.millisOfSecond();
    org.joda.time.DateTimeField var30 = var25.secondOfDay();
    org.joda.time.field.SkipDateTimeField var32 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var14, var30, 100);
    org.joda.time.LocalDateTime var33 = org.joda.time.LocalDateTime.now();
    int var34 = var33.getDayOfYear();
    org.joda.time.Chronology var35 = var33.getChronology();
    int var36 = var33.getYearOfCentury();
    int var37 = var32.getMaximumValue((org.joda.time.ReadablePartial)var33);
    boolean var39 = var32.isLeap(1L);
    org.joda.time.LocalDateTime var40 = org.joda.time.LocalDateTime.now();
    int var41 = var40.getDayOfYear();
    int var42 = var32.getMinimumValue((org.joda.time.ReadablePartial)var40);
    org.joda.time.DurationField var43 = var32.getDurationField();
    org.joda.time.DateTimeFieldType var44 = var32.getType();
    org.joda.time.field.OffsetDateTimeField var48 = new org.joda.time.field.OffsetDateTimeField(var13, var44, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var51 = new org.joda.time.IllegalFieldValueException(var44, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var54 = var7.appendSignedDecimal(var44, 241, 104);
    org.joda.time.MutableDateTime var56 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var57 = var56.year();
    org.joda.time.MutableDateTime.Property var58 = var56.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var59 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var60 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var59);
    org.joda.time.Period var65 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var67 = var65.plusSeconds(100);
    org.joda.time.Period var69 = var65.minusMillis(10);
    boolean var70 = var60.equals((java.lang.Object)10);
    org.joda.time.Weeks var71 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var56, (org.joda.time.ReadableInstant)var60);
    org.joda.time.Chronology var72 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant)var56);
    org.joda.time.DateTime var73 = org.joda.time.DateTime.now(var72);
    org.joda.time.DateTimeZone var75 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.DateTimeZone var76 = org.joda.time.DateTimeUtils.getZone(var75);
    org.joda.time.DateTime var77 = var73.toDateTime(var75);
    org.joda.time.DateTime var79 = var77.plusMinutes(985);
    org.joda.time.chrono.EthiopicChronology var80 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var81 = var80.hours();
    org.joda.time.DateTimeField var82 = var80.yearOfEra();
    org.joda.time.DateTime var83 = var77.toDateTime((org.joda.time.Chronology)var80);
    org.joda.time.Partial var84 = new org.joda.time.Partial(var44, 1883, (org.joda.time.Chronology)var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test250() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test250"); }


    org.joda.time.MutableInterval var0 = new org.joda.time.MutableInterval();
    org.joda.time.MutableInterval var1 = var0.copy();
    org.joda.time.DateTime var2 = var1.getStart();
    java.util.Date var3 = var2.toDate();
    org.joda.time.MonthDay var4 = org.joda.time.MonthDay.fromDateFields(var3);
    org.joda.time.Period var9 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var11 = var9.plusSeconds(100);
    org.joda.time.Period var13 = var11.withSeconds(0);
    int var14 = var13.getMonths();
    org.joda.time.MonthDay var15 = var4.minus((org.joda.time.ReadablePeriod)var13);
    org.joda.time.LocalDate var17 = var4.toLocalDate(1970);
    int var18 = var17.getDayOfMonth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 31);

  }

  public void test251() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test251"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    var10.setWeekOfWeekyear(1);
    int var13 = var10.getRoundingMode();
    var10.addMillis(100);
    var10.setSecondOfMinute(10);
    org.joda.time.PeriodType var18 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var19 = new org.joda.time.Period((org.joda.time.ReadableDuration)var9, (org.joda.time.ReadableInstant)var10, var18);
    org.joda.time.Days var20 = var19.toStandardDays();
    org.joda.time.Duration var21 = var20.toStandardDuration();
    org.joda.time.MutableInterval var22 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadablePeriod)var20);
    org.joda.time.chrono.JulianChronology var23 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var24 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var23);
    org.joda.time.LocalDate var25 = var24.toLocalDate();
    org.joda.time.DateMidnight var27 = var24.minusWeeks((-1));
    org.joda.time.Duration var29 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var30 = new org.joda.time.MutableDateTime();
    var30.setWeekOfWeekyear(1);
    int var33 = var30.getRoundingMode();
    var30.addMillis(100);
    var30.setSecondOfMinute(10);
    org.joda.time.PeriodType var38 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var39 = new org.joda.time.Period((org.joda.time.ReadableDuration)var29, (org.joda.time.ReadableInstant)var30, var38);
    org.joda.time.Days var40 = var39.toStandardDays();
    org.joda.time.DurationFieldType var41 = var40.getFieldType();
    org.joda.time.DateMidnight var43 = var27.withFieldAdded(var41, 1);
    org.joda.time.chrono.JulianChronology var44 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var45 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var44);
    org.joda.time.LocalDate var46 = var45.toLocalDate();
    org.joda.time.DateMidnight var48 = var45.minusWeeks((-1));
    org.joda.time.Duration var50 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var51 = new org.joda.time.MutableDateTime();
    var51.setWeekOfWeekyear(1);
    int var54 = var51.getRoundingMode();
    var51.addMillis(100);
    var51.setSecondOfMinute(10);
    org.joda.time.PeriodType var59 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var60 = new org.joda.time.Period((org.joda.time.ReadableDuration)var50, (org.joda.time.ReadableInstant)var51, var59);
    org.joda.time.Days var61 = var60.toStandardDays();
    org.joda.time.DurationFieldType var62 = var61.getFieldType();
    org.joda.time.DateMidnight var64 = var48.withFieldAdded(var62, 1);
    org.joda.time.DateMidnight var66 = var27.withFieldAdded(var62, 13);
    org.joda.time.DateMidnight var68 = var66.plusDays(35);
    var22.setEnd((org.joda.time.ReadableInstant)var66);
    org.joda.time.MutableInterval var70 = var22.copy();
    org.joda.time.Hours var71 = org.joda.time.Hours.hoursIn((org.joda.time.ReadableInterval)var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test252() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test252"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    long var26 = var18.addWrapField(1377746581334L, 100);
    org.joda.time.DurationField var27 = var18.getRangeDurationField();
    int var28 = var18.getMinimumValue();
    java.lang.String var29 = var18.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1377746681334L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "secondOfDay"+ "'", var29.equals("secondOfDay"));

  }

  public void test253() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test253"); }


    org.joda.time.DateTime var0 = new org.joda.time.DateTime();
    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var3 = new org.joda.time.DateMidnight((-1L), (org.joda.time.Chronology)var2);
    org.joda.time.chrono.JulianChronology var4 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var5 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var4);
    org.joda.time.LocalDate var6 = var5.toLocalDate();
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var8 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var7);
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var10 = var9.year();
    boolean var11 = var7.isBefore((org.joda.time.ReadableInstant)var9);
    org.joda.time.Duration var13 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var15 = org.joda.time.Duration.standardHours((-1L));
    boolean var16 = var13.isShorterThan((org.joda.time.ReadableDuration)var15);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    boolean var21 = var18.isShorterThan((org.joda.time.ReadableDuration)var20);
    org.joda.time.Duration var22 = var13.plus((org.joda.time.ReadableDuration)var18);
    var9.add((org.joda.time.ReadableDuration)var18);
    var9.setHourOfDay(10);
    org.joda.time.Years var26 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var3, (org.joda.time.ReadableInstant)var9);
    org.joda.time.Period var27 = new org.joda.time.Period((org.joda.time.ReadableInstant)var0, (org.joda.time.ReadableInstant)var9);
    org.joda.time.DateTime var29 = var0.plus(1377768182707L);
    org.joda.time.DateTime var31 = var0.withYear(893);
    org.joda.time.LocalDateTime var32 = var0.toLocalDateTime();
    org.joda.time.Seconds var34 = org.joda.time.Seconds.seconds(216);
    org.joda.time.chrono.JulianChronology var35 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var36 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var35);
    org.joda.time.LocalDate var37 = var36.toLocalDate();
    org.joda.time.MutableDateTime var38 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var39 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var36, (org.joda.time.ReadableInstant)var38);
    org.joda.time.chrono.JulianChronology var40 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var41 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var40);
    org.joda.time.LocalDate var42 = var41.toLocalDate();
    org.joda.time.MutableDateTime var43 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var44 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var41, (org.joda.time.ReadableInstant)var43);
    org.joda.time.MutableDateTime var45 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var46 = var45.year();
    boolean var47 = var43.isBefore((org.joda.time.ReadableInstant)var45);
    org.joda.time.Duration var49 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var51 = org.joda.time.Duration.standardHours((-1L));
    boolean var52 = var49.isShorterThan((org.joda.time.ReadableDuration)var51);
    org.joda.time.Duration var54 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var56 = org.joda.time.Duration.standardHours((-1L));
    boolean var57 = var54.isShorterThan((org.joda.time.ReadableDuration)var56);
    org.joda.time.Duration var58 = var49.plus((org.joda.time.ReadableDuration)var54);
    var45.add((org.joda.time.ReadableDuration)var54);
    org.joda.time.Seconds var60 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var36, (org.joda.time.ReadableInstant)var45);
    org.joda.time.Duration var61 = var60.toStandardDuration();
    org.joda.time.Seconds var62 = var34.plus(var60);
    boolean var63 = var32.equals((java.lang.Object)var62);
    int var64 = var32.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 4);

  }

  public void test254() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test254"); }


    org.joda.time.format.DateTimeFormatter var0 = org.joda.time.format.ISODateTimeFormat.localDateOptionalTimeParser();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test255() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test255"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    var1.addDays(1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    var1.add((org.joda.time.ReadableDuration)var7);
    org.joda.time.Period var10 = var1.toPeriod();
    org.joda.time.Period var12 = var10.withSeconds(25785);
    org.joda.time.Period var14 = var10.plusSeconds(69);
    int var15 = var14.getMillis();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);

  }

  public void test256() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test256"); }


    org.joda.time.DateTime var0 = org.joda.time.DateTime.now();
    org.joda.time.DateTime var2 = var0.withMillis(0L);
    org.joda.time.DateTime.Property var3 = var0.centuryOfEra();
    org.joda.time.DateTime var5 = var0.withYearOfCentury(16);
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var8 = new org.joda.time.MutableDateTime();
    var8.setWeekOfWeekyear(1);
    int var11 = var8.getRoundingMode();
    var8.addMillis(100);
    var8.setSecondOfMinute(10);
    org.joda.time.PeriodType var16 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var17 = new org.joda.time.Period((org.joda.time.ReadableDuration)var7, (org.joda.time.ReadableInstant)var8, var16);
    org.joda.time.Days var18 = var17.toStandardDays();
    org.joda.time.chrono.JulianChronology var19 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var20 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var19);
    org.joda.time.Period var25 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var27 = var25.plusSeconds(100);
    org.joda.time.Period var29 = var25.minusMillis(10);
    boolean var30 = var20.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var31 = var20.dayOfYear();
    org.joda.time.chrono.JulianChronology var32 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var33 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var32);
    org.joda.time.LocalDate var34 = var33.toLocalDate();
    org.joda.time.LocalDate var36 = var34.minusMonths(0);
    org.joda.time.DateTime var37 = var34.toDateTimeAtMidnight();
    org.joda.time.DateTime var39 = var37.withCenturyOfEra(4);
    org.joda.time.Days var40 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var20, (org.joda.time.ReadableInstant)var39);
    org.joda.time.Days var42 = var40.dividedBy(1);
    boolean var43 = var18.isGreaterThan(var40);
    org.joda.time.DurationFieldType var44 = var18.getFieldType();
    org.joda.time.Days var46 = var18.multipliedBy(4);
    org.joda.time.Duration var47 = var46.toStandardDuration();
    org.joda.time.DateTime var48 = var0.minus((org.joda.time.ReadableDuration)var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test257() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test257"); }


    org.joda.time.Period var3 = org.joda.time.Period.years(21);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var6 = new org.joda.time.MutableDateTime();
    var6.setWeekOfWeekyear(1);
    int var9 = var6.getRoundingMode();
    var6.addMillis(100);
    var6.setSecondOfMinute(10);
    org.joda.time.PeriodType var14 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var15 = new org.joda.time.Period((org.joda.time.ReadableDuration)var5, (org.joda.time.ReadableInstant)var6, var14);
    org.joda.time.Duration var17 = var5.plus(100L);
    org.joda.time.chrono.JulianChronology var18 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var19 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var18);
    org.joda.time.LocalDate var20 = var19.toLocalDate();
    org.joda.time.MutableDateTime var21 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var22 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var19, (org.joda.time.ReadableInstant)var21);
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var24 = var23.year();
    boolean var25 = var21.isBefore((org.joda.time.ReadableInstant)var23);
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var29 = org.joda.time.Duration.standardHours((-1L));
    boolean var30 = var27.isShorterThan((org.joda.time.ReadableDuration)var29);
    org.joda.time.Duration var32 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var34 = org.joda.time.Duration.standardHours((-1L));
    boolean var35 = var32.isShorterThan((org.joda.time.ReadableDuration)var34);
    org.joda.time.Duration var36 = var27.plus((org.joda.time.ReadableDuration)var32);
    var23.add((org.joda.time.ReadableDuration)var32);
    org.joda.time.MutableDateTime.Property var38 = var23.dayOfWeek();
    var23.addMonths((-9));
    int var41 = var23.getCenturyOfEra();
    org.joda.time.Period var46 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var48 = var46.plusYears((-1));
    org.joda.time.Years var50 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var51 = var50.getPeriodType();
    org.joda.time.Period var52 = var46.normalizedStandard(var51);
    org.joda.time.PeriodType var53 = var51.withMillisRemoved();
    org.joda.time.PeriodType var54 = var51.withYearsRemoved();
    org.joda.time.MutablePeriod var55 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var17, (org.joda.time.ReadableInstant)var23, var51);
    org.joda.time.Period var56 = var3.withPeriodType(var51);
    org.joda.time.PeriodType var57 = var51.withHoursRemoved();
    org.joda.time.chrono.BuddhistChronology var58 = org.joda.time.chrono.BuddhistChronology.getInstance();
    org.joda.time.DateTimeField var59 = var58.secondOfDay();
    org.joda.time.Chronology var60 = var58.withUTC();
    org.joda.time.Period var61 = new org.joda.time.Period(2755493227898L, 1377746581241L, var51, var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test258() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test258"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var0);
    org.joda.time.DateTimeField var3 = var0.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.LocalDate var9 = var7.minusMonths(0);
    int[] var11 = var4.get((org.joda.time.ReadablePartial)var9, 100L);
    org.joda.time.chrono.EthiopicChronology var15 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var16 = var15.hours();
    org.joda.time.LocalTime var17 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var15);
    org.joda.time.Period var18 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var15);
    org.joda.time.DateTimeField var19 = var15.millisOfSecond();
    org.joda.time.DateTimeField var20 = var15.secondOfDay();
    org.joda.time.field.SkipDateTimeField var22 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var4, var20, 100);
    org.joda.time.LocalDateTime var23 = org.joda.time.LocalDateTime.now();
    int var24 = var23.getDayOfYear();
    org.joda.time.Chronology var25 = var23.getChronology();
    int var26 = var23.getYearOfCentury();
    int var27 = var22.getMaximumValue((org.joda.time.ReadablePartial)var23);
    boolean var29 = var22.isLeap(1L);
    org.joda.time.LocalDateTime var30 = org.joda.time.LocalDateTime.now();
    int var31 = var30.getDayOfYear();
    int var32 = var22.getMinimumValue((org.joda.time.ReadablePartial)var30);
    org.joda.time.DurationField var33 = var22.getDurationField();
    org.joda.time.DateTimeFieldType var34 = var22.getType();
    org.joda.time.field.OffsetDateTimeField var38 = new org.joda.time.field.OffsetDateTimeField(var3, var34, 884, 3, 948);
    boolean var39 = var38.isSupported();
    int var40 = var38.getMaximumValue();
    org.joda.time.DateTimeFieldType var41 = var38.getType();
    org.joda.time.chrono.JulianChronology var42 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var43 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var42);
    org.joda.time.LocalDate var44 = var43.toLocalDate();
    org.joda.time.MutableDateTime var45 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var46 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var43, (org.joda.time.ReadableInstant)var45);
    org.joda.time.DateTimeComparator var47 = org.joda.time.DateTimeComparator.getTimeOnlyInstance();
    org.joda.time.DateTimeFieldType var48 = var47.getUpperLimit();
    org.joda.time.MutableDateTime.Property var49 = var45.property(var48);
    org.joda.time.field.DividedDateTimeField var51 = new org.joda.time.field.DividedDateTimeField((org.joda.time.DateTimeField)var38, var48, 240);
    long var53 = var51.remainder(1377746594064L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 948);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1377746594064L);

  }

  public void test259() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test259"); }


    org.joda.time.DateTime var0 = new org.joda.time.DateTime();
    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var3 = new org.joda.time.DateMidnight((-1L), (org.joda.time.Chronology)var2);
    org.joda.time.chrono.JulianChronology var4 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var5 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var4);
    org.joda.time.LocalDate var6 = var5.toLocalDate();
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var8 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var7);
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var10 = var9.year();
    boolean var11 = var7.isBefore((org.joda.time.ReadableInstant)var9);
    org.joda.time.Duration var13 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var15 = org.joda.time.Duration.standardHours((-1L));
    boolean var16 = var13.isShorterThan((org.joda.time.ReadableDuration)var15);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    boolean var21 = var18.isShorterThan((org.joda.time.ReadableDuration)var20);
    org.joda.time.Duration var22 = var13.plus((org.joda.time.ReadableDuration)var18);
    var9.add((org.joda.time.ReadableDuration)var18);
    var9.setHourOfDay(10);
    org.joda.time.Years var26 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var3, (org.joda.time.ReadableInstant)var9);
    org.joda.time.Period var27 = new org.joda.time.Period((org.joda.time.ReadableInstant)var0, (org.joda.time.ReadableInstant)var9);
    org.joda.time.DateTime var29 = var0.plus(1377768182707L);
    org.joda.time.DateTime var31 = var0.withYear(893);
    org.joda.time.DateTime var33 = var0.minusDays(12196);
    org.joda.time.chrono.ISOChronology var34 = org.joda.time.chrono.ISOChronology.getInstance();
    org.joda.time.tz.FixedDateTimeZone var39 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var41 = var39.getOffsetFromLocal(1377742981323L);
    org.joda.time.DateTimeZone var43 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.chrono.JulianChronology var44 = org.joda.time.chrono.JulianChronology.getInstance(var43);
    long var46 = var39.getMillisKeepLocal(var43, 1377746580759L);
    org.joda.time.Chronology var47 = var34.withZone(var43);
    org.joda.time.LocalDateTime var48 = org.joda.time.LocalDateTime.now();
    int var49 = var48.getDayOfYear();
    org.joda.time.Chronology var50 = var48.getChronology();
    org.joda.time.chrono.StrictChronology var51 = org.joda.time.chrono.StrictChronology.getInstance(var50);
    org.joda.time.DateTime var59 = new org.joda.time.DateTime(0, 4, 28, 1, 28, 1, 1);
    org.joda.time.LocalDate var60 = var59.toLocalDate();
    org.joda.time.LocalDate.Property var61 = var60.weekyear();
    long var63 = var51.set((org.joda.time.ReadablePartial)var60, 104L);
    org.joda.time.DateTimeField var64 = var51.dayOfYear();
    org.joda.time.field.SkipDateTimeField var65 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var34, var64);
    org.joda.time.DateTimeZone var67 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.chrono.JulianChronology var68 = org.joda.time.chrono.JulianChronology.getInstance(var67);
    org.joda.time.Chronology var69 = var34.withZone(var67);
    org.joda.time.DateTime var70 = var0.withZone(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1377746580754L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == (-62157023999896L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test260() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test260"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    var0.setWeekOfWeekyear(1);
    int var3 = var0.getRoundingMode();
    org.joda.time.chrono.JulianChronology var4 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var5 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var4);
    org.joda.time.LocalDate var6 = var5.toLocalDate();
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var8 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var7);
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var10 = var9.year();
    boolean var11 = var7.isBefore((org.joda.time.ReadableInstant)var9);
    var0.setDate((org.joda.time.ReadableInstant)var7);
    java.util.Date var13 = var0.toDate();
    org.joda.time.MonthDay var14 = org.joda.time.MonthDay.fromDateFields(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test261() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test261"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendHourOfHalfday(759);
    org.joda.time.format.DateTimeFormatterBuilder var6 = var4.appendLiteral(' ');
    org.joda.time.format.DateTimeFormatterBuilder var9 = var6.appendFractionOfMinute(14, 51);
    org.joda.time.format.DateTimeFormatterBuilder var10 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var12 = var10.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var13 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var15 = var13.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var17 = var15.appendDayOfWeek(8400);
    org.joda.time.format.DateTimeFormatterBuilder var19 = var17.appendLiteral("-1 hours");
    org.joda.time.format.DateTimeFormatterBuilder var21 = var17.appendClockhourOfDay(2005);
    org.joda.time.format.DateTimeFormatterBuilder var24 = var17.appendFractionOfSecond(630, 241);
    org.joda.time.format.DateTimeFormatterBuilder var25 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var27 = var25.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var29 = var25.appendClockhourOfHalfday(692);
    org.joda.time.format.DateTimeFormatterBuilder var30 = var29.appendTimeZoneId();
    org.joda.time.format.DateTimeParser var31 = var30.toParser();
    org.joda.time.format.DateTimeFormatterBuilder var33 = var30.appendDayOfYear(34);
    org.joda.time.format.DateTimeFormatterBuilder var34 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var36 = var34.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimePrinter var37 = var34.toPrinter();
    org.joda.time.format.DateTimeFormatter var38 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
    org.joda.time.chrono.EthiopicChronology var42 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var43 = var42.hours();
    org.joda.time.LocalTime var44 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var42);
    org.joda.time.Period var45 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var42);
    org.joda.time.DateTimeField var46 = var42.millisOfSecond();
    org.joda.time.chrono.LenientChronology var47 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var42);
    org.joda.time.format.DateTimeFormatter var48 = var38.withChronology((org.joda.time.Chronology)var47);
    org.joda.time.format.DateTimeFormatter var49 = var48.withZoneUTC();
    org.joda.time.format.DateTimeParser var50 = var48.getParser();
    org.joda.time.format.DateTimeFormatterBuilder var51 = var33.append(var37, var50);
    org.joda.time.format.DateTimeFormatter var52 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
    org.joda.time.chrono.EthiopicChronology var56 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var57 = var56.hours();
    org.joda.time.LocalTime var58 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var56);
    org.joda.time.Period var59 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var56);
    org.joda.time.DateTimeField var60 = var56.millisOfSecond();
    org.joda.time.chrono.LenientChronology var61 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var56);
    org.joda.time.format.DateTimeFormatter var62 = var52.withChronology((org.joda.time.Chronology)var61);
    org.joda.time.format.DateTimeFormatter var63 = var62.withZoneUTC();
    org.joda.time.format.DateTimeParser var64 = var62.getParser();
    org.joda.time.format.DateTimeFormatterBuilder var65 = var24.append(var37, var64);
    org.joda.time.format.DateTimeFormatterBuilder var66 = var10.append(var37);
    org.joda.time.format.DateTimeFormatter var67 = org.joda.time.format.ISODateTimeFormat.weekyearWeekDay();
    boolean var68 = var67.isOffsetParsed();
    org.joda.time.format.DateTimeParser var69 = var67.getParser();
    org.joda.time.format.DateTimeFormatter var70 = new org.joda.time.format.DateTimeFormatter(var37, var69);
    org.joda.time.format.DateTimeFormatterBuilder var71 = var9.appendOptional(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test262() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test262"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    long var26 = var18.addWrapField(1377746581334L, 100);
    org.joda.time.DurationField var27 = var18.getRangeDurationField();
    org.joda.time.chrono.JulianChronology var28 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var29 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var28);
    org.joda.time.DateMidnight var31 = var29.plusDays(2013);
    org.joda.time.chrono.JulianChronology var32 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var33 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var32);
    org.joda.time.LocalDate var34 = var33.toLocalDate();
    org.joda.time.DateMidnight var36 = var33.minusWeeks((-1));
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var39 = new org.joda.time.MutableDateTime();
    var39.setWeekOfWeekyear(1);
    int var42 = var39.getRoundingMode();
    var39.addMillis(100);
    var39.setSecondOfMinute(10);
    org.joda.time.PeriodType var47 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var48 = new org.joda.time.Period((org.joda.time.ReadableDuration)var38, (org.joda.time.ReadableInstant)var39, var47);
    org.joda.time.Days var49 = var48.toStandardDays();
    org.joda.time.DurationFieldType var50 = var49.getFieldType();
    org.joda.time.DateMidnight var52 = var36.withFieldAdded(var50, 1);
    org.joda.time.field.PreciseDurationField var54 = new org.joda.time.field.PreciseDurationField(var50, 1L);
    org.joda.time.DateMidnight var56 = var31.withFieldAdded(var50, 228);
    org.joda.time.field.DecoratedDurationField var57 = new org.joda.time.field.DecoratedDurationField(var27, var50);
    long var60 = var57.add(1377768182707L, 100L);
    boolean var61 = var57.isPrecise();
    long var62 = var57.getUnitMillis();
    long var65 = var57.getDifferenceAsLong((-1000L), 1377768182707L);
    org.joda.time.DurationField var66 = var57.getWrappedField();
    org.joda.time.DurationField var67 = var57.getWrappedField();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1377746681334L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1386408182707L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 86400000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == (-15946L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test263() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test263"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.withMonthOfYear(1);
    org.joda.time.DateMidnight var5 = var2.toDateMidnight();
    int var6 = var2.getWeekyear();
    org.joda.time.LocalDate.Property var7 = var2.yearOfEra();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1969);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test264() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test264"); }


    org.joda.time.chrono.EthiopicChronology var7 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var8 = var7.minutes();
    org.joda.time.Chronology var9 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology)var7);
    org.joda.time.Chronology var10 = var7.withUTC();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDateTime var11 = new org.joda.time.LocalDateTime(44, 11, 567, 240, (-22), 25785, 884, (org.joda.time.Chronology)var7);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test265() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test265"); }


    org.joda.time.format.DateTimeFormatter var0 = org.joda.time.format.ISODateTimeFormat.ordinalDate();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test266() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test266"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var24 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var23);
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var26 = var25.year();
    boolean var27 = var23.isBefore((org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var28 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var25);
    boolean var29 = var28.isBeforeNow();
    org.joda.time.Duration var30 = var28.toDuration();
    org.joda.time.MutableInterval var31 = new org.joda.time.MutableInterval();
    long var32 = var31.getEndMillis();
    java.lang.Object var33 = var31.clone();
    long var34 = var31.getEndMillis();
    org.joda.time.Hours var35 = org.joda.time.Hours.hoursIn((org.joda.time.ReadableInterval)var31);
    org.joda.time.Interval var36 = var28.gap((org.joda.time.ReadableInterval)var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);

  }

  public void test267() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test267"); }


    org.joda.time.Months var1 = org.joda.time.Months.months((-1));
    org.joda.time.Months var3 = var1.plus(100);
    int var4 = var1.size();
    org.joda.time.MutableInterval var5 = new org.joda.time.MutableInterval();
    long var6 = var5.getEndMillis();
    org.joda.time.Months var7 = org.joda.time.Months.monthsIn((org.joda.time.ReadableInterval)var5);
    org.joda.time.Months var9 = var7.plus(2013);
    org.joda.time.TimeOfDay var10 = new org.joda.time.TimeOfDay();
    int var11 = var10.size();
    org.joda.time.chrono.EthiopicChronology var13 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var14 = var13.hours();
    org.joda.time.LocalTime var15 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var13);
    org.joda.time.LocalTime var17 = var15.withMillisOfSecond(1);
    org.joda.time.LocalTime var19 = var17.minusHours((-1));
    org.joda.time.Years var20 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var10, (org.joda.time.ReadablePartial)var19);
    int var21 = var10.getMillisOfSecond();
    org.joda.time.chrono.JulianChronology var22 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.TimeOfDay var23 = var10.withChronologyRetainFields((org.joda.time.Chronology)var22);
    org.joda.time.Months var25 = org.joda.time.Months.months((-1));
    org.joda.time.Months var27 = var25.plus(100);
    int var28 = var25.size();
    org.joda.time.TimeOfDay var30 = var10.withPeriodAdded((org.joda.time.ReadablePeriod)var25, 2013);
    org.joda.time.Months var31 = var9.plus(var25);
    boolean var32 = var1.isLessThan(var31);
    org.joda.time.Months var34 = var1.multipliedBy(765);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 110);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test268() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test268"); }


    org.joda.time.Period var4 = new org.joda.time.Period(8, 2013, 15946, 24414169);

  }

  public void test269() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test269"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var0);
    org.joda.time.DateTimeField var3 = var0.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.LocalDate var9 = var7.minusMonths(0);
    int[] var11 = var4.get((org.joda.time.ReadablePartial)var9, 100L);
    org.joda.time.chrono.EthiopicChronology var15 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var16 = var15.hours();
    org.joda.time.LocalTime var17 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var15);
    org.joda.time.Period var18 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var15);
    org.joda.time.DateTimeField var19 = var15.millisOfSecond();
    org.joda.time.DateTimeField var20 = var15.secondOfDay();
    org.joda.time.field.SkipDateTimeField var22 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var4, var20, 100);
    org.joda.time.LocalDateTime var23 = org.joda.time.LocalDateTime.now();
    int var24 = var23.getDayOfYear();
    org.joda.time.Chronology var25 = var23.getChronology();
    int var26 = var23.getYearOfCentury();
    int var27 = var22.getMaximumValue((org.joda.time.ReadablePartial)var23);
    boolean var29 = var22.isLeap(1L);
    org.joda.time.LocalDateTime var30 = org.joda.time.LocalDateTime.now();
    int var31 = var30.getDayOfYear();
    int var32 = var22.getMinimumValue((org.joda.time.ReadablePartial)var30);
    org.joda.time.DurationField var33 = var22.getDurationField();
    org.joda.time.DateTimeFieldType var34 = var22.getType();
    org.joda.time.field.OffsetDateTimeField var38 = new org.joda.time.field.OffsetDateTimeField(var3, var34, 884, 3, 948);
    long var40 = var38.roundCeiling(3L);
    int var42 = var38.getMaximumValue((-7200000L));
    boolean var44 = var38.isLeap((-79L));
    org.joda.time.DurationField var45 = var38.getLeapDurationField();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 3L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 948);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);

  }

  public void test270() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test270"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.LocalDateTime var3 = var0.minusSeconds(2005);
    org.joda.time.chrono.JulianChronology var4 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var5 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var4);
    org.joda.time.DateMidnight var7 = var5.plusDays(2013);
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var8);
    org.joda.time.LocalDate var10 = var9.toLocalDate();
    org.joda.time.DateMidnight var12 = var9.minusWeeks((-1));
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    var15.setWeekOfWeekyear(1);
    int var18 = var15.getRoundingMode();
    var15.addMillis(100);
    var15.setSecondOfMinute(10);
    org.joda.time.PeriodType var23 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var24 = new org.joda.time.Period((org.joda.time.ReadableDuration)var14, (org.joda.time.ReadableInstant)var15, var23);
    org.joda.time.Days var25 = var24.toStandardDays();
    org.joda.time.DurationFieldType var26 = var25.getFieldType();
    org.joda.time.DateMidnight var28 = var12.withFieldAdded(var26, 1);
    org.joda.time.field.PreciseDurationField var30 = new org.joda.time.field.PreciseDurationField(var26, 1L);
    org.joda.time.DateMidnight var32 = var7.withFieldAdded(var26, 228);
    org.joda.time.field.PreciseDurationField var34 = new org.joda.time.field.PreciseDurationField(var26, (-9L));
    org.joda.time.LocalDateTime var36 = var3.withFieldAdded(var26, 7);
    int var37 = var36.getSecondOfMinute();
    org.joda.time.chrono.JulianChronology var38 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var39 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var38);
    org.joda.time.Period var44 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var46 = var44.plusSeconds(100);
    org.joda.time.Period var48 = var44.minusMillis(10);
    boolean var49 = var39.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var50 = var39.dayOfYear();
    org.joda.time.chrono.JulianChronology var51 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var52 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var51);
    org.joda.time.LocalDate var53 = var52.toLocalDate();
    org.joda.time.LocalDate var55 = var53.minusMonths(0);
    org.joda.time.DateTime var56 = var53.toDateTimeAtMidnight();
    org.joda.time.DateTime var58 = var56.withCenturyOfEra(4);
    org.joda.time.Days var59 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var39, (org.joda.time.ReadableInstant)var58);
    org.joda.time.DateTime var61 = var58.plusSeconds(10);
    org.joda.time.tz.FixedDateTimeZone var66 = new org.joda.time.tz.FixedDateTimeZone("PT0H", "ISOChronology[UTC]", 100, 13);
    org.joda.time.DateTime var67 = var58.toDateTime((org.joda.time.DateTimeZone)var66);
    org.joda.time.chrono.CopticChronology var68 = org.joda.time.chrono.CopticChronology.getInstance((org.joda.time.DateTimeZone)var66);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Interval var69 = new org.joda.time.Interval((java.lang.Object)var37, (org.joda.time.Chronology)var68);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test271() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test271"); }


    org.joda.time.DateTimeZone var1 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.chrono.ISOChronology var2 = org.joda.time.chrono.ISOChronology.getInstance(var1);
    org.joda.time.chrono.ISOChronology var3 = org.joda.time.chrono.ISOChronology.getInstance(var1);
    org.joda.time.LocalTime var4 = org.joda.time.LocalTime.now((org.joda.time.Chronology)var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test272() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test272"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    long var26 = var18.addWrapField(1377746581334L, 100);
    org.joda.time.DurationField var27 = var18.getRangeDurationField();
    org.joda.time.chrono.JulianChronology var28 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var29 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var28);
    org.joda.time.DateMidnight var31 = var29.plusDays(2013);
    org.joda.time.chrono.JulianChronology var32 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var33 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var32);
    org.joda.time.LocalDate var34 = var33.toLocalDate();
    org.joda.time.DateMidnight var36 = var33.minusWeeks((-1));
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var39 = new org.joda.time.MutableDateTime();
    var39.setWeekOfWeekyear(1);
    int var42 = var39.getRoundingMode();
    var39.addMillis(100);
    var39.setSecondOfMinute(10);
    org.joda.time.PeriodType var47 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var48 = new org.joda.time.Period((org.joda.time.ReadableDuration)var38, (org.joda.time.ReadableInstant)var39, var47);
    org.joda.time.Days var49 = var48.toStandardDays();
    org.joda.time.DurationFieldType var50 = var49.getFieldType();
    org.joda.time.DateMidnight var52 = var36.withFieldAdded(var50, 1);
    org.joda.time.field.PreciseDurationField var54 = new org.joda.time.field.PreciseDurationField(var50, 1L);
    org.joda.time.DateMidnight var56 = var31.withFieldAdded(var50, 228);
    org.joda.time.field.DecoratedDurationField var57 = new org.joda.time.field.DecoratedDurationField(var27, var50);
    long var60 = var57.add(1377768182707L, 100L);
    long var63 = var57.add((-7200000L), 23);
    long var65 = var57.getValueAsLong((-60779281008478L));
    org.joda.time.chrono.JulianChronology var66 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var67 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var66);
    org.joda.time.LocalDate var68 = var67.toLocalDate();
    org.joda.time.DateMidnight var70 = var67.minusWeeks((-1));
    org.joda.time.Duration var72 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var73 = new org.joda.time.MutableDateTime();
    var73.setWeekOfWeekyear(1);
    int var76 = var73.getRoundingMode();
    var73.addMillis(100);
    var73.setSecondOfMinute(10);
    org.joda.time.PeriodType var81 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var82 = new org.joda.time.Period((org.joda.time.ReadableDuration)var72, (org.joda.time.ReadableInstant)var73, var81);
    org.joda.time.Days var83 = var82.toStandardDays();
    org.joda.time.DurationFieldType var84 = var83.getFieldType();
    org.joda.time.DateMidnight var86 = var70.withFieldAdded(var84, 1);
    org.joda.time.field.PreciseDurationField var88 = new org.joda.time.field.PreciseDurationField(var84, 1L);
    long var91 = var88.getMillis(3, 9L);
    int var92 = var57.compareTo((org.joda.time.DurationField)var88);
    long var95 = var57.getValueAsLong(1377742992241L, 1377768182707035L);
    org.joda.time.DurationField var96 = var57.getWrappedField();
    long var99 = var57.getMillis((-15946L), 15946L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1377746681334L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1386408182707L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 1980000000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == (-703463L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == 3L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == 15946L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == (-1377734400000L));

  }

  public void test273() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test273"); }


    org.joda.time.YearMonth var1 = new org.joda.time.YearMonth(10L);
    org.joda.time.chrono.EthiopicChronology var2 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.YearMonth var3 = var1.withChronologyRetainFields((org.joda.time.Chronology)var2);
    org.joda.time.LocalDate var4 = new org.joda.time.LocalDate((org.joda.time.Chronology)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test274() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test274"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.DateTimeField var3 = var1.minuteOfHour();
    org.joda.time.LocalDate var4 = new org.joda.time.LocalDate(1L, (org.joda.time.Chronology)var1);
    org.joda.time.LocalDate.Property var5 = var4.weekyear();
    org.joda.time.LocalDate.Property var6 = var4.dayOfMonth();
    org.joda.time.chrono.JulianChronology var7 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var8 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var7);
    org.joda.time.LocalDate var9 = var8.toLocalDate();
    org.joda.time.DateMidnight var11 = var8.minusWeeks((-1));
    org.joda.time.Duration var13 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var14 = new org.joda.time.MutableDateTime();
    var14.setWeekOfWeekyear(1);
    int var17 = var14.getRoundingMode();
    var14.addMillis(100);
    var14.setSecondOfMinute(10);
    org.joda.time.PeriodType var22 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var23 = new org.joda.time.Period((org.joda.time.ReadableDuration)var13, (org.joda.time.ReadableInstant)var14, var22);
    org.joda.time.Days var24 = var23.toStandardDays();
    org.joda.time.DurationFieldType var25 = var24.getFieldType();
    org.joda.time.DateMidnight var27 = var11.withFieldAdded(var25, 1);
    org.joda.time.chrono.JulianChronology var28 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var29 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var28);
    org.joda.time.LocalDate var30 = var29.toLocalDate();
    org.joda.time.DateMidnight var32 = var29.minusWeeks((-1));
    org.joda.time.Duration var34 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var35 = new org.joda.time.MutableDateTime();
    var35.setWeekOfWeekyear(1);
    int var38 = var35.getRoundingMode();
    var35.addMillis(100);
    var35.setSecondOfMinute(10);
    org.joda.time.PeriodType var43 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var44 = new org.joda.time.Period((org.joda.time.ReadableDuration)var34, (org.joda.time.ReadableInstant)var35, var43);
    org.joda.time.Days var45 = var44.toStandardDays();
    org.joda.time.DurationFieldType var46 = var45.getFieldType();
    org.joda.time.DateMidnight var48 = var32.withFieldAdded(var46, 1);
    org.joda.time.DateMidnight var50 = var11.withFieldAdded(var46, 13);
    org.joda.time.IllegalFieldValueException var54 = new org.joda.time.IllegalFieldValueException(var46, (java.lang.Number)(-1), (java.lang.Number)(short)(-1), (java.lang.Number)0);
    org.joda.time.LocalDate var56 = var4.withFieldAdded(var46, 13);
    int var57 = var4.getCenturyOfEra();
    int var58 = var4.getYearOfCentury();
    org.joda.time.LocalDateTime var59 = org.joda.time.LocalDateTime.now();
    int var60 = var59.getDayOfYear();
    org.joda.time.Chronology var61 = var59.getChronology();
    org.joda.time.Period var66 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var68 = var66.plusSeconds(100);
    org.joda.time.Period var70 = var66.minusMillis(10);
    org.joda.time.LocalDateTime var71 = var59.plus((org.joda.time.ReadablePeriod)var70);
    int var72 = var59.getYearOfEra();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Years var73 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var4, (org.joda.time.ReadablePartial)var59);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 1970);

  }

  public void test275() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test275"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    org.joda.time.YearMonthDay var4 = var2.plusYears(13);
    org.joda.time.DateTimeZone var6 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.Interval var7 = var2.toInterval(var6);
    int var8 = var2.getYear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1962);

  }

  public void test276() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test276"); }


    org.joda.time.chrono.GregorianChronology var0 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var1);
    org.joda.time.DurationField var4 = var1.hours();
    org.joda.time.Chronology var5 = var1.withUTC();
    org.joda.time.chrono.JulianChronology var6 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var7 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var6);
    org.joda.time.LocalDate var8 = var7.toLocalDate();
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var10 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableInstant)var9);
    org.joda.time.MutableDateTime var11 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var12 = var11.year();
    boolean var13 = var9.isBefore((org.joda.time.ReadableInstant)var11);
    org.joda.time.Duration var15 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var17 = org.joda.time.Duration.standardHours((-1L));
    boolean var18 = var15.isShorterThan((org.joda.time.ReadableDuration)var17);
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var22 = org.joda.time.Duration.standardHours((-1L));
    boolean var23 = var20.isShorterThan((org.joda.time.ReadableDuration)var22);
    org.joda.time.Duration var24 = var15.plus((org.joda.time.ReadableDuration)var20);
    var11.add((org.joda.time.ReadableDuration)var20);
    org.joda.time.chrono.JulianChronology var26 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var27 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var26);
    org.joda.time.LocalDate var28 = var27.toLocalDate();
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var30 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var27, (org.joda.time.ReadableInstant)var29);
    org.joda.time.MutableDateTime var31 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var32 = var31.year();
    boolean var33 = var29.isBefore((org.joda.time.ReadableInstant)var31);
    org.joda.time.Interval var34 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var11, (org.joda.time.ReadableInstant)var31);
    org.joda.time.DateTimeZone var35 = var31.getZone();
    org.joda.time.Chronology var36 = var1.withZone(var35);
    org.joda.time.Chronology var37 = var0.withZone(var35);
    org.joda.time.TimeOfDay var38 = new org.joda.time.TimeOfDay(var35);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.chrono.GJChronology var41 = org.joda.time.chrono.GJChronology.getInstance(var35, 1377746581334L, 80);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test277() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test277"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var2.toDateTimeAtMidnight();
    org.joda.time.DateTime var7 = var5.withMillis(100L);
    int var8 = var5.getWeekyear();
    org.joda.time.LocalDateTime var9 = var5.toLocalDateTime();
    org.joda.time.LocalTime var10 = var5.toLocalTime();
    org.joda.time.DateTime var12 = var5.minusSeconds(35);
    org.joda.time.DateTime.Property var13 = var12.minuteOfHour();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1969);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test278() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test278"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var1 = var0.year();
    org.joda.time.MutableDateTime.Property var2 = var0.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var4 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var3);
    org.joda.time.Period var9 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var11 = var9.plusSeconds(100);
    org.joda.time.Period var13 = var9.minusMillis(10);
    boolean var14 = var4.equals((java.lang.Object)10);
    org.joda.time.Weeks var15 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var0, (org.joda.time.ReadableInstant)var4);
    org.joda.time.MutableDateTime var16 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var17 = var16.year();
    org.joda.time.MutableDateTime.Property var18 = var16.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var19 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var20 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var19);
    org.joda.time.Period var25 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var27 = var25.plusSeconds(100);
    org.joda.time.Period var29 = var25.minusMillis(10);
    boolean var30 = var20.equals((java.lang.Object)10);
    org.joda.time.Weeks var31 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var16, (org.joda.time.ReadableInstant)var20);
    org.joda.time.Weeks var32 = var15.minus(var31);
    org.joda.time.Weeks var34 = var31.minus(3);
    org.joda.time.Duration var35 = var31.toStandardDuration();
    org.joda.time.Duration var36 = var31.toStandardDuration();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test279() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test279"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.Period var6 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var8 = var6.plusSeconds(100);
    org.joda.time.Period var10 = var6.minusMillis(10);
    boolean var11 = var1.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var12 = var1.dayOfYear();
    int var13 = var1.getSecondOfDay();
    org.joda.time.DateMidnight var15 = var1.withWeekyear(240);
    org.joda.time.DateMidnight var17 = var15.minusMonths(28);
    org.joda.time.DateMidnight var19 = var15.plusWeeks(104);
    org.joda.time.DateMidnight.Property var20 = var19.dayOfYear();
    int var21 = var19.getMinuteOfHour();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);

  }

  public void test280() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test280"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var5);
    org.joda.time.DateTimeField var8 = var5.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate var14 = var12.minusMonths(0);
    int[] var16 = var9.get((org.joda.time.ReadablePartial)var14, 100L);
    org.joda.time.chrono.EthiopicChronology var20 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var21 = var20.hours();
    org.joda.time.LocalTime var22 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var20);
    org.joda.time.Period var23 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var20);
    org.joda.time.DateTimeField var24 = var20.millisOfSecond();
    org.joda.time.DateTimeField var25 = var20.secondOfDay();
    org.joda.time.field.SkipDateTimeField var27 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var9, var25, 100);
    org.joda.time.LocalDateTime var28 = org.joda.time.LocalDateTime.now();
    int var29 = var28.getDayOfYear();
    org.joda.time.Chronology var30 = var28.getChronology();
    int var31 = var28.getYearOfCentury();
    int var32 = var27.getMaximumValue((org.joda.time.ReadablePartial)var28);
    boolean var34 = var27.isLeap(1L);
    org.joda.time.LocalDateTime var35 = org.joda.time.LocalDateTime.now();
    int var36 = var35.getDayOfYear();
    int var37 = var27.getMinimumValue((org.joda.time.ReadablePartial)var35);
    org.joda.time.DurationField var38 = var27.getDurationField();
    org.joda.time.DateTimeFieldType var39 = var27.getType();
    org.joda.time.field.OffsetDateTimeField var43 = new org.joda.time.field.OffsetDateTimeField(var8, var39, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var46 = new org.joda.time.IllegalFieldValueException(var39, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var49 = var0.appendFraction(var39, 33, (-948));
    org.joda.time.chrono.EthiopicChronology var50 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var51 = var50.minutes();
    org.joda.time.DateTimeField var52 = var50.year();
    org.joda.time.DurationField var53 = var50.hours();
    org.joda.time.field.UnsupportedDateTimeField var54 = org.joda.time.field.UnsupportedDateTimeField.getInstance(var39, var53);
    org.joda.time.DateTimeFieldType var55 = var54.getType();
    org.joda.time.DurationField var56 = var54.getRangeDurationField();
    org.joda.time.DurationField var57 = var54.getDurationField();
    org.joda.time.PeriodType var58 = org.joda.time.PeriodType.months();
    java.lang.String var59 = var58.toString();
    org.joda.time.PeriodType var60 = org.joda.time.PeriodType.months();
    org.joda.time.Duration var62 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var63 = new org.joda.time.MutableDateTime();
    var63.setWeekOfWeekyear(1);
    int var66 = var63.getRoundingMode();
    var63.addMillis(100);
    var63.setSecondOfMinute(10);
    org.joda.time.PeriodType var71 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var72 = new org.joda.time.Period((org.joda.time.ReadableDuration)var62, (org.joda.time.ReadableInstant)var63, var71);
    org.joda.time.Days var73 = var72.toStandardDays();
    org.joda.time.DurationFieldType var74 = var73.getFieldType();
    int var75 = var60.indexOf(var74);
    boolean var76 = var58.isSupported(var74);
    org.joda.time.field.ScaledDurationField var78 = new org.joda.time.field.ScaledDurationField(var57, var74, 845);
    int var80 = var78.getValue(1377673200216L);
    long var82 = var78.getMillis(24430);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "PeriodType[Months]"+ "'", var59.equals("PeriodType[Months]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 452);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 74316060000000L);

  }

  public void test281() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test281"); }


    org.joda.time.Period var4 = new org.joda.time.Period(1, 10, 10, 1);
    int var5 = var4.getWeeks();
    org.joda.time.Period var6 = var4.toPeriod();
    int var7 = var6.getDays();
    org.joda.time.format.PeriodFormatter var8 = org.joda.time.format.ISOPeriodFormat.alternate();
    java.lang.String var9 = var6.toString(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "P00000000T011010.001"+ "'", var9.equals("P00000000T011010.001"));

  }

  public void test282() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test282"); }


    org.joda.time.MutablePeriod var4 = new org.joda.time.MutablePeriod(13, 20, 86399, 2);
    var4.addMillis(11);

  }

  public void test283() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test283"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalTime var1 = org.joda.time.LocalTime.parse("2013-08-29T02:23:39.501+00:00:00.100");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test284() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test284"); }


    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var7.setChronology((org.joda.time.Chronology)var10);
    org.joda.time.DateTimeField var12 = var10.clockhourOfHalfday();
    org.joda.time.DateTimeField var13 = var10.secondOfDay();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDateTime var14 = new org.joda.time.LocalDateTime(2049, 431, 85516010, 12196171, 124, 3975, 331, (org.joda.time.Chronology)var10);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test285() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test285"); }


    org.joda.time.DateTimeZone var1 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstance(var1);
    org.joda.time.LocalTime var3 = org.joda.time.LocalTime.now((org.joda.time.Chronology)var2);
    org.joda.time.PeriodType var4 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var5 = new org.joda.time.MutablePeriod(var4);
    var5.addDays(1);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    var5.add((org.joda.time.ReadableDuration)var11);
    org.joda.time.MutableDateTime var14 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var11, (org.joda.time.ReadableInstant)var14);
    var15.setSeconds(1);
    int var18 = var15.getSeconds();
    org.joda.time.PeriodType var19 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var20 = new org.joda.time.MutablePeriod(var19);
    var20.addDays(1);
    org.joda.time.Duration var24 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var26 = org.joda.time.Duration.standardHours((-1L));
    boolean var27 = var24.isShorterThan((org.joda.time.ReadableDuration)var26);
    var20.add((org.joda.time.ReadableDuration)var26);
    org.joda.time.DateTime var29 = org.joda.time.DateTime.now();
    org.joda.time.DateTime var31 = var29.withMillis(0L);
    org.joda.time.MutablePeriod var32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var26, (org.joda.time.ReadableInstant)var31);
    org.joda.time.Duration var34 = var26.withMillis(1377742981948L);
    var15.add((org.joda.time.ReadableDuration)var26);
    boolean var36 = var3.equals((java.lang.Object)var15);
    var15.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test286() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test286"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    org.joda.time.YearMonthDay var4 = var2.plusDays((-1));
    org.joda.time.YearMonthDay var6 = var2.plusDays(434);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test287() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test287"); }


    org.joda.time.Period var1 = new org.joda.time.Period(10L);
    org.joda.time.Period var3 = var1.minusDays(34);
    org.joda.time.Period var5 = var1.minusMinutes(4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test288() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test288"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    org.joda.time.LocalDateTime var4 = var0.withYear((-1));
    org.joda.time.LocalDateTime.Property var5 = var0.monthOfYear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test289() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test289"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.MutableDateTime var8 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var9 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var6, (org.joda.time.ReadableInstant)var8);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var11 = var10.year();
    boolean var12 = var8.isBefore((org.joda.time.ReadableInstant)var10);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    boolean var22 = var19.isShorterThan((org.joda.time.ReadableDuration)var21);
    org.joda.time.Duration var23 = var14.plus((org.joda.time.ReadableDuration)var19);
    var10.add((org.joda.time.ReadableDuration)var19);
    org.joda.time.Seconds var25 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var10);
    org.joda.time.Weeks var26 = var25.toStandardWeeks();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Interval var27 = new org.joda.time.Interval((java.lang.Object)var25);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test290() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test290"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    org.joda.time.YearMonthDay var4 = var2.plusDays((-1));
    org.joda.time.DateTime var5 = var4.toDateTimeAtCurrentTime();
    org.joda.time.chrono.BuddhistChronology var6 = org.joda.time.chrono.BuddhistChronology.getInstanceUTC();
    org.joda.time.DateTimeZone var8 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.DateTimeZone var9 = org.joda.time.DateTimeUtils.getZone(var8);
    org.joda.time.LocalDateTime var10 = new org.joda.time.LocalDateTime(var8);
    org.joda.time.MonthDay var11 = new org.joda.time.MonthDay(var8);
    org.joda.time.Chronology var12 = var6.withZone(var8);
    org.joda.time.MutableDateTime var13 = var5.toMutableDateTime(var8);
    java.util.TimeZone var14 = var8.toTimeZone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test291() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test291"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.field.PreciseDurationField var22 = new org.joda.time.field.PreciseDurationField(var18, 1L);
    long var25 = var22.getMillis(3, 9L);
    int var28 = var22.getValue(9L, 2762381894421796L);
    long var29 = var22.getUnitMillis();
    java.lang.String var30 = var22.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 3L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "days"+ "'", var30.equals("days"));

  }

  public void test292() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test292"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var0);
    org.joda.time.DateTimeField var3 = var0.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.LocalDate var9 = var7.minusMonths(0);
    int[] var11 = var4.get((org.joda.time.ReadablePartial)var9, 100L);
    org.joda.time.chrono.EthiopicChronology var15 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var16 = var15.hours();
    org.joda.time.LocalTime var17 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var15);
    org.joda.time.Period var18 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var15);
    org.joda.time.DateTimeField var19 = var15.millisOfSecond();
    org.joda.time.DateTimeField var20 = var15.secondOfDay();
    org.joda.time.field.SkipDateTimeField var22 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var4, var20, 100);
    org.joda.time.LocalDateTime var23 = org.joda.time.LocalDateTime.now();
    int var24 = var23.getDayOfYear();
    org.joda.time.Chronology var25 = var23.getChronology();
    int var26 = var23.getYearOfCentury();
    int var27 = var22.getMaximumValue((org.joda.time.ReadablePartial)var23);
    boolean var29 = var22.isLeap(1L);
    org.joda.time.LocalDateTime var30 = org.joda.time.LocalDateTime.now();
    int var31 = var30.getDayOfYear();
    int var32 = var22.getMinimumValue((org.joda.time.ReadablePartial)var30);
    org.joda.time.DurationField var33 = var22.getDurationField();
    org.joda.time.DateTimeFieldType var34 = var22.getType();
    org.joda.time.field.OffsetDateTimeField var38 = new org.joda.time.field.OffsetDateTimeField(var3, var34, 884, 3, 948);
    long var40 = var38.roundCeiling(3L);
    long var42 = var38.roundHalfEven((-208L));
    org.joda.time.DurationField var43 = var38.getLeapDurationField();
    org.joda.time.DurationField var44 = var38.getLeapDurationField();
    boolean var46 = var38.isLeap(2731816014500L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 3L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-208L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);

  }

  public void test293() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test293"); }


    org.joda.time.PeriodType var2 = org.joda.time.PeriodType.yearDay();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    var3.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var6 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var3.setChronology((org.joda.time.Chronology)var6);
    org.joda.time.MutablePeriod var8 = new org.joda.time.MutablePeriod(0L, var2, (org.joda.time.Chronology)var6);
    org.joda.time.LocalTime var9 = new org.joda.time.LocalTime((org.joda.time.Chronology)var6);
    org.joda.time.LocalTime.Property var10 = var9.millisOfSecond();
    org.joda.time.TimeOfDay var11 = new org.joda.time.TimeOfDay();
    org.joda.time.TimeOfDay var13 = var11.minusHours(4);
    org.joda.time.Duration var15 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var16 = new org.joda.time.MutableDateTime();
    var16.setWeekOfWeekyear(1);
    int var19 = var16.getRoundingMode();
    var16.addMillis(100);
    var16.setSecondOfMinute(10);
    org.joda.time.PeriodType var24 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var25 = new org.joda.time.Period((org.joda.time.ReadableDuration)var15, (org.joda.time.ReadableInstant)var16, var24);
    org.joda.time.Period var26 = new org.joda.time.Period((org.joda.time.ReadablePartial)var9, (org.joda.time.ReadablePartial)var13, var24);
    org.joda.time.Period var27 = new org.joda.time.Period((-100L), var24);
    int var28 = var27.getMinutes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);

  }

  public void test294() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test294"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    org.joda.time.format.DateTimeFormatterBuilder var3 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var5 = var3.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var7 = var3.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var8);
    org.joda.time.LocalDate var10 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var8);
    org.joda.time.DateTimeField var11 = var8.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var12 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var14 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var13);
    org.joda.time.LocalDate var15 = var14.toLocalDate();
    org.joda.time.LocalDate var17 = var15.minusMonths(0);
    int[] var19 = var12.get((org.joda.time.ReadablePartial)var17, 100L);
    org.joda.time.chrono.EthiopicChronology var23 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var24 = var23.hours();
    org.joda.time.LocalTime var25 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var23);
    org.joda.time.Period var26 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var23);
    org.joda.time.DateTimeField var27 = var23.millisOfSecond();
    org.joda.time.DateTimeField var28 = var23.secondOfDay();
    org.joda.time.field.SkipDateTimeField var30 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var12, var28, 100);
    org.joda.time.LocalDateTime var31 = org.joda.time.LocalDateTime.now();
    int var32 = var31.getDayOfYear();
    org.joda.time.Chronology var33 = var31.getChronology();
    int var34 = var31.getYearOfCentury();
    int var35 = var30.getMaximumValue((org.joda.time.ReadablePartial)var31);
    boolean var37 = var30.isLeap(1L);
    org.joda.time.LocalDateTime var38 = org.joda.time.LocalDateTime.now();
    int var39 = var38.getDayOfYear();
    int var40 = var30.getMinimumValue((org.joda.time.ReadablePartial)var38);
    org.joda.time.DurationField var41 = var30.getDurationField();
    org.joda.time.DateTimeFieldType var42 = var30.getType();
    org.joda.time.field.OffsetDateTimeField var46 = new org.joda.time.field.OffsetDateTimeField(var11, var42, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var49 = new org.joda.time.IllegalFieldValueException(var42, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var52 = var3.appendFraction(var42, 33, (-948));
    org.joda.time.chrono.EthiopicChronology var53 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var54 = var53.minutes();
    org.joda.time.DateTimeField var55 = var53.year();
    org.joda.time.DurationField var56 = var53.hours();
    org.joda.time.field.UnsupportedDateTimeField var57 = org.joda.time.field.UnsupportedDateTimeField.getInstance(var42, var56);
    int var58 = var2.indexOf(var42);
    org.joda.time.IllegalFieldValueException var60 = new org.joda.time.IllegalFieldValueException(var42, "8595 seconds");
    org.joda.time.IllegalFieldValueException var64 = new org.joda.time.IllegalFieldValueException(var42, (java.lang.Number)1962, (java.lang.Number)(-1515517290559800L), (java.lang.Number)1377746681334L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == (-1));

  }

  public void test295() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test295"); }


    org.joda.time.chrono.ISOChronology var0 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
    org.joda.time.tz.FixedDateTimeZone var5 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var7 = var5.getOffsetFromLocal(1377742981323L);
    org.joda.time.Chronology var8 = var0.withZone((org.joda.time.DateTimeZone)var5);
    org.joda.time.Partial var9 = new org.joda.time.Partial(var8);
    org.joda.time.DateTimeComparator var10 = org.joda.time.DateTimeComparator.getTimeOnlyInstance();
    org.joda.time.DateTimeFieldType var11 = var10.getUpperLimit();
    org.joda.time.DateTimeComparator var12 = org.joda.time.DateTimeComparator.getInstance(var11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Partial var14 = var9.withField(var11, 12200);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test296() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test296"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    var1.addDays(1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    var1.add((org.joda.time.ReadableDuration)var7);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var7, (org.joda.time.ReadableInstant)var10);
    var11.setYears(3827137);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test297() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test297"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    int var24 = var19.getSecondOfMinute();
    int var25 = var19.getDayOfYear();
    org.joda.time.LocalDateTime.Property var26 = var19.secondOfMinute();
    org.joda.time.LocalDateTime.Property var27 = var19.yearOfEra();
    org.joda.time.LocalTime var28 = var19.toLocalTime();
    org.joda.time.LocalTime var30 = var28.minusHours(269);
    java.lang.String var32 = var28.toString("16");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "16"+ "'", var32.equals("16"));

  }

  public void test298() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test298"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var2.toDateTimeAtMidnight();
    org.joda.time.DateTime var7 = var5.withMillis(100L);
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var8);
    org.joda.time.LocalDate var10 = var9.toLocalDate();
    org.joda.time.DateMidnight var12 = var9.minusWeeks((-1));
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    var15.setWeekOfWeekyear(1);
    int var18 = var15.getRoundingMode();
    var15.addMillis(100);
    var15.setSecondOfMinute(10);
    org.joda.time.PeriodType var23 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var24 = new org.joda.time.Period((org.joda.time.ReadableDuration)var14, (org.joda.time.ReadableInstant)var15, var23);
    org.joda.time.Days var25 = var24.toStandardDays();
    org.joda.time.DurationFieldType var26 = var25.getFieldType();
    org.joda.time.DateMidnight var28 = var12.withFieldAdded(var26, 1);
    org.joda.time.DateMidnight.Property var29 = var12.monthOfYear();
    org.joda.time.Duration var31 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var32 = new org.joda.time.MutableDateTime();
    var32.setWeekOfWeekyear(1);
    int var35 = var32.getRoundingMode();
    var32.addMillis(100);
    var32.setSecondOfMinute(10);
    org.joda.time.PeriodType var40 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var41 = new org.joda.time.Period((org.joda.time.ReadableDuration)var31, (org.joda.time.ReadableInstant)var32, var40);
    org.joda.time.PeriodType var42 = var40.withWeeksRemoved();
    org.joda.time.Period var43 = new org.joda.time.Period((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableInstant)var12, var40);
    org.joda.time.Instant var44 = new org.joda.time.Instant();
    org.joda.time.Instant var45 = var44.toInstant();
    org.joda.time.PeriodType var46 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var47 = new org.joda.time.MutablePeriod(var46);
    var47.addDays(1);
    org.joda.time.Duration var51 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var53 = org.joda.time.Duration.standardHours((-1L));
    boolean var54 = var51.isShorterThan((org.joda.time.ReadableDuration)var53);
    var47.add((org.joda.time.ReadableDuration)var53);
    org.joda.time.Duration var57 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var59 = org.joda.time.Duration.standardHours((-1L));
    boolean var60 = var57.isShorterThan((org.joda.time.ReadableDuration)var59);
    org.joda.time.Duration var61 = var57.toDuration();
    org.joda.time.chrono.JulianChronology var62 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var63 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var62);
    org.joda.time.LocalDate var64 = var63.toLocalDate();
    org.joda.time.MutableDateTime var65 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var66 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var63, (org.joda.time.ReadableInstant)var65);
    org.joda.time.MutableDateTime var67 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var68 = var67.year();
    boolean var69 = var65.isBefore((org.joda.time.ReadableInstant)var67);
    org.joda.time.Duration var71 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var73 = org.joda.time.Duration.standardHours((-1L));
    boolean var74 = var71.isShorterThan((org.joda.time.ReadableDuration)var73);
    org.joda.time.Duration var76 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var78 = org.joda.time.Duration.standardHours((-1L));
    boolean var79 = var76.isShorterThan((org.joda.time.ReadableDuration)var78);
    org.joda.time.Duration var80 = var71.plus((org.joda.time.ReadableDuration)var76);
    var67.add((org.joda.time.ReadableDuration)var76);
    org.joda.time.PeriodType var82 = org.joda.time.PeriodType.months();
    org.joda.time.Period var83 = new org.joda.time.Period((org.joda.time.ReadableDuration)var57, (org.joda.time.ReadableInstant)var67, var82);
    org.joda.time.Period var84 = new org.joda.time.Period((org.joda.time.ReadableInstant)var45, (org.joda.time.ReadableDuration)var53, var82);
    org.joda.time.DateTime var85 = var7.plus((org.joda.time.ReadableDuration)var53);
    org.joda.time.DateTime var87 = var7.minusDays(8400);
    org.joda.time.MutableDateTime var88 = var87.toMutableDateTime();
    org.joda.time.DateMidnight var89 = var87.toDateMidnight();
    int var90 = var87.getMillisOfDay();
    boolean var91 = var87.isBeforeNow();
    org.joda.time.DateTime var92 = var87.withLaterOffsetAtOverlap();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 200);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);

  }

  public void test299() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test299"); }


    org.joda.time.MutableInterval var0 = new org.joda.time.MutableInterval();
    long var1 = var0.getEndMillis();
    org.joda.time.Interval var2 = var0.toInterval();
    org.joda.time.DateTime var3 = org.joda.time.DateTime.now();
    org.joda.time.DateTime var5 = var3.withMillis(0L);
    org.joda.time.DateTime var7 = var3.minusMonths(33);
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var8);
    org.joda.time.LocalDate var10 = var9.toLocalDate();
    org.joda.time.LocalDate var12 = var10.minusMonths(0);
    org.joda.time.DateTime var13 = var10.toDateTimeAtMidnight();
    org.joda.time.DateTime var15 = var13.withMillis(100L);
    int var16 = var13.getWeekyear();
    org.joda.time.DateTime var18 = var13.withYear(86399);
    org.joda.time.DateTime.Property var19 = var18.year();
    org.joda.time.Hours var20 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadableInstant)var3, (org.joda.time.ReadableInstant)var18);
    boolean var21 = var0.isAfter((org.joda.time.ReadableInstant)var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1969);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test300() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test300"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    long var26 = var18.addWrapField(1377746581334L, 100);
    org.joda.time.DurationField var27 = var18.getRangeDurationField();
    org.joda.time.chrono.JulianChronology var28 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var29 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var28);
    org.joda.time.DateMidnight var31 = var29.plusDays(2013);
    org.joda.time.chrono.JulianChronology var32 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var33 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var32);
    org.joda.time.LocalDate var34 = var33.toLocalDate();
    org.joda.time.DateMidnight var36 = var33.minusWeeks((-1));
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var39 = new org.joda.time.MutableDateTime();
    var39.setWeekOfWeekyear(1);
    int var42 = var39.getRoundingMode();
    var39.addMillis(100);
    var39.setSecondOfMinute(10);
    org.joda.time.PeriodType var47 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var48 = new org.joda.time.Period((org.joda.time.ReadableDuration)var38, (org.joda.time.ReadableInstant)var39, var47);
    org.joda.time.Days var49 = var48.toStandardDays();
    org.joda.time.DurationFieldType var50 = var49.getFieldType();
    org.joda.time.DateMidnight var52 = var36.withFieldAdded(var50, 1);
    org.joda.time.field.PreciseDurationField var54 = new org.joda.time.field.PreciseDurationField(var50, 1L);
    org.joda.time.DateMidnight var56 = var31.withFieldAdded(var50, 228);
    org.joda.time.field.DecoratedDurationField var57 = new org.joda.time.field.DecoratedDurationField(var27, var50);
    long var60 = var57.add(1377768182707L, 100L);
    boolean var61 = var57.isPrecise();
    long var62 = var57.getUnitMillis();
    long var65 = var57.getDifferenceAsLong((-1000L), 1377768182707L);
    org.joda.time.DurationField var66 = var57.getWrappedField();
    long var69 = var57.getValueAsLong(1377769560460016L, 1377768182707L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1377746681334L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1386408182707L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 86400000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == (-15946L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 15946406L);

  }

  public void test301() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test301"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    int var25 = var18.get(1377746594064L);
    int var27 = var18.getLeapAmount(2755499466141L);
    org.joda.time.chrono.EthiopicChronology var29 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var30 = var29.hours();
    org.joda.time.DateTimeField var31 = var29.minuteOfHour();
    org.joda.time.LocalDate var32 = new org.joda.time.LocalDate(1L, (org.joda.time.Chronology)var29);
    org.joda.time.LocalDate.Property var33 = var32.weekyear();
    org.joda.time.LocalDate.Property var34 = var32.dayOfMonth();
    org.joda.time.chrono.JulianChronology var35 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var36 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var35);
    org.joda.time.LocalDate var37 = var36.toLocalDate();
    org.joda.time.DateMidnight var39 = var36.minusWeeks((-1));
    org.joda.time.Duration var41 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var42 = new org.joda.time.MutableDateTime();
    var42.setWeekOfWeekyear(1);
    int var45 = var42.getRoundingMode();
    var42.addMillis(100);
    var42.setSecondOfMinute(10);
    org.joda.time.PeriodType var50 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var51 = new org.joda.time.Period((org.joda.time.ReadableDuration)var41, (org.joda.time.ReadableInstant)var42, var50);
    org.joda.time.Days var52 = var51.toStandardDays();
    org.joda.time.DurationFieldType var53 = var52.getFieldType();
    org.joda.time.DateMidnight var55 = var39.withFieldAdded(var53, 1);
    org.joda.time.chrono.JulianChronology var56 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var57 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var56);
    org.joda.time.LocalDate var58 = var57.toLocalDate();
    org.joda.time.DateMidnight var60 = var57.minusWeeks((-1));
    org.joda.time.Duration var62 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var63 = new org.joda.time.MutableDateTime();
    var63.setWeekOfWeekyear(1);
    int var66 = var63.getRoundingMode();
    var63.addMillis(100);
    var63.setSecondOfMinute(10);
    org.joda.time.PeriodType var71 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var72 = new org.joda.time.Period((org.joda.time.ReadableDuration)var62, (org.joda.time.ReadableInstant)var63, var71);
    org.joda.time.Days var73 = var72.toStandardDays();
    org.joda.time.DurationFieldType var74 = var73.getFieldType();
    org.joda.time.DateMidnight var76 = var60.withFieldAdded(var74, 1);
    org.joda.time.DateMidnight var78 = var39.withFieldAdded(var74, 13);
    org.joda.time.IllegalFieldValueException var82 = new org.joda.time.IllegalFieldValueException(var74, (java.lang.Number)(-1), (java.lang.Number)(short)(-1), (java.lang.Number)0);
    org.joda.time.LocalDate var84 = var32.withFieldAdded(var74, 13);
    int var85 = var18.getMinimumValue((org.joda.time.ReadablePartial)var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 12194);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 0);

  }

  public void test302() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test302"); }


    org.joda.time.Period var1 = org.joda.time.Period.years(35);
    org.joda.time.Period var3 = var1.minusMillis(630);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test303() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test303"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.chrono.JulianChronology var21 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var22 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var21);
    org.joda.time.LocalDate var23 = var22.toLocalDate();
    org.joda.time.DateMidnight var25 = var22.minusWeeks((-1));
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var28 = new org.joda.time.MutableDateTime();
    var28.setWeekOfWeekyear(1);
    int var31 = var28.getRoundingMode();
    var28.addMillis(100);
    var28.setSecondOfMinute(10);
    org.joda.time.PeriodType var36 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var37 = new org.joda.time.Period((org.joda.time.ReadableDuration)var27, (org.joda.time.ReadableInstant)var28, var36);
    org.joda.time.Days var38 = var37.toStandardDays();
    org.joda.time.DurationFieldType var39 = var38.getFieldType();
    org.joda.time.DateMidnight var41 = var25.withFieldAdded(var39, 1);
    org.joda.time.DateMidnight var43 = var4.withFieldAdded(var39, 13);
    org.joda.time.DateMidnight var46 = var4.withDurationAdded(9L, 21);
    org.joda.time.DateMidnight.Property var47 = var46.dayOfMonth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test304() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test304"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.LocalDateTime var3 = var0.minusSeconds(2005);
    org.joda.time.LocalDateTime var5 = var0.plusMillis(23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test305() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test305"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    var0.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var4 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var3);
    org.joda.time.LocalDate var5 = var4.toLocalDate();
    org.joda.time.DateMidnight var7 = var4.minusWeeks((-1));
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    var10.setWeekOfWeekyear(1);
    int var13 = var10.getRoundingMode();
    var10.addMillis(100);
    var10.setSecondOfMinute(10);
    org.joda.time.PeriodType var18 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var19 = new org.joda.time.Period((org.joda.time.ReadableDuration)var9, (org.joda.time.ReadableInstant)var10, var18);
    org.joda.time.Days var20 = var19.toStandardDays();
    org.joda.time.DurationFieldType var21 = var20.getFieldType();
    org.joda.time.DateMidnight var23 = var7.withFieldAdded(var21, 1);
    org.joda.time.MutableInterval var24 = new org.joda.time.MutableInterval();
    org.joda.time.MutableInterval var25 = var24.copy();
    org.joda.time.DateTime var26 = var25.getStart();
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var30 = org.joda.time.Duration.standardHours((-1L));
    boolean var31 = var28.isShorterThan((org.joda.time.ReadableDuration)var30);
    org.joda.time.Duration var32 = var28.toDuration();
    org.joda.time.chrono.JulianChronology var33 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var34 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var33);
    org.joda.time.LocalDate var35 = var34.toLocalDate();
    org.joda.time.MutableDateTime var36 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var37 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var34, (org.joda.time.ReadableInstant)var36);
    org.joda.time.MutableDateTime var38 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var39 = var38.year();
    boolean var40 = var36.isBefore((org.joda.time.ReadableInstant)var38);
    org.joda.time.Duration var42 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var44 = org.joda.time.Duration.standardHours((-1L));
    boolean var45 = var42.isShorterThan((org.joda.time.ReadableDuration)var44);
    org.joda.time.Duration var47 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var49 = org.joda.time.Duration.standardHours((-1L));
    boolean var50 = var47.isShorterThan((org.joda.time.ReadableDuration)var49);
    org.joda.time.Duration var51 = var42.plus((org.joda.time.ReadableDuration)var47);
    var38.add((org.joda.time.ReadableDuration)var47);
    org.joda.time.PeriodType var53 = org.joda.time.PeriodType.months();
    org.joda.time.Period var54 = new org.joda.time.Period((org.joda.time.ReadableDuration)var28, (org.joda.time.ReadableInstant)var38, var53);
    org.joda.time.MutablePeriod var55 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableInstant)var26, var53);
    org.joda.time.DateMidnight var57 = var7.withYear(33);
    org.joda.time.MutablePeriod var58 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant)var0, (org.joda.time.ReadableInstant)var7);
    var0.setYear(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test306() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test306"); }


    org.joda.time.chrono.BuddhistChronology var0 = org.joda.time.chrono.BuddhistChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.secondOfDay();
    org.joda.time.Chronology var2 = var0.withUTC();
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var5 = var4.hours();
    org.joda.time.LocalTime var6 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var4);
    boolean var7 = var0.equals((java.lang.Object)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test307() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test307"); }


    org.joda.time.YearMonth var1 = org.joda.time.YearMonth.parse("2013-08-16");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.YearMonth var3 = var1.withMonthOfYear(1962);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test308() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test308"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    org.joda.time.format.DateTimeFormatterBuilder var3 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var5 = var3.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var7 = var3.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var8);
    org.joda.time.LocalDate var10 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var8);
    org.joda.time.DateTimeField var11 = var8.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var12 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var14 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var13);
    org.joda.time.LocalDate var15 = var14.toLocalDate();
    org.joda.time.LocalDate var17 = var15.minusMonths(0);
    int[] var19 = var12.get((org.joda.time.ReadablePartial)var17, 100L);
    org.joda.time.chrono.EthiopicChronology var23 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var24 = var23.hours();
    org.joda.time.LocalTime var25 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var23);
    org.joda.time.Period var26 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var23);
    org.joda.time.DateTimeField var27 = var23.millisOfSecond();
    org.joda.time.DateTimeField var28 = var23.secondOfDay();
    org.joda.time.field.SkipDateTimeField var30 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var12, var28, 100);
    org.joda.time.LocalDateTime var31 = org.joda.time.LocalDateTime.now();
    int var32 = var31.getDayOfYear();
    org.joda.time.Chronology var33 = var31.getChronology();
    int var34 = var31.getYearOfCentury();
    int var35 = var30.getMaximumValue((org.joda.time.ReadablePartial)var31);
    boolean var37 = var30.isLeap(1L);
    org.joda.time.LocalDateTime var38 = org.joda.time.LocalDateTime.now();
    int var39 = var38.getDayOfYear();
    int var40 = var30.getMinimumValue((org.joda.time.ReadablePartial)var38);
    org.joda.time.DurationField var41 = var30.getDurationField();
    org.joda.time.DateTimeFieldType var42 = var30.getType();
    org.joda.time.field.OffsetDateTimeField var46 = new org.joda.time.field.OffsetDateTimeField(var11, var42, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var49 = new org.joda.time.IllegalFieldValueException(var42, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var52 = var3.appendFraction(var42, 33, (-948));
    org.joda.time.chrono.EthiopicChronology var53 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var54 = var53.minutes();
    org.joda.time.DateTimeField var55 = var53.year();
    org.joda.time.DurationField var56 = var53.hours();
    org.joda.time.field.UnsupportedDateTimeField var57 = org.joda.time.field.UnsupportedDateTimeField.getInstance(var42, var56);
    int var58 = var2.indexOf(var42);
    org.joda.time.LocalDate var59 = var2.toLocalDate();
    java.lang.String var60 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "1962-04-23"+ "'", var60.equals("1962-04-23"));

  }

  public void test309() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test309"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    org.joda.time.Period var7 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var9 = var7.plusSeconds(100);
    org.joda.time.Period var11 = var7.minusMillis(10);
    org.joda.time.LocalDateTime var12 = var0.plus((org.joda.time.ReadablePeriod)var11);
    org.joda.time.Weeks var13 = var11.toStandardWeeks();
    org.joda.time.Period var15 = var11.plusMinutes(44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test310() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test310"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var2.toDateTimeAtMidnight();
    int var6 = var5.getHourOfDay();
    org.joda.time.DateTime var8 = var5.minusMonths(104);
    org.joda.time.Duration var11 = new org.joda.time.Duration(99L, (-1L));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MutableInterval var12 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableDuration)var11);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test311() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test311"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var24 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var23);
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var26 = var25.year();
    boolean var27 = var23.isBefore((org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var28 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var29 = var28.toInterval();
    org.joda.time.Partial var30 = new org.joda.time.Partial();
    java.lang.String var31 = var30.toString();
    org.joda.time.PeriodType var32 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var33 = new org.joda.time.MutablePeriod(var32);
    org.joda.time.DurationFieldType[] var34 = var33.getFieldTypes();
    org.joda.time.Partial var35 = var30.plus((org.joda.time.ReadablePeriod)var33);
    org.joda.time.Interval var36 = var29.withPeriodAfterStart((org.joda.time.ReadablePeriod)var33);
    org.joda.time.chrono.JulianChronology var37 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var38 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var37);
    org.joda.time.LocalDate var39 = var38.toLocalDate();
    org.joda.time.MutableDateTime var40 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var41 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var38, (org.joda.time.ReadableInstant)var40);
    org.joda.time.MutableDateTime var42 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var43 = var42.year();
    boolean var44 = var40.isBefore((org.joda.time.ReadableInstant)var42);
    org.joda.time.Duration var46 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var47 = new org.joda.time.MutableDateTime();
    var47.setWeekOfWeekyear(1);
    int var50 = var47.getRoundingMode();
    var47.addMillis(100);
    var47.setSecondOfMinute(10);
    org.joda.time.PeriodType var55 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var56 = new org.joda.time.Period((org.joda.time.ReadableDuration)var46, (org.joda.time.ReadableInstant)var47, var55);
    org.joda.time.Days var57 = var56.toStandardDays();
    org.joda.time.Duration var58 = var57.toStandardDuration();
    org.joda.time.MutableInterval var59 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant)var42, (org.joda.time.ReadablePeriod)var57);
    boolean var60 = var36.overlaps((org.joda.time.ReadableInterval)var59);
    org.joda.time.Period var61 = var59.toPeriod();
    org.joda.time.DateTime var62 = var59.getStart();
    org.joda.time.chrono.JulianChronology var63 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var64 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var63);
    org.joda.time.LocalDate var65 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var63);
    org.joda.time.DurationField var66 = var63.hours();
    org.joda.time.Chronology var67 = var63.withUTC();
    org.joda.time.chrono.JulianChronology var68 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var69 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var68);
    org.joda.time.LocalDate var70 = var69.toLocalDate();
    org.joda.time.MutableDateTime var71 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var72 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var69, (org.joda.time.ReadableInstant)var71);
    org.joda.time.MutableDateTime var73 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var74 = var73.year();
    boolean var75 = var71.isBefore((org.joda.time.ReadableInstant)var73);
    org.joda.time.Duration var77 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var79 = org.joda.time.Duration.standardHours((-1L));
    boolean var80 = var77.isShorterThan((org.joda.time.ReadableDuration)var79);
    org.joda.time.Duration var82 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var84 = org.joda.time.Duration.standardHours((-1L));
    boolean var85 = var82.isShorterThan((org.joda.time.ReadableDuration)var84);
    org.joda.time.Duration var86 = var77.plus((org.joda.time.ReadableDuration)var82);
    var73.add((org.joda.time.ReadableDuration)var82);
    org.joda.time.chrono.JulianChronology var88 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var89 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var88);
    org.joda.time.LocalDate var90 = var89.toLocalDate();
    org.joda.time.MutableDateTime var91 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var92 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var89, (org.joda.time.ReadableInstant)var91);
    org.joda.time.MutableDateTime var93 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var94 = var93.year();
    boolean var95 = var91.isBefore((org.joda.time.ReadableInstant)var93);
    org.joda.time.Interval var96 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var73, (org.joda.time.ReadableInstant)var93);
    org.joda.time.DateTimeZone var97 = var93.getZone();
    org.joda.time.Chronology var98 = var63.withZone(var97);
    org.joda.time.DateTime var99 = var62.toDateTime(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "[]"+ "'", var31.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var99);

  }

  public void test312() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test312"); }


    org.joda.time.DateTime var0 = org.joda.time.DateTime.now();
    long var1 = var0.getMillis();
    boolean var3 = var0.isEqual(1377754981948L);
    org.joda.time.DateTime.Property var4 = var0.yearOfEra();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test313() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test313"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var24 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var23);
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var26 = var25.year();
    boolean var27 = var23.isBefore((org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var28 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var25);
    boolean var30 = var28.isAfter(10L);
    org.joda.time.MutableDateTime var31 = new org.joda.time.MutableDateTime();
    var31.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var34 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var31.setChronology((org.joda.time.Chronology)var34);
    org.joda.time.Interval var36 = var28.withChronology((org.joda.time.Chronology)var34);
    org.joda.time.Weeks var37 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval)var36);
    org.joda.time.Interval var38 = var36.toInterval();
    org.joda.time.chrono.JulianChronology var39 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var40 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var39);
    org.joda.time.LocalDate var41 = var40.toLocalDate();
    org.joda.time.MutableDateTime var42 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var43 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var40, (org.joda.time.ReadableInstant)var42);
    org.joda.time.MutableDateTime var44 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var45 = var44.year();
    boolean var46 = var42.isBefore((org.joda.time.ReadableInstant)var44);
    org.joda.time.Duration var48 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var50 = org.joda.time.Duration.standardHours((-1L));
    boolean var51 = var48.isShorterThan((org.joda.time.ReadableDuration)var50);
    org.joda.time.Duration var53 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var55 = org.joda.time.Duration.standardHours((-1L));
    boolean var56 = var53.isShorterThan((org.joda.time.ReadableDuration)var55);
    org.joda.time.Duration var57 = var48.plus((org.joda.time.ReadableDuration)var53);
    var44.add((org.joda.time.ReadableDuration)var53);
    org.joda.time.chrono.JulianChronology var59 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var60 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var59);
    org.joda.time.LocalDate var61 = var60.toLocalDate();
    org.joda.time.MutableDateTime var62 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var63 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var60, (org.joda.time.ReadableInstant)var62);
    org.joda.time.MutableDateTime var64 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var65 = var64.year();
    boolean var66 = var62.isBefore((org.joda.time.ReadableInstant)var64);
    org.joda.time.Interval var67 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var44, (org.joda.time.ReadableInstant)var64);
    boolean var68 = var67.isBeforeNow();
    org.joda.time.Duration var69 = var67.toDuration();
    org.joda.time.Interval var70 = var38.withDurationAfterStart((org.joda.time.ReadableDuration)var69);
    org.joda.time.MutableInterval var71 = var38.toMutableInterval();
    java.lang.Object var72 = var71.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test314() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test314"); }


    org.joda.time.Months var1 = org.joda.time.Months.months(17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test315() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test315"); }


    org.joda.time.Years var1 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var2 = var1.getPeriodType();
    org.joda.time.Years var4 = org.joda.time.Years.years((-1));
    int var5 = var1.compareTo((org.joda.time.base.BaseSingleFieldPeriod)var4);
    org.joda.time.MutablePeriod var6 = var4.toMutablePeriod();
    org.joda.time.chrono.JulianChronology var7 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var8 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var7);
    org.joda.time.LocalDate var9 = var8.toLocalDate();
    org.joda.time.LocalDate var11 = var9.minusMonths(0);
    org.joda.time.DateTime var12 = var9.toDateTimeAtMidnight();
    org.joda.time.DateTime var14 = var12.withMillis(100L);
    org.joda.time.chrono.JulianChronology var15 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var16 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var15);
    org.joda.time.LocalDate var17 = var16.toLocalDate();
    org.joda.time.DateMidnight var19 = var16.minusWeeks((-1));
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var22 = new org.joda.time.MutableDateTime();
    var22.setWeekOfWeekyear(1);
    int var25 = var22.getRoundingMode();
    var22.addMillis(100);
    var22.setSecondOfMinute(10);
    org.joda.time.PeriodType var30 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var31 = new org.joda.time.Period((org.joda.time.ReadableDuration)var21, (org.joda.time.ReadableInstant)var22, var30);
    org.joda.time.Days var32 = var31.toStandardDays();
    org.joda.time.DurationFieldType var33 = var32.getFieldType();
    org.joda.time.DateMidnight var35 = var19.withFieldAdded(var33, 1);
    org.joda.time.DateMidnight.Property var36 = var19.monthOfYear();
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var39 = new org.joda.time.MutableDateTime();
    var39.setWeekOfWeekyear(1);
    int var42 = var39.getRoundingMode();
    var39.addMillis(100);
    var39.setSecondOfMinute(10);
    org.joda.time.PeriodType var47 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var48 = new org.joda.time.Period((org.joda.time.ReadableDuration)var38, (org.joda.time.ReadableInstant)var39, var47);
    org.joda.time.PeriodType var49 = var47.withWeeksRemoved();
    org.joda.time.Period var50 = new org.joda.time.Period((org.joda.time.ReadableInstant)var14, (org.joda.time.ReadableInstant)var19, var47);
    org.joda.time.Duration var51 = var6.toDurationTo((org.joda.time.ReadableInstant)var14);
    int var52 = var14.getDayOfYear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 353);

  }

  public void test316() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test316"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    int var3 = var0.getYearOfCentury();
    int var4 = var0.getMonthOfYear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);

  }

  public void test317() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test317"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var5 = var0.appendYear(23, 8);
    org.joda.time.format.DateTimeFormatterBuilder var8 = var5.appendFractionOfSecond(21, 51);
    org.joda.time.format.DateTimeFormatterBuilder var10 = var8.appendTwoDigitWeekyear(9);
    org.joda.time.format.DateTimeFormatterBuilder var12 = var8.appendWeekOfWeekyear(15795333);
    boolean var13 = var8.canBuildFormatter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);

  }

  public void test318() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test318"); }


    org.joda.time.DateTimeZone var1 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.YearMonth var2 = new org.joda.time.YearMonth(var1);
    org.joda.time.chrono.IslamicChronology var3 = org.joda.time.chrono.IslamicChronology.getInstance(var1);
    org.joda.time.Chronology var4 = var3.withUTC();
    org.joda.time.DateTimeZone var6 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.DateTimeZone var7 = org.joda.time.DateTimeUtils.getZone(var6);
    org.joda.time.Chronology var8 = var3.withZone(var6);
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate var14 = var12.minusMonths(0);
    int[] var16 = var9.get((org.joda.time.ReadablePartial)var14, 100L);
    org.joda.time.chrono.EthiopicChronology var20 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var21 = var20.hours();
    org.joda.time.LocalTime var22 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var20);
    org.joda.time.Period var23 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var20);
    org.joda.time.DateTimeField var24 = var20.millisOfSecond();
    org.joda.time.DateTimeField var25 = var20.secondOfDay();
    org.joda.time.field.SkipDateTimeField var27 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var9, var25, 100);
    org.joda.time.DurationField var28 = var27.getRangeDurationField();
    java.lang.String var29 = var27.toString();
    int var30 = var27.getMinimumValue();
    org.joda.time.field.OffsetDateTimeField var32 = new org.joda.time.field.OffsetDateTimeField((org.joda.time.DateTimeField)var27, 2005);
    java.lang.String var34 = var32.getAsShortText(104L);
    int var37 = var32.getDifference(1377746580759L, 1377746593932L);
    org.joda.time.field.SkipUndoDateTimeField var39 = new org.joda.time.field.SkipUndoDateTimeField(var8, (org.joda.time.DateTimeField)var32, 51);
    org.joda.time.field.DelegatedDateTimeField var40 = new org.joda.time.field.DelegatedDateTimeField((org.joda.time.DateTimeField)var32);
    long var42 = var32.roundFloor(1377746598594L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "DateTimeField[secondOfDay]"+ "'", var29.equals("DateTimeField[secondOfDay]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "2004"+ "'", var34.equals("2004"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == (-13));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1377746597900L);

  }

  public void test319() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test319"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    org.joda.time.YearMonthDay var4 = var2.plusYears(13);
    org.joda.time.DateTimeZone var6 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.Interval var7 = var2.toInterval(var6);
    org.joda.time.LocalDate var8 = var2.toLocalDate();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test320() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test320"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    boolean var25 = var18.isLeap(1L);
    boolean var26 = var18.isSupported();
    long var29 = var18.add(1377768182707035L, 10L);
    org.joda.time.DurationField var30 = var18.getRangeDurationField();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1377768182717035L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test321() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test321"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.Period var6 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var8 = var6.plusSeconds(100);
    org.joda.time.Period var10 = var6.minusMillis(10);
    boolean var11 = var1.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var12 = var1.dayOfYear();
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var14 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var13);
    org.joda.time.LocalDate var15 = var14.toLocalDate();
    org.joda.time.LocalDate var17 = var15.minusMonths(0);
    org.joda.time.DateTime var18 = var15.toDateTimeAtMidnight();
    org.joda.time.DateTime var20 = var18.withCenturyOfEra(4);
    org.joda.time.Days var21 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var20);
    org.joda.time.DateMidnight var23 = var1.plusMonths(10);
    org.joda.time.DateTimeZone var25 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.MutableDateTime var26 = org.joda.time.MutableDateTime.now(var25);
    org.joda.time.DateMidnight var27 = var1.withZoneRetainFields(var25);
    org.joda.time.chrono.EthiopicChronology var28 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var29 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var30 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var29);
    org.joda.time.LocalDate var31 = var30.toLocalDate();
    org.joda.time.LocalDate var33 = var31.minusMonths(0);
    int[] var35 = var28.get((org.joda.time.ReadablePartial)var33, 100L);
    org.joda.time.chrono.EthiopicChronology var39 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var40 = var39.hours();
    org.joda.time.LocalTime var41 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var39);
    org.joda.time.Period var42 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var39);
    org.joda.time.DateTimeField var43 = var39.millisOfSecond();
    org.joda.time.DateTimeField var44 = var39.secondOfDay();
    org.joda.time.field.SkipDateTimeField var46 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var28, var44, 100);
    org.joda.time.DurationField var47 = var46.getRangeDurationField();
    java.lang.String var48 = var46.toString();
    int var49 = var46.getMinimumValue();
    int var50 = var27.get((org.joda.time.DateTimeField)var46);
    int var52 = var46.get(1377746593922L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "DateTimeField[secondOfDay]"+ "'", var48.equals("DateTimeField[secondOfDay]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 12194);

  }

  public void test322() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test322"); }


    org.joda.time.chrono.BuddhistChronology var0 = org.joda.time.chrono.BuddhistChronology.getInstance();
    java.lang.String var1 = var0.toString();
    org.joda.time.DateTimeZone var2 = var0.getZone();
    org.joda.time.DateTimeField var3 = var0.halfdayOfDay();
    org.joda.time.DateMidnight var4 = new org.joda.time.DateMidnight((org.joda.time.Chronology)var0);
    boolean var5 = var4.isAfterNow();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "BuddhistChronology[PT0H]"+ "'", var1.equals("BuddhistChronology[PT0H]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test323() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test323"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.Period var6 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var8 = var6.plusSeconds(100);
    org.joda.time.Period var10 = var6.minusMillis(10);
    boolean var11 = var1.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var12 = var1.dayOfYear();
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var14 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var13);
    org.joda.time.LocalDate var15 = var14.toLocalDate();
    org.joda.time.LocalDate var17 = var15.minusMonths(0);
    org.joda.time.DateTime var18 = var15.toDateTimeAtMidnight();
    org.joda.time.DateTime var20 = var18.withCenturyOfEra(4);
    org.joda.time.Days var21 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var20);
    org.joda.time.chrono.EthiopicChronology var23 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var24 = var23.hours();
    org.joda.time.LocalTime var25 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var23);
    org.joda.time.LocalTime var27 = var25.withMillisOfSecond(1);
    org.joda.time.LocalTime var28 = org.joda.time.LocalTime.now();
    boolean var29 = var27.isAfter((org.joda.time.ReadablePartial)var28);
    org.joda.time.chrono.JulianChronology var30 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var31 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var30);
    org.joda.time.LocalDate var32 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var30);
    org.joda.time.DurationField var33 = var30.hours();
    boolean var34 = var28.equals((java.lang.Object)var30);
    org.joda.time.Duration var36 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var37 = new org.joda.time.MutableDateTime();
    var37.setWeekOfWeekyear(1);
    int var40 = var37.getRoundingMode();
    var37.addMillis(100);
    var37.setSecondOfMinute(10);
    org.joda.time.PeriodType var45 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var46 = new org.joda.time.Period((org.joda.time.ReadableDuration)var36, (org.joda.time.ReadableInstant)var37, var45);
    org.joda.time.Days var47 = var46.toStandardDays();
    org.joda.time.LocalTime var48 = var28.minus((org.joda.time.ReadablePeriod)var46);
    org.joda.time.DateMidnight var49 = var1.plus((org.joda.time.ReadablePeriod)var46);
    org.joda.time.DateMidnight var51 = var1.plus(1L);
    org.joda.time.DateMidnight.Property var52 = var51.monthOfYear();
    org.joda.time.DateTimeZone var53 = var51.getZone();
    org.joda.time.YearMonth var54 = org.joda.time.YearMonth.now(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test324() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test324"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.format.DateTimeFormatterBuilder var5 = var4.appendTimeZoneId();
    org.joda.time.format.DateTimeFormatterBuilder var6 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var8 = var6.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var10 = var6.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var11 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var12 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var11);
    org.joda.time.LocalDate var13 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var14 = var11.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var15 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var16 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var17 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var16);
    org.joda.time.LocalDate var18 = var17.toLocalDate();
    org.joda.time.LocalDate var20 = var18.minusMonths(0);
    int[] var22 = var15.get((org.joda.time.ReadablePartial)var20, 100L);
    org.joda.time.chrono.EthiopicChronology var26 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var27 = var26.hours();
    org.joda.time.LocalTime var28 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var26);
    org.joda.time.Period var29 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var26);
    org.joda.time.DateTimeField var30 = var26.millisOfSecond();
    org.joda.time.DateTimeField var31 = var26.secondOfDay();
    org.joda.time.field.SkipDateTimeField var33 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var15, var31, 100);
    org.joda.time.LocalDateTime var34 = org.joda.time.LocalDateTime.now();
    int var35 = var34.getDayOfYear();
    org.joda.time.Chronology var36 = var34.getChronology();
    int var37 = var34.getYearOfCentury();
    int var38 = var33.getMaximumValue((org.joda.time.ReadablePartial)var34);
    boolean var40 = var33.isLeap(1L);
    org.joda.time.LocalDateTime var41 = org.joda.time.LocalDateTime.now();
    int var42 = var41.getDayOfYear();
    int var43 = var33.getMinimumValue((org.joda.time.ReadablePartial)var41);
    org.joda.time.DurationField var44 = var33.getDurationField();
    org.joda.time.DateTimeFieldType var45 = var33.getType();
    org.joda.time.field.OffsetDateTimeField var49 = new org.joda.time.field.OffsetDateTimeField(var14, var45, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var52 = new org.joda.time.IllegalFieldValueException(var45, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var55 = var6.appendFraction(var45, 33, (-948));
    org.joda.time.format.DateTimeFormatterBuilder var56 = var5.appendText(var45);
    org.joda.time.format.DateTimeFormatterBuilder var57 = var5.appendDayOfWeekText();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test325() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test325"); }


    org.joda.time.Instant var0 = new org.joda.time.Instant();
    org.joda.time.Instant var1 = var0.toInstant();
    org.joda.time.Duration var3 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    boolean var6 = var3.isShorterThan((org.joda.time.ReadableDuration)var5);
    org.joda.time.Duration var8 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var10 = org.joda.time.Duration.standardHours((-1L));
    boolean var11 = var8.isShorterThan((org.joda.time.ReadableDuration)var10);
    org.joda.time.Duration var12 = var3.plus((org.joda.time.ReadableDuration)var8);
    org.joda.time.Instant var14 = var1.withDurationAdded((org.joda.time.ReadableDuration)var3, 1);
    org.joda.time.Duration var17 = new org.joda.time.Duration(99L, (-1L));
    org.joda.time.Instant var18 = var14.minus((org.joda.time.ReadableDuration)var17);
    org.joda.time.Duration var20 = var17.plus(1377746598382L);
    org.joda.time.chrono.EthiopicChronology var22 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var23 = var22.hours();
    org.joda.time.DateMidnight var24 = new org.joda.time.DateMidnight(9L, (org.joda.time.Chronology)var22);
    org.joda.time.MutableInterval var25 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration)var20, (org.joda.time.ReadableInstant)var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test326() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test326"); }


    org.joda.time.TimeOfDay var0 = new org.joda.time.TimeOfDay();
    int var1 = var0.size();
    org.joda.time.TimeOfDay var3 = var0.withMillisOfSecond(1);
    org.joda.time.Years var5 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var6 = var5.getPeriodType();
    org.joda.time.Years var8 = org.joda.time.Years.years((-1));
    int var9 = var5.compareTo((org.joda.time.base.BaseSingleFieldPeriod)var8);
    org.joda.time.Years var11 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var12 = var11.getPeriodType();
    org.joda.time.Years var13 = var8.minus(var11);
    org.joda.time.TimeOfDay var14 = var3.minus((org.joda.time.ReadablePeriod)var8);
    org.joda.time.TimeOfDay var16 = var3.plusMinutes(13);
    int var17 = var16.size();
    org.joda.time.format.DateTimeFormatter var18 = org.joda.time.format.ISODateTimeFormat.tTimeNoMillis();
    org.joda.time.chrono.EthiopicChronology var19 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.LocalDate var24 = var22.minusMonths(0);
    int[] var26 = var19.get((org.joda.time.ReadablePartial)var24, 100L);
    org.joda.time.chrono.EthiopicChronology var30 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var31 = var30.hours();
    org.joda.time.LocalTime var32 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var30);
    org.joda.time.Period var33 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var30);
    org.joda.time.DateTimeField var34 = var30.millisOfSecond();
    org.joda.time.DateTimeField var35 = var30.secondOfDay();
    org.joda.time.field.SkipDateTimeField var37 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var19, var35, 100);
    org.joda.time.LocalDateTime var38 = org.joda.time.LocalDateTime.now();
    int var39 = var38.getDayOfYear();
    org.joda.time.Chronology var40 = var38.getChronology();
    int var41 = var38.getYearOfCentury();
    int var42 = var37.getMaximumValue((org.joda.time.ReadablePartial)var38);
    int var43 = var38.getSecondOfMinute();
    org.joda.time.LocalDateTime var45 = var38.plusSeconds(228);
    org.joda.time.LocalDateTime var47 = var45.minusHours(16);
    org.joda.time.LocalDateTime.Property var48 = var47.centuryOfEra();
    org.joda.time.LocalDateTime var50 = var47.withYear((-22));
    java.lang.String var51 = var18.print((org.joda.time.ReadablePartial)var47);
    java.lang.String var52 = var16.toString(var18);
    boolean var53 = var18.isPrinter();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "T08:03:48"+ "'", var51.equals("T08:03:48"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "T00:13:00"+ "'", var52.equals("T00:13:00"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);

  }

  public void test327() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test327"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    boolean var25 = var18.isLeap(1L);
    org.joda.time.LocalDateTime var26 = org.joda.time.LocalDateTime.now();
    int var27 = var26.getDayOfYear();
    int var28 = var18.getMinimumValue((org.joda.time.ReadablePartial)var26);
    org.joda.time.Duration var30 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var31 = new org.joda.time.MutableDateTime();
    var31.setWeekOfWeekyear(1);
    int var34 = var31.getRoundingMode();
    var31.addMillis(100);
    var31.setSecondOfMinute(10);
    org.joda.time.PeriodType var39 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var40 = new org.joda.time.Period((org.joda.time.ReadableDuration)var30, (org.joda.time.ReadableInstant)var31, var39);
    org.joda.time.Days var41 = var40.toStandardDays();
    org.joda.time.DurationFieldType var42 = var41.getFieldType();
    org.joda.time.LocalDateTime var44 = var26.withFieldAdded(var42, 100);
    org.joda.time.LocalDateTime var46 = var44.withCenturyOfEra(28);
    org.joda.time.LocalDateTime.Property var47 = var44.weekOfWeekyear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test328() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test328"); }


    org.joda.time.MonthDay var0 = new org.joda.time.MonthDay();
    org.joda.time.LocalDate var2 = var0.toLocalDate(14400001);
    org.joda.time.LocalDate var4 = var2.plusWeeks(51);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDate var6 = var4.withMonthOfYear(55);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test329() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test329"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    int var5 = var2.getRoundingMode();
    var2.addMillis(100);
    var2.setSecondOfMinute(10);
    org.joda.time.PeriodType var10 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var11 = new org.joda.time.Period((org.joda.time.ReadableDuration)var1, (org.joda.time.ReadableInstant)var2, var10);
    org.joda.time.DateTime var12 = org.joda.time.DateTime.now();
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var14 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var13);
    org.joda.time.LocalDate var15 = var14.toLocalDate();
    org.joda.time.MutableDateTime var16 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var17 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var14, (org.joda.time.ReadableInstant)var16);
    org.joda.time.MutableDateTime var18 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var19 = var18.year();
    boolean var20 = var16.isBefore((org.joda.time.ReadableInstant)var18);
    org.joda.time.MutableDateTime.Property var21 = var18.minuteOfHour();
    org.joda.time.MutableDateTime.Property var22 = var18.millisOfSecond();
    org.joda.time.Chronology var23 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant)var12, (org.joda.time.ReadableInstant)var18);
    var2.setDate((org.joda.time.ReadableInstant)var18);
    org.joda.time.Instant var25 = new org.joda.time.Instant();
    org.joda.time.Instant var26 = var25.toInstant();
    org.joda.time.DateTime var27 = var26.toDateTime();
    boolean var28 = var2.isAfter((org.joda.time.ReadableInstant)var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);

  }

  public void test330() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test330"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    long var26 = var18.addWrapField(1377746581334L, 100);
    org.joda.time.DurationField var27 = var18.getRangeDurationField();
    org.joda.time.chrono.JulianChronology var28 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var29 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var28);
    org.joda.time.DateMidnight var31 = var29.plusDays(2013);
    org.joda.time.chrono.JulianChronology var32 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var33 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var32);
    org.joda.time.LocalDate var34 = var33.toLocalDate();
    org.joda.time.DateMidnight var36 = var33.minusWeeks((-1));
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var39 = new org.joda.time.MutableDateTime();
    var39.setWeekOfWeekyear(1);
    int var42 = var39.getRoundingMode();
    var39.addMillis(100);
    var39.setSecondOfMinute(10);
    org.joda.time.PeriodType var47 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var48 = new org.joda.time.Period((org.joda.time.ReadableDuration)var38, (org.joda.time.ReadableInstant)var39, var47);
    org.joda.time.Days var49 = var48.toStandardDays();
    org.joda.time.DurationFieldType var50 = var49.getFieldType();
    org.joda.time.DateMidnight var52 = var36.withFieldAdded(var50, 1);
    org.joda.time.field.PreciseDurationField var54 = new org.joda.time.field.PreciseDurationField(var50, 1L);
    org.joda.time.DateMidnight var56 = var31.withFieldAdded(var50, 228);
    org.joda.time.field.DecoratedDurationField var57 = new org.joda.time.field.DecoratedDurationField(var27, var50);
    long var60 = var57.add(1377746681334L, 9);
    org.joda.time.Duration var62 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var63 = new org.joda.time.MutableDateTime();
    var63.setWeekOfWeekyear(1);
    int var66 = var63.getRoundingMode();
    var63.addMillis(100);
    var63.setSecondOfMinute(10);
    org.joda.time.PeriodType var71 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var72 = new org.joda.time.Period((org.joda.time.ReadableDuration)var62, (org.joda.time.ReadableInstant)var63, var71);
    org.joda.time.Days var73 = var72.toStandardDays();
    org.joda.time.DurationFieldType var74 = var73.getFieldType();
    org.joda.time.field.DecoratedDurationField var75 = new org.joda.time.field.DecoratedDurationField((org.joda.time.DurationField)var57, var74);
    org.joda.time.field.UnsupportedDurationField var76 = org.joda.time.field.UnsupportedDurationField.getInstance(var74);
    java.lang.String var77 = var76.getName();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var79 = var76.getMillis(1377746598784L);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1377746681334L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1378524281334L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "days"+ "'", var77.equals("days"));

  }

  public void test331() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test331"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.withMonthOfYear(1);
    org.joda.time.LocalDate var6 = var4.withEra(1);
    org.joda.time.LocalDate.Property var7 = var4.dayOfYear();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDate var9 = var4.withYearOfCentury((-13));
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test332() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test332"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    org.joda.time.chrono.StrictChronology var3 = org.joda.time.chrono.StrictChronology.getInstance(var2);
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var5 = var4.hours();
    org.joda.time.DateTimeField var6 = var4.minuteOfHour();
    boolean var7 = var3.equals((java.lang.Object)var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDateTime var8 = new org.joda.time.LocalDateTime((java.lang.Object)var7);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test333() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test333"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendHourOfHalfday(759);
    org.joda.time.format.DateTimeFormatterBuilder var6 = var4.appendDayOfYear(12182);
    org.joda.time.chrono.JulianChronology var7 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var8 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var7);
    org.joda.time.LocalDate var9 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var7);
    org.joda.time.DateTimeField var10 = var7.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var12 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var13 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var12);
    org.joda.time.LocalDate var14 = var13.toLocalDate();
    org.joda.time.LocalDate var16 = var14.minusMonths(0);
    int[] var18 = var11.get((org.joda.time.ReadablePartial)var16, 100L);
    org.joda.time.chrono.EthiopicChronology var22 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var23 = var22.hours();
    org.joda.time.LocalTime var24 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var22);
    org.joda.time.Period var25 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var22);
    org.joda.time.DateTimeField var26 = var22.millisOfSecond();
    org.joda.time.DateTimeField var27 = var22.secondOfDay();
    org.joda.time.field.SkipDateTimeField var29 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var11, var27, 100);
    org.joda.time.LocalDateTime var30 = org.joda.time.LocalDateTime.now();
    int var31 = var30.getDayOfYear();
    org.joda.time.Chronology var32 = var30.getChronology();
    int var33 = var30.getYearOfCentury();
    int var34 = var29.getMaximumValue((org.joda.time.ReadablePartial)var30);
    boolean var36 = var29.isLeap(1L);
    org.joda.time.LocalDateTime var37 = org.joda.time.LocalDateTime.now();
    int var38 = var37.getDayOfYear();
    int var39 = var29.getMinimumValue((org.joda.time.ReadablePartial)var37);
    org.joda.time.DurationField var40 = var29.getDurationField();
    org.joda.time.DateTimeFieldType var41 = var29.getType();
    org.joda.time.field.OffsetDateTimeField var45 = new org.joda.time.field.OffsetDateTimeField(var10, var41, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var48 = new org.joda.time.IllegalFieldValueException(var41, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var49 = var6.appendText(var41);
    org.joda.time.LocalDateTime var50 = org.joda.time.LocalDateTime.now();
    int var51 = var50.getDayOfYear();
    org.joda.time.Chronology var52 = var50.getChronology();
    org.joda.time.YearMonthDay var53 = new org.joda.time.YearMonthDay(var52);
    org.joda.time.MonthDay var54 = new org.joda.time.MonthDay(var52);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalTime var55 = new org.joda.time.LocalTime((java.lang.Object)var49, var52);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test334() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test334"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    int var5 = var2.getRoundingMode();
    var2.addMillis(100);
    var2.setSecondOfMinute(10);
    org.joda.time.PeriodType var10 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var11 = new org.joda.time.Period((org.joda.time.ReadableDuration)var1, (org.joda.time.ReadableInstant)var2, var10);
    org.joda.time.Days var12 = var11.toStandardDays();
    java.lang.String var13 = var12.toString();
    org.joda.time.Days var15 = var12.minus(767326786);
    org.joda.time.Days var17 = var15.plus((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "P0D"+ "'", var13.equals("P0D"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test335() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test335"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.LocalTime var3 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var1);
    org.joda.time.LocalTime var5 = var3.withMillisOfSecond(1);
    org.joda.time.LocalTime var7 = var5.minusHours((-1));
    org.joda.time.LocalTime var9 = var5.plusMillis(4);
    org.joda.time.TimeOfDay var10 = new org.joda.time.TimeOfDay();
    int var11 = var10.size();
    org.joda.time.chrono.EthiopicChronology var13 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var14 = var13.hours();
    org.joda.time.LocalTime var15 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var13);
    org.joda.time.LocalTime var17 = var15.withMillisOfSecond(1);
    org.joda.time.LocalTime var19 = var17.minusHours((-1));
    org.joda.time.Years var20 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var10, (org.joda.time.ReadablePartial)var19);
    org.joda.time.chrono.EthiopicChronology var21 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var22 = var21.dayOfYear();
    org.joda.time.YearMonthDay var23 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var21);
    org.joda.time.TimeOfDay var24 = var10.withChronologyRetainFields((org.joda.time.Chronology)var21);
    org.joda.time.TimeOfDay var26 = var24.plusMillis(2005);
    java.lang.String var27 = var24.toString();
    org.joda.time.TimeOfDay var29 = var24.plusSeconds(4);
    boolean var30 = var9.isBefore((org.joda.time.ReadablePartial)var24);
    org.joda.time.LocalTime.Property var31 = var9.secondOfMinute();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "T00:00:00.110"+ "'", var27.equals("T00:00:00.110"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test336() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test336"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    int var3 = var0.getYearOfCentury();
    int var4 = var0.getWeekOfWeekyear();
    org.joda.time.LocalDateTime var6 = var0.minusWeeks(759);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDateTime var11 = var6.withTime(40, 44, 46, 116);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test337() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test337"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var2.appendDayOfWeek(8400);
    org.joda.time.format.DateTimeFormatterBuilder var6 = var4.appendLiteral("-1 hours");
    org.joda.time.format.DateTimeFormatterBuilder var8 = var4.appendTwoDigitWeekyear(12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test338() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test338"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var1 = var0.hours();
    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var3 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var2);
    org.joda.time.LocalDate var4 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var2);
    org.joda.time.DateTimeField var5 = var2.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var6 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var7 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var8 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var7);
    org.joda.time.LocalDate var9 = var8.toLocalDate();
    org.joda.time.LocalDate var11 = var9.minusMonths(0);
    int[] var13 = var6.get((org.joda.time.ReadablePartial)var11, 100L);
    org.joda.time.chrono.EthiopicChronology var17 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var18 = var17.hours();
    org.joda.time.LocalTime var19 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var17);
    org.joda.time.Period var20 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var17);
    org.joda.time.DateTimeField var21 = var17.millisOfSecond();
    org.joda.time.DateTimeField var22 = var17.secondOfDay();
    org.joda.time.field.SkipDateTimeField var24 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var6, var22, 100);
    org.joda.time.LocalDateTime var25 = org.joda.time.LocalDateTime.now();
    int var26 = var25.getDayOfYear();
    org.joda.time.Chronology var27 = var25.getChronology();
    int var28 = var25.getYearOfCentury();
    int var29 = var24.getMaximumValue((org.joda.time.ReadablePartial)var25);
    boolean var31 = var24.isLeap(1L);
    org.joda.time.LocalDateTime var32 = org.joda.time.LocalDateTime.now();
    int var33 = var32.getDayOfYear();
    int var34 = var24.getMinimumValue((org.joda.time.ReadablePartial)var32);
    org.joda.time.DurationField var35 = var24.getDurationField();
    org.joda.time.DateTimeFieldType var36 = var24.getType();
    org.joda.time.field.OffsetDateTimeField var40 = new org.joda.time.field.OffsetDateTimeField(var5, var36, 884, 3, 948);
    long var42 = var40.roundCeiling(3L);
    org.joda.time.field.SkipUndoDateTimeField var44 = new org.joda.time.field.SkipUndoDateTimeField((org.joda.time.Chronology)var0, (org.joda.time.DateTimeField)var40, 18);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var47 = var44.set(1377746681334L, 1970);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 3L);

  }

  public void test339() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test339"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var5 = var0.appendYear(23, 8);
    org.joda.time.format.DateTimeFormatterBuilder var7 = var5.appendWeekOfWeekyear(13);
    org.joda.time.format.DateTimeFormatter var8 = org.joda.time.format.DateTimeFormat.shortDateTime();
    org.joda.time.TimeOfDay var9 = new org.joda.time.TimeOfDay();
    int var10 = var9.size();
    org.joda.time.chrono.EthiopicChronology var12 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var13 = var12.hours();
    org.joda.time.LocalTime var14 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var12);
    org.joda.time.LocalTime var16 = var14.withMillisOfSecond(1);
    org.joda.time.LocalTime var18 = var16.minusHours((-1));
    org.joda.time.Years var19 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var9, (org.joda.time.ReadablePartial)var18);
    int var20 = var9.getMillisOfSecond();
    org.joda.time.chrono.JulianChronology var21 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.TimeOfDay var22 = var9.withChronologyRetainFields((org.joda.time.Chronology)var21);
    org.joda.time.format.DateTimeFormatter var23 = var8.withChronology((org.joda.time.Chronology)var21);
    org.joda.time.format.DateTimePrinter var24 = var23.getPrinter();
    org.joda.time.format.DateTimeFormatterBuilder var25 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var27 = var25.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var28 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var30 = var28.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var32 = var30.appendDayOfWeek(8400);
    org.joda.time.format.DateTimeFormatterBuilder var34 = var32.appendLiteral("-1 hours");
    org.joda.time.format.DateTimeFormatterBuilder var36 = var32.appendClockhourOfDay(2005);
    org.joda.time.format.DateTimeFormatterBuilder var39 = var32.appendFractionOfSecond(630, 241);
    org.joda.time.format.DateTimeFormatterBuilder var40 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var42 = var40.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var44 = var40.appendClockhourOfHalfday(692);
    org.joda.time.format.DateTimeFormatterBuilder var45 = var44.appendTimeZoneId();
    org.joda.time.format.DateTimeParser var46 = var45.toParser();
    org.joda.time.format.DateTimeFormatterBuilder var48 = var45.appendDayOfYear(34);
    org.joda.time.format.DateTimeFormatterBuilder var49 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var51 = var49.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimePrinter var52 = var49.toPrinter();
    org.joda.time.format.DateTimeFormatter var53 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
    org.joda.time.chrono.EthiopicChronology var57 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var58 = var57.hours();
    org.joda.time.LocalTime var59 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var57);
    org.joda.time.Period var60 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var57);
    org.joda.time.DateTimeField var61 = var57.millisOfSecond();
    org.joda.time.chrono.LenientChronology var62 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var57);
    org.joda.time.format.DateTimeFormatter var63 = var53.withChronology((org.joda.time.Chronology)var62);
    org.joda.time.format.DateTimeFormatter var64 = var63.withZoneUTC();
    org.joda.time.format.DateTimeParser var65 = var63.getParser();
    org.joda.time.format.DateTimeFormatterBuilder var66 = var48.append(var52, var65);
    org.joda.time.format.DateTimeFormatter var67 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
    org.joda.time.chrono.EthiopicChronology var71 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var72 = var71.hours();
    org.joda.time.LocalTime var73 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var71);
    org.joda.time.Period var74 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var71);
    org.joda.time.DateTimeField var75 = var71.millisOfSecond();
    org.joda.time.chrono.LenientChronology var76 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var71);
    org.joda.time.format.DateTimeFormatter var77 = var67.withChronology((org.joda.time.Chronology)var76);
    org.joda.time.format.DateTimeFormatter var78 = var77.withZoneUTC();
    org.joda.time.format.DateTimeParser var79 = var77.getParser();
    org.joda.time.format.DateTimeFormatterBuilder var80 = var39.append(var52, var79);
    org.joda.time.format.DateTimeFormatterBuilder var81 = var25.append(var52);
    org.joda.time.format.DateTimeFormatter var82 = org.joda.time.format.ISODateTimeFormat.weekyearWeekDay();
    boolean var83 = var82.isOffsetParsed();
    org.joda.time.format.DateTimeParser var84 = var82.getParser();
    org.joda.time.format.DateTimeFormatter var85 = new org.joda.time.format.DateTimeFormatter(var52, var84);
    org.joda.time.format.DateTimeParser[] var86 = new org.joda.time.format.DateTimeParser[] { var84};
    org.joda.time.format.DateTimeFormatterBuilder var87 = var7.append(var24, var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 110);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test340() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test340"); }


    org.joda.time.PeriodType var4 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var5 = new org.joda.time.MutablePeriod(var4);
    org.joda.time.MutablePeriod var6 = new org.joda.time.MutablePeriod((-703463L), (-1L), var4);
    org.joda.time.Period var7 = new org.joda.time.Period(1377768182707L, 2755493214888L, var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test341() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test341"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    int var5 = var2.getRoundingMode();
    var2.addMillis(100);
    var2.setSecondOfMinute(10);
    org.joda.time.PeriodType var10 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var11 = new org.joda.time.Period((org.joda.time.ReadableDuration)var1, (org.joda.time.ReadableInstant)var2, var10);
    org.joda.time.Days var12 = var11.toStandardDays();
    org.joda.time.Hours var13 = var12.toStandardHours();
    java.lang.String var14 = var13.toString();
    org.joda.time.Days var15 = var13.toStandardDays();
    org.joda.time.Hours var17 = var13.multipliedBy(2013);
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var20 = new org.joda.time.MutableDateTime();
    var20.setWeekOfWeekyear(1);
    int var23 = var20.getRoundingMode();
    var20.addMillis(100);
    var20.setSecondOfMinute(10);
    org.joda.time.PeriodType var28 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var29 = new org.joda.time.Period((org.joda.time.ReadableDuration)var19, (org.joda.time.ReadableInstant)var20, var28);
    org.joda.time.Days var30 = var29.toStandardDays();
    org.joda.time.Hours var31 = var30.toStandardHours();
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var34 = new org.joda.time.MutableDateTime();
    var34.setWeekOfWeekyear(1);
    int var37 = var34.getRoundingMode();
    var34.addMillis(100);
    var34.setSecondOfMinute(10);
    org.joda.time.PeriodType var42 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var43 = new org.joda.time.Period((org.joda.time.ReadableDuration)var33, (org.joda.time.ReadableInstant)var34, var42);
    org.joda.time.Days var44 = var43.toStandardDays();
    org.joda.time.Hours var45 = var44.toStandardHours();
    java.lang.String var46 = var45.toString();
    org.joda.time.Hours var47 = var31.plus(var45);
    org.joda.time.Hours var48 = var13.plus(var45);
    org.joda.time.Hours var50 = org.joda.time.Hours.hours(8400);
    org.joda.time.Duration var52 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var53 = new org.joda.time.MutableDateTime();
    var53.setWeekOfWeekyear(1);
    int var56 = var53.getRoundingMode();
    var53.addMillis(100);
    var53.setSecondOfMinute(10);
    org.joda.time.PeriodType var61 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var62 = new org.joda.time.Period((org.joda.time.ReadableDuration)var52, (org.joda.time.ReadableInstant)var53, var61);
    org.joda.time.Days var63 = var62.toStandardDays();
    org.joda.time.Hours var64 = var63.toStandardHours();
    java.lang.String var65 = var64.toString();
    org.joda.time.Days var66 = var64.toStandardDays();
    org.joda.time.Hours var68 = var64.multipliedBy(2013);
    org.joda.time.Hours var69 = var50.minus(var68);
    org.joda.time.PeriodType var70 = var69.getPeriodType();
    org.joda.time.Hours var71 = var45.plus(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PT0H"+ "'", var14.equals("PT0H"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "PT0H"+ "'", var46.equals("PT0H"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "PT0H"+ "'", var65.equals("PT0H"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test342() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test342"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.weeks();
    org.joda.time.PeriodType var1 = var0.withMonthsRemoved();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test343() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test343"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    int var5 = var2.getRoundingMode();
    var2.addMillis(100);
    var2.setSecondOfMinute(10);
    org.joda.time.PeriodType var10 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var11 = new org.joda.time.Period((org.joda.time.ReadableDuration)var1, (org.joda.time.ReadableInstant)var2, var10);
    org.joda.time.Days var12 = var11.toStandardDays();
    org.joda.time.Hours var13 = var12.toStandardHours();
    org.joda.time.Days var14 = var13.toStandardDays();
    org.joda.time.Hours var15 = var13.negated();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test344() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test344"); }


    org.joda.time.Period var1 = org.joda.time.Period.weeks(318);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test345() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test345"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var0);
    org.joda.time.DateTimeField var3 = var0.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.LocalDate var9 = var7.minusMonths(0);
    int[] var11 = var4.get((org.joda.time.ReadablePartial)var9, 100L);
    org.joda.time.chrono.EthiopicChronology var15 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var16 = var15.hours();
    org.joda.time.LocalTime var17 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var15);
    org.joda.time.Period var18 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var15);
    org.joda.time.DateTimeField var19 = var15.millisOfSecond();
    org.joda.time.DateTimeField var20 = var15.secondOfDay();
    org.joda.time.field.SkipDateTimeField var22 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var4, var20, 100);
    org.joda.time.LocalDateTime var23 = org.joda.time.LocalDateTime.now();
    int var24 = var23.getDayOfYear();
    org.joda.time.Chronology var25 = var23.getChronology();
    int var26 = var23.getYearOfCentury();
    int var27 = var22.getMaximumValue((org.joda.time.ReadablePartial)var23);
    boolean var29 = var22.isLeap(1L);
    org.joda.time.LocalDateTime var30 = org.joda.time.LocalDateTime.now();
    int var31 = var30.getDayOfYear();
    int var32 = var22.getMinimumValue((org.joda.time.ReadablePartial)var30);
    org.joda.time.DurationField var33 = var22.getDurationField();
    org.joda.time.DateTimeFieldType var34 = var22.getType();
    org.joda.time.field.OffsetDateTimeField var38 = new org.joda.time.field.OffsetDateTimeField(var3, var34, 884, 3, 948);
    long var40 = var38.roundCeiling(3L);
    int var42 = var38.getMaximumValue((-7200000L));
    long var45 = var38.add((-703990L), 4133240044002L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var48 = var38.getDifference(74316060000000L, 1377746598784L);
      fail("Expected exception of type java.lang.ArithmeticException");
    } catch (java.lang.ArithmeticException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 3L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 948);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 4133239340012L);

  }

  public void test346() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test346"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var5);
    org.joda.time.DateTimeField var8 = var5.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate var14 = var12.minusMonths(0);
    int[] var16 = var9.get((org.joda.time.ReadablePartial)var14, 100L);
    org.joda.time.chrono.EthiopicChronology var20 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var21 = var20.hours();
    org.joda.time.LocalTime var22 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var20);
    org.joda.time.Period var23 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var20);
    org.joda.time.DateTimeField var24 = var20.millisOfSecond();
    org.joda.time.DateTimeField var25 = var20.secondOfDay();
    org.joda.time.field.SkipDateTimeField var27 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var9, var25, 100);
    org.joda.time.LocalDateTime var28 = org.joda.time.LocalDateTime.now();
    int var29 = var28.getDayOfYear();
    org.joda.time.Chronology var30 = var28.getChronology();
    int var31 = var28.getYearOfCentury();
    int var32 = var27.getMaximumValue((org.joda.time.ReadablePartial)var28);
    boolean var34 = var27.isLeap(1L);
    org.joda.time.LocalDateTime var35 = org.joda.time.LocalDateTime.now();
    int var36 = var35.getDayOfYear();
    int var37 = var27.getMinimumValue((org.joda.time.ReadablePartial)var35);
    org.joda.time.DurationField var38 = var27.getDurationField();
    org.joda.time.DateTimeFieldType var39 = var27.getType();
    org.joda.time.field.OffsetDateTimeField var43 = new org.joda.time.field.OffsetDateTimeField(var8, var39, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var46 = new org.joda.time.IllegalFieldValueException(var39, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var49 = var0.appendFraction(var39, 33, (-948));
    org.joda.time.chrono.EthiopicChronology var50 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var51 = var50.minutes();
    org.joda.time.DateTimeField var52 = var50.year();
    org.joda.time.DurationField var53 = var50.hours();
    org.joda.time.field.UnsupportedDateTimeField var54 = org.joda.time.field.UnsupportedDateTimeField.getInstance(var39, var53);
    org.joda.time.DateTimeFieldType var55 = var54.getType();
    org.joda.time.DurationField var56 = var54.getRangeDurationField();
    org.joda.time.DurationField var57 = var54.getDurationField();
    org.joda.time.PeriodType var58 = org.joda.time.PeriodType.months();
    java.lang.String var59 = var58.toString();
    org.joda.time.PeriodType var60 = org.joda.time.PeriodType.months();
    org.joda.time.Duration var62 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var63 = new org.joda.time.MutableDateTime();
    var63.setWeekOfWeekyear(1);
    int var66 = var63.getRoundingMode();
    var63.addMillis(100);
    var63.setSecondOfMinute(10);
    org.joda.time.PeriodType var71 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var72 = new org.joda.time.Period((org.joda.time.ReadableDuration)var62, (org.joda.time.ReadableInstant)var63, var71);
    org.joda.time.Days var73 = var72.toStandardDays();
    org.joda.time.DurationFieldType var74 = var73.getFieldType();
    int var75 = var60.indexOf(var74);
    boolean var76 = var58.isSupported(var74);
    org.joda.time.field.ScaledDurationField var78 = new org.joda.time.field.ScaledDurationField(var57, var74, 845);
    long var81 = var78.getDifferenceAsLong(1377742995215L, 1377746591507L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "PeriodType[Months]"+ "'", var59.equals("PeriodType[Months]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0L);

  }

  public void test347() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test347"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    int var3 = var0.getYearOfCentury();
    org.joda.time.LocalTime var4 = var0.toLocalTime();
    org.joda.time.Years var6 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var7 = var6.getPeriodType();
    org.joda.time.Years var9 = org.joda.time.Years.years((-1));
    int var10 = var6.compareTo((org.joda.time.base.BaseSingleFieldPeriod)var9);
    org.joda.time.TimeOfDay var11 = new org.joda.time.TimeOfDay();
    int var12 = var11.size();
    org.joda.time.chrono.EthiopicChronology var14 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var15 = var14.hours();
    org.joda.time.LocalTime var16 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var14);
    org.joda.time.LocalTime var18 = var16.withMillisOfSecond(1);
    org.joda.time.LocalTime var20 = var18.minusHours((-1));
    org.joda.time.Years var21 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var11, (org.joda.time.ReadablePartial)var20);
    boolean var22 = var9.isLessThan(var21);
    org.joda.time.LocalTime var23 = var4.minus((org.joda.time.ReadablePeriod)var21);
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.Period var30 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var32 = var30.plusSeconds(100);
    org.joda.time.Period var34 = var30.minusMillis(10);
    boolean var35 = var25.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var36 = var25.dayOfYear();
    org.joda.time.chrono.JulianChronology var37 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var38 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var37);
    org.joda.time.LocalDate var39 = var38.toLocalDate();
    org.joda.time.LocalDate var41 = var39.minusMonths(0);
    org.joda.time.DateTime var42 = var39.toDateTimeAtMidnight();
    org.joda.time.DateTime var44 = var42.withCenturyOfEra(4);
    org.joda.time.Days var45 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var25, (org.joda.time.ReadableInstant)var44);
    org.joda.time.chrono.EthiopicChronology var47 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var48 = var47.hours();
    org.joda.time.LocalTime var49 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var47);
    org.joda.time.LocalTime var51 = var49.withMillisOfSecond(1);
    org.joda.time.LocalTime var52 = org.joda.time.LocalTime.now();
    boolean var53 = var51.isAfter((org.joda.time.ReadablePartial)var52);
    org.joda.time.chrono.JulianChronology var54 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var55 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var54);
    org.joda.time.LocalDate var56 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var54);
    org.joda.time.DurationField var57 = var54.hours();
    boolean var58 = var52.equals((java.lang.Object)var54);
    org.joda.time.Duration var60 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var61 = new org.joda.time.MutableDateTime();
    var61.setWeekOfWeekyear(1);
    int var64 = var61.getRoundingMode();
    var61.addMillis(100);
    var61.setSecondOfMinute(10);
    org.joda.time.PeriodType var69 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var70 = new org.joda.time.Period((org.joda.time.ReadableDuration)var60, (org.joda.time.ReadableInstant)var61, var69);
    org.joda.time.Days var71 = var70.toStandardDays();
    org.joda.time.LocalTime var72 = var52.minus((org.joda.time.ReadablePeriod)var70);
    org.joda.time.DateMidnight var73 = var25.plus((org.joda.time.ReadablePeriod)var70);
    org.joda.time.DateMidnight var75 = var25.plus(1L);
    boolean var76 = var23.equals((java.lang.Object)var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);

  }

  public void test348() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test348"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.TimeOfDay var3 = new org.joda.time.TimeOfDay((-34), 659, 13);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }

  }

  public void test349() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test349"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var1 = var0.year();
    org.joda.time.MutableDateTime.Property var2 = var0.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var4 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var3);
    org.joda.time.Period var9 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var11 = var9.plusSeconds(100);
    org.joda.time.Period var13 = var9.minusMillis(10);
    boolean var14 = var4.equals((java.lang.Object)10);
    org.joda.time.Weeks var15 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var0, (org.joda.time.ReadableInstant)var4);
    org.joda.time.MutableDateTime var16 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var17 = var16.year();
    org.joda.time.MutableDateTime.Property var18 = var16.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var19 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var20 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var19);
    org.joda.time.Period var25 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var27 = var25.plusSeconds(100);
    org.joda.time.Period var29 = var25.minusMillis(10);
    boolean var30 = var20.equals((java.lang.Object)10);
    org.joda.time.Weeks var31 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var16, (org.joda.time.ReadableInstant)var20);
    org.joda.time.Weeks var32 = var15.minus(var31);
    org.joda.time.Weeks var34 = var31.minus(3);
    org.joda.time.Duration var35 = var34.toStandardDuration();
    int var36 = var34.getWeeks();
    org.joda.time.Weeks var38 = var34.minus(3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-3));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test350() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test350"); }


    org.joda.time.format.PeriodFormatterBuilder var0 = new org.joda.time.format.PeriodFormatterBuilder();
    org.joda.time.format.PeriodFormatterBuilder var3 = var0.appendSeparator("T07:00:08", "P121961710312T697819483414166.171");
    org.joda.time.format.PeriodFormatterBuilder var5 = var0.appendSeparatorIfFieldsAfter("days");
    org.joda.time.format.PeriodFormatterBuilder var7 = var0.minimumPrintedDigits(17);
    org.joda.time.format.PeriodFormatterBuilder var8 = var7.appendHours();
    org.joda.time.format.PeriodFormatter var9 = org.joda.time.format.ISOPeriodFormat.alternate();
    org.joda.time.format.PeriodPrinter var10 = var9.getPrinter();
    org.joda.time.format.PeriodFormatter var11 = org.joda.time.format.PeriodFormat.getDefault();
    org.joda.time.format.PeriodParser var12 = var11.getParser();
    org.joda.time.format.PeriodFormatterBuilder var13 = var7.append(var10, var12);
    java.lang.String[] var17 = new java.lang.String[] { "days"};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.format.PeriodFormatterBuilder var18 = var7.appendSeparator("8581 seconds", "2013-08-29T03:23:38.914+00:00:00.100/2013-08-29T03:23:38.914+00:00:00.100", var17);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test351() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test351"); }


    org.joda.time.format.PeriodFormatterBuilder var0 = new org.joda.time.format.PeriodFormatterBuilder();
    org.joda.time.format.PeriodFormatterBuilder var3 = var0.appendSeparator("T07:00:08", "P121961710312T697819483414166.171");
    org.joda.time.format.PeriodFormatter var4 = org.joda.time.format.PeriodFormat.getDefault();
    org.joda.time.Months var6 = org.joda.time.Months.months((-1));
    org.joda.time.Months var8 = var6.plus(100);
    int var9 = var6.size();
    java.lang.String var10 = var4.print((org.joda.time.ReadablePeriod)var6);
    org.joda.time.format.PeriodPrinter var11 = var4.getPrinter();
    org.joda.time.PeriodType var12 = var4.getParseType();
    boolean var13 = var4.isParser();
    org.joda.time.format.PeriodFormatterBuilder var14 = var0.append(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "-1 months"+ "'", var10.equals("-1 months"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test352() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test352"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    long var26 = var18.addWrapField(1377746581334L, 100);
    org.joda.time.DurationField var27 = var18.getRangeDurationField();
    org.joda.time.chrono.JulianChronology var28 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var29 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var28);
    org.joda.time.DateMidnight var31 = var29.plusDays(2013);
    org.joda.time.chrono.JulianChronology var32 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var33 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var32);
    org.joda.time.LocalDate var34 = var33.toLocalDate();
    org.joda.time.DateMidnight var36 = var33.minusWeeks((-1));
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var39 = new org.joda.time.MutableDateTime();
    var39.setWeekOfWeekyear(1);
    int var42 = var39.getRoundingMode();
    var39.addMillis(100);
    var39.setSecondOfMinute(10);
    org.joda.time.PeriodType var47 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var48 = new org.joda.time.Period((org.joda.time.ReadableDuration)var38, (org.joda.time.ReadableInstant)var39, var47);
    org.joda.time.Days var49 = var48.toStandardDays();
    org.joda.time.DurationFieldType var50 = var49.getFieldType();
    org.joda.time.DateMidnight var52 = var36.withFieldAdded(var50, 1);
    org.joda.time.field.PreciseDurationField var54 = new org.joda.time.field.PreciseDurationField(var50, 1L);
    org.joda.time.DateMidnight var56 = var31.withFieldAdded(var50, 228);
    org.joda.time.field.DecoratedDurationField var57 = new org.joda.time.field.DecoratedDurationField(var27, var50);
    long var60 = var57.add(1377768182707L, 100L);
    long var63 = var57.add((-7200000L), 23);
    long var65 = var57.getValueAsLong((-60779281008478L));
    org.joda.time.chrono.JulianChronology var66 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var67 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var66);
    org.joda.time.LocalDate var68 = var67.toLocalDate();
    org.joda.time.DateMidnight var70 = var67.minusWeeks((-1));
    org.joda.time.Duration var72 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var73 = new org.joda.time.MutableDateTime();
    var73.setWeekOfWeekyear(1);
    int var76 = var73.getRoundingMode();
    var73.addMillis(100);
    var73.setSecondOfMinute(10);
    org.joda.time.PeriodType var81 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var82 = new org.joda.time.Period((org.joda.time.ReadableDuration)var72, (org.joda.time.ReadableInstant)var73, var81);
    org.joda.time.Days var83 = var82.toStandardDays();
    org.joda.time.DurationFieldType var84 = var83.getFieldType();
    org.joda.time.DateMidnight var86 = var70.withFieldAdded(var84, 1);
    org.joda.time.field.PreciseDurationField var88 = new org.joda.time.field.PreciseDurationField(var84, 1L);
    long var91 = var88.getMillis(3, 9L);
    int var92 = var57.compareTo((org.joda.time.DurationField)var88);
    boolean var93 = var88.isSupported();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1377746681334L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1386408182707L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 1980000000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == (-703463L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == 3L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == true);

  }

  public void test353() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test353"); }


    org.joda.time.format.DateTimeFormatter var5 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var10 = var9.hours();
    org.joda.time.LocalTime var11 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var9);
    org.joda.time.Period var12 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var9);
    org.joda.time.DateTimeField var13 = var9.millisOfSecond();
    org.joda.time.chrono.LenientChronology var14 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var9);
    org.joda.time.format.DateTimeFormatter var15 = var5.withChronology((org.joda.time.Chronology)var14);
    org.joda.time.chrono.ISOChronology var16 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
    org.joda.time.tz.FixedDateTimeZone var21 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var23 = var21.getOffsetFromLocal(1377742981323L);
    org.joda.time.Chronology var24 = var16.withZone((org.joda.time.DateTimeZone)var21);
    long var26 = var21.nextTransition(9L);
    org.joda.time.Chronology var27 = var14.withZone((org.joda.time.DateTimeZone)var21);
    org.joda.time.DateTime var28 = new org.joda.time.DateTime(54, 24430687, 0, 13, 21, var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 9L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test354() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test354"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    var5.setHourOfDay(10);
    org.joda.time.MutableDateTime.Property var22 = var5.yearOfEra();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test355() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test355"); }


    org.joda.time.format.DateTimeFormatter var0 = org.joda.time.format.ISODateTimeFormat.hourMinuteSecond();
    boolean var1 = var0.isParser();
    org.joda.time.Chronology var2 = var0.getChronology();
    org.joda.time.Chronology var3 = var0.getChronolgy();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test356() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test356"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    org.joda.time.LocalDateTime var4 = var0.withYear((-1));
    org.joda.time.LocalDateTime.Property var5 = var0.dayOfWeek();
    org.joda.time.LocalDateTime var6 = org.joda.time.LocalDateTime.now();
    int var7 = var6.getDayOfYear();
    org.joda.time.Chronology var8 = var6.getChronology();
    org.joda.time.Period var13 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var15 = var13.plusSeconds(100);
    org.joda.time.Period var17 = var13.minusMillis(10);
    org.joda.time.LocalDateTime var18 = var6.plus((org.joda.time.ReadablePeriod)var17);
    org.joda.time.LocalDateTime var19 = var0.minus((org.joda.time.ReadablePeriod)var17);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDateTime var21 = var19.withEra(86399);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test357() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test357"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendHourOfHalfday(759);
    org.joda.time.format.DateTimeFormatterBuilder var6 = var4.appendDayOfYear(12182);
    org.joda.time.format.DateTimeFormatterBuilder var7 = var4.appendDayOfWeekShortText();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test358() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test358"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    org.joda.time.YearMonthDay var4 = var2.plusDays((-1));
    org.joda.time.DateTime var5 = var4.toDateTimeAtCurrentTime();
    org.joda.time.chrono.ISOChronology var6 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
    org.joda.time.tz.FixedDateTimeZone var11 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var13 = var11.getOffsetFromLocal(1377742981323L);
    org.joda.time.Chronology var14 = var6.withZone((org.joda.time.DateTimeZone)var11);
    org.joda.time.LocalTime var15 = new org.joda.time.LocalTime((org.joda.time.DateTimeZone)var11);
    org.joda.time.DateTime var16 = var4.toDateTimeAtMidnight((org.joda.time.DateTimeZone)var11);
    org.joda.time.YearMonthDay var18 = var4.plusDays(6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test359() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test359"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    int var5 = var2.getRoundingMode();
    var2.addMillis(100);
    var2.setSecondOfMinute(10);
    org.joda.time.PeriodType var10 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var11 = new org.joda.time.Period((org.joda.time.ReadableDuration)var1, (org.joda.time.ReadableInstant)var2, var10);
    org.joda.time.PeriodType var13 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.DateTime var14 = org.joda.time.DateTime.now();
    org.joda.time.chrono.JulianChronology var15 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var16 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var15);
    org.joda.time.LocalDate var17 = var16.toLocalDate();
    org.joda.time.MutableDateTime var18 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var19 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var16, (org.joda.time.ReadableInstant)var18);
    org.joda.time.MutableDateTime var20 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var21 = var20.year();
    boolean var22 = var18.isBefore((org.joda.time.ReadableInstant)var20);
    org.joda.time.MutableDateTime.Property var23 = var20.minuteOfHour();
    org.joda.time.MutableDateTime.Property var24 = var20.millisOfSecond();
    org.joda.time.Chronology var25 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant)var14, (org.joda.time.ReadableInstant)var20);
    org.joda.time.MutablePeriod var26 = new org.joda.time.MutablePeriod(9L, var13, var25);
    org.joda.time.PeriodType var27 = org.joda.time.PeriodType.months();
    org.joda.time.Duration var29 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var30 = new org.joda.time.MutableDateTime();
    var30.setWeekOfWeekyear(1);
    int var33 = var30.getRoundingMode();
    var30.addMillis(100);
    var30.setSecondOfMinute(10);
    org.joda.time.PeriodType var38 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var39 = new org.joda.time.Period((org.joda.time.ReadableDuration)var29, (org.joda.time.ReadableInstant)var30, var38);
    org.joda.time.Days var40 = var39.toStandardDays();
    org.joda.time.DurationFieldType var41 = var40.getFieldType();
    int var42 = var27.indexOf(var41);
    var26.add(var41, 22);
    org.joda.time.IllegalFieldValueException var46 = new org.joda.time.IllegalFieldValueException(var41, "1970-01");
    int var47 = var11.get(var41);
    org.joda.time.Period var49 = var11.withYears(331);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test360() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test360"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.field.PreciseDurationField var22 = new org.joda.time.field.PreciseDurationField(var18, 1L);
    org.joda.time.DurationFieldType var23 = var22.getType();
    org.joda.time.IllegalFieldValueException var27 = new org.joda.time.IllegalFieldValueException(var23, (java.lang.Number)1377746598382L, (java.lang.Number)948, (java.lang.Number)1377742981948L);
    java.lang.Throwable[] var28 = var27.getSuppressed();
    org.joda.time.DateTimeFieldType var29 = var27.getDateTimeFieldType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);

  }

  public void test361() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test361"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.LocalTime var3 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var1);
    org.joda.time.LocalTime var5 = var3.withMillisOfSecond(1);
    org.joda.time.chrono.JulianChronology var6 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var7 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var6);
    org.joda.time.LocalDate var8 = var7.toLocalDate();
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var10 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableInstant)var9);
    org.joda.time.chrono.JulianChronology var11 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var12 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var11);
    org.joda.time.LocalDate var13 = var12.toLocalDate();
    org.joda.time.MutableDateTime var14 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var15 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var12, (org.joda.time.ReadableInstant)var14);
    org.joda.time.MutableDateTime var16 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var17 = var16.year();
    boolean var18 = var14.isBefore((org.joda.time.ReadableInstant)var16);
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var22 = org.joda.time.Duration.standardHours((-1L));
    boolean var23 = var20.isShorterThan((org.joda.time.ReadableDuration)var22);
    org.joda.time.Duration var25 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    boolean var28 = var25.isShorterThan((org.joda.time.ReadableDuration)var27);
    org.joda.time.Duration var29 = var20.plus((org.joda.time.ReadableDuration)var25);
    var16.add((org.joda.time.ReadableDuration)var25);
    org.joda.time.Seconds var31 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableInstant)var16);
    org.joda.time.Seconds var33 = var31.plus(2005);
    org.joda.time.Minutes var34 = var31.toStandardMinutes();
    org.joda.time.Minutes var36 = var34.dividedBy(100);
    org.joda.time.LocalTime var37 = var3.plus((org.joda.time.ReadablePeriod)var36);
    org.joda.time.LocalTime var39 = var3.minusMinutes(22);
    java.lang.String var40 = var39.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "23:38:00.000"+ "'", var40.equals("23:38:00.000"));

  }

  public void test362() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test362"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.DurationField var19 = var18.getRangeDurationField();
    org.joda.time.chrono.EthiopicChronology var21 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var22 = var21.hours();
    org.joda.time.LocalTime var23 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var21);
    org.joda.time.DateTimeField var24 = org.joda.time.field.LenientDateTimeField.getInstance((org.joda.time.DateTimeField)var18, (org.joda.time.Chronology)var21);
    org.joda.time.DateTimeField var25 = var21.hourOfDay();
    org.joda.time.DurationField var26 = var21.days();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test363() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test363"); }


    org.joda.time.PeriodType var1 = org.joda.time.PeriodType.yearMonthDay();
    org.joda.time.MutablePeriod var2 = new org.joda.time.MutablePeriod(1377746601520L, var1);
    org.joda.time.PeriodType var3 = var1.withMonthsRemoved();
    org.joda.time.PeriodType var4 = org.joda.time.DateTimeUtils.getPeriodType(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test364() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test364"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    int var5 = var2.getRoundingMode();
    var2.addMillis(100);
    var2.setSecondOfMinute(10);
    org.joda.time.PeriodType var10 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var11 = new org.joda.time.Period((org.joda.time.ReadableDuration)var1, (org.joda.time.ReadableInstant)var2, var10);
    org.joda.time.Days var12 = var11.toStandardDays();
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var14 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var13);
    org.joda.time.Period var19 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var21 = var19.plusSeconds(100);
    org.joda.time.Period var23 = var19.minusMillis(10);
    boolean var24 = var14.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var25 = var14.dayOfYear();
    org.joda.time.chrono.JulianChronology var26 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var27 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var26);
    org.joda.time.LocalDate var28 = var27.toLocalDate();
    org.joda.time.LocalDate var30 = var28.minusMonths(0);
    org.joda.time.DateTime var31 = var28.toDateTimeAtMidnight();
    org.joda.time.DateTime var33 = var31.withCenturyOfEra(4);
    org.joda.time.Days var34 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var14, (org.joda.time.ReadableInstant)var33);
    org.joda.time.Days var36 = var34.dividedBy(1);
    boolean var37 = var12.isGreaterThan(var34);
    org.joda.time.DurationFieldType var38 = var12.getFieldType();
    org.joda.time.Days var40 = var12.multipliedBy(4);
    org.joda.time.Days var42 = var12.minus(46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test365() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test365"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var2.toDateTimeAtMidnight();
    org.joda.time.DateTime var7 = var5.withMillis(100L);
    int var8 = var5.getWeekyear();
    org.joda.time.LocalDateTime var9 = var5.toLocalDateTime();
    org.joda.time.LocalTime var10 = var5.toLocalTime();
    org.joda.time.LocalDateTime var11 = var5.toLocalDateTime();
    org.joda.time.LocalDateTime.Property var12 = var11.dayOfWeek();
    org.joda.time.LocalDateTime.Property var13 = var11.hourOfDay();
    org.joda.time.LocalDateTime var15 = var11.withHourOfDay(2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1969);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test366() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test366"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var24 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var23);
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var26 = var25.year();
    boolean var27 = var23.isBefore((org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var28 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var29 = var28.toInterval();
    org.joda.time.MutableDateTime var30 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var31 = var30.year();
    org.joda.time.MutableDateTime.Property var32 = var30.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var33 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var34 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var33);
    org.joda.time.Period var39 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var41 = var39.plusSeconds(100);
    org.joda.time.Period var43 = var39.minusMillis(10);
    boolean var44 = var34.equals((java.lang.Object)10);
    org.joda.time.Weeks var45 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var30, (org.joda.time.ReadableInstant)var34);
    org.joda.time.MutableDateTime var46 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var47 = var46.year();
    org.joda.time.MutableDateTime.Property var48 = var46.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var49 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var50 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var49);
    org.joda.time.Period var55 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var57 = var55.plusSeconds(100);
    org.joda.time.Period var59 = var55.minusMillis(10);
    boolean var60 = var50.equals((java.lang.Object)10);
    org.joda.time.Weeks var61 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var46, (org.joda.time.ReadableInstant)var50);
    org.joda.time.Weeks var62 = var45.minus(var61);
    org.joda.time.Weeks var64 = var61.minus(3);
    org.joda.time.Duration var65 = var64.toStandardDuration();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Interval var66 = var29.withDurationAfterStart((org.joda.time.ReadableDuration)var65);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test367() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test367"); }


    org.joda.time.Partial var0 = new org.joda.time.Partial();
    java.lang.String var1 = var0.toString();
    org.joda.time.Duration var3 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var4 = new org.joda.time.MutableDateTime();
    var4.setWeekOfWeekyear(1);
    int var7 = var4.getRoundingMode();
    var4.addMillis(100);
    var4.setSecondOfMinute(10);
    org.joda.time.PeriodType var12 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var13 = new org.joda.time.Period((org.joda.time.ReadableDuration)var3, (org.joda.time.ReadableInstant)var4, var12);
    org.joda.time.Days var14 = var13.toStandardDays();
    org.joda.time.chrono.JulianChronology var15 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var16 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var15);
    org.joda.time.Period var21 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var23 = var21.plusSeconds(100);
    org.joda.time.Period var25 = var21.minusMillis(10);
    boolean var26 = var16.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var27 = var16.dayOfYear();
    org.joda.time.chrono.JulianChronology var28 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var29 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var28);
    org.joda.time.LocalDate var30 = var29.toLocalDate();
    org.joda.time.LocalDate var32 = var30.minusMonths(0);
    org.joda.time.DateTime var33 = var30.toDateTimeAtMidnight();
    org.joda.time.DateTime var35 = var33.withCenturyOfEra(4);
    org.joda.time.Days var36 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var16, (org.joda.time.ReadableInstant)var35);
    org.joda.time.Days var38 = var36.dividedBy(1);
    boolean var39 = var14.isGreaterThan(var36);
    org.joda.time.DurationFieldType var40 = var14.getFieldType();
    org.joda.time.Seconds var41 = var14.toStandardSeconds();
    org.joda.time.Partial var42 = var0.minus((org.joda.time.ReadablePeriod)var41);
    org.joda.time.TimeOfDay var43 = new org.joda.time.TimeOfDay();
    int var44 = var43.size();
    org.joda.time.TimeOfDay var46 = var43.withMillisOfSecond(1);
    org.joda.time.Years var48 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var49 = var48.getPeriodType();
    org.joda.time.Years var51 = org.joda.time.Years.years((-1));
    int var52 = var48.compareTo((org.joda.time.base.BaseSingleFieldPeriod)var51);
    org.joda.time.Years var54 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var55 = var54.getPeriodType();
    org.joda.time.Years var56 = var51.minus(var54);
    org.joda.time.TimeOfDay var57 = var46.minus((org.joda.time.ReadablePeriod)var51);
    boolean var58 = var0.isMatch((org.joda.time.ReadablePartial)var46);
    org.joda.time.Period var63 = new org.joda.time.Period(1, 10, 10, 1);
    int var64 = var63.getWeeks();
    org.joda.time.Period var65 = var63.toPeriod();
    int var66 = var65.getMonths();
    org.joda.time.Partial var67 = var0.plus((org.joda.time.ReadablePeriod)var65);
    org.joda.time.Chronology var68 = var0.getChronology();
    org.joda.time.Partial var69 = new org.joda.time.Partial(var68);
    int[] var70 = var69.getValues();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test368() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test368"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDate var19 = new org.joda.time.LocalDate((org.joda.time.Chronology)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test369() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test369"); }


    org.joda.time.MutableInterval var0 = new org.joda.time.MutableInterval();
    org.joda.time.MutableInterval var1 = var0.copy();
    org.joda.time.DateTime var2 = var1.getStart();
    java.util.Date var3 = var2.toDate();
    org.joda.time.MonthDay var4 = org.joda.time.MonthDay.fromDateFields(var3);
    org.joda.time.Period var9 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var11 = var9.plusSeconds(100);
    org.joda.time.Period var13 = var11.withSeconds(0);
    int var14 = var13.getMonths();
    org.joda.time.MonthDay var15 = var4.minus((org.joda.time.ReadablePeriod)var13);
    org.joda.time.chrono.JulianChronology var16 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var17 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var16);
    org.joda.time.LocalDate var18 = var17.toLocalDate();
    org.joda.time.MutableDateTime var19 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var20 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var17, (org.joda.time.ReadableInstant)var19);
    org.joda.time.chrono.JulianChronology var21 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var22 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var21);
    org.joda.time.LocalDate var23 = var22.toLocalDate();
    org.joda.time.MutableDateTime var24 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var25 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var22, (org.joda.time.ReadableInstant)var24);
    org.joda.time.MutableDateTime var26 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var27 = var26.year();
    boolean var28 = var24.isBefore((org.joda.time.ReadableInstant)var26);
    org.joda.time.Duration var30 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var32 = org.joda.time.Duration.standardHours((-1L));
    boolean var33 = var30.isShorterThan((org.joda.time.ReadableDuration)var32);
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var37 = org.joda.time.Duration.standardHours((-1L));
    boolean var38 = var35.isShorterThan((org.joda.time.ReadableDuration)var37);
    org.joda.time.Duration var39 = var30.plus((org.joda.time.ReadableDuration)var35);
    var26.add((org.joda.time.ReadableDuration)var35);
    org.joda.time.Seconds var41 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var17, (org.joda.time.ReadableInstant)var26);
    org.joda.time.Seconds var42 = var41.negated();
    org.joda.time.Seconds var44 = var42.plus(240);
    org.joda.time.MonthDay var45 = var15.plus((org.joda.time.ReadablePeriod)var44);
    org.joda.time.MonthDay var47 = var15.minusMonths(22);
    org.joda.time.Years var49 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var50 = var49.getPeriodType();
    org.joda.time.Years var52 = org.joda.time.Years.years((-1));
    int var53 = var49.compareTo((org.joda.time.base.BaseSingleFieldPeriod)var52);
    org.joda.time.TimeOfDay var54 = new org.joda.time.TimeOfDay();
    int var55 = var54.size();
    org.joda.time.chrono.EthiopicChronology var57 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var58 = var57.hours();
    org.joda.time.LocalTime var59 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var57);
    org.joda.time.LocalTime var61 = var59.withMillisOfSecond(1);
    org.joda.time.LocalTime var63 = var61.minusHours((-1));
    org.joda.time.Years var64 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var54, (org.joda.time.ReadablePartial)var63);
    boolean var65 = var52.isLessThan(var64);
    org.joda.time.MonthDay var66 = var47.minus((org.joda.time.ReadablePeriod)var52);
    org.joda.time.Years var68 = var52.multipliedBy(682);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test370() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test370"); }


    org.joda.time.format.DateTimeFormatter var0 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var5 = var4.hours();
    org.joda.time.LocalTime var6 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var4);
    org.joda.time.Period var7 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var4);
    org.joda.time.DateTimeField var8 = var4.millisOfSecond();
    org.joda.time.chrono.LenientChronology var9 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var4);
    org.joda.time.format.DateTimeFormatter var10 = var0.withChronology((org.joda.time.Chronology)var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var12 = var10.parseMillis("2013-08");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test371() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test371"); }


    org.joda.time.TimeOfDay var0 = new org.joda.time.TimeOfDay();
    int var1 = var0.size();
    org.joda.time.TimeOfDay var3 = var0.withMillisOfSecond(1);
    org.joda.time.TimeOfDay var5 = var3.plusMinutes(4);
    org.joda.time.format.DateTimeFormatter var6 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
    org.joda.time.chrono.EthiopicChronology var10 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var11 = var10.hours();
    org.joda.time.LocalTime var12 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var10);
    org.joda.time.Period var13 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var10);
    org.joda.time.DateTimeField var14 = var10.millisOfSecond();
    org.joda.time.chrono.LenientChronology var15 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var10);
    org.joda.time.format.DateTimeFormatter var16 = var6.withChronology((org.joda.time.Chronology)var15);
    org.joda.time.tz.FixedDateTimeZone var21 = new org.joda.time.tz.FixedDateTimeZone("PT0H", "ISOChronology[UTC]", 100, 13);
    org.joda.time.PeriodType var22 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var23 = new org.joda.time.MutablePeriod(var22);
    var23.addDays(1);
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var29 = org.joda.time.Duration.standardHours((-1L));
    boolean var30 = var27.isShorterThan((org.joda.time.ReadableDuration)var29);
    var23.add((org.joda.time.ReadableDuration)var29);
    org.joda.time.MutableDateTime var32 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var33 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var29, (org.joda.time.ReadableInstant)var32);
    var33.clear();
    org.joda.time.MutableDateTime var35 = new org.joda.time.MutableDateTime();
    org.joda.time.chrono.JulianChronology var36 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var37 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var36);
    org.joda.time.LocalDate var38 = var37.toLocalDate();
    org.joda.time.MutableDateTime var39 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var40 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var37, (org.joda.time.ReadableInstant)var39);
    org.joda.time.MutableDateTime var41 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var42 = var41.year();
    boolean var43 = var39.isBefore((org.joda.time.ReadableInstant)var41);
    org.joda.time.Duration var45 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var47 = org.joda.time.Duration.standardHours((-1L));
    boolean var48 = var45.isShorterThan((org.joda.time.ReadableDuration)var47);
    org.joda.time.Duration var50 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var52 = org.joda.time.Duration.standardHours((-1L));
    boolean var53 = var50.isShorterThan((org.joda.time.ReadableDuration)var52);
    org.joda.time.Duration var54 = var45.plus((org.joda.time.ReadableDuration)var50);
    var41.add((org.joda.time.ReadableDuration)var50);
    org.joda.time.MutableDateTime.Property var56 = var41.dayOfWeek();
    var33.setPeriod((org.joda.time.ReadableInstant)var35, (org.joda.time.ReadableInstant)var41);
    boolean var58 = var21.equals((java.lang.Object)var33);
    org.joda.time.Chronology var59 = var15.withZone((org.joda.time.DateTimeZone)var21);
    boolean var61 = var21.isStandardOffset((-100L));
    org.joda.time.DateTimeZone.setDefault((org.joda.time.DateTimeZone)var21);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MutableDateTime var63 = new org.joda.time.MutableDateTime((java.lang.Object)var3, (org.joda.time.DateTimeZone)var21);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);

  }

  public void test372() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test372"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.DurationField var19 = var18.getRangeDurationField();
    org.joda.time.DurationField var20 = var18.getLeapDurationField();
    long var23 = var18.add(35L, 1377768182707L);
    int var25 = var18.getLeapAmount(1377746581948L);
    long var28 = var18.addWrapField((-3600000L), 1883);
    org.joda.time.chrono.JulianChronology var29 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var30 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var29);
    org.joda.time.LocalDate var31 = var30.toLocalDate();
    org.joda.time.MutableDateTime var32 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var33 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var30, (org.joda.time.ReadableInstant)var32);
    org.joda.time.DateTimeComparator var34 = org.joda.time.DateTimeComparator.getTimeOnlyInstance();
    org.joda.time.DateTimeFieldType var35 = var34.getUpperLimit();
    org.joda.time.MutableDateTime.Property var36 = var32.property(var35);
    org.joda.time.MutableInterval var37 = new org.joda.time.MutableInterval();
    org.joda.time.MutableInterval var38 = var37.copy();
    org.joda.time.DateTime var39 = var38.getStart();
    java.util.Date var40 = var39.toDate();
    int var41 = var39.getWeekyear();
    org.joda.time.format.DateTimeFormatterBuilder var42 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var44 = var42.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var46 = var42.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var47 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var48 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var47);
    org.joda.time.LocalDate var49 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var47);
    org.joda.time.DateTimeField var50 = var47.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var51 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var52 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var53 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var52);
    org.joda.time.LocalDate var54 = var53.toLocalDate();
    org.joda.time.LocalDate var56 = var54.minusMonths(0);
    int[] var58 = var51.get((org.joda.time.ReadablePartial)var56, 100L);
    org.joda.time.chrono.EthiopicChronology var62 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var63 = var62.hours();
    org.joda.time.LocalTime var64 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var62);
    org.joda.time.Period var65 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var62);
    org.joda.time.DateTimeField var66 = var62.millisOfSecond();
    org.joda.time.DateTimeField var67 = var62.secondOfDay();
    org.joda.time.field.SkipDateTimeField var69 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var51, var67, 100);
    org.joda.time.LocalDateTime var70 = org.joda.time.LocalDateTime.now();
    int var71 = var70.getDayOfYear();
    org.joda.time.Chronology var72 = var70.getChronology();
    int var73 = var70.getYearOfCentury();
    int var74 = var69.getMaximumValue((org.joda.time.ReadablePartial)var70);
    boolean var76 = var69.isLeap(1L);
    org.joda.time.LocalDateTime var77 = org.joda.time.LocalDateTime.now();
    int var78 = var77.getDayOfYear();
    int var79 = var69.getMinimumValue((org.joda.time.ReadablePartial)var77);
    org.joda.time.DurationField var80 = var69.getDurationField();
    org.joda.time.DateTimeFieldType var81 = var69.getType();
    org.joda.time.field.OffsetDateTimeField var85 = new org.joda.time.field.OffsetDateTimeField(var50, var81, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var88 = new org.joda.time.IllegalFieldValueException(var81, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var91 = var42.appendFraction(var81, 33, (-948));
    org.joda.time.DateTime.Property var92 = var39.property(var81);
    org.joda.time.DateTimeComparator var93 = org.joda.time.DateTimeComparator.getInstance(var35, var81);
    org.joda.time.field.DividedDateTimeField var95 = new org.joda.time.field.DividedDateTimeField((org.joda.time.DateTimeField)var18, var81, 842);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var97 = var95.remainder(1377746594064L);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1377768182707035L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1717000L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1970);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);

  }

  public void test373() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test373"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.Months var6 = org.joda.time.Months.months((-1));
    org.joda.time.Months var8 = var6.plus(100);
    int var9 = var6.size();
    org.joda.time.LocalDate var10 = var2.plus((org.joda.time.ReadablePeriod)var6);
    org.joda.time.Months var11 = var6.negated();
    org.joda.time.Months var12 = var11.negated();
    org.joda.time.Months var14 = org.joda.time.Months.months((-1));
    org.joda.time.Months var16 = var14.plus(100);
    int var17 = var14.size();
    org.joda.time.MutableInterval var18 = new org.joda.time.MutableInterval();
    long var19 = var18.getEndMillis();
    org.joda.time.Months var20 = org.joda.time.Months.monthsIn((org.joda.time.ReadableInterval)var18);
    org.joda.time.Months var22 = var20.plus(2013);
    org.joda.time.TimeOfDay var23 = new org.joda.time.TimeOfDay();
    int var24 = var23.size();
    org.joda.time.chrono.EthiopicChronology var26 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var27 = var26.hours();
    org.joda.time.LocalTime var28 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var26);
    org.joda.time.LocalTime var30 = var28.withMillisOfSecond(1);
    org.joda.time.LocalTime var32 = var30.minusHours((-1));
    org.joda.time.Years var33 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var23, (org.joda.time.ReadablePartial)var32);
    int var34 = var23.getMillisOfSecond();
    org.joda.time.chrono.JulianChronology var35 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.TimeOfDay var36 = var23.withChronologyRetainFields((org.joda.time.Chronology)var35);
    org.joda.time.Months var38 = org.joda.time.Months.months((-1));
    org.joda.time.Months var40 = var38.plus(100);
    int var41 = var38.size();
    org.joda.time.TimeOfDay var43 = var23.withPeriodAdded((org.joda.time.ReadablePeriod)var38, 2013);
    org.joda.time.Months var44 = var22.plus(var38);
    boolean var45 = var14.isLessThan(var44);
    boolean var46 = var11.isLessThan(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 110);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);

  }

  public void test374() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test374"); }


    org.joda.time.Period var8 = new org.joda.time.Period(34, 12182, 9, 318, 8400, 14, 86399, 228);
    org.joda.time.Period var10 = var8.plusMillis(46);
    org.joda.time.Period var12 = var8.minusSeconds(36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test375() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test375"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    int var3 = var0.getYearOfCentury();
    int var4 = var0.getWeekOfWeekyear();
    org.joda.time.LocalDateTime var6 = var0.plusMonths(34);
    org.joda.time.LocalDateTime.Property var7 = var0.dayOfMonth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test376() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test376"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    int var24 = var19.getSecondOfMinute();
    org.joda.time.LocalDateTime var26 = var19.plusSeconds(228);
    org.joda.time.Chronology var27 = var19.getChronology();
    int var28 = var19.getYearOfCentury();
    org.joda.time.chrono.EthiopicChronology var29 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var30 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var31 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var30);
    org.joda.time.LocalDate var32 = var31.toLocalDate();
    org.joda.time.LocalDate var34 = var32.minusMonths(0);
    int[] var36 = var29.get((org.joda.time.ReadablePartial)var34, 100L);
    org.joda.time.chrono.EthiopicChronology var40 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var41 = var40.hours();
    org.joda.time.LocalTime var42 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var40);
    org.joda.time.Period var43 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var40);
    org.joda.time.DateTimeField var44 = var40.millisOfSecond();
    org.joda.time.DateTimeField var45 = var40.secondOfDay();
    org.joda.time.field.SkipDateTimeField var47 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var29, var45, 100);
    org.joda.time.LocalDateTime var48 = org.joda.time.LocalDateTime.now();
    int var49 = var48.getDayOfYear();
    org.joda.time.Chronology var50 = var48.getChronology();
    int var51 = var48.getYearOfCentury();
    int var52 = var47.getMaximumValue((org.joda.time.ReadablePartial)var48);
    boolean var54 = var47.isLeap(1L);
    org.joda.time.LocalDateTime var55 = org.joda.time.LocalDateTime.now();
    int var56 = var55.getDayOfYear();
    int var57 = var47.getMinimumValue((org.joda.time.ReadablePartial)var55);
    org.joda.time.Duration var59 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var60 = new org.joda.time.MutableDateTime();
    var60.setWeekOfWeekyear(1);
    int var63 = var60.getRoundingMode();
    var60.addMillis(100);
    var60.setSecondOfMinute(10);
    org.joda.time.PeriodType var68 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var69 = new org.joda.time.Period((org.joda.time.ReadableDuration)var59, (org.joda.time.ReadableInstant)var60, var68);
    org.joda.time.Days var70 = var69.toStandardDays();
    org.joda.time.DurationFieldType var71 = var70.getFieldType();
    org.joda.time.LocalDateTime var73 = var55.withFieldAdded(var71, 100);
    boolean var74 = var19.isBefore((org.joda.time.ReadablePartial)var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);

  }

  public void test377() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test377"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var1 = var0.year();
    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var3 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var2);
    org.joda.time.Period var8 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var10 = var8.plusSeconds(100);
    org.joda.time.Period var12 = var8.minusMillis(10);
    boolean var13 = var3.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var14 = var3.dayOfYear();
    org.joda.time.chrono.JulianChronology var15 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var16 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var15);
    org.joda.time.LocalDate var17 = var16.toLocalDate();
    org.joda.time.LocalDate var19 = var17.minusMonths(0);
    org.joda.time.DateTime var20 = var17.toDateTimeAtMidnight();
    org.joda.time.DateTime var22 = var20.withCenturyOfEra(4);
    org.joda.time.Days var23 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var3, (org.joda.time.ReadableInstant)var22);
    org.joda.time.DateTime var25 = var22.plusSeconds(10);
    org.joda.time.DateTime var27 = var25.minusMinutes(16);
    org.joda.time.DateTime var29 = var27.withWeekyear(16);
    org.joda.time.Chronology var30 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant)var0, (org.joda.time.ReadableInstant)var27);
    org.joda.time.Instant var31 = var0.toInstant();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test378() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test378"); }


    org.joda.time.MutableInterval var0 = new org.joda.time.MutableInterval();
    var0.setStartMillis((-1L));
    org.joda.time.Chronology var3 = var0.getChronology();
    org.joda.time.MutableInterval var4 = new org.joda.time.MutableInterval();
    long var5 = var4.getEndMillis();
    org.joda.time.Months var6 = org.joda.time.Months.monthsIn((org.joda.time.ReadableInterval)var4);
    org.joda.time.Chronology var7 = var4.getChronology();
    boolean var8 = var0.isAfter((org.joda.time.ReadableInterval)var4);
    var4.setDurationAfterStart(208L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test379() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test379"); }


    org.joda.time.chrono.EthiopicChronology var3 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var4 = var3.hours();
    org.joda.time.LocalTime var5 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var3);
    org.joda.time.Period var6 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var3);
    org.joda.time.DateTimeField var7 = var3.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate var14 = var12.minusMonths(0);
    int[] var16 = var9.get((org.joda.time.ReadablePartial)var14, 100L);
    org.joda.time.DateTime var17 = new org.joda.time.DateTime(1377746581334L, (org.joda.time.Chronology)var9);
    org.joda.time.chrono.EthiopicChronology var21 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var22 = var21.hours();
    org.joda.time.LocalTime var23 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var21);
    org.joda.time.Period var24 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var21);
    org.joda.time.DateTimeField var25 = var21.millisOfSecond();
    org.joda.time.field.SkipDateTimeField var26 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var9, var25);
    org.joda.time.DateTimeField var27 = org.joda.time.field.StrictDateTimeField.getInstance((org.joda.time.DateTimeField)var26);
    int var28 = var26.getMinimumValue();
    org.joda.time.field.SkipUndoDateTimeField var30 = new org.joda.time.field.SkipUndoDateTimeField((org.joda.time.Chronology)var3, (org.joda.time.DateTimeField)var26, 19);
    org.joda.time.DurationField var31 = var30.getLeapDurationField();
    int var33 = var30.getMaximumValue(1325559981L);
    int var35 = var30.getMaximumValue(104L);
    int var36 = var30.getMinimumValue();
    org.joda.time.DurationField var37 = var30.getDurationField();
    long var40 = var30.set(2755489629153L, 928);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 999);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 999);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 2755489629828L);

  }

  public void test380() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test380"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    org.joda.time.YearMonthDay var4 = var2.plusDays((-1));
    org.joda.time.DateTime var5 = var4.toDateTimeAtCurrentTime();
    org.joda.time.chrono.BuddhistChronology var6 = org.joda.time.chrono.BuddhistChronology.getInstanceUTC();
    org.joda.time.DateTimeZone var8 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.DateTimeZone var9 = org.joda.time.DateTimeUtils.getZone(var8);
    org.joda.time.LocalDateTime var10 = new org.joda.time.LocalDateTime(var8);
    org.joda.time.MonthDay var11 = new org.joda.time.MonthDay(var8);
    org.joda.time.Chronology var12 = var6.withZone(var8);
    org.joda.time.MutableDateTime var13 = var5.toMutableDateTime(var8);
    org.joda.time.Instant var14 = new org.joda.time.Instant();
    long var15 = var14.getMillis();
    org.joda.time.MutableDateTime var16 = var14.toMutableDateTimeISO();
    var13.setTime((org.joda.time.ReadableInstant)var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test381() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test381"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    int var3 = var0.getWeekOfWeekyear();
    org.joda.time.LocalDateTime var5 = var0.withDayOfWeek(2);
    org.joda.time.LocalDateTime.Property var6 = var5.yearOfCentury();
    org.joda.time.LocalDateTime var7 = org.joda.time.LocalDateTime.now();
    int var8 = var7.getDayOfYear();
    org.joda.time.Chronology var9 = var7.getChronology();
    int var10 = var7.getYearOfCentury();
    int var11 = var7.getWeekOfWeekyear();
    org.joda.time.LocalDateTime var13 = var7.minusMinutes(1);
    org.joda.time.Years var14 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var5, (org.joda.time.ReadablePartial)var7);
    org.joda.time.LocalDateTime var15 = org.joda.time.LocalDateTime.now();
    int var16 = var15.getDayOfYear();
    org.joda.time.Chronology var17 = var15.getChronology();
    org.joda.time.Period var22 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var24 = var22.plusSeconds(100);
    org.joda.time.Period var26 = var22.minusMillis(10);
    org.joda.time.LocalDateTime var27 = var15.plus((org.joda.time.ReadablePeriod)var26);
    org.joda.time.Instant var29 = new org.joda.time.Instant(2762381894421796L);
    long var30 = var29.getMillis();
    org.joda.time.Duration var32 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var34 = org.joda.time.Duration.standardHours((-1L));
    boolean var35 = var32.isShorterThan((org.joda.time.ReadableDuration)var34);
    org.joda.time.Duration var36 = var32.toDuration();
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    boolean var39 = var36.isShorterThan((org.joda.time.ReadableDuration)var38);
    org.joda.time.Years var41 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var42 = var41.getPeriodType();
    org.joda.time.Period var43 = new org.joda.time.Period((org.joda.time.ReadableInstant)var29, (org.joda.time.ReadableDuration)var36, var42);
    org.joda.time.Period var44 = new org.joda.time.Period((org.joda.time.ReadablePartial)var5, (org.joda.time.ReadablePartial)var15, var42);
    int var45 = var5.getYear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2762381894421796L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 1969);

  }

  public void test382() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test382"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.MutableDateTime.Property var8 = var5.minuteOfHour();
    var5.addDays((-948));
    org.joda.time.chrono.JulianChronology var11 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var12 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var11);
    org.joda.time.LocalDate var13 = var12.toLocalDate();
    org.joda.time.LocalDate var15 = var13.minusMonths(0);
    org.joda.time.DateTime var16 = var13.toDateTimeAtMidnight();
    org.joda.time.DateTime var18 = var16.withMillis(100L);
    int var19 = var16.getWeekyear();
    org.joda.time.LocalDateTime var20 = var16.toLocalDateTime();
    org.joda.time.LocalTime var21 = var16.toLocalTime();
    org.joda.time.DateTime var23 = var16.plusHours(2005);
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.LocalDate var26 = var25.toLocalDate();
    org.joda.time.MutableDateTime var27 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var28 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var25, (org.joda.time.ReadableInstant)var27);
    org.joda.time.chrono.JulianChronology var29 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var30 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var29);
    org.joda.time.LocalDate var31 = var30.toLocalDate();
    org.joda.time.MutableDateTime var32 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var33 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var30, (org.joda.time.ReadableInstant)var32);
    org.joda.time.MutableDateTime var34 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var35 = var34.year();
    boolean var36 = var32.isBefore((org.joda.time.ReadableInstant)var34);
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    boolean var41 = var38.isShorterThan((org.joda.time.ReadableDuration)var40);
    org.joda.time.Duration var43 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var45 = org.joda.time.Duration.standardHours((-1L));
    boolean var46 = var43.isShorterThan((org.joda.time.ReadableDuration)var45);
    org.joda.time.Duration var47 = var38.plus((org.joda.time.ReadableDuration)var43);
    var34.add((org.joda.time.ReadableDuration)var43);
    org.joda.time.Seconds var49 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var25, (org.joda.time.ReadableInstant)var34);
    org.joda.time.Duration var50 = var49.toStandardDuration();
    org.joda.time.DateTime var51 = var23.minus((org.joda.time.ReadableDuration)var50);
    var5.add((org.joda.time.ReadableDuration)var50, 104);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1969);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test383() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test383"); }


    org.joda.time.DateTime var0 = org.joda.time.DateTime.now();
    org.joda.time.DateTime var2 = var0.withMillis(0L);
    org.joda.time.DateTime var4 = var2.plusHours(2013);
    int var5 = var4.getCenturyOfEra();
    org.joda.time.chrono.JulianChronology var6 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var7 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var6);
    org.joda.time.LocalDate var8 = var7.toLocalDate();
    org.joda.time.DateMidnight var10 = var7.minusWeeks((-1));
    org.joda.time.Duration var12 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var13 = new org.joda.time.MutableDateTime();
    var13.setWeekOfWeekyear(1);
    int var16 = var13.getRoundingMode();
    var13.addMillis(100);
    var13.setSecondOfMinute(10);
    org.joda.time.PeriodType var21 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var22 = new org.joda.time.Period((org.joda.time.ReadableDuration)var12, (org.joda.time.ReadableInstant)var13, var21);
    org.joda.time.Days var23 = var22.toStandardDays();
    org.joda.time.DurationFieldType var24 = var23.getFieldType();
    org.joda.time.DateMidnight var26 = var10.withFieldAdded(var24, 1);
    org.joda.time.DateMidnight.Property var27 = var10.monthOfYear();
    int var28 = var10.getYearOfCentury();
    org.joda.time.Weeks var29 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var4, (org.joda.time.ReadableInstant)var10);
    org.joda.time.DateMidnight.Property var30 = var10.monthOfYear();
    org.joda.time.MutableDateTime var31 = org.joda.time.MutableDateTime.now();
    org.joda.time.chrono.JulianChronology var32 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var33 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var32);
    org.joda.time.DateMidnight var35 = var33.plusDays(2013);
    org.joda.time.chrono.JulianChronology var36 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var37 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var36);
    org.joda.time.LocalDate var38 = var37.toLocalDate();
    org.joda.time.DateMidnight var40 = var37.minusWeeks((-1));
    org.joda.time.Duration var42 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var43 = new org.joda.time.MutableDateTime();
    var43.setWeekOfWeekyear(1);
    int var46 = var43.getRoundingMode();
    var43.addMillis(100);
    var43.setSecondOfMinute(10);
    org.joda.time.PeriodType var51 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var52 = new org.joda.time.Period((org.joda.time.ReadableDuration)var42, (org.joda.time.ReadableInstant)var43, var51);
    org.joda.time.Days var53 = var52.toStandardDays();
    org.joda.time.DurationFieldType var54 = var53.getFieldType();
    org.joda.time.DateMidnight var56 = var40.withFieldAdded(var54, 1);
    org.joda.time.field.PreciseDurationField var58 = new org.joda.time.field.PreciseDurationField(var54, 1L);
    org.joda.time.DateMidnight var60 = var35.withFieldAdded(var54, 228);
    org.joda.time.PeriodType var61 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var62 = new org.joda.time.MutablePeriod(var61);
    var62.addDays(1);
    org.joda.time.Duration var66 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var68 = org.joda.time.Duration.standardHours((-1L));
    boolean var69 = var66.isShorterThan((org.joda.time.ReadableDuration)var68);
    var62.add((org.joda.time.ReadableDuration)var68);
    org.joda.time.MutableDateTime var71 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var72 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var68, (org.joda.time.ReadableInstant)var71);
    org.joda.time.PeriodType var73 = var72.getPeriodType();
    org.joda.time.MutablePeriod var74 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant)var31, (org.joda.time.ReadableInstant)var60, var73);
    boolean var75 = org.joda.time.field.FieldUtils.equals((java.lang.Object)var30, (java.lang.Object)var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);

  }

  public void test384() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test384"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    var1.addDays(1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    var1.add((org.joda.time.ReadableDuration)var7);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var7, (org.joda.time.ReadableInstant)var10);
    var11.clear();
    org.joda.time.PeriodType var13 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var14 = new org.joda.time.MutablePeriod(var13);
    var14.addDays(1);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    boolean var21 = var18.isShorterThan((org.joda.time.ReadableDuration)var20);
    var14.add((org.joda.time.ReadableDuration)var20);
    var11.add((org.joda.time.ReadablePeriod)var14);
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.LocalDate var26 = var25.toLocalDate();
    org.joda.time.MutableDateTime var27 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var28 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var25, (org.joda.time.ReadableInstant)var27);
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var30 = var29.year();
    boolean var31 = var27.isBefore((org.joda.time.ReadableInstant)var29);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    boolean var41 = var38.isShorterThan((org.joda.time.ReadableDuration)var40);
    org.joda.time.Duration var42 = var33.plus((org.joda.time.ReadableDuration)var38);
    var29.add((org.joda.time.ReadableDuration)var38);
    org.joda.time.Hours var44 = var38.toStandardHours();
    org.joda.time.chrono.EthiopicChronology var45 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
    var14.setPeriod((org.joda.time.ReadableDuration)var38, (org.joda.time.Chronology)var45);
    int var47 = var14.getDays();
    org.joda.time.format.PeriodFormatter var48 = org.joda.time.format.PeriodFormat.getDefault();
    org.joda.time.Months var50 = org.joda.time.Months.months((-1));
    org.joda.time.Months var52 = var50.plus(100);
    int var53 = var50.size();
    java.lang.String var54 = var48.print((org.joda.time.ReadablePeriod)var50);
    org.joda.time.format.PeriodPrinter var55 = var48.getPrinter();
    org.joda.time.PeriodType var56 = var48.getParseType();
    java.lang.String var57 = var14.toString(var48);
    org.joda.time.MutableInterval var58 = new org.joda.time.MutableInterval();
    org.joda.time.MutableInterval var59 = var58.copy();
    org.joda.time.DateTime var60 = var59.getStart();
    org.joda.time.Chronology var61 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval)var59);
    var14.setPeriod((org.joda.time.ReadableInterval)var59);
    org.joda.time.Period var71 = new org.joda.time.Period(34, 12182, 9, 318, 8400, 14, 86399, 228);
    int var72 = var71.getMillis();
    var59.setPeriodAfterStart((org.joda.time.ReadablePeriod)var71);
    org.joda.time.Months var75 = org.joda.time.Months.months(69);
    org.joda.time.Months var77 = var75.plus(216);
    org.joda.time.MutableInterval var78 = new org.joda.time.MutableInterval();
    long var79 = var78.getEndMillis();
    org.joda.time.Months var80 = org.joda.time.Months.monthsIn((org.joda.time.ReadableInterval)var78);
    org.joda.time.Months var82 = var80.plus(240);
    org.joda.time.Months var83 = var77.plus(var80);
    var59.setPeriodBeforeEnd((org.joda.time.ReadablePeriod)var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "-1 months"+ "'", var54.equals("-1 months"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "-1 hours"+ "'", var57.equals("-1 hours"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 228);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test385() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test385"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var24 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var23);
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var26 = var25.year();
    boolean var27 = var23.isBefore((org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var28 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var25);
    boolean var29 = var28.isBeforeNow();
    org.joda.time.Duration var30 = var28.toDuration();
    org.joda.time.Duration var32 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var34 = org.joda.time.Duration.standardHours((-1L));
    boolean var35 = var32.isShorterThan((org.joda.time.ReadableDuration)var34);
    org.joda.time.Duration var37 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var39 = org.joda.time.Duration.standardHours((-1L));
    boolean var40 = var37.isShorterThan((org.joda.time.ReadableDuration)var39);
    org.joda.time.Duration var41 = var32.plus((org.joda.time.ReadableDuration)var37);
    org.joda.time.Duration var42 = var30.minus((org.joda.time.ReadableDuration)var32);
    java.lang.String var43 = var32.toString();
    org.joda.time.Duration var45 = var32.minus(1377746597835L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "PT-3600S"+ "'", var43.equals("PT-3600S"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test386() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test386"); }


    org.joda.time.Period var2 = new org.joda.time.Period(2755493228900L, (-122400000L));

  }

  public void test387() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test387"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.field.PreciseDurationField var22 = new org.joda.time.field.PreciseDurationField(var18, 1L);
    org.joda.time.DurationFieldType var23 = var22.getType();
    java.lang.String var24 = var22.getName();
    long var26 = var22.getMillis(12196171);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "days"+ "'", var24.equals("days"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 12196171L);

  }

  public void test388() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test388"); }


    org.joda.time.format.PeriodFormatter var0 = org.joda.time.format.PeriodFormat.getDefault();
    java.util.Locale var1 = var0.getLocale();
    java.util.Locale var2 = var0.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test389() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test389"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.withMonthOfYear(1);
    org.joda.time.DateMidnight var5 = var2.toDateMidnight();
    org.joda.time.DateTime var6 = org.joda.time.DateTime.now();
    long var7 = var6.getMillis();
    org.joda.time.DateTime.Property var8 = var6.yearOfEra();
    org.joda.time.PeriodType var10 = org.joda.time.PeriodType.yearDay();
    org.joda.time.MutableDateTime var11 = new org.joda.time.MutableDateTime();
    var11.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var14 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var11.setChronology((org.joda.time.Chronology)var14);
    org.joda.time.MutablePeriod var16 = new org.joda.time.MutablePeriod(0L, var10, (org.joda.time.Chronology)var14);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var19 = new org.joda.time.MutableDateTime();
    var19.setWeekOfWeekyear(1);
    int var22 = var19.getRoundingMode();
    var19.addMillis(100);
    var19.setSecondOfMinute(10);
    org.joda.time.PeriodType var27 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var28 = new org.joda.time.Period((org.joda.time.ReadableDuration)var18, (org.joda.time.ReadableInstant)var19, var27);
    org.joda.time.Days var29 = var28.toStandardDays();
    org.joda.time.Duration var30 = var29.toStandardDuration();
    org.joda.time.chrono.EthiopicChronology var32 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var33 = var32.hours();
    org.joda.time.DateTimeField var34 = var32.minuteOfHour();
    org.joda.time.LocalDate var35 = new org.joda.time.LocalDate(1L, (org.joda.time.Chronology)var32);
    var16.setPeriod((org.joda.time.ReadableDuration)var30, (org.joda.time.Chronology)var32);
    org.joda.time.DateTime var38 = var6.withDurationAdded((org.joda.time.ReadableDuration)var30, 228);
    org.joda.time.Weeks var39 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var6);
    org.joda.time.DateTime var41 = var6.plusYears(20);
    org.joda.time.DateTime var42 = var6.withEarlierOffsetAtOverlap();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test390() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test390"); }


    org.joda.time.Period var4 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var6 = var4.plusSeconds(100);
    org.joda.time.Period var8 = var6.withSeconds(0);
    org.joda.time.Period var10 = var8.minusYears(2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test391() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test391"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var5 = var0.appendYear(23, 8);
    org.joda.time.format.DateTimeFormatterBuilder var8 = var5.appendFractionOfSecond(21, 51);
    org.joda.time.format.DateTimeFormatterBuilder var10 = var8.appendTwoDigitWeekyear(9);
    org.joda.time.format.DateTimeFormatterBuilder var12 = var10.appendWeekOfWeekyear(22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test392() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test392"); }


    org.joda.time.DateTime var0 = org.joda.time.DateTime.now();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.MutableDateTime var4 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var5 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var2, (org.joda.time.ReadableInstant)var4);
    org.joda.time.MutableDateTime var6 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var7 = var6.year();
    boolean var8 = var4.isBefore((org.joda.time.ReadableInstant)var6);
    org.joda.time.MutableDateTime.Property var9 = var6.minuteOfHour();
    org.joda.time.MutableDateTime.Property var10 = var6.millisOfSecond();
    org.joda.time.Chronology var11 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant)var0, (org.joda.time.ReadableInstant)var6);
    org.joda.time.MutableDateTime var12 = new org.joda.time.MutableDateTime(var11);
    var12.addSeconds(23);
    int var15 = var12.getHourOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);

  }

  public void test393() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test393"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.withMonthOfYear(1);
    org.joda.time.LocalDate var6 = var2.withWeekyear(1);
    org.joda.time.LocalDate var8 = var2.withDayOfYear(1);
    org.joda.time.Duration var10 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var11 = new org.joda.time.MutableDateTime();
    var11.setWeekOfWeekyear(1);
    int var14 = var11.getRoundingMode();
    var11.addMillis(100);
    var11.setSecondOfMinute(10);
    org.joda.time.PeriodType var19 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var20 = new org.joda.time.Period((org.joda.time.ReadableDuration)var10, (org.joda.time.ReadableInstant)var11, var19);
    org.joda.time.Days var21 = var20.toStandardDays();
    org.joda.time.DurationFieldType var22 = var21.getFieldType();
    boolean var23 = var2.isSupported(var22);
    org.joda.time.field.PreciseDurationField var25 = new org.joda.time.field.PreciseDurationField(var22, 1325559981L);
    int var27 = var25.getValue(1377742995215L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1039);

  }

  public void test394() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test394"); }


    org.joda.time.Period var4 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var6 = var4.plusYears((-1));
    org.joda.time.Years var8 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var9 = var8.getPeriodType();
    org.joda.time.Period var10 = var4.normalizedStandard(var9);
    org.joda.time.chrono.JulianChronology var11 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var12 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var11);
    org.joda.time.DateMidnight var14 = var12.plusDays(2013);
    org.joda.time.chrono.JulianChronology var15 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var16 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var15);
    org.joda.time.LocalDate var17 = var16.toLocalDate();
    org.joda.time.DateMidnight var19 = var16.minusWeeks((-1));
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var22 = new org.joda.time.MutableDateTime();
    var22.setWeekOfWeekyear(1);
    int var25 = var22.getRoundingMode();
    var22.addMillis(100);
    var22.setSecondOfMinute(10);
    org.joda.time.PeriodType var30 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var31 = new org.joda.time.Period((org.joda.time.ReadableDuration)var21, (org.joda.time.ReadableInstant)var22, var30);
    org.joda.time.Days var32 = var31.toStandardDays();
    org.joda.time.DurationFieldType var33 = var32.getFieldType();
    org.joda.time.DateMidnight var35 = var19.withFieldAdded(var33, 1);
    org.joda.time.field.PreciseDurationField var37 = new org.joda.time.field.PreciseDurationField(var33, 1L);
    org.joda.time.DateMidnight var39 = var14.withFieldAdded(var33, 228);
    org.joda.time.field.PreciseDurationField var41 = new org.joda.time.field.PreciseDurationField(var33, (-9L));
    org.joda.time.Period var43 = var4.withField(var33, 17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test395() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test395"); }


    org.joda.time.tz.FixedDateTimeZone var7 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var9 = var7.getOffsetFromLocal(1377742981323L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateMidnight var10 = new org.joda.time.DateMidnight(47, 104, 2019, (org.joda.time.DateTimeZone)var7);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 28);

  }

  public void test396() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test396"); }


    org.joda.time.PeriodType var1 = org.joda.time.PeriodType.yearDay();
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var2.setChronology((org.joda.time.Chronology)var5);
    org.joda.time.MutablePeriod var7 = new org.joda.time.MutablePeriod(0L, var1, (org.joda.time.Chronology)var5);
    org.joda.time.MutablePeriod var8 = new org.joda.time.MutablePeriod(var1);
    org.joda.time.PeriodType var9 = var1.withMinutesRemoved();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DurationFieldType var11 = var1.getFieldType(70541200);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test397() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test397"); }


    org.joda.time.DateTimeZone var1 = org.joda.time.DateTimeZone.forOffsetMillis(1883);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test398() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test398"); }


    org.joda.time.PeriodType var2 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var3 = new org.joda.time.MutablePeriod(var2);
    org.joda.time.MutablePeriod var4 = new org.joda.time.MutablePeriod((-703463L), (-1L), var2);
    org.joda.time.PeriodType var5 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var6 = new org.joda.time.MutablePeriod(var5);
    var6.addDays(1);
    org.joda.time.Duration var10 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var12 = org.joda.time.Duration.standardHours((-1L));
    boolean var13 = var10.isShorterThan((org.joda.time.ReadableDuration)var12);
    var6.add((org.joda.time.ReadableDuration)var12);
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var12, (org.joda.time.ReadableInstant)var15);
    var16.clear();
    org.joda.time.PeriodType var18 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var19 = new org.joda.time.MutablePeriod(var18);
    var19.addDays(1);
    org.joda.time.Duration var23 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var25 = org.joda.time.Duration.standardHours((-1L));
    boolean var26 = var23.isShorterThan((org.joda.time.ReadableDuration)var25);
    var19.add((org.joda.time.ReadableDuration)var25);
    var16.add((org.joda.time.ReadablePeriod)var19);
    org.joda.time.chrono.JulianChronology var29 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var30 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var29);
    org.joda.time.LocalDate var31 = var30.toLocalDate();
    org.joda.time.MutableDateTime var32 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var33 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var30, (org.joda.time.ReadableInstant)var32);
    org.joda.time.MutableDateTime var34 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var35 = var34.year();
    boolean var36 = var32.isBefore((org.joda.time.ReadableInstant)var34);
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    boolean var41 = var38.isShorterThan((org.joda.time.ReadableDuration)var40);
    org.joda.time.Duration var43 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var45 = org.joda.time.Duration.standardHours((-1L));
    boolean var46 = var43.isShorterThan((org.joda.time.ReadableDuration)var45);
    org.joda.time.Duration var47 = var38.plus((org.joda.time.ReadableDuration)var43);
    var34.add((org.joda.time.ReadableDuration)var43);
    org.joda.time.chrono.JulianChronology var49 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var50 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var49);
    org.joda.time.LocalDate var51 = var50.toLocalDate();
    org.joda.time.MutableDateTime var52 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var53 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var50, (org.joda.time.ReadableInstant)var52);
    org.joda.time.MutableDateTime var54 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var55 = var54.year();
    boolean var56 = var52.isBefore((org.joda.time.ReadableInstant)var54);
    org.joda.time.Interval var57 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var34, (org.joda.time.ReadableInstant)var54);
    boolean var59 = var57.isAfter(10L);
    org.joda.time.MutableDateTime var60 = new org.joda.time.MutableDateTime();
    var60.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var63 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var60.setChronology((org.joda.time.Chronology)var63);
    org.joda.time.Interval var65 = var57.withChronology((org.joda.time.Chronology)var63);
    var16.setPeriod((org.joda.time.ReadableInterval)var57);
    org.joda.time.Duration var68 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var69 = new org.joda.time.MutableDateTime();
    var69.setWeekOfWeekyear(1);
    int var72 = var69.getRoundingMode();
    var69.addMillis(100);
    var69.setSecondOfMinute(10);
    org.joda.time.PeriodType var77 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var78 = new org.joda.time.Period((org.joda.time.ReadableDuration)var68, (org.joda.time.ReadableInstant)var69, var77);
    org.joda.time.Days var79 = var78.toStandardDays();
    org.joda.time.Hours var80 = var79.toStandardHours();
    org.joda.time.Interval var81 = var57.withPeriodBeforeEnd((org.joda.time.ReadablePeriod)var79);
    org.joda.time.Seconds var82 = org.joda.time.Seconds.secondsIn((org.joda.time.ReadableInterval)var81);
    org.joda.time.MutablePeriod var83 = var82.toMutablePeriod();
    var83.setPeriod(12196171, 3, 3, 12, 69781948, 34, 1970, 12196171);
    org.joda.time.format.PeriodFormatter var93 = org.joda.time.format.ISOPeriodFormat.alternate();
    org.joda.time.format.PeriodPrinter var94 = var93.getPrinter();
    java.lang.String var95 = var83.toString(var93);
    java.lang.String var96 = var4.toString(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var95 + "' != '" + "P121961710312T697819483414166.171"+ "'", var95.equals("P121961710312T697819483414166.171"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var96 + "' != '" + "P00000000T001143.462"+ "'", var96.equals("P00000000T001143.462"));

  }

  public void test399() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test399"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.DurationField var2 = var0.years();
    org.joda.time.DateTimeField var3 = var0.era();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test400() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test400"); }


    org.joda.time.chrono.GregorianChronology var0 = org.joda.time.chrono.GregorianChronology.getInstanceUTC();
    org.joda.time.DateTimeField var1 = var0.centuryOfEra();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test401() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test401"); }


    org.joda.time.format.DateTimeFormatter var0 = org.joda.time.format.DateTimeFormat.shortDateTime();
    org.joda.time.TimeOfDay var1 = new org.joda.time.TimeOfDay();
    int var2 = var1.size();
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var5 = var4.hours();
    org.joda.time.LocalTime var6 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var4);
    org.joda.time.LocalTime var8 = var6.withMillisOfSecond(1);
    org.joda.time.LocalTime var10 = var8.minusHours((-1));
    org.joda.time.Years var11 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var1, (org.joda.time.ReadablePartial)var10);
    int var12 = var1.getMillisOfSecond();
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.TimeOfDay var14 = var1.withChronologyRetainFields((org.joda.time.Chronology)var13);
    org.joda.time.format.DateTimeFormatter var15 = var0.withChronology((org.joda.time.Chronology)var13);
    org.joda.time.DateTimeZone var16 = var13.getZone();
    org.joda.time.chrono.JulianChronology var17 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var18 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var17);
    org.joda.time.LocalDate var19 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var17);
    org.joda.time.DateTimeField var20 = var17.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var21 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var22 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var23 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var22);
    org.joda.time.LocalDate var24 = var23.toLocalDate();
    org.joda.time.LocalDate var26 = var24.minusMonths(0);
    int[] var28 = var21.get((org.joda.time.ReadablePartial)var26, 100L);
    org.joda.time.chrono.EthiopicChronology var32 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var33 = var32.hours();
    org.joda.time.LocalTime var34 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var32);
    org.joda.time.Period var35 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var32);
    org.joda.time.DateTimeField var36 = var32.millisOfSecond();
    org.joda.time.DateTimeField var37 = var32.secondOfDay();
    org.joda.time.field.SkipDateTimeField var39 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var21, var37, 100);
    org.joda.time.LocalDateTime var40 = org.joda.time.LocalDateTime.now();
    int var41 = var40.getDayOfYear();
    org.joda.time.Chronology var42 = var40.getChronology();
    int var43 = var40.getYearOfCentury();
    int var44 = var39.getMaximumValue((org.joda.time.ReadablePartial)var40);
    boolean var46 = var39.isLeap(1L);
    org.joda.time.LocalDateTime var47 = org.joda.time.LocalDateTime.now();
    int var48 = var47.getDayOfYear();
    int var49 = var39.getMinimumValue((org.joda.time.ReadablePartial)var47);
    org.joda.time.DurationField var50 = var39.getDurationField();
    org.joda.time.DateTimeFieldType var51 = var39.getType();
    org.joda.time.field.OffsetDateTimeField var55 = new org.joda.time.field.OffsetDateTimeField(var20, var51, 884, 3, 948);
    long var57 = var55.roundCeiling(3L);
    long var59 = var55.roundHalfEven(1377768182707035L);
    org.joda.time.field.SkipDateTimeField var61 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var13, (org.joda.time.DateTimeField)var55, (-1));
    org.joda.time.DurationField var62 = var61.getDurationField();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 110);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 3L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1377768182707035L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test402() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test402"); }


    org.joda.time.format.PeriodFormatterBuilder var0 = new org.joda.time.format.PeriodFormatterBuilder();
    org.joda.time.format.PeriodFormatterBuilder var3 = var0.appendSeparator("T07:00:08", "P121961710312T697819483414166.171");
    org.joda.time.format.PeriodFormatterBuilder var5 = var0.appendSeparatorIfFieldsAfter("days");
    org.joda.time.format.PeriodFormatterBuilder var7 = var0.minimumPrintedDigits(17);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.format.PeriodFormatterBuilder var9 = var0.appendSeparatorIfFieldsBefore("06:47:10.002");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test403() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test403"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    boolean var25 = var18.isLeap(1L);
    org.joda.time.LocalDateTime var26 = org.joda.time.LocalDateTime.now();
    int var27 = var26.getDayOfYear();
    int var28 = var18.getMinimumValue((org.joda.time.ReadablePartial)var26);
    long var31 = var18.addWrapField(9L, 228);
    org.joda.time.LocalDateTime var32 = org.joda.time.LocalDateTime.now();
    int var33 = var32.getDayOfYear();
    org.joda.time.Chronology var34 = var32.getChronology();
    org.joda.time.YearMonthDay var35 = new org.joda.time.YearMonthDay(var34);
    org.joda.time.YearMonth var38 = new org.joda.time.YearMonth(10L);
    org.joda.time.chrono.EthiopicChronology var39 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.YearMonth var40 = var38.withChronologyRetainFields((org.joda.time.Chronology)var39);
    org.joda.time.Years var42 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var43 = var42.getPeriodType();
    org.joda.time.Years var45 = org.joda.time.Years.years((-1));
    int var46 = var42.compareTo((org.joda.time.base.BaseSingleFieldPeriod)var45);
    int[] var49 = var39.get((org.joda.time.ReadablePeriod)var45, 0L, 0L);
    int[] var51 = var18.addWrapPartial((org.joda.time.ReadablePartial)var35, (-9), var49, 0);
    long var54 = var18.set(1377742981L, 759);
    int var57 = var18.getDifference((-1100L), 1377746601520L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 228009L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1296758981L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1377746602));

  }

  public void test404() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test404"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateMidnight var3 = new org.joda.time.DateMidnight(25785, (-59), 200);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }

  }

  public void test405() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test405"); }


    org.joda.time.chrono.EthiopicChronology var3 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var4 = var3.minutes();
    org.joda.time.Chronology var5 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology)var3);
    org.joda.time.TimeOfDay var6 = org.joda.time.TimeOfDay.fromMillisOfDay(80003L, (org.joda.time.Chronology)var3);
    org.joda.time.MutablePeriod var7 = new org.joda.time.MutablePeriod(1377746598784L, 1377742982607L, (org.joda.time.Chronology)var3);
    org.joda.time.MutableInterval var8 = new org.joda.time.MutableInterval();
    long var9 = var8.getEndMillis();
    long var10 = var8.getEndMillis();
    var7.add((org.joda.time.ReadableInterval)var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0L);

  }

  public void test406() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test406"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
    org.joda.time.DurationField var1 = var0.weeks();
    org.joda.time.DateTimeField var2 = var0.dayOfYear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test407() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test407"); }


    org.joda.time.DateTime var0 = org.joda.time.DateTime.now();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.MutableDateTime var4 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var5 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var2, (org.joda.time.ReadableInstant)var4);
    org.joda.time.MutableDateTime var6 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var7 = var6.year();
    boolean var8 = var4.isBefore((org.joda.time.ReadableInstant)var6);
    org.joda.time.MutableDateTime.Property var9 = var6.minuteOfHour();
    org.joda.time.MutableDateTime.Property var10 = var6.millisOfSecond();
    org.joda.time.Chronology var11 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant)var0, (org.joda.time.ReadableInstant)var6);
    org.joda.time.chrono.JulianChronology var12 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var13 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var12);
    org.joda.time.LocalDate var14 = var13.toLocalDate();
    org.joda.time.LocalDate var16 = var14.withMonthOfYear(1);
    org.joda.time.LocalDate var18 = var16.withEra(1);
    org.joda.time.LocalDate.Property var19 = var16.yearOfCentury();
    int var20 = var16.getCenturyOfEra();
    int var21 = var16.getYearOfCentury();
    org.joda.time.DateTime var22 = var0.withFields((org.joda.time.ReadablePartial)var16);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDate var24 = var16.withMonthOfYear(12194);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test408() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test408"); }


    org.joda.time.tz.FixedDateTimeZone var4 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var6 = var4.getOffsetFromLocal(1377742981323L);
    org.joda.time.DateTimeZone var8 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.chrono.JulianChronology var9 = org.joda.time.chrono.JulianChronology.getInstance(var8);
    long var11 = var4.getMillisKeepLocal(var8, 1377746580759L);
    long var13 = var4.nextTransition((-62157023999896L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1377746580754L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-62157023999896L));

  }

  public void test409() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test409"); }


    org.joda.time.LocalDate var1 = new org.joda.time.LocalDate(1377742995355L);
    org.joda.time.LocalDate var3 = var1.minusYears(661);
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.LocalDate var9 = var7.minusMonths(0);
    int[] var11 = var4.get((org.joda.time.ReadablePartial)var9, 100L);
    org.joda.time.chrono.EthiopicChronology var15 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var16 = var15.hours();
    org.joda.time.LocalTime var17 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var15);
    org.joda.time.Period var18 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var15);
    org.joda.time.DateTimeField var19 = var15.millisOfSecond();
    org.joda.time.DateTimeField var20 = var15.secondOfDay();
    org.joda.time.field.SkipDateTimeField var22 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var4, var20, 100);
    org.joda.time.LocalDateTime var23 = org.joda.time.LocalDateTime.now();
    int var24 = var23.getDayOfYear();
    org.joda.time.Chronology var25 = var23.getChronology();
    int var26 = var23.getYearOfCentury();
    int var27 = var22.getMaximumValue((org.joda.time.ReadablePartial)var23);
    boolean var29 = var22.isLeap(1L);
    boolean var30 = var22.isSupported();
    boolean var31 = var1.equals((java.lang.Object)var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test410() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test410"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var24 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var23);
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var26 = var25.year();
    boolean var27 = var23.isBefore((org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var28 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var25);
    org.joda.time.DateTimeZone var29 = var25.getZone();
    org.joda.time.MutableDateTime var30 = org.joda.time.MutableDateTime.now(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test411() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test411"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    org.joda.time.YearMonthDay var4 = var2.plusYears(13);
    org.joda.time.DateTimeZone var6 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.Interval var7 = var2.toInterval(var6);
    org.joda.time.DateMidnight var8 = var2.toDateMidnight();
    org.joda.time.Interval var9 = var2.toInterval();
    int var10 = var2.getDayOfMonth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 23);

  }

  public void test412() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test412"); }


    org.joda.time.DateTimeZone var1 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.DateTimeZone var2 = org.joda.time.DateTimeUtils.getZone(var1);
    org.joda.time.DateMidnight var3 = org.joda.time.DateMidnight.now(var1);
    org.joda.time.DateMidnight var4 = org.joda.time.DateMidnight.now(var1);
    org.joda.time.DateMidnight.Property var5 = var4.era();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test413() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test413"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    int var5 = var2.getRoundingMode();
    var2.addMillis(100);
    var2.setSecondOfMinute(10);
    org.joda.time.PeriodType var10 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var11 = new org.joda.time.Period((org.joda.time.ReadableDuration)var1, (org.joda.time.ReadableInstant)var2, var10);
    org.joda.time.Duration var13 = var1.plus(100L);
    org.joda.time.chrono.JulianChronology var14 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var15 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var14);
    org.joda.time.LocalDate var16 = var15.toLocalDate();
    org.joda.time.MutableDateTime var17 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var18 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var15, (org.joda.time.ReadableInstant)var17);
    org.joda.time.MutableDateTime var19 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var20 = var19.year();
    boolean var21 = var17.isBefore((org.joda.time.ReadableInstant)var19);
    org.joda.time.Duration var23 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var25 = org.joda.time.Duration.standardHours((-1L));
    boolean var26 = var23.isShorterThan((org.joda.time.ReadableDuration)var25);
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var30 = org.joda.time.Duration.standardHours((-1L));
    boolean var31 = var28.isShorterThan((org.joda.time.ReadableDuration)var30);
    org.joda.time.Duration var32 = var23.plus((org.joda.time.ReadableDuration)var28);
    var19.add((org.joda.time.ReadableDuration)var28);
    org.joda.time.MutableDateTime.Property var34 = var19.dayOfWeek();
    var19.addMonths((-9));
    int var37 = var19.getCenturyOfEra();
    org.joda.time.Period var42 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var44 = var42.plusYears((-1));
    org.joda.time.Years var46 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var47 = var46.getPeriodType();
    org.joda.time.Period var48 = var42.normalizedStandard(var47);
    org.joda.time.PeriodType var49 = var47.withMillisRemoved();
    org.joda.time.PeriodType var50 = var47.withYearsRemoved();
    org.joda.time.MutablePeriod var51 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var13, (org.joda.time.ReadableInstant)var19, var47);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var19.setMonthOfYear(948);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test414() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test414"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.DurationField var19 = var18.getRangeDurationField();
    org.joda.time.DurationField var20 = var18.getLeapDurationField();
    long var23 = var18.addWrapField((-3600L), 13);
    org.joda.time.DateTimeField var24 = org.joda.time.field.StrictDateTimeField.getInstance((org.joda.time.DateTimeField)var18);
    int var27 = var18.getDifference((-1L), 1377742992241L);
    java.lang.String var28 = var18.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-86390600L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1377742992));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "DateTimeField[secondOfDay]"+ "'", var28.equals("DateTimeField[secondOfDay]"));

  }

  public void test415() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test415"); }


    org.joda.time.YearMonth var0 = org.joda.time.YearMonth.now();
    org.joda.time.YearMonth.Property var1 = var0.year();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test416() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test416"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.field.PreciseDurationField var22 = new org.joda.time.field.PreciseDurationField(var18, 1L);
    org.joda.time.DurationFieldType var23 = var22.getType();
    org.joda.time.field.UnsupportedDurationField var24 = org.joda.time.field.UnsupportedDurationField.getInstance(var23);
    java.lang.String var25 = var24.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "UnsupportedDurationField[days]"+ "'", var25.equals("UnsupportedDurationField[days]"));

  }

  public void test417() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test417"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.field.PreciseDurationField var22 = new org.joda.time.field.PreciseDurationField(var18, 1L);
    long var25 = var22.getMillis(3, 9L);
    int var28 = var22.getValue(9L, 2762381894421796L);
    long var29 = var22.getUnitMillis();
    long var32 = var22.add(1377746597241L, 1377754981948L);
    org.joda.time.chrono.JulianChronology var33 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var34 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var33);
    org.joda.time.LocalDate var35 = var34.toLocalDate();
    org.joda.time.LocalDate var37 = var35.withMonthOfYear(1);
    org.joda.time.LocalDate var39 = var37.withEra(1);
    org.joda.time.LocalDate.Property var40 = var37.yearOfCentury();
    java.lang.String var41 = var37.toString();
    org.joda.time.DateTimeZone var43 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.YearMonth var44 = new org.joda.time.YearMonth(var43);
    org.joda.time.chrono.IslamicChronology var45 = org.joda.time.chrono.IslamicChronology.getInstance(var43);
    org.joda.time.format.DateTimeFormatter var46 = org.joda.time.format.ISODateTimeFormat.localDateParser();
    org.joda.time.DateTimeZone var47 = var46.getZone();
    java.util.TimeZone var48 = var47.toTimeZone();
    org.joda.time.Chronology var49 = var45.withZone(var47);
    org.joda.time.DateTime var50 = var37.toDateTimeAtCurrentTime(var47);
    boolean var51 = var22.equals((java.lang.Object)var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 3L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 2755501579189L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "1969-01-19"+ "'", var41.equals("1969-01-19"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);

  }

  public void test418() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test418"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.LocalTime var3 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var1);
    org.joda.time.LocalTime var5 = var3.withMillisOfSecond(1);
    org.joda.time.LocalTime var7 = var5.minusHours((-1));
    org.joda.time.Partial var8 = new org.joda.time.Partial((org.joda.time.ReadablePartial)var5);
    org.joda.time.chrono.JulianChronology var9 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var10 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var9);
    org.joda.time.LocalDate var11 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var9);
    org.joda.time.DateTimeField var12 = var9.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var13 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var14 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var15 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var14);
    org.joda.time.LocalDate var16 = var15.toLocalDate();
    org.joda.time.LocalDate var18 = var16.minusMonths(0);
    int[] var20 = var13.get((org.joda.time.ReadablePartial)var18, 100L);
    org.joda.time.chrono.EthiopicChronology var24 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var25 = var24.hours();
    org.joda.time.LocalTime var26 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var24);
    org.joda.time.Period var27 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var24);
    org.joda.time.DateTimeField var28 = var24.millisOfSecond();
    org.joda.time.DateTimeField var29 = var24.secondOfDay();
    org.joda.time.field.SkipDateTimeField var31 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var13, var29, 100);
    org.joda.time.LocalDateTime var32 = org.joda.time.LocalDateTime.now();
    int var33 = var32.getDayOfYear();
    org.joda.time.Chronology var34 = var32.getChronology();
    int var35 = var32.getYearOfCentury();
    int var36 = var31.getMaximumValue((org.joda.time.ReadablePartial)var32);
    boolean var38 = var31.isLeap(1L);
    org.joda.time.LocalDateTime var39 = org.joda.time.LocalDateTime.now();
    int var40 = var39.getDayOfYear();
    int var41 = var31.getMinimumValue((org.joda.time.ReadablePartial)var39);
    org.joda.time.DurationField var42 = var31.getDurationField();
    org.joda.time.DateTimeFieldType var43 = var31.getType();
    org.joda.time.field.OffsetDateTimeField var47 = new org.joda.time.field.OffsetDateTimeField(var12, var43, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var50 = new org.joda.time.IllegalFieldValueException(var43, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.Partial var51 = var8.without(var43);
    org.joda.time.chrono.JulianChronology var52 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var53 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var52);
    org.joda.time.LocalDate var54 = var53.toLocalDate();
    org.joda.time.LocalDate var56 = var54.withMonthOfYear(1);
    org.joda.time.LocalDate var58 = var54.withWeekyear(1);
    org.joda.time.LocalDate var60 = var54.withDayOfYear(1);
    org.joda.time.Duration var62 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var63 = new org.joda.time.MutableDateTime();
    var63.setWeekOfWeekyear(1);
    int var66 = var63.getRoundingMode();
    var63.addMillis(100);
    var63.setSecondOfMinute(10);
    org.joda.time.PeriodType var71 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var72 = new org.joda.time.Period((org.joda.time.ReadableDuration)var62, (org.joda.time.ReadableInstant)var63, var71);
    org.joda.time.Days var73 = var72.toStandardDays();
    org.joda.time.DurationFieldType var74 = var73.getFieldType();
    boolean var75 = var54.isSupported(var74);
    org.joda.time.field.PreciseDurationField var77 = new org.joda.time.field.PreciseDurationField(var74, 1325559981L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Partial var79 = var8.withFieldAddWrapped(var74, 73394);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);

  }

  public void test419() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test419"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.LocalTime var1 = new org.joda.time.LocalTime((org.joda.time.Chronology)var0);
    org.joda.time.LocalDateTime var2 = org.joda.time.LocalDateTime.now();
    int var3 = var2.getDayOfYear();
    org.joda.time.Chronology var4 = var2.getChronology();
    int var5 = var2.getYearOfCentury();
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var8 = new org.joda.time.MutableDateTime();
    var8.setWeekOfWeekyear(1);
    int var11 = var8.getRoundingMode();
    var8.addMillis(100);
    var8.setSecondOfMinute(10);
    org.joda.time.PeriodType var16 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var17 = new org.joda.time.Period((org.joda.time.ReadableDuration)var7, (org.joda.time.ReadableInstant)var8, var16);
    org.joda.time.Days var18 = var17.toStandardDays();
    boolean var19 = var2.equals((java.lang.Object)var18);
    org.joda.time.LocalTime var20 = var1.plus((org.joda.time.ReadablePeriod)var18);
    int var21 = var18.getDays();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);

  }

  public void test420() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test420"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.DateTimeField var8 = var0.yearOfEra();
    org.joda.time.LocalDate var9 = new org.joda.time.LocalDate((org.joda.time.Chronology)var0);
    org.joda.time.format.DateTimeFormatterBuilder var10 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var12 = var10.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var15 = var10.appendYear(23, 8);
    org.joda.time.format.DateTimeFormatterBuilder var17 = var15.appendWeekOfWeekyear(13);
    org.joda.time.format.DateTimeFormatter var18 = org.joda.time.format.ISODateTimeFormat.yearMonth();
    org.joda.time.format.DateTimeFormatterBuilder var19 = var17.append(var18);
    org.joda.time.format.DateTimePrinter var20 = var19.toPrinter();
    org.joda.time.format.DateTimeFormatterBuilder var21 = var19.appendHalfdayOfDayText();
    org.joda.time.format.DateTimeFormatterBuilder var23 = var19.appendMinuteOfHour(951);
    org.joda.time.format.DateTimeFormatterBuilder var24 = var23.appendDayOfWeekText();
    org.joda.time.LocalDateTime var25 = org.joda.time.LocalDateTime.now();
    int var26 = var25.getDayOfYear();
    org.joda.time.LocalDateTime var28 = var25.minusSeconds(2005);
    org.joda.time.Chronology var29 = var25.getChronology();
    org.joda.time.DateTimeZone var31 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.MutableDateTime var32 = org.joda.time.MutableDateTime.now(var31);
    org.joda.time.DateTime var33 = var25.toDateTime(var31);
    int var34 = var25.getSecondOfMinute();
    org.joda.time.DateTime var35 = var25.toDateTime();
    org.joda.time.format.DateTimeFormatterBuilder var36 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var38 = var36.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var40 = var36.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var41 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var42 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var41);
    org.joda.time.LocalDate var43 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var41);
    org.joda.time.DateTimeField var44 = var41.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var45 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var46 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var47 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var46);
    org.joda.time.LocalDate var48 = var47.toLocalDate();
    org.joda.time.LocalDate var50 = var48.minusMonths(0);
    int[] var52 = var45.get((org.joda.time.ReadablePartial)var50, 100L);
    org.joda.time.chrono.EthiopicChronology var56 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var57 = var56.hours();
    org.joda.time.LocalTime var58 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var56);
    org.joda.time.Period var59 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var56);
    org.joda.time.DateTimeField var60 = var56.millisOfSecond();
    org.joda.time.DateTimeField var61 = var56.secondOfDay();
    org.joda.time.field.SkipDateTimeField var63 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var45, var61, 100);
    org.joda.time.LocalDateTime var64 = org.joda.time.LocalDateTime.now();
    int var65 = var64.getDayOfYear();
    org.joda.time.Chronology var66 = var64.getChronology();
    int var67 = var64.getYearOfCentury();
    int var68 = var63.getMaximumValue((org.joda.time.ReadablePartial)var64);
    boolean var70 = var63.isLeap(1L);
    org.joda.time.LocalDateTime var71 = org.joda.time.LocalDateTime.now();
    int var72 = var71.getDayOfYear();
    int var73 = var63.getMinimumValue((org.joda.time.ReadablePartial)var71);
    org.joda.time.DurationField var74 = var63.getDurationField();
    org.joda.time.DateTimeFieldType var75 = var63.getType();
    org.joda.time.field.OffsetDateTimeField var79 = new org.joda.time.field.OffsetDateTimeField(var44, var75, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var82 = new org.joda.time.IllegalFieldValueException(var75, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var85 = var36.appendFraction(var75, 33, (-948));
    org.joda.time.chrono.EthiopicChronology var86 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var87 = var86.minutes();
    org.joda.time.DateTimeField var88 = var86.year();
    org.joda.time.DurationField var89 = var86.hours();
    org.joda.time.field.UnsupportedDateTimeField var90 = org.joda.time.field.UnsupportedDateTimeField.getInstance(var75, var89);
    boolean var91 = var25.isSupported(var75);
    org.joda.time.format.DateTimeFormatterBuilder var94 = var24.appendDecimal(var75, 15, 44);
    boolean var95 = var9.equals((java.lang.Object)var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);

  }

  public void test421() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test421"); }


    org.joda.time.Years var1 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var2 = var1.getPeriodType();
    org.joda.time.Years var4 = org.joda.time.Years.years((-1));
    int var5 = var1.compareTo((org.joda.time.base.BaseSingleFieldPeriod)var4);
    org.joda.time.Years var7 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var8 = var7.getPeriodType();
    org.joda.time.Years var9 = var4.minus(var7);
    org.joda.time.Years var11 = var4.dividedBy(51);
    org.joda.time.Years var12 = var4.negated();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test422() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test422"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.Months var6 = org.joda.time.Months.months((-1));
    org.joda.time.Months var8 = var6.plus(100);
    int var9 = var6.size();
    org.joda.time.LocalDate var10 = var2.plus((org.joda.time.ReadablePeriod)var6);
    org.joda.time.Months var11 = var6.negated();
    int var12 = var6.getMonths();
    org.joda.time.PeriodType var13 = var6.getPeriodType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test423() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test423"); }


    org.joda.time.DateTimeZone var1 = org.joda.time.DateTimeZone.forOffsetMillis(24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test424() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test424"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    var0.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var0.setChronology((org.joda.time.Chronology)var3);
    org.joda.time.DateTimeField var5 = var3.clockhourOfHalfday();
    org.joda.time.format.DateTimeFormatterBuilder var6 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var8 = var6.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var10 = var6.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var11 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var12 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var11);
    org.joda.time.LocalDate var13 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var14 = var11.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var15 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var16 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var17 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var16);
    org.joda.time.LocalDate var18 = var17.toLocalDate();
    org.joda.time.LocalDate var20 = var18.minusMonths(0);
    int[] var22 = var15.get((org.joda.time.ReadablePartial)var20, 100L);
    org.joda.time.chrono.EthiopicChronology var26 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var27 = var26.hours();
    org.joda.time.LocalTime var28 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var26);
    org.joda.time.Period var29 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var26);
    org.joda.time.DateTimeField var30 = var26.millisOfSecond();
    org.joda.time.DateTimeField var31 = var26.secondOfDay();
    org.joda.time.field.SkipDateTimeField var33 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var15, var31, 100);
    org.joda.time.LocalDateTime var34 = org.joda.time.LocalDateTime.now();
    int var35 = var34.getDayOfYear();
    org.joda.time.Chronology var36 = var34.getChronology();
    int var37 = var34.getYearOfCentury();
    int var38 = var33.getMaximumValue((org.joda.time.ReadablePartial)var34);
    boolean var40 = var33.isLeap(1L);
    org.joda.time.LocalDateTime var41 = org.joda.time.LocalDateTime.now();
    int var42 = var41.getDayOfYear();
    int var43 = var33.getMinimumValue((org.joda.time.ReadablePartial)var41);
    org.joda.time.DurationField var44 = var33.getDurationField();
    org.joda.time.DateTimeFieldType var45 = var33.getType();
    org.joda.time.field.OffsetDateTimeField var49 = new org.joda.time.field.OffsetDateTimeField(var14, var45, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var52 = new org.joda.time.IllegalFieldValueException(var45, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var55 = var6.appendFraction(var45, 33, (-948));
    org.joda.time.field.DividedDateTimeField var57 = new org.joda.time.field.DividedDateTimeField(var5, var45, 100);
    int var60 = var57.getDifference(1377742992740L, 1377746591916L);
    int var63 = var57.getDifference(1377769560460016L, (-86386600L));
    long var66 = var57.getDifferenceAsLong(1377746599386L, 2755493215861L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var69 = var57.set((-703463L), 26);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 3827137);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == (-3827L));

  }

  public void test425() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test425"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.LocalTime var3 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var1);
    org.joda.time.LocalTime var5 = var3.withMillisOfSecond(1);
    org.joda.time.LocalTime var6 = org.joda.time.LocalTime.now();
    boolean var7 = var5.isAfter((org.joda.time.ReadablePartial)var6);
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var8);
    org.joda.time.LocalDate var10 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var8);
    org.joda.time.DurationField var11 = var8.hours();
    boolean var12 = var6.equals((java.lang.Object)var8);
    org.joda.time.DurationField var13 = var8.centuries();
    org.joda.time.DurationField var14 = var8.weekyears();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test426() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test426"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.LocalDateTime var3 = var0.minusSeconds(2005);
    org.joda.time.Chronology var4 = var0.getChronology();
    org.joda.time.DateTimeZone var6 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.MutableDateTime var7 = org.joda.time.MutableDateTime.now(var6);
    org.joda.time.DateTime var8 = var0.toDateTime(var6);
    int var9 = var0.getSecondOfMinute();
    org.joda.time.LocalDateTime var11 = var0.minusHours(240);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test427() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test427"); }


    org.joda.time.YearMonth var2 = new org.joda.time.YearMonth(10L);
    org.joda.time.chrono.EthiopicChronology var3 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.YearMonth var4 = var2.withChronologyRetainFields((org.joda.time.Chronology)var3);
    org.joda.time.Years var6 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var7 = var6.getPeriodType();
    org.joda.time.Years var9 = org.joda.time.Years.years((-1));
    int var10 = var6.compareTo((org.joda.time.base.BaseSingleFieldPeriod)var9);
    int[] var13 = var3.get((org.joda.time.ReadablePeriod)var9, 0L, 0L);
    org.joda.time.LocalDate var14 = new org.joda.time.LocalDate(3L, (org.joda.time.Chronology)var3);
    org.joda.time.LocalDate var16 = var14.minusWeeks(7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test428() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test428"); }


    org.joda.time.LocalTime var0 = new org.joda.time.LocalTime();
    org.joda.time.LocalTime var2 = var0.plusSeconds(100);
    org.joda.time.LocalTime.Property var3 = var2.secondOfMinute();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test429() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test429"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.LocalTime var3 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var1);
    org.joda.time.LocalTime var5 = var3.withMillisOfSecond(1);
    org.joda.time.LocalTime var7 = var5.minusHours((-1));
    org.joda.time.LocalTime var9 = var5.plusMillis(4);
    org.joda.time.TimeOfDay var10 = new org.joda.time.TimeOfDay();
    int var11 = var10.size();
    org.joda.time.chrono.EthiopicChronology var13 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var14 = var13.hours();
    org.joda.time.LocalTime var15 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var13);
    org.joda.time.LocalTime var17 = var15.withMillisOfSecond(1);
    org.joda.time.LocalTime var19 = var17.minusHours((-1));
    org.joda.time.Years var20 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var10, (org.joda.time.ReadablePartial)var19);
    org.joda.time.chrono.EthiopicChronology var21 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var22 = var21.dayOfYear();
    org.joda.time.YearMonthDay var23 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var21);
    org.joda.time.TimeOfDay var24 = var10.withChronologyRetainFields((org.joda.time.Chronology)var21);
    org.joda.time.TimeOfDay var26 = var24.plusMillis(2005);
    java.lang.String var27 = var24.toString();
    org.joda.time.TimeOfDay var29 = var24.plusSeconds(4);
    boolean var30 = var9.isBefore((org.joda.time.ReadablePartial)var24);
    org.joda.time.TimeOfDay var32 = var24.minusMillis(884);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.TimeOfDay var34 = var32.withMinuteOfHour((-1377746602));
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "T00:00:00.110"+ "'", var27.equals("T00:00:00.110"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test430() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test430"); }


    org.joda.time.LocalDate var1 = org.joda.time.LocalDate.parse("1969-12");
    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var3 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var2);
    org.joda.time.LocalDate var4 = var3.toLocalDate();
    org.joda.time.LocalDate var6 = var4.withMonthOfYear(1);
    org.joda.time.LocalDate var8 = var6.withEra(1);
    org.joda.time.chrono.JulianChronology var9 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var10 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var9);
    org.joda.time.Period var15 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var17 = var15.plusSeconds(100);
    org.joda.time.Period var19 = var15.minusMillis(10);
    boolean var20 = var10.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var21 = var10.dayOfYear();
    org.joda.time.chrono.JulianChronology var22 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var23 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var22);
    org.joda.time.LocalDate var24 = var23.toLocalDate();
    org.joda.time.LocalDate var26 = var24.minusMonths(0);
    org.joda.time.DateTime var27 = var24.toDateTimeAtMidnight();
    org.joda.time.DateTime var29 = var27.withCenturyOfEra(4);
    org.joda.time.Days var30 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var10, (org.joda.time.ReadableInstant)var29);
    org.joda.time.DateMidnight var32 = var10.plusMonths(10);
    org.joda.time.DateTimeZone var34 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.MutableDateTime var35 = org.joda.time.MutableDateTime.now(var34);
    org.joda.time.DateMidnight var36 = var10.withZoneRetainFields(var34);
    org.joda.time.DateTime var37 = var8.toDateTimeAtMidnight(var34);
    org.joda.time.DateTime var38 = var1.toDateTimeAtCurrentTime(var34);
    org.joda.time.DateTime.Property var39 = var38.year();
    org.joda.time.chrono.EthiopicChronology var40 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var41 = var40.hours();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MonthDay var42 = new org.joda.time.MonthDay((java.lang.Object)var39, (org.joda.time.Chronology)var40);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test431() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test431"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var2.appendDayOfWeek(8400);
    org.joda.time.format.DateTimeFormatterBuilder var7 = var2.appendWeekyear(2057, 26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test432() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test432"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    var1.addDays(1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    var1.add((org.joda.time.ReadableDuration)var7);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var7, (org.joda.time.ReadableInstant)var10);
    var11.clear();
    org.joda.time.MutableDateTime var13 = new org.joda.time.MutableDateTime();
    org.joda.time.chrono.JulianChronology var14 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var15 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var14);
    org.joda.time.LocalDate var16 = var15.toLocalDate();
    org.joda.time.MutableDateTime var17 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var18 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var15, (org.joda.time.ReadableInstant)var17);
    org.joda.time.MutableDateTime var19 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var20 = var19.year();
    boolean var21 = var17.isBefore((org.joda.time.ReadableInstant)var19);
    org.joda.time.Duration var23 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var25 = org.joda.time.Duration.standardHours((-1L));
    boolean var26 = var23.isShorterThan((org.joda.time.ReadableDuration)var25);
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var30 = org.joda.time.Duration.standardHours((-1L));
    boolean var31 = var28.isShorterThan((org.joda.time.ReadableDuration)var30);
    org.joda.time.Duration var32 = var23.plus((org.joda.time.ReadableDuration)var28);
    var19.add((org.joda.time.ReadableDuration)var28);
    org.joda.time.MutableDateTime.Property var34 = var19.dayOfWeek();
    var11.setPeriod((org.joda.time.ReadableInstant)var13, (org.joda.time.ReadableInstant)var19);
    org.joda.time.chrono.JulianChronology var36 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var37 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var36);
    org.joda.time.LocalDate var38 = var37.toLocalDate();
    org.joda.time.MutableDateTime var39 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var40 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var37, (org.joda.time.ReadableInstant)var39);
    org.joda.time.chrono.JulianChronology var41 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var42 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var41);
    org.joda.time.LocalDate var43 = var42.toLocalDate();
    org.joda.time.MutableDateTime var44 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var45 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var42, (org.joda.time.ReadableInstant)var44);
    org.joda.time.MutableDateTime var46 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var47 = var46.year();
    boolean var48 = var44.isBefore((org.joda.time.ReadableInstant)var46);
    org.joda.time.Duration var50 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var52 = org.joda.time.Duration.standardHours((-1L));
    boolean var53 = var50.isShorterThan((org.joda.time.ReadableDuration)var52);
    org.joda.time.Duration var55 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var57 = org.joda.time.Duration.standardHours((-1L));
    boolean var58 = var55.isShorterThan((org.joda.time.ReadableDuration)var57);
    org.joda.time.Duration var59 = var50.plus((org.joda.time.ReadableDuration)var55);
    var46.add((org.joda.time.ReadableDuration)var55);
    org.joda.time.Seconds var61 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var37, (org.joda.time.ReadableInstant)var46);
    org.joda.time.Seconds var62 = var61.negated();
    var11.mergePeriod((org.joda.time.ReadablePeriod)var62);
    int var64 = var11.getMinutes();
    var11.setWeeks(379);
    java.lang.String var67 = var11.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "P379WT-1H3599S"+ "'", var67.equals("P379WT-1H3599S"));

  }

  public void test433() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test433"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.DateMidnight var6 = var1.withWeekOfWeekyear(35);
    org.joda.time.chrono.JulianChronology var7 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var8 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var7);
    org.joda.time.LocalDate var9 = var8.toLocalDate();
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var11 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var8, (org.joda.time.ReadableInstant)var10);
    org.joda.time.chrono.JulianChronology var12 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var13 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var12);
    org.joda.time.LocalDate var14 = var13.toLocalDate();
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var16 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var13, (org.joda.time.ReadableInstant)var15);
    org.joda.time.MutableDateTime var17 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var18 = var17.year();
    boolean var19 = var15.isBefore((org.joda.time.ReadableInstant)var17);
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var23 = org.joda.time.Duration.standardHours((-1L));
    boolean var24 = var21.isShorterThan((org.joda.time.ReadableDuration)var23);
    org.joda.time.Duration var26 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    boolean var29 = var26.isShorterThan((org.joda.time.ReadableDuration)var28);
    org.joda.time.Duration var30 = var21.plus((org.joda.time.ReadableDuration)var26);
    var17.add((org.joda.time.ReadableDuration)var26);
    org.joda.time.Seconds var32 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var8, (org.joda.time.ReadableInstant)var17);
    org.joda.time.Duration var33 = var32.toStandardDuration();
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var37 = org.joda.time.Duration.standardHours((-1L));
    boolean var38 = var35.isShorterThan((org.joda.time.ReadableDuration)var37);
    org.joda.time.Duration var39 = var35.toDuration();
    boolean var40 = var33.isShorterThan((org.joda.time.ReadableDuration)var39);
    org.joda.time.Duration var42 = var39.withMillis(228009L);
    org.joda.time.Period var43 = new org.joda.time.Period((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableDuration)var39);
    org.joda.time.Instant var44 = var1.toInstant();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test434() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test434"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    var1.addDays(1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    var1.add((org.joda.time.ReadableDuration)var7);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var7, (org.joda.time.ReadableInstant)var10);
    var11.clear();
    org.joda.time.PeriodType var13 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var14 = new org.joda.time.MutablePeriod(var13);
    var14.addDays(1);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    boolean var21 = var18.isShorterThan((org.joda.time.ReadableDuration)var20);
    var14.add((org.joda.time.ReadableDuration)var20);
    var11.add((org.joda.time.ReadablePeriod)var14);
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.LocalDate var26 = var25.toLocalDate();
    org.joda.time.MutableDateTime var27 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var28 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var25, (org.joda.time.ReadableInstant)var27);
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var30 = var29.year();
    boolean var31 = var27.isBefore((org.joda.time.ReadableInstant)var29);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    boolean var41 = var38.isShorterThan((org.joda.time.ReadableDuration)var40);
    org.joda.time.Duration var42 = var33.plus((org.joda.time.ReadableDuration)var38);
    var29.add((org.joda.time.ReadableDuration)var38);
    org.joda.time.chrono.JulianChronology var44 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var45 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var44);
    org.joda.time.LocalDate var46 = var45.toLocalDate();
    org.joda.time.MutableDateTime var47 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var48 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var45, (org.joda.time.ReadableInstant)var47);
    org.joda.time.MutableDateTime var49 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var50 = var49.year();
    boolean var51 = var47.isBefore((org.joda.time.ReadableInstant)var49);
    org.joda.time.Interval var52 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var29, (org.joda.time.ReadableInstant)var49);
    boolean var54 = var52.isAfter(10L);
    org.joda.time.MutableDateTime var55 = new org.joda.time.MutableDateTime();
    var55.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var58 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var55.setChronology((org.joda.time.Chronology)var58);
    org.joda.time.Interval var60 = var52.withChronology((org.joda.time.Chronology)var58);
    var11.setPeriod((org.joda.time.ReadableInterval)var52);
    org.joda.time.Duration var63 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var64 = new org.joda.time.MutableDateTime();
    var64.setWeekOfWeekyear(1);
    int var67 = var64.getRoundingMode();
    var64.addMillis(100);
    var64.setSecondOfMinute(10);
    org.joda.time.PeriodType var72 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var73 = new org.joda.time.Period((org.joda.time.ReadableDuration)var63, (org.joda.time.ReadableInstant)var64, var72);
    org.joda.time.Days var74 = var73.toStandardDays();
    org.joda.time.Hours var75 = var74.toStandardHours();
    org.joda.time.Interval var76 = var52.withPeriodBeforeEnd((org.joda.time.ReadablePeriod)var74);
    org.joda.time.Seconds var77 = org.joda.time.Seconds.secondsIn((org.joda.time.ReadableInterval)var76);
    boolean var78 = var76.isBeforeNow();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);

  }

  public void test435() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test435"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var24 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var23);
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var26 = var25.year();
    boolean var27 = var23.isBefore((org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var28 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var25);
    boolean var30 = var28.isAfter(10L);
    org.joda.time.MutableDateTime var31 = new org.joda.time.MutableDateTime();
    var31.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var34 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var31.setChronology((org.joda.time.Chronology)var34);
    org.joda.time.Interval var36 = var28.withChronology((org.joda.time.Chronology)var34);
    org.joda.time.Weeks var37 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval)var36);
    org.joda.time.PeriodType var38 = org.joda.time.PeriodType.hours();
    org.joda.time.Period var39 = var36.toPeriod(var38);
    org.joda.time.chrono.JulianChronology var40 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var41 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var40);
    org.joda.time.LocalDate var42 = var41.toLocalDate();
    org.joda.time.MutableDateTime var43 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var44 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var41, (org.joda.time.ReadableInstant)var43);
    org.joda.time.chrono.JulianChronology var45 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var46 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var45);
    org.joda.time.LocalDate var47 = var46.toLocalDate();
    org.joda.time.MutableDateTime var48 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var49 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var46, (org.joda.time.ReadableInstant)var48);
    org.joda.time.MutableDateTime var50 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var51 = var50.year();
    boolean var52 = var48.isBefore((org.joda.time.ReadableInstant)var50);
    org.joda.time.Duration var54 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var56 = org.joda.time.Duration.standardHours((-1L));
    boolean var57 = var54.isShorterThan((org.joda.time.ReadableDuration)var56);
    org.joda.time.Duration var59 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var61 = org.joda.time.Duration.standardHours((-1L));
    boolean var62 = var59.isShorterThan((org.joda.time.ReadableDuration)var61);
    org.joda.time.Duration var63 = var54.plus((org.joda.time.ReadableDuration)var59);
    var50.add((org.joda.time.ReadableDuration)var59);
    org.joda.time.Seconds var65 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var41, (org.joda.time.ReadableInstant)var50);
    org.joda.time.Weeks var66 = var65.toStandardWeeks();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Interval var67 = var36.withPeriodBeforeEnd((org.joda.time.ReadablePeriod)var65);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test436() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test436"); }


    org.joda.time.Period var2 = new org.joda.time.Period(10L, 1L);
    org.joda.time.Period var4 = var2.withHours(216);
    org.joda.time.Period var6 = var2.withSeconds(44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test437() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test437"); }


    org.joda.time.chrono.BuddhistChronology var0 = org.joda.time.chrono.BuddhistChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.era();
    org.joda.time.DateTimeField var2 = var0.dayOfYear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test438() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test438"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.field.PreciseDurationField var22 = new org.joda.time.field.PreciseDurationField(var18, 1L);
    long var25 = var22.getMillis(3, 9L);
    long var27 = var22.getMillis((-1377734400000L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 3L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1377734400000L));

  }

  public void test439() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test439"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.format.DateTimeFormatterBuilder var5 = var4.appendTimeZoneId();
    org.joda.time.format.DateTimeFormatter var6 = var4.toFormatter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test440() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test440"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDate var3 = new org.joda.time.LocalDate(15, 2057, 241);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }

  }

  public void test441() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test441"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var0);
    org.joda.time.DateTimeField var3 = var0.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.LocalDate var9 = var7.minusMonths(0);
    int[] var11 = var4.get((org.joda.time.ReadablePartial)var9, 100L);
    org.joda.time.chrono.EthiopicChronology var15 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var16 = var15.hours();
    org.joda.time.LocalTime var17 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var15);
    org.joda.time.Period var18 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var15);
    org.joda.time.DateTimeField var19 = var15.millisOfSecond();
    org.joda.time.DateTimeField var20 = var15.secondOfDay();
    org.joda.time.field.SkipDateTimeField var22 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var4, var20, 100);
    org.joda.time.LocalDateTime var23 = org.joda.time.LocalDateTime.now();
    int var24 = var23.getDayOfYear();
    org.joda.time.Chronology var25 = var23.getChronology();
    int var26 = var23.getYearOfCentury();
    int var27 = var22.getMaximumValue((org.joda.time.ReadablePartial)var23);
    boolean var29 = var22.isLeap(1L);
    org.joda.time.LocalDateTime var30 = org.joda.time.LocalDateTime.now();
    int var31 = var30.getDayOfYear();
    int var32 = var22.getMinimumValue((org.joda.time.ReadablePartial)var30);
    org.joda.time.DurationField var33 = var22.getDurationField();
    org.joda.time.DateTimeFieldType var34 = var22.getType();
    org.joda.time.field.OffsetDateTimeField var38 = new org.joda.time.field.OffsetDateTimeField(var3, var34, 884, 3, 948);
    boolean var40 = var38.isLeap(4133240044002L);
    org.joda.time.DurationField var41 = var38.getLeapDurationField();
    long var44 = var38.add(1377742992740L, 318);
    int var47 = var38.getDifference((-3827L), 1324800000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1377742993058L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1324803827));

  }

  public void test442() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test442"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    boolean var25 = var18.isLeap(1L);
    org.joda.time.LocalDateTime var26 = org.joda.time.LocalDateTime.now();
    int var27 = var26.getDayOfYear();
    int var28 = var18.getMinimumValue((org.joda.time.ReadablePartial)var26);
    long var31 = var18.addWrapField(1000L, 15795333);
    int var32 = var18.getMaximumValue();
    java.lang.String var34 = var18.getAsShortText(15946L);
    org.joda.time.MutableDateTime var35 = new org.joda.time.MutableDateTime();
    var35.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var38 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var35.setChronology((org.joda.time.Chronology)var38);
    org.joda.time.DateTimeField var40 = var38.clockhourOfHalfday();
    org.joda.time.YearMonth var41 = new org.joda.time.YearMonth((org.joda.time.Chronology)var38);
    java.lang.String var43 = var41.toString("days");
    org.joda.time.chrono.EthiopicChronology var44 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var45 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var46 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var45);
    org.joda.time.LocalDate var47 = var46.toLocalDate();
    org.joda.time.LocalDate var49 = var47.minusMonths(0);
    int[] var51 = var44.get((org.joda.time.ReadablePartial)var49, 100L);
    org.joda.time.chrono.EthiopicChronology var55 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var56 = var55.hours();
    org.joda.time.LocalTime var57 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var55);
    org.joda.time.Period var58 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var55);
    org.joda.time.DateTimeField var59 = var55.millisOfSecond();
    org.joda.time.DateTimeField var60 = var55.secondOfDay();
    org.joda.time.field.SkipDateTimeField var62 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var44, var60, 100);
    org.joda.time.LocalDateTime var63 = org.joda.time.LocalDateTime.now();
    int var64 = var63.getDayOfYear();
    org.joda.time.Chronology var65 = var63.getChronology();
    int var66 = var63.getYearOfCentury();
    int var67 = var62.getMaximumValue((org.joda.time.ReadablePartial)var63);
    boolean var69 = var62.isLeap(1L);
    org.joda.time.LocalDateTime var70 = org.joda.time.LocalDateTime.now();
    int var71 = var70.getDayOfYear();
    int var72 = var62.getMinimumValue((org.joda.time.ReadablePartial)var70);
    long var75 = var62.addWrapField(9L, 228);
    org.joda.time.LocalDateTime var76 = org.joda.time.LocalDateTime.now();
    int var77 = var76.getDayOfYear();
    org.joda.time.Chronology var78 = var76.getChronology();
    org.joda.time.YearMonthDay var79 = new org.joda.time.YearMonthDay(var78);
    org.joda.time.YearMonth var82 = new org.joda.time.YearMonth(10L);
    org.joda.time.chrono.EthiopicChronology var83 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.YearMonth var84 = var82.withChronologyRetainFields((org.joda.time.Chronology)var83);
    org.joda.time.Years var86 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var87 = var86.getPeriodType();
    org.joda.time.Years var89 = org.joda.time.Years.years((-1));
    int var90 = var86.compareTo((org.joda.time.base.BaseSingleFieldPeriod)var89);
    int[] var93 = var83.get((org.joda.time.ReadablePeriod)var89, 0L, 0L);
    int[] var95 = var62.addWrapPartial((org.joda.time.ReadablePartial)var79, (-9), var93, 0);
    int var96 = var18.getMaximumValue((org.joda.time.ReadablePartial)var41, var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 70534000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "16"+ "'", var34.equals("16"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "\uFFFD\uFFFD1969\uFFFD"+ "'", var43.equals("\uFFFD\uFFFD1969\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 228009L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == 86399);

  }

  public void test443() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test443"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var5 = var0.appendYear(23, 8);
    org.joda.time.format.DateTimeFormatterBuilder var7 = var5.appendWeekOfWeekyear(13);
    org.joda.time.format.DateTimeFormatter var8 = org.joda.time.format.ISODateTimeFormat.yearMonth();
    org.joda.time.format.DateTimeFormatterBuilder var9 = var7.append(var8);
    org.joda.time.format.DateTimeFormatterBuilder var12 = var9.appendFractionOfHour(41, 765);
    org.joda.time.format.DateTimeFormatterBuilder var14 = var9.appendMonthOfYear(73394);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test444() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test444"); }


    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.withMonthOfYear(1);
    org.joda.time.LocalDate var7 = var5.withEra(1);
    org.joda.time.LocalDate.Property var8 = var5.yearOfCentury();
    org.joda.time.Period var13 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var15 = var13.plusYears((-1));
    org.joda.time.Minutes var16 = var13.toStandardMinutes();
    org.joda.time.Minutes var18 = org.joda.time.Minutes.minutes(10);
    org.joda.time.Minutes var19 = var16.minus(var18);
    org.joda.time.PeriodType var20 = var16.getPeriodType();
    boolean var21 = var5.equals((java.lang.Object)var20);
    org.joda.time.chrono.JulianChronology var22 = org.joda.time.chrono.JulianChronology.getInstance();
    org.joda.time.MutablePeriod var23 = new org.joda.time.MutablePeriod(9L, var20, (org.joda.time.Chronology)var22);
    org.joda.time.Duration var25 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    boolean var28 = var25.isShorterThan((org.joda.time.ReadableDuration)var27);
    org.joda.time.Duration var29 = var25.toDuration();
    org.joda.time.Duration var31 = org.joda.time.Duration.standardHours((-1L));
    boolean var32 = var29.isShorterThan((org.joda.time.ReadableDuration)var31);
    org.joda.time.chrono.GJChronology var33 = org.joda.time.chrono.GJChronology.getInstanceUTC();
    java.lang.String var34 = var33.toString();
    org.joda.time.DurationField var35 = var33.eras();
    org.joda.time.Chronology var36 = var33.withUTC();
    var23.setPeriod((org.joda.time.ReadableDuration)var31, (org.joda.time.Chronology)var33);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var45 = var33.getDateTimeMillis(402, 57, 240, 28, 47, 765, 893);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "GJChronology[UTC]"+ "'", var34.equals("GJChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test445() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test445"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    long var26 = var18.addWrapField(1377746581334L, 100);
    org.joda.time.DurationField var27 = var18.getRangeDurationField();
    org.joda.time.chrono.JulianChronology var28 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var29 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var28);
    org.joda.time.DateMidnight var31 = var29.plusDays(2013);
    org.joda.time.chrono.JulianChronology var32 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var33 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var32);
    org.joda.time.LocalDate var34 = var33.toLocalDate();
    org.joda.time.DateMidnight var36 = var33.minusWeeks((-1));
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var39 = new org.joda.time.MutableDateTime();
    var39.setWeekOfWeekyear(1);
    int var42 = var39.getRoundingMode();
    var39.addMillis(100);
    var39.setSecondOfMinute(10);
    org.joda.time.PeriodType var47 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var48 = new org.joda.time.Period((org.joda.time.ReadableDuration)var38, (org.joda.time.ReadableInstant)var39, var47);
    org.joda.time.Days var49 = var48.toStandardDays();
    org.joda.time.DurationFieldType var50 = var49.getFieldType();
    org.joda.time.DateMidnight var52 = var36.withFieldAdded(var50, 1);
    org.joda.time.field.PreciseDurationField var54 = new org.joda.time.field.PreciseDurationField(var50, 1L);
    org.joda.time.DateMidnight var56 = var31.withFieldAdded(var50, 228);
    org.joda.time.field.DecoratedDurationField var57 = new org.joda.time.field.DecoratedDurationField(var27, var50);
    long var60 = var57.add(1377746681334L, 9);
    org.joda.time.Duration var62 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var63 = new org.joda.time.MutableDateTime();
    var63.setWeekOfWeekyear(1);
    int var66 = var63.getRoundingMode();
    var63.addMillis(100);
    var63.setSecondOfMinute(10);
    org.joda.time.PeriodType var71 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var72 = new org.joda.time.Period((org.joda.time.ReadableDuration)var62, (org.joda.time.ReadableInstant)var63, var71);
    org.joda.time.Days var73 = var72.toStandardDays();
    org.joda.time.DurationFieldType var74 = var73.getFieldType();
    org.joda.time.field.DecoratedDurationField var75 = new org.joda.time.field.DecoratedDurationField((org.joda.time.DurationField)var57, var74);
    org.joda.time.field.UnsupportedDurationField var76 = org.joda.time.field.UnsupportedDurationField.getInstance(var74);
    java.lang.String var77 = var76.getName();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var79 = var76.getValueAsLong((-86386600L));
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1377746681334L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1378524281334L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "days"+ "'", var77.equals("days"));

  }

  public void test446() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test446"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    int var3 = var2.getDayOfMonth();
    int var4 = var2.getDayOfMonth();
    org.joda.time.tz.FixedDateTimeZone var9 = new org.joda.time.tz.FixedDateTimeZone("PT0H", "ISOChronology[UTC]", 100, 13);
    org.joda.time.PeriodType var10 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var11 = new org.joda.time.MutablePeriod(var10);
    var11.addDays(1);
    org.joda.time.Duration var15 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var17 = org.joda.time.Duration.standardHours((-1L));
    boolean var18 = var15.isShorterThan((org.joda.time.ReadableDuration)var17);
    var11.add((org.joda.time.ReadableDuration)var17);
    org.joda.time.MutableDateTime var20 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var21 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var17, (org.joda.time.ReadableInstant)var20);
    var21.clear();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.LocalDate var26 = var25.toLocalDate();
    org.joda.time.MutableDateTime var27 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var28 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var25, (org.joda.time.ReadableInstant)var27);
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var30 = var29.year();
    boolean var31 = var27.isBefore((org.joda.time.ReadableInstant)var29);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    boolean var41 = var38.isShorterThan((org.joda.time.ReadableDuration)var40);
    org.joda.time.Duration var42 = var33.plus((org.joda.time.ReadableDuration)var38);
    var29.add((org.joda.time.ReadableDuration)var38);
    org.joda.time.MutableDateTime.Property var44 = var29.dayOfWeek();
    var21.setPeriod((org.joda.time.ReadableInstant)var23, (org.joda.time.ReadableInstant)var29);
    boolean var46 = var9.equals((java.lang.Object)var21);
    boolean var47 = var9.isFixed();
    boolean var48 = var9.isFixed();
    org.joda.time.DateTime var49 = var2.toDateTimeAtMidnight((org.joda.time.DateTimeZone)var9);
    org.joda.time.DateMidnight var50 = new org.joda.time.DateMidnight((org.joda.time.DateTimeZone)var9);
    org.joda.time.MutableDateTime var51 = org.joda.time.MutableDateTime.now((org.joda.time.DateTimeZone)var9);
    long var54 = var9.convertLocalToUTC(1377746580759L, true);
    org.joda.time.chrono.ISOChronology var55 = org.joda.time.chrono.ISOChronology.getInstance((org.joda.time.DateTimeZone)var9);
    org.joda.time.tz.FixedDateTimeZone var60 = new org.joda.time.tz.FixedDateTimeZone("PT0H", "ISOChronology[UTC]", 100, 13);
    org.joda.time.PeriodType var61 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var62 = new org.joda.time.MutablePeriod(var61);
    var62.addDays(1);
    org.joda.time.Duration var66 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var68 = org.joda.time.Duration.standardHours((-1L));
    boolean var69 = var66.isShorterThan((org.joda.time.ReadableDuration)var68);
    var62.add((org.joda.time.ReadableDuration)var68);
    org.joda.time.MutableDateTime var71 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var72 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var68, (org.joda.time.ReadableInstant)var71);
    var72.clear();
    org.joda.time.MutableDateTime var74 = new org.joda.time.MutableDateTime();
    org.joda.time.chrono.JulianChronology var75 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var76 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var75);
    org.joda.time.LocalDate var77 = var76.toLocalDate();
    org.joda.time.MutableDateTime var78 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var79 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var76, (org.joda.time.ReadableInstant)var78);
    org.joda.time.MutableDateTime var80 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var81 = var80.year();
    boolean var82 = var78.isBefore((org.joda.time.ReadableInstant)var80);
    org.joda.time.Duration var84 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var86 = org.joda.time.Duration.standardHours((-1L));
    boolean var87 = var84.isShorterThan((org.joda.time.ReadableDuration)var86);
    org.joda.time.Duration var89 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var91 = org.joda.time.Duration.standardHours((-1L));
    boolean var92 = var89.isShorterThan((org.joda.time.ReadableDuration)var91);
    org.joda.time.Duration var93 = var84.plus((org.joda.time.ReadableDuration)var89);
    var80.add((org.joda.time.ReadableDuration)var89);
    org.joda.time.MutableDateTime.Property var95 = var80.dayOfWeek();
    var72.setPeriod((org.joda.time.ReadableInstant)var74, (org.joda.time.ReadableInstant)var80);
    boolean var97 = var60.equals((java.lang.Object)var72);
    boolean var98 = var60.isFixed();
    org.joda.time.Chronology var99 = var55.withZone((org.joda.time.DateTimeZone)var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1377746580659L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var99);

  }

  public void test447() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test447"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    org.joda.time.LocalDate var3 = new org.joda.time.LocalDate(var2);
    org.joda.time.LocalDate var5 = var3.withWeekyear(28);
    int var6 = var3.getEra();
    java.lang.String var7 = var3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "1970-01-01"+ "'", var7.equals("1970-01-01"));

  }

  public void test448() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test448"); }


    org.joda.time.Period var4 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var6 = var4.plusYears((-1));
    org.joda.time.Period var8 = var4.withHours(2019);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test449() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test449"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var1 = var0.minutes();
    org.joda.time.DateTimeField var2 = var0.year();
    org.joda.time.DateTimeField var3 = var0.millisOfDay();
    org.joda.time.DateTimeField var4 = var0.weekyear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test450() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test450"); }


    org.joda.time.LocalTime var1 = new org.joda.time.LocalTime(10L);
    org.joda.time.chrono.EthiopicChronology var3 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var4 = var3.hours();
    org.joda.time.LocalTime var5 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var3);
    org.joda.time.LocalTime var7 = var5.withMillisOfSecond(1);
    org.joda.time.LocalTime var8 = org.joda.time.LocalTime.now();
    boolean var9 = var7.isAfter((org.joda.time.ReadablePartial)var8);
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var10);
    org.joda.time.DurationField var13 = var10.hours();
    boolean var14 = var8.equals((java.lang.Object)var10);
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var17 = new org.joda.time.MutableDateTime();
    var17.setWeekOfWeekyear(1);
    int var20 = var17.getRoundingMode();
    var17.addMillis(100);
    var17.setSecondOfMinute(10);
    org.joda.time.PeriodType var25 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var26 = new org.joda.time.Period((org.joda.time.ReadableDuration)var16, (org.joda.time.ReadableInstant)var17, var25);
    org.joda.time.Days var27 = var26.toStandardDays();
    org.joda.time.LocalTime var28 = var8.minus((org.joda.time.ReadablePeriod)var26);
    int var29 = var1.compareTo((org.joda.time.ReadablePartial)var28);
    org.joda.time.Years var31 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var32 = var31.getPeriodType();
    org.joda.time.Years var34 = org.joda.time.Years.years((-1));
    int var35 = var31.compareTo((org.joda.time.base.BaseSingleFieldPeriod)var34);
    org.joda.time.LocalTime var36 = var28.minus((org.joda.time.ReadablePeriod)var31);
    org.joda.time.YearMonth var38 = new org.joda.time.YearMonth(10L);
    org.joda.time.chrono.EthiopicChronology var39 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.YearMonth var40 = var38.withChronologyRetainFields((org.joda.time.Chronology)var39);
    org.joda.time.Years var42 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var43 = var42.getPeriodType();
    org.joda.time.Years var45 = org.joda.time.Years.years((-1));
    int var46 = var42.compareTo((org.joda.time.base.BaseSingleFieldPeriod)var45);
    int[] var49 = var39.get((org.joda.time.ReadablePeriod)var45, 0L, 0L);
    boolean var50 = var31.isLessThan(var45);
    org.joda.time.Years var52 = var45.minus(759);
    org.joda.time.Years var54 = var52.minus(8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test451() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test451"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var3 = org.joda.time.Duration.standardHours((-1L));
    boolean var4 = var1.isShorterThan((org.joda.time.ReadableDuration)var3);
    org.joda.time.Duration var5 = var1.toDuration();
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    org.joda.time.chrono.JulianChronology var9 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var10 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var9);
    org.joda.time.LocalDate var11 = var10.toLocalDate();
    org.joda.time.MutableDateTime var12 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var13 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var10, (org.joda.time.ReadableInstant)var12);
    org.joda.time.chrono.JulianChronology var14 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var15 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var14);
    org.joda.time.LocalDate var16 = var15.toLocalDate();
    org.joda.time.MutableDateTime var17 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var18 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var15, (org.joda.time.ReadableInstant)var17);
    org.joda.time.MutableDateTime var19 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var20 = var19.year();
    boolean var21 = var17.isBefore((org.joda.time.ReadableInstant)var19);
    org.joda.time.Duration var23 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var25 = org.joda.time.Duration.standardHours((-1L));
    boolean var26 = var23.isShorterThan((org.joda.time.ReadableDuration)var25);
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var30 = org.joda.time.Duration.standardHours((-1L));
    boolean var31 = var28.isShorterThan((org.joda.time.ReadableDuration)var30);
    org.joda.time.Duration var32 = var23.plus((org.joda.time.ReadableDuration)var28);
    var19.add((org.joda.time.ReadableDuration)var28);
    org.joda.time.Seconds var34 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var10, (org.joda.time.ReadableInstant)var19);
    org.joda.time.Duration var35 = var34.toStandardDuration();
    org.joda.time.Duration var37 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var39 = org.joda.time.Duration.standardHours((-1L));
    boolean var40 = var37.isShorterThan((org.joda.time.ReadableDuration)var39);
    org.joda.time.Duration var41 = var37.toDuration();
    boolean var42 = var35.isShorterThan((org.joda.time.ReadableDuration)var41);
    long var43 = var41.getStandardDays();
    int var44 = var7.compareTo((org.joda.time.ReadableDuration)var41);
    org.joda.time.chrono.JulianChronology var45 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var46 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var45);
    org.joda.time.DateMidnight var48 = var46.plusDays(2013);
    boolean var49 = var46.isAfterNow();
    org.joda.time.DateMidnight var51 = var46.withYear((-22));
    org.joda.time.MutablePeriod var52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var7, (org.joda.time.ReadableInstant)var46);
    java.lang.String var53 = var46.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "1969-12-19T00:00:00.000Z"+ "'", var53.equals("1969-12-19T00:00:00.000Z"));

  }

  public void test452() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test452"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    long var26 = var18.addWrapField(1377746581334L, 100);
    org.joda.time.DurationField var27 = var18.getRangeDurationField();
    org.joda.time.chrono.JulianChronology var28 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var29 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var28);
    org.joda.time.DateMidnight var31 = var29.plusDays(2013);
    org.joda.time.chrono.JulianChronology var32 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var33 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var32);
    org.joda.time.LocalDate var34 = var33.toLocalDate();
    org.joda.time.DateMidnight var36 = var33.minusWeeks((-1));
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var39 = new org.joda.time.MutableDateTime();
    var39.setWeekOfWeekyear(1);
    int var42 = var39.getRoundingMode();
    var39.addMillis(100);
    var39.setSecondOfMinute(10);
    org.joda.time.PeriodType var47 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var48 = new org.joda.time.Period((org.joda.time.ReadableDuration)var38, (org.joda.time.ReadableInstant)var39, var47);
    org.joda.time.Days var49 = var48.toStandardDays();
    org.joda.time.DurationFieldType var50 = var49.getFieldType();
    org.joda.time.DateMidnight var52 = var36.withFieldAdded(var50, 1);
    org.joda.time.field.PreciseDurationField var54 = new org.joda.time.field.PreciseDurationField(var50, 1L);
    org.joda.time.DateMidnight var56 = var31.withFieldAdded(var50, 228);
    org.joda.time.field.DecoratedDurationField var57 = new org.joda.time.field.DecoratedDurationField(var27, var50);
    long var60 = var57.add(1377746681334L, 9);
    org.joda.time.Duration var62 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var63 = new org.joda.time.MutableDateTime();
    var63.setWeekOfWeekyear(1);
    int var66 = var63.getRoundingMode();
    var63.addMillis(100);
    var63.setSecondOfMinute(10);
    org.joda.time.PeriodType var71 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var72 = new org.joda.time.Period((org.joda.time.ReadableDuration)var62, (org.joda.time.ReadableInstant)var63, var71);
    org.joda.time.Days var73 = var72.toStandardDays();
    org.joda.time.DurationFieldType var74 = var73.getFieldType();
    org.joda.time.field.DecoratedDurationField var75 = new org.joda.time.field.DecoratedDurationField((org.joda.time.DurationField)var57, var74);
    org.joda.time.field.UnsupportedDurationField var76 = org.joda.time.field.UnsupportedDurationField.getInstance(var74);
    java.lang.String var77 = var76.getName();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var80 = var76.add(2755493228900L, 1377746580759L);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1377746681334L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1378524281334L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "days"+ "'", var77.equals("days"));

  }

  public void test453() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test453"); }


    org.joda.time.chrono.EthiopicChronology var3 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var4 = var3.hours();
    org.joda.time.LocalTime var5 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var3);
    org.joda.time.Period var6 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var3);
    org.joda.time.DateTimeField var7 = var3.millisOfSecond();
    org.joda.time.chrono.LenientChronology var8 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var3);
    org.joda.time.LocalDateTime var9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology)var3);
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var10);
    org.joda.time.DateTimeField var13 = var10.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var14 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var15 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var16 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var15);
    org.joda.time.LocalDate var17 = var16.toLocalDate();
    org.joda.time.LocalDate var19 = var17.minusMonths(0);
    int[] var21 = var14.get((org.joda.time.ReadablePartial)var19, 100L);
    org.joda.time.chrono.EthiopicChronology var25 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var26 = var25.hours();
    org.joda.time.LocalTime var27 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var25);
    org.joda.time.Period var28 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var25);
    org.joda.time.DateTimeField var29 = var25.millisOfSecond();
    org.joda.time.DateTimeField var30 = var25.secondOfDay();
    org.joda.time.field.SkipDateTimeField var32 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var14, var30, 100);
    org.joda.time.LocalDateTime var33 = org.joda.time.LocalDateTime.now();
    int var34 = var33.getDayOfYear();
    org.joda.time.Chronology var35 = var33.getChronology();
    int var36 = var33.getYearOfCentury();
    int var37 = var32.getMaximumValue((org.joda.time.ReadablePartial)var33);
    boolean var39 = var32.isLeap(1L);
    org.joda.time.LocalDateTime var40 = org.joda.time.LocalDateTime.now();
    int var41 = var40.getDayOfYear();
    int var42 = var32.getMinimumValue((org.joda.time.ReadablePartial)var40);
    org.joda.time.DurationField var43 = var32.getDurationField();
    org.joda.time.DateTimeFieldType var44 = var32.getType();
    org.joda.time.field.OffsetDateTimeField var48 = new org.joda.time.field.OffsetDateTimeField(var13, var44, 884, 3, 948);
    int var49 = var9.get(var44);
    int var50 = var9.getMillisOfSecond();
    org.joda.time.LocalDateTime var52 = var9.withMillisOfDay(363);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 110);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test454() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test454"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    org.joda.time.chrono.StrictChronology var3 = org.joda.time.chrono.StrictChronology.getInstance(var2);
    org.joda.time.chrono.JulianChronology var4 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var5 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var4);
    org.joda.time.LocalDate var6 = var5.toLocalDate();
    org.joda.time.LocalDate var8 = var6.withMonthOfYear(1);
    org.joda.time.LocalDate var10 = var6.withWeekyear(1);
    org.joda.time.LocalDate var12 = var6.withDayOfYear(1);
    org.joda.time.LocalDate var14 = var12.minusMonths(16);
    boolean var15 = var3.equals((java.lang.Object)16);
    java.lang.String var16 = var3.toString();
    org.joda.time.DateTimeField var17 = var3.halfdayOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "StrictChronology[ISOChronology[UTC]]"+ "'", var16.equals("StrictChronology[ISOChronology[UTC]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test455() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test455"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    int var3 = var2.getYear();
    org.joda.time.YearMonthDay var5 = var2.withYear(28);
    org.joda.time.Instant var7 = new org.joda.time.Instant(2762381894421796L);
    long var8 = var7.getMillis();
    org.joda.time.Duration var10 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var12 = org.joda.time.Duration.standardHours((-1L));
    boolean var13 = var10.isShorterThan((org.joda.time.ReadableDuration)var12);
    org.joda.time.Duration var14 = var10.toDuration();
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Years var19 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var20 = var19.getPeriodType();
    org.joda.time.Period var21 = new org.joda.time.Period((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableDuration)var14, var20);
    org.joda.time.YearMonthDay var22 = var2.minus((org.joda.time.ReadablePeriod)var21);
    org.joda.time.PeriodType var23 = org.joda.time.PeriodType.yearMonthDay();
    org.joda.time.PeriodType var24 = var23.withMillisRemoved();
    org.joda.time.Period var25 = new org.joda.time.Period((java.lang.Object)var21, var23);
    org.joda.time.Period var27 = var25.minusYears(73394);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1962);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2762381894421796L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test456() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test456"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var4 = org.joda.time.field.FieldUtils.getWrappedValue(353, 14, 12217, 2057);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test457() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test457"); }


    org.joda.time.LocalDateTime var2 = org.joda.time.LocalDateTime.now();
    int var3 = var2.getDayOfYear();
    org.joda.time.Chronology var4 = var2.getChronology();
    org.joda.time.chrono.StrictChronology var5 = org.joda.time.chrono.StrictChronology.getInstance(var4);
    org.joda.time.chrono.JulianChronology var6 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var7 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var6);
    org.joda.time.LocalDate var8 = var7.toLocalDate();
    org.joda.time.LocalDate var10 = var8.withMonthOfYear(1);
    org.joda.time.LocalDate var12 = var8.withWeekyear(1);
    org.joda.time.LocalDate var14 = var8.withDayOfYear(1);
    org.joda.time.LocalDate var16 = var14.minusMonths(16);
    boolean var17 = var5.equals((java.lang.Object)16);
    org.joda.time.YearMonth var18 = new org.joda.time.YearMonth(0L, (org.joda.time.Chronology)var5);
    org.joda.time.DateTime var19 = new org.joda.time.DateTime(1377742981948L, (org.joda.time.Chronology)var5);
    org.joda.time.DateTime var21 = var19.plusMinutes(20);
    org.joda.time.DateTime var23 = var19.withMinuteOfHour(28);
    org.joda.time.Instant var24 = var23.toInstant();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test458() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test458"); }


    org.joda.time.Years var1 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var2 = var1.getPeriodType();
    org.joda.time.Years var4 = org.joda.time.Years.years((-1));
    int var5 = var1.compareTo((org.joda.time.base.BaseSingleFieldPeriod)var4);
    org.joda.time.MutablePeriod var6 = var4.toMutablePeriod();
    org.joda.time.chrono.JulianChronology var7 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var8 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var7);
    org.joda.time.LocalDate var9 = var8.toLocalDate();
    org.joda.time.LocalDate var11 = var9.minusMonths(0);
    org.joda.time.DateTime var12 = var9.toDateTimeAtMidnight();
    org.joda.time.DateTime var14 = var12.withMillis(100L);
    org.joda.time.chrono.JulianChronology var15 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var16 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var15);
    org.joda.time.LocalDate var17 = var16.toLocalDate();
    org.joda.time.DateMidnight var19 = var16.minusWeeks((-1));
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var22 = new org.joda.time.MutableDateTime();
    var22.setWeekOfWeekyear(1);
    int var25 = var22.getRoundingMode();
    var22.addMillis(100);
    var22.setSecondOfMinute(10);
    org.joda.time.PeriodType var30 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var31 = new org.joda.time.Period((org.joda.time.ReadableDuration)var21, (org.joda.time.ReadableInstant)var22, var30);
    org.joda.time.Days var32 = var31.toStandardDays();
    org.joda.time.DurationFieldType var33 = var32.getFieldType();
    org.joda.time.DateMidnight var35 = var19.withFieldAdded(var33, 1);
    org.joda.time.DateMidnight.Property var36 = var19.monthOfYear();
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var39 = new org.joda.time.MutableDateTime();
    var39.setWeekOfWeekyear(1);
    int var42 = var39.getRoundingMode();
    var39.addMillis(100);
    var39.setSecondOfMinute(10);
    org.joda.time.PeriodType var47 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var48 = new org.joda.time.Period((org.joda.time.ReadableDuration)var38, (org.joda.time.ReadableInstant)var39, var47);
    org.joda.time.PeriodType var49 = var47.withWeeksRemoved();
    org.joda.time.Period var50 = new org.joda.time.Period((org.joda.time.ReadableInstant)var14, (org.joda.time.ReadableInstant)var19, var47);
    org.joda.time.Duration var51 = var6.toDurationTo((org.joda.time.ReadableInstant)var14);
    org.joda.time.MutablePeriod var52 = var6.toMutablePeriod();
    org.joda.time.MutablePeriod var53 = var52.toMutablePeriod();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test459() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test459"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    org.joda.time.YearMonthDay var4 = var2.plusMonths(24430);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test460() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test460"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    int var3 = var2.getYear();
    org.joda.time.Period var6 = new org.joda.time.Period(10L, 1L);
    org.joda.time.Duration var8 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    var9.setWeekOfWeekyear(1);
    int var12 = var9.getRoundingMode();
    var9.addMillis(100);
    var9.setSecondOfMinute(10);
    org.joda.time.PeriodType var17 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var18 = new org.joda.time.Period((org.joda.time.ReadableDuration)var8, (org.joda.time.ReadableInstant)var9, var17);
    org.joda.time.Days var19 = var18.toStandardDays();
    org.joda.time.DurationFieldType var20 = var19.getFieldType();
    int var21 = var6.get(var20);
    org.joda.time.YearMonthDay var22 = var2.minus((org.joda.time.ReadablePeriod)var6);
    org.joda.time.Duration var24 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    var25.setWeekOfWeekyear(1);
    int var28 = var25.getRoundingMode();
    var25.addMillis(100);
    var25.setSecondOfMinute(10);
    org.joda.time.PeriodType var33 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var34 = new org.joda.time.Period((org.joda.time.ReadableDuration)var24, (org.joda.time.ReadableInstant)var25, var33);
    org.joda.time.Days var35 = var34.toStandardDays();
    org.joda.time.DurationFieldType var36 = var35.getFieldType();
    org.joda.time.IllegalFieldValueException var40 = new org.joda.time.IllegalFieldValueException(var36, (java.lang.Number)28, (java.lang.Number)10.0d, (java.lang.Number)1377746580759L);
    org.joda.time.YearMonthDay var42 = var2.withFieldAdded(var36, 12);
    org.joda.time.TimeOfDay var43 = new org.joda.time.TimeOfDay();
    int var44 = var43.size();
    org.joda.time.chrono.EthiopicChronology var46 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var47 = var46.hours();
    org.joda.time.LocalTime var48 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var46);
    org.joda.time.LocalTime var50 = var48.withMillisOfSecond(1);
    org.joda.time.LocalTime var52 = var50.minusHours((-1));
    org.joda.time.Years var53 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var43, (org.joda.time.ReadablePartial)var52);
    int var54 = var43.getMillisOfSecond();
    org.joda.time.TimeOfDay var56 = var43.minusMillis((-9));
    org.joda.time.tz.FixedDateTimeZone var61 = new org.joda.time.tz.FixedDateTimeZone("ConverterManager[6 instant,7 partial,5 duration,5 period,3 interval]", "ConverterManager[6 instant,7 partial,5 duration,5 period,3 interval]", 2, 759);
    org.joda.time.DateTime var62 = var56.toDateTimeToday((org.joda.time.DateTimeZone)var61);
    org.joda.time.chrono.EthiopicChronology var63 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var64 = var63.dayOfYear();
    org.joda.time.YearMonthDay var65 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var63);
    org.joda.time.YearMonthDay var67 = var65.plusYears(13);
    org.joda.time.DateTimeZone var69 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.Interval var70 = var65.toInterval(var69);
    org.joda.time.DateTime var71 = var2.toDateTime(var56, var69);
    int var72 = var56.getMinuteOfHour();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1962);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 110);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);

  }

  public void test461() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test461"); }


    org.joda.time.PeriodType var1 = org.joda.time.PeriodType.yearDay();
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var2.setChronology((org.joda.time.Chronology)var5);
    org.joda.time.MutablePeriod var7 = new org.joda.time.MutablePeriod(0L, var1, (org.joda.time.Chronology)var5);
    org.joda.time.LocalTime var8 = new org.joda.time.LocalTime((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var9 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var5);
    org.joda.time.DurationField var10 = var5.months();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test462() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test462"); }


    org.joda.time.DateTime var0 = org.joda.time.DateTime.now();
    long var1 = var0.getMillis();
    org.joda.time.DateTime.Property var2 = var0.yearOfEra();
    org.joda.time.DateTime var4 = var0.withMillisOfDay(216);
    org.joda.time.PeriodType var5 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var6 = new org.joda.time.MutablePeriod(var5);
    var6.addDays(1);
    org.joda.time.Duration var10 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var12 = org.joda.time.Duration.standardHours((-1L));
    boolean var13 = var10.isShorterThan((org.joda.time.ReadableDuration)var12);
    var6.add((org.joda.time.ReadableDuration)var12);
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var12, (org.joda.time.ReadableInstant)var15);
    var16.clear();
    org.joda.time.PeriodType var18 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var19 = new org.joda.time.MutablePeriod(var18);
    var19.addDays(1);
    org.joda.time.Duration var23 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var25 = org.joda.time.Duration.standardHours((-1L));
    boolean var26 = var23.isShorterThan((org.joda.time.ReadableDuration)var25);
    var19.add((org.joda.time.ReadableDuration)var25);
    var16.add((org.joda.time.ReadablePeriod)var19);
    org.joda.time.chrono.JulianChronology var29 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var30 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var29);
    org.joda.time.LocalDate var31 = var30.toLocalDate();
    org.joda.time.MutableDateTime var32 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var33 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var30, (org.joda.time.ReadableInstant)var32);
    org.joda.time.MutableDateTime var34 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var35 = var34.year();
    boolean var36 = var32.isBefore((org.joda.time.ReadableInstant)var34);
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    boolean var41 = var38.isShorterThan((org.joda.time.ReadableDuration)var40);
    org.joda.time.Duration var43 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var45 = org.joda.time.Duration.standardHours((-1L));
    boolean var46 = var43.isShorterThan((org.joda.time.ReadableDuration)var45);
    org.joda.time.Duration var47 = var38.plus((org.joda.time.ReadableDuration)var43);
    var34.add((org.joda.time.ReadableDuration)var43);
    org.joda.time.Hours var49 = var43.toStandardHours();
    org.joda.time.chrono.EthiopicChronology var50 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
    var19.setPeriod((org.joda.time.ReadableDuration)var43, (org.joda.time.Chronology)var50);
    org.joda.time.DateTime var52 = var4.plus((org.joda.time.ReadableDuration)var43);
    org.joda.time.chrono.JulianChronology var53 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var54 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var53);
    org.joda.time.LocalDate var55 = var54.toLocalDate();
    org.joda.time.DateMidnight var57 = var54.minusWeeks((-1));
    org.joda.time.DateMidnight var59 = var54.withWeekOfWeekyear(35);
    org.joda.time.DateMidnight var61 = var59.minusWeeks((-948));
    org.joda.time.Chronology var62 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant)var4, (org.joda.time.ReadableInstant)var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 10L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test463() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test463"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var0);
    org.joda.time.DurationField var3 = var0.eras();
    org.joda.time.DateTimeField var4 = var0.millisOfDay();
    org.joda.time.DateTimeField var5 = var0.secondOfMinute();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test464() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test464"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.DurationField var19 = var18.getRangeDurationField();
    org.joda.time.field.OffsetDateTimeField var21 = new org.joda.time.field.OffsetDateTimeField((org.joda.time.DateTimeField)var18, 228);
    java.lang.String var23 = var21.getAsShortText(1377746593932L);
    org.joda.time.DurationField var24 = var21.getLeapDurationField();
    int var25 = var21.getMinimumValue();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "12422"+ "'", var23.equals("12422"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 227);

  }

  public void test465() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test465"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.hourOfDay();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var9 = var0.getDateTimeMillis(55, 353, 853, 884, 28, 14400001, 1962);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test466() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test466"); }


    org.joda.time.format.DateTimeFormatter var1 = org.joda.time.format.ISODateTimeFormat.dateHour();
    java.lang.Integer var2 = var1.getPivotYear();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDateTime var3 = org.joda.time.LocalDateTime.parse("StrictChronology[ISOChronology[UTC]]", var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test467() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test467"); }


    org.joda.time.LocalDateTime var1 = org.joda.time.LocalDateTime.now();
    int var2 = var1.getDayOfYear();
    org.joda.time.Chronology var3 = var1.getChronology();
    org.joda.time.chrono.StrictChronology var4 = org.joda.time.chrono.StrictChronology.getInstance(var3);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.LocalDate var9 = var7.withMonthOfYear(1);
    org.joda.time.LocalDate var11 = var7.withWeekyear(1);
    org.joda.time.LocalDate var13 = var7.withDayOfYear(1);
    org.joda.time.LocalDate var15 = var13.minusMonths(16);
    boolean var16 = var4.equals((java.lang.Object)16);
    org.joda.time.YearMonth var17 = new org.joda.time.YearMonth(0L, (org.joda.time.Chronology)var4);
    org.joda.time.format.DateTimeFormatter var18 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
    org.joda.time.chrono.EthiopicChronology var22 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var23 = var22.hours();
    org.joda.time.LocalTime var24 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var22);
    org.joda.time.Period var25 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var22);
    org.joda.time.DateTimeField var26 = var22.millisOfSecond();
    org.joda.time.chrono.LenientChronology var27 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var22);
    org.joda.time.format.DateTimeFormatter var28 = var18.withChronology((org.joda.time.Chronology)var27);
    org.joda.time.format.DateTimeFormatter var29 = var28.withZoneUTC();
    java.lang.String var30 = var17.toString(var29);
    org.joda.time.chrono.JulianChronology var31 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var32 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var31);
    org.joda.time.Period var37 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var39 = var37.plusSeconds(100);
    org.joda.time.Period var41 = var37.minusMillis(10);
    boolean var42 = var32.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var43 = var32.dayOfYear();
    int var44 = var32.getSecondOfDay();
    org.joda.time.DateMidnight var46 = var32.withWeekyear(240);
    org.joda.time.DateMidnight var48 = var46.minusMonths(28);
    org.joda.time.DateTimeZone var49 = var48.getZone();
    org.joda.time.Interval var50 = var17.toInterval(var49);
    org.joda.time.YearMonth var52 = var17.minusYears(2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTimeFieldType var54 = var17.getFieldType(12217);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "\uFFFD\uFFFD"+ "'", var30.equals("\uFFFD\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test468() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test468"); }


    org.joda.time.format.DateTimeFormatter var1 = org.joda.time.format.ISODateTimeFormat.basicTime();
    boolean var2 = var1.isPrinter();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MutableDateTime var3 = org.joda.time.MutableDateTime.parse("2057-04-26T06:47:09.901+00:00:00.100/2057-04-26T06:47:09.901+00:00:00.100", var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);

  }

  public void test469() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test469"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    var1.addDays(1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    var1.add((org.joda.time.ReadableDuration)var7);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var7, (org.joda.time.ReadableInstant)var10);
    var11.clear();
    org.joda.time.PeriodType var13 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var14 = new org.joda.time.MutablePeriod(var13);
    var14.addDays(1);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    boolean var21 = var18.isShorterThan((org.joda.time.ReadableDuration)var20);
    var14.add((org.joda.time.ReadableDuration)var20);
    var11.add((org.joda.time.ReadablePeriod)var14);
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.LocalDate var26 = var25.toLocalDate();
    org.joda.time.MutableDateTime var27 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var28 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var25, (org.joda.time.ReadableInstant)var27);
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var30 = var29.year();
    boolean var31 = var27.isBefore((org.joda.time.ReadableInstant)var29);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    boolean var41 = var38.isShorterThan((org.joda.time.ReadableDuration)var40);
    org.joda.time.Duration var42 = var33.plus((org.joda.time.ReadableDuration)var38);
    var29.add((org.joda.time.ReadableDuration)var38);
    org.joda.time.Hours var44 = var38.toStandardHours();
    org.joda.time.chrono.EthiopicChronology var45 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
    var14.setPeriod((org.joda.time.ReadableDuration)var38, (org.joda.time.Chronology)var45);
    var14.clear();
    org.joda.time.MutableDateTime var48 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var49 = var48.year();
    org.joda.time.MutableDateTime.Property var50 = var48.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var51 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var52 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var51);
    org.joda.time.Period var57 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var59 = var57.plusSeconds(100);
    org.joda.time.Period var61 = var57.minusMillis(10);
    boolean var62 = var52.equals((java.lang.Object)10);
    org.joda.time.Weeks var63 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var48, (org.joda.time.ReadableInstant)var52);
    org.joda.time.Duration var64 = var14.toDurationFrom((org.joda.time.ReadableInstant)var52);
    org.joda.time.chrono.JulianChronology var67 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var68 = new org.joda.time.DateMidnight((-1L), (org.joda.time.Chronology)var67);
    var14.add(1L, (org.joda.time.Chronology)var67);
    org.joda.time.DurationField var70 = var67.millis();
    org.joda.time.DateTimeField var71 = var67.halfdayOfDay();
    org.joda.time.Period var76 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var78 = var76.plusYears((-1));
    int var79 = var76.getWeeks();
    int[] var81 = var67.get((org.joda.time.ReadablePeriod)var76, 1L);
    org.joda.time.Chronology var82 = var67.withUTC();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test470() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test470"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.format.DateTimeFormatterBuilder var5 = var4.appendTimeZoneId();
    org.joda.time.format.DateTimeFormatterBuilder var6 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var8 = var6.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var10 = var6.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var11 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var12 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var11);
    org.joda.time.LocalDate var13 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var14 = var11.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var15 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var16 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var17 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var16);
    org.joda.time.LocalDate var18 = var17.toLocalDate();
    org.joda.time.LocalDate var20 = var18.minusMonths(0);
    int[] var22 = var15.get((org.joda.time.ReadablePartial)var20, 100L);
    org.joda.time.chrono.EthiopicChronology var26 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var27 = var26.hours();
    org.joda.time.LocalTime var28 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var26);
    org.joda.time.Period var29 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var26);
    org.joda.time.DateTimeField var30 = var26.millisOfSecond();
    org.joda.time.DateTimeField var31 = var26.secondOfDay();
    org.joda.time.field.SkipDateTimeField var33 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var15, var31, 100);
    org.joda.time.LocalDateTime var34 = org.joda.time.LocalDateTime.now();
    int var35 = var34.getDayOfYear();
    org.joda.time.Chronology var36 = var34.getChronology();
    int var37 = var34.getYearOfCentury();
    int var38 = var33.getMaximumValue((org.joda.time.ReadablePartial)var34);
    boolean var40 = var33.isLeap(1L);
    org.joda.time.LocalDateTime var41 = org.joda.time.LocalDateTime.now();
    int var42 = var41.getDayOfYear();
    int var43 = var33.getMinimumValue((org.joda.time.ReadablePartial)var41);
    org.joda.time.DurationField var44 = var33.getDurationField();
    org.joda.time.DateTimeFieldType var45 = var33.getType();
    org.joda.time.field.OffsetDateTimeField var49 = new org.joda.time.field.OffsetDateTimeField(var14, var45, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var52 = new org.joda.time.IllegalFieldValueException(var45, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var55 = var6.appendFraction(var45, 33, (-948));
    org.joda.time.format.DateTimeFormatterBuilder var56 = var5.appendText(var45);
    boolean var57 = var5.canBuildFormatter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);

  }

  public void test471() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test471"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    org.joda.time.LocalDate var3 = new org.joda.time.LocalDate(var2);
    org.joda.time.LocalDate var5 = var3.withWeekyear(28);
    int var6 = var3.getEra();
    org.joda.time.DateTimeField[] var7 = var3.getFields();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test472() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test472"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.MutableInterval var21 = new org.joda.time.MutableInterval();
    org.joda.time.MutableInterval var22 = var21.copy();
    org.joda.time.DateTime var23 = var22.getStart();
    org.joda.time.Duration var25 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    boolean var28 = var25.isShorterThan((org.joda.time.ReadableDuration)var27);
    org.joda.time.Duration var29 = var25.toDuration();
    org.joda.time.chrono.JulianChronology var30 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var31 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var30);
    org.joda.time.LocalDate var32 = var31.toLocalDate();
    org.joda.time.MutableDateTime var33 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var34 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var31, (org.joda.time.ReadableInstant)var33);
    org.joda.time.MutableDateTime var35 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var36 = var35.year();
    boolean var37 = var33.isBefore((org.joda.time.ReadableInstant)var35);
    org.joda.time.Duration var39 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var41 = org.joda.time.Duration.standardHours((-1L));
    boolean var42 = var39.isShorterThan((org.joda.time.ReadableDuration)var41);
    org.joda.time.Duration var44 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var46 = org.joda.time.Duration.standardHours((-1L));
    boolean var47 = var44.isShorterThan((org.joda.time.ReadableDuration)var46);
    org.joda.time.Duration var48 = var39.plus((org.joda.time.ReadableDuration)var44);
    var35.add((org.joda.time.ReadableDuration)var44);
    org.joda.time.PeriodType var50 = org.joda.time.PeriodType.months();
    org.joda.time.Period var51 = new org.joda.time.Period((org.joda.time.ReadableDuration)var25, (org.joda.time.ReadableInstant)var35, var50);
    org.joda.time.MutablePeriod var52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant)var4, (org.joda.time.ReadableInstant)var23, var50);
    org.joda.time.DateMidnight var54 = var4.withYear(33);
    org.joda.time.DateMidnight.Property var55 = var4.centuryOfEra();
    org.joda.time.DateTime var56 = var4.toDateTimeISO();
    int var57 = var56.getEra();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);

  }

  public void test473() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test473"); }


    org.joda.time.LocalTime var1 = new org.joda.time.LocalTime(10L);
    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var3 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var2);
    org.joda.time.LocalDate var4 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var2);
    org.joda.time.DurationField var5 = var2.years();
    org.joda.time.LocalDateTime var6 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology)var2);
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var8 = var7.year();
    org.joda.time.MutableDateTime.Property var9 = var7.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.Period var16 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var18 = var16.plusSeconds(100);
    org.joda.time.Period var20 = var16.minusMillis(10);
    boolean var21 = var11.equals((java.lang.Object)10);
    org.joda.time.Weeks var22 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableInstant)var11);
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var24 = var23.year();
    org.joda.time.MutableDateTime.Property var25 = var23.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var26 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var27 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var26);
    org.joda.time.Period var32 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var34 = var32.plusSeconds(100);
    org.joda.time.Period var36 = var32.minusMillis(10);
    boolean var37 = var27.equals((java.lang.Object)10);
    org.joda.time.Weeks var38 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var23, (org.joda.time.ReadableInstant)var27);
    boolean var39 = var22.isLessThan(var38);
    org.joda.time.DurationFieldType var40 = var22.getFieldType();
    org.joda.time.IllegalFieldValueException var42 = new org.joda.time.IllegalFieldValueException(var40, "Aug 23, 2013 12:00:00 AM");
    boolean var43 = var6.isSupported(var40);
    boolean var44 = var1.isSupported(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);

  }

  public void test474() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test474"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    var1.addDays(1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    var1.add((org.joda.time.ReadableDuration)var7);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var7, (org.joda.time.ReadableInstant)var10);
    var11.setSeconds(1);
    int var14 = var11.getSeconds();
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var16 = new org.joda.time.MutablePeriod(var15);
    var16.addDays(1);
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var22 = org.joda.time.Duration.standardHours((-1L));
    boolean var23 = var20.isShorterThan((org.joda.time.ReadableDuration)var22);
    var16.add((org.joda.time.ReadableDuration)var22);
    org.joda.time.DateTime var25 = org.joda.time.DateTime.now();
    org.joda.time.DateTime var27 = var25.withMillis(0L);
    org.joda.time.MutablePeriod var28 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var22, (org.joda.time.ReadableInstant)var27);
    org.joda.time.Duration var30 = var22.withMillis(1377742981948L);
    var11.add((org.joda.time.ReadableDuration)var22);
    org.joda.time.Period var36 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var38 = var36.plusYears((-1));
    org.joda.time.Minutes var39 = var36.toStandardMinutes();
    org.joda.time.Minutes var41 = org.joda.time.Minutes.minutes(10);
    org.joda.time.Minutes var42 = var39.minus(var41);
    org.joda.time.DurationFieldType var43 = var42.getFieldType();
    org.joda.time.Duration var44 = var42.toStandardDuration();
    boolean var45 = var22.isEqual((org.joda.time.ReadableDuration)var44);
    long var46 = var44.getStandardMinutes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 60L);

  }

  public void test475() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test475"); }


    org.joda.time.DateTime var0 = new org.joda.time.DateTime();
    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var3 = new org.joda.time.DateMidnight((-1L), (org.joda.time.Chronology)var2);
    org.joda.time.chrono.JulianChronology var4 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var5 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var4);
    org.joda.time.LocalDate var6 = var5.toLocalDate();
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var8 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var7);
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var10 = var9.year();
    boolean var11 = var7.isBefore((org.joda.time.ReadableInstant)var9);
    org.joda.time.Duration var13 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var15 = org.joda.time.Duration.standardHours((-1L));
    boolean var16 = var13.isShorterThan((org.joda.time.ReadableDuration)var15);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    boolean var21 = var18.isShorterThan((org.joda.time.ReadableDuration)var20);
    org.joda.time.Duration var22 = var13.plus((org.joda.time.ReadableDuration)var18);
    var9.add((org.joda.time.ReadableDuration)var18);
    var9.setHourOfDay(10);
    org.joda.time.Years var26 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var3, (org.joda.time.ReadableInstant)var9);
    org.joda.time.Period var27 = new org.joda.time.Period((org.joda.time.ReadableInstant)var0, (org.joda.time.ReadableInstant)var9);
    org.joda.time.DateTime.Property var28 = var0.dayOfWeek();
    org.joda.time.DateTime.Property var29 = var0.dayOfYear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test476() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test476"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.field.PreciseDurationField var22 = new org.joda.time.field.PreciseDurationField(var18, 1L);
    org.joda.time.chrono.JulianChronology var23 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var24 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var23);
    org.joda.time.LocalDate var25 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var23);
    org.joda.time.DurationField var26 = var23.hours();
    int var27 = var22.compareTo(var26);
    long var30 = var22.getMillis(9, 1377746581334L);
    long var31 = var22.getUnitMillis();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 9L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1L);

  }

  public void test477() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test477"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.YearMonth var19 = org.joda.time.YearMonth.now((org.joda.time.Chronology)var0);
    org.joda.time.DateTimeField var20 = var0.year();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test478() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test478"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    org.joda.time.YearMonthDay var4 = var2.plusDays((-1));
    org.joda.time.tz.FixedDateTimeZone var9 = new org.joda.time.tz.FixedDateTimeZone("57680", "\uFFFD\uFFFD\uFFFD\uFFFD-W\uFFFD\uFFFD-\uFFFDT03:23:01", (-13), 35);
    org.joda.time.DateTime var10 = var4.toDateTimeAtCurrentTime((org.joda.time.DateTimeZone)var9);
    org.joda.time.DateTimeFieldType[] var11 = var4.getFieldTypes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test479() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test479"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var0);
    org.joda.time.DurationField var3 = var0.hours();
    org.joda.time.DateTimeField var4 = var0.clockhourOfDay();
    org.joda.time.field.OffsetDateTimeField var6 = new org.joda.time.field.OffsetDateTimeField(var4, 12196171);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test480() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test480"); }


    org.joda.time.MutableInterval var0 = new org.joda.time.MutableInterval();
    long var1 = var0.getEndMillis();
    org.joda.time.Months var2 = org.joda.time.Months.monthsIn((org.joda.time.ReadableInterval)var0);
    org.joda.time.Months var4 = var2.plus(240);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.LocalDate var9 = var7.minusMonths(0);
    org.joda.time.Months var11 = org.joda.time.Months.months((-1));
    org.joda.time.Months var13 = var11.plus(100);
    int var14 = var11.size();
    org.joda.time.LocalDate var15 = var7.plus((org.joda.time.ReadablePeriod)var11);
    org.joda.time.Months var17 = var11.dividedBy(2);
    org.joda.time.Months var19 = var11.multipliedBy(10);
    boolean var20 = var4.isLessThan(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test481() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test481"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    org.joda.time.LocalDateTime var4 = var0.withYear((-1));
    org.joda.time.LocalDateTime.Property var5 = var0.dayOfWeek();
    org.joda.time.LocalDateTime var6 = org.joda.time.LocalDateTime.now();
    int var7 = var6.getDayOfYear();
    org.joda.time.Chronology var8 = var6.getChronology();
    org.joda.time.Period var13 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var15 = var13.plusSeconds(100);
    org.joda.time.Period var17 = var13.minusMillis(10);
    org.joda.time.LocalDateTime var18 = var6.plus((org.joda.time.ReadablePeriod)var17);
    org.joda.time.LocalDateTime var19 = var0.minus((org.joda.time.ReadablePeriod)var17);
    org.joda.time.MutableInterval var20 = new org.joda.time.MutableInterval();
    org.joda.time.MutableInterval var21 = var20.copy();
    org.joda.time.DateTime var22 = var21.getStart();
    java.util.Date var23 = var22.toDate();
    boolean var24 = org.joda.time.field.FieldUtils.equals((java.lang.Object)var0, (java.lang.Object)var22);
    org.joda.time.LocalDateTime.Property var25 = var0.secondOfMinute();
    org.joda.time.LocalDateTime var27 = var0.minusYears(893);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test482() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test482"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    org.joda.time.YearMonthDay var4 = var2.plusYears(13);
    org.joda.time.DateTimeZone var6 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.Interval var7 = var2.toInterval(var6);
    org.joda.time.YearMonth var8 = org.joda.time.YearMonth.now(var6);
    org.joda.time.TimeOfDay var9 = new org.joda.time.TimeOfDay(var6);
    org.joda.time.YearMonth var11 = new org.joda.time.YearMonth(0L);
    org.joda.time.chrono.GregorianChronology var12 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var14 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var13);
    org.joda.time.LocalDate var15 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var13);
    org.joda.time.DurationField var16 = var13.hours();
    org.joda.time.Chronology var17 = var13.withUTC();
    org.joda.time.chrono.JulianChronology var18 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var19 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var18);
    org.joda.time.LocalDate var20 = var19.toLocalDate();
    org.joda.time.MutableDateTime var21 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var22 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var19, (org.joda.time.ReadableInstant)var21);
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var24 = var23.year();
    boolean var25 = var21.isBefore((org.joda.time.ReadableInstant)var23);
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var29 = org.joda.time.Duration.standardHours((-1L));
    boolean var30 = var27.isShorterThan((org.joda.time.ReadableDuration)var29);
    org.joda.time.Duration var32 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var34 = org.joda.time.Duration.standardHours((-1L));
    boolean var35 = var32.isShorterThan((org.joda.time.ReadableDuration)var34);
    org.joda.time.Duration var36 = var27.plus((org.joda.time.ReadableDuration)var32);
    var23.add((org.joda.time.ReadableDuration)var32);
    org.joda.time.chrono.JulianChronology var38 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var39 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var38);
    org.joda.time.LocalDate var40 = var39.toLocalDate();
    org.joda.time.MutableDateTime var41 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var42 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var39, (org.joda.time.ReadableInstant)var41);
    org.joda.time.MutableDateTime var43 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var44 = var43.year();
    boolean var45 = var41.isBefore((org.joda.time.ReadableInstant)var43);
    org.joda.time.Interval var46 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var23, (org.joda.time.ReadableInstant)var43);
    org.joda.time.DateTimeZone var47 = var43.getZone();
    org.joda.time.Chronology var48 = var13.withZone(var47);
    org.joda.time.Chronology var49 = var12.withZone(var47);
    org.joda.time.Interval var50 = var11.toInterval(var47);
    org.joda.time.DateTime var51 = var9.toDateTimeToday(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test483() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test483"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.field.PreciseDurationField var22 = new org.joda.time.field.PreciseDurationField(var18, 1L);
    long var25 = var22.getMillis(3, 9L);
    int var28 = var22.getValue(9L, 2762381894421796L);
    long var29 = var22.getUnitMillis();
    boolean var30 = var22.isPrecise();
    long var31 = var22.getUnitMillis();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 3L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1L);

  }

  public void test484() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test484"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.chrono.JulianChronology var21 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var22 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var21);
    org.joda.time.LocalDate var23 = var22.toLocalDate();
    org.joda.time.DateMidnight var25 = var22.minusWeeks((-1));
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var28 = new org.joda.time.MutableDateTime();
    var28.setWeekOfWeekyear(1);
    int var31 = var28.getRoundingMode();
    var28.addMillis(100);
    var28.setSecondOfMinute(10);
    org.joda.time.PeriodType var36 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var37 = new org.joda.time.Period((org.joda.time.ReadableDuration)var27, (org.joda.time.ReadableInstant)var28, var36);
    org.joda.time.Days var38 = var37.toStandardDays();
    org.joda.time.DurationFieldType var39 = var38.getFieldType();
    org.joda.time.DateMidnight var41 = var25.withFieldAdded(var39, 1);
    org.joda.time.DateMidnight var43 = var4.withFieldAdded(var39, 13);
    java.util.GregorianCalendar var44 = var43.toGregorianCalendar();
    org.joda.time.YearMonth var45 = org.joda.time.YearMonth.fromCalendarFields((java.util.Calendar)var44);
    org.joda.time.LocalTime var46 = org.joda.time.LocalTime.fromCalendarFields((java.util.Calendar)var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test485() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test485"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var2.toDateTimeAtMidnight();
    org.joda.time.DateTime var7 = var5.withCenturyOfEra(4);
    org.joda.time.DateTime.Property var8 = var7.monthOfYear();
    org.joda.time.chrono.JulianChronology var9 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var10 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var9);
    org.joda.time.Period var15 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var17 = var15.plusSeconds(100);
    org.joda.time.Period var19 = var15.minusMillis(10);
    boolean var20 = var10.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var21 = var10.dayOfYear();
    org.joda.time.chrono.JulianChronology var22 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var23 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var22);
    org.joda.time.LocalDate var24 = var23.toLocalDate();
    org.joda.time.LocalDate var26 = var24.minusMonths(0);
    org.joda.time.DateTime var27 = var24.toDateTimeAtMidnight();
    org.joda.time.DateTime var29 = var27.withCenturyOfEra(4);
    org.joda.time.Days var30 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var10, (org.joda.time.ReadableInstant)var29);
    org.joda.time.DateTime var32 = var29.plusSeconds(10);
    boolean var33 = var7.isAfter((org.joda.time.ReadableInstant)var29);
    org.joda.time.DateTime var35 = var29.withWeekOfWeekyear(2);
    org.joda.time.Instant var36 = new org.joda.time.Instant();
    org.joda.time.Instant var37 = var36.toInstant();
    org.joda.time.PeriodType var38 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var39 = new org.joda.time.MutablePeriod(var38);
    var39.addDays(1);
    org.joda.time.Duration var43 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var45 = org.joda.time.Duration.standardHours((-1L));
    boolean var46 = var43.isShorterThan((org.joda.time.ReadableDuration)var45);
    var39.add((org.joda.time.ReadableDuration)var45);
    org.joda.time.Duration var49 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var51 = org.joda.time.Duration.standardHours((-1L));
    boolean var52 = var49.isShorterThan((org.joda.time.ReadableDuration)var51);
    org.joda.time.Duration var53 = var49.toDuration();
    org.joda.time.chrono.JulianChronology var54 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var55 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var54);
    org.joda.time.LocalDate var56 = var55.toLocalDate();
    org.joda.time.MutableDateTime var57 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var58 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var55, (org.joda.time.ReadableInstant)var57);
    org.joda.time.MutableDateTime var59 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var60 = var59.year();
    boolean var61 = var57.isBefore((org.joda.time.ReadableInstant)var59);
    org.joda.time.Duration var63 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var65 = org.joda.time.Duration.standardHours((-1L));
    boolean var66 = var63.isShorterThan((org.joda.time.ReadableDuration)var65);
    org.joda.time.Duration var68 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var70 = org.joda.time.Duration.standardHours((-1L));
    boolean var71 = var68.isShorterThan((org.joda.time.ReadableDuration)var70);
    org.joda.time.Duration var72 = var63.plus((org.joda.time.ReadableDuration)var68);
    var59.add((org.joda.time.ReadableDuration)var68);
    org.joda.time.PeriodType var74 = org.joda.time.PeriodType.months();
    org.joda.time.Period var75 = new org.joda.time.Period((org.joda.time.ReadableDuration)var49, (org.joda.time.ReadableInstant)var59, var74);
    org.joda.time.Period var76 = new org.joda.time.Period((org.joda.time.ReadableInstant)var37, (org.joda.time.ReadableDuration)var45, var74);
    org.joda.time.Period var77 = new org.joda.time.Period((org.joda.time.ReadableInstant)var35, (org.joda.time.ReadableInstant)var37);
    org.joda.time.DateTime var78 = var37.toDateTime();
    org.joda.time.Instant var81 = var37.withDurationAdded(12196171L, 14400001);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }

  public void test486() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test486"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.weeks();
    org.joda.time.PeriodType var1 = var0.withSecondsRemoved();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test487() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test487"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.Period var6 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var8 = var6.plusSeconds(100);
    org.joda.time.Period var10 = var6.minusMillis(10);
    boolean var11 = var1.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var12 = var1.dayOfYear();
    int var13 = var1.getSecondOfDay();
    org.joda.time.DateMidnight var15 = var1.withWeekyear(240);
    org.joda.time.DateMidnight var17 = var15.minusMonths(28);
    org.joda.time.Duration var19 = org.joda.time.Duration.standardSeconds(1377742981948L);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var24 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var23);
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var26 = var25.year();
    boolean var27 = var23.isBefore((org.joda.time.ReadableInstant)var25);
    org.joda.time.Duration var29 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var31 = org.joda.time.Duration.standardHours((-1L));
    boolean var32 = var29.isShorterThan((org.joda.time.ReadableDuration)var31);
    org.joda.time.Duration var34 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var36 = org.joda.time.Duration.standardHours((-1L));
    boolean var37 = var34.isShorterThan((org.joda.time.ReadableDuration)var36);
    org.joda.time.Duration var38 = var29.plus((org.joda.time.ReadableDuration)var34);
    var25.add((org.joda.time.ReadableDuration)var34);
    org.joda.time.MutableDateTime.Property var40 = var25.weekyear();
    org.joda.time.MutableDateTime.Property var41 = var25.year();
    boolean var43 = var25.equals((java.lang.Object)(byte)0);
    var25.addDays(216);
    org.joda.time.Period var46 = var19.toPeriodFrom((org.joda.time.ReadableInstant)var25);
    java.util.GregorianCalendar var47 = var25.toGregorianCalendar();
    var25.addMillis(12200);
    org.joda.time.Days var50 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var17, (org.joda.time.ReadableInstant)var25);
    int var51 = var50.getDays();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 632587);

  }

  public void test488() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test488"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Months var1 = org.joda.time.Months.parseMonths("days");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test489() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test489"); }


    org.joda.time.Instant var1 = new org.joda.time.Instant((-1377734400000L));

  }

  public void test490() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test490"); }


    org.joda.time.Instant var0 = org.joda.time.Instant.now();
    org.joda.time.PeriodType var1 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var2 = new org.joda.time.MutablePeriod(var1);
    var2.addDays(1);
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var8 = org.joda.time.Duration.standardHours((-1L));
    boolean var9 = var6.isShorterThan((org.joda.time.ReadableDuration)var8);
    var2.add((org.joda.time.ReadableDuration)var8);
    org.joda.time.MutableDateTime var11 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var12 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var8, (org.joda.time.ReadableInstant)var11);
    org.joda.time.Instant var13 = var0.minus((org.joda.time.ReadableDuration)var8);
    org.joda.time.MutableDateTime var14 = var13.toMutableDateTime();
    int var15 = var14.getEra();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);

  }

  public void test491() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test491"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    org.joda.time.YearMonthDay var4 = var2.plusYears(13);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.YearMonthDay var6 = var4.plusYears((-1377742992));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test492() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test492"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.LocalTime var3 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var1);
    org.joda.time.LocalTime var5 = var3.withMillisOfSecond(1);
    org.joda.time.chrono.JulianChronology var6 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var7 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var6);
    org.joda.time.LocalDate var8 = var7.toLocalDate();
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var10 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableInstant)var9);
    org.joda.time.chrono.JulianChronology var11 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var12 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var11);
    org.joda.time.LocalDate var13 = var12.toLocalDate();
    org.joda.time.MutableDateTime var14 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var15 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var12, (org.joda.time.ReadableInstant)var14);
    org.joda.time.MutableDateTime var16 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var17 = var16.year();
    boolean var18 = var14.isBefore((org.joda.time.ReadableInstant)var16);
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var22 = org.joda.time.Duration.standardHours((-1L));
    boolean var23 = var20.isShorterThan((org.joda.time.ReadableDuration)var22);
    org.joda.time.Duration var25 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    boolean var28 = var25.isShorterThan((org.joda.time.ReadableDuration)var27);
    org.joda.time.Duration var29 = var20.plus((org.joda.time.ReadableDuration)var25);
    var16.add((org.joda.time.ReadableDuration)var25);
    org.joda.time.Seconds var31 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableInstant)var16);
    org.joda.time.Seconds var33 = var31.plus(2005);
    org.joda.time.Minutes var34 = var31.toStandardMinutes();
    org.joda.time.Minutes var36 = var34.dividedBy(100);
    org.joda.time.LocalTime var37 = var3.plus((org.joda.time.ReadablePeriod)var36);
    org.joda.time.LocalTime var39 = var3.minusMinutes(22);
    org.joda.time.LocalTime var41 = var3.minusHours((-1));
    org.joda.time.chrono.JulianChronology var42 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var43 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var42);
    org.joda.time.LocalDate var44 = var43.toLocalDate();
    org.joda.time.LocalDate var46 = var44.withMonthOfYear(1);
    org.joda.time.DateMidnight var47 = var44.toDateMidnight();
    int var48 = var44.getWeekyear();
    org.joda.time.LocalTime var49 = var3.withFields((org.joda.time.ReadablePartial)var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 1969);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test493() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test493"); }


    org.joda.time.convert.ConverterManager var0 = org.joda.time.convert.ConverterManager.getInstance();
    java.lang.String var1 = var0.toString();
    java.lang.String var2 = var0.toString();
    org.joda.time.chrono.EthiopicChronology var3 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var4 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var5 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var4);
    org.joda.time.LocalDate var6 = var5.toLocalDate();
    org.joda.time.LocalDate var8 = var6.minusMonths(0);
    int[] var10 = var3.get((org.joda.time.ReadablePartial)var8, 100L);
    org.joda.time.chrono.EthiopicChronology var14 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var15 = var14.hours();
    org.joda.time.LocalTime var16 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var14);
    org.joda.time.Period var17 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var14);
    org.joda.time.DateTimeField var18 = var14.millisOfSecond();
    org.joda.time.DateTimeField var19 = var14.secondOfDay();
    org.joda.time.field.SkipDateTimeField var21 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var3, var19, 100);
    org.joda.time.LocalDateTime var22 = org.joda.time.LocalDateTime.now();
    int var23 = var22.getDayOfYear();
    org.joda.time.Chronology var24 = var22.getChronology();
    int var25 = var22.getYearOfCentury();
    int var26 = var21.getMaximumValue((org.joda.time.ReadablePartial)var22);
    boolean var28 = var21.isLeap(1L);
    org.joda.time.LocalDateTime var29 = org.joda.time.LocalDateTime.now();
    int var30 = var29.getDayOfYear();
    int var31 = var21.getMinimumValue((org.joda.time.ReadablePartial)var29);
    long var34 = var21.addWrapField(9L, 228);
    org.joda.time.LocalDateTime var35 = org.joda.time.LocalDateTime.now();
    int var36 = var35.getDayOfYear();
    org.joda.time.Chronology var37 = var35.getChronology();
    org.joda.time.YearMonthDay var38 = new org.joda.time.YearMonthDay(var37);
    org.joda.time.YearMonth var41 = new org.joda.time.YearMonth(10L);
    org.joda.time.chrono.EthiopicChronology var42 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.YearMonth var43 = var41.withChronologyRetainFields((org.joda.time.Chronology)var42);
    org.joda.time.Years var45 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var46 = var45.getPeriodType();
    org.joda.time.Years var48 = org.joda.time.Years.years((-1));
    int var49 = var45.compareTo((org.joda.time.base.BaseSingleFieldPeriod)var48);
    int[] var52 = var42.get((org.joda.time.ReadablePeriod)var48, 0L, 0L);
    int[] var54 = var21.addWrapPartial((org.joda.time.ReadablePartial)var38, (-9), var52, 0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.convert.PeriodConverter var55 = var0.getPeriodConverter((java.lang.Object)var54);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "ConverterManager[5 instant,6 partial,5 duration,5 period,3 interval]"+ "'", var1.equals("ConverterManager[5 instant,6 partial,5 duration,5 period,3 interval]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ConverterManager[5 instant,6 partial,5 duration,5 period,3 interval]"+ "'", var2.equals("ConverterManager[5 instant,6 partial,5 duration,5 period,3 interval]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 228009L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test494() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test494"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.withMonthOfYear(1);
    org.joda.time.LocalDate var6 = var2.withWeekyear(1);
    org.joda.time.LocalDate var8 = var2.withDayOfYear(1);
    org.joda.time.LocalDate var10 = var8.plusWeeks(73381948);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var12 = var8.getValue(69781948);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test495() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test495"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    var0.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var0.setChronology((org.joda.time.Chronology)var3);
    org.joda.time.DateTimeField var5 = var3.centuryOfEra();
    org.joda.time.LocalDateTime var6 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology)var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test496() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test496"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    var1.addDays(1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    var1.add((org.joda.time.ReadableDuration)var7);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var7, (org.joda.time.ReadableInstant)var10);
    var11.clear();
    org.joda.time.PeriodType var13 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var14 = new org.joda.time.MutablePeriod(var13);
    var14.addDays(1);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    boolean var21 = var18.isShorterThan((org.joda.time.ReadableDuration)var20);
    var14.add((org.joda.time.ReadableDuration)var20);
    var11.add((org.joda.time.ReadablePeriod)var14);
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.LocalDate var26 = var25.toLocalDate();
    org.joda.time.MutableDateTime var27 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var28 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var25, (org.joda.time.ReadableInstant)var27);
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var30 = var29.year();
    boolean var31 = var27.isBefore((org.joda.time.ReadableInstant)var29);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    boolean var41 = var38.isShorterThan((org.joda.time.ReadableDuration)var40);
    org.joda.time.Duration var42 = var33.plus((org.joda.time.ReadableDuration)var38);
    var29.add((org.joda.time.ReadableDuration)var38);
    org.joda.time.chrono.JulianChronology var44 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var45 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var44);
    org.joda.time.LocalDate var46 = var45.toLocalDate();
    org.joda.time.MutableDateTime var47 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var48 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var45, (org.joda.time.ReadableInstant)var47);
    org.joda.time.MutableDateTime var49 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var50 = var49.year();
    boolean var51 = var47.isBefore((org.joda.time.ReadableInstant)var49);
    org.joda.time.Interval var52 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var29, (org.joda.time.ReadableInstant)var49);
    boolean var54 = var52.isAfter(10L);
    org.joda.time.MutableDateTime var55 = new org.joda.time.MutableDateTime();
    var55.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var58 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var55.setChronology((org.joda.time.Chronology)var58);
    org.joda.time.Interval var60 = var52.withChronology((org.joda.time.Chronology)var58);
    var11.setPeriod((org.joda.time.ReadableInterval)var52);
    var11.addMillis((-1));
    int var64 = var11.getWeeks();
    org.joda.time.DateTime var65 = org.joda.time.DateTime.now();
    org.joda.time.chrono.JulianChronology var66 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var67 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var66);
    org.joda.time.LocalDate var68 = var67.toLocalDate();
    org.joda.time.MutableDateTime var69 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var70 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var67, (org.joda.time.ReadableInstant)var69);
    org.joda.time.MutableDateTime var71 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var72 = var71.year();
    boolean var73 = var69.isBefore((org.joda.time.ReadableInstant)var71);
    org.joda.time.MutableDateTime.Property var74 = var71.minuteOfHour();
    org.joda.time.MutableDateTime.Property var75 = var71.millisOfSecond();
    org.joda.time.Chronology var76 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant)var65, (org.joda.time.ReadableInstant)var71);
    org.joda.time.Duration var77 = var11.toDurationFrom((org.joda.time.ReadableInstant)var71);
    var11.addYears(3);
    var11.setWeeks((-3));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test497() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test497"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.chrono.JulianChronology var21 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var22 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var21);
    org.joda.time.LocalDate var23 = var22.toLocalDate();
    org.joda.time.DateMidnight var25 = var22.minusWeeks((-1));
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var28 = new org.joda.time.MutableDateTime();
    var28.setWeekOfWeekyear(1);
    int var31 = var28.getRoundingMode();
    var28.addMillis(100);
    var28.setSecondOfMinute(10);
    org.joda.time.PeriodType var36 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var37 = new org.joda.time.Period((org.joda.time.ReadableDuration)var27, (org.joda.time.ReadableInstant)var28, var36);
    org.joda.time.Days var38 = var37.toStandardDays();
    org.joda.time.DurationFieldType var39 = var38.getFieldType();
    org.joda.time.DateMidnight var41 = var25.withFieldAdded(var39, 1);
    org.joda.time.DateMidnight var43 = var4.withFieldAdded(var39, 13);
    java.util.GregorianCalendar var44 = var43.toGregorianCalendar();
    int var45 = var43.getCenturyOfEra();
    org.joda.time.PeriodType var46 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var47 = new org.joda.time.MutablePeriod(var46);
    var47.addDays(1);
    org.joda.time.Duration var51 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var53 = org.joda.time.Duration.standardHours((-1L));
    boolean var54 = var51.isShorterThan((org.joda.time.ReadableDuration)var53);
    var47.add((org.joda.time.ReadableDuration)var53);
    org.joda.time.MutableDateTime var56 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var57 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var53, (org.joda.time.ReadableInstant)var56);
    org.joda.time.DateMidnight var58 = var43.minus((org.joda.time.ReadablePeriod)var57);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Period var59 = new org.joda.time.Period((java.lang.Object)var58);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test498() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test498"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    boolean var25 = var18.isLeap(1L);
    org.joda.time.LocalDateTime var26 = org.joda.time.LocalDateTime.now();
    int var27 = var26.getDayOfYear();
    int var28 = var18.getMinimumValue((org.joda.time.ReadablePartial)var26);
    long var31 = var18.addWrapField(1000L, 15795333);
    int var32 = var18.getMaximumValue();
    java.lang.String var34 = var18.getAsShortText(15946L);
    boolean var35 = var18.isSupported();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 70534000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "16"+ "'", var34.equals("16"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);

  }

  public void test499() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test499"); }


    org.joda.time.Partial var0 = new org.joda.time.Partial();
    java.lang.String var1 = var0.toString();
    org.joda.time.Duration var3 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var4 = new org.joda.time.MutableDateTime();
    var4.setWeekOfWeekyear(1);
    int var7 = var4.getRoundingMode();
    var4.addMillis(100);
    var4.setSecondOfMinute(10);
    org.joda.time.PeriodType var12 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var13 = new org.joda.time.Period((org.joda.time.ReadableDuration)var3, (org.joda.time.ReadableInstant)var4, var12);
    org.joda.time.Days var14 = var13.toStandardDays();
    org.joda.time.chrono.JulianChronology var15 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var16 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var15);
    org.joda.time.Period var21 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var23 = var21.plusSeconds(100);
    org.joda.time.Period var25 = var21.minusMillis(10);
    boolean var26 = var16.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var27 = var16.dayOfYear();
    org.joda.time.chrono.JulianChronology var28 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var29 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var28);
    org.joda.time.LocalDate var30 = var29.toLocalDate();
    org.joda.time.LocalDate var32 = var30.minusMonths(0);
    org.joda.time.DateTime var33 = var30.toDateTimeAtMidnight();
    org.joda.time.DateTime var35 = var33.withCenturyOfEra(4);
    org.joda.time.Days var36 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var16, (org.joda.time.ReadableInstant)var35);
    org.joda.time.Days var38 = var36.dividedBy(1);
    boolean var39 = var14.isGreaterThan(var36);
    org.joda.time.DurationFieldType var40 = var14.getFieldType();
    org.joda.time.Seconds var41 = var14.toStandardSeconds();
    org.joda.time.Partial var42 = var0.minus((org.joda.time.ReadablePeriod)var41);
    org.joda.time.TimeOfDay var43 = new org.joda.time.TimeOfDay();
    int var44 = var43.size();
    org.joda.time.TimeOfDay var46 = var43.withMillisOfSecond(1);
    org.joda.time.Years var48 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var49 = var48.getPeriodType();
    org.joda.time.Years var51 = org.joda.time.Years.years((-1));
    int var52 = var48.compareTo((org.joda.time.base.BaseSingleFieldPeriod)var51);
    org.joda.time.Years var54 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var55 = var54.getPeriodType();
    org.joda.time.Years var56 = var51.minus(var54);
    org.joda.time.TimeOfDay var57 = var46.minus((org.joda.time.ReadablePeriod)var51);
    boolean var58 = var0.isMatch((org.joda.time.ReadablePartial)var46);
    java.lang.String var59 = var0.toStringList();
    java.lang.String var60 = var0.toStringList();
    int var61 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "[]"+ "'", var59.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "[]"+ "'", var60.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);

  }

  public void test500() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test500"); }


    int var3 = org.joda.time.field.FieldUtils.getWrappedValue(12194, 124, 985);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 126);

  }

}
