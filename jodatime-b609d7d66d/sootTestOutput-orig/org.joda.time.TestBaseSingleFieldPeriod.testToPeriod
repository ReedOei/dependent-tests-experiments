org.joda.time.base.BasePeriod.getPeriodType : $r1 = r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType>
org.joda.time.Period.days : $r0 = new org.joda.time.Period
org.joda.time.TestBaseSingleFieldPeriod$Single.getValue : $i0 = specialinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>()
org.joda.time.base.BaseSingleFieldPeriod.size : return 1
org.joda.time.TestBaseSingleFieldPeriod$Single.getFieldType : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>()
org.joda.time.base.AbstractPeriod.getFieldType : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.base.AbstractPeriod.indexOf : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.base.BasePeriod.getValue : $r1 = r0.<org.joda.time.base.BasePeriod: int[] iValues>
org.joda.time.Period.withFields : r3 = specialinvoke r0.<org.joda.time.base.BasePeriod: int[] mergePeriodInto(int[],org.joda.time.ReadablePeriod)>(r2, r1)
org.joda.time.Period.withFields : $r4 = new org.joda.time.Period
org.joda.time.Period.withFields : if r1 != null goto r2 = virtualinvoke r0.<org.joda.time.Period: int[] getValues()>()
org.joda.time.Period.withFields : r2 = virtualinvoke r0.<org.joda.time.Period: int[] getValues()>()
org.joda.time.base.BasePeriod.mergePeriodInto : r3 = interfaceinvoke r2.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>(i0)
org.joda.time.base.BasePeriod.mergePeriodInto : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>(r3, r1, i2)
org.joda.time.base.BasePeriod.mergePeriodInto : i0 = 0
org.joda.time.base.BasePeriod.mergePeriodInto : i2 = interfaceinvoke r2.<org.joda.time.ReadablePeriod: int getValue(int)>(i0)
org.joda.time.base.BasePeriod.mergePeriodInto : return r1
org.joda.time.DurationFieldType.days : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType DAYS_TYPE>
org.joda.time.PeriodType.size : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.base.BaseSingleFieldPeriod.getFieldType : if i0 == 0 goto $r3 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType()>()
org.joda.time.base.BaseSingleFieldPeriod.getFieldType : $r3 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType()>()
org.joda.time.PeriodType.standard : if r0 != null goto return r0
org.joda.time.PeriodType.standard : r0 = <org.joda.time.PeriodType: org.joda.time.PeriodType cStandard>
org.joda.time.PeriodType.standard : return r0
org.joda.time.base.AbstractPeriod.equals : if r0 != r1 goto $z0 = r1 instanceof org.joda.time.ReadablePeriod
org.joda.time.base.AbstractPeriod.equals : $i2 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int size()>()
org.joda.time.base.AbstractPeriod.equals : i0 = 0
org.joda.time.base.AbstractPeriod.equals : return 1
org.joda.time.base.AbstractPeriod.equals : r2 = (org.joda.time.ReadablePeriod) r1
org.joda.time.base.AbstractPeriod.equals : $z0 = r1 instanceof org.joda.time.ReadablePeriod
org.joda.time.base.AbstractPeriod.equals : $i4 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int getValue(int)>(i0)
org.joda.time.base.BasePeriod.checkAndUpdate : r2[i1] = i0
org.joda.time.base.BasePeriod.checkAndUpdate : i1 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int indexOf(org.joda.time.DurationFieldType)>(r1)
org.joda.time.base.BasePeriod.checkAndUpdate : if i1 != -1 goto r2[i1] = i0
org.joda.time.base.BaseSingleFieldPeriod.toPeriod : $r1 = <org.joda.time.Period: org.joda.time.Period ZERO>
org.joda.time.base.AbstractPeriod.getValues : $i3 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int getValue(int)>(i0)
org.joda.time.base.AbstractPeriod.getValues : i0 = 0
org.joda.time.base.AbstractPeriod.getValues : $i1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int size()>()
org.joda.time.base.AbstractPeriod.getValues : return r1
org.joda.time.base.AbstractPeriod.size : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.PeriodType.getFieldType : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.PeriodType.indexOf : return i0
org.joda.time.PeriodType.indexOf : $r2 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.PeriodType.indexOf : i0 = 0
org.joda.time.base.BaseSingleFieldPeriod.getValue : if i0 == 0 goto $i1 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>()
org.joda.time.base.BaseSingleFieldPeriod.getValue : $i1 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>()
org.joda.time.base.BaseSingleFieldPeriod.getValue : $i0 = r0.<org.joda.time.base.BaseSingleFieldPeriod: int iPeriod>
