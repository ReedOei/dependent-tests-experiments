org.joda.time.convert.ConverterSet.select : $r6 = r2[i1]
org.joda.time.convert.ConverterSet.select : if r1 != null goto $i5 = virtualinvoke r1.<java.lang.Object: int hashCode()>()
org.joda.time.convert.ConverterSet.select : r2 = r0.<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet$Entry[] iSelectEntries>
org.joda.time.convert.ConverterSet.select : i0 = lengthof r2
org.joda.time.convert.ConverterSet.select : $r7 = r3.<org.joda.time.convert.ConverterSet$Entry: java.lang.Class iType>
org.joda.time.convert.ConverterSet.select : $r8 = r3.<org.joda.time.convert.ConverterSet$Entry: org.joda.time.convert.Converter iConverter>
org.joda.time.DateTimeUtils.checkPermission : r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>()
org.joda.time.DateTimeUtils.checkPermission : if r0 == null goto return
org.joda.time.DateTimeZone.getDefault : if r0 != null goto return r0
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.field.FieldUtils.safeAdd : l2 = l0 + l1
org.joda.time.field.FieldUtils.safeAdd : $l3 = l0 ^ l2
org.joda.time.field.FieldUtils.safeAdd : return l2
org.joda.time.DateTimeUtils.setCurrentMillisFixed : $r0 = new org.joda.time.DateTimeUtils$FixedMillisProvider
org.joda.time.DateTimeUtils.setCurrentMillisFixed : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>()
org.joda.time.convert.ConverterManager.getDurationConverter : if r2 == null goto $r7 = new java.lang.IllegalArgumentException
org.joda.time.convert.ConverterManager.getDurationConverter : return r2
org.joda.time.convert.ConverterManager.getDurationConverter : $r4 = r0.<org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterSet iDurationConverters>
org.joda.time.convert.ConverterManager.getDurationConverter : $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>()
org.joda.time.field.FieldUtils.safeMultiply : $l5 = (long) i1
org.joda.time.field.FieldUtils.safeMultiply : tableswitch(i1) {     case -1: goto $l3 = neg l0;     case 0: goto return 0L;     case 1: goto return l0;     default: goto $l4 = (long) i1; }
org.joda.time.field.FieldUtils.safeMultiply : return l2
org.joda.time.field.FieldUtils.safeMultiply : $l4 = (long) i1
org.joda.time.DateTimeZone.setDefault : exitmonitor r3
org.joda.time.DateTimeZone.setDefault : $r6 = class "org/joda/time/DateTimeZone"
org.joda.time.DateTimeZone.setDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r0
org.joda.time.DateTimeZone.setDefault : if r1 == null goto (branch)
org.joda.time.DateTimeZone.setDefault : if r0 != null goto $r6 = class "org/joda/time/DateTimeZone"
org.joda.time.DateTimeZone.setDefault : r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>()
org.joda.time.base.BaseDuration.getMillis : $l0 = r0.<org.joda.time.base.BaseDuration: long iMillis>
org.joda.time.convert.ConverterManager.getInstance : $r2 = <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager INSTANCE>
org.joda.time.convert.ConverterManager.getInstance : $r0 = <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager INSTANCE>
org.joda.time.DateTimeUtils.setCurrentMillisSystem : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>()
org.joda.time.DateTimeUtils.setCurrentMillisSystem : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$SystemMillisProvider SYSTEM_MILLIS_PROVIDER>
org.joda.time.convert.StringConverter.getDurationMillis : r2 = (java.lang.String) r1
org.joda.time.convert.StringConverter.getDurationMillis : if i2 <= 0 goto $r11 = new java.lang.IllegalArgumentException
org.joda.time.convert.StringConverter.getDurationMillis : $i21 = virtualinvoke r18.<java.lang.String: int length()>()
org.joda.time.convert.StringConverter.getDurationMillis : if i1 <= 0 goto l19 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r10)
org.joda.time.convert.StringConverter.getDurationMillis : $i22 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r18)
org.joda.time.convert.StringConverter.getDurationMillis : $i20 = i1 + 1
org.joda.time.convert.StringConverter.getDurationMillis : $l27 = staticinvoke <org.joda.time.field.FieldUtils: long safeMultiply(long,int)>(l19, 1000)
org.joda.time.convert.StringConverter.getDurationMillis : r3 = r2
org.joda.time.convert.StringConverter.getDurationMillis : $i12 = i0 - 1
org.joda.time.convert.StringConverter.getDurationMillis : $c4 = virtualinvoke r3.<java.lang.String: char charAt(int)>(0)
org.joda.time.convert.StringConverter.getDurationMillis : $c9 = virtualinvoke r3.<java.lang.String: char charAt(int)>($i8)
org.joda.time.convert.StringConverter.getDurationMillis : i1 = -1
org.joda.time.convert.StringConverter.getDurationMillis : $r17 = virtualinvoke r10.<java.lang.String: java.lang.String substring(int,int)>(0, i1)
org.joda.time.convert.StringConverter.getDurationMillis : $b23 = l19 cmp 0L
org.joda.time.convert.StringConverter.getDurationMillis : i0 = virtualinvoke r3.<java.lang.String: int length()>()
org.joda.time.convert.StringConverter.getDurationMillis : i2 = 0
org.joda.time.convert.StringConverter.getDurationMillis : $c14 = virtualinvoke r10.<java.lang.String: char charAt(int)>(i2)
org.joda.time.convert.StringConverter.getDurationMillis : if i0 < 4 goto $r4 = new java.lang.IllegalArgumentException
org.joda.time.convert.StringConverter.getDurationMillis : i1 = i2
org.joda.time.convert.StringConverter.getDurationMillis : l18 = 0L
org.joda.time.convert.StringConverter.getDurationMillis : $c6 = virtualinvoke r3.<java.lang.String: char charAt(int)>(1)
