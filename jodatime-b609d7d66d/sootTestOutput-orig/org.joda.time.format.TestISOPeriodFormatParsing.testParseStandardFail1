org.joda.time.format.PeriodFormatter.parseMutablePeriod : $r7 = new java.lang.IllegalArgumentException
org.joda.time.format.PeriodFormatter.parseMutablePeriod : $r3 = new org.joda.time.MutablePeriod
org.joda.time.format.PeriodFormatter.parseMutablePeriod : i0 = i0 ^ -1
org.joda.time.format.PeriodFormatter.parseMutablePeriod : $r5 = virtualinvoke r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodParser getParser()>()
org.joda.time.format.PeriodFormatter.parseMutablePeriod : if i0 < 0 goto i0 = i0 ^ -1
org.joda.time.format.PeriodFormatter.parseMutablePeriod : specialinvoke r0.<org.joda.time.format.PeriodFormatter: void checkParser()>()
org.joda.time.chrono.BaseChronology.get : return r2
org.joda.time.chrono.BaseChronology.get : r2 = newarray (int)[i1]
org.joda.time.chrono.BaseChronology.get : i1 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int size()>()
org.joda.time.chrono.BaseChronology.get : $b5 = l0 cmp 0L
org.joda.time.base.BasePeriod.getPeriodType : $r1 = r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType>
org.joda.time.DurationFieldType.seconds : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType SECONDS_TYPE>
org.joda.time.base.BasePeriod.setField : $r2 = r0.<org.joda.time.base.BasePeriod: int[] iValues>
org.joda.time.chrono.ISOChronology.getInstance : return r10
org.joda.time.chrono.ISOChronology.getInstance : exitmonitor r2
org.joda.time.chrono.ISOChronology.getInstance : if r10 != null goto exitmonitor r2
org.joda.time.chrono.ISOChronology.getInstance : $r8 = <org.joda.time.chrono.ISOChronology: java.util.Map cCache>
org.joda.time.chrono.ISOChronology.getInstance : if r0 != null goto $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0)
org.joda.time.chrono.ISOChronology.getInstance : $r16 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache>
org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0)
org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache>
org.joda.time.chrono.ISOChronology.getInstance : $r7 = <org.joda.time.chrono.ISOChronology: java.util.Map cCache>
org.joda.time.chrono.ISOChronology.getInstance : if r1 == null goto $r7 = <org.joda.time.chrono.ISOChronology: java.util.Map cCache>
org.joda.time.chrono.ISOChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>()
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.parse : r2 = r0.<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: java.lang.String iText>
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.parse : $i2 = i0 + i1
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.parse : i1 = virtualinvoke r2.<java.lang.String: int length()>()
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.parse : $z0 = virtualinvoke r1.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, i0, r2, 0, i1)
org.joda.time.DurationFieldType.millis : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MILLIS_TYPE>
org.joda.time.chrono.ZonedChronology.getZone : $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: java.lang.Object getParam()>()
org.joda.time.DateTimeUtils.getChronology : if r0 != null goto return r0
org.joda.time.DateTimeUtils.getChronology : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>()
org.joda.time.format.ISOPeriodFormat.standard : $r0 = <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter cStandard>
org.joda.time.format.ISOPeriodFormat.standard : $r19 = <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter cStandard>
org.joda.time.format.FormatUtils.createErrorMessage : $r13 = new java.lang.StringBuilder
org.joda.time.format.FormatUtils.createErrorMessage : $i4 = virtualinvoke r0.<java.lang.String: int length()>()
org.joda.time.format.FormatUtils.createErrorMessage : i1 = i0 + 32
org.joda.time.format.FormatUtils.createErrorMessage : $i2 = virtualinvoke r0.<java.lang.String: int length()>()
org.joda.time.format.FormatUtils.createErrorMessage : $r17 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(i0)
org.joda.time.format.FormatUtils.createErrorMessage : r1 = r0
org.joda.time.format.FormatUtils.createErrorMessage : if i0 > 0 goto $i4 = virtualinvoke r0.<java.lang.String: int length()>()
org.joda.time.base.AbstractPeriod.indexOf : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.base.BasePeriod.setFieldInto : if i1 != -1 goto r1[i1] = i0
org.joda.time.base.BasePeriod.setFieldInto : i1 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int indexOf(org.joda.time.DurationFieldType)>(r2)
org.joda.time.base.BasePeriod.setFieldInto : r1[i1] = i0
org.joda.time.DateTimeUtils.getPeriodType : if r0 != null goto return r0
org.joda.time.DateTimeUtils.getPeriodType : $r1 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType standard()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r3 = virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getID()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z0 = r1 instanceof org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z4 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r9, $r10)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z6 = virtualinvoke $r15.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)>($r16)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z3 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r7, $r8)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z5 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r11, $r12)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : r2 = (org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone) r1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : return $z7
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z2 = staticinvoke <java.util.Arrays: boolean equals(long[],long[])>($r5, $r6)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if r0 != r1 goto $z0 = r1 instanceof org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone
org.joda.time.MutablePeriod.setMillis : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>()
org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : return i0
org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : $r6 = r4[i2]
org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : if r4 != null goto i1 = lengthof r4
org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : i2 = 0
org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$Composite: org.joda.time.format.PeriodParser[] iParsers>
org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : i1 = lengthof r4
org.joda.time.format.PeriodFormatterBuilder$Literal.parseInto : $r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$Literal: java.lang.String iText>
org.joda.time.format.PeriodFormatterBuilder$Literal.parseInto : $r6 = r0.<org.joda.time.format.PeriodFormatterBuilder$Literal: java.lang.String iText>
org.joda.time.DateTimeUtils.checkPermission : r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>()
org.joda.time.DateTimeUtils.checkPermission : if r0 == null goto return
org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.format.PeriodFormatter.checkParser : $r1 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodParser iParser>
org.joda.time.PeriodType.size : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.format.PeriodFormatter.parsePeriod : $r2 = virtualinvoke r0.<org.joda.time.format.PeriodFormatter: org.joda.time.MutablePeriod parseMutablePeriod(java.lang.String)>(r1)
org.joda.time.format.PeriodFormatter.parsePeriod : specialinvoke r0.<org.joda.time.format.PeriodFormatter: void checkParser()>()
org.joda.time.DateTimeZone.getID : $r1 = r0.<org.joda.time.DateTimeZone: java.lang.String iID>
org.joda.time.DateTimeZone.getDefault : if r0 != null goto return r0
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if i46 < 0 goto return i46
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if z0 != 0 goto return i1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i7 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iPrintZeroSetting>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : i3 = 0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i18 = i0 + i3
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : i46 = i0 + i3
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if c5 < 48 goto (branch)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i13 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iMaxParsedDigits>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i37 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : i1 = -1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $r7 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iSuffix>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : i4 = -1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i35 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : z1 = 1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i8 = virtualinvoke r2.<java.lang.String: int length()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : z1 = 0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if i1 < 0 goto $i35 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if i1 < 0 goto (branch)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if i3 >= i2 goto (branch)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if i3 != 0 goto (branch)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : i3 = i3 + 1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if i1 <= 0 goto $i15 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iMaxParsedDigits>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $r6 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iSuffix>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : virtualinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void setFieldValue(org.joda.time.ReadWritablePeriod,int,int)>(r1, 7, 0)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i39 = specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInt(java.lang.String,int,int)>(r2, i0, i3)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i11 = i1 ^ -1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : z0 = 1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : return i46
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if i4 >= 0 goto $i40 = i4 - i0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iPrefix>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : goto [?= staticinvoke <edu.washington.cs.dt.impact.util.Tracer: void trace(java.lang.String,java.lang.String)>("if i3 >= i2 goto (branch)", "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto")]
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if z1 != 0 goto (branch)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $r10 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iSuffix>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if z0 != 0 goto (branch)
org.joda.time.MutablePeriod.setSeconds : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>()
org.joda.time.MutablePeriod.setYears : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>()
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : r2 = (org.joda.time.tz.DateTimeZoneBuilder$DSTZone) r1
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : return $z4
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $z0 = r1 instanceof org.joda.time.tz.DateTimeZoneBuilder$DSTZone
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $z3 = virtualinvoke $r7.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: boolean equals(java.lang.Object)>($r8)
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $z2 = virtualinvoke $r5.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: boolean equals(java.lang.Object)>($r6)
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : if r0 != r1 goto $z0 = r1 instanceof org.joda.time.tz.DateTimeZoneBuilder$DSTZone
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $r3 = virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getID()>()
org.joda.time.PeriodType.standard : if r0 != null goto return r0
org.joda.time.PeriodType.standard : r0 = <org.joda.time.PeriodType: org.joda.time.PeriodType cStandard>
org.joda.time.PeriodType.standard : return r0
org.joda.time.chrono.AssembledChronology.getParam : $r1 = r0.<org.joda.time.chrono.AssembledChronology: java.lang.Object iParam>
org.joda.time.format.PeriodFormatter.getParser : $r1 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodParser iParser>
org.joda.time.base.BasePeriod.checkPeriodType : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>(r1)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $c0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : if r0 != r1 goto $z0 = r1 instanceof org.joda.time.tz.DateTimeZoneBuilder$OfYear
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : r2 = (org.joda.time.tz.DateTimeZoneBuilder$OfYear) r1
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $z0 = r1 instanceof org.joda.time.tz.DateTimeZoneBuilder$OfYear
org.joda.time.tz.CachedDateTimeZone.equals : $z0 = r1 instanceof org.joda.time.tz.CachedDateTimeZone
org.joda.time.tz.CachedDateTimeZone.equals : if r0 != r1 goto $z0 = r1 instanceof org.joda.time.tz.CachedDateTimeZone
org.joda.time.tz.CachedDateTimeZone.equals : $r2 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : $i9 = i6
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : i8 = c2 + -48
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : i5 = i0 + 1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : if i1 > 0 goto i5 = i0 + 1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : z0 = 0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : if i1 < 10 goto (branch)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : if z0 == 0 goto $i16 = i8
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : if c2 != 45 goto z0 = 0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : i6 = i1 + -1
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $z2 = virtualinvoke $r5.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: boolean equals(java.lang.Object)>($r6)
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $z0 = r1 instanceof org.joda.time.tz.DateTimeZoneBuilder$Recurrence
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : if r0 != r1 goto $z0 = r1 instanceof org.joda.time.tz.DateTimeZoneBuilder$Recurrence
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int iSaveMillis>
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4)
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : r2 = (org.joda.time.tz.DateTimeZoneBuilder$Recurrence) r1
org.joda.time.DateTimeUtils.setCurrentMillisFixed : $r0 = new org.joda.time.DateTimeUtils$FixedMillisProvider
org.joda.time.DateTimeUtils.setCurrentMillisFixed : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>()
org.joda.time.DateTimeZone.hashCode : $r1 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getID()>()
org.joda.time.DateTimeZone.setDefault : exitmonitor r3
org.joda.time.DateTimeZone.setDefault : $r6 = class "org/joda/time/DateTimeZone"
org.joda.time.DateTimeZone.setDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r0
org.joda.time.DateTimeZone.setDefault : if r1 == null goto (branch)
org.joda.time.DateTimeZone.setDefault : if r0 != null goto $r6 = class "org/joda/time/DateTimeZone"
org.joda.time.DateTimeZone.setDefault : r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>()
org.joda.time.DurationFieldType.years : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType YEARS_TYPE>
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : r5 = r4[i3]
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : i3 = 0
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : if i10 >= 0 goto (branch)
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : if r5 == null goto $i7 = i4
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : $i12 = i9 ^ -1
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : if z0 == 0 goto (branch)
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : if i4 >= 0 goto z0 = 0
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : $r7 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodParser iAfterParser>
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : i2 = lengthof r4
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : z0 = 0
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : i9 = i4
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : if i10 <= i9 goto return i10
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : if i4 <= i1 goto i9 = i4
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : $r6 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodParser iBeforeParser>
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : i1 = i0
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: java.lang.String[] iParsedForms>
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : $i6 = virtualinvoke r5.<java.lang.String: int length()>()
org.joda.time.base.AbstractPeriod.size : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.DateTimeUtils.setCurrentMillisSystem : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>()
org.joda.time.DateTimeUtils.setCurrentMillisSystem : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$SystemMillisProvider SYSTEM_MILLIS_PROVIDER>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.setFieldValue : interfaceinvoke r1.<org.joda.time.ReadWritablePeriod: void setMillis(int)>(i1)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.setFieldValue : tableswitch(i0) {     case 0: goto interfaceinvoke r1.<org.joda.time.ReadWritablePeriod: void setYears(int)>(i1);     case 1: goto interfaceinvoke r1.<org.joda.time.ReadWritablePeriod: void setMonths(int)>(i1);     case 2: goto interfaceinvoke r1.<org.joda.time.ReadWritablePeriod: void setWeeks(int)>(i1);     case 3: goto interfaceinvoke r1.<org.joda.time.ReadWritablePeriod: void setDays(int)>(i1);     case 4: goto interfaceinvoke r1.<org.joda.time.ReadWritablePeriod: void setHours(int)>(i1);     case 5: goto interfaceinvoke r1.<org.joda.time.ReadWritablePeriod: void setMinutes(int)>(i1);     case 6: goto interfaceinvoke r1.<org.joda.time.ReadWritablePeriod: void setSeconds(int)>(i1);     case 7: goto interfaceinvoke r1.<org.joda.time.ReadWritablePeriod: void setMillis(int)>(i1);     default: goto goto [?= return]; }
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.setFieldValue : interfaceinvoke r1.<org.joda.time.ReadWritablePeriod: void setYears(int)>(i1)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.setFieldValue : goto [?= return]
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.setFieldValue : interfaceinvoke r1.<org.joda.time.ReadWritablePeriod: void setSeconds(int)>(i1)
org.joda.time.tz.CachedDateTimeZone.hashCode : $r1 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone>
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : r2 = r0.<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: java.lang.String iText>
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : goto [?= i3 = i3 + 1]
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : i3 = i0
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : $z0 = virtualinvoke r1.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, i3, r2, 0, i1)
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : i2 = virtualinvoke r1.<java.lang.String: int length()>()
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : goto [?= $i5 = i0 ^ -1]
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : $c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i3)
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : i1 = virtualinvoke r2.<java.lang.String: int length()>()
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : $i5 = i0 ^ -1
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : return i3
org.joda.time.PeriodType.indexOf : return i0
org.joda.time.PeriodType.indexOf : $r2 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.PeriodType.indexOf : i0 = 0
