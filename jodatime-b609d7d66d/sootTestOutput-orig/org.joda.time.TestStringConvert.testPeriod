org.joda.time.format.PeriodFormatter.parseMutablePeriod : $i1 = virtualinvoke r1.<java.lang.String: int length()>()
org.joda.time.format.PeriodFormatter.parseMutablePeriod : return r2
org.joda.time.format.PeriodFormatter.parseMutablePeriod : $r3 = new org.joda.time.MutablePeriod
org.joda.time.format.PeriodFormatter.parseMutablePeriod : $r5 = virtualinvoke r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodParser getParser()>()
org.joda.time.format.PeriodFormatter.parseMutablePeriod : if i0 < 0 goto i0 = i0 ^ -1
org.joda.time.format.PeriodFormatter.parseMutablePeriod : specialinvoke r0.<org.joda.time.format.PeriodFormatter: void checkParser()>()
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 10 goto (branch)
org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48)
org.joda.time.format.FormatUtils.appendPaddedInteger : if i1 <= 1 goto $i3 = i0 + 48
org.joda.time.format.FormatUtils.appendPaddedInteger : $i3 = i0 + 48
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 0 goto (branch)
org.joda.time.chrono.BaseChronology.get : return r2
org.joda.time.chrono.BaseChronology.get : r2 = newarray (int)[i1]
org.joda.time.chrono.BaseChronology.get : i1 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int size()>()
org.joda.time.chrono.BaseChronology.get : $b5 = l0 cmp 0L
org.joda.time.base.BasePeriod.getPeriodType : $r1 = r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType>
org.joda.time.DateTimeZone.offsetFormatter : $r4 = <org.joda.time.DateTimeZone: org.joda.time.format.DateTimeFormatter cOffsetFormatter>
org.joda.time.DateTimeZone.offsetFormatter : $r0 = <org.joda.time.DateTimeZone: org.joda.time.format.DateTimeFormatter cOffsetFormatter>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.countFieldsToPrint : return 1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.countFieldsToPrint : $i1 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iPrintZeroSetting>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.countFieldsToPrint : if i0 > 0 goto $i1 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iPrintZeroSetting>
org.joda.time.format.FormatUtils.calculateDigitCount : $b1 = l0 cmp 0L
org.joda.time.format.FormatUtils.calculateDigitCount : $b6 = l0 cmp 10L
org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : $r4 = r3[i2]
org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : i1 = 0
org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : i2 = lengthof r3
org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : r3 = r0.<org.joda.time.format.PeriodFormatterBuilder$Composite: org.joda.time.format.PeriodPrinter[] iPrinters>
org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : return i1
org.joda.time.format.FormatUtils.appendUnpaddedInteger : if i0 >= 10 goto (branch)
org.joda.time.format.FormatUtils.appendUnpaddedInteger : $i2 = i0 + 48
org.joda.time.format.FormatUtils.appendUnpaddedInteger : if i0 >= 0 goto (branch)
org.joda.time.DateTimeZone$1.withUTC : return r0
org.joda.time.format.FormatUtils.parseTwoDigits : $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0)
org.joda.time.format.FormatUtils.parseTwoDigits : $i3 = i1 << 3
org.joda.time.DurationFieldType.seconds : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType SECONDS_TYPE>
org.joda.time.base.BasePeriod.setField : $r2 = r0.<org.joda.time.base.BasePeriod: int[] iValues>
org.joda.time.chrono.ISOChronology.getInstance : if r0 != null goto $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0)
org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0)
org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache>
org.joda.time.chrono.ISOChronology.getInstance : return r1
org.joda.time.chrono.ISOChronology.getInstance : if r1 == null goto $r7 = <org.joda.time.chrono.ISOChronology: java.util.Map cCache>
org.joda.time.chrono.ISOChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>()
org.joda.time.format.DateTimeParserBucket.computeMillis : r2 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields>
org.joda.time.format.DateTimeParserBucket.computeMillis : return l5
org.joda.time.format.DateTimeParserBucket.computeMillis : $z1 = r0.<org.joda.time.format.DateTimeParserBucket: boolean iSavedFieldsShared>
org.joda.time.format.DateTimeParserBucket.computeMillis : if i0 <= 0 goto l5 = r0.<org.joda.time.format.DateTimeParserBucket: long iMillis>
org.joda.time.format.DateTimeParserBucket.computeMillis : i6 = 0
org.joda.time.format.DateTimeParserBucket.computeMillis : goto [?= $r27 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset>]
org.joda.time.format.DateTimeParserBucket.computeMillis : if z0 == 0 goto (branch)
org.joda.time.format.DateTimeParserBucket.computeMillis : l5 = r0.<org.joda.time.format.DateTimeParserBucket: long iMillis>
org.joda.time.format.DateTimeParserBucket.computeMillis : $r27 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset>
org.joda.time.format.DateTimeParserBucket.computeMillis : $r28 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset>
org.joda.time.format.DateTimeParserBucket.computeMillis : i0 = r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount>
org.joda.time.format.DateTimeParserBucket.computeMillis : i7 = 0
org.joda.time.format.DateTimeParserBucket.computeMillis : staticinvoke <org.joda.time.format.DateTimeParserBucket: void sort(org.joda.time.format.DateTimeParserBucket$SavedField[],int)>(r2, i0)
org.joda.time.format.DateTimeFormatter.selectChronology : return r2
org.joda.time.format.DateTimeFormatter.selectChronology : $r4 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>
org.joda.time.format.DateTimeFormatter.selectChronology : $r3 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>
org.joda.time.format.DateTimeFormatter.selectChronology : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.format.DateTimeFormatter.selectChronology : r2 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $r3 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iPrefix>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $r5 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iSuffix>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $l9 = staticinvoke <java.lang.Math: long abs(long)>(l0)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $i8 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $i4 = staticinvoke <org.joda.time.format.FormatUtils: int calculateDigitCount(long)>(l0)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : i2 = (int) l0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $b3 = l0 cmp 9223372036854775807L
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : i1 = i7 + 1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $i6 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : i7 = staticinvoke <java.lang.Math: int max(int,int)>(i1, 4)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : l0 = virtualinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>(r1)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : l0 = l0 / 1000L
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : return i1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $r6 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iSuffix>
org.joda.time.format.DateTimeFormatter.parseMillis : $i2 = virtualinvoke r1.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatter.parseMillis : i0 = interfaceinvoke r2.<org.joda.time.format.DateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>(r4, r1, 0)
org.joda.time.format.DateTimeFormatter.parseMillis : $r6 = new org.joda.time.format.DateTimeParserBucket
org.joda.time.format.DateTimeFormatter.parseMillis : $r5 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>
org.joda.time.format.DateTimeFormatter.parseMillis : if i0 < 0 goto i0 = i0 ^ -1
org.joda.time.format.DateTimeFormatter.parseMillis : $l3 = virtualinvoke r4.<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.String)>(1, r1)
org.joda.time.format.DateTimeFormatter.parseMillis : r2 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser requireParser()>()
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.parse : r2 = r0.<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: java.lang.String iText>
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.parse : $i2 = i0 + i1
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.parse : i1 = virtualinvoke r2.<java.lang.String: int length()>()
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.parse : $z0 = virtualinvoke r1.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, i0, r2, 0, i1)
org.joda.time.DurationFieldType.millis : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MILLIS_TYPE>
org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : i1 = 0
org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : $r5 = r4[i1]
org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : i0 = lengthof r4
org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$Composite: org.joda.time.format.PeriodPrinter[] iPrinters>
org.joda.time.convert.ConverterSet.select : $r6 = r2[i1]
org.joda.time.convert.ConverterSet.select : if r1 != null goto $i5 = virtualinvoke r1.<java.lang.Object: int hashCode()>()
org.joda.time.convert.ConverterSet.select : r2 = r0.<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet$Entry[] iSelectEntries>
org.joda.time.convert.ConverterSet.select : i0 = lengthof r2
org.joda.time.convert.ConverterSet.select : $r7 = r3.<org.joda.time.convert.ConverterSet$Entry: java.lang.Class iType>
org.joda.time.convert.ConverterSet.select : $r8 = r3.<org.joda.time.convert.ConverterSet$Entry: org.joda.time.convert.Converter iConverter>
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i1 > 1 goto c3 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i0)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i27 = i21 + -2
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if z2 == 0 goto $i50 = i5
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetParseText>
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i18 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.String,int,int)>(r2, i17, 2)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i4 <= 23 goto i5 = i4 * 3600000
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i16 = i1 + -1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : c23 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i22)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : goto [?= (branch)]
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i5 = i4 * 3600000
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i6 >= 2 goto i7 = staticinvoke <org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.String,int)>(r2, i22)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i27 > 0 goto (branch)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i21 = i16 + -2
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i7 <= 59 goto $i26 = i7 * 60000
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : z2 = 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if c23 != 58 goto (branch)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if c3 != 43 goto $i15 = i0 ^ -1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i6 != 0 goto (branch)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i26 = i7 * 60000
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i22 = i22 + 2
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : c3 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i0)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i22 = i22 + 1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i4 = staticinvoke <org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.String,int)>(r2, i17)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i9 = virtualinvoke r2.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i6 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.String,int,int)>(r2, i22, 2)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i7 = staticinvoke <org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.String,int)>(r2, i22)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i22 = i17 + 2
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i21 > 0 goto c23 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i22)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : z0 = 1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if c3 != 45 goto (branch)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : return i22
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i17 = i0 + 1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i21 = i21 + -1
org.joda.time.MutablePeriod.setMonths : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>()
org.joda.time.format.PeriodFormatterBuilder$Literal.calculatePrintedLength : $r3 = r0.<org.joda.time.format.PeriodFormatterBuilder$Literal: java.lang.String iText>
org.joda.time.base.AbstractPeriod.getFieldType : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.MutablePeriod.setHours : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>()
org.joda.time.chrono.ZonedChronology.getZone : $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: java.lang.Object getParam()>()
org.joda.time.format.DateTimeParserBucket.setOffset : r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset> = r1
org.joda.time.format.DateTimeParserBucket.setOffset : r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState> = null
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $r4 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $r6 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $r10 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $r3 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $r5 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : tableswitch(i0) {     case 0: goto $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>();     case 1: goto $r3 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>();     case 2: goto $r4 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>();     case 3: goto $r5 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>();     case 4: goto $r6 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>();     case 5: goto $r7 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>();     case 6: goto $r8 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>();     case 7: goto $r9 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>();     case 8: goto $r10 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>();     case 9: goto $r10 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>();     default: goto return 0; }
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $r7 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>()
org.joda.time.DateTimeUtils.getChronology : if r0 != null goto return r0
org.joda.time.DateTimeUtils.getChronology : return r0
org.joda.time.DateTimeUtils.getChronology : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>()
org.joda.time.base.BasePeriod.setValues : $r2 = r0.<org.joda.time.base.BasePeriod: int[] iValues>
org.joda.time.format.ISOPeriodFormat.standard : $r0 = <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter cStandard>
org.joda.time.format.ISOPeriodFormat.standard : $r19 = <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter cStandard>
org.joda.time.DateTimeZone$1.getZone : return null
org.joda.time.base.BasePeriod.setPeriod : if r1 != null goto specialinvoke r0.<org.joda.time.base.BasePeriod: void setPeriodInternal(org.joda.time.ReadablePeriod)>(r1)
org.joda.time.base.BasePeriod.setPeriod : specialinvoke r0.<org.joda.time.base.BasePeriod: void setPeriodInternal(org.joda.time.ReadablePeriod)>(r1)
org.joda.time.base.AbstractPeriod.toString : $r1 = staticinvoke <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>()
org.joda.time.DateTimeZone.fixedOffsetZone : if i0 != 0 goto $r4 = <org.joda.time.DateTimeZone: java.util.Map iFixedOffsetCache>
org.joda.time.DateTimeZone.fixedOffsetZone : return r2
org.joda.time.DateTimeZone.fixedOffsetZone : if r2 == null goto $r9 = new org.joda.time.tz.FixedDateTimeZone
org.joda.time.DateTimeZone.fixedOffsetZone : $r8 = virtualinvoke r1.<java.lang.ref.Reference: java.lang.Object get()>()
org.joda.time.DateTimeZone.fixedOffsetZone : $r4 = <org.joda.time.DateTimeZone: java.util.Map iFixedOffsetCache>
org.joda.time.DateTimeZone.fixedOffsetZone : $r6 = <org.joda.time.DateTimeZone: java.util.Map iFixedOffsetCache>
org.joda.time.DateTimeZone.fixedOffsetZone : if r1 == null goto $r9 = new org.joda.time.tz.FixedDateTimeZone
org.joda.time.base.AbstractPeriod.indexOf : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.base.BasePeriod.setFieldInto : if i1 != -1 goto r1[i1] = i0
org.joda.time.base.BasePeriod.setFieldInto : i1 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int indexOf(org.joda.time.DurationFieldType)>(r2)
org.joda.time.base.BasePeriod.setFieldInto : r1[i1] = i0
org.joda.time.DateTimeUtils.getPeriodType : if r0 != null goto return r0
org.joda.time.DateTimeUtils.getPeriodType : $r1 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType standard()>()
org.joda.time.DateTimeUtils.getPeriodType : return r0
org.joda.time.base.BasePeriod.getValue : $r1 = r0.<org.joda.time.base.BasePeriod: int[] iValues>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r7 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : r2 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r11 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : if r2 == null goto $i5 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $b17 = l0 cmp 0L
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : return l0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : goto [?= $b17 = l0 cmp 0L]
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i5 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r6 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r3 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $l14 = (long) i1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r8 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r12 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i3 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iPrintZeroSetting>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r5 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r4 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>()
org.joda.time.DurationFieldType.hours : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType HOURS_TYPE>
org.joda.time.MutablePeriod.setMillis : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>()
org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : return i0
org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : $r6 = r4[i2]
org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : if r4 != null goto i1 = lengthof r4
org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : i2 = 0
org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$Composite: org.joda.time.format.PeriodParser[] iParsers>
org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : i1 = lengthof r4
org.joda.time.convert.ConverterManager.getPeriodConverter : if r2 == null goto $r7 = new java.lang.IllegalArgumentException
org.joda.time.convert.ConverterManager.getPeriodConverter : $r4 = r0.<org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterSet iPeriodConverters>
org.joda.time.convert.ConverterManager.getPeriodConverter : return r2
org.joda.time.convert.ConverterManager.getPeriodConverter : $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>()
org.joda.time.DateTimeZone.forID : $z1 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("+")
org.joda.time.DateTimeZone.forID : $r7 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone fixedOffsetZone(java.lang.String,int)>(r6, i0)
org.joda.time.DateTimeZone.forID : r6 = staticinvoke <org.joda.time.DateTimeZone: java.lang.String printOffset(int)>(i0)
org.joda.time.DateTimeZone.forID : $l1 = (long) i0
org.joda.time.DateTimeZone.forID : i0 = staticinvoke <org.joda.time.DateTimeZone: int parseOffset(java.lang.String)>(r0)
org.joda.time.DateTimeZone.forID : if r0 != null goto $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("UTC")
org.joda.time.DateTimeZone.forID : $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("UTC")
org.joda.time.DateTimeZone.forID : if r1 == null goto $z1 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("+")
org.joda.time.DateTimeZone.forID : $r4 = <org.joda.time.DateTimeZone: org.joda.time.tz.Provider cProvider>
org.joda.time.format.PeriodFormatterBuilder$Literal.parseInto : $r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$Literal: java.lang.String iText>
org.joda.time.format.PeriodFormatterBuilder$Literal.parseInto : $r6 = r0.<org.joda.time.format.PeriodFormatterBuilder$Literal: java.lang.String iText>
org.joda.time.tz.ZoneInfoProvider.getZone : if r1 != null goto $r5 = r0.<org.joda.time.tz.ZoneInfoProvider: java.util.Map iZoneInfoMap>
org.joda.time.tz.ZoneInfoProvider.getZone : $r5 = r0.<org.joda.time.tz.ZoneInfoProvider: java.util.Map iZoneInfoMap>
org.joda.time.tz.ZoneInfoProvider.getZone : if r2 != null goto $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r2)
org.joda.time.tz.ZoneInfoProvider.getZone : return null
org.joda.time.DateTimeUtils.checkPermission : r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>()
org.joda.time.DateTimeUtils.checkPermission : if r0 == null goto return
org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.convert.ReadablePeriodConverter.getPeriodType : $r3 = interfaceinvoke r2.<org.joda.time.ReadablePeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.convert.ReadablePeriodConverter.getPeriodType : r2 = (org.joda.time.ReadablePeriod) r1
org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : return i0
org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : i0 = 0
org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : $r4 = r3[i1]
org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : r3 = r0.<org.joda.time.format.PeriodFormatterBuilder$Composite: org.joda.time.format.PeriodPrinter[] iPrinters>
org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : i1 = lengthof r3
org.joda.time.DurationFieldType.days : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType DAYS_TYPE>
org.joda.time.format.PeriodFormatter.checkParser : $r1 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodParser iParser>
org.joda.time.format.DateTimeFormatter.requireParser : if r1 != null goto return r1
org.joda.time.format.DateTimeFormatter.requireParser : r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser iParser>
org.joda.time.format.DateTimeFormatter.requireParser : return r1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : $i7 = i0 + i6
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : if i2 <= 0 goto return i6
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : $i4 = virtualinvoke r1.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : return i6
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : i6 = i6 + 1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : i6 = 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : if c3 < 48 goto return i6
org.joda.time.PeriodType.size : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.format.PeriodFormatter.parsePeriod : $r2 = virtualinvoke r0.<org.joda.time.format.PeriodFormatter: org.joda.time.MutablePeriod parseMutablePeriod(java.lang.String)>(r1)
org.joda.time.format.PeriodFormatter.parsePeriod : specialinvoke r0.<org.joda.time.format.PeriodFormatter: void checkParser()>()
org.joda.time.DateTimeZone.getDefault : if r0 != null goto return r0
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if i46 < 0 goto return i46
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i30 = i2 + 1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i7 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iPrintZeroSetting>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : i3 = 0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i18 = i0 + i3
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : i46 = i0 + i3
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if c5 < 48 goto (branch)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i13 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iMaxParsedDigits>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i40 = i4 - i0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i37 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if i4 < 0 goto $i29 = i0 + i3
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : i1 = -1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : virtualinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void setFieldValue(org.joda.time.ReadWritablePeriod,int,int)>(r1, 7, i6)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $r7 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iSuffix>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : i4 = -1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i35 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if i42 >= 0 goto virtualinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void setFieldValue(org.joda.time.ReadWritablePeriod,int,int)>(r1, 7, i6)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i29 = i0 + i3
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : z1 = 1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if c5 == 46 goto $i27 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i8 = virtualinvoke r2.<java.lang.String: int length()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : z1 = 0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i43 = i0 + i3
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if i1 < 0 goto $i35 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if i1 < 0 goto (branch)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : virtualinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void setFieldValue(org.joda.time.ReadWritablePeriod,int,int)>(r1, 6, i42)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : i6 = specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInt(java.lang.String,int,int)>(r2, i4, 3)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if i3 >= i2 goto (branch)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if i44 > 0 goto (branch)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if i3 != 0 goto (branch)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : i3 = i3 + 1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if i1 <= 0 goto $i15 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iMaxParsedDigits>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $r6 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iSuffix>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if i44 < 3 goto i45 = specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInt(java.lang.String,int,int)>(r2, i4, i44)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : z0 = 1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : return i46
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if i4 >= 0 goto $i40 = i4 - i0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iPrefix>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : goto [?= staticinvoke <edu.washington.cs.dt.impact.util.Tracer: void trace(java.lang.String,java.lang.String)>("if i3 >= i2 goto (branch)", "org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto")]
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if z1 != 0 goto (branch)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $r10 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iSuffix>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if z0 != 0 goto (branch)
org.joda.time.MutablePeriod.setSeconds : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>()
org.joda.time.DateTimeZone.parseOffset : $r3 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.format.DateTimeFormatter offsetFormatter()>()
org.joda.time.DateTimeZone.parseOffset : $r1 = new org.joda.time.DateTimeZone$1
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.printTo : $r2 = r0.<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: java.lang.String iText>
org.joda.time.MutablePeriod.setYears : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>()
org.joda.time.DurationFieldType.minutes : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MINUTES_TYPE>
org.joda.time.MutablePeriod.setPeriod : specialinvoke r0.<org.joda.time.base.BasePeriod: void setPeriod(org.joda.time.ReadablePeriod)>(r1)
org.joda.time.PeriodType.isSupported : $i0 = virtualinvoke r0.<org.joda.time.PeriodType: int indexOf(org.joda.time.DurationFieldType)>(r1)
org.joda.time.PeriodType.standard : if r0 != null goto return r0
org.joda.time.PeriodType.standard : r0 = <org.joda.time.PeriodType: org.joda.time.PeriodType cStandard>
org.joda.time.PeriodType.standard : return r0
org.joda.time.DateTimeZone.printOffset : $i6 = i2 * 60000
org.joda.time.DateTimeZone.printOffset : $i4 = i1 * 3600000
org.joda.time.DateTimeZone.printOffset : i2 = i5 / 60000
org.joda.time.DateTimeZone.printOffset : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, i1, 2)
org.joda.time.DateTimeZone.printOffset : if i0 < 0 goto virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45)
org.joda.time.DateTimeZone.printOffset : i1 = i0 / 3600000
org.joda.time.DateTimeZone.printOffset : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(43)
org.joda.time.DateTimeZone.printOffset : if i7 != 0 goto i3 = i7 / 1000
org.joda.time.DateTimeZone.printOffset : $r0 = new java.lang.StringBuffer
org.joda.time.DateTimeZone.printOffset : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58)
org.joda.time.DateTimeZone.printOffset : $r5 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>()
org.joda.time.DateTimeZone.printOffset : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, i2, 2)
org.joda.time.base.AbstractPeriod.equals : if r0 != r1 goto $z0 = r1 instanceof org.joda.time.ReadablePeriod
org.joda.time.base.AbstractPeriod.equals : $i2 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int size()>()
org.joda.time.base.AbstractPeriod.equals : i0 = 0
org.joda.time.base.AbstractPeriod.equals : return 1
org.joda.time.base.AbstractPeriod.equals : r2 = (org.joda.time.ReadablePeriod) r1
org.joda.time.base.AbstractPeriod.equals : $z0 = r1 instanceof org.joda.time.ReadablePeriod
org.joda.time.base.AbstractPeriod.equals : $i4 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int getValue(int)>(i0)
org.joda.time.chrono.AssembledChronology.getParam : $r1 = r0.<org.joda.time.chrono.AssembledChronology: java.lang.Object iParam>
org.joda.time.format.PeriodFormatter.getParser : $r1 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodParser iParser>
org.joda.time.format.PeriodFormatter.print : r2 = virtualinvoke r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter getPrinter()>()
org.joda.time.format.PeriodFormatter.print : $r4 = new java.lang.StringBuffer
org.joda.time.format.PeriodFormatter.print : specialinvoke r0.<org.joda.time.format.PeriodFormatter: void checkPeriod(org.joda.time.ReadablePeriod)>(r1)
org.joda.time.format.PeriodFormatter.print : $r6 = r0.<org.joda.time.format.PeriodFormatter: java.util.Locale iLocale>
org.joda.time.format.PeriodFormatter.print : $r7 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>()
org.joda.time.format.PeriodFormatter.print : specialinvoke r0.<org.joda.time.format.PeriodFormatter: void checkPrinter()>()
org.joda.time.base.BasePeriod.checkPeriodType : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>(r1)
org.joda.time.format.DateTimeParserBucket.sort : i1 = 0
org.joda.time.format.DateTimeParserBucket.sort : if i0 <= 10 goto i1 = 0
org.joda.time.Period.parse : $r1 = staticinvoke <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>()
org.joda.time.Period.parse : $r2 = virtualinvoke r1.<org.joda.time.format.PeriodFormatter: org.joda.time.Period parsePeriod(java.lang.String)>(r0)
org.joda.time.DurationFieldType.months : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MONTHS_TYPE>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : $i9 = i6
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : $i10 = i8 << 3
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : i8 = c2 + -48
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : i5 = i0 + 1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : if i1 > 0 goto i5 = i0 + 1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : z0 = 0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : if i1 < 10 goto (branch)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : if z0 == 0 goto $i16 = i8
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : if c2 != 45 goto z0 = 0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : i6 = i1 + -1
org.joda.time.base.BasePeriod.checkAndUpdate : r2[i1] = i0
org.joda.time.base.BasePeriod.checkAndUpdate : i1 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int indexOf(org.joda.time.DurationFieldType)>(r1)
org.joda.time.base.BasePeriod.checkAndUpdate : if i1 != -1 goto r2[i1] = i0
org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : return i0
org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : $i3 = interfaceinvoke r4.<org.joda.time.format.PeriodPrinter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>(r1, r2)
org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : $i2 = interfaceinvoke r3.<org.joda.time.format.PeriodPrinter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>(r1, r2)
org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodPrinter iAfterPrinter>
org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : $z0 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: boolean iUseBefore>
org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : $z2 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: boolean iUseAfter>
org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : $r7 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: java.lang.String iText>
org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : r3 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodPrinter iBeforePrinter>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, i3, 3)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $r8 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iSuffix>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $b4 = l0 cmp 9223372036854775807L
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : i2 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iMinPrintedDigits>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $i5 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $l8 = staticinvoke <java.lang.Math: long abs(long)>(l0)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $r7 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iSuffix>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iPrefix>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $i7 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : l0 = virtualinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>(r2)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : i1 = (int) l0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $i10 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : if i2 > 1 goto staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, i1, i2)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : staticinvoke <org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.StringBuffer,int)>(r1, i1)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $l6 = l0 / 1000L
org.joda.time.format.DateTimeFormatter.withChronology : $r3 = new org.joda.time.format.DateTimeFormatter
org.joda.time.format.DateTimeFormatter.withChronology : $r2 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>
org.joda.time.format.PeriodFormatter.checkPrinter : $r1 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter iPrinter>
org.joda.time.base.AbstractPeriod.get : $i1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int getValue(int)>(i0)
org.joda.time.base.AbstractPeriod.get : if i0 != -1 goto $i1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int getValue(int)>(i0)
org.joda.time.base.AbstractPeriod.get : i0 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int indexOf(org.joda.time.DurationFieldType)>(r1)
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : $r11 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: java.lang.String iText>
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : interfaceinvoke r4.<org.joda.time.format.PeriodPrinter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>(r1, r2, r3)
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodPrinter iBeforePrinter>
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : $z0 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: boolean iUseBefore>
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : $z2 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: boolean iUseAfter>
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : interfaceinvoke r5.<org.joda.time.format.PeriodPrinter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>(r1, r2, r3)
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : r5 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodPrinter iAfterPrinter>
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.calculatePrintedLength : $r1 = r0.<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: java.lang.String iText>
org.joda.time.base.BasePeriod.setPeriodInternal : $r4 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>()
org.joda.time.base.BasePeriod.setPeriodInternal : virtualinvoke r0.<org.joda.time.base.BasePeriod: void setValues(int[])>(r2)
org.joda.time.base.BasePeriod.setPeriodInternal : $i8 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int size()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r3 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r8 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $i3 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int size()>()
org.joda.time.base.BasePeriod.setPeriodInternal : r3 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>(i0)
org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>(r3, r2, i2)
org.joda.time.base.BasePeriod.setPeriodInternal : $r9 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r7 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r6 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>()
org.joda.time.base.BasePeriod.setPeriodInternal : i2 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int getValue(int)>(i0)
org.joda.time.base.BasePeriod.setPeriodInternal : i0 = 0
org.joda.time.base.BasePeriod.setPeriodInternal : $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r5 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>()
org.joda.time.base.BasePeriod.setPeriodInternal : return r1
org.joda.time.DateTimeZone.setDefault : exitmonitor r3
org.joda.time.DateTimeZone.setDefault : $r6 = class "org/joda/time/DateTimeZone"
org.joda.time.DateTimeZone.setDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r0
org.joda.time.DateTimeZone.setDefault : if r1 == null goto (branch)
org.joda.time.DateTimeZone.setDefault : if r0 != null goto $r6 = class "org/joda/time/DateTimeZone"
org.joda.time.DateTimeZone.setDefault : r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>()
org.joda.time.DurationFieldType.years : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType YEARS_TYPE>
org.joda.time.DurationFieldType.weeks : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType WEEKS_TYPE>
org.joda.time.convert.ConverterManager.getInstance : $r2 = <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager INSTANCE>
org.joda.time.convert.ConverterManager.getInstance : $r0 = <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager INSTANCE>
org.joda.time.base.AbstractPeriod.getValues : $i3 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int getValue(int)>(i0)
org.joda.time.base.AbstractPeriod.getValues : i0 = 0
org.joda.time.base.AbstractPeriod.getValues : $i1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int size()>()
org.joda.time.base.AbstractPeriod.getValues : return r1
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : r5 = r4[i3]
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : goto [?= i9 = i4]
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : i3 = 0
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : if i10 >= 0 goto (branch)
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : if r5 == null goto $i7 = i4
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : if z0 == 0 goto (branch)
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : if i4 >= 0 goto z0 = 0
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : $r7 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodParser iAfterParser>
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : z0 = 1
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : i2 = lengthof r4
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : i9 = i4
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : z0 = 0
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : if i10 <= i9 goto return i10
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : if i4 <= i1 goto i9 = i4
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : $i7 = i4
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : $r6 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodParser iBeforeParser>
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : i1 = i0
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : return i10
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: java.lang.String[] iParsedForms>
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : $i6 = virtualinvoke r5.<java.lang.String: int length()>()
org.joda.time.MutablePeriod.setDays : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>()
org.joda.time.MutablePeriod.setMinutes : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>()
org.joda.time.MutablePeriod.setWeeks : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>()
org.joda.time.base.AbstractPeriod.size : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.format.PeriodFormatter.checkPeriod : if r1 != null goto return
org.joda.time.DateTimeUtils.setCurrentMillisSystem : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>()
org.joda.time.DateTimeUtils.setCurrentMillisSystem : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$SystemMillisProvider SYSTEM_MILLIS_PROVIDER>
org.joda.time.base.AbstractPeriod.toPeriod : $r1 = new org.joda.time.Period
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.setFieldValue : interfaceinvoke r1.<org.joda.time.ReadWritablePeriod: void setMinutes(int)>(i1)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.setFieldValue : interfaceinvoke r1.<org.joda.time.ReadWritablePeriod: void setMillis(int)>(i1)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.setFieldValue : tableswitch(i0) {     case 0: goto interfaceinvoke r1.<org.joda.time.ReadWritablePeriod: void setYears(int)>(i1);     case 1: goto interfaceinvoke r1.<org.joda.time.ReadWritablePeriod: void setMonths(int)>(i1);     case 2: goto interfaceinvoke r1.<org.joda.time.ReadWritablePeriod: void setWeeks(int)>(i1);     case 3: goto interfaceinvoke r1.<org.joda.time.ReadWritablePeriod: void setDays(int)>(i1);     case 4: goto interfaceinvoke r1.<org.joda.time.ReadWritablePeriod: void setHours(int)>(i1);     case 5: goto interfaceinvoke r1.<org.joda.time.ReadWritablePeriod: void setMinutes(int)>(i1);     case 6: goto interfaceinvoke r1.<org.joda.time.ReadWritablePeriod: void setSeconds(int)>(i1);     case 7: goto interfaceinvoke r1.<org.joda.time.ReadWritablePeriod: void setMillis(int)>(i1);     default: goto goto [?= return]; }
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.setFieldValue : interfaceinvoke r1.<org.joda.time.ReadWritablePeriod: void setWeeks(int)>(i1)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.setFieldValue : interfaceinvoke r1.<org.joda.time.ReadWritablePeriod: void setYears(int)>(i1)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.setFieldValue : interfaceinvoke r1.<org.joda.time.ReadWritablePeriod: void setMonths(int)>(i1)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.setFieldValue : interfaceinvoke r1.<org.joda.time.ReadWritablePeriod: void setDays(int)>(i1)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.setFieldValue : interfaceinvoke r1.<org.joda.time.ReadWritablePeriod: void setHours(int)>(i1)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.setFieldValue : goto [?= return]
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.setFieldValue : interfaceinvoke r1.<org.joda.time.ReadWritablePeriod: void setSeconds(int)>(i1)
org.joda.time.convert.ReadablePeriodConverter.setInto : $r4 = (org.joda.time.ReadablePeriod) r2
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : r2 = r0.<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: java.lang.String iText>
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : goto [?= i3 = i3 + 1]
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : i3 = i0
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : $z0 = virtualinvoke r1.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, i3, r2, 0, i1)
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : i2 = virtualinvoke r1.<java.lang.String: int length()>()
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : $c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i3)
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : i1 = virtualinvoke r2.<java.lang.String: int length()>()
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : return i3
org.joda.time.PeriodType.getFieldType : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.PeriodType.indexOf : return i0
org.joda.time.PeriodType.indexOf : $r2 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.PeriodType.indexOf : i0 = 0
org.joda.time.format.PeriodFormatterBuilder$Literal.printTo : $r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$Literal: java.lang.String iText>
org.joda.time.format.PeriodFormatter.getPrinter : $r1 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter iPrinter>
