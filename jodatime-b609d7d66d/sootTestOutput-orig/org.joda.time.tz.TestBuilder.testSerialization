org.joda.time.tz.CachedDateTimeZone.forZone : $z0 = r0 instanceof org.joda.time.tz.CachedDateTimeZone
org.joda.time.tz.CachedDateTimeZone.forZone : $r2 = new org.joda.time.tz.CachedDateTimeZone
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r9 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField days()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r6 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField years()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r7 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField months()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonthNext : goto [?= return l0]
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonthNext : l0 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>(r1, l0)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonthNext : return l0
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : $l13 = (long) i3
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : i3 = i1 + i2
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : $c5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : $i12 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfWeek>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : l11 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>(r1, l10)
org.joda.time.tz.DateTimeZoneBuilder.setFixedSavings : $r2 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder$RuleSet getLastRuleSet()>()
org.joda.time.tz.DateTimeZoneBuilder.setFixedSavings : return r0
org.joda.time.chrono.BaseChronology.get : return r2
org.joda.time.chrono.BaseChronology.get : $b5 = l0 cmp l1
org.joda.time.chrono.BaseChronology.get : $r4 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>(i3)
org.joda.time.chrono.BaseChronology.get : i2 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int size()>()
org.joda.time.chrono.BaseChronology.get : i3 = 0
org.joda.time.chrono.BaseChronology.get : l0 = virtualinvoke r3.<org.joda.time.DurationField: long add(long,int)>(l0, i4)
org.joda.time.chrono.BaseChronology.get : i4 = virtualinvoke r3.<org.joda.time.DurationField: int getDifference(long,long)>(l1, l0)
org.joda.time.chrono.BaseChronology.get : r2 = newarray (int)[i2]
org.joda.time.chrono.BaseChronology.get : r2[i3] = i4
org.joda.time.base.BasePeriod.getPeriodType : $r1 = r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType>
org.joda.time.tz.DateTimeZoneBuilder.writeTo : $r4 = new java.io.DataOutputStream
org.joda.time.tz.DateTimeZoneBuilder.writeTo : $r5 = (org.joda.time.tz.CachedDateTimeZone) r3
org.joda.time.tz.DateTimeZoneBuilder.writeTo : $z0 = r2 instanceof java.io.DataOutput
org.joda.time.tz.DateTimeZoneBuilder.writeTo : $r6 = (org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone) r3
org.joda.time.tz.DateTimeZoneBuilder.writeTo : $z1 = r3 instanceof org.joda.time.tz.CachedDateTimeZone
org.joda.time.tz.DateTimeZoneBuilder.writeTo : $z0 = r3 instanceof org.joda.time.tz.FixedDateTimeZone
org.joda.time.tz.DateTimeZoneBuilder.writeTo : r3 = virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>(r1, 0)
org.joda.time.tz.DateTimeZoneBuilder.writeTo : interfaceinvoke r2.<java.io.DataOutput: void writeByte(int)>(67)
org.joda.time.field.BaseDurationField.compareTo : $r2 = (org.joda.time.DurationField) r1
org.joda.time.field.BaseDurationField.compareTo : $b2 = l1 cmp l0
org.joda.time.field.BaseDurationField.compareTo : l0 = virtualinvoke r1.<org.joda.time.DurationField: long getUnitMillis()>()
org.joda.time.field.BaseDurationField.compareTo : l1 = virtualinvoke r0.<org.joda.time.field.BaseDurationField: long getUnitMillis()>()
org.joda.time.field.BaseDurationField.compareTo : return 1
org.joda.time.field.BaseDurationField.compareTo : $b3 = l1 cmp l0
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $r5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : return null
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $r4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $i2 = virtualinvoke r3.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int getToYear()>()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $i1 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int getToYear()>()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $r9 = new org.joda.time.tz.DateTimeZoneBuilder$DSTZone
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $r7 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.isCachable : return 1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.isCachable : $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>
org.joda.time.convert.ConverterManager.getInstantConverter : if r2 == null goto $r7 = new java.lang.IllegalArgumentException
org.joda.time.convert.ConverterManager.getInstantConverter : return r2
org.joda.time.convert.ConverterManager.getInstantConverter : $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>()
org.joda.time.convert.ConverterManager.getInstantConverter : $r4 = r0.<org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterSet iInstantConverters>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : i2 = i2 + -7
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : $z0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: boolean iAdvance>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : if i2 == 0 goto return l0
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : $i3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfWeek>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : if i2 <= 0 goto $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : if i2 >= 0 goto $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : return l0
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValueForSet : $r1 = r0.<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.field.PreciseDurationDateTimeField.set : $i4 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int get(long)>(l0)
org.joda.time.field.PreciseDurationDateTimeField.set : $i2 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int getMinimumValue()>()
org.joda.time.field.PreciseDurationDateTimeField.set : $i3 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int getMaximumValueForSet(long,int)>(l0, i1)
org.joda.time.chrono.ISOChronology.withUTC : $r1 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC>
org.joda.time.tz.DateTimeZoneBuilder$Transition.getSaveMillis : $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int iWallOffset>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonthPrevious : goto [?= return l0]
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonthPrevious : l0 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>(r1, l0)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonthPrevious : return l0
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.getOffset : $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset>
org.joda.time.format.FormatUtils.parseTwoDigits : $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0)
org.joda.time.format.FormatUtils.parseTwoDigits : $i3 = i1 << 3
org.joda.time.chrono.GregorianChronology.getMaxYear : return 292278993
org.joda.time.tz.CachedDateTimeZone.getNameKey : $r1 = specialinvoke r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info getInfo(long)>(l0)
org.joda.time.chrono.BasicChronology.getDaysInMonthMax : i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicChronology.getDaysInMonthMax : $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>(i1, i2)
org.joda.time.chrono.BasicChronology.getDaysInMonthMax : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i1)
org.joda.time.chrono.BasicGJChronology.getYearDifference : $z1 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i2)
org.joda.time.chrono.BasicGJChronology.getYearDifference : $b10 = l4 cmp 5097600000L
org.joda.time.chrono.BasicGJChronology.getYearDifference : $l7 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMillis(int)>(i2)
org.joda.time.chrono.BasicGJChronology.getYearDifference : l5 = l5 - 86400000L
org.joda.time.chrono.BasicGJChronology.getYearDifference : l4 = l4 - 86400000L
org.joda.time.chrono.BasicGJChronology.getYearDifference : $l12 = (long) i6
org.joda.time.chrono.BasicGJChronology.getYearDifference : i6 = i2 - i3
org.joda.time.chrono.BasicGJChronology.getYearDifference : i6 = i6 + -1
org.joda.time.chrono.BasicGJChronology.getYearDifference : $b11 = l4 cmp l5
org.joda.time.chrono.BasicGJChronology.getYearDifference : $b9 = l5 cmp 5097600000L
org.joda.time.chrono.BasicGJChronology.getYearDifference : $l8 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMillis(int)>(i3)
org.joda.time.chrono.BasicGJChronology.getYearDifference : i3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getYear(long)>(l1)
org.joda.time.chrono.BasicGJChronology.getYearDifference : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicGJChronology.getYearDifference : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i3)
org.joda.time.tz.CachedDateTimeZone.previousTransition : $r1 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone>
org.joda.time.field.MillisDurationField.getUnitMillis : return 1L
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.getStandardOffset : $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset>
org.joda.time.field.PreciseDurationField.isPrecise : return 1
org.joda.time.chrono.GregorianChronology.getAverageMillisPerYearDividedByTwo : return 15778476000L
org.joda.time.format.DateTimeParserBucket.compareReverse : return -1
org.joda.time.format.DateTimeParserBucket.compareReverse : if r1 == null goto return 0
org.joda.time.format.DateTimeParserBucket.compareReverse : if r1 == null goto return 1
org.joda.time.format.DateTimeParserBucket.compareReverse : $i0 = virtualinvoke r0.<org.joda.time.DurationField: int compareTo(java.lang.Object)>(r1)
org.joda.time.format.DateTimeParserBucket.compareReverse : if r0 == null goto (branch)
org.joda.time.base.BaseDateTime.checkInstant : return l0
org.joda.time.tz.CachedDateTimeZone$Info.getOffset : $i3 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: int iOffset>
org.joda.time.tz.CachedDateTimeZone$Info.getOffset : $i6 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: int iOffset>
org.joda.time.tz.CachedDateTimeZone$Info.getOffset : $r4 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: org.joda.time.tz.CachedDateTimeZone$Info iNextInfo>
org.joda.time.tz.CachedDateTimeZone$Info.getOffset : $r3 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: org.joda.time.DateTimeZone iZoneRef>
org.joda.time.tz.CachedDateTimeZone$Info.getOffset : $r1 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: org.joda.time.tz.CachedDateTimeZone$Info iNextInfo>
org.joda.time.field.PreciseDurationDateTimeField.getMinimumValue : return 0
org.joda.time.chrono.ISOChronology.getInstance : if r0 != null goto $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0)
org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0)
org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache>
org.joda.time.chrono.ISOChronology.getInstance : return r1
org.joda.time.chrono.ISOChronology.getInstance : if r1 == null goto $r7 = <org.joda.time.chrono.ISOChronology: java.util.Map cCache>
org.joda.time.chrono.ISOChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>()
org.joda.time.chrono.AssembledChronology.months : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMonths>
org.joda.time.format.DateTimeParserBucket.computeMillis : $r7 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields>
org.joda.time.format.DateTimeParserBucket.computeMillis : r2 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields>
org.joda.time.format.DateTimeParserBucket.computeMillis : $r15 = r2[0]
org.joda.time.format.DateTimeParserBucket.computeMillis : return l5
org.joda.time.format.DateTimeParserBucket.computeMillis : $z1 = r0.<org.joda.time.format.DateTimeParserBucket: boolean iSavedFieldsShared>
org.joda.time.format.DateTimeParserBucket.computeMillis : if i0 <= 0 goto l5 = r0.<org.joda.time.format.DateTimeParserBucket: long iMillis>
org.joda.time.format.DateTimeParserBucket.computeMillis : $r11 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>()
org.joda.time.format.DateTimeParserBucket.computeMillis : i6 = 0
org.joda.time.format.DateTimeParserBucket.computeMillis : $r19 = r2[i7]
org.joda.time.format.DateTimeParserBucket.computeMillis : goto [?= $r27 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset>]
org.joda.time.format.DateTimeParserBucket.computeMillis : if z0 == 0 goto (branch)
org.joda.time.format.DateTimeParserBucket.computeMillis : $r18 = r2[i6]
org.joda.time.format.DateTimeParserBucket.computeMillis : $r13 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>()
org.joda.time.format.DateTimeParserBucket.computeMillis : l5 = r0.<org.joda.time.format.DateTimeParserBucket: long iMillis>
org.joda.time.format.DateTimeParserBucket.computeMillis : $i1 = staticinvoke <org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>(r5, r3)
org.joda.time.format.DateTimeParserBucket.computeMillis : $r27 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset>
org.joda.time.format.DateTimeParserBucket.computeMillis : $r28 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset>
org.joda.time.format.DateTimeParserBucket.computeMillis : i0 = r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount>
org.joda.time.format.DateTimeParserBucket.computeMillis : i7 = 0
org.joda.time.format.DateTimeParserBucket.computeMillis : staticinvoke <org.joda.time.format.DateTimeParserBucket: void sort(org.joda.time.format.DateTimeParserBucket$SavedField[],int)>(r2, i0)
org.joda.time.format.DateTimeParserBucket.computeMillis : r0.<org.joda.time.format.DateTimeParserBucket: boolean iSavedFieldsShared> = 0
org.joda.time.format.DateTimeFormatter.selectChronology : return r2
org.joda.time.format.DateTimeFormatter.selectChronology : $r4 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>
org.joda.time.format.DateTimeFormatter.selectChronology : $r3 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>
org.joda.time.format.DateTimeFormatter.selectChronology : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : r3 = newarray (java.lang.String)[i4]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : interfaceinvoke r1.<java.io.DataOutput: void writeShort(int)>(i4)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $r11 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : i3 = 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : i4 = interfaceinvoke r2.<java.util.Set: int size()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : interfaceinvoke r1.<java.io.DataOutput: void writeInt(int)>(i0)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $r7 = new java.util.HashSet
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $r6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : i6 = 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $r20 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : i1 = 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $r22 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : interfaceinvoke r1.<java.io.DataOutput: void writeByte(int)>(i3)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $r21 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $r17 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String[] iNameKeys>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : i5 = 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $r13 = r3[i5]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : r4 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : if i4 >= 256 goto interfaceinvoke r1.<java.io.DataOutput: void writeShort(int)>(i3)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : if i4 <= 65535 goto r3 = newarray (java.lang.String)[i4]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $r15 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iWallOffsets>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : i2 = 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $r8 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String[] iNameKeys>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $r16 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iStandardOffsets>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $r14 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $r18 = r3[i3]
org.joda.time.format.DateTimeParserBucket.getChronology : $r1 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.Chronology iChrono>
org.joda.time.format.DateTimeFormatter.parseMillis : $i2 = virtualinvoke r1.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatter.parseMillis : i0 = interfaceinvoke r2.<org.joda.time.format.DateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>(r4, r1, 0)
org.joda.time.format.DateTimeFormatter.parseMillis : $r6 = new org.joda.time.format.DateTimeParserBucket
org.joda.time.format.DateTimeFormatter.parseMillis : $r5 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>
org.joda.time.format.DateTimeFormatter.parseMillis : if i0 < 0 goto i0 = i0 ^ -1
org.joda.time.format.DateTimeFormatter.parseMillis : $l3 = virtualinvoke r4.<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.String)>(1, r1)
org.joda.time.format.DateTimeFormatter.parseMillis : r2 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser requireParser()>()
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.writeTo : $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String iNameKey>
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.writeTo : $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$OfYear iOfYear>
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.writeTo : $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int iSaveMillis>
org.joda.time.chrono.BasicYearDateTimeField.getRangeDurationField : return null
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.setStandardOffset : r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset> = i0
org.joda.time.tz.CachedDateTimeZone.getOffset : $r1 = specialinvoke r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info getInfo(long)>(l0)
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : c7 = staticinvoke <java.lang.Character: char toLowerCase(char)>(c5)
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : if c5 == c6 goto $i10 = i0 + 1
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : c6 = staticinvoke <java.lang.Character: char toUpperCase(char)>(c2)
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : $i10 = i0 + 1
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : c8 = staticinvoke <java.lang.Character: char toLowerCase(char)>(c6)
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : c2 = r0.<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: char iValue>
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : if c1 == c2 goto $i10 = i0 + 1
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : c1 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i0)
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : $i3 = virtualinvoke r2.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : $i9 = i0 ^ -1
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : c5 = staticinvoke <java.lang.Character: char toUpperCase(char)>(c1)
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : if c7 == c8 goto $i10 = i0 + 1
org.joda.time.tz.CachedDateTimeZone.getUncachedZone : $r1 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone>
org.joda.time.chrono.GJDayOfWeekDateTimeField.get : $r1 = r0.<org.joda.time.chrono.GJDayOfWeekDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.format.DateTimeFormatterBuilder.isParser : $z1 = r1 instanceof org.joda.time.format.DateTimeFormatterBuilder$Composite
org.joda.time.format.DateTimeFormatterBuilder.isParser : return 1
org.joda.time.format.DateTimeFormatterBuilder.isParser : $z0 = r1 instanceof org.joda.time.format.DateTimeParser
org.joda.time.convert.ConverterSet.select : $r6 = r2[i1]
org.joda.time.convert.ConverterSet.select : if r1 != null goto $i5 = virtualinvoke r1.<java.lang.Object: int hashCode()>()
org.joda.time.convert.ConverterSet.select : r2 = r0.<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet$Entry[] iSelectEntries>
org.joda.time.convert.ConverterSet.select : i0 = lengthof r2
org.joda.time.convert.ConverterSet.select : $r7 = r3.<org.joda.time.convert.ConverterSet$Entry: java.lang.Class iType>
org.joda.time.convert.ConverterSet.select : $r8 = r3.<org.joda.time.convert.ConverterSet$Entry: org.joda.time.convert.Converter iConverter>
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i1 > 1 goto c3 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i0)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i27 = i21 + -2
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $r6 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetParseText>
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if z2 == 0 goto $i50 = i5
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if z0 == 0 goto i29 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.String,int,int)>(r2, i22, 2)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i33 = i27 + -2
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetParseText>
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i29 != 0 goto (branch)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i18 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.String,int,int)>(r2, i17, 2)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $r9 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetParseText>
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i4 <= 23 goto i5 = i4 * 3600000
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i29 >= 2 goto i8 = staticinvoke <org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.String,int)>(r2, i22)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i16 = i1 + -1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : c23 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i22)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : goto [?= (branch)]
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i5 = i4 * 3600000
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i6 >= 2 goto i7 = staticinvoke <org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.String,int)>(r2, i22)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i27 > 0 goto (branch)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i21 = i16 + -2
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i7 <= 59 goto $i26 = i7 * 60000
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : z2 = 1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i33 > 0 goto (branch)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if c23 != 58 goto (branch)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i32 = i8 * 1000
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i8 <= 59 goto $i32 = i8 * 1000
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i27 = i27 + -1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i6 != 0 goto (branch)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i26 = i7 * 60000
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i22 = i22 + 2
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : c3 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i0)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i22 = i22 + 1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i4 = staticinvoke <org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.String,int)>(r2, i17)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i9 = virtualinvoke r2.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i6 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.String,int,int)>(r2, i22, 2)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i8 = staticinvoke <org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.String,int)>(r2, i22)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i29 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.String,int,int)>(r2, i22, 2)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i7 = staticinvoke <org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.String,int)>(r2, i22)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i22 = i17 + 2
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i21 > 0 goto c23 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i22)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $c28 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i22)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : z0 = 1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if c3 != 45 goto (branch)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : return i22
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $r4 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetParseText>
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i17 = i0 + 1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i21 = i21 + -1
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $b17 = l13 cmp l8
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : i3 = 0
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l13 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>(r1, l21)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l13 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>(r1, l12)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $c6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l13 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>(r1, l16)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $r5 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l13 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>(r1, l13)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $l22 = (long) i3
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $b15 = l13 cmp l8
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $c5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : i3 = i1 + i2
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $l7 = (long) i3
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $r6 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $r7 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $i14 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfWeek>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l21 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>(r1, l20)
org.joda.time.format.DateTimeParserBucket.restoreState : $r2 = (org.joda.time.format.DateTimeParserBucket$SavedState) r1
org.joda.time.format.DateTimeParserBucket.restoreState : r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState> = r1
org.joda.time.format.DateTimeParserBucket.restoreState : return 1
org.joda.time.format.DateTimeParserBucket.restoreState : $z0 = r1 instanceof org.joda.time.format.DateTimeParserBucket$SavedState
org.joda.time.chrono.BasicChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.BasicChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>
org.joda.time.base.AbstractPeriod.getFieldType : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.chrono.AssembledChronology.dayOfMonth : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth>
org.joda.time.tz.DateTimeZoneBuilder.readFrom : $r6 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>(r0, r1)
org.joda.time.tz.DateTimeZoneBuilder.readFrom : $r4 = new java.io.DataInputStream
org.joda.time.tz.DateTimeZoneBuilder.readFrom : $i0 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>()
org.joda.time.tz.DateTimeZoneBuilder.readFrom : $z0 = r0 instanceof java.io.DataInput
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r2 = (org.joda.time.format.DateTimePrinter) r1
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r3 = null
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : $r4 = new org.joda.time.format.DateTimeFormatter
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : if r2 != null goto $r4 = new org.joda.time.format.DateTimeFormatter
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>()
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r3 = (org.joda.time.format.DateTimeParser) r1
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : $z1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isParser(java.lang.Object)>(r1)
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : $z0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isPrinter(java.lang.Object)>(r1)
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r2 = null
org.joda.time.format.DateTimeParserBucket.setOffset : r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset> = r1
org.joda.time.format.DateTimeParserBucket.setOffset : r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState> = null
org.joda.time.chrono.AssembledChronology.years : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iYears>
org.joda.time.DateTimeUtils.getChronology : if r0 != null goto return r0
org.joda.time.DateTimeUtils.getChronology : return r0
org.joda.time.DateTimeUtils.getChronology : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>()
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.readFrom : $r2 = new org.joda.time.tz.DateTimeZoneBuilder$DSTZone
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.readFrom : $r3 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence readFrom(java.io.DataInput)>(r0)
org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : $r5 = new org.joda.time.tz.DateTimeZoneBuilder$OfYear
org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : if i1 > i2 goto return r0
org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : $r6 = new org.joda.time.tz.DateTimeZoneBuilder$Recurrence
org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : return r0
org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : $r8 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder$RuleSet getLastRuleSet()>()
org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : $r7 = new org.joda.time.tz.DateTimeZoneBuilder$Rule
org.joda.time.format.DateTimeFormatterBuilder.isPrinter : $z1 = r1 instanceof org.joda.time.format.DateTimeFormatterBuilder$Composite
org.joda.time.format.DateTimeFormatterBuilder.isPrinter : return 1
org.joda.time.format.DateTimeFormatterBuilder.isPrinter : $z0 = r1 instanceof org.joda.time.format.DateTimePrinter
org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : $r4 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: org.joda.time.DateTimeZone iZoneRef>
org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : $r3 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: java.lang.String iNameKey>
org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : $r6 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: java.lang.String iNameKey>
org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : $r7 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: org.joda.time.tz.CachedDateTimeZone$Info iNextInfo>
org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : $r1 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: org.joda.time.tz.CachedDateTimeZone$Info iNextInfo>
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : $i4 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>()
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset>
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : goto [?= $i7 = virtualinvoke r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>()]
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : $i7 = virtualinvoke r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>()
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence>
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence>
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : $b8 = l0 cmp 0L
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : $b10 = l2 cmp l3
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : goto [?= $b10 = l2 cmp l3]
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : $b5 = l0 cmp 0L
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l6 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $b1 = l0 cmp 0L
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : l5 = l0 + 1L
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l2 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.year : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear>
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.readFrom : $r1 = new org.joda.time.tz.DateTimeZoneBuilder$Recurrence
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l7 = l1 & 63L
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $b30 = l0 cmp 0L
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l12 = l11 << 34
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : l1 = l0 / 1800000L
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l24 = l20 >> 32
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l21 = l20 << 26
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l18 = l0 % 1000L
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l2 = l0 % 1800000L
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : l20 = l0 / 1000L
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : interfaceinvoke r0.<java.io.DataOutput: void writeLong(long)>(l0)
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l4 = l1 << 58
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l9 = l0 % 60000L
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l15 = l11 & 1073741823L
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : l11 = l0 / 60000L
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l28 = l20 & -1L
org.joda.time.format.DateTimeParserBucket$SavedField.compareTo : return i0
org.joda.time.format.DateTimeParserBucket$SavedField.compareTo : $r3 = r0.<org.joda.time.format.DateTimeParserBucket$SavedField: org.joda.time.DateTimeField iField>
org.joda.time.format.DateTimeParserBucket$SavedField.compareTo : if i0 == 0 goto $r6 = r0.<org.joda.time.format.DateTimeParserBucket$SavedField: org.joda.time.DateTimeField iField>
org.joda.time.format.DateTimeParserBucket$SavedField.compareTo : r2 = r1.<org.joda.time.format.DateTimeParserBucket$SavedField: org.joda.time.DateTimeField iField>
org.joda.time.format.DateTimeParserBucket$SavedField.compareTo : $r4 = virtualinvoke $r3.<org.joda.time.DateTimeField: org.joda.time.DurationField getRangeDurationField()>()
org.joda.time.tz.DateTimeZoneBuilder.addCutover : $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets>
org.joda.time.tz.DateTimeZoneBuilder.addCutover : $r4 = new org.joda.time.tz.DateTimeZoneBuilder$OfYear
org.joda.time.tz.DateTimeZoneBuilder.addCutover : $r5 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets>
org.joda.time.tz.DateTimeZoneBuilder.addCutover : $r8 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets>
org.joda.time.tz.DateTimeZoneBuilder.addCutover : virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void setUpperLimit(int,org.joda.time.tz.DateTimeZoneBuilder$OfYear)>(i0, r1)
org.joda.time.tz.DateTimeZoneBuilder.addCutover : return r0
org.joda.time.DateTimeUtils.getPeriodType : if r0 != null goto return r0
org.joda.time.DateTimeUtils.getPeriodType : return r0
org.joda.time.format.DateTimeParserBucket.access$102 : r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset> = r1
org.joda.time.format.DateTimeParserBucket.access$100 : $r1 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset>
org.joda.time.field.MillisDurationField.add : $l2 = (long) i1
org.joda.time.chrono.BasicYearDateTimeField.set : $r3 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.set : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.set : $i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMinYear()>()
org.joda.time.format.DateTimeParserBucket.access$202 : r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields> = r1
org.joda.time.tz.DateTimeZoneBuilder$Rule.getSaveMillis : $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iRecurrence>
org.joda.time.format.DateTimeParserBucket.access$200 : $r1 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.isFixed : return 0
org.joda.time.format.DateTimeParserBucket.access$000 : $r1 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone>
org.joda.time.chrono.BasicChronology.getDayOfYear : $l3 = l0 - l2
org.joda.time.chrono.BasicChronology.getDayOfYear : l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1)
org.joda.time.format.DateTimeParserBucket.access$002 : r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone> = r1
org.joda.time.chrono.BasicGJChronology.setYear : return l7
org.joda.time.chrono.BasicGJChronology.setYear : $l6 = (long) i4
org.joda.time.chrono.BasicGJChronology.setYear : i3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getDayOfYear(long,int)>(l0, i2)
org.joda.time.chrono.BasicGJChronology.setYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i2)
org.joda.time.chrono.BasicGJChronology.setYear : i4 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getMillisOfDay(long)>(l0)
org.joda.time.chrono.BasicGJChronology.setYear : $z1 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i1)
org.joda.time.chrono.BasicGJChronology.setYear : if i3 <= 59 goto l5 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMonthDayMillis(int,int,int)>(i1, 1, i3)
org.joda.time.chrono.BasicGJChronology.setYear : l5 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMonthDayMillis(int,int,int)>(i1, 1, i3)
org.joda.time.chrono.BasicGJChronology.setYear : i3 = i3 + 1
org.joda.time.chrono.BasicGJChronology.setYear : $z2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i1)
org.joda.time.chrono.BasicGJChronology.setYear : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicGJChronology.setYear : i3 = i3 + -1
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.addRule : $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.addRule : $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules>
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $r1 = <org.joda.time.chrono.BasicGJChronology: long[] MAX_TOTAL_MILLIS_BY_MONTH_ARRAY>
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $r2 = <org.joda.time.chrono.BasicGJChronology: long[] MIN_TOTAL_MILLIS_BY_MONTH_ARRAY>
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0)
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $l12 = (long) i0
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : i1 = i0 / 100
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : if i0 >= 0 goto $i9 = i0 >> 2
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $i9 = i0 >> 2
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : i8 = i8 + -1
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $z0 = virtualinvoke r0.<org.joda.time.chrono.GregorianChronology: boolean isLeapYear(int)>(i0)
org.joda.time.format.DateTimeParserBucket.access$302 : r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount> = i0
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $r5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $b6 = l3 cmp l2
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $i4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $i9 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iUpperYear>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : goto [?= staticinvoke <edu.washington.cs.dt.impact.util.Tracer: void trace(java.lang.String,java.lang.String)>("$z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()", "org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition")]
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : r2 = r4
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : l2 = l3
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : return null
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $r9 = new org.joda.time.tz.DateTimeZoneBuilder$Transition
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : l2 = 9223372036854775807L
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $b5 = l3 cmp l0
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $r7 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : r2 = null
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : if r2 != null goto $r7 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : interfaceinvoke r3.<java.util.Iterator: void remove()>()
org.joda.time.format.DateTimeParserBucket.access$402 : r0.<org.joda.time.format.DateTimeParserBucket: boolean iSavedFieldsShared> = z0
org.joda.time.field.PreciseDurationField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis>
org.joda.time.format.DateTimeParserBucket.access$300 : $i0 = r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount>
org.joda.time.chrono.BasicYearDateTimeField.getDifferenceAsLong : $b2 = l0 cmp l1
org.joda.time.chrono.BasicYearDateTimeField.getDifferenceAsLong : $r2 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.tz.DateTimeZoneBuilder.setStandardOffset : $r1 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder$RuleSet getLastRuleSet()>()
org.joda.time.tz.DateTimeZoneBuilder.setStandardOffset : return r0
org.joda.time.field.FieldUtils.safeSubtract : $l3 = l0 ^ l2
org.joda.time.field.FieldUtils.safeSubtract : return l2
org.joda.time.field.FieldUtils.safeSubtract : l2 = l0 - l1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r7 = null
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r9 = r20[i2]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $z3 = virtualinvoke r10.<java.lang.String: boolean equals(java.lang.Object)>(r11)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $b25 = l3 cmp l4
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r22 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r7 = r8
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i17 = i12 + 1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r6 = newarray (java.lang.String)[i0]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i9 = virtualinvoke r8.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getStandardOffset()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $l7 = virtualinvoke r8.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r3 = newarray (long)[i0]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : i1 = 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r17 = newarray (java.lang.String)[5]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r5 = newarray (int)[i0]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if r2 == null goto $r73 = new org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if r9 == null goto i2 = i2 + 1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i16 = r4[i12]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i19 = r5[i12]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i15 = i12 + 1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r14 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i1)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r54 = virtualinvoke $r53.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String getNameKey()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r4 = newarray (int)[i0]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $z1 = virtualinvoke r8.<org.joda.time.tz.DateTimeZoneBuilder$Transition: boolean isTransitionFrom(org.joda.time.tz.DateTimeZoneBuilder$Transition)>(r7)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r17 = r9
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : i12 = 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : i0 = virtualinvoke r1.<java.util.ArrayList: int size()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r18 = new java.text.DateFormatSymbols
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i8 = virtualinvoke r8.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getWallOffset()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r16 = virtualinvoke r8.<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String getNameKey()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r23 = new org.joda.time.Period
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if i0 != 0 goto r3 = newarray (long)[i0]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r73 = new org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : i2 = 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i20 = i12 + 1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r10 = r6[i12]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r51 = r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r4 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : l9 = virtualinvoke $r6.<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>(i6, i16, i24)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i14 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : if i5 < 0 goto $i17 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i24 = i8
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : if i1 != 0 goto $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i11 = i4 - 1
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : if i24 <= i8 goto $r6 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $l25 = l9 + l2
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r6 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i12 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>
org.joda.time.field.PreciseDateTimeField.getMaximumValue : $i0 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange>
org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.tz.DateTimeZoneBuilder$Transition.getNameKey : $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String iNameKey>
org.joda.time.chrono.BasicYearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.field.PreciseDateTimeField.set : $i4 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int get(long)>(l0)
org.joda.time.field.PreciseDateTimeField.set : $i2 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int getMinimumValue()>()
org.joda.time.tz.CachedDateTimeZone.isFixed : $r1 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone>
org.joda.time.tz.CachedDateTimeZone.getInfo : r1 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info[] iInfoCache>
org.joda.time.tz.CachedDateTimeZone.getInfo : return r2
org.joda.time.tz.CachedDateTimeZone.getInfo : r2 = r1[i3]
org.joda.time.tz.CachedDateTimeZone.getInfo : $i2 = <org.joda.time.tz.CachedDateTimeZone: int cInfoCacheMask>
org.joda.time.tz.CachedDateTimeZone.getInfo : r1[i3] = r2
org.joda.time.tz.CachedDateTimeZone.getInfo : if r2 == null goto r2 = specialinvoke r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info createInfo(long)>(l0)
org.joda.time.tz.CachedDateTimeZone.getInfo : $l4 = l0 >> 32
org.joda.time.tz.CachedDateTimeZone.getInfo : r2 = specialinvoke r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info createInfo(long)>(l0)
org.joda.time.DurationFieldType.days : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType DAYS_TYPE>
org.joda.time.chrono.BasicChronology.getYearInfo : $r4 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache>
org.joda.time.chrono.BasicChronology.getYearInfo : $r3 = new org.joda.time.chrono.BasicChronology$YearInfo
org.joda.time.chrono.BasicChronology.getYearInfo : if r1 == null goto $r3 = new org.joda.time.chrono.BasicChronology$YearInfo
org.joda.time.chrono.BasicChronology.getYearInfo : $r2 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache>
org.joda.time.chrono.BasicChronology.getYearInfo : return r1
org.joda.time.format.DateTimeFormatter.requireParser : if r1 != null goto return r1
org.joda.time.format.DateTimeFormatter.requireParser : r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser iParser>
org.joda.time.format.DateTimeFormatter.requireParser : return r1
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $b10 = l0 cmp l1
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r4 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r10 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : return l6
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l25 = virtualinvoke $r11.<org.joda.time.chrono.BasicChronology: long getYearMonthMillis(int,int)>(i4, i5)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $b26 = l24 cmp l9
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : if i8 <= i7 goto $r10 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r11 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : i7 = virtualinvoke $r5.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l0, i2, i3)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : l6 = l6 - 1L
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l23 = virtualinvoke $r10.<org.joda.time.chrono.BasicChronology: long getYearMonthMillis(int,int)>(i2, i3)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r8 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : i8 = virtualinvoke $r7.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l1, i4, i5)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $i14 = i2 - i4
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r7 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r6 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.tz.DateTimeZoneBuilder$Rule.getToYear : $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int iToYear>
org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.field.PreciseDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.field.PreciseDateTimeField: org.joda.time.DurationField iRangeField>
org.joda.time.chrono.AssembledChronology.monthOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear>
org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : $r3 = r0.<org.joda.time.format.DateTimeParserBucket$SavedState: org.joda.time.DateTimeZone iZone>
org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : staticinvoke <org.joda.time.format.DateTimeParserBucket: boolean access$402(org.joda.time.format.DateTimeParserBucket,boolean)>(r1, 1)
org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : $r2 = r0.<org.joda.time.format.DateTimeParserBucket$SavedState: org.joda.time.format.DateTimeParserBucket this$0>
org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : $r5 = r0.<org.joda.time.format.DateTimeParserBucket$SavedState: java.lang.Integer iOffset>
org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : $i2 = r0.<org.joda.time.format.DateTimeParserBucket$SavedState: int iSavedFieldsCount>
org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : return 1
org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : $i0 = r0.<org.joda.time.format.DateTimeParserBucket$SavedState: int iSavedFieldsCount>
org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : $r7 = r0.<org.joda.time.format.DateTimeParserBucket$SavedState: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields>
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : $i7 = i0 + i6
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : if i2 <= 0 goto return i6
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : $i4 = virtualinvoke r1.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : return i6
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : i6 = i6 + 1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : i6 = 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : if c3 < 48 goto return i6
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i1)
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : return $b6
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMillis(int)>(i1)
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.previous : $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$OfYear iOfYear>
org.joda.time.PeriodType.size : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.setUpperLimit : r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iUpperYear> = i0
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.setUpperLimit : r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$OfYear iUpperOfYear> = r1
org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.chrono.BasicYearDateTimeField.roundFloor : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.field.PreciseDurationField.add : $l5 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l0, l2)
org.joda.time.field.PreciseDurationField.add : $l3 = (long) i1
org.joda.time.DateTimeZone.getID : $r1 = r0.<org.joda.time.DateTimeZone: java.lang.String iID>
org.joda.time.field.PreciseDurationDateTimeField.getDurationField : $r1 = r0.<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField iUnitField>
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMinimumValue : return 1
org.joda.time.chrono.AssembledChronology.dayOfWeek : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfWeek>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : l1 = -9223372036854775808L
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $b7 = l1 cmp l0
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : return r2
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $i9 = virtualinvoke r5.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int getSaveMillis()>()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $r14 = new org.joda.time.tz.DateTimeZoneBuilder$Transition
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : r4 = virtualinvoke r1.<java.util.ArrayList: java.util.Iterator iterator()>()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $r9 = new java.util.ArrayList
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : if r2 != null goto r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules> = r1
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : if r2 != null goto (branch)
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $b8 = l1 cmp l0
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules> = r1
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $r11 = virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>(l1, i2)
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $r6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String iInitialNameKey>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : i2 = 0
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : l1 = virtualinvoke r3.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : goto [?= (branch)]
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : r2 = null
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $r7 = new org.joda.time.tz.DateTimeZoneBuilder$Transition
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iStandardOffsets>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iStandardOffsets>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : i3 = i1 ^ -1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : $i4 = lengthof r1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : $r4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : if i1 < 0 goto i3 = i1 ^ -1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : if i3 <= 0 goto return 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : $r6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : i1 = staticinvoke <java.util.Arrays: int binarySearch(long[],long)>(r1, l0)
org.joda.time.DateTimeZone.getDefault : if r0 != null goto return r0
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.field.BaseDurationField.getDifference : $l2 = virtualinvoke r0.<org.joda.time.field.BaseDurationField: long getDifferenceAsLong(long,long)>(l0, l1)
org.joda.time.base.BaseDateTime.checkChronology : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.PeriodType.yearMonthDay : if r0 != null goto return r0
org.joda.time.PeriodType.yearMonthDay : return r0
org.joda.time.PeriodType.yearMonthDay : r0 = <org.joda.time.PeriodType: org.joda.time.PeriodType cYMD>
org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3)
org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : if r1 != null goto $l0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long iMillis>
org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : $l0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long iMillis>
org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : return 1
org.joda.time.tz.DateTimeZoneBuilder.addTransition : $z1 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$Transition: boolean isTransitionFrom(org.joda.time.tz.DateTimeZoneBuilder$Transition)>(r3)
org.joda.time.tz.DateTimeZoneBuilder.addTransition : i0 = virtualinvoke r1.<java.util.ArrayList: int size()>()
org.joda.time.tz.DateTimeZoneBuilder.addTransition : $l7 = virtualinvoke r3.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>()
org.joda.time.tz.DateTimeZoneBuilder.addTransition : i1 = 0
org.joda.time.tz.DateTimeZoneBuilder.addTransition : if i0 < 2 goto i2 = virtualinvoke r3.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getWallOffset()>()
org.joda.time.tz.DateTimeZoneBuilder.addTransition : $i5 = i0 - 1
org.joda.time.tz.DateTimeZoneBuilder.addTransition : $l9 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>()
org.joda.time.tz.DateTimeZoneBuilder.addTransition : i2 = virtualinvoke r3.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getWallOffset()>()
org.joda.time.tz.DateTimeZoneBuilder.addTransition : return 1
org.joda.time.tz.DateTimeZoneBuilder.addTransition : virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r2)
org.joda.time.tz.DateTimeZoneBuilder.addTransition : return 0
org.joda.time.tz.DateTimeZoneBuilder.addTransition : $i6 = i0 - 2
org.joda.time.tz.DateTimeZoneBuilder.addTransition : $b11 = l4 cmp l3
org.joda.time.tz.DateTimeZoneBuilder.addTransition : if i0 != 0 goto $i5 = i0 - 1
org.joda.time.chrono.BasicMonthOfYearDateTimeField.roundFloor : $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.roundFloor : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.roundFloor : $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.tz.CachedDateTimeZone.getStandardOffset : $r1 = specialinvoke r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info getInfo(long)>(l0)
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.previousTransition : $i8 = virtualinvoke r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>()
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.previousTransition : $b6 = l4 cmp 0L
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.previousTransition : i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset>
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.previousTransition : goto [?= $b11 = l2 cmp l3]
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.previousTransition : r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence>
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.previousTransition : l4 = l0 + 1L
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.previousTransition : r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence>
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.previousTransition : $b11 = l2 cmp l3
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.previousTransition : $b9 = l4 cmp 0L
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.previousTransition : goto [?= $i8 = virtualinvoke r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>()]
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.previousTransition : $i5 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>()
org.joda.time.base.BaseDateTime.getMillis : $l0 = r0.<org.joda.time.base.BaseDateTime: long iMillis>
org.joda.time.convert.StringConverter.getInstantMillis : r3 = (java.lang.String) r1
org.joda.time.convert.StringConverter.getInstantMillis : $r5 = virtualinvoke r4.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)>(r2)
org.joda.time.convert.StringConverter.getInstantMillis : r4 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTimeParser()>()
org.joda.time.chrono.BasicYearDateTimeField.add : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>(l0, i3)
org.joda.time.chrono.BasicYearDateTimeField.add : if i1 != 0 goto i2 = virtualinvoke r0.<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>(l0)
org.joda.time.chrono.BasicYearDateTimeField.add : i3 = staticinvoke <org.joda.time.field.FieldUtils: int safeAdd(int,int)>(i2, i1)
org.joda.time.chrono.BasicYearDateTimeField.add : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>(l0)
org.joda.time.chrono.BasicYearDateTimeField.add : return l0
org.joda.time.tz.DateTimeZoneBuilder$OfYear.writeTo : $i4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMillisOfDay>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.writeTo : $z0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: boolean iAdvance>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.writeTo : $c0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.writeTo : $i3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfWeek>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.writeTo : $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMonthOfYear>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.writeTo : $i2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfMonth>
org.joda.time.tz.DateTimeZoneBuilder$Transition.getStandardOffset : $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int iStandardOffset>
org.joda.time.chrono.AssembledChronology.millisOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay>
org.joda.time.format.DateTimeFormatterBuilder.append0 : r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object iFormatter> = null
org.joda.time.format.DateTimeFormatterBuilder.append0 : $r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs>
org.joda.time.format.DateTimeFormatterBuilder.append0 : return r0
org.joda.time.format.DateTimeFormatterBuilder.append0 : $r2 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs>
org.joda.time.DateTimeFieldType.millisOfSecond : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MILLIS_OF_SECOND_TYPE>
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.next : $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$OfYear iOfYear>
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0)
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $i6 = i2 - 1
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i0, i1)
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.format.ISODateTimeFormat.dateTimeParser : $r0 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dtp>
org.joda.time.format.ISODateTimeFormat.dateTimeParser : $r15 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dtp>
org.joda.time.chrono.BasicChronology.getYearMonthMillis : return l4
org.joda.time.chrono.BasicChronology.getYearMonthMillis : l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0)
org.joda.time.chrono.BasicChronology.getYearMonthMillis : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i0, i1)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iWallOffsets>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : i3 = i1 ^ -1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : $i4 = lengthof r1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : $r4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : if i1 < 0 goto i3 = i1 ^ -1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iWallOffsets>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : if i3 <= 0 goto return 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : $r6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : i1 = staticinvoke <java.util.Arrays: int binarySearch(long[],long)>(r1, l0)
org.joda.time.chrono.GregorianChronology.isLeapYear : $i1 = i0 & 3
org.joda.time.format.DateTimeParserBucket.saveState : $r2 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState>
org.joda.time.format.DateTimeParserBucket.saveState : $r1 = new org.joda.time.format.DateTimeParserBucket$SavedState
org.joda.time.format.DateTimeParserBucket.saveState : $r3 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState>
org.joda.time.chrono.BasicChronology.getDayOfWeek : $l9 = l1 + 3L
org.joda.time.chrono.BasicChronology.getDayOfWeek : $l3 = l0 - 86399999L
org.joda.time.chrono.BasicChronology.getDayOfWeek : $b4 = l1 cmp -3L
org.joda.time.chrono.BasicChronology.getDayOfWeek : l1 = l0 / 86400000L
org.joda.time.chrono.BasicChronology.getDayOfWeek : $l5 = l1 + 4L
org.joda.time.chrono.BasicChronology.getDayOfWeek : $b2 = l0 cmp 0L
org.joda.time.base.BasePeriod.checkPeriodType : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>(r1)
org.joda.time.field.PreciseDateTimeField.get : $b1 = l0 cmp 0L
org.joda.time.field.PreciseDateTimeField.get : $i8 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange>
org.joda.time.field.PreciseDateTimeField.get : $l2 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: long getUnitMillis()>()
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $r2 = <org.joda.time.chrono.BasicGJChronology: int[] MIN_DAYS_PER_MONTH_ARRAY>
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0)
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $r1 = <org.joda.time.chrono.BasicGJChronology: int[] MAX_DAYS_PER_MONTH_ARRAY>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.tz.DateTimeZoneBuilder$Transition.getWallOffset : $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int iWallOffset>
org.joda.time.format.DateTimeParserBucket.sort : i1 = 0
org.joda.time.format.DateTimeParserBucket.sort : if i0 <= 10 goto i1 = 0
org.joda.time.format.DateTimeParserBucket.sort : i2 = i1
org.joda.time.chrono.AssembledChronology.weekyear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyear>
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.add : $r1 = r0.<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: org.joda.time.field.ImpreciseDateTimeField this$0>
org.joda.time.DurationFieldType.months : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MONTHS_TYPE>
org.joda.time.chrono.BasicGJChronology.getDaysInMonthMaxForSet : if i1 <= 28 goto $i2 = 28
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.getNameKey : $r1 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence findMatchingRecurrence(long)>(l0)
org.joda.time.format.DateTimeParserBucket$SavedField.set : $r6 = r0.<org.joda.time.format.DateTimeParserBucket$SavedField: org.joda.time.DateTimeField iField>
org.joda.time.format.DateTimeParserBucket$SavedField.set : return l2
org.joda.time.format.DateTimeParserBucket$SavedField.set : $r2 = r0.<org.joda.time.format.DateTimeParserBucket$SavedField: org.joda.time.DateTimeField iField>
org.joda.time.format.DateTimeParserBucket$SavedField.set : $r1 = r0.<org.joda.time.format.DateTimeParserBucket$SavedField: java.lang.String iText>
org.joda.time.format.DateTimeParserBucket$SavedField.set : if z0 == 0 goto return l2
org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : $b17 = l13 cmp l8
org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : l13 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>(r1, l21)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : l13 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>(r1, l13)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : $l22 = (long) i3
org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : l13 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>(r1, l12)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : l21 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>(r1, l20)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : $c5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : i3 = i1 + i2
org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : $r6 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : $l7 = (long) i3
org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : $r7 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : $i14 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfWeek>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.setFixedSavings : r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String iInitialNameKey> = r1
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.setFixedSavings : r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iInitialSaveMillis> = i0
org.joda.time.field.FieldUtils.safeAdd : l2 = l0 + l1
org.joda.time.field.FieldUtils.safeAdd : $l3 = l0 ^ l2
org.joda.time.field.FieldUtils.safeAdd : return l2
org.joda.time.field.FieldUtils.safeAdd : return i2
org.joda.time.field.FieldUtils.safeAdd : $i3 = i0 ^ i2
org.joda.time.field.FieldUtils.safeAdd : i2 = i0 + i1
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.writeTo : $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset>
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.writeTo : $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence>
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.writeTo : $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.readFrom : $z0 = interfaceinvoke r0.<java.io.DataInput: boolean readBoolean()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.readFrom : $i2 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.readFrom : $i4 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.readFrom : $b3 = interfaceinvoke r0.<java.io.DataInput: byte readByte()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.readFrom : $l5 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>(r0)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.readFrom : $r1 = new org.joda.time.tz.DateTimeZoneBuilder$OfYear
org.joda.time.chrono.AssembledChronology.secondOfMinute : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfMinute>
org.joda.time.field.FieldUtils.safeToInt : $i3 = (int) l0
org.joda.time.field.FieldUtils.safeToInt : $b1 = -2147483648L cmp l0
org.joda.time.format.DateTimeFormatter.withChronology : return r0
org.joda.time.format.DateTimeFormatter.withChronology : $r2 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : $b9 = l0 cmp l2
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : $i7 = lengthof r1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : $l6 = r1[i4]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : if i1 < 0 goto $i3 = i1 ^ -1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : $i5 = lengthof r1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : i1 = staticinvoke <java.util.Arrays: int binarySearch(long[],long)>(r1, l0)
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : i5 = -2147483648
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : return l6
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $r4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iRecurrence>
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $b7 = l0 cmp -9223372036854775808L
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $i19 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int iToYear>
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $r5 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : l4 = l0
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $i10 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int iFromYear>
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $b15 = l6 cmp l0
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : l4 = l14 - 1L
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : i3 = i1 + i2
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : l6 = l0
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>()
org.joda.time.field.FieldUtils.verifyValueBounds : if i0 < i1 goto $r1 = new org.joda.time.IllegalFieldValueException
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.getNameKey : $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String iNameKey>
org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets>
org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets>
org.joda.time.field.ImpreciseDateTimeField.getDifference : $l2 = virtualinvoke r0.<org.joda.time.field.ImpreciseDateTimeField: long getDifferenceAsLong(long,long)>(l0, l1)
org.joda.time.chrono.AssembledChronology.dayOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfYear>
org.joda.time.tz.CachedDateTimeZone$Info.getStandardOffset : $r4 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: org.joda.time.tz.CachedDateTimeZone$Info iNextInfo>
org.joda.time.tz.CachedDateTimeZone$Info.getStandardOffset : $i3 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: int iStandardOffset>
org.joda.time.tz.CachedDateTimeZone$Info.getStandardOffset : $i6 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: int iStandardOffset>
org.joda.time.tz.CachedDateTimeZone$Info.getStandardOffset : $r3 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: org.joda.time.DateTimeZone iZoneRef>
org.joda.time.tz.CachedDateTimeZone$Info.getStandardOffset : $r1 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: org.joda.time.tz.CachedDateTimeZone$Info iNextInfo>
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getDifference : $i2 = virtualinvoke $r1.<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>(l0, l1)
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getDifference : $r1 = r0.<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: org.joda.time.field.ImpreciseDateTimeField this$0>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : i2 = i1 ^ -1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String[] iNameKeys>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : $r4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String[] iNameKeys>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : if i1 < 0 goto i2 = i1 ^ -1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : if i2 <= 0 goto return "UTC"
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : $r9 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : $r6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : $i3 = lengthof r1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : i1 = staticinvoke <java.util.Arrays: int binarySearch(long[],long)>(r1, l0)
org.joda.time.DateTimeZone.setDefault : exitmonitor r3
org.joda.time.DateTimeZone.setDefault : $r6 = class "org/joda/time/DateTimeZone"
org.joda.time.DateTimeZone.setDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r0
org.joda.time.DateTimeZone.setDefault : if r1 == null goto (branch)
org.joda.time.DateTimeZone.setDefault : if r0 != null goto $r6 = class "org/joda/time/DateTimeZone"
org.joda.time.DateTimeZone.setDefault : r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>()
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: boolean restoreState(java.lang.Object)>(r4)
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if i5 >= 0 goto virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: boolean restoreState(java.lang.Object)>(r4)
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : $i10 = i3 ^ -1
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i2 = i0
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if i5 < i0 goto (branch)
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : r6 = r3[i4]
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i2 = i5
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i5 = interfaceinvoke r6.<org.joda.time.format.DateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>(r1, r2, i0)
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : return i5
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : goto [?= (branch)]
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i1 = lengthof r3
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if i2 > i0 goto (branch)
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : return i2
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: org.joda.time.format.DateTimeParser[] iParsers>
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if i9 <= i3 goto virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: boolean restoreState(java.lang.Object)>(r4)
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if r6 != null goto i5 = interfaceinvoke r6.<org.joda.time.format.DateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>(r1, r2, i0)
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if r5 == null goto return i2
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: boolean restoreState(java.lang.Object)>(r5)
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i9 = i5 ^ -1
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if i2 > i0 goto z0 = 1
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : r4 = virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: java.lang.Object saveState()>()
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : z0 = 1
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i3 = i0
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : z0 = 0
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if i5 <= i2 goto virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: boolean restoreState(java.lang.Object)>(r4)
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : r5 = virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: java.lang.Object saveState()>()
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i3 = i9
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : r5 = null
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : $i6 = virtualinvoke r2.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i4 = 0
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.findMatchingRecurrence : $b6 = l2 cmp l3
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.findMatchingRecurrence : $i4 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>()
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.findMatchingRecurrence : goto [?= $i5 = virtualinvoke r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>()]
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.findMatchingRecurrence : i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset>
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.findMatchingRecurrence : r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence>
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.findMatchingRecurrence : r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence>
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.findMatchingRecurrence : $i5 = virtualinvoke r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>()
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.findMatchingRecurrence : goto [?= $b6 = l2 cmp l3]
org.joda.time.field.BaseDateTimeField.add : $r1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getDurationField()>()
org.joda.time.chrono.BasicChronology.getYearMillis : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>(i0)
org.joda.time.tz.DateTimeZoneBuilder$Rule.getNameKey : $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iRecurrence>
org.joda.time.convert.ConverterManager.getInstance : $r2 = <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager INSTANCE>
org.joda.time.convert.ConverterManager.getInstance : $r0 = <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager INSTANCE>
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $i29 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>()
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $i33 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>()
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $l19 = (long) i0
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $i9 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>()
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $i25 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>()
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $i2 = i0 >> 6
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $i15 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>()
org.joda.time.tz.DateTimeZoneBuilder.readMillis : i0 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>()
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $l5 = (long) i4
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $i12 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>()
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $i21 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>()
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $l17 = (long) i16
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $l37 = interfaceinvoke r0.<java.io.DataInput: long readLong()>()
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $i3 = i0 << 26
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $l36 = l35 * 1000L
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $i7 = i0 << 26
org.joda.time.chrono.GregorianChronology.getApproxMillisAtEpochDividedByTwo : return 31083597720000L
org.joda.time.field.ImpreciseDateTimeField.getDurationField : $r1 = r0.<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField iDurationField>
org.joda.time.convert.AbstractConverter.getChronology : $r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r2)
org.joda.time.format.DateTimeFormatterBuilder.appendTimeZoneOffset : $r2 = new org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset
org.joda.time.tz.CachedDateTimeZone.nextTransition : $r1 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone>
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : $r5 = r3[i2]
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: org.joda.time.format.DateTimeParser[] iParsers>
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : return i0
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : i2 = 0
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : if r3 != null goto i1 = lengthof r3
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : i1 = lengthof r3
org.joda.time.base.AbstractPeriod.size : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.tz.DateTimeZoneBuilder$Transition.getMillis : $l0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long iMillis>
org.joda.time.field.MillisDurationField.isPrecise : return 1
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $i7 = virtualinvoke $r5.<org.joda.time.chrono.BasicChronology: int getMillisOfDay(long)>(l0)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r4 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : if i3 <= i4 goto $r4 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : i3 = i4
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $i5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicChronology.getDayOfMonth : i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicChronology.getDayOfMonth : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i1, i2)
org.joda.time.chrono.BasicChronology.getDayOfMonth : $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l0, i1, i2)
org.joda.time.chrono.BasicChronology.getDayOfMonth : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1)
org.joda.time.chrono.BasicChronology.getDayOfMonth : $l6 = l0 - l5
org.joda.time.chrono.BasicChronology.getDayOfMonth : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i1)
org.joda.time.chrono.GregorianChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.BasicChronology.getMillisOfDay : $l4 = l0 + 1L
org.joda.time.chrono.BasicChronology.getMillisOfDay : $l2 = l0 % 86400000L
org.joda.time.chrono.BasicChronology.getMillisOfDay : $b1 = l0 cmp 0L
org.joda.time.chrono.BasicChronology.getYear : $b9 = l2 cmp 0L
org.joda.time.chrono.BasicChronology.getYear : l14 = l4 + l6
org.joda.time.chrono.BasicChronology.getYear : l5 = l0 - l4
org.joda.time.chrono.BasicChronology.getYear : i3 = i3 + 1
org.joda.time.chrono.BasicChronology.getYear : $l11 = l2 / l1
org.joda.time.chrono.BasicChronology.getYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: boolean isLeapYear(int)>(i3)
org.joda.time.chrono.BasicChronology.getYear : $b12 = l5 cmp 0L
org.joda.time.chrono.BasicChronology.getYear : $l10 = l2 - l1
org.joda.time.chrono.BasicChronology.getYear : $l7 = l0 >> 1
org.joda.time.chrono.BasicChronology.getYear : l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i3)
org.joda.time.chrono.BasicChronology.getYear : l6 = 31536000000L
org.joda.time.chrono.BasicChronology.getYear : $b13 = l5 cmp 31536000000L
org.joda.time.chrono.BasicChronology.getYear : return i3
org.joda.time.chrono.BasicChronology.getYear : $b15 = l14 cmp l0
org.joda.time.chrono.BasicChronology.getYear : l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getAverageMillisPerYearDividedByTwo()>()
org.joda.time.chrono.BasicChronology.getYear : i3 = i3 + -1
org.joda.time.chrono.AssembledChronology.secondOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfDay>
org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.parseInto : $r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: java.lang.String iValue>
org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.parseInto : $i4 = i0 ^ -1
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : l3 = virtualinvoke r5.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>()
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : l0 = virtualinvoke r12.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: long getUpperLimit(int)>(i4)
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>(r2, r5)
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $i7 = virtualinvoke r2.<java.util.ArrayList: int size()>()
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r9 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets>
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : l3 = virtualinvoke r14.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>()
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if r3 != null goto staticinvoke <edu.washington.cs.dt.impact.util.Tracer: void trace(java.lang.String,java.lang.String)>("$r13 = virtualinvoke r12.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>(l3, i4)", "org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone")
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : r3 = virtualinvoke r12.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$DSTZone buildTailZone(java.lang.String)>(r1)
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r7 = new java.util.ArrayList
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r13 = virtualinvoke r12.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>(l3, i4)
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : l0 = -9223372036854775808L
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : z1 = 0
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r8 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets>
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : i4 = virtualinvoke r5.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getSaveMillis()>()
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r11 = new org.joda.time.tz.DateTimeZoneBuilder$RuleSet
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : r5 = virtualinvoke r4.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>(l0)
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : r20 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>(r1, z0, r2, r3)
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : goto [?= l0 = virtualinvoke r12.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: long getUpperLimit(int)>(i4)]
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if r3 == null goto l3 = virtualinvoke r14.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>()
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $i6 = virtualinvoke r2.<java.util.ArrayList: int size()>()
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : i4 = virtualinvoke r14.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getSaveMillis()>()
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : r3 = null
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if r1 != null goto $r7 = new java.util.ArrayList
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if r5 != null goto specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>(r2, r5)
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $z4 = virtualinvoke r20.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean isCachable()>()
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : i2 = 0
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r21 = staticinvoke <org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone forZone(org.joda.time.DateTimeZone)>(r20)
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $z3 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>(r2, r14)
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : l15 = l2 / 10L
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : goto [?= l15 = l2 / 10L]
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $i7 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int iMaxDigits>
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $b17 = l15 cmp 2147483647L
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $r4 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: org.joda.time.DateTimeFieldType iFieldType>
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : l2 = 0L
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $r6 = virtualinvoke r3.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>()
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $r10 = virtualinvoke r3.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>()
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $i12 = c5 - 48
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $i11 = i0 + i4
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : l3 = l6
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : if c5 < 48 goto l15 = l2 / 10L
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : i4 = i4 + 1
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $i20 = i0 + i4
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : if i4 != 0 goto $b17 = l15 cmp 2147483647L
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $r8 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>()
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : l6 = l3 / 10L
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $r7 = new org.joda.time.field.PreciseDateTimeField
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : if i4 >= i1 goto l15 = l2 / 10L
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $i19 = (int) l15
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : goto [?= staticinvoke <edu.washington.cs.dt.impact.util.Tracer: void trace(java.lang.String,java.lang.String)>("if i4 >= i1 goto l15 = l2 / 10L", "org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto")]
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : i4 = 0
org.joda.time.field.BaseDurationField.isSupported : return 1
org.joda.time.field.PreciseDurationField.getDifferenceAsLong : l2 = staticinvoke <org.joda.time.field.FieldUtils: long safeSubtract(long,long)>(l0, l1)
org.joda.time.field.PreciseDurationField.getDifferenceAsLong : $l3 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis>
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : if r2 == r3 goto r1 = r2
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : if r1 != null goto return r1
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : if r1 != null goto r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object iFormatter> = r1
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r1 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object iFormatter>
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object iFormatter> = r1
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $r6 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs>
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $r5 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs>
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : return r1
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : if r2 == null goto r1 = r3
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $r4 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs>
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r1 = r2
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.previousTransition : $b11 = l10 cmp l0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.previousTransition : if i1 < 0 goto i5 = i1 ^ -1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.previousTransition : $i6 = lengthof r1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.previousTransition : $l9 = l2 - 1L
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.previousTransition : $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.previousTransition : if i5 <= 0 goto return l0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.previousTransition : i5 = i1 ^ -1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.previousTransition : i1 = staticinvoke <java.util.Arrays: int binarySearch(long[],long)>(r1, l0)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.previousTransition : $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.previousTransition : $b8 = l2 cmp -9223372036854775808L
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.previousTransition : r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.previousTransition : $i7 = i5 - 1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.previousTransition : return l10
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i5 = r0.<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int iMaxParsedDigits>
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : return i19
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if z0 == 0 goto $r6 = r0.<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: org.joda.time.DateTimeFieldType iFieldType>
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i19 = i0 + i2
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if i2 < 9 goto i4 = i0
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if i21 >= i19 goto (branch)
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i21 = i4 + 1
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i24 = i20 << 3
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if i2 != 0 goto (branch)
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : z0 = 0
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if z0 == 0 goto i21 = i4 + 1
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $r6 = r0.<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: org.joda.time.DateTimeFieldType iFieldType>
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : goto [?= i19 = i0 + i2]
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i2 = i2 + 1
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i2 = 0
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : goto [?= staticinvoke <edu.washington.cs.dt.impact.util.Tracer: void trace(java.lang.String,java.lang.String)>("if i2 >= i1 goto (branch)", "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto")]
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if c3 < 48 goto (branch)
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i4 = i0
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if i2 >= i1 goto (branch)
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i8 = i0 + i2
org.joda.time.chrono.AssembledChronology.days : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays>
org.joda.time.tz.CachedDateTimeZone.createInfo : $b4 = l3 cmp l1
org.joda.time.tz.CachedDateTimeZone.createInfo : l1 = l0 & -4294967296L
org.joda.time.tz.CachedDateTimeZone.createInfo : l2 = l1 | 4294967295L
org.joda.time.tz.CachedDateTimeZone.createInfo : $r6 = new org.joda.time.tz.CachedDateTimeZone$Info
org.joda.time.tz.CachedDateTimeZone.createInfo : $r5 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone>
org.joda.time.tz.CachedDateTimeZone.createInfo : r2 = r1
org.joda.time.tz.CachedDateTimeZone.createInfo : goto [?= return r1]
org.joda.time.tz.CachedDateTimeZone.createInfo : l1 = l3
org.joda.time.tz.CachedDateTimeZone.createInfo : goto [?= staticinvoke <edu.washington.cs.dt.impact.util.Tracer: void trace(java.lang.String,java.lang.String)>("$r5 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone>", "org.joda.time.tz.CachedDateTimeZone.createInfo")]
org.joda.time.tz.CachedDateTimeZone.createInfo : $r3 = new org.joda.time.tz.CachedDateTimeZone$Info
org.joda.time.tz.CachedDateTimeZone.createInfo : return r1
org.joda.time.chrono.AssembledChronology.minuteOfHour : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfHour>
org.joda.time.PeriodType.getFieldType : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : $r5 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfMonth>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : return l3
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.chrono.ISOChronology.getInstanceUTC : $r0 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC>
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r12 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField weekyear()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r7 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r8 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfYear()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r10 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r22 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfDay()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $b0 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: byte iOrdinal>
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r9 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r23 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r21 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r19 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>()
org.joda.time.format.DateTimeParserBucket.saveField : $i4 = i0 + 1
org.joda.time.format.DateTimeParserBucket.saveField : r2 = r3
org.joda.time.format.DateTimeParserBucket.saveField : r2 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields>
org.joda.time.format.DateTimeParserBucket.saveField : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r3, 0, i0)
org.joda.time.format.DateTimeParserBucket.saveField : i0 = r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount>
org.joda.time.format.DateTimeParserBucket.saveField : $r2 = new org.joda.time.format.DateTimeParserBucket$SavedField
org.joda.time.format.DateTimeParserBucket.saveField : $i2 = lengthof r2
org.joda.time.format.DateTimeParserBucket.saveField : r2[i0] = r1
org.joda.time.format.DateTimeParserBucket.saveField : r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState> = null
org.joda.time.format.DateTimeParserBucket.saveField : $i1 = lengthof r2
org.joda.time.format.DateTimeParserBucket.saveField : r0.<org.joda.time.format.DateTimeParserBucket: boolean iSavedFieldsShared> = 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : $z0 = interfaceinvoke r0.<java.io.DataInput: boolean readBoolean()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : i0 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedShort()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : r3 = newarray (long)[i4]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : r12 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone readFrom(java.io.DataInput,java.lang.String)>(r0, r1)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : $l8 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>(r0)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : r6 = newarray (java.lang.String)[i4]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : $l5 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>(r0)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : $r13 = new org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : r2 = newarray (java.lang.String)[i0]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : $l6 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>(r0)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : i1 = 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : $r8 = r2[i3]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : $r7 = interfaceinvoke r0.<java.io.DataInput: java.lang.String readUTF()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : r12 = null
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : if i0 >= 256 goto i3 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedShort()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : i4 = interfaceinvoke r0.<java.io.DataInput: int readInt()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : i2 = 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : r5 = newarray (int)[i4]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : i3 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : r4 = newarray (int)[i4]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : goto [?= i2 = i2 + 1]
org.joda.time.chrono.GregorianChronology.getMinYear : return -292275054
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.getSaveMillis : $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int iSaveMillis>
org.joda.time.chrono.AssembledChronology.hourOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay>
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getUnitMillis : $r1 = r0.<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: org.joda.time.field.ImpreciseDateTimeField this$0>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.getUpperLimit : return 9223372036854775807L
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.getUpperLimit : $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iUpperYear>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.getUpperLimit : $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$OfYear iUpperOfYear>
