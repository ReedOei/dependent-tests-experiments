org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 10 goto (branch)
org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48)
org.joda.time.format.FormatUtils.appendPaddedInteger : if i1 <= 1 goto $i3 = i0 + 48
org.joda.time.format.FormatUtils.appendPaddedInteger : $i3 = i0 + 48
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 0 goto (branch)
org.joda.time.TestDateTimeZone$MockOKButNullNameProvider.getShortName : return null
org.joda.time.tz.FixedDateTimeZone.getNameKey : $r1 = r0.<org.joda.time.tz.FixedDateTimeZone: java.lang.String iNameKey>
org.joda.time.tz.DefaultNameProvider.createCache : $r1 = new java.util.HashMap
org.joda.time.TestDateTimeZone$MockOKButNullNameProvider.getName : return null
org.joda.time.DateTimeZone.setNameProvider : if r1 == null goto staticinvoke <org.joda.time.DateTimeZone: void setNameProvider0(org.joda.time.tz.NameProvider)>(r0)
org.joda.time.DateTimeZone.setNameProvider : staticinvoke <org.joda.time.DateTimeZone: void setNameProvider0(org.joda.time.tz.NameProvider)>(r0)
org.joda.time.DateTimeZone.setNameProvider : r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>()
org.joda.time.DateTimeZone.getDefault : if r0 != null goto return r0
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.tz.FixedDateTimeZone.getOffset : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset>
org.joda.time.DateTimeZone.getShortName : if r3 == null goto $i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0)
org.joda.time.DateTimeZone.getShortName : if r1 != null goto r2 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getNameKey(long)>(l0)
org.joda.time.DateTimeZone.getShortName : r1 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>()
org.joda.time.DateTimeZone.getShortName : r2 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getNameKey(long)>(l0)
org.joda.time.DateTimeZone.getShortName : if r2 != null goto $r5 = <org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider cNameProvider>
org.joda.time.DateTimeZone.getShortName : $r5 = <org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider cNameProvider>
org.joda.time.DateTimeZone.getShortName : $i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0)
org.joda.time.DateTimeZone.getShortName : $r1 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>(l0, null)
org.joda.time.DateTimeZone.getName : if r3 == null goto $i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0)
org.joda.time.DateTimeZone.getName : if r1 != null goto r2 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getNameKey(long)>(l0)
org.joda.time.DateTimeZone.getName : r1 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>()
org.joda.time.DateTimeZone.getName : r2 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getNameKey(long)>(l0)
org.joda.time.DateTimeZone.getName : if r2 != null goto $r5 = <org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider cNameProvider>
org.joda.time.DateTimeZone.getName : $r1 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getName(long,java.util.Locale)>(l0, null)
org.joda.time.DateTimeZone.getName : $r5 = <org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider cNameProvider>
org.joda.time.DateTimeZone.getName : $i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0)
org.joda.time.DateTimeZone.printOffset : $i6 = i2 * 60000
org.joda.time.DateTimeZone.printOffset : $i4 = i1 * 3600000
org.joda.time.DateTimeZone.printOffset : i2 = i5 / 60000
org.joda.time.DateTimeZone.printOffset : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, i1, 2)
org.joda.time.DateTimeZone.printOffset : if i0 < 0 goto virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45)
org.joda.time.DateTimeZone.printOffset : i1 = i0 / 3600000
org.joda.time.DateTimeZone.printOffset : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(43)
org.joda.time.DateTimeZone.printOffset : if i7 != 0 goto i3 = i7 / 1000
org.joda.time.DateTimeZone.printOffset : $r0 = new java.lang.StringBuffer
org.joda.time.DateTimeZone.printOffset : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58)
org.joda.time.DateTimeZone.printOffset : $r5 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>()
org.joda.time.DateTimeZone.printOffset : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, i2, 2)
org.joda.time.DateTimeZone.setNameProvider0 : <org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider cNameProvider> = r0
org.joda.time.DateTimeZone.setNameProvider0 : if r0 != null goto <org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider cNameProvider> = r0
org.joda.time.DateTimeZone.setNameProvider0 : r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>()
org.joda.time.DateTimeZone.setDefault : exitmonitor r3
org.joda.time.DateTimeZone.setDefault : $r6 = class "org/joda/time/DateTimeZone"
org.joda.time.DateTimeZone.setDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r0
org.joda.time.DateTimeZone.setDefault : if r1 == null goto (branch)
org.joda.time.DateTimeZone.setDefault : if r0 != null goto $r6 = class "org/joda/time/DateTimeZone"
org.joda.time.DateTimeZone.setDefault : r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>()
org.joda.time.DateTimeZone.getDefaultNameProvider : $r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r1)
org.joda.time.DateTimeZone.getDefaultNameProvider : if r0 != null goto return r0
org.joda.time.DateTimeZone.getDefaultNameProvider : r0 = null
org.joda.time.DateTimeZone.getDefaultNameProvider : $r7 = virtualinvoke r3.<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>()
org.joda.time.DateTimeZone.getDefaultNameProvider : r2 = $r6
org.joda.time.DateTimeZone.getDefaultNameProvider : r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>()
org.joda.time.DateTimeZone.getDefaultNameProvider : $r10 = new org.joda.time.tz.DefaultNameProvider
org.joda.time.DateTimeZone.getDefaultNameProvider : goto [?= (branch)]
org.joda.time.DateTimeZone.getDefaultNameProvider : if r1 == null goto (branch)
org.joda.time.DateTimeZone.getDefaultNameProvider : return r0
org.joda.time.DateTimeZone.getDefaultNameProvider : r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("org.joda.time.DateTimeZone.NameProvider")
org.joda.time.DateTimeZone.getNameProvider : $r0 = <org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider cNameProvider>
