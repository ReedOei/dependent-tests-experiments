org.joda.time.TimeOfDay.getMinuteOfHour : $i0 = virtualinvoke r0.<org.joda.time.TimeOfDay: int getValue(int)>(1)
org.joda.time.TimeOfDay.getSecondOfMinute : $i0 = virtualinvoke r0.<org.joda.time.TimeOfDay: int getValue(int)>(2)
org.joda.time.chrono.AssembledChronology.millisOfSecond : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfSecond>
org.joda.time.chrono.CopticChronology.withUTC : $r1 = <org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology INSTANCE_UTC>
org.joda.time.field.PreciseDurationDateTimeField.getMinimumValue : return 0
org.joda.time.DateTimeUtils.getChronology : if r0 != null goto return r0
org.joda.time.DateTimeUtils.getChronology : return r0
org.joda.time.field.DecoratedDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.LocalTime.equals : $l0 = r0.<org.joda.time.LocalTime: long iLocalMillis>
org.joda.time.LocalTime.equals : $z0 = r1 instanceof org.joda.time.LocalTime
org.joda.time.LocalTime.equals : $r3 = r0.<org.joda.time.LocalTime: org.joda.time.Chronology iChronology>
org.joda.time.LocalTime.equals : r2 = (org.joda.time.LocalTime) r1
org.joda.time.LocalTime.equals : if r0 != r1 goto $z0 = r1 instanceof org.joda.time.LocalTime
org.joda.time.TimeOfDay.getField : $r6 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>()
org.joda.time.TimeOfDay.getField : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>()
org.joda.time.TimeOfDay.getField : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>()
org.joda.time.TimeOfDay.getField : $r5 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>()
org.joda.time.TimeOfDay.getField : tableswitch(i0) {     case 0: goto $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>();     case 1: goto $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>();     case 2: goto $r5 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>();     case 3: goto $r6 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>();     default: goto $r7 = new java.lang.IndexOutOfBoundsException; }
org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.TimeOfDay.getHourOfDay : $i0 = virtualinvoke r0.<org.joda.time.TimeOfDay: int getValue(int)>(0)
org.joda.time.TimeOfDay.getMillisOfSecond : $i0 = virtualinvoke r0.<org.joda.time.TimeOfDay: int getValue(int)>(3)
org.joda.time.DateTimeUtils.checkPermission : r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>()
org.joda.time.DateTimeUtils.checkPermission : if r0 == null goto return
org.joda.time.field.PreciseDateTimeField.getMaximumValue : $i0 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange>
org.joda.time.field.PreciseDateTimeField.set : $i4 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int get(long)>(l0)
org.joda.time.field.PreciseDateTimeField.set : $i2 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int getMinimumValue()>()
org.joda.time.chrono.LimitChronology.checkLimits : $r3 = r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime iLowerLimit>
org.joda.time.chrono.LimitChronology.checkLimits : $r5 = r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime iUpperLimit>
org.joda.time.base.AbstractPartial.getField : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.Chronology getChronology()>()
org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.DateTimeZone.getDefault : if r0 != null goto return r0
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.chrono.BaseChronology.getDateTimeMillis : $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>()
org.joda.time.chrono.BaseChronology.getDateTimeMillis : $r3 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>()
org.joda.time.chrono.BaseChronology.getDateTimeMillis : $r1 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>()
org.joda.time.chrono.BaseChronology.getDateTimeMillis : $r4 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>()
org.joda.time.TimeOfDay.size : return 4
org.joda.time.base.BaseDateTime.getMillis : $l0 = r0.<org.joda.time.base.BaseDateTime: long iMillis>
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : return $l8
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $l7 = virtualinvoke r1.<org.joda.time.Chronology: long getDateTimeMillis(long,int,int,int,int)>(l0, i1, i2, i3, i4)
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : return $l7
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $l8 = specialinvoke r0.<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>(l0, i1, i2, i3, i4)
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.LimitChronology.getDateTimeMillis : virtualinvoke r0.<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>(l5, "resulting")
org.joda.time.chrono.LimitChronology.getDateTimeMillis : return l5
org.joda.time.chrono.LimitChronology.getDateTimeMillis : virtualinvoke r0.<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>(l0, null)
org.joda.time.chrono.LimitChronology.getDateTimeMillis : $r1 = virtualinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.LimitChronology.getDateTimeMillis : l5 = virtualinvoke $r1.<org.joda.time.Chronology: long getDateTimeMillis(long,int,int,int,int)>(l0, i1, i2, i3, i4)
org.joda.time.base.BasePartial.getChronology : $r1 = r0.<org.joda.time.base.BasePartial: org.joda.time.Chronology iChronology>
org.joda.time.field.PreciseDateTimeField.get : $b1 = l0 cmp 0L
org.joda.time.field.PreciseDateTimeField.get : $l2 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: long getUnitMillis()>()
org.joda.time.TimeOfDay.toLocalTime : $i2 = virtualinvoke r0.<org.joda.time.TimeOfDay: int getSecondOfMinute()>()
org.joda.time.TimeOfDay.toLocalTime : $r1 = new org.joda.time.LocalTime
org.joda.time.field.BaseDateTimeField.getMinimumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue()>()
org.joda.time.field.BaseDateTimeField.getMinimumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>(r1)
org.joda.time.field.BaseDateTimeField.getMaximumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue()>()
org.joda.time.field.BaseDateTimeField.getMaximumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>(r1)
org.joda.time.base.BasePartial.getValue : $r1 = r0.<org.joda.time.base.BasePartial: int[] iValues>
org.joda.time.DateTimeUtils.setCurrentMillisFixed : $r0 = new org.joda.time.DateTimeUtils$FixedMillisProvider
org.joda.time.DateTimeUtils.setCurrentMillisFixed : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>()
org.joda.time.chrono.AssembledChronology.secondOfMinute : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfMinute>
org.joda.time.chrono.BasicChronology.equals : $z0 = specialinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1)
org.joda.time.field.FieldUtils.verifyValueBounds : if i0 < i1 goto $r1 = new org.joda.time.IllegalFieldValueException
org.joda.time.DateTimeZone.setDefault : exitmonitor r3
org.joda.time.DateTimeZone.setDefault : $r6 = class "org/joda/time/DateTimeZone"
org.joda.time.DateTimeZone.setDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r0
org.joda.time.DateTimeZone.setDefault : if r1 == null goto (branch)
org.joda.time.DateTimeZone.setDefault : if r0 != null goto $r6 = class "org/joda/time/DateTimeZone"
org.joda.time.DateTimeZone.setDefault : r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>()
org.joda.time.chrono.CopticChronology.equals : $z0 = specialinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: boolean equals(java.lang.Object)>(r1)
org.joda.time.chrono.BaseChronology.validate : r12 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>(i7)
org.joda.time.chrono.BaseChronology.validate : $i5 = virtualinvoke r3.<org.joda.time.DateTimeField: int getMaximumValue()>()
org.joda.time.chrono.BaseChronology.validate : i2 = r2[i1]
org.joda.time.chrono.BaseChronology.validate : i1 = 0
org.joda.time.chrono.BaseChronology.validate : r3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>(i1)
org.joda.time.chrono.BaseChronology.validate : $i11 = virtualinvoke r12.<org.joda.time.DateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r2)
org.joda.time.chrono.BaseChronology.validate : i7 = 0
org.joda.time.chrono.BaseChronology.validate : i8 = r2[i7]
org.joda.time.chrono.BaseChronology.validate : $i9 = virtualinvoke r12.<org.joda.time.DateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r2)
org.joda.time.chrono.BaseChronology.validate : $i3 = virtualinvoke r3.<org.joda.time.DateTimeField: int getMinimumValue()>()
org.joda.time.chrono.BaseChronology.validate : i0 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>()
org.joda.time.field.DecoratedDateTimeField.getMinimumValue : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.DateTimeUtils.setCurrentMillisSystem : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>()
org.joda.time.DateTimeUtils.setCurrentMillisSystem : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$SystemMillisProvider SYSTEM_MILLIS_PROVIDER>
org.joda.time.chrono.AssembledChronology.minuteOfHour : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfHour>
org.joda.time.chrono.AssembledChronology.hourOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay>
