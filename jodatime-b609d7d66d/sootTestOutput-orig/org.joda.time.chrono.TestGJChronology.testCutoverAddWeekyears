org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r9 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField days()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r5 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField weekyears()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r7 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField months()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal>
org.joda.time.field.BaseDurationField.compareTo : $r2 = (org.joda.time.DurationField) r1
org.joda.time.field.BaseDurationField.compareTo : $b2 = l1 cmp l0
org.joda.time.field.BaseDurationField.compareTo : l0 = virtualinvoke r1.<org.joda.time.DurationField: long getUnitMillis()>()
org.joda.time.field.BaseDurationField.compareTo : l1 = virtualinvoke r0.<org.joda.time.field.BaseDurationField: long getUnitMillis()>()
org.joda.time.field.BaseDurationField.compareTo : return 1
org.joda.time.field.BaseDurationField.compareTo : $b3 = l1 cmp l0
org.joda.time.Instant.getMillis : $l0 = r0.<org.joda.time.Instant: long iMillis>
org.joda.time.convert.ConverterManager.getInstantConverter : if r2 == null goto $r7 = new java.lang.IllegalArgumentException
org.joda.time.convert.ConverterManager.getInstantConverter : return r2
org.joda.time.convert.ConverterManager.getInstantConverter : $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>()
org.joda.time.convert.ConverterManager.getInstantConverter : $r4 = r0.<org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterSet iInstantConverters>
org.joda.time.field.PreciseDurationDateTimeField.set : $i4 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int get(long)>(l0)
org.joda.time.field.PreciseDurationDateTimeField.set : $i2 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int getMinimumValue()>()
org.joda.time.field.PreciseDurationDateTimeField.set : $i3 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int getMaximumValueForSet(long,int)>(l0, i1)
org.joda.time.chrono.GJChronology$ImpreciseCutoverField.getDifference : $r2 = r0.<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: org.joda.time.DateTimeField iJulianField>
org.joda.time.chrono.GJChronology$ImpreciseCutoverField.getDifference : $l2 = r0.<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long iCutover>
org.joda.time.chrono.GJChronology$ImpreciseCutoverField.getDifference : $r1 = r0.<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: org.joda.time.DateTimeField iGregorianField>
org.joda.time.chrono.GJChronology$ImpreciseCutoverField.getDifference : l7 = virtualinvoke r0.<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long gregorianToJulian(long)>(l0)
org.joda.time.chrono.GJChronology$ImpreciseCutoverField.getDifference : $l4 = r0.<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long iCutover>
org.joda.time.chrono.BasicWeekyearDateTimeField.roundFloor : $r3 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicWeekyearDateTimeField.roundFloor : if i1 <= 1 goto return l2
org.joda.time.chrono.BasicWeekyearDateTimeField.roundFloor : $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicWeekyearDateTimeField.roundFloor : return l2
org.joda.time.chrono.BasicWeekyearDateTimeField.roundFloor : $i3 = i1 - 1
org.joda.time.chrono.GregorianChronology.getMaxYear : return 292278993
org.joda.time.chrono.GJChronology$CutoverField.getRangeDurationField : $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField iRangeDurationField>
org.joda.time.chrono.GregorianChronology.getAverageMillisPerYearDividedByTwo : return 15778476000L
org.joda.time.format.DateTimeParserBucket.compareReverse : return -1
org.joda.time.format.DateTimeParserBucket.compareReverse : if r1 == null goto return 0
org.joda.time.format.DateTimeParserBucket.compareReverse : if r1 == null goto return 1
org.joda.time.format.DateTimeParserBucket.compareReverse : $i0 = virtualinvoke r0.<org.joda.time.DurationField: int compareTo(java.lang.Object)>(r1)
org.joda.time.format.DateTimeParserBucket.compareReverse : if r0 == null goto (branch)
org.joda.time.base.BaseDateTime.checkInstant : return l0
org.joda.time.field.PreciseDurationDateTimeField.getMinimumValue : return 0
org.joda.time.field.DelegatedDateTimeField.roundFloor : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.chrono.AssembledChronology.months : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMonths>
org.joda.time.format.DateTimeParserBucket.computeMillis : r2 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields>
org.joda.time.format.DateTimeParserBucket.computeMillis : return l5
org.joda.time.format.DateTimeParserBucket.computeMillis : $r15 = r2[0]
org.joda.time.format.DateTimeParserBucket.computeMillis : $z1 = r0.<org.joda.time.format.DateTimeParserBucket: boolean iSavedFieldsShared>
org.joda.time.format.DateTimeParserBucket.computeMillis : if i0 <= 0 goto l5 = r0.<org.joda.time.format.DateTimeParserBucket: long iMillis>
org.joda.time.format.DateTimeParserBucket.computeMillis : $l13 = (long) i12
org.joda.time.format.DateTimeParserBucket.computeMillis : $r11 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>()
org.joda.time.format.DateTimeParserBucket.computeMillis : i6 = 0
org.joda.time.format.DateTimeParserBucket.computeMillis : $r19 = r2[i7]
org.joda.time.format.DateTimeParserBucket.computeMillis : goto [?= $r27 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset>]
org.joda.time.format.DateTimeParserBucket.computeMillis : if z0 == 0 goto (branch)
org.joda.time.format.DateTimeParserBucket.computeMillis : $r13 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>()
org.joda.time.format.DateTimeParserBucket.computeMillis : l5 = r0.<org.joda.time.format.DateTimeParserBucket: long iMillis>
org.joda.time.format.DateTimeParserBucket.computeMillis : $r18 = r2[i6]
org.joda.time.format.DateTimeParserBucket.computeMillis : $r30 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone>
org.joda.time.format.DateTimeParserBucket.computeMillis : $i1 = staticinvoke <org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>(r5, r3)
org.joda.time.format.DateTimeParserBucket.computeMillis : $r31 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone>
org.joda.time.format.DateTimeParserBucket.computeMillis : $r27 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset>
org.joda.time.format.DateTimeParserBucket.computeMillis : $r29 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone>
org.joda.time.format.DateTimeParserBucket.computeMillis : i7 = 0
org.joda.time.format.DateTimeParserBucket.computeMillis : i0 = r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount>
org.joda.time.format.DateTimeParserBucket.computeMillis : staticinvoke <org.joda.time.format.DateTimeParserBucket: void sort(org.joda.time.format.DateTimeParserBucket$SavedField[],int)>(r2, i0)
org.joda.time.format.DateTimeFormatter.selectChronology : return r2
org.joda.time.format.DateTimeFormatter.selectChronology : $r4 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>
org.joda.time.format.DateTimeFormatter.selectChronology : $r3 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>
org.joda.time.format.DateTimeFormatter.selectChronology : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.format.DateTimeFormatter.selectChronology : r2 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>
org.joda.time.chrono.GJChronology.getMinimumDaysInFirstWeek : $r1 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology iGregorianChronology>
org.joda.time.format.DateTimeFormatter.parseMillis : $i2 = virtualinvoke r1.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatter.parseMillis : i0 = interfaceinvoke r2.<org.joda.time.format.DateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>(r4, r1, 0)
org.joda.time.format.DateTimeFormatter.parseMillis : $r6 = new org.joda.time.format.DateTimeParserBucket
org.joda.time.format.DateTimeFormatter.parseMillis : $r5 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>
org.joda.time.format.DateTimeFormatter.parseMillis : if i0 < 0 goto i0 = i0 ^ -1
org.joda.time.format.DateTimeFormatter.parseMillis : $l3 = virtualinvoke r4.<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.String)>(1, r1)
org.joda.time.format.DateTimeFormatter.parseMillis : r2 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser requireParser()>()
org.joda.time.chrono.GJChronology$CutoverField.gregorianToJulian : $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.chrono.GJChronology this$0>
org.joda.time.chrono.GJChronology$CutoverField.gregorianToJulian : $z0 = r0.<org.joda.time.chrono.GJChronology$CutoverField: boolean iConvertByWeekyear>
org.joda.time.DateTime.withFieldAdded : $r3 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>()
org.joda.time.DateTime.withFieldAdded : if i0 != 0 goto $r3 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>()
org.joda.time.DateTime.withFieldAdded : $r5 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>(l1)
org.joda.time.DateTime.withFieldAdded : if r1 != null goto (branch)
org.joda.time.chrono.BasicWeekyearDateTimeField.remainder : $l1 = virtualinvoke r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: long roundFloor(long)>(l0)
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : c7 = staticinvoke <java.lang.Character: char toLowerCase(char)>(c5)
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : $i10 = i0 + 1
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : c8 = staticinvoke <java.lang.Character: char toLowerCase(char)>(c6)
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : c2 = r0.<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: char iValue>
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : if c1 == c2 goto $i10 = i0 + 1
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : $i4 = i0 ^ -1
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : c6 = staticinvoke <java.lang.Character: char toUpperCase(char)>(c2)
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : if c5 == c6 goto $i10 = i0 + 1
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : c1 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i0)
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : $i3 = virtualinvoke r2.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : $i9 = i0 ^ -1
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : c5 = staticinvoke <java.lang.Character: char toUpperCase(char)>(c1)
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : if c7 == c8 goto $i10 = i0 + 1
org.joda.time.chrono.GJDayOfWeekDateTimeField.get : $r1 = r0.<org.joda.time.chrono.GJDayOfWeekDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.field.DecoratedDurationField.getUnitMillis : $r1 = r0.<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField iField>
org.joda.time.convert.ConverterSet.select : $r6 = r2[i1]
org.joda.time.convert.ConverterSet.select : if r1 != null goto $i5 = virtualinvoke r1.<java.lang.Object: int hashCode()>()
org.joda.time.convert.ConverterSet.select : r2 = r0.<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet$Entry[] iSelectEntries>
org.joda.time.convert.ConverterSet.select : i1 = i1 + 1
org.joda.time.convert.ConverterSet.select : i0 = lengthof r2
org.joda.time.convert.ConverterSet.select : $r7 = r3.<org.joda.time.convert.ConverterSet$Entry: java.lang.Class iType>
org.joda.time.convert.ConverterSet.select : $r8 = r3.<org.joda.time.convert.ConverterSet$Entry: org.joda.time.convert.Converter iConverter>
org.joda.time.format.DateTimeParserBucket.restoreState : $r2 = (org.joda.time.format.DateTimeParserBucket$SavedState) r1
org.joda.time.format.DateTimeParserBucket.restoreState : r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState> = r1
org.joda.time.format.DateTimeParserBucket.restoreState : return 1
org.joda.time.format.DateTimeParserBucket.restoreState : $z0 = r1 instanceof org.joda.time.format.DateTimeParserBucket$SavedState
org.joda.time.DurationFieldType.weekyears : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType WEEKYEARS_TYPE>
org.joda.time.chrono.GJChronology$CutoverField.get : $r2 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iJulianField>
org.joda.time.chrono.GJChronology$CutoverField.get : $l1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>
org.joda.time.DateTimeUtils.getChronology : if r0 != null goto return r0
org.joda.time.DateTimeUtils.getChronology : return r0
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l6 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $b1 = l0 cmp 0L
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : l5 = l0 + 1L
org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.GJChronology$ImpreciseCutoverField.add : $r3 = r0.<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: org.joda.time.DateTimeField iJulianField>
org.joda.time.chrono.GJChronology$ImpreciseCutoverField.add : l4 = virtualinvoke r0.<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long gregorianToJulian(long)>(l4)
org.joda.time.chrono.GJChronology$ImpreciseCutoverField.add : $r2 = r0.<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: org.joda.time.chrono.GJChronology this$0>
org.joda.time.chrono.GJChronology$ImpreciseCutoverField.add : $l5 = r0.<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long iCutover>
org.joda.time.chrono.GJChronology$ImpreciseCutoverField.add : $l2 = r0.<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long iCutover>
org.joda.time.chrono.GJChronology$ImpreciseCutoverField.add : l4 = virtualinvoke r0.<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long julianToGregorian(long)>(l4)
org.joda.time.chrono.GJChronology$ImpreciseCutoverField.add : return l4
org.joda.time.chrono.GJChronology$ImpreciseCutoverField.add : $r4 = r0.<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: org.joda.time.chrono.GJChronology this$0>
org.joda.time.chrono.GJChronology$ImpreciseCutoverField.add : $r1 = r0.<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: org.joda.time.DateTimeField iGregorianField>
org.joda.time.chrono.GJChronology$ImpreciseCutoverField.add : $l11 = r0.<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: long iCutover>
org.joda.time.chrono.AssembledChronology.year : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear>
org.joda.time.field.PreciseDurationDateTimeField.getMaximumValueForSet : $i2 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int getMaximumValue(long)>(l0)
org.joda.time.chrono.JulianChronology.getMinYear : return -292269054
org.joda.time.chrono.AssembledChronology.weekyears : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeekyears>
org.joda.time.format.DateTimeParserBucket$SavedField.compareTo : return i0
org.joda.time.format.DateTimeParserBucket$SavedField.compareTo : $r3 = r0.<org.joda.time.format.DateTimeParserBucket$SavedField: org.joda.time.DateTimeField iField>
org.joda.time.format.DateTimeParserBucket$SavedField.compareTo : if i0 == 0 goto $r6 = r0.<org.joda.time.format.DateTimeParserBucket$SavedField: org.joda.time.DateTimeField iField>
org.joda.time.format.DateTimeParserBucket$SavedField.compareTo : r2 = r1.<org.joda.time.format.DateTimeParserBucket$SavedField: org.joda.time.DateTimeField iField>
org.joda.time.format.DateTimeParserBucket$SavedField.compareTo : $r4 = virtualinvoke $r3.<org.joda.time.DateTimeField: org.joda.time.DurationField getRangeDurationField()>()
org.joda.time.field.DelegatedDateTimeField.getDifference : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.chrono.GJChronology.access$000 : $l0 = r0.<org.joda.time.chrono.GJChronology: long iGapDuration>
org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getMinimumValue : return 1
org.joda.time.format.DateTimeParserBucket.access$102 : r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset> = r1
org.joda.time.tz.FixedDateTimeZone.hashCode : $r1 = virtualinvoke r0.<org.joda.time.tz.FixedDateTimeZone: java.lang.String getID()>()
org.joda.time.format.DateTimeParserBucket.access$100 : $r1 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset>
org.joda.time.chrono.GJChronology.convertByWeekyear : $r8 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>()
org.joda.time.chrono.GJChronology.convertByWeekyear : $r6 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>()
org.joda.time.chrono.GJChronology.convertByWeekyear : return l8
org.joda.time.chrono.GJChronology.convertByWeekyear : $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekyear()>()
org.joda.time.chrono.GJChronology.convertByWeekyear : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekOfWeekyear()>()
org.joda.time.format.DateTimeParserBucket.access$202 : r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields> = r1
org.joda.time.chrono.BasicChronology.getMinimumDaysInFirstWeek : $i0 = r0.<org.joda.time.chrono.BasicChronology: int iMinDaysInFirstWeek>
org.joda.time.format.DateTimeParserBucket.access$200 : $r1 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields>
org.joda.time.chrono.BasicChronology.getDayOfYear : $l3 = l0 - l2
org.joda.time.chrono.BasicChronology.getDayOfYear : l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1)
org.joda.time.format.DateTimeParserBucket.access$000 : $r1 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone>
org.joda.time.field.FieldUtils.equals : if r0 != r1 goto (branch)
org.joda.time.field.FieldUtils.equals : return 1
org.joda.time.field.DelegatedDateTimeField.get : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.chrono.BasicGJChronology.setYear : return l7
org.joda.time.chrono.BasicGJChronology.setYear : $l6 = (long) i4
org.joda.time.chrono.BasicGJChronology.setYear : i3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getDayOfYear(long,int)>(l0, i2)
org.joda.time.chrono.BasicGJChronology.setYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i2)
org.joda.time.chrono.BasicGJChronology.setYear : i4 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getMillisOfDay(long)>(l0)
org.joda.time.chrono.BasicGJChronology.setYear : $z1 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i1)
org.joda.time.chrono.BasicGJChronology.setYear : if i3 <= 59 goto l5 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMonthDayMillis(int,int,int)>(i1, 1, i3)
org.joda.time.chrono.BasicGJChronology.setYear : l5 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMonthDayMillis(int,int,int)>(i1, 1, i3)
org.joda.time.chrono.BasicGJChronology.setYear : i3 = i3 + 1
org.joda.time.chrono.BasicGJChronology.setYear : $z2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i1)
org.joda.time.chrono.BasicGJChronology.setYear : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicGJChronology.setYear : i3 = i3 + -1
org.joda.time.format.DateTimeParserBucket.access$002 : r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone> = r1
org.joda.time.chrono.JulianChronology.getAverageMillisPerYearDividedByTwo : return 15778800000L
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $r1 = <org.joda.time.chrono.BasicGJChronology: long[] MAX_TOTAL_MILLIS_BY_MONTH_ARRAY>
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $r2 = <org.joda.time.chrono.BasicGJChronology: long[] MIN_TOTAL_MILLIS_BY_MONTH_ARRAY>
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0)
org.joda.time.chrono.BasicWeekyearDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $l12 = (long) i0
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : i1 = i0 / 100
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : if i0 >= 0 goto $i9 = i0 >> 2
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $i9 = i0 >> 2
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $z0 = virtualinvoke r0.<org.joda.time.chrono.GregorianChronology: boolean isLeapYear(int)>(i0)
org.joda.time.DateTimeUtils.getZone : if r0 != null goto return r0
org.joda.time.DateTimeUtils.getZone : return r0
org.joda.time.chrono.BasicWeekyearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.format.DateTimeParserBucket.access$302 : r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount> = i0
org.joda.time.format.DateTimeParserBucket.access$402 : r0.<org.joda.time.format.DateTimeParserBucket: boolean iSavedFieldsShared> = z0
org.joda.time.field.PreciseDurationField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis>
org.joda.time.format.DateTimeParserBucket.access$300 : $i0 = r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount>
org.joda.time.DateTimeUtils.checkPermission : r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>()
org.joda.time.DateTimeUtils.checkPermission : if r0 == null goto return
org.joda.time.chrono.GJChronology$LinkedDurationField.add : $r1 = r0.<org.joda.time.chrono.GJChronology$LinkedDurationField: org.joda.time.chrono.GJChronology$ImpreciseCutoverField iField>
org.joda.time.field.PreciseDateTimeField.getMaximumValue : $i0 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange>
org.joda.time.field.PreciseDateTimeField.set : $i4 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int get(long)>(l0)
org.joda.time.field.PreciseDateTimeField.set : $i2 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int getMinimumValue()>()
org.joda.time.field.DelegatedDateTimeField.set : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.DurationFieldType.days : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType DAYS_TYPE>
org.joda.time.chrono.BasicChronology.getYearInfo : $r4 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache>
org.joda.time.chrono.BasicChronology.getYearInfo : $r3 = new org.joda.time.chrono.BasicChronology$YearInfo
org.joda.time.chrono.BasicChronology.getYearInfo : if r1 == null goto $r3 = new org.joda.time.chrono.BasicChronology$YearInfo
org.joda.time.chrono.BasicChronology.getYearInfo : $r2 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache>
org.joda.time.chrono.BasicChronology.getYearInfo : return r1
org.joda.time.format.DateTimeFormatter.requireParser : if r1 != null goto return r1
org.joda.time.format.DateTimeFormatter.requireParser : r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser iParser>
org.joda.time.format.DateTimeFormatter.requireParser : return r1
org.joda.time.chrono.GJChronology.getInstance : return r4
org.joda.time.chrono.GJChronology.getInstance : $r12 = virtualinvoke r4.<org.joda.time.chrono.GJChronology: org.joda.time.Instant getGregorianCutover()>()
org.joda.time.chrono.GJChronology.getInstance : if r3 != null goto i1 = virtualinvoke r3.<java.util.ArrayList: int size()>()
org.joda.time.chrono.GJChronology.getInstance : $r6 = <org.joda.time.chrono.GJChronology: java.util.Map cCache>
org.joda.time.chrono.GJChronology.getInstance : $i2 = virtualinvoke r4.<org.joda.time.chrono.GJChronology: int getMinimumDaysInFirstWeek()>()
org.joda.time.chrono.GJChronology.getInstance : if r1 != null goto r2 = interfaceinvoke r1.<org.joda.time.ReadableInstant: org.joda.time.Instant toInstant()>()
org.joda.time.chrono.GJChronology.getInstance : r2 = interfaceinvoke r1.<org.joda.time.ReadableInstant: org.joda.time.Instant toInstant()>()
org.joda.time.chrono.GJChronology.getInstance : $r11 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object get(int)>(i1)
org.joda.time.chrono.GJChronology.getInstance : $r1 = <org.joda.time.chrono.GJChronology: org.joda.time.Instant DEFAULT_CUTOVER>
org.joda.time.chrono.GJChronology.getInstance : i1 = virtualinvoke r3.<java.util.ArrayList: int size()>()
org.joda.time.chrono.GJChronology.getInstance : r5 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>(r0)
org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : $r3 = r0.<org.joda.time.format.DateTimeParserBucket$SavedState: org.joda.time.DateTimeZone iZone>
org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : staticinvoke <org.joda.time.format.DateTimeParserBucket: boolean access$402(org.joda.time.format.DateTimeParserBucket,boolean)>(r1, 1)
org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : $r2 = r0.<org.joda.time.format.DateTimeParserBucket$SavedState: org.joda.time.format.DateTimeParserBucket this$0>
org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : $r5 = r0.<org.joda.time.format.DateTimeParserBucket$SavedState: java.lang.Integer iOffset>
org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : $i2 = r0.<org.joda.time.format.DateTimeParserBucket$SavedState: int iSavedFieldsCount>
org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : return 1
org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : $i0 = r0.<org.joda.time.format.DateTimeParserBucket$SavedState: int iSavedFieldsCount>
org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : $r7 = r0.<org.joda.time.format.DateTimeParserBucket$SavedState: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields>
org.joda.time.chrono.GJChronology.withZone : if r1 != null goto $r2 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.GJChronology.withZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.GJChronology.withZone : return r0
org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.chrono.GJChronology$CutoverField.julianToGregorian : $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.chrono.GJChronology this$0>
org.joda.time.chrono.GJChronology$CutoverField.julianToGregorian : $z0 = r0.<org.joda.time.chrono.GJChronology$CutoverField: boolean iConvertByWeekyear>
org.joda.time.DateTimeZone.getID : $r1 = r0.<org.joda.time.DateTimeZone: java.lang.String iID>
org.joda.time.chrono.GJChronology.gregorianToJulianByWeekyear : $r1 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology iGregorianChronology>
org.joda.time.chrono.AssembledChronology.dayOfWeek : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfWeek>
org.joda.time.chrono.JulianChronology.isLeapYear : $i1 = i0 & 3
org.joda.time.DateTimeZone.getDefault : if r0 != null goto return r0
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.base.BaseDateTime.checkChronology : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.tz.FixedDateTimeZone.getOffset : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset>
org.joda.time.chrono.GJChronology$CutoverField.roundFloor : $r3 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iJulianField>
org.joda.time.chrono.GJChronology$CutoverField.roundFloor : $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>
org.joda.time.chrono.GJChronology$CutoverField.roundFloor : $l1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>
org.joda.time.chrono.GJChronology$CutoverField.roundFloor : return l3
org.joda.time.chrono.GJChronology$CutoverField.roundFloor : $l4 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>
org.joda.time.chrono.GJChronology$CutoverField.getDurationField : $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField iDurationField>
org.joda.time.base.BaseDateTime.getMillis : $l0 = r0.<org.joda.time.base.BaseDateTime: long iMillis>
org.joda.time.convert.StringConverter.getInstantMillis : r3 = (java.lang.String) r1
org.joda.time.convert.StringConverter.getInstantMillis : $r5 = virtualinvoke r4.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)>(r2)
org.joda.time.convert.StringConverter.getInstantMillis : r4 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTimeParser()>()
org.joda.time.chrono.JulianChronology.getMaxYear : return 292272992
org.joda.time.chrono.GJChronology.withUTC : $r1 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>
org.joda.time.chrono.AssembledChronology.millisOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay>
org.joda.time.field.SkipDateTimeField.get : i1 = specialinvoke r0.<org.joda.time.field.DelegatedDateTimeField: int get(long)>(l0)
org.joda.time.field.SkipDateTimeField.get : $i2 = r0.<org.joda.time.field.SkipDateTimeField: int iSkip>
org.joda.time.field.SkipDateTimeField.get : return i1
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0)
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $i6 = i2 - 1
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i0, i1)
org.joda.time.chrono.JulianChronology.calculateFirstDayOfYearMillis : i1 = i0 - 1968
org.joda.time.chrono.JulianChronology.calculateFirstDayOfYearMillis : $i4 = i1 + 3
org.joda.time.chrono.JulianChronology.calculateFirstDayOfYearMillis : $l5 = (long) i1
org.joda.time.chrono.JulianChronology.calculateFirstDayOfYearMillis : i2 = i2 + 1
org.joda.time.chrono.JulianChronology.calculateFirstDayOfYearMillis : $l9 = l3 - 62035200000L
org.joda.time.chrono.JulianChronology.calculateFirstDayOfYearMillis : i2 = i1 >> 2
org.joda.time.chrono.JulianChronology.calculateFirstDayOfYearMillis : if i1 > 0 goto i2 = i1 >> 2
org.joda.time.chrono.JulianChronology.calculateFirstDayOfYearMillis : $z0 = virtualinvoke r0.<org.joda.time.chrono.JulianChronology: boolean isLeapYear(int)>(i0)
org.joda.time.chrono.BasicWeekyearDateTimeField.add : $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>(l0)
org.joda.time.chrono.BasicWeekyearDateTimeField.add : if i1 != 0 goto $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>(l0)
org.joda.time.Instant.toInstant : return r0
org.joda.time.format.ISODateTimeFormat.dateTimeParser : $r0 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dtp>
org.joda.time.format.ISODateTimeFormat.dateTimeParser : $r15 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dtp>
org.joda.time.base.AbstractInstant.equals : $l0 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: long getMillis()>()
org.joda.time.base.AbstractInstant.equals : return $z2
org.joda.time.base.AbstractInstant.equals : $r3 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: org.joda.time.Chronology getChronology()>()
org.joda.time.base.AbstractInstant.equals : return 1
org.joda.time.base.AbstractInstant.equals : r2 = (org.joda.time.ReadableInstant) r1
org.joda.time.base.AbstractInstant.equals : $z0 = r1 instanceof org.joda.time.ReadableInstant
org.joda.time.base.AbstractInstant.equals : if r0 != r1 goto $z0 = r1 instanceof org.joda.time.ReadableInstant
org.joda.time.base.BaseDateTime.getChronology : $r1 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology>
org.joda.time.chrono.GregorianChronology.isLeapYear : $i1 = i0 & 3
org.joda.time.format.DateTimeParserBucket.saveState : $r2 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState>
org.joda.time.format.DateTimeParserBucket.saveState : $r1 = new org.joda.time.format.DateTimeParserBucket$SavedState
org.joda.time.format.DateTimeParserBucket.saveState : $r3 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState>
org.joda.time.chrono.BasicChronology.getDayOfWeek : $l3 = l0 - 86399999L
org.joda.time.chrono.BasicChronology.getDayOfWeek : $l9 = l1 + 3L
org.joda.time.chrono.BasicChronology.getDayOfWeek : $b4 = l1 cmp -3L
org.joda.time.chrono.BasicChronology.getDayOfWeek : l1 = l0 / 86400000L
org.joda.time.chrono.BasicChronology.getDayOfWeek : $l5 = l1 + 4L
org.joda.time.chrono.BasicChronology.getDayOfWeek : $b2 = l0 cmp 0L
org.joda.time.field.PreciseDateTimeField.get : $b1 = l0 cmp 0L
org.joda.time.field.PreciseDateTimeField.get : $i8 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange>
org.joda.time.chrono.GJDayOfWeekDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.chrono.GJDayOfWeekDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.format.DateTimeParserBucket.sort : i1 = 0
org.joda.time.format.DateTimeParserBucket.sort : if i0 <= 10 goto i1 = 0
org.joda.time.format.DateTimeParserBucket.sort : i2 = i1
org.joda.time.chrono.AssembledChronology.weekyear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyear>
org.joda.time.field.SkipDateTimeField.set : $i2 = r0.<org.joda.time.field.SkipDateTimeField: int iMinValue>
org.joda.time.field.SkipDateTimeField.set : $l6 = specialinvoke r0.<org.joda.time.field.DelegatedDateTimeField: long set(long,int)>(l0, i1)
org.joda.time.field.SkipDateTimeField.set : $i4 = r0.<org.joda.time.field.SkipDateTimeField: int iSkip>
org.joda.time.DurationFieldType.months : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MONTHS_TYPE>
org.joda.time.format.DateTimeParserBucket$SavedField.set : $r6 = r0.<org.joda.time.format.DateTimeParserBucket$SavedField: org.joda.time.DateTimeField iField>
org.joda.time.format.DateTimeParserBucket$SavedField.set : return l2
org.joda.time.format.DateTimeParserBucket$SavedField.set : $r2 = r0.<org.joda.time.format.DateTimeParserBucket$SavedField: org.joda.time.DateTimeField iField>
org.joda.time.format.DateTimeParserBucket$SavedField.set : $r1 = r0.<org.joda.time.format.DateTimeParserBucket$SavedField: java.lang.String iText>
org.joda.time.format.DateTimeParserBucket$SavedField.set : if z0 == 0 goto return l2
org.joda.time.chrono.GregorianChronology.getMinimumDaysInFirstWeek : $i0 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getMinimumDaysInFirstWeek()>()
org.joda.time.field.BaseDateTimeField.getMaximumValue : $i1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue()>()
org.joda.time.chrono.BasicWeekyearDateTimeField.getDifferenceAsLong : $l14 = (long) i6
org.joda.time.chrono.BasicWeekyearDateTimeField.getDifferenceAsLong : $b7 = l0 cmp l1
org.joda.time.chrono.BasicWeekyearDateTimeField.getDifferenceAsLong : l5 = virtualinvoke r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: long remainder(long)>(l1)
org.joda.time.chrono.BasicWeekyearDateTimeField.getDifferenceAsLong : l4 = virtualinvoke r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: long remainder(long)>(l0)
org.joda.time.chrono.BasicWeekyearDateTimeField.getDifferenceAsLong : i6 = i2 - i3
org.joda.time.chrono.BasicWeekyearDateTimeField.getDifferenceAsLong : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>(l0)
org.joda.time.chrono.BasicWeekyearDateTimeField.getDifferenceAsLong : $b13 = l4 cmp l5
org.joda.time.chrono.BasicWeekyearDateTimeField.getDifferenceAsLong : $b11 = l5 cmp 31449600000L
org.joda.time.chrono.BasicWeekyearDateTimeField.getDifferenceAsLong : i3 = virtualinvoke r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>(l1)
org.joda.time.chrono.AssembledChronology.weekOfWeekyear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekOfWeekyear>
org.joda.time.DateTimeUtils.setCurrentMillisFixed : $r0 = new org.joda.time.DateTimeUtils$FixedMillisProvider
org.joda.time.DateTimeUtils.setCurrentMillisFixed : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>()
org.joda.time.field.FieldUtils.safeToInt : $i3 = (int) l0
org.joda.time.field.FieldUtils.safeToInt : $b1 = -2147483648L cmp l0
org.joda.time.format.DateTimeFormatter.withChronology : $r3 = new org.joda.time.format.DateTimeFormatter
org.joda.time.format.DateTimeFormatter.withChronology : $r2 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>
org.joda.time.field.FieldUtils.verifyValueBounds : if i0 < i1 goto $r1 = new org.joda.time.IllegalFieldValueException
org.joda.time.field.ImpreciseDateTimeField.getDifference : $l2 = virtualinvoke r0.<org.joda.time.field.ImpreciseDateTimeField: long getDifferenceAsLong(long,long)>(l0, l1)
org.joda.time.tz.FixedDateTimeZone.getOffsetFromLocal : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset>
org.joda.time.field.DelegatedDateTimeField.add : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.chrono.GJChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>
org.joda.time.chrono.GJChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: org.joda.time.Chronology getBase()>()
org.joda.time.DateTimeZone.setDefault : exitmonitor r3
org.joda.time.DateTimeZone.setDefault : $r6 = class "org/joda/time/DateTimeZone"
org.joda.time.DateTimeZone.setDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r0
org.joda.time.DateTimeZone.setDefault : if r1 == null goto (branch)
org.joda.time.DateTimeZone.setDefault : if r0 != null goto $r6 = class "org/joda/time/DateTimeZone"
org.joda.time.DateTimeZone.setDefault : r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>()
org.joda.time.chrono.GJChronology$CutoverField.set : $r7 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iJulianField>
org.joda.time.chrono.GJChronology$CutoverField.set : $l2 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>
org.joda.time.chrono.GJChronology$CutoverField.set : $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>
org.joda.time.chrono.GJChronology$CutoverField.set : $l5 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>
org.joda.time.chrono.GJChronology$CutoverField.set : return l4
org.joda.time.chrono.GJChronology$CutoverField.set : $r2 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.chrono.GJChronology this$0>
org.joda.time.chrono.GJChronology$CutoverField.set : l4 = virtualinvoke r0.<org.joda.time.chrono.GJChronology$CutoverField: long gregorianToJulian(long)>(l4)
org.joda.time.chrono.GJChronology$CutoverField.set : $i11 = virtualinvoke r0.<org.joda.time.chrono.GJChronology$CutoverField: int get(long)>(l4)
org.joda.time.chrono.GJChronology$CutoverField.set : $l12 = r0.<org.joda.time.chrono.GJChronology$CutoverField: long iCutover>
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: org.joda.time.format.DateTimeParser[] iParsers>
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if i9 <= i3 goto virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: boolean restoreState(java.lang.Object)>(r4)
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if r6 != null goto i5 = interfaceinvoke r6.<org.joda.time.format.DateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>(r1, r2, i0)
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: boolean restoreState(java.lang.Object)>(r4)
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i9 = i5 ^ -1
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if i5 >= 0 goto virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: boolean restoreState(java.lang.Object)>(r4)
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if i2 > i0 goto z0 = 1
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : r4 = virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: java.lang.Object saveState()>()
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : return i0
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i2 = i0
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i3 = i0
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : z0 = 0
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : r6 = r3[i4]
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if i5 < i0 goto (branch)
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i2 = i5
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : r5 = virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: java.lang.Object saveState()>()
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if i5 <= i2 goto virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: boolean restoreState(java.lang.Object)>(r4)
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i5 = interfaceinvoke r6.<org.joda.time.format.DateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>(r1, r2, i0)
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : return i5
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i3 = i9
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : $i6 = virtualinvoke r2.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : r5 = null
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i1 = lengthof r3
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i4 = 0
org.joda.time.DateTime.withMillis : $l1 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>()
org.joda.time.DurationFieldType.years : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType YEARS_TYPE>
org.joda.time.chrono.BasicChronology.getYearMillis : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>(i0)
org.joda.time.convert.ConverterManager.getInstance : $r2 = <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager INSTANCE>
org.joda.time.convert.ConverterManager.getInstance : $r0 = <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager INSTANCE>
org.joda.time.chrono.BasicChronology.getWeekyear : $l3 = l0 + 604800000L
org.joda.time.chrono.BasicChronology.getWeekyear : i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicChronology.getWeekyear : if i2 <= 51 goto return i1
org.joda.time.chrono.BasicChronology.getWeekyear : $l5 = l0 - 1209600000L
org.joda.time.chrono.BasicChronology.getWeekyear : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long,int)>(l0, i1)
org.joda.time.chrono.BasicChronology.getWeekyear : if i2 != 1 goto (branch)
org.joda.time.chrono.BasicChronology.getWeekyear : return i1
org.joda.time.chrono.GregorianChronology.getApproxMillisAtEpochDividedByTwo : return 31083597720000L
org.joda.time.convert.AbstractConverter.getChronology : $r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r2)
org.joda.time.chrono.GJChronology.getGregorianCutover : $r1 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.Instant iCutoverInstant>
org.joda.time.chrono.JulianChronology.getApproxMillisAtEpochDividedByTwo : return 31083663600000L
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : $r5 = r3[i2]
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: org.joda.time.format.DateTimeParser[] iParsers>
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : return i0
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : i2 = 0
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : if r3 != null goto i1 = lengthof r3
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : i1 = lengthof r3
org.joda.time.DateTimeUtils.setCurrentMillisSystem : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>()
org.joda.time.DateTimeUtils.setCurrentMillisSystem : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$SystemMillisProvider SYSTEM_MILLIS_PROVIDER>
org.joda.time.chrono.BasicChronology.getWeeksInYear : $l4 = l2 - l1
org.joda.time.chrono.BasicChronology.getWeeksInYear : $i3 = i0 + 1
org.joda.time.chrono.BasicChronology.getWeeksInYear : l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getFirstWeekOfYearMillis(int)>(i0)
org.joda.time.chrono.BasicChronology.getMillisOfDay : $l4 = l0 + 1L
org.joda.time.chrono.BasicChronology.getMillisOfDay : $l2 = l0 % 86400000L
org.joda.time.chrono.BasicChronology.getMillisOfDay : $b1 = l0 cmp 0L
org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $i5 = 8 - i2
org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0)
org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $i9 = i2 - 1
org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $i3 = r0.<org.joda.time.chrono.BasicChronology: int iMinDaysInFirstWeek>
org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDayOfWeek(long)>(l1)
org.joda.time.chrono.BasicChronology.getYear : $b9 = l2 cmp 0L
org.joda.time.chrono.BasicChronology.getYear : l14 = l4 + l6
org.joda.time.chrono.BasicChronology.getYear : l5 = l0 - l4
org.joda.time.chrono.BasicChronology.getYear : i3 = i3 + 1
org.joda.time.chrono.BasicChronology.getYear : $l11 = l2 / l1
org.joda.time.chrono.BasicChronology.getYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: boolean isLeapYear(int)>(i3)
org.joda.time.chrono.BasicChronology.getYear : $b12 = l5 cmp 0L
org.joda.time.chrono.BasicChronology.getYear : $l7 = l0 >> 1
org.joda.time.chrono.BasicChronology.getYear : l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i3)
org.joda.time.chrono.BasicChronology.getYear : l6 = 31536000000L
org.joda.time.chrono.BasicChronology.getYear : $b13 = l5 cmp 31536000000L
org.joda.time.chrono.BasicChronology.getYear : return i3
org.joda.time.chrono.BasicChronology.getYear : $b15 = l14 cmp l0
org.joda.time.chrono.BasicChronology.getYear : l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getAverageMillisPerYearDividedByTwo()>()
org.joda.time.chrono.AssembledChronology.weeks : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeeks>
org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.parseInto : $r5 = r0.<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: java.lang.String iValue>
org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.parseInto : $r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: java.lang.String iValue>
org.joda.time.field.BaseDurationField.isSupported : return 1
org.joda.time.chrono.GJDayOfWeekDateTimeField.getMaximumValue : return 7
org.joda.time.chrono.AssembledChronology.days : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays>
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i5 = r0.<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int iMaxParsedDigits>
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : return i19
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if z0 == 0 goto $r6 = r0.<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: org.joda.time.DateTimeFieldType iFieldType>
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i19 = i0 + i2
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if i2 < 9 goto i4 = i0
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if i21 >= i19 goto (branch)
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i21 = i4 + 1
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i24 = i20 << 3
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if i2 != 0 goto (branch)
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : z0 = 0
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if z0 == 0 goto i21 = i4 + 1
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $r6 = r0.<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: org.joda.time.DateTimeFieldType iFieldType>
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : goto [?= i19 = i0 + i2]
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i2 = i2 + 1
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i2 = 0
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : goto [?= staticinvoke <edu.washington.cs.dt.impact.util.Tracer: void trace(java.lang.String,java.lang.String)>("if i2 >= i1 goto (branch)", "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto")]
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if c3 < 48 goto (branch)
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : goto [?= (branch)]
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i4 = i0
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i17 = i0 ^ -1
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if i2 >= i1 goto (branch)
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i8 = i0 + i2
org.joda.time.chrono.GJChronology.julianToGregorianByWeekyear : $r1 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.JulianChronology iJulianChronology>
org.joda.time.chrono.GJDayOfWeekDateTimeField.getMinimumValue : return 1
org.joda.time.chrono.GJChronology$LinkedDurationField.getDifference : $r1 = r0.<org.joda.time.chrono.GJChronology$LinkedDurationField: org.joda.time.chrono.GJChronology$ImpreciseCutoverField iField>
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $b8 = l0 cmp l3
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $i7 = i1 + 1
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $i5 = i1 - 1
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $l9 = l0 - l2
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : return 1
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getFirstWeekOfYearMillis(int)>(i1)
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $b4 = l0 cmp l2
org.joda.time.field.DelegatedDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r12 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField weekyear()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r7 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r14 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r13 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField weekOfWeekyear()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $b0 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: byte iOrdinal>
org.joda.time.format.DateTimeParserBucket.saveField : $i4 = i0 + 1
org.joda.time.format.DateTimeParserBucket.saveField : r2 = r3
org.joda.time.format.DateTimeParserBucket.saveField : r2 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields>
org.joda.time.format.DateTimeParserBucket.saveField : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r3, 0, i0)
org.joda.time.format.DateTimeParserBucket.saveField : i0 = r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount>
org.joda.time.format.DateTimeParserBucket.saveField : $r2 = new org.joda.time.format.DateTimeParserBucket$SavedField
org.joda.time.format.DateTimeParserBucket.saveField : $i2 = lengthof r2
org.joda.time.format.DateTimeParserBucket.saveField : r2[i0] = r1
org.joda.time.format.DateTimeParserBucket.saveField : r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState> = null
org.joda.time.format.DateTimeParserBucket.saveField : $i1 = lengthof r2
org.joda.time.format.DateTimeParserBucket.saveField : r0.<org.joda.time.format.DateTimeParserBucket: boolean iSavedFieldsShared> = 0
org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.roundFloor : $l1 = l0 + 259200000L
org.joda.time.chrono.GregorianChronology.getMinYear : return -292275054
org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getMaximumValueForSet : if i1 <= 52 goto $i2 = 52
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getUnitMillis : $r1 = r0.<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: org.joda.time.field.ImpreciseDateTimeField this$0>
org.joda.time.chrono.BasicWeekyearDateTimeField.set : if i2 != i1 goto $r3 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r3 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r9 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r7 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicWeekyearDateTimeField.set : if i5 >= i4 goto $i14 = i4
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r8 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicWeekyearDateTimeField.set : i9 = virtualinvoke r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>(l15)
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $i11 = staticinvoke <java.lang.Math: int abs(int)>(i1)
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r4 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicWeekyearDateTimeField.set : if i7 <= i6 goto l8 = l0
org.joda.time.chrono.BasicWeekyearDateTimeField.set : return l0
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $i16 = i7 - i10
org.joda.time.chrono.BasicWeekyearDateTimeField.set : l8 = l0
org.joda.time.chrono.BasicWeekyearDateTimeField.set : if i9 >= i1 goto (branch)
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r6 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicWeekyearDateTimeField.set : if i9 <= i1 goto $r8 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicWeekyearDateTimeField.set : l15 = l15 + 604800000L
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $i12 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMinYear()>()
org.joda.time.chrono.BasicWeekyearDateTimeField.set : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>(l0)
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r5 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicWeekyearDateTimeField.set : return l20
