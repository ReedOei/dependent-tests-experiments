org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r9 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField days()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal>
org.joda.time.base.BaseInterval.getChronology : $r1 = r0.<org.joda.time.base.BaseInterval: org.joda.time.Chronology iChronology>
org.joda.time.base.BaseInterval.setInterval : r0.<org.joda.time.base.BaseInterval: long iStartMillis> = l0
org.joda.time.base.BaseInterval.setInterval : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.base.BaseInterval.setInterval : r0.<org.joda.time.base.BaseInterval: long iEndMillis> = l1
org.joda.time.base.BaseInterval.setInterval : virtualinvoke r0.<org.joda.time.base.BaseInterval: void checkInterval(long,long)>(l0, l1)
org.joda.time.base.AbstractInterval.checkInterval : $b2 = l1 cmp l0
org.joda.time.base.AbstractInterval.checkInterval : $r1 = new java.lang.IllegalArgumentException
org.joda.time.base.BaseDateTime.checkInstant : return l0
org.joda.time.chrono.ISOChronology.getInstance : if r0 != null goto $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0)
org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0)
org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache>
org.joda.time.chrono.ISOChronology.getInstance : return r1
org.joda.time.chrono.ISOChronology.getInstance : if r1 == null goto $r7 = <org.joda.time.chrono.ISOChronology: java.util.Map cCache>
org.joda.time.chrono.ISOChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>()
org.joda.time.base.BaseSingleFieldPeriod.between : r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>(r0)
org.joda.time.base.BaseSingleFieldPeriod.between : return i0
org.joda.time.base.BaseSingleFieldPeriod.between : $r5 = virtualinvoke r2.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>(r3)
org.joda.time.base.BaseSingleFieldPeriod.between : if r0 == null goto $r4 = new java.lang.IllegalArgumentException
org.joda.time.chrono.ZonedChronology.getZone : $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: java.lang.Object getParam()>()
org.joda.time.DateTimeUtils.getChronology : if r0 != null goto return r0
org.joda.time.DateTimeUtils.getChronology : return r0
org.joda.time.DateTimeUtils.getChronology : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>()
org.joda.time.Days.daysIn : if r0 != null goto $r3 = interfaceinvoke r0.<org.joda.time.ReadableInterval: org.joda.time.DateTime getStart()>()
org.joda.time.Days.daysIn : $r5 = staticinvoke <org.joda.time.Days: org.joda.time.Days days(int)>(i0)
org.joda.time.Days.daysIn : $r3 = interfaceinvoke r0.<org.joda.time.ReadableInterval: org.joda.time.DateTime getStart()>()
org.joda.time.base.AbstractInterval.toDurationMillis : $l0 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: long getEndMillis()>()
org.joda.time.base.BaseInterval.getEndMillis : $l0 = r0.<org.joda.time.base.BaseInterval: long iEndMillis>
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : $l3 = (long) i1
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DateTimeZone iZone>
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : return i1
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : $l4 = l0 ^ l2
org.joda.time.field.FieldUtils.safeSubtract : $l3 = l0 ^ l2
org.joda.time.field.FieldUtils.safeSubtract : return l2
org.joda.time.field.FieldUtils.safeSubtract : l2 = l0 - l1
org.joda.time.Days.days : lookupswitch(i0) {     case -2147483648: goto $r9 = <org.joda.time.Days: org.joda.time.Days MIN_VALUE>;     case 0: goto $r0 = <org.joda.time.Days: org.joda.time.Days ZERO>;     case 1: goto $r1 = <org.joda.time.Days: org.joda.time.Days ONE>;     case 2: goto $r2 = <org.joda.time.Days: org.joda.time.Days TWO>;     case 3: goto $r3 = <org.joda.time.Days: org.joda.time.Days THREE>;     case 4: goto $r4 = <org.joda.time.Days: org.joda.time.Days FOUR>;     case 5: goto $r5 = <org.joda.time.Days: org.joda.time.Days FIVE>;     case 6: goto $r6 = <org.joda.time.Days: org.joda.time.Days SIX>;     case 7: goto $r7 = <org.joda.time.Days: org.joda.time.Days SEVEN>;     case 2147483647: goto $r8 = <org.joda.time.Days: org.joda.time.Days MAX_VALUE>;     default: goto $r10 = new org.joda.time.Days; }
org.joda.time.Days.days : $r0 = <org.joda.time.Days: org.joda.time.Days ZERO>
org.joda.time.MutableInterval.setStartMillis : $l1 = virtualinvoke r0.<org.joda.time.MutableInterval: long getEndMillis()>()
org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.DurationFieldType.days : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType DAYS_TYPE>
org.joda.time.DateTimeZone.getDefault : if r0 != null goto return r0
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.field.BaseDurationField.getDifference : $l2 = virtualinvoke r0.<org.joda.time.field.BaseDurationField: long getDifferenceAsLong(long,long)>(l0, l1)
org.joda.time.base.AbstractInterval.getEnd : $r1 = new org.joda.time.DateTime
org.joda.time.base.BaseDateTime.checkChronology : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.tz.FixedDateTimeZone.getOffset : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset>
org.joda.time.base.BaseDateTime.getMillis : $l0 = r0.<org.joda.time.base.BaseDateTime: long iMillis>
org.joda.time.base.BaseInterval.getStartMillis : $l0 = r0.<org.joda.time.base.BaseInterval: long iStartMillis>
org.joda.time.base.BaseDateTime.getChronology : $r1 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology>
org.joda.time.chrono.AssembledChronology.getParam : $r1 = r0.<org.joda.time.chrono.AssembledChronology: java.lang.Object iParam>
org.joda.time.field.FieldUtils.safeAdd : l2 = l0 + l1
org.joda.time.field.FieldUtils.safeAdd : $l3 = l0 ^ l2
org.joda.time.field.FieldUtils.safeAdd : return l2
org.joda.time.field.FieldUtils.safeToInt : $i3 = (int) l0
org.joda.time.field.FieldUtils.safeToInt : $b1 = -2147483648L cmp l0
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference : $i4 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>(l0)
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DurationField iField>
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference : i2 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>(l1)
org.joda.time.field.PreciseDurationField.getDifferenceAsLong : l2 = staticinvoke <org.joda.time.field.FieldUtils: long safeSubtract(long,long)>(l0, l1)
org.joda.time.field.PreciseDurationField.getDifferenceAsLong : $l3 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis>
org.joda.time.chrono.AssembledChronology.days : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays>
org.joda.time.MutableInterval.setDurationBeforeEnd : $l1 = virtualinvoke r0.<org.joda.time.MutableInterval: long getEndMillis()>()
org.joda.time.base.AbstractInterval.isBefore : if r1 != null goto $l0 = interfaceinvoke r1.<org.joda.time.ReadableInterval: long getStartMillis()>()
org.joda.time.base.AbstractInterval.isBefore : $l0 = interfaceinvoke r1.<org.joda.time.ReadableInterval: long getStartMillis()>()
org.joda.time.base.AbstractInterval.isBefore : $l1 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: long getEndMillis()>()
org.joda.time.DateTimeUtils.getInstantChronology : if r1 != null goto return r1
org.joda.time.DateTimeUtils.getInstantChronology : r1 = interfaceinvoke r0.<org.joda.time.ReadableInstant: org.joda.time.Chronology getChronology()>()
org.joda.time.DateTimeUtils.getInstantChronology : if r0 != null goto r1 = interfaceinvoke r0.<org.joda.time.ReadableInstant: org.joda.time.Chronology getChronology()>()
org.joda.time.DateTimeUtils.getInstantChronology : return r1
org.joda.time.base.AbstractInterval.getStart : $r1 = new org.joda.time.DateTime
