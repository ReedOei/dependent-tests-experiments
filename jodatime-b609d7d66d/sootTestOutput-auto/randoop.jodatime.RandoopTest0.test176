org.joda.time.DateTimeFieldType.monthOfYear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MONTH_OF_YEAR_TYPE>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonthNext : goto [?= return l0]
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonthNext : l0 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>(r1, l0)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonthNext : return l0
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.get : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.get : $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.chrono.BaseChronology.get : $r3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i2)
org.joda.time.chrono.BaseChronology.get : return r2
org.joda.time.chrono.BaseChronology.get : i1 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>()
org.joda.time.chrono.BaseChronology.get : r2 = newarray (int)[i1]
org.joda.time.chrono.BaseChronology.get : i2 = 0
org.joda.time.DateTimeFieldType.secondOfMinute : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType SECOND_OF_MINUTE_TYPE>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : $z0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: boolean iAdvance>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : if i2 == 0 goto return l0
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : $i3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfWeek>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : if i2 >= 0 goto $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : return l0
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValueForSet : $r1 = r0.<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.field.PreciseDurationDateTimeField.set : $i4 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int get(long)>(l0)
org.joda.time.field.PreciseDurationDateTimeField.set : $i2 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int getMinimumValue()>()
org.joda.time.field.PreciseDurationDateTimeField.set : $i3 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int getMaximumValueForSet(long,int)>(l0, i1)
org.joda.time.chrono.BasicFixedMonthChronology.getMonthOfYear : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: int getDayOfYear(long)>(l0)
org.joda.time.chrono.ZonedChronology.getDateTimeMillis : $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.ZonedChronology.getDateTimeMillis : $l7 = virtualinvoke $r1.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5, i6)
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.getOffset : $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.GregorianChronology.getMaxYear : return 292278993
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : $r4 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : $r3 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : $z0 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean iTimeField>
org.joda.time.chrono.LimitChronology$LimitDurationField.add : $r3 = r0.<org.joda.time.chrono.LimitChronology$LimitDurationField: org.joda.time.chrono.LimitChronology this$0>
org.joda.time.chrono.LimitChronology$LimitDurationField.add : $r1 = r0.<org.joda.time.chrono.LimitChronology$LimitDurationField: org.joda.time.chrono.LimitChronology this$0>
org.joda.time.chrono.LimitChronology$LimitDurationField.add : return l2
org.joda.time.chrono.LimitChronology$LimitDurationField.add : $r2 = virtualinvoke r0.<org.joda.time.chrono.LimitChronology$LimitDurationField: org.joda.time.DurationField getWrappedField()>()
org.joda.time.chrono.GregorianChronology.getAverageMillisPerYearDividedByTwo : return 15778476000L
org.joda.time.field.PreciseDurationDateTimeField.getMinimumValue : return 0
org.joda.time.tz.CachedDateTimeZone$Info.getOffset : $i3 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: int iOffset>
org.joda.time.tz.CachedDateTimeZone$Info.getOffset : $i6 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: int iOffset>
org.joda.time.tz.CachedDateTimeZone$Info.getOffset : $r3 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: org.joda.time.DateTimeZone iZoneRef>
org.joda.time.tz.CachedDateTimeZone$Info.getOffset : $r1 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: org.joda.time.tz.CachedDateTimeZone$Info iNextInfo>
org.joda.time.chrono.EthiopicChronology.getMinYear : return -292269337
org.joda.time.DateTimeFieldType.minuteOfHour : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MINUTE_OF_HOUR_TYPE>
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getDurationType : $r1 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DurationFieldType iUnitType>
org.joda.time.tz.CachedDateTimeZone.getOffset : $r1 = specialinvoke r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info getInfo(long)>(l0)
org.joda.time.chrono.GJDayOfWeekDateTimeField.get : $r1 = r0.<org.joda.time.chrono.GJDayOfWeekDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $b17 = l13 cmp l8
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l13 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>(r1, l13)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $l22 = (long) i3
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : i3 = i1 + i2
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $c5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l13 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>(r1, l21)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l13 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>(r1, l12)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $r6 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $l7 = (long) i3
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $r7 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $i14 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfWeek>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l21 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>(r1, l20)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>()
org.joda.time.chrono.BasicChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.BasicChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>
org.joda.time.chrono.BasicChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.AssembledChronology.dayOfMonth : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth>
org.joda.time.chrono.ZonedChronology.getZone : $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: java.lang.Object getParam()>()
org.joda.time.chrono.BasicFixedMonthChronology.getDaysInYearMonth : if i1 == 13 goto $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: boolean isLeapYear(int)>(i0)
org.joda.time.base.AbstractPartial.indexOfSupported : i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DurationFieldType)>(r1)
org.joda.time.base.AbstractPartial.indexOfSupported : return i0
org.joda.time.base.AbstractPartial.indexOfSupported : if i0 != -1 goto return i0
org.joda.time.DateTimeUtils.getChronology : if r0 != null goto return r0
org.joda.time.DateTimeUtils.getChronology : return r0
org.joda.time.field.DecoratedDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DecoratedDateTimeField.getWrappedField : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : $i4 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>()
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset>
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : goto [?= $i7 = virtualinvoke r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>()]
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : $i7 = virtualinvoke r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>()
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence>
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence>
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : $b8 = l0 cmp 0L
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : $b10 = l2 cmp l3
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : goto [?= $b10 = l2 cmp l3]
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : $b5 = l0 cmp 0L
org.joda.time.DateTimeZone.getOffsetFromLocal : i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0)
org.joda.time.DateTimeZone.getOffsetFromLocal : $l7 = (long) i1
org.joda.time.DateTimeZone.getOffsetFromLocal : i3 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l2)
org.joda.time.DateTimeZone.getOffsetFromLocal : return i3
org.joda.time.DateTimeZone.getOffsetFromLocal : if i1 == i3 goto (branch)
org.joda.time.DateTimeZone.getOffsetFromLocal : if i1 < 0 goto return i3
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : $l3 = (long) i1
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DateTimeZone iZone>
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : return i1
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : $l4 = l0 ^ l2
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $b1 = l0 cmp 0L
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l2 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.year : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear>
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r5 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>()
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l8 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>(i0, i1, i2)
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r3 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>()
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r6 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>()
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l7 = virtualinvoke r1.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5, i6)
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r4 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>()
org.joda.time.field.MillisDurationField.add : $l2 = (long) i1
org.joda.time.chrono.BasicYearDateTimeField.set : $r3 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.set : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.set : $i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMinYear()>()
org.joda.time.chrono.EthiopicChronology.getDateTimeMillis : $l7 = specialinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5, i6)
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : $l3 = (long) i1
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DateTimeZone iZone>
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : return i1
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : $l4 = l0 ^ l2
org.joda.time.field.DecoratedDurationField.getWrappedField : $r1 = r0.<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField iField>
org.joda.time.chrono.BasicChronology.getDayOfYear : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicChronology.getDayOfYear : $l3 = l0 - l2
org.joda.time.chrono.BasicChronology.getDayOfYear : l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1)
org.joda.time.field.DelegatedDateTimeField.get : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.chrono.BasicGJChronology.setYear : return l7
org.joda.time.chrono.BasicGJChronology.setYear : $l6 = (long) i4
org.joda.time.chrono.BasicGJChronology.setYear : i3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getDayOfYear(long,int)>(l0, i2)
org.joda.time.chrono.BasicGJChronology.setYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i2)
org.joda.time.chrono.BasicGJChronology.setYear : i4 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getMillisOfDay(long)>(l0)
org.joda.time.chrono.BasicGJChronology.setYear : if i3 <= 59 goto l5 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMonthDayMillis(int,int,int)>(i1, 1, i3)
org.joda.time.chrono.BasicGJChronology.setYear : l5 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMonthDayMillis(int,int,int)>(i1, 1, i3)
org.joda.time.chrono.BasicGJChronology.setYear : $z2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i1)
org.joda.time.chrono.BasicGJChronology.setYear : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $r2 = <org.joda.time.chrono.BasicGJChronology: long[] MIN_TOTAL_MILLIS_BY_MONTH_ARRAY>
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0)
org.joda.time.chrono.EthiopicChronology.getApproxMillisAtEpochDividedByTwo : return 30962844000000L
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $l12 = (long) i0
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : i1 = i0 / 100
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : if i0 >= 0 goto $i9 = i0 >> 2
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $i9 = i0 >> 2
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $z0 = virtualinvoke r0.<org.joda.time.chrono.GregorianChronology: boolean isLeapYear(int)>(i0)
org.joda.time.chrono.BasicFixedMonthChronology.getTotalMillisByYearMonth : $i2 = i1 - 1
org.joda.time.DateTimeFieldType.year : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType YEAR_TYPE>
org.joda.time.field.PreciseDateTimeField.getMaximumValue : $i0 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange>
org.joda.time.DateTimeFieldType.dayOfMonth : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType DAY_OF_MONTH_TYPE>
org.joda.time.field.BaseDateTimeField.set : return r2
org.joda.time.field.BaseDateTimeField.set : i2 = i0 + 1
org.joda.time.field.BaseDateTimeField.set : $i3 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r2)
org.joda.time.field.BaseDateTimeField.set : r2[i0] = i1
org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.EthiopicChronology.withUTC : $r1 = <org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology INSTANCE_UTC>
org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DurationField iField>
org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : $z0 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean iTimeField>
org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : i2 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>(l0)
org.joda.time.field.PreciseDateTimeField.set : $i4 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int get(long)>(l0)
org.joda.time.field.PreciseDateTimeField.set : $i2 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int getMinimumValue()>()
org.joda.time.chrono.BasicYearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.YearMonthDay.getField : $r5 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.YearMonthDay.getField : tableswitch(i0) {     case 0: goto $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();     case 1: goto $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>();     case 2: goto $r5 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>();     default: goto $r6 = new java.lang.IndexOutOfBoundsException; }
org.joda.time.tz.CachedDateTimeZone.getInfo : r1 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info[] iInfoCache>
org.joda.time.tz.CachedDateTimeZone.getInfo : return r2
org.joda.time.tz.CachedDateTimeZone.getInfo : r2 = r1[i3]
org.joda.time.tz.CachedDateTimeZone.getInfo : $i2 = <org.joda.time.tz.CachedDateTimeZone: int cInfoCacheMask>
org.joda.time.tz.CachedDateTimeZone.getInfo : r1[i3] = r2
org.joda.time.tz.CachedDateTimeZone.getInfo : if r2 == null goto r2 = specialinvoke r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info createInfo(long)>(l0)
org.joda.time.tz.CachedDateTimeZone.getInfo : $l4 = l0 >> 32
org.joda.time.tz.CachedDateTimeZone.getInfo : r2 = specialinvoke r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info createInfo(long)>(l0)
org.joda.time.chrono.LimitChronology.checkLimits : $r3 = r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime iLowerLimit>
org.joda.time.chrono.LimitChronology.checkLimits : $r5 = r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime iUpperLimit>
org.joda.time.DurationFieldType.days : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType DAYS_TYPE>
org.joda.time.base.AbstractPartial.indexOf : return i0
org.joda.time.base.AbstractPartial.indexOf : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i0)
org.joda.time.base.AbstractPartial.indexOf : i0 = 0
org.joda.time.chrono.BasicChronology.getYearInfo : $r4 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache>
org.joda.time.chrono.BasicChronology.getYearInfo : $r3 = new org.joda.time.chrono.BasicChronology$YearInfo
org.joda.time.chrono.BasicChronology.getYearInfo : if r1 == null goto $r3 = new org.joda.time.chrono.BasicChronology$YearInfo
org.joda.time.chrono.BasicChronology.getYearInfo : $r2 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache>
org.joda.time.chrono.BasicChronology.getYearInfo : return r1
org.joda.time.DateTimeUtils.currentTimeMillis : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider>
org.joda.time.chrono.BasicFixedMonthChronology.getDayOfMonth : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: int getDayOfYear(long)>(l0)
org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.AssembledChronology.monthOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear>
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i1)
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : return $b6
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMillis(int)>(i1)
org.joda.time.base.AbstractPartial.getField : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.Chronology getChronology()>()
org.joda.time.base.BasePartial.getValues : $r1 = r0.<org.joda.time.base.BasePartial: int[] iValues>
org.joda.time.chrono.LimitChronology$LimitDateTimeField.get : $r2 = virtualinvoke r0.<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DateTimeField getWrappedField()>()
org.joda.time.chrono.LimitChronology$LimitDateTimeField.get : $r1 = r0.<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.chrono.LimitChronology this$0>
org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDurationField.add : $l5 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l0, l2)
org.joda.time.field.PreciseDurationField.add : $l3 = (long) i1
org.joda.time.chrono.BasicChronology.getMaxMonth : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMaxMonth()>()
org.joda.time.DateTimeZone.getID : $r1 = r0.<org.joda.time.DateTimeZone: java.lang.String iID>
org.joda.time.DateMidnight.plusWeeks : if i0 != 0 goto $r1 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>()
org.joda.time.DateMidnight.plusWeeks : $r1 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>()
org.joda.time.DateMidnight.plusWeeks : $r3 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.DateMidnight withMillis(long)>(l1)
org.joda.time.YearMonthDay.getMonthOfYear : $i0 = virtualinvoke r0.<org.joda.time.YearMonthDay: int getValue(int)>(1)
org.joda.time.YearMonthDay.getYear : $i0 = virtualinvoke r0.<org.joda.time.YearMonthDay: int getValue(int)>(0)
org.joda.time.field.PreciseDurationDateTimeField.getDurationField : $r1 = r0.<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField iUnitField>
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMinimumValue : return 1
org.joda.time.chrono.AssembledChronology.dayOfWeek : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfWeek>
org.joda.time.YearMonthDay.toDateMidnight : $r1 = virtualinvoke r0.<org.joda.time.YearMonthDay: org.joda.time.DateMidnight toDateMidnight(org.joda.time.DateTimeZone)>(null)
org.joda.time.YearMonthDay.toDateMidnight : $r4 = new org.joda.time.DateMidnight
org.joda.time.YearMonthDay.toDateMidnight : $r3 = virtualinvoke r0.<org.joda.time.YearMonthDay: org.joda.time.Chronology getChronology()>()
org.joda.time.DateTimeZone.getDefault : if r0 != null goto return r0
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.base.BaseDateTime.checkChronology : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.DateTimeZone.convertUTCToLocal : i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0)
org.joda.time.DateTimeZone.convertUTCToLocal : $l3 = (long) i1
org.joda.time.DateTimeZone.convertUTCToLocal : return l2
org.joda.time.DateTimeZone.convertUTCToLocal : $l4 = l0 ^ l2
org.joda.time.base.BaseDateTime.getMillis : $l0 = r0.<org.joda.time.base.BaseDateTime: long iMillis>
org.joda.time.chrono.BasicYearDateTimeField.add : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>(l0, i3)
org.joda.time.chrono.BasicYearDateTimeField.add : if i1 != 0 goto i2 = virtualinvoke r0.<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>(l0)
org.joda.time.chrono.BasicYearDateTimeField.add : i3 = staticinvoke <org.joda.time.field.FieldUtils: int safeAdd(int,int)>(i2, i1)
org.joda.time.chrono.BasicYearDateTimeField.add : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>(l0)
org.joda.time.chrono.EthiopicChronology.getInstance : $i1 = i0 - 1
org.joda.time.chrono.EthiopicChronology.getInstance : exitmonitor r1
org.joda.time.chrono.EthiopicChronology.getInstance : $r6 = <org.joda.time.chrono.EthiopicChronology: java.util.Map cCache>
org.joda.time.chrono.EthiopicChronology.getInstance : return r3
org.joda.time.chrono.EthiopicChronology.getInstance : if r3 != null goto exitmonitor r1
org.joda.time.chrono.EthiopicChronology.getInstance : $r7 = <org.joda.time.chrono.EthiopicChronology: java.util.Map cCache>
org.joda.time.chrono.EthiopicChronology.getInstance : goto [?= (branch)]
org.joda.time.chrono.EthiopicChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone,int)>(r0, 4)
org.joda.time.chrono.EthiopicChronology.getInstance : if r2 != null goto $i1 = i0 - 1
org.joda.time.chrono.EthiopicChronology.getInstance : if r0 != null goto $r6 = <org.joda.time.chrono.EthiopicChronology: java.util.Map cCache>
org.joda.time.chrono.EthiopicChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>()
org.joda.time.chrono.AssembledChronology.millisOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay>
org.joda.time.field.SkipDateTimeField.get : i1 = specialinvoke r0.<org.joda.time.field.DelegatedDateTimeField: int get(long)>(l0)
org.joda.time.field.SkipDateTimeField.get : $i2 = r0.<org.joda.time.field.SkipDateTimeField: int iSkip>
org.joda.time.field.SkipDateTimeField.get : return i1
org.joda.time.DateTimeFieldType.millisOfSecond : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MILLIS_OF_SECOND_TYPE>
org.joda.time.chrono.EthiopicChronology.withZone : r1 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>()
org.joda.time.chrono.EthiopicChronology.withZone : if r1 != null goto $r2 = virtualinvoke r0.<org.joda.time.chrono.EthiopicChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.EthiopicChronology.withZone : $r3 = staticinvoke <org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology getInstance(org.joda.time.DateTimeZone)>(r1)
org.joda.time.chrono.EthiopicChronology.withZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.EthiopicChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.next : $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$OfYear iOfYear>
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0)
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $i6 = i2 - 1
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i0, i1)
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.YearMonthDay.withFieldAdded : $r3 = virtualinvoke r0.<org.joda.time.YearMonthDay: org.joda.time.DateTimeField getField(int)>(i1)
org.joda.time.YearMonthDay.withFieldAdded : $r5 = new org.joda.time.YearMonthDay
org.joda.time.YearMonthDay.withFieldAdded : i1 = virtualinvoke r0.<org.joda.time.YearMonthDay: int indexOfSupported(org.joda.time.DurationFieldType)>(r1)
org.joda.time.YearMonthDay.withFieldAdded : if i0 != 0 goto r2 = virtualinvoke r0.<org.joda.time.YearMonthDay: int[] getValues()>()
org.joda.time.YearMonthDay.withFieldAdded : r2 = virtualinvoke r0.<org.joda.time.YearMonthDay: int[] getValues()>()
org.joda.time.base.BaseDateTime.getChronology : $r1 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology>
org.joda.time.chrono.LimitChronology.getDateTimeMillis : return l7
org.joda.time.chrono.LimitChronology.getDateTimeMillis : l7 = virtualinvoke $r1.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5, i6)
org.joda.time.chrono.LimitChronology.getDateTimeMillis : virtualinvoke r0.<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>(l7, "resulting")
org.joda.time.chrono.LimitChronology.getDateTimeMillis : $r1 = virtualinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology getBase()>()
org.joda.time.YearMonthDay.getFieldType : $r1 = <org.joda.time.YearMonthDay: org.joda.time.DateTimeFieldType[] FIELD_TYPES>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : i3 = i1 ^ -1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : $i4 = lengthof r1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : $r4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : if i1 < 0 goto i3 = i1 ^ -1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : $r6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : i1 = staticinvoke <java.util.Arrays: int binarySearch(long[],long)>(r1, l0)
org.joda.time.chrono.GregorianChronology.isLeapYear : $i1 = i0 & 3
org.joda.time.chrono.AssembledChronology.getParam : $r1 = r0.<org.joda.time.chrono.AssembledChronology: java.lang.Object iParam>
org.joda.time.base.BasePartial.getChronology : $r1 = r0.<org.joda.time.base.BasePartial: org.joda.time.Chronology iChronology>
org.joda.time.chrono.BasicChronology.getDayOfWeek : $l9 = l1 + 3L
org.joda.time.chrono.BasicChronology.getDayOfWeek : l1 = l0 / 86400000L
org.joda.time.chrono.BasicChronology.getDayOfWeek : $b2 = l0 cmp 0L
org.joda.time.YearMonthDay.plusDays : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>()
org.joda.time.field.PreciseDateTimeField.get : $b1 = l0 cmp 0L
org.joda.time.field.PreciseDateTimeField.get : $l2 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: long getUnitMillis()>()
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $r2 = <org.joda.time.chrono.BasicGJChronology: int[] MIN_DAYS_PER_MONTH_ARRAY>
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0)
org.joda.time.chrono.EthiopicChronology.getMaxYear : return 292272984
org.joda.time.chrono.BasicFixedMonthChronology.getAverageMillisPerYearDividedByTwo : return 15778800000L
org.joda.time.DateTimeFieldType.hourOfDay : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType HOUR_OF_DAY_TYPE>
org.joda.time.chrono.BasicGJChronology.getDaysInMonthMaxForSet : if i1 <= 28 goto $i2 = 28
org.joda.time.field.BaseDateTimeField.getMinimumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue()>()
org.joda.time.field.BaseDateTimeField.getMinimumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>(r1)
org.joda.time.field.BaseDateTimeField.getMaximumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue()>()
org.joda.time.field.BaseDateTimeField.getMaximumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>(r1)
org.joda.time.field.FieldUtils.safeAdd : l2 = l0 + l1
org.joda.time.field.FieldUtils.safeAdd : $l3 = l0 ^ l2
org.joda.time.field.FieldUtils.safeAdd : return l2
org.joda.time.field.FieldUtils.safeAdd : return i2
org.joda.time.field.FieldUtils.safeAdd : $i3 = i0 ^ i2
org.joda.time.field.FieldUtils.safeAdd : i2 = i0 + i1
org.joda.time.base.BasePartial.getValue : $r1 = r0.<org.joda.time.base.BasePartial: int[] iValues>
org.joda.time.YearMonthDay.size : return 3
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : $b9 = l0 cmp l2
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : $i7 = lengthof r1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : if i1 < 0 goto $i3 = i1 ^ -1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : $i5 = lengthof r1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : i1 = staticinvoke <java.util.Arrays: int binarySearch(long[],long)>(r1, l0)
org.joda.time.DateTimeZone.hashCode : $r1 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getID()>()
org.joda.time.field.FieldUtils.verifyValueBounds : if i0 < i1 goto $r1 = new org.joda.time.IllegalFieldValueException
org.joda.time.chrono.AssembledChronology.dayOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfYear>
org.joda.time.chrono.BasicFixedMonthChronology.getMaxMonth : return 13
org.joda.time.DateMidnight.checkInstant : $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.findMatchingRecurrence : $b6 = l2 cmp l3
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.findMatchingRecurrence : $i4 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>()
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.findMatchingRecurrence : goto [?= $i5 = virtualinvoke r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>()]
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.findMatchingRecurrence : i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset>
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.findMatchingRecurrence : r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence>
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.findMatchingRecurrence : r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence>
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.findMatchingRecurrence : $i5 = virtualinvoke r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>()
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.findMatchingRecurrence : goto [?= $b6 = l2 cmp l3]
org.joda.time.field.BaseDateTimeField.add : i15 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r2)
org.joda.time.field.BaseDateTimeField.add : $i16 = r2[i0]
org.joda.time.field.BaseDateTimeField.add : r3 = null
org.joda.time.field.BaseDateTimeField.add : if i1 >= 0 goto $i28 = r2[i0]
org.joda.time.field.BaseDateTimeField.add : $l19 = (long) i15
org.joda.time.field.BaseDateTimeField.add : if i1 != 0 goto r3 = null
org.joda.time.field.BaseDateTimeField.add : $i21 = (int) l18
org.joda.time.field.BaseDateTimeField.add : goto [?= $i28 = r2[i0]]
org.joda.time.field.BaseDateTimeField.add : $i28 = r2[i0]
org.joda.time.field.BaseDateTimeField.add : $r1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getDurationField()>()
org.joda.time.field.BaseDateTimeField.add : if i1 <= 0 goto (branch)
org.joda.time.chrono.BasicChronology.getYearMillis : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>(i0)
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundFloor : $r2 = virtualinvoke r0.<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DateTimeField getWrappedField()>()
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundFloor : $r3 = r0.<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.chrono.LimitChronology this$0>
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundFloor : return l1
org.joda.time.chrono.LimitChronology$LimitDateTimeField.roundFloor : $r1 = r0.<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.chrono.LimitChronology this$0>
org.joda.time.chrono.GregorianChronology.getApproxMillisAtEpochDividedByTwo : return 31083597720000L
org.joda.time.DateMidnight.withMillis : r1 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>()
org.joda.time.DateMidnight.withMillis : $l2 = virtualinvoke r0.<org.joda.time.DateMidnight: long getMillis()>()
org.joda.time.DateMidnight.withMillis : l1 = virtualinvoke r0.<org.joda.time.DateMidnight: long checkInstant(long,org.joda.time.Chronology)>(l0, r1)
org.joda.time.chrono.EthiopicChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $l7 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>(i0, i1, i2)
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>()
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>()
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $r3 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>()
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $i7 = virtualinvoke $r5.<org.joda.time.chrono.BasicChronology: int getMillisOfDay(long)>(l0)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r4 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : if i3 <= i4 goto $r4 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $i5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.field.DecoratedDateTimeField.getMinimumValue : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.chrono.BasicChronology.getDayOfMonth : i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicChronology.getDayOfMonth : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i1, i2)
org.joda.time.chrono.BasicChronology.getDayOfMonth : $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l0, i1, i2)
org.joda.time.chrono.BasicChronology.getDayOfMonth : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1)
org.joda.time.chrono.BasicChronology.getDayOfMonth : $l6 = l0 - l5
org.joda.time.chrono.BasicChronology.getDayOfMonth : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i1)
org.joda.time.chrono.ZonedChronology.localToUTC : $l2 = (long) i1
org.joda.time.chrono.ZonedChronology.localToUTC : i1 = virtualinvoke r1.<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>(l0)
org.joda.time.chrono.ZonedChronology.localToUTC : r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.ZonedChronology.localToUTC : return l3
org.joda.time.chrono.ZonedChronology.localToUTC : $i4 = virtualinvoke r1.<org.joda.time.DateTimeZone: int getOffset(long)>(l3)
org.joda.time.chrono.BasicChronology.getMillisOfDay : $l2 = l0 % 86400000L
org.joda.time.chrono.BasicChronology.getMillisOfDay : $b1 = l0 cmp 0L
org.joda.time.chrono.BasicChronology.getYear : $b12 = l5 cmp 0L
org.joda.time.chrono.BasicChronology.getYear : $b9 = l2 cmp 0L
org.joda.time.chrono.BasicChronology.getYear : l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i3)
org.joda.time.chrono.BasicChronology.getYear : $l7 = l0 >> 1
org.joda.time.chrono.BasicChronology.getYear : $b13 = l5 cmp 31536000000L
org.joda.time.chrono.BasicChronology.getYear : l5 = l0 - l4
org.joda.time.chrono.BasicChronology.getYear : return i3
org.joda.time.chrono.BasicChronology.getYear : l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getAverageMillisPerYearDividedByTwo()>()
org.joda.time.chrono.BasicChronology.getYear : $l11 = l2 / l1
org.joda.time.chrono.AssembledChronology.weeks : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeeks>
org.joda.time.tz.CachedDateTimeZone.hashCode : $r1 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone>
org.joda.time.YearMonthDay.getDayOfMonth : $i0 = virtualinvoke r0.<org.joda.time.YearMonthDay: int getValue(int)>(2)
org.joda.time.tz.CachedDateTimeZone.createInfo : $b4 = l3 cmp l1
org.joda.time.tz.CachedDateTimeZone.createInfo : l1 = l0 & -4294967296L
org.joda.time.tz.CachedDateTimeZone.createInfo : l2 = l1 | 4294967295L
org.joda.time.tz.CachedDateTimeZone.createInfo : $r5 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone>
org.joda.time.tz.CachedDateTimeZone.createInfo : r2 = r1
org.joda.time.tz.CachedDateTimeZone.createInfo : goto [?= return r1]
org.joda.time.tz.CachedDateTimeZone.createInfo : $r3 = new org.joda.time.tz.CachedDateTimeZone$Info
org.joda.time.tz.CachedDateTimeZone.createInfo : return r1
org.joda.time.DateTimeZone.convertLocalToUTC : $l5 = (long) i2
org.joda.time.DateTimeZone.convertLocalToUTC : i2 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l1)
org.joda.time.DateTimeZone.convertLocalToUTC : return l3
org.joda.time.DateTimeZone.convertLocalToUTC : i4 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l3)
org.joda.time.DateTimeZone.convertLocalToUTC : if i4 != i2 goto $l6 = virtualinvoke r0.<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>(l0, z0)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfMonth>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : return l3
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.chrono.ISOChronology.getInstanceUTC : $r0 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC>
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r7 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r10 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $b0 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: byte iOrdinal>
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r9 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.chrono.BasicFixedMonthChronology.getDaysInMonthMax : return 30
org.joda.time.chrono.GregorianChronology.getMinYear : return -292275054
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.getSaveMillis : $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int iSaveMillis>
org.joda.time.DateTimeUtils$FixedMillisProvider.getMillis : $l0 = r0.<org.joda.time.DateTimeUtils$FixedMillisProvider: long iMillis>
