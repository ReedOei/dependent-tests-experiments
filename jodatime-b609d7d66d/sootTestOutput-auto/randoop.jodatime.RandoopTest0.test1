org.joda.time.chrono.BasicChronology.assemble : $r24 = new org.joda.time.field.OffsetDateTimeField
org.joda.time.chrono.BasicChronology.assemble : $r4 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cSecondsField>
org.joda.time.chrono.BasicChronology.assemble : $r39 = new org.joda.time.chrono.BasicDayOfYearDateTimeField
org.joda.time.chrono.BasicChronology.assemble : $r32 = new org.joda.time.field.OffsetDateTimeField
org.joda.time.chrono.BasicChronology.assemble : $r10 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cMillisOfSecondField>
org.joda.time.chrono.BasicChronology.assemble : $r13 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cSecondOfDayField>
org.joda.time.chrono.BasicChronology.assemble : $r49 = new org.joda.time.field.OffsetDateTimeField
org.joda.time.chrono.BasicChronology.assemble : $r14 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cMinuteOfHourField>
org.joda.time.chrono.BasicChronology.assemble : $r43 = new org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField
org.joda.time.chrono.BasicChronology.assemble : $r42 = new org.joda.time.chrono.BasicWeekyearDateTimeField
org.joda.time.chrono.BasicChronology.assemble : $r57 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear>
org.joda.time.chrono.BasicChronology.assemble : $r17 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cHourOfHalfdayField>
org.joda.time.chrono.BasicChronology.assemble : $r12 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cSecondOfMinuteField>
org.joda.time.chrono.BasicChronology.assemble : $r34 = new org.joda.time.chrono.GJEraDateTimeField
org.joda.time.chrono.BasicChronology.assemble : $r19 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cClockhourOfHalfdayField>
org.joda.time.chrono.BasicChronology.assemble : $r15 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cMinuteOfDayField>
org.joda.time.chrono.BasicChronology.assemble : $r45 = new org.joda.time.field.RemainderDateTimeField
org.joda.time.chrono.BasicChronology.assemble : $r37 = new org.joda.time.chrono.BasicDayOfMonthDateTimeField
org.joda.time.chrono.BasicChronology.assemble : $r35 = new org.joda.time.chrono.GJDayOfWeekDateTimeField
org.joda.time.chrono.BasicChronology.assemble : $r27 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType centuryOfEra()>()
org.joda.time.chrono.BasicChronology.assemble : $r2 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cMillisField>
org.joda.time.chrono.BasicChronology.assemble : $r8 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cDaysField>
org.joda.time.chrono.BasicChronology.assemble : $r16 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cHourOfDayField>
org.joda.time.chrono.BasicChronology.assemble : $r50 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>()
org.joda.time.chrono.BasicChronology.assemble : $r41 = new org.joda.time.chrono.GJMonthOfYearDateTimeField
org.joda.time.chrono.BasicChronology.assemble : $r11 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cMillisOfDayField>
org.joda.time.chrono.BasicChronology.assemble : $r26 = new org.joda.time.field.DividedDateTimeField
org.joda.time.chrono.BasicChronology.assemble : $r7 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cHalfdaysField>
org.joda.time.chrono.BasicChronology.assemble : $r55 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear>
org.joda.time.chrono.BasicChronology.assemble : $r18 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cClockhourOfDayField>
org.joda.time.chrono.BasicChronology.assemble : $r51 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year>
org.joda.time.chrono.BasicChronology.assemble : $r47 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>()
org.joda.time.chrono.BasicChronology.assemble : $r6 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cHoursField>
org.joda.time.chrono.BasicChronology.assemble : $r53 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra>
org.joda.time.chrono.BasicChronology.assemble : $r21 = new org.joda.time.chrono.BasicYearDateTimeField
org.joda.time.chrono.BasicChronology.assemble : $r22 = new org.joda.time.chrono.GJYearOfEraDateTimeField
org.joda.time.chrono.BasicChronology.assemble : $r9 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cWeeksField>
org.joda.time.chrono.BasicChronology.assemble : $r20 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cHalfdayOfDayField>
org.joda.time.chrono.BasicChronology.assemble : $r28 = new org.joda.time.field.RemainderDateTimeField
org.joda.time.chrono.BasicChronology.assemble : $r33 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfCentury()>()
org.joda.time.chrono.BasicChronology.assemble : $r5 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cMinutesField>
org.joda.time.tz.CachedDateTimeZone.forZone : $z0 = r0 instanceof org.joda.time.tz.CachedDateTimeZone
org.joda.time.tz.CachedDateTimeZone.forZone : $r2 = new org.joda.time.tz.CachedDateTimeZone
org.joda.time.DateTimeFieldType.monthOfYear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MONTH_OF_YEAR_TYPE>
org.joda.time.chrono.BasicChronology.getMaxMonth : return 12
org.joda.time.field.UnsupportedDurationField.getInstance : $r4 = <org.joda.time.field.UnsupportedDurationField: java.util.HashMap cCache>
org.joda.time.field.UnsupportedDurationField.getInstance : return r2
org.joda.time.field.UnsupportedDurationField.getInstance : $r6 = new org.joda.time.field.UnsupportedDurationField
org.joda.time.field.UnsupportedDurationField.getInstance : $r7 = <org.joda.time.field.UnsupportedDurationField: java.util.HashMap cCache>
org.joda.time.field.UnsupportedDurationField.getInstance : $r1 = <org.joda.time.field.UnsupportedDurationField: java.util.HashMap cCache>
org.joda.time.field.UnsupportedDurationField.getInstance : if r2 != null goto return r2
org.joda.time.field.UnsupportedDurationField.getInstance : r2 = null
org.joda.time.field.UnsupportedDurationField.getInstance : $r3 = new java.util.HashMap
org.joda.time.DateTimeZone.getID : $r1 = r0.<org.joda.time.DateTimeZone: java.lang.String iID>
org.joda.time.DateTimeFieldType.yearOfCentury : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType YEAR_OF_CENTURY_TYPE>
org.joda.time.DateTimeFieldType.yearOfEra : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType YEAR_OF_ERA_TYPE>
org.joda.time.DateTimeFieldType.millisOfDay : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MILLIS_OF_DAY_TYPE>
org.joda.time.field.PreciseDurationDateTimeField.getDurationField : $r1 = r0.<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField iUnitField>
org.joda.time.DateTimeFieldType.secondOfMinute : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType SECOND_OF_MINUTE_TYPE>
org.joda.time.field.OffsetDateTimeField.getMinimumValue : $i0 = r0.<org.joda.time.field.OffsetDateTimeField: int iMin>
org.joda.time.chrono.AssembledChronology.dayOfWeek : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfWeek>
org.joda.time.chrono.GJYearOfEraDateTimeField.getMaximumValue : $r1 = virtualinvoke r0.<org.joda.time.chrono.GJYearOfEraDateTimeField: org.joda.time.DateTimeField getWrappedField()>()
org.joda.time.tz.ZoneInfoProvider.getAvailableIDs : $r1 = new java.util.TreeSet
org.joda.time.Interval.parse : $r1 = new org.joda.time.Interval
org.joda.time.DateTimeZone.getDefault : r7 = $r6
org.joda.time.DateTimeZone.getDefault : r0 = r2
org.joda.time.DateTimeZone.getDefault : if r3 == null goto (branch)
org.joda.time.DateTimeZone.getDefault : r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.timezone")
org.joda.time.DateTimeZone.getDefault : $r8 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>()
org.joda.time.DateTimeZone.getDefault : if r2 != null goto r0 = r2
org.joda.time.DateTimeZone.getDefault : if r0 != null goto exitmonitor r1
org.joda.time.DateTimeZone.getDefault : $r5 = class "org/joda/time/DateTimeZone"
org.joda.time.DateTimeZone.getDefault : if r2 != null goto (branch)
org.joda.time.DateTimeZone.getDefault : exitmonitor r1
org.joda.time.DateTimeZone.getDefault : if r0 != null goto return r0
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : r2 = null
org.joda.time.DateTimeZone.getDefault : goto [?= (branch)]
org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.DateTimeZone.getDefault : r2 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>(r3)
org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.convert.StringConverter.getSupportedType : return class "java/lang/String"
org.joda.time.DateTimeFieldType.dayOfYear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType DAY_OF_YEAR_TYPE>
org.joda.time.field.BaseDateTimeField.getType : $r1 = r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType iType>
org.joda.time.DateTimeFieldType.dayOfWeek : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType DAY_OF_WEEK_TYPE>
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getUnitMillis : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DurationField iField>
org.joda.time.DateTimeFieldType.weekyear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType WEEKYEAR_TYPE>
org.joda.time.chrono.ISOChronology.withUTC : $r1 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC>
org.joda.time.field.BaseDurationField.getType : $r1 = r0.<org.joda.time.field.BaseDurationField: org.joda.time.DurationFieldType iType>
org.joda.time.DateTimeFieldType.clockhourOfHalfday : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType CLOCKHOUR_OF_HALFDAY_TYPE>
org.joda.time.base.AbstractInterval.checkInterval : $b2 = l1 cmp l0
org.joda.time.chrono.AssembledChronology.minuteOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfDay>
org.joda.time.chrono.GregorianChronology.getMaxYear : return 292278993
org.joda.time.tz.ZoneInfoProvider.readZoneInfoMap : $i4 = virtualinvoke r0.<java.io.DataInputStream: int readUnsignedShort()>()
org.joda.time.tz.ZoneInfoProvider.readZoneInfoMap : i1 = 0
org.joda.time.tz.ZoneInfoProvider.readZoneInfoMap : goto [?= i3 = i3 + 1]
org.joda.time.tz.ZoneInfoProvider.readZoneInfoMap : i3 = 0
org.joda.time.tz.ZoneInfoProvider.readZoneInfoMap : i2 = virtualinvoke r0.<java.io.DataInputStream: int readUnsignedShort()>()
org.joda.time.tz.ZoneInfoProvider.readZoneInfoMap : i0 = virtualinvoke r0.<java.io.DataInputStream: int readUnsignedShort()>()
org.joda.time.tz.ZoneInfoProvider.readZoneInfoMap : $r4 = virtualinvoke r0.<java.io.DataInputStream: java.lang.String readUTF()>()
org.joda.time.tz.ZoneInfoProvider.readZoneInfoMap : r2 = newarray (java.lang.String)[i0]
org.joda.time.chrono.AssembledChronology.millisOfSecond : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfSecond>
org.joda.time.tz.ZoneInfoProvider.loadZoneInfoMap : return r2
org.joda.time.tz.ZoneInfoProvider.loadZoneInfoMap : virtualinvoke r3.<java.io.DataInputStream: void close()>()
org.joda.time.tz.ZoneInfoProvider.loadZoneInfoMap : $r12 = new java.lang.ref.SoftReference
org.joda.time.tz.ZoneInfoProvider.loadZoneInfoMap : staticinvoke <org.joda.time.tz.ZoneInfoProvider: void readZoneInfoMap(java.io.DataInputStream,java.util.Map)>(r3, r2)
org.joda.time.tz.ZoneInfoProvider.loadZoneInfoMap : $r8 = new java.io.DataInputStream
org.joda.time.tz.ZoneInfoProvider.loadZoneInfoMap : $r1 = new java.util.concurrent.ConcurrentHashMap
org.joda.time.tz.ZoneInfoProvider.loadZoneInfoMap : goto [?= $r12 = new java.lang.ref.SoftReference]
org.joda.time.chrono.AssembledChronology.millisOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay>
org.joda.time.field.MillisDurationField.getUnitMillis : return 1L
org.joda.time.DurationFieldType.seconds : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType SECONDS_TYPE>
org.joda.time.chrono.GregorianChronology.getAverageMillisPerYear : return 31556952000L
org.joda.time.field.PreciseDurationField.isPrecise : return 1
org.joda.time.DateTimeFieldType.clockhourOfDay : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType CLOCKHOUR_OF_DAY_TYPE>
org.joda.time.DateTimeFieldType.millisOfSecond : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MILLIS_OF_SECOND_TYPE>
org.joda.time.chrono.AssembledChronology.halfdays : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHalfdays>
org.joda.time.tz.ZoneInfoProvider.loadZoneData : r2 = specialinvoke r0.<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>(r1)
org.joda.time.tz.ZoneInfoProvider.loadZoneData : goto [?= return r5]
org.joda.time.tz.ZoneInfoProvider.loadZoneData : if r2 == null goto (branch)
org.joda.time.tz.ZoneInfoProvider.loadZoneData : r5 = r3
org.joda.time.tz.ZoneInfoProvider.loadZoneData : r3 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.InputStream,java.lang.String)>(r2, r1)
org.joda.time.tz.ZoneInfoProvider.loadZoneData : virtualinvoke r2.<java.io.InputStream: void close()>()
org.joda.time.tz.ZoneInfoProvider.loadZoneData : r2 = null
org.joda.time.tz.ZoneInfoProvider.loadZoneData : $r9 = r0.<org.joda.time.tz.ZoneInfoProvider: java.util.Map iZoneInfoMap>
org.joda.time.chrono.GJEraDateTimeField.getDurationField : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType eras()>()
org.joda.time.chrono.GregorianChronology.getInstanceUTC : $r0 = <org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology INSTANCE_UTC>
org.joda.time.DurationFieldType.minutes : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MINUTES_TYPE>
org.joda.time.field.PreciseDurationDateTimeField.getMinimumValue : return 0
org.joda.time.chrono.ISOChronology.getInstance : return r10
org.joda.time.chrono.ISOChronology.getInstance : $r11 = new org.joda.time.chrono.ISOChronology
org.joda.time.chrono.ISOChronology.getInstance : exitmonitor r2
org.joda.time.chrono.ISOChronology.getInstance : if r10 != null goto exitmonitor r2
org.joda.time.chrono.ISOChronology.getInstance : $r8 = <org.joda.time.chrono.ISOChronology: java.util.Map cCache>
org.joda.time.chrono.ISOChronology.getInstance : $r13 = <org.joda.time.chrono.ISOChronology: java.util.Map cCache>
org.joda.time.chrono.ISOChronology.getInstance : if r0 != null goto $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0)
org.joda.time.chrono.ISOChronology.getInstance : $r16 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache>
org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0)
org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache>
org.joda.time.chrono.ISOChronology.getInstance : $r7 = <org.joda.time.chrono.ISOChronology: java.util.Map cCache>
org.joda.time.chrono.ISOChronology.getInstance : if r1 == null goto $r7 = <org.joda.time.chrono.ISOChronology: java.util.Map cCache>
org.joda.time.chrono.ISOChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>()
org.joda.time.chrono.AssembledChronology.yearOfEra : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfEra>
org.joda.time.chrono.AssembledChronology.eras : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iEras>
org.joda.time.chrono.AssembledChronology.months : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMonths>
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.field.RemainderDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField iRangeField>
org.joda.time.DateTimeFieldType.minuteOfDay : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MINUTE_OF_DAY_TYPE>
org.joda.time.DateTimeFieldType.minuteOfHour : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MINUTE_OF_HOUR_TYPE>
org.joda.time.chrono.BasicWeekyearDateTimeField.getRangeDurationField : return null
org.joda.time.chrono.BaseChronology.eras : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType eras()>()
org.joda.time.chrono.AssembledChronology.yearOfCentury : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfCentury>
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getDurationType : $r1 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DurationFieldType iUnitType>
org.joda.time.chrono.BasicYearDateTimeField.getRangeDurationField : return null
org.joda.time.field.BaseDateTimeField.isSupported : return 1
org.joda.time.chrono.ISOYearOfEraDateTimeField.getMinimumValue : return 0
org.joda.time.DurationFieldType.millis : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MILLIS_TYPE>
org.joda.time.chrono.AssembledChronology.getParam : $r1 = r0.<org.joda.time.chrono.AssembledChronology: java.lang.Object iParam>
org.joda.time.chrono.BasicChronology.access$000 : $r0 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cHalfdaysField>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.convert.ConverterSet.select : return r4
org.joda.time.convert.ConverterSet.select : $r6 = r2[i1]
org.joda.time.convert.ConverterSet.select : if r1 != null goto $i5 = virtualinvoke r1.<java.lang.Object: int hashCode()>()
org.joda.time.convert.ConverterSet.select : r2 = r0.<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet$Entry[] iSelectEntries>
org.joda.time.convert.ConverterSet.select : $r14 = r13[i2]
org.joda.time.convert.ConverterSet.select : r4 = staticinvoke <org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter selectSlow(org.joda.time.convert.ConverterSet,java.lang.Class)>(r0, r1)
org.joda.time.convert.ConverterSet.select : $r11 = virtualinvoke r2.<java.lang.Object: java.lang.Object clone()>()
org.joda.time.convert.ConverterSet.select : r0.<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet$Entry[] iSelectEntries> = r13
org.joda.time.convert.ConverterSet.select : i0 = lengthof r2
org.joda.time.convert.ConverterSet.select : i2 = 0
org.joda.time.convert.ConverterSet.select : $r9 = new org.joda.time.convert.ConverterSet$Entry
org.joda.time.convert.ConverterSet.select : r13[i1] = r10
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getLeapDurationField : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.GJDayOfWeekDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.chrono.GJDayOfWeekDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.tz.FixedDateTimeZone.equals : return 1
org.joda.time.tz.FixedDateTimeZone.equals : if r0 != r1 goto $z0 = r1 instanceof org.joda.time.tz.FixedDateTimeZone
org.joda.time.chrono.BasicChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.BasicChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>
org.joda.time.chrono.AssembledChronology.halfdayOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHalfdayOfDay>
org.joda.time.tz.DefaultNameProvider.createCache : $r1 = new java.util.HashMap
org.joda.time.chrono.ZonedChronology.useTimeArithmetic : if r0 == null goto $z0 = 0
org.joda.time.chrono.BasicYearDateTimeField.getLeapDurationField : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.AssembledChronology.dayOfMonth : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth>
org.joda.time.chrono.AssembledChronology.centuries : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iCenturies>
org.joda.time.DurationFieldType.weekyears : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType WEEKYEARS_TYPE>
org.joda.time.tz.DateTimeZoneBuilder.readFrom : $r6 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>(r0, r1)
org.joda.time.tz.DateTimeZoneBuilder.readFrom : $r4 = new java.io.DataInputStream
org.joda.time.tz.DateTimeZoneBuilder.readFrom : $i0 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>()
org.joda.time.tz.DateTimeZoneBuilder.readFrom : $z0 = r0 instanceof java.io.DataInput
org.joda.time.chrono.BasicChronology.access$100 : $r0 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cDaysField>
org.joda.time.chrono.AssembledChronology.weekyear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyear>
org.joda.time.chrono.ZonedChronology.getZone : $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: java.lang.Object getParam()>()
org.joda.time.chrono.AssembledChronology.weekyearOfCentury : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyearOfCentury>
org.joda.time.chrono.AssembledChronology.hours : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHours>
org.joda.time.DateTimeZone.setNameProvider0 : <org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider cNameProvider> = r0
org.joda.time.DateTimeZone.setNameProvider0 : if r0 != null goto <org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider cNameProvider> = r0
org.joda.time.DateTimeZone.setNameProvider0 : r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider getDefaultNameProvider()>()
org.joda.time.chrono.AssembledChronology.clockhourOfHalfday : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfHalfday>
org.joda.time.chrono.AssembledChronology.years : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iYears>
org.joda.time.tz.ZoneInfoProvider.openResource : return r3
org.joda.time.tz.ZoneInfoProvider.openResource : $r10 = r0.<org.joda.time.tz.ZoneInfoProvider: java.lang.ClassLoader iLoader>
org.joda.time.tz.ZoneInfoProvider.openResource : $r9 = r0.<org.joda.time.tz.ZoneInfoProvider: java.lang.String iResourcePath>
org.joda.time.tz.ZoneInfoProvider.openResource : $r6 = r0.<org.joda.time.tz.ZoneInfoProvider: java.io.File iFileDir>
org.joda.time.tz.ZoneInfoProvider.openResource : if r3 != null goto return r3
org.joda.time.tz.ZoneInfoProvider.openResource : $r11 = r0.<org.joda.time.tz.ZoneInfoProvider: java.lang.ClassLoader iLoader>
org.joda.time.DateTimeFieldType.hourOfDay : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType HOUR_OF_DAY_TYPE>
org.joda.time.DateTimeUtils.getChronology : if r0 != null goto return r0
org.joda.time.DateTimeUtils.getChronology : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>()
org.joda.time.field.DecoratedDateTimeField.getWrappedField : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.convert.StringConverter.setInto : i0 = virtualinvoke r4.<java.lang.String: int indexOf(int)>(47)
org.joda.time.convert.StringConverter.setInto : r4 = (java.lang.String) r2
org.joda.time.convert.StringConverter.setInto : $r13 = new java.lang.IllegalArgumentException
org.joda.time.convert.StringConverter.setInto : if i0 >= 0 goto r6 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int,int)>(0, i0)
org.joda.time.chrono.AssembledChronology.era : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iEra>
org.joda.time.DurationFieldType.months : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MONTHS_TYPE>
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.readFrom : $r2 = new org.joda.time.tz.DateTimeZoneBuilder$DSTZone
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.readFrom : $r3 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence readFrom(java.io.DataInput)>(r0)
org.joda.time.chrono.ISOChronology.assemble : $r5 = virtualinvoke r0.<org.joda.time.chrono.ISOChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.ISOChronology.assemble : $r8 = new org.joda.time.field.RemainderDateTimeField
org.joda.time.chrono.ISOChronology.assemble : $r7 = new org.joda.time.field.DividedDateTimeField
org.joda.time.chrono.ISOChronology.assemble : $r16 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra>
org.joda.time.chrono.ISOChronology.assemble : $r12 = new org.joda.time.field.RemainderDateTimeField
org.joda.time.chrono.ISOChronology.assemble : $r15 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>()
org.joda.time.chrono.ISOChronology.assemble : $r11 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfCentury()>()
org.joda.time.chrono.ISOChronology.assemble : $r4 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType centuryOfEra()>()
org.joda.time.chrono.AssembledChronology.millis : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMillis>
org.joda.time.field.MillisDurationField.isSupported : return 1
org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.ZonedChronology.convertField : $z1 = virtualinvoke r2.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r1)
org.joda.time.chrono.ZonedChronology.convertField : return r3
org.joda.time.chrono.ZonedChronology.convertField : $r10 = virtualinvoke r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getRangeDurationField()>()
org.joda.time.chrono.ZonedChronology.convertField : $r7 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.ZonedChronology.convertField : $r6 = new org.joda.time.chrono.ZonedChronology$ZonedDateTimeField
org.joda.time.chrono.ZonedChronology.convertField : virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3)
org.joda.time.chrono.ZonedChronology.convertField : $r12 = virtualinvoke r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getLeapDurationField()>()
org.joda.time.chrono.ZonedChronology.convertField : $r6 = new org.joda.time.chrono.ZonedChronology$ZonedDurationField
org.joda.time.chrono.ZonedChronology.convertField : return r1
org.joda.time.chrono.ZonedChronology.convertField : $r4 = virtualinvoke r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1)
org.joda.time.chrono.ZonedChronology.convertField : $r8 = virtualinvoke r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>()
org.joda.time.chrono.ZonedChronology.convertField : if r1 == null goto return r1
org.joda.time.chrono.AssembledChronology.weekOfWeekyear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekOfWeekyear>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.readFrom : $z0 = interfaceinvoke r0.<java.io.DataInput: boolean readBoolean()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.readFrom : $i2 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.readFrom : $i4 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.readFrom : $b3 = interfaceinvoke r0.<java.io.DataInput: byte readByte()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.readFrom : $l5 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>(r0)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.readFrom : $r1 = new org.joda.time.tz.DateTimeZoneBuilder$OfYear
org.joda.time.chrono.AssembledChronology.year : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear>
org.joda.time.convert.AbstractConverter.isReadableInterval : return 0
org.joda.time.chrono.AssembledChronology.secondOfMinute : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfMinute>
org.joda.time.chrono.GJYearOfEraDateTimeField.getMinimumValue : return 1
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.readFrom : $r1 = new org.joda.time.tz.DateTimeZoneBuilder$Recurrence
org.joda.time.convert.ConverterSet.remove : $r7 = new org.joda.time.convert.ConverterSet
org.joda.time.convert.ConverterSet.remove : $i4 = i1 - 1
org.joda.time.convert.ConverterSet.remove : if i3 == i0 goto i3 = i3 + 1
org.joda.time.convert.ConverterSet.remove : i3 = 0
org.joda.time.convert.ConverterSet.remove : i2 = 0
org.joda.time.convert.ConverterSet.remove : if r1 == null goto $i4 = i1 - 1
org.joda.time.convert.ConverterSet.remove : $i5 = i2
org.joda.time.convert.ConverterSet.remove : r2 = r0.<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter[] iConverters>
org.joda.time.convert.ConverterSet.remove : if i0 < i1 goto (branch)
org.joda.time.convert.ConverterSet.remove : i1 = lengthof r2
org.joda.time.field.ScaledDurationField.getUnitMillis : $r1 = virtualinvoke r0.<org.joda.time.field.ScaledDurationField: org.joda.time.DurationField getWrappedField()>()
org.joda.time.DateTimeZone.hashCode : $r1 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getID()>()
org.joda.time.chrono.AssembledChronology.weekyears : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeekyears>
org.joda.time.convert.ConverterSet.selectSlow : return r3
org.joda.time.convert.ConverterSet.selectSlow : if r4 == null goto r0 = virtualinvoke r0.<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet remove(int,org.joda.time.convert.Converter[])>(i1, null)
org.joda.time.convert.ConverterSet.selectSlow : r0 = virtualinvoke r0.<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet remove(int,org.joda.time.convert.Converter[])>(i1, null)
org.joda.time.convert.ConverterSet.selectSlow : i0 = lengthof r2
org.joda.time.convert.ConverterSet.selectSlow : r4 = interfaceinvoke r3.<org.joda.time.convert.Converter: java.lang.Class getSupportedType()>()
org.joda.time.convert.ConverterSet.selectSlow : r3 = r2[i1]
org.joda.time.convert.ConverterSet.selectSlow : i1 = i0
org.joda.time.convert.ConverterSet.selectSlow : r2 = r0.<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter[] iConverters>
org.joda.time.convert.ConverterSet.selectSlow : if r4 != r1 goto (branch)
org.joda.time.convert.ConverterSet.selectSlow : goto [?= i1 = i1 + -1]
org.joda.time.chrono.BasicDayOfYearDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.chrono.BasicDayOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.field.RemainderDateTimeField.getMinimumValue : return 0
org.joda.time.chrono.AssembledChronology.dayOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfYear>
org.joda.time.DateTimeFieldType.weekOfWeekyear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType WEEK_OF_WEEKYEAR_TYPE>
org.joda.time.chrono.GregorianChronology.getInstance : $i1 = i0 - 1
org.joda.time.chrono.GregorianChronology.getInstance : $r18 = new org.joda.time.chrono.GregorianChronology
org.joda.time.chrono.GregorianChronology.getInstance : return r3
org.joda.time.chrono.GregorianChronology.getInstance : $r7 = <org.joda.time.chrono.GregorianChronology: java.util.Map cCache>
org.joda.time.chrono.GregorianChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>(r0, 4)
org.joda.time.chrono.GregorianChronology.getInstance : if r0 != null goto $r6 = <org.joda.time.chrono.GregorianChronology: java.util.Map cCache>
org.joda.time.chrono.GregorianChronology.getInstance : $r6 = <org.joda.time.chrono.GregorianChronology: java.util.Map cCache>
org.joda.time.chrono.GregorianChronology.getInstance : $r17 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>
org.joda.time.chrono.GregorianChronology.getInstance : $r9 = <org.joda.time.chrono.GregorianChronology: java.util.Map cCache>
org.joda.time.chrono.GregorianChronology.getInstance : if r3 != null goto exitmonitor r1
org.joda.time.chrono.GregorianChronology.getInstance : if r2 != null goto $i1 = i0 - 1
org.joda.time.chrono.GregorianChronology.getInstance : exitmonitor r1
org.joda.time.chrono.GregorianChronology.getInstance : $i2 = i0 - 1
org.joda.time.chrono.GregorianChronology.getInstance : r2 = newarray (org.joda.time.chrono.GregorianChronology)[7]
org.joda.time.chrono.GregorianChronology.getInstance : goto [?= (branch)]
org.joda.time.field.MillisDurationField.hashCode : $l0 = virtualinvoke r0.<org.joda.time.field.MillisDurationField: long getUnitMillis()>()
org.joda.time.chrono.GregorianChronology.assemble : specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>(r1)
org.joda.time.chrono.GregorianChronology.assemble : $r2 = virtualinvoke r0.<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology getBase()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.hashCode : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal>
org.joda.time.DurationFieldType.centuries : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType CENTURIES_TYPE>
org.joda.time.tz.FixedDateTimeZone.hashCode : $r1 = virtualinvoke r0.<org.joda.time.tz.FixedDateTimeZone: java.lang.String getID()>()
org.joda.time.chrono.BasicWeekyearDateTimeField.getLeapDurationField : $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.AssembledChronology$Fields.isSupported : if r0 != null goto $z0 = virtualinvoke r0.<org.joda.time.DurationField: boolean isSupported()>()
org.joda.time.chrono.AssembledChronology$Fields.isSupported : if r0 != null goto $z0 = virtualinvoke r0.<org.joda.time.DateTimeField: boolean isSupported()>()
org.joda.time.chrono.AssembledChronology.centuryOfEra : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iCenturyOfEra>
org.joda.time.DurationFieldType.years : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType YEARS_TYPE>
org.joda.time.DateTimeZone.getDefaultNameProvider : if r0 != null goto return r0
org.joda.time.DateTimeZone.getDefaultNameProvider : r0 = null
org.joda.time.DateTimeZone.getDefaultNameProvider : $r10 = new org.joda.time.tz.DefaultNameProvider
org.joda.time.DateTimeZone.getDefaultNameProvider : goto [?= (branch)]
org.joda.time.DateTimeZone.getDefaultNameProvider : if r1 == null goto (branch)
org.joda.time.DateTimeZone.getDefaultNameProvider : return r0
org.joda.time.DateTimeZone.getDefaultNameProvider : r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("org.joda.time.DateTimeZone.NameProvider")
org.joda.time.field.DecoratedDurationField.getWrappedField : $r1 = r0.<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField iField>
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> = r71
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> = r57
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField hours> = r9
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r70 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField era()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r28 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear> = r53
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r16 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField weekyears()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond> = r27
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> = r63
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday> = r45
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries> = r23
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r44 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField clockhourOfHalfday()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear> = r55
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay> = r33
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField seconds()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r66 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField yearOfCentury()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r62 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years> = r21
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days> = r13
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> = r69
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek> = r49
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> = r65
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField millis()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour> = r35
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay> = r39
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> = r61
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> = r59
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField minutes> = r7
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> = r67
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r22 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField centuries()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth> = r51
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r46 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField halfdayOfDay()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r30 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r10 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField halfdays()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay> = r47
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r64 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField yearOfEra()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay> = r37
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r56 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekyear()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r18 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField months()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r6 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField minutes()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r26 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r34 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay> = r41
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r48 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r50 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r38 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r60 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r52 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfYear()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears> = r17
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r8 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField hours()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weeks> = r15
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r40 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField clockhourOfDay()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r32 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfDay()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField halfdays> = r11
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r68 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField centuryOfEra()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months> = r19
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r36 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfDay()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r58 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekyearOfCentury()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r14 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField weeks()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r12 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField days()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday> = r43
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r24 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField eras()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute> = r31
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r42 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfHalfday()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField seconds> = r5
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r54 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekOfWeekyear()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField millis> = r2
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay> = r29
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r20 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField years()>()
org.joda.time.DateTimeFieldType.centuryOfEra : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType CENTURY_OF_ERA_TYPE>
org.joda.time.DurationFieldType.weeks : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType WEEKS_TYPE>
org.joda.time.DurationFieldType.hours : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType HOURS_TYPE>
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $i29 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>()
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $i33 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>()
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $l19 = (long) i0
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $i25 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>()
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $i9 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>()
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $i2 = i0 >> 6
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $i15 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>()
org.joda.time.tz.DateTimeZoneBuilder.readMillis : i0 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>()
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $l5 = (long) i4
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $i12 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>()
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $i21 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>()
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $l17 = (long) i16
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $i3 = i0 << 26
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $l37 = interfaceinvoke r0.<java.io.DataInput: long readLong()>()
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $l36 = l35 * 1000L
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $i7 = i0 << 26
org.joda.time.convert.ConverterManager.getInstance : $r1 = new org.joda.time.convert.ConverterManager
org.joda.time.convert.ConverterManager.getInstance : $r2 = <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager INSTANCE>
org.joda.time.convert.ConverterManager.getInstance : $r0 = <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager INSTANCE>
org.joda.time.chrono.AssembledChronology.hourOfHalfday : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfHalfday>
org.joda.time.field.DecoratedDateTimeField.getDurationField : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.chrono.GJEraDateTimeField.getRangeDurationField : return null
org.joda.time.field.ImpreciseDateTimeField.getDurationField : $r1 = r0.<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField iDurationField>
org.joda.time.DurationFieldType.halfdays : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType HALFDAYS_TYPE>
org.joda.time.DateTimeFieldType.era : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType ERA_TYPE>
org.joda.time.field.UnsupportedDurationField.isSupported : return 0
org.joda.time.DateTimeZone.getConvertedId : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("PST", "America/Los_Angeles")
org.joda.time.DateTimeZone.getConvertedId : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("AET", "Australia/Sydney")
org.joda.time.DateTimeZone.getConvertedId : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("AGT", "America/Argentina/Buenos_Aires")
org.joda.time.DateTimeZone.getConvertedId : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("GMT", "UTC")
org.joda.time.DateTimeZone.getConvertedId : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("CNT", "America/St_Johns")
org.joda.time.DateTimeZone.getConvertedId : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("MST", "America/Denver")
org.joda.time.DateTimeZone.getConvertedId : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("JST", "Asia/Tokyo")
org.joda.time.DateTimeZone.getConvertedId : <org.joda.time.DateTimeZone: java.util.Map cZoneIdConversion> = r1
org.joda.time.DateTimeZone.getConvertedId : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("PNT", "America/Phoenix")
org.joda.time.DateTimeZone.getConvertedId : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("PLT", "Asia/Karachi")
org.joda.time.DateTimeZone.getConvertedId : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("NST", "Pacific/Auckland")
org.joda.time.DateTimeZone.getConvertedId : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("MIT", "Pacific/Apia")
org.joda.time.DateTimeZone.getConvertedId : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("CET", "CET")
org.joda.time.DateTimeZone.getConvertedId : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("HST", "Pacific/Honolulu")
org.joda.time.DateTimeZone.getConvertedId : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("EET", "EET")
org.joda.time.DateTimeZone.getConvertedId : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("SST", "Pacific/Guadalcanal")
org.joda.time.DateTimeZone.getConvertedId : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("EST", "America/New_York")
org.joda.time.DateTimeZone.getConvertedId : r1 = <org.joda.time.DateTimeZone: java.util.Map cZoneIdConversion>
org.joda.time.DateTimeZone.getConvertedId : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("PRT", "America/Puerto_Rico")
org.joda.time.DateTimeZone.getConvertedId : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("MET", "CET")
org.joda.time.DateTimeZone.getConvertedId : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("IST", "Asia/Kolkata")
org.joda.time.DateTimeZone.getConvertedId : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("BET", "America/Sao_Paulo")
org.joda.time.DateTimeZone.getConvertedId : if r1 != null goto $r36 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0)
org.joda.time.DateTimeZone.getConvertedId : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("EAT", "Africa/Addis_Ababa")
org.joda.time.DateTimeZone.getConvertedId : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("VST", "Asia/Ho_Chi_Minh")
org.joda.time.DateTimeZone.getConvertedId : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("AST", "America/Anchorage")
org.joda.time.DateTimeZone.getConvertedId : $r36 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0)
org.joda.time.DateTimeZone.getConvertedId : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ECT", "CET")
org.joda.time.DateTimeZone.getConvertedId : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("BST", "Asia/Dhaka")
org.joda.time.DateTimeZone.getConvertedId : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("CST", "America/Chicago")
org.joda.time.DateTimeZone.getConvertedId : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ART", "Africa/Cairo")
org.joda.time.DateTimeZone.getConvertedId : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("CTT", "Asia/Shanghai")
org.joda.time.DateTimeZone.getConvertedId : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("ACT", "Australia/Darwin")
org.joda.time.DateTimeZone.getConvertedId : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("CAT", "Africa/Harare")
org.joda.time.DateTimeZone.getConvertedId : $r2 = new java.util.HashMap
org.joda.time.DateTimeZone.getConvertedId : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("IET", "America/Indiana/Indianapolis")
org.joda.time.DateTimeZone.getConvertedId : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("NET", "Asia/Yerevan")
org.joda.time.DateTimeZone.getConvertedId : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("WET", "WET")
org.joda.time.DateTimeFieldType.weekyearOfCentury : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType WEEKYEAR_OF_CENTURY_TYPE>
org.joda.time.DateTimeZone.forTimeZone : return r2
org.joda.time.DateTimeZone.forTimeZone : if r2 == null goto (branch)
org.joda.time.DateTimeZone.forTimeZone : if r3 == null goto (branch)
org.joda.time.DateTimeZone.forTimeZone : $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("UTC")
org.joda.time.DateTimeZone.forTimeZone : r1 = virtualinvoke r0.<java.util.TimeZone: java.lang.String getID()>()
org.joda.time.DateTimeZone.forTimeZone : r3 = staticinvoke <org.joda.time.DateTimeZone: java.lang.String getConvertedId(java.lang.String)>(r1)
org.joda.time.DateTimeZone.forTimeZone : if r0 != null goto r1 = virtualinvoke r0.<java.util.TimeZone: java.lang.String getID()>()
org.joda.time.DateTimeZone.forTimeZone : r2 = null
org.joda.time.DateTimeZone.forTimeZone : $r7 = <org.joda.time.DateTimeZone: org.joda.time.tz.Provider cProvider>
org.joda.time.DateTimeZone.forTimeZone : if r2 != null goto (branch)
org.joda.time.field.MillisDurationField.isPrecise : return 1
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getRangeDurationType : $r1 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DurationFieldType iRangeType>
org.joda.time.field.PreciseDurationField.hashCode : $l2 = l0 >>> 32
org.joda.time.field.PreciseDurationField.hashCode : l0 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis>
org.joda.time.field.PreciseDurationField.hashCode : $r1 = virtualinvoke r0.<org.joda.time.field.PreciseDurationField: org.joda.time.DurationFieldType getType()>()
org.joda.time.field.PreciseDurationField.hashCode : return i5
org.joda.time.chrono.ZonedChronology.getInstance : if r3 != null goto (branch)
org.joda.time.chrono.ZonedChronology.getInstance : r3 = virtualinvoke r0.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>()
org.joda.time.chrono.ZonedChronology.getInstance : $r6 = new org.joda.time.chrono.ZonedChronology
org.joda.time.chrono.ZonedChronology.getInstance : if r1 != null goto $r6 = new org.joda.time.chrono.ZonedChronology
org.joda.time.chrono.ZonedChronology.getInstance : if r0 != null goto r3 = virtualinvoke r0.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>()
org.joda.time.DateTimeZone.forID : $r8 = new java.lang.IllegalArgumentException
org.joda.time.DateTimeZone.forID : $z1 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("+")
org.joda.time.DateTimeZone.forID : if r0 != null goto $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("UTC")
org.joda.time.DateTimeZone.forID : $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("UTC")
org.joda.time.DateTimeZone.forID : if r1 == null goto $z1 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("+")
org.joda.time.DateTimeZone.forID : $r4 = <org.joda.time.DateTimeZone: org.joda.time.tz.Provider cProvider>
org.joda.time.DateTimeFieldType.hourOfHalfday : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType HOUR_OF_HALFDAY_TYPE>
org.joda.time.field.PreciseDurationField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis>
org.joda.time.DateTimeFieldType.secondOfDay : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType SECOND_OF_DAY_TYPE>
org.joda.time.DateTimeFieldType.year : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType YEAR_TYPE>
org.joda.time.chrono.GregorianChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.tz.ZoneInfoProvider.getZone : return r4
org.joda.time.tz.ZoneInfoProvider.getZone : if r1 != null goto $r5 = r0.<org.joda.time.tz.ZoneInfoProvider: java.util.Map iZoneInfoMap>
org.joda.time.tz.ZoneInfoProvider.getZone : $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r2)
org.joda.time.tz.ZoneInfoProvider.getZone : $r5 = r0.<org.joda.time.tz.ZoneInfoProvider: java.util.Map iZoneInfoMap>
org.joda.time.tz.ZoneInfoProvider.getZone : r3 = (java.lang.ref.SoftReference) r2
org.joda.time.tz.ZoneInfoProvider.getZone : if r2 != null goto $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r2)
org.joda.time.tz.ZoneInfoProvider.getZone : return null
org.joda.time.tz.ZoneInfoProvider.getZone : $z1 = r2 instanceof java.lang.ref.SoftReference
org.joda.time.tz.ZoneInfoProvider.getZone : $r6 = specialinvoke r0.<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>(r1)
org.joda.time.tz.ZoneInfoProvider.getZone : $r7 = virtualinvoke r3.<java.lang.ref.SoftReference: java.lang.Object get()>()
org.joda.time.tz.ZoneInfoProvider.getZone : if r4 == null goto $r8 = specialinvoke r0.<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>(r1)
org.joda.time.chrono.AssembledChronology.secondOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfDay>
org.joda.time.chrono.AssembledChronology.weeks : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeeks>
org.joda.time.field.RemainderDateTimeField.getMaximumValue : $i0 = r0.<org.joda.time.field.RemainderDateTimeField: int iDivisor>
org.joda.time.tz.CachedDateTimeZone.hashCode : $r1 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone>
org.joda.time.DateTimeZone.getDefaultProvider : if r0 != null goto return r0
org.joda.time.DateTimeZone.getDefaultProvider : r0 = null
org.joda.time.DateTimeZone.getDefaultProvider : $r10 = new org.joda.time.tz.ZoneInfoProvider
org.joda.time.DateTimeZone.getDefaultProvider : goto [?= (branch)]
org.joda.time.DateTimeZone.getDefaultProvider : if r1 == null goto (branch)
org.joda.time.DateTimeZone.getDefaultProvider : return r0
org.joda.time.DateTimeZone.getDefaultProvider : r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("org.joda.time.DateTimeZone.Provider")
org.joda.time.DateTimeZone.getDefaultProvider : if r0 != null goto (branch)
org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.DateTimeZone.setProvider0 : if r0 != null goto r1 = interfaceinvoke r0.<org.joda.time.tz.Provider: java.util.Set getAvailableIDs()>()
org.joda.time.DateTimeZone.setProvider0 : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>
org.joda.time.DateTimeZone.setProvider0 : <org.joda.time.DateTimeZone: java.util.Set cAvailableIDs> = r1
org.joda.time.DateTimeZone.setProvider0 : if r1 == null goto $r2 = new java.lang.IllegalArgumentException
org.joda.time.DateTimeZone.setProvider0 : $z0 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>("UTC")
org.joda.time.DateTimeZone.setProvider0 : <org.joda.time.DateTimeZone: org.joda.time.tz.Provider cProvider> = r0
org.joda.time.DateTimeZone.setProvider0 : r1 = interfaceinvoke r0.<org.joda.time.tz.Provider: java.util.Set getAvailableIDs()>()
org.joda.time.DateTimeZone.setProvider0 : r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.tz.Provider getDefaultProvider()>()
org.joda.time.chrono.ZonedChronology.assemble : $r58 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay>
org.joda.time.chrono.ZonedChronology.assemble : $r48 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear>
org.joda.time.chrono.ZonedChronology.assemble : $r10 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months>
org.joda.time.chrono.ZonedChronology.assemble : $r72 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay>
org.joda.time.chrono.ZonedChronology.assemble : $r28 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year>
org.joda.time.chrono.ZonedChronology.assemble : $r24 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField seconds>
org.joda.time.chrono.ZonedChronology.assemble : $r22 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField minutes>
org.joda.time.chrono.ZonedChronology.assemble : $r4 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField eras>
org.joda.time.chrono.ZonedChronology.assemble : $r34 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra>
org.joda.time.chrono.ZonedChronology.assemble : $r50 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury>
org.joda.time.chrono.ZonedChronology.assemble : $r36 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era>
org.joda.time.chrono.ZonedChronology.assemble : $r16 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days>
org.joda.time.chrono.ZonedChronology.assemble : $r44 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear>
org.joda.time.chrono.ZonedChronology.assemble : $r20 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField hours>
org.joda.time.chrono.ZonedChronology.assemble : $r32 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury>
org.joda.time.chrono.ZonedChronology.assemble : $r62 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay>
org.joda.time.chrono.ZonedChronology.assemble : $r30 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra>
org.joda.time.chrono.ZonedChronology.assemble : $r18 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField halfdays>
org.joda.time.chrono.ZonedChronology.assemble : $r38 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek>
org.joda.time.chrono.ZonedChronology.assemble : $r6 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries>
org.joda.time.chrono.ZonedChronology.assemble : $r68 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay>
org.joda.time.chrono.ZonedChronology.assemble : $r46 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear>
org.joda.time.chrono.ZonedChronology.assemble : $r70 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday>
org.joda.time.chrono.ZonedChronology.assemble : $r26 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField millis>
org.joda.time.chrono.ZonedChronology.assemble : $r42 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear>
org.joda.time.chrono.ZonedChronology.assemble : $r64 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay>
org.joda.time.chrono.ZonedChronology.assemble : $r14 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weeks>
org.joda.time.chrono.ZonedChronology.assemble : $r12 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears>
org.joda.time.chrono.ZonedChronology.assemble : $r40 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth>
org.joda.time.chrono.ZonedChronology.assemble : $r66 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday>
org.joda.time.chrono.ZonedChronology.assemble : $r56 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute>
org.joda.time.chrono.ZonedChronology.assemble : $r8 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years>
org.joda.time.chrono.ZonedChronology.assemble : $r54 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay>
org.joda.time.chrono.ZonedChronology.assemble : $r2 = new java.util.HashMap
org.joda.time.chrono.ZonedChronology.assemble : $r52 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond>
org.joda.time.chrono.ZonedChronology.assemble : $r60 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour>
org.joda.time.DateTimeFieldType.dayOfMonth : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType DAY_OF_MONTH_TYPE>
org.joda.time.field.UnsupportedDurationField.getUnitMillis : return 0L
org.joda.time.field.BaseDurationField.isSupported : return 1
org.joda.time.field.ZeroIsMaxDateTimeField.getLeapDurationField : $r1 = virtualinvoke r0.<org.joda.time.field.ZeroIsMaxDateTimeField: org.joda.time.DateTimeField getWrappedField()>()
org.joda.time.chrono.AssembledChronology.days : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays>
org.joda.time.field.DividedDateTimeField.getDurationField : $r1 = r0.<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField iDurationField>
org.joda.time.chrono.AssembledChronology.minuteOfHour : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfHour>
org.joda.time.chrono.AssembledChronology.seconds : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iSeconds>
org.joda.time.field.MillisDurationField.getType : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>()
org.joda.time.DurationFieldType.days : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType DAYS_TYPE>
org.joda.time.chrono.AssembledChronology.setFields : $r42 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years>
org.joda.time.chrono.AssembledChronology.setFields : $r110 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear>
org.joda.time.chrono.AssembledChronology.setFields : $r169 = virtualinvoke $r168.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.chrono.AssembledChronology.setFields : $r7 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField millis>
org.joda.time.chrono.AssembledChronology.setFields : $r102 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth>
org.joda.time.chrono.AssembledChronology.setFields : $r14 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField minutes>
org.joda.time.chrono.AssembledChronology.setFields : $r157 = virtualinvoke $r156.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>()
org.joda.time.chrono.AssembledChronology.setFields : $r50 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField eras>
org.joda.time.chrono.AssembledChronology.setFields : $r46 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries>
org.joda.time.chrono.AssembledChronology.setFields : $r66 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay>
org.joda.time.chrono.AssembledChronology.setFields : $r18 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField hours>
org.joda.time.chrono.AssembledChronology.setFields : $r10 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField seconds>
org.joda.time.chrono.AssembledChronology.setFields : $r160 = virtualinvoke $r159.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>()
org.joda.time.chrono.AssembledChronology.setFields : $r78 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay>
org.joda.time.chrono.AssembledChronology.setFields : $r166 = virtualinvoke $r165.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.chrono.AssembledChronology.setFields : $r82 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay>
org.joda.time.chrono.AssembledChronology.setFields : $r4 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.setFields : $r58 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay>
org.joda.time.chrono.AssembledChronology.setFields : $r94 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay>
org.joda.time.chrono.AssembledChronology.setFields : $r34 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears>
org.joda.time.chrono.AssembledChronology.setFields : $r62 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute>
org.joda.time.chrono.AssembledChronology.setFields : $r118 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury>
org.joda.time.chrono.AssembledChronology.setFields : $r70 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour>
org.joda.time.chrono.AssembledChronology.setFields : $r54 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond>
org.joda.time.chrono.AssembledChronology.setFields : $r30 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weeks>
org.joda.time.chrono.AssembledChronology.setFields : $r138 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra>
org.joda.time.chrono.AssembledChronology.setFields : $r148 = virtualinvoke $r147.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>()
org.joda.time.chrono.AssembledChronology.setFields : $r5 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.setFields : $r126 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year>
org.joda.time.chrono.AssembledChronology.setFields : $r146 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay>
org.joda.time.chrono.AssembledChronology.setFields : virtualinvoke r0.<org.joda.time.chrono.AssembledChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>(r2)
org.joda.time.chrono.AssembledChronology.setFields : $r90 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday>
org.joda.time.chrono.AssembledChronology.setFields : $r1 = new org.joda.time.chrono.AssembledChronology$Fields
org.joda.time.chrono.AssembledChronology.setFields : $r38 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months>
org.joda.time.chrono.AssembledChronology.setFields : $r134 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury>
org.joda.time.chrono.AssembledChronology.setFields : $r26 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days>
org.joda.time.chrono.AssembledChronology.setFields : b0 = 0
org.joda.time.chrono.AssembledChronology.setFields : $r145 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.setFields : $r154 = virtualinvoke $r153.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>()
org.joda.time.chrono.AssembledChronology.setFields : $r74 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay>
org.joda.time.chrono.AssembledChronology.setFields : $r163 = virtualinvoke $r162.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.chrono.AssembledChronology.setFields : $r22 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField halfdays>
org.joda.time.chrono.AssembledChronology.setFields : $r142 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era>
org.joda.time.chrono.AssembledChronology.setFields : $r98 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek>
org.joda.time.chrono.AssembledChronology.setFields : $r106 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear>
org.joda.time.chrono.AssembledChronology.setFields : $r86 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday>
org.joda.time.chrono.AssembledChronology.setFields : $r130 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra>
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: int iBaseFlags> = b0
org.joda.time.chrono.AssembledChronology.setFields : $r151 = virtualinvoke $r150.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>()
org.joda.time.chrono.AssembledChronology.setFields : $r122 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear>
org.joda.time.chrono.AssembledChronology.setFields : $r114 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : $z0 = interfaceinvoke r0.<java.io.DataInput: boolean readBoolean()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : i0 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedShort()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : r3 = newarray (long)[i4]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : r12 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone readFrom(java.io.DataInput,java.lang.String)>(r0, r1)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : $l8 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>(r0)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : r6 = newarray (java.lang.String)[i4]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : $l5 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>(r0)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : $r13 = new org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : r2 = newarray (java.lang.String)[i0]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : $l6 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>(r0)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : i1 = 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : $r8 = r2[i3]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : $r7 = interfaceinvoke r0.<java.io.DataInput: java.lang.String readUTF()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : r12 = null
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : if i0 >= 256 goto i3 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedShort()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : i4 = interfaceinvoke r0.<java.io.DataInput: int readInt()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : i2 = 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : r5 = newarray (int)[i4]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : i3 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : r4 = newarray (int)[i4]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : goto [?= i2 = i2 + 1]
org.joda.time.DateTimeFieldType.halfdayOfDay : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType HALFDAY_OF_DAY_TYPE>
org.joda.time.chrono.AssembledChronology.minutes : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMinutes>
org.joda.time.field.BaseDateTimeField.getLeapDurationField : return null
org.joda.time.chrono.ISOYearOfEraDateTimeField.getMaximumValue : $r1 = virtualinvoke r0.<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DateTimeField getWrappedField()>()
org.joda.time.chrono.AssembledChronology.clockhourOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfDay>
org.joda.time.field.PreciseDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.field.PreciseDateTimeField: org.joda.time.DurationField iRangeField>
org.joda.time.chrono.AssembledChronology.monthOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear>
org.joda.time.field.OffsetDateTimeField.getMaximumValue : $i0 = r0.<org.joda.time.field.OffsetDateTimeField: int iMax>
org.joda.time.field.DecoratedDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.ScaledDurationField.hashCode : $r2 = virtualinvoke r0.<org.joda.time.field.ScaledDurationField: org.joda.time.DurationField getWrappedField()>()
org.joda.time.field.ScaledDurationField.hashCode : return i8
org.joda.time.field.ScaledDurationField.hashCode : $l3 = l0 >>> 32
org.joda.time.field.ScaledDurationField.hashCode : $i2 = r0.<org.joda.time.field.ScaledDurationField: int iScalar>
org.joda.time.field.ScaledDurationField.hashCode : $r1 = virtualinvoke r0.<org.joda.time.field.ScaledDurationField: org.joda.time.DurationFieldType getType()>()
org.joda.time.chrono.AssembledChronology.hourOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay>
org.joda.time.DurationFieldType.eras : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType ERAS_TYPE>
org.joda.time.chrono.GregorianChronology.getAverageMillisPerMonth : return 2629746000L
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getUnitMillis : $r1 = r0.<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: org.joda.time.field.ImpreciseDateTimeField this$0>
org.joda.time.convert.ConverterManager.getIntervalConverter : if r2 == null goto $r7 = new java.lang.IllegalArgumentException
org.joda.time.convert.ConverterManager.getIntervalConverter : $r4 = r0.<org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterSet iIntervalConverters>
org.joda.time.convert.ConverterManager.getIntervalConverter : return r2
org.joda.time.convert.ConverterManager.getIntervalConverter : $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>()
org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.convert.NullConverter.getSupportedType : return null
