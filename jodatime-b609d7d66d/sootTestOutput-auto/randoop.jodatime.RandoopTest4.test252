org.joda.time.DateTimeFieldType.monthOfYear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MONTH_OF_YEAR_TYPE>
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r9 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField days()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r7 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField months()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal>
org.joda.time.LocalDate.getMonthOfYear : $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>()
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 1000 goto (branch)
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 10 goto (branch)
org.joda.time.format.FormatUtils.appendPaddedInteger : if i1 <= i15 goto $r10 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0)
org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48)
org.joda.time.format.FormatUtils.appendPaddedInteger : if i1 <= 1 goto $i3 = i0 + 48
org.joda.time.format.FormatUtils.appendPaddedInteger : i15 = 3
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 100 goto (branch)
org.joda.time.format.FormatUtils.appendPaddedInteger : $r10 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0)
org.joda.time.format.FormatUtils.appendPaddedInteger : $i3 = i0 + 48
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 0 goto (branch)
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.get : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.get : $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.DateTimeFieldType.secondOfMinute : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType SECOND_OF_MINUTE_TYPE>
org.joda.time.chrono.GJYearOfEraDateTimeField.getMaximumValue : $r1 = virtualinvoke r0.<org.joda.time.chrono.GJYearOfEraDateTimeField: org.joda.time.DateTimeField getWrappedField()>()
org.joda.time.base.BasePeriod.getPeriodType : $r1 = r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType>
org.joda.time.chrono.JulianChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.field.BaseDurationField.compareTo : $r2 = (org.joda.time.DurationField) r1
org.joda.time.field.BaseDurationField.compareTo : $b2 = l1 cmp l0
org.joda.time.field.BaseDurationField.compareTo : l0 = virtualinvoke r1.<org.joda.time.DurationField: long getUnitMillis()>()
org.joda.time.field.BaseDurationField.compareTo : l1 = virtualinvoke r0.<org.joda.time.field.BaseDurationField: long getUnitMillis()>()
org.joda.time.field.BaseDurationField.compareTo : return 1
org.joda.time.field.BaseDurationField.compareTo : $b3 = l1 cmp l0
org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.field.OffsetDateTimeField.set : $i2 = r0.<org.joda.time.field.OffsetDateTimeField: int iMin>
org.joda.time.field.OffsetDateTimeField.set : $i4 = r0.<org.joda.time.field.OffsetDateTimeField: int iOffset>
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValueForSet : $r1 = r0.<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.field.PreciseDurationDateTimeField.set : $i4 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int get(long)>(l0)
org.joda.time.field.PreciseDurationDateTimeField.set : $i2 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int getMinimumValue()>()
org.joda.time.field.PreciseDurationDateTimeField.set : $i3 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int getMaximumValueForSet(long,int)>(l0, i1)
org.joda.time.chrono.ISOChronology.withUTC : $r1 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC>
org.joda.time.chrono.ZonedChronology.getDateTimeMillis : $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.ZonedChronology.getDateTimeMillis : $l7 = virtualinvoke $r1.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5, i6)
org.joda.time.DateMidnight.toLocalDate : $r1 = new org.joda.time.LocalDate
org.joda.time.LocalDate.toDateTimeAtCurrentTime : l1 = virtualinvoke r2.<org.joda.time.Chronology: long set(org.joda.time.ReadablePartial,long)>(r0, l0)
org.joda.time.LocalDate.toDateTimeAtCurrentTime : l0 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>()
org.joda.time.LocalDate.toDateTimeAtCurrentTime : r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>(r1)
org.joda.time.LocalDate.toDateTimeAtCurrentTime : $r5 = new org.joda.time.DateTime
org.joda.time.LocalDate.toDateTimeAtCurrentTime : $r4 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>()
org.joda.time.base.AbstractInstant.getZone : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: org.joda.time.Chronology getChronology()>()
org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.LocalDate.withLocalMillis : $r1 = r0.<org.joda.time.LocalDate: org.joda.time.Chronology iChronology>
org.joda.time.LocalDate.withLocalMillis : $l2 = virtualinvoke r0.<org.joda.time.LocalDate: long getLocalMillis()>()
org.joda.time.chrono.GregorianChronology.getMaxYear : return 292278993
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : $r4 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : $r3 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : $z0 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean iTimeField>
org.joda.time.Period.plusSeconds : r1 = virtualinvoke r0.<org.joda.time.Period: int[] getValues()>()
org.joda.time.Period.plusSeconds : if i0 != 0 goto r1 = virtualinvoke r0.<org.joda.time.Period: int[] getValues()>()
org.joda.time.Period.plusSeconds : $r2 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.plusSeconds : $r3 = new org.joda.time.Period
org.joda.time.base.AbstractPartial.getFieldType : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.Chronology getChronology()>()
org.joda.time.DurationFieldType.seconds : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType SECONDS_TYPE>
org.joda.time.LocalDate.getField : $r5 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.LocalDate.getField : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.LocalDate.getField : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.LocalDate.getField : tableswitch(i0) {     case 0: goto $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>();     case 1: goto $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>();     case 2: goto $r5 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>();     default: goto $r6 = new java.lang.IndexOutOfBoundsException; }
org.joda.time.chrono.GregorianChronology.getAverageMillisPerYearDividedByTwo : return 15778476000L
org.joda.time.chrono.GJEraDateTimeField.set : if i2 == i1 goto return l0
org.joda.time.chrono.GJEraDateTimeField.set : i2 = virtualinvoke r0.<org.joda.time.chrono.GJEraDateTimeField: int get(long)>(l0)
org.joda.time.chrono.GJEraDateTimeField.set : return l0
org.joda.time.chrono.GJEraDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, 0, 1)
org.joda.time.chrono.BaseChronology.set : i1 = 0
org.joda.time.chrono.BaseChronology.set : $r2 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i1)
org.joda.time.chrono.BaseChronology.set : return l0
org.joda.time.format.DateTimeParserBucket.compareReverse : return -1
org.joda.time.format.DateTimeParserBucket.compareReverse : if r1 == null goto return 0
org.joda.time.format.DateTimeParserBucket.compareReverse : if r1 == null goto return 1
org.joda.time.format.DateTimeParserBucket.compareReverse : $i0 = virtualinvoke r0.<org.joda.time.DurationField: int compareTo(java.lang.Object)>(r1)
org.joda.time.format.DateTimeParserBucket.compareReverse : if r0 == null goto (branch)
org.joda.time.base.BaseDateTime.checkInstant : return l0
org.joda.time.chrono.AssembledChronology.months : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMonths>
org.joda.time.chrono.ISOChronology.getInstance : if r0 != null goto $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0)
org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0)
org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache>
org.joda.time.chrono.ISOChronology.getInstance : return r1
org.joda.time.chrono.ISOChronology.getInstance : if r1 == null goto $r7 = <org.joda.time.chrono.ISOChronology: java.util.Map cCache>
org.joda.time.chrono.ISOChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>()
org.joda.time.format.DateTimeParserBucket.computeMillis : r2 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields>
org.joda.time.format.DateTimeParserBucket.computeMillis : return l5
org.joda.time.format.DateTimeParserBucket.computeMillis : $r15 = r2[0]
org.joda.time.format.DateTimeParserBucket.computeMillis : $z1 = r0.<org.joda.time.format.DateTimeParserBucket: boolean iSavedFieldsShared>
org.joda.time.format.DateTimeParserBucket.computeMillis : if i0 <= 0 goto l5 = r0.<org.joda.time.format.DateTimeParserBucket: long iMillis>
org.joda.time.format.DateTimeParserBucket.computeMillis : $l13 = (long) i12
org.joda.time.format.DateTimeParserBucket.computeMillis : $r11 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>()
org.joda.time.format.DateTimeParserBucket.computeMillis : i6 = 0
org.joda.time.format.DateTimeParserBucket.computeMillis : $r19 = r2[i7]
org.joda.time.format.DateTimeParserBucket.computeMillis : goto [?= $r27 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset>]
org.joda.time.format.DateTimeParserBucket.computeMillis : if z0 == 0 goto (branch)
org.joda.time.format.DateTimeParserBucket.computeMillis : $r13 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>()
org.joda.time.format.DateTimeParserBucket.computeMillis : l5 = r0.<org.joda.time.format.DateTimeParserBucket: long iMillis>
org.joda.time.format.DateTimeParserBucket.computeMillis : $r18 = r2[i6]
org.joda.time.format.DateTimeParserBucket.computeMillis : $r30 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone>
org.joda.time.format.DateTimeParserBucket.computeMillis : $i1 = staticinvoke <org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>(r5, r3)
org.joda.time.format.DateTimeParserBucket.computeMillis : $r31 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone>
org.joda.time.format.DateTimeParserBucket.computeMillis : $r27 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset>
org.joda.time.format.DateTimeParserBucket.computeMillis : $r29 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone>
org.joda.time.format.DateTimeParserBucket.computeMillis : i7 = 0
org.joda.time.format.DateTimeParserBucket.computeMillis : i0 = r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount>
org.joda.time.format.DateTimeParserBucket.computeMillis : staticinvoke <org.joda.time.format.DateTimeParserBucket: void sort(org.joda.time.format.DateTimeParserBucket$SavedField[],int)>(r2, i0)
org.joda.time.format.DateTimeFormatter.selectChronology : return r2
org.joda.time.format.DateTimeFormatter.selectChronology : $r4 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>
org.joda.time.format.DateTimeFormatter.selectChronology : $r5 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>
org.joda.time.format.DateTimeFormatter.selectChronology : $r3 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>
org.joda.time.format.DateTimeFormatter.selectChronology : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.format.DateTimeFormatter.parseLocalDate : $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDateTime parseLocalDateTime(java.lang.String)>(r1)
org.joda.time.DateTimeFieldType.minuteOfHour : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MINUTE_OF_HOUR_TYPE>
org.joda.time.chrono.AssembledChronology.yearOfCentury : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfCentury>
org.joda.time.chrono.JulianChronology.getDateTimeMillis : $l7 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5, i6)
org.joda.time.chrono.BasicYearDateTimeField.getRangeDurationField : return null
org.joda.time.base.BaseSingleFieldPeriod.between : r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>(r0)
org.joda.time.base.BaseSingleFieldPeriod.between : return i0
org.joda.time.base.BaseSingleFieldPeriod.between : $r5 = virtualinvoke r2.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>(r3)
org.joda.time.base.BaseSingleFieldPeriod.between : if r0 == null goto $r4 = new java.lang.IllegalArgumentException
org.joda.time.DurationFieldType.millis : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MILLIS_TYPE>
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : $i10 = i0 + 1
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : c2 = r0.<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: char iValue>
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : if c1 == c2 goto $i10 = i0 + 1
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : c1 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i0)
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : $i3 = virtualinvoke r2.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : $i4 = i0 ^ -1
org.joda.time.format.DateTimeParserBucket.restoreState : $r2 = (org.joda.time.format.DateTimeParserBucket$SavedState) r1
org.joda.time.format.DateTimeParserBucket.restoreState : r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState> = r1
org.joda.time.format.DateTimeParserBucket.restoreState : return 1
org.joda.time.format.DateTimeParserBucket.restoreState : $z0 = r1 instanceof org.joda.time.format.DateTimeParserBucket$SavedState
org.joda.time.chrono.BasicChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.BasicChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>
org.joda.time.chrono.AssembledChronology.dayOfMonth : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth>
org.joda.time.chrono.ZonedChronology.getZone : $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: java.lang.Object getParam()>()
org.joda.time.chrono.AssembledChronology.years : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iYears>
org.joda.time.DateTimeUtils.getChronology : if r0 != null goto return r0
org.joda.time.DateTimeUtils.getChronology : return r0
org.joda.time.DateTimeUtils.getChronology : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>()
org.joda.time.field.DecoratedDateTimeField.getWrappedField : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.chrono.AssembledChronology.era : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iEra>
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : $l3 = (long) i1
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DateTimeZone iZone>
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : return i1
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : $l4 = l0 ^ l2
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l6 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $b1 = l0 cmp 0L
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : l5 = l0 + 1L
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l2 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.year : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear>
org.joda.time.DateTimeZone.getMillisKeepLocal : l1 = virtualinvoke r0.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>(l0)
org.joda.time.DateTimeZone.getMillisKeepLocal : return l0
org.joda.time.DateTimeZone.getMillisKeepLocal : if r1 != null goto (branch)
org.joda.time.DateTimeZone.getMillisKeepLocal : if r1 != r0 goto l1 = virtualinvoke r0.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>(l0)
org.joda.time.DateTimeZone.getMillisKeepLocal : $l2 = virtualinvoke r1.<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>(l1, 0, l0)
org.joda.time.field.RemainderDateTimeField.get : $i2 = r0.<org.joda.time.field.RemainderDateTimeField: int iDivisor>
org.joda.time.field.RemainderDateTimeField.get : if i1 < 0 goto $i4 = r0.<org.joda.time.field.RemainderDateTimeField: int iDivisor>
org.joda.time.field.RemainderDateTimeField.get : $r1 = virtualinvoke r0.<org.joda.time.field.RemainderDateTimeField: org.joda.time.DateTimeField getWrappedField()>()
org.joda.time.chrono.JulianChronology.getMinYear : return -292269054
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r5 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>()
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l8 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>(i0, i1, i2)
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r3 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>()
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r6 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>()
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l7 = virtualinvoke r1.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5, i6)
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r4 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>()
org.joda.time.chrono.JulianChronology.getInstanceUTC : $r0 = <org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology INSTANCE_UTC>
org.joda.time.DateTimeZone.fixedOffsetZone : if i0 != 0 goto $r4 = <org.joda.time.DateTimeZone: java.util.Map iFixedOffsetCache>
org.joda.time.DateTimeZone.fixedOffsetZone : return r2
org.joda.time.DateTimeZone.fixedOffsetZone : if r2 == null goto $r9 = new org.joda.time.tz.FixedDateTimeZone
org.joda.time.DateTimeZone.fixedOffsetZone : $r8 = virtualinvoke r1.<java.lang.ref.Reference: java.lang.Object get()>()
org.joda.time.DateTimeZone.fixedOffsetZone : $r4 = <org.joda.time.DateTimeZone: java.util.Map iFixedOffsetCache>
org.joda.time.DateTimeZone.fixedOffsetZone : $r6 = <org.joda.time.DateTimeZone: java.util.Map iFixedOffsetCache>
org.joda.time.DateTimeZone.fixedOffsetZone : if r1 == null goto $r9 = new org.joda.time.tz.FixedDateTimeZone
org.joda.time.chrono.JulianChronology.getDateMidnightMillis : $i3 = staticinvoke <org.joda.time.chrono.JulianChronology: int adjustYearForSet(int)>(i0)
org.joda.time.DateTime.withCenturyOfEra : $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>()
org.joda.time.format.DateTimeParserBucket$SavedField.compareTo : return i0
org.joda.time.format.DateTimeParserBucket$SavedField.compareTo : $r3 = r0.<org.joda.time.format.DateTimeParserBucket$SavedField: org.joda.time.DateTimeField iField>
org.joda.time.format.DateTimeParserBucket$SavedField.compareTo : if i0 == 0 goto $r6 = r0.<org.joda.time.format.DateTimeParserBucket$SavedField: org.joda.time.DateTimeField iField>
org.joda.time.format.DateTimeParserBucket$SavedField.compareTo : r2 = r1.<org.joda.time.format.DateTimeParserBucket$SavedField: org.joda.time.DateTimeField iField>
org.joda.time.format.DateTimeParserBucket$SavedField.compareTo : $r4 = virtualinvoke $r3.<org.joda.time.DateTimeField: org.joda.time.DurationField getRangeDurationField()>()
org.joda.time.base.AbstractPeriod.indexOf : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.DateTimeUtils.getPeriodType : if r0 != null goto return r0
org.joda.time.DateTimeUtils.getPeriodType : return r0
org.joda.time.LocalDate.size : return 3
org.joda.time.format.DateTimeParserBucket.access$102 : r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset> = r1
org.joda.time.tz.FixedDateTimeZone.hashCode : $r1 = virtualinvoke r0.<org.joda.time.tz.FixedDateTimeZone: java.lang.String getID()>()
org.joda.time.format.DateTimeParserBucket.access$100 : $r1 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset>
org.joda.time.base.BasePeriod.getValue : $r1 = r0.<org.joda.time.base.BasePeriod: int[] iValues>
org.joda.time.PeriodType.addIndexedField : $i3 = r2[i2]
org.joda.time.PeriodType.addIndexedField : $r3 = r0.<org.joda.time.PeriodType: int[] iIndices>
org.joda.time.PeriodType.addIndexedField : return 1
org.joda.time.PeriodType.addIndexedField : if i1 != 0 goto $r3 = r0.<org.joda.time.PeriodType: int[] iIndices>
org.joda.time.PeriodType.addIndexedField : if i2 != -1 goto $i3 = r2[i2]
org.joda.time.chrono.BasicYearDateTimeField.set : $r3 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.set : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.set : $i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMinYear()>()
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : $l3 = (long) i1
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DateTimeZone iZone>
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : return i1
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : $l4 = l0 ^ l2
org.joda.time.format.DateTimeParserBucket.access$202 : r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields> = r1
org.joda.time.format.DateTimeParserBucket.access$200 : $r1 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields>
org.joda.time.format.DateTimeParserBucket.getZone : $r1 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone>
org.joda.time.chrono.BasicChronology.getDayOfYear : $l3 = l0 - l2
org.joda.time.chrono.BasicChronology.getDayOfYear : l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1)
org.joda.time.format.DateTimeParserBucket.access$000 : $r1 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone>
org.joda.time.DurationFieldType.hours : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType HOURS_TYPE>
org.joda.time.field.DelegatedDateTimeField.get : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.chrono.BasicGJChronology.setYear : return l7
org.joda.time.chrono.BasicGJChronology.setYear : $l6 = (long) i4
org.joda.time.chrono.BasicGJChronology.setYear : i3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getDayOfYear(long,int)>(l0, i2)
org.joda.time.chrono.BasicGJChronology.setYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i2)
org.joda.time.chrono.BasicGJChronology.setYear : i4 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getMillisOfDay(long)>(l0)
org.joda.time.chrono.BasicGJChronology.setYear : $z1 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i1)
org.joda.time.chrono.BasicGJChronology.setYear : if i3 <= 59 goto l5 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMonthDayMillis(int,int,int)>(i1, 1, i3)
org.joda.time.chrono.BasicGJChronology.setYear : l5 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMonthDayMillis(int,int,int)>(i1, 1, i3)
org.joda.time.chrono.BasicGJChronology.setYear : $z2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i1)
org.joda.time.chrono.BasicGJChronology.setYear : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicGJChronology.setYear : i3 = i3 + -1
org.joda.time.format.DateTimeParserBucket.access$002 : r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone> = r1
org.joda.time.chrono.JulianChronology.getAverageMillisPerYearDividedByTwo : return 15778800000L
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $r1 = <org.joda.time.chrono.BasicGJChronology: long[] MAX_TOTAL_MILLIS_BY_MONTH_ARRAY>
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $r2 = <org.joda.time.chrono.BasicGJChronology: long[] MIN_TOTAL_MILLIS_BY_MONTH_ARRAY>
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0)
org.joda.time.LocalDateTime.toLocalDate : $r1 = new org.joda.time.LocalDate
org.joda.time.DateTimeUtils.getZone : if r0 != null goto return r0
org.joda.time.DateTimeUtils.getZone : $r1 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>()
org.joda.time.DateTimeUtils.getZone : return r0
org.joda.time.LocalDate.toDateTimeAtMidnight : $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.DateTime toDateTimeAtMidnight(org.joda.time.DateTimeZone)>(null)
org.joda.time.LocalDate.toDateTimeAtMidnight : r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>(r1)
org.joda.time.LocalDate.toDateTimeAtMidnight : $r5 = new org.joda.time.DateTime
org.joda.time.LocalDate.toDateTimeAtMidnight : $r4 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>()
org.joda.time.format.DateTimeParserBucket.access$302 : r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount> = i0
org.joda.time.format.DateTimeParserBucket.access$300 : $i0 = r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount>
org.joda.time.DateTimeFieldType.year : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType YEAR_TYPE>
org.joda.time.field.FieldUtils.safeSubtract : $l3 = l0 ^ l2
org.joda.time.field.FieldUtils.safeSubtract : return l2
org.joda.time.field.FieldUtils.safeSubtract : l2 = l0 - l1
org.joda.time.Days.days : $r10 = new org.joda.time.Days
org.joda.time.Days.days : lookupswitch(i0) {     case -2147483648: goto $r9 = <org.joda.time.Days: org.joda.time.Days MIN_VALUE>;     case 0: goto $r0 = <org.joda.time.Days: org.joda.time.Days ZERO>;     case 1: goto $r1 = <org.joda.time.Days: org.joda.time.Days ONE>;     case 2: goto $r2 = <org.joda.time.Days: org.joda.time.Days TWO>;     case 3: goto $r3 = <org.joda.time.Days: org.joda.time.Days THREE>;     case 4: goto $r4 = <org.joda.time.Days: org.joda.time.Days FOUR>;     case 5: goto $r5 = <org.joda.time.Days: org.joda.time.Days FIVE>;     case 6: goto $r6 = <org.joda.time.Days: org.joda.time.Days SIX>;     case 7: goto $r7 = <org.joda.time.Days: org.joda.time.Days SEVEN>;     case 2147483647: goto $r8 = <org.joda.time.Days: org.joda.time.Days MAX_VALUE>;     default: goto $r10 = new org.joda.time.Days; }
org.joda.time.format.ISODateTimeFormat.localDateParser : $r3 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter ldp>
org.joda.time.format.ISODateTimeFormat.localDateParser : $r0 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter ldp>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r4 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : l9 = virtualinvoke $r6.<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>(i6, i16, i24)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i14 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : if i5 < 0 goto $i17 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : if i1 != 0 goto $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i11 = i4 - 1
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : if i24 <= i8 goto $r6 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $l25 = l9 + l2
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r6 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i12 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>
org.joda.time.DateTimeFieldType.dayOfMonth : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType DAY_OF_MONTH_TYPE>
org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DurationField iField>
org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : $z0 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean iTimeField>
org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : i2 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>(l0)
org.joda.time.base.AbstractDateTime.getYearOfCentury : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractDateTime: org.joda.time.Chronology getChronology()>()
org.joda.time.chrono.BasicYearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.LocalDate.getLocalMillis : $l0 = r0.<org.joda.time.LocalDate: long iLocalMillis>
org.joda.time.DateMidnight.plusMonths : if i0 != 0 goto $r1 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>()
org.joda.time.DateMidnight.plusMonths : $r1 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>()
org.joda.time.DateMidnight.plusMonths : $r3 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.DateMidnight withMillis(long)>(l1)
org.joda.time.LocalDateTime.getLocalMillis : $l0 = r0.<org.joda.time.LocalDateTime: long iLocalMillis>
org.joda.time.DurationFieldType.days : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType DAYS_TYPE>
org.joda.time.chrono.BasicChronology.getMonthOfYear : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.LocalDate.getValue : tableswitch(i0) {     case 0: goto $r2 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();     case 1: goto $r4 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();     case 2: goto $r6 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>();     default: goto $r8 = new java.lang.IndexOutOfBoundsException; }
org.joda.time.LocalDate.getValue : $r2 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>()
org.joda.time.LocalDate.getValue : $r6 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>()
org.joda.time.LocalDate.getValue : $r4 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>()
org.joda.time.DateTimeUtils.currentTimeMillis : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider>
org.joda.time.chrono.BasicChronology.getYearInfo : if r1 == null goto $r3 = new org.joda.time.chrono.BasicChronology$YearInfo
org.joda.time.chrono.BasicChronology.getYearInfo : $r2 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache>
org.joda.time.chrono.BasicChronology.getYearInfo : return r1
org.joda.time.format.DateTimeFormatter.requireParser : if r1 != null goto return r1
org.joda.time.format.DateTimeFormatter.requireParser : r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser iParser>
org.joda.time.format.DateTimeFormatter.requireParser : return r1
org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.DateMidnight.withZoneRetainFields : $r4 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.DateTimeZone getZone()>()
org.joda.time.DateMidnight.withZoneRetainFields : if r3 != r2 goto $l1 = virtualinvoke r0.<org.joda.time.DateMidnight: long getMillis()>()
org.joda.time.DateMidnight.withZoneRetainFields : $r5 = new org.joda.time.DateMidnight
org.joda.time.DateMidnight.withZoneRetainFields : r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>(r1)
org.joda.time.DateMidnight.withZoneRetainFields : $l1 = virtualinvoke r0.<org.joda.time.DateMidnight: long getMillis()>()
org.joda.time.chrono.AssembledChronology.monthOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear>
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i1)
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : return $b6
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMillis(int)>(i1)
org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : $r3 = r0.<org.joda.time.format.DateTimeParserBucket$SavedState: org.joda.time.DateTimeZone iZone>
org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : $r2 = r0.<org.joda.time.format.DateTimeParserBucket$SavedState: org.joda.time.format.DateTimeParserBucket this$0>
org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : $r5 = r0.<org.joda.time.format.DateTimeParserBucket$SavedState: java.lang.Integer iOffset>
org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : $i2 = r0.<org.joda.time.format.DateTimeParserBucket$SavedState: int iSavedFieldsCount>
org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : return 1
org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : $i0 = r0.<org.joda.time.format.DateTimeParserBucket$SavedState: int iSavedFieldsCount>
org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : $r7 = r0.<org.joda.time.format.DateTimeParserBucket$SavedState: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields>
org.joda.time.PeriodType.size : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.chrono.BasicYearDateTimeField.roundFloor : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.field.PreciseDurationField.add : $l5 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l0, l2)
org.joda.time.field.PreciseDurationField.add : $l3 = (long) i1
org.joda.time.chrono.BasicChronology.getMaxMonth : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMaxMonth()>()
org.joda.time.chrono.BasicChronology.getMaxMonth : return 12
org.joda.time.DateMidnight.dayOfYear : $r1 = new org.joda.time.DateMidnight$Property
org.joda.time.field.DividedDateTimeField.getRemainder : $i1 = r0.<org.joda.time.field.DividedDateTimeField: int iDivisor>
org.joda.time.field.DividedDateTimeField.getRemainder : if i0 < 0 goto $i3 = r0.<org.joda.time.field.DividedDateTimeField: int iDivisor>
org.joda.time.DateTimeZone.getID : $r1 = r0.<org.joda.time.DateTimeZone: java.lang.String iID>
org.joda.time.chrono.JulianChronology.adjustYearForSet : return i0
org.joda.time.chrono.JulianChronology.adjustYearForSet : if i0 > 0 goto return i0
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMinimumValue : return 1
org.joda.time.chrono.JulianChronology.isLeapYear : $i1 = i0 & 3
org.joda.time.field.DecoratedDateTimeField.set : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.DateTimeZone.getDefault : if r0 != null goto return r0
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.LocalDate.parse : $r2 = virtualinvoke r1.<org.joda.time.format.DateTimeFormatter: org.joda.time.LocalDate parseLocalDate(java.lang.String)>(r0)
org.joda.time.LocalDate.parse : $r1 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter localDateParser()>()
org.joda.time.field.BaseDurationField.getDifference : $l2 = virtualinvoke r0.<org.joda.time.field.BaseDurationField: long getDifferenceAsLong(long,long)>(l0, l1)
org.joda.time.base.BaseDateTime.checkChronology : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.field.BaseDateTimeField.getType : $r1 = r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType iType>
org.joda.time.tz.FixedDateTimeZone.getOffset : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset>
org.joda.time.chrono.JulianChronology.withUTC : $r1 = <org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology INSTANCE_UTC>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.roundFloor : $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.roundFloor : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.roundFloor : $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.DateTime.year : $r1 = new org.joda.time.DateTime$Property
org.joda.time.DateTimeZone.convertUTCToLocal : i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0)
org.joda.time.DateTimeZone.convertUTCToLocal : $l3 = (long) i1
org.joda.time.DateTimeZone.convertUTCToLocal : return l2
org.joda.time.DateTimeZone.convertUTCToLocal : $l4 = l0 ^ l2
org.joda.time.base.BaseDateTime.getMillis : $l0 = r0.<org.joda.time.base.BaseDateTime: long iMillis>
org.joda.time.chrono.GJYearOfEraDateTimeField.set : $l4 = specialinvoke r0.<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>(l0, i1)
org.joda.time.chrono.GJYearOfEraDateTimeField.set : $i2 = virtualinvoke r0.<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>()
org.joda.time.chrono.GJYearOfEraDateTimeField.set : $r1 = r0.<org.joda.time.chrono.GJYearOfEraDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.JulianChronology.getMaxYear : return 292272992
org.joda.time.LocalDate.getDayOfMonth : $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>()
org.joda.time.field.SkipDateTimeField.get : i1 = specialinvoke r0.<org.joda.time.field.DelegatedDateTimeField: int get(long)>(l0)
org.joda.time.field.SkipDateTimeField.get : $i2 = r0.<org.joda.time.field.SkipDateTimeField: int iSkip>
org.joda.time.field.SkipDateTimeField.get : return i1
org.joda.time.DateTimeFieldType.millisOfSecond : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MILLIS_OF_SECOND_TYPE>
org.joda.time.LocalDate.minusMonths : if i0 != 0 goto $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>()
org.joda.time.LocalDate.minusMonths : return r0
org.joda.time.DurationFieldType.minutes : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MINUTES_TYPE>
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0)
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $i6 = i2 - 1
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i0, i1)
org.joda.time.chrono.ISOChronology.withZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.ISOChronology.withZone : if r1 != null goto $r2 = virtualinvoke r0.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.ISOChronology.withZone : return r0
org.joda.time.chrono.ISOChronology.withZone : $r3 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>(r1)
org.joda.time.PeriodType.standard : if r0 != null goto return r0
org.joda.time.PeriodType.standard : r0 = <org.joda.time.PeriodType: org.joda.time.PeriodType cStandard>
org.joda.time.PeriodType.standard : return r0
org.joda.time.base.AbstractInstant.equals : return 0
org.joda.time.base.AbstractInstant.equals : $z0 = r1 instanceof org.joda.time.ReadableInstant
org.joda.time.base.AbstractInstant.equals : if r0 != r1 goto $z0 = r1 instanceof org.joda.time.ReadableInstant
org.joda.time.LocalDate.withMonthOfYear : $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>()
org.joda.time.base.BaseDateTime.getChronology : $r1 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology>
org.joda.time.chrono.BasicChronology.getYearMonthMillis : return l4
org.joda.time.chrono.BasicChronology.getYearMonthMillis : l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0)
org.joda.time.chrono.BasicChronology.getYearMonthMillis : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i0, i1)
org.joda.time.chrono.JulianChronology.withZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.JulianChronology.withZone : if r1 != null goto $r2 = virtualinvoke r0.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.JulianChronology.withZone : $r3 = staticinvoke <org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone)>(r1)
org.joda.time.DateTimeZone.printOffset : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, i3, 2)
org.joda.time.DateTimeZone.printOffset : i1 = i0 / 3600000
org.joda.time.DateTimeZone.printOffset : if i9 != 0 goto virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46)
org.joda.time.DateTimeZone.printOffset : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(43)
org.joda.time.DateTimeZone.printOffset : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46)
org.joda.time.DateTimeZone.printOffset : $i8 = i3 * 1000
org.joda.time.DateTimeZone.printOffset : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58)
org.joda.time.DateTimeZone.printOffset : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, i2, 2)
org.joda.time.DateTimeZone.printOffset : $i4 = i1 * 3600000
org.joda.time.DateTimeZone.printOffset : $i6 = i2 * 60000
org.joda.time.DateTimeZone.printOffset : if i0 < 0 goto virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45)
org.joda.time.DateTimeZone.printOffset : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, i1, 2)
org.joda.time.DateTimeZone.printOffset : i2 = i5 / 60000
org.joda.time.DateTimeZone.printOffset : $r9 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>()
org.joda.time.DateTimeZone.printOffset : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, i9, 3)
org.joda.time.DateTimeZone.printOffset : i3 = i7 / 1000
org.joda.time.DateTimeZone.printOffset : $r0 = new java.lang.StringBuffer
org.joda.time.DateTimeZone.printOffset : if i7 != 0 goto i3 = i7 / 1000
org.joda.time.chrono.GregorianChronology.isLeapYear : $i1 = i0 & 3
org.joda.time.DateTime.plusDays : $r3 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>(l1)
org.joda.time.DateTime.plusDays : $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>()
org.joda.time.DateTime.plusDays : if i0 != 0 goto $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>()
org.joda.time.format.DateTimeParserBucket.saveState : $r2 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState>
org.joda.time.format.DateTimeParserBucket.saveState : $r1 = new org.joda.time.format.DateTimeParserBucket$SavedState
org.joda.time.format.DateTimeParserBucket.saveState : $r3 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState>
org.joda.time.chrono.AssembledChronology.getParam : $r1 = r0.<org.joda.time.chrono.AssembledChronology: java.lang.Object iParam>
org.joda.time.base.BasePeriod.checkPeriodType : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>(r1)
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $r2 = <org.joda.time.chrono.BasicGJChronology: int[] MIN_DAYS_PER_MONTH_ARRAY>
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0)
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $r1 = <org.joda.time.chrono.BasicGJChronology: int[] MAX_DAYS_PER_MONTH_ARRAY>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.format.DateTimeFormatter.parseLocalDateTime : i0 = interfaceinvoke r2.<org.joda.time.format.DateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>(r4, r1, 0)
org.joda.time.format.DateTimeFormatter.parseLocalDateTime : $r14 = new org.joda.time.LocalDateTime
org.joda.time.format.DateTimeFormatter.parseLocalDateTime : $r7 = new org.joda.time.format.DateTimeParserBucket
org.joda.time.format.DateTimeFormatter.parseLocalDateTime : $r6 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>(null)
org.joda.time.format.DateTimeFormatter.parseLocalDateTime : $i4 = virtualinvoke r1.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatter.parseLocalDateTime : $r13 = virtualinvoke r4.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone getZone()>()
org.joda.time.format.DateTimeFormatter.parseLocalDateTime : $r10 = virtualinvoke r4.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer getOffsetInteger()>()
org.joda.time.format.DateTimeFormatter.parseLocalDateTime : if i0 < 0 goto i0 = i0 ^ -1
org.joda.time.format.DateTimeFormatter.parseLocalDateTime : r2 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser requireParser()>()
org.joda.time.format.DateTimeFormatter.parseLocalDateTime : l1 = virtualinvoke r4.<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.String)>(1, r1)
org.joda.time.format.DateTimeParserBucket.sort : i1 = 0
org.joda.time.format.DateTimeParserBucket.sort : if i0 <= 10 goto i1 = 0
org.joda.time.format.DateTimeParserBucket.sort : i2 = i1
org.joda.time.DateTimeZone.forOffsetMillis : $r1 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone fixedOffsetZone(java.lang.String,int)>(r0, i0)
org.joda.time.DateTimeZone.forOffsetMillis : r0 = staticinvoke <org.joda.time.DateTimeZone: java.lang.String printOffset(int)>(i0)
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.add : $r1 = r0.<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: org.joda.time.field.ImpreciseDateTimeField this$0>
org.joda.time.DateTimeFieldType.hourOfDay : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType HOUR_OF_DAY_TYPE>
org.joda.time.DateTimeUtils$OffsetMillisProvider.getMillis : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.joda.time.chrono.BasicGJChronology.getDaysInMonthMaxForSet : if i1 <= 28 goto $i2 = 28
org.joda.time.DurationFieldType.months : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MONTHS_TYPE>
org.joda.time.format.DateTimeParserBucket$SavedField.set : $r6 = r0.<org.joda.time.format.DateTimeParserBucket$SavedField: org.joda.time.DateTimeField iField>
org.joda.time.format.DateTimeParserBucket$SavedField.set : return l2
org.joda.time.format.DateTimeParserBucket$SavedField.set : $r2 = r0.<org.joda.time.format.DateTimeParserBucket$SavedField: org.joda.time.DateTimeField iField>
org.joda.time.format.DateTimeParserBucket$SavedField.set : $r1 = r0.<org.joda.time.format.DateTimeParserBucket$SavedField: java.lang.String iText>
org.joda.time.format.DateTimeParserBucket$SavedField.set : if z0 == 0 goto return l2
org.joda.time.base.BasePeriod.checkAndUpdate : r2[i1] = i0
org.joda.time.base.BasePeriod.checkAndUpdate : i1 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int indexOf(org.joda.time.DurationFieldType)>(r1)
org.joda.time.base.BasePeriod.checkAndUpdate : if i1 != -1 goto r2[i1] = i0
org.joda.time.field.DividedDateTimeField.get : $i2 = r0.<org.joda.time.field.DividedDateTimeField: int iDivisor>
org.joda.time.field.DividedDateTimeField.get : if i1 < 0 goto $i4 = i1 + 1
org.joda.time.field.DividedDateTimeField.get : $r1 = virtualinvoke r0.<org.joda.time.field.DividedDateTimeField: org.joda.time.DateTimeField getWrappedField()>()
org.joda.time.Days.daysBetween : $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>()
org.joda.time.Days.daysBetween : $r3 = staticinvoke <org.joda.time.Days: org.joda.time.Days days(int)>(i0)
org.joda.time.field.FieldUtils.safeAdd : l2 = l0 + l1
org.joda.time.field.FieldUtils.safeAdd : $l3 = l0 ^ l2
org.joda.time.field.FieldUtils.safeAdd : return l2
org.joda.time.field.FieldUtils.safeAdd : return i2
org.joda.time.field.FieldUtils.safeAdd : $i3 = i0 ^ i2
org.joda.time.field.FieldUtils.safeAdd : i2 = i0 + i1
org.joda.time.chrono.ISOYearOfEraDateTimeField.get : if i1 >= 0 goto $i2 = i1
org.joda.time.chrono.ISOYearOfEraDateTimeField.get : $r1 = virtualinvoke r0.<org.joda.time.chrono.ISOYearOfEraDateTimeField: org.joda.time.DateTimeField getWrappedField()>()
org.joda.time.field.FieldUtils.safeToInt : $i3 = (int) l0
org.joda.time.field.FieldUtils.safeToInt : $b1 = -2147483648L cmp l0
org.joda.time.LocalDate.getYear : $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>()
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.set : $r4 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.set : $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.set : return l3
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.set : $r3 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.set : $i5 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>(l3)
org.joda.time.field.FieldUtils.verifyValueBounds : if i0 < i1 goto $r1 = new org.joda.time.IllegalFieldValueException
org.joda.time.chrono.AssembledChronology.dayOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfYear>
org.joda.time.tz.FixedDateTimeZone.getOffsetFromLocal : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset>
org.joda.time.LocalDateTime.getChronology : $r1 = r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology iChronology>
org.joda.time.field.DecoratedDateTimeField.get : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.base.BasePeriod.setPeriodInternal : $r4 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r6 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $i8 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int size()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r3 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r8 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r5 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>()
org.joda.time.base.BasePeriod.setPeriodInternal : return r1
org.joda.time.base.BasePeriod.setPeriodInternal : $r9 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r7 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>()
org.joda.time.LocalDate.getChronology : $r1 = r0.<org.joda.time.LocalDate: org.joda.time.Chronology iChronology>
org.joda.time.DateMidnight.checkInstant : $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.chrono.AssembledChronology.centuryOfEra : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iCenturyOfEra>
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: org.joda.time.format.DateTimeParser[] iParsers>
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if i9 <= i3 goto virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: boolean restoreState(java.lang.Object)>(r4)
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if r6 != null goto i5 = interfaceinvoke r6.<org.joda.time.format.DateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>(r1, r2, i0)
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: boolean restoreState(java.lang.Object)>(r4)
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i9 = i5 ^ -1
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if i5 >= 0 goto virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: boolean restoreState(java.lang.Object)>(r4)
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if i2 > i0 goto z0 = 1
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : r4 = virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: java.lang.Object saveState()>()
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : return i0
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i2 = i0
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i3 = i0
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : z0 = 0
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : r6 = r3[i4]
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if i5 < i0 goto (branch)
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if i5 <= i2 goto virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: boolean restoreState(java.lang.Object)>(r4)
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i5 = interfaceinvoke r6.<org.joda.time.format.DateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>(r1, r2, i0)
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : return i5
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : $i6 = virtualinvoke r2.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : r5 = null
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i1 = lengthof r3
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i4 = 0
org.joda.time.DateTime.withMillis : $l1 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>()
org.joda.time.DurationFieldType.years : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType YEARS_TYPE>
org.joda.time.chrono.BasicChronology.getYearMillis : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>(i0)
org.joda.time.DurationFieldType.weeks : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType WEEKS_TYPE>
org.joda.time.format.DateTimeParserBucket.getOffsetInteger : $r1 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset>
org.joda.time.field.DividedDateTimeField.set : $r2 = virtualinvoke r0.<org.joda.time.field.DividedDateTimeField: org.joda.time.DateTimeField getWrappedField()>()
org.joda.time.field.DividedDateTimeField.set : $i3 = r0.<org.joda.time.field.DividedDateTimeField: int iMin>
org.joda.time.field.DividedDateTimeField.set : $r1 = virtualinvoke r0.<org.joda.time.field.DividedDateTimeField: org.joda.time.DateTimeField getWrappedField()>()
org.joda.time.LocalDate.withEra : $r1 = virtualinvoke r0.<org.joda.time.LocalDate: org.joda.time.Chronology getChronology()>()
org.joda.time.DateMidnight.now : if r0 != null goto $r2 = new org.joda.time.DateMidnight
org.joda.time.DateMidnight.now : $r2 = new org.joda.time.DateMidnight
org.joda.time.chrono.GregorianChronology.getApproxMillisAtEpochDividedByTwo : return 31083597720000L
org.joda.time.field.ImpreciseDateTimeField.getDurationField : $r1 = r0.<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField iDurationField>
org.joda.time.base.AbstractPeriod.getValues : $i3 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int getValue(int)>(i0)
org.joda.time.base.AbstractPeriod.getValues : i0 = 0
org.joda.time.base.AbstractPeriod.getValues : $i1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int size()>()
org.joda.time.base.AbstractPeriod.getValues : return r1
org.joda.time.DateMidnight.withMillis : r1 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>()
org.joda.time.DateMidnight.withMillis : $l2 = virtualinvoke r0.<org.joda.time.DateMidnight: long getMillis()>()
org.joda.time.DateMidnight.withMillis : l1 = virtualinvoke r0.<org.joda.time.DateMidnight: long checkInstant(long,org.joda.time.Chronology)>(l0, r1)
org.joda.time.chrono.JulianChronology.getApproxMillisAtEpochDividedByTwo : return 31083663600000L
org.joda.time.field.OffsetDateTimeField.get : $i1 = specialinvoke r0.<org.joda.time.field.DecoratedDateTimeField: int get(long)>(l0)
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $l7 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>(i0, i1, i2)
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>()
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>()
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $r3 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>()
org.joda.time.base.AbstractPeriod.size : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : $r5 = r3[i2]
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: org.joda.time.format.DateTimeParser[] iParsers>
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : return i0
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : i2 = 0
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : if r3 != null goto i1 = lengthof r3
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : i1 = lengthof r3
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $i7 = virtualinvoke $r5.<org.joda.time.chrono.BasicChronology: int getMillisOfDay(long)>(l0)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r4 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : if i3 <= i4 goto $r4 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $i5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.GJYearOfEraDateTimeField.get : if i1 > 0 goto return i1
org.joda.time.chrono.GJYearOfEraDateTimeField.get : return i1
org.joda.time.chrono.GJYearOfEraDateTimeField.get : $r1 = virtualinvoke r0.<org.joda.time.chrono.GJYearOfEraDateTimeField: org.joda.time.DateTimeField getWrappedField()>()
org.joda.time.Period.plusMillis : r1 = virtualinvoke r0.<org.joda.time.Period: int[] getValues()>()
org.joda.time.Period.plusMillis : if i0 != 0 goto r1 = virtualinvoke r0.<org.joda.time.Period: int[] getValues()>()
org.joda.time.Period.plusMillis : $r2 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.plusMillis : $r3 = new org.joda.time.Period
org.joda.time.chrono.BasicChronology.getDayOfMonth : i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicChronology.getDayOfMonth : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i1, i2)
org.joda.time.chrono.BasicChronology.getDayOfMonth : $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l0, i1, i2)
org.joda.time.chrono.BasicChronology.getDayOfMonth : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1)
org.joda.time.chrono.BasicChronology.getDayOfMonth : $l6 = l0 - l5
org.joda.time.chrono.BasicChronology.getDayOfMonth : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i1)
org.joda.time.chrono.ZonedChronology.localToUTC : $l2 = (long) i1
org.joda.time.chrono.ZonedChronology.localToUTC : i1 = virtualinvoke r1.<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>(l0)
org.joda.time.chrono.ZonedChronology.localToUTC : r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.ZonedChronology.localToUTC : return l3
org.joda.time.chrono.ZonedChronology.localToUTC : $i4 = virtualinvoke r1.<org.joda.time.DateTimeZone: int getOffset(long)>(l3)
org.joda.time.chrono.BasicChronology.getMillisOfDay : $l4 = l0 + 1L
org.joda.time.chrono.BasicChronology.getMillisOfDay : $l2 = l0 % 86400000L
org.joda.time.chrono.BasicChronology.getMillisOfDay : $b1 = l0 cmp 0L
org.joda.time.chrono.GregorianChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.BasicChronology.getYear : $b12 = l5 cmp 0L
org.joda.time.chrono.BasicChronology.getYear : $b9 = l2 cmp 0L
org.joda.time.chrono.BasicChronology.getYear : l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i3)
org.joda.time.chrono.BasicChronology.getYear : $l7 = l0 >> 1
org.joda.time.chrono.BasicChronology.getYear : $b13 = l5 cmp 31536000000L
org.joda.time.chrono.BasicChronology.getYear : l5 = l0 - l4
org.joda.time.chrono.BasicChronology.getYear : return i3
org.joda.time.chrono.BasicChronology.getYear : l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getAverageMillisPerYearDividedByTwo()>()
org.joda.time.chrono.BasicChronology.getYear : $l11 = l2 / l1
org.joda.time.chrono.JulianChronology.getInstance : $i1 = i0 - 1
org.joda.time.chrono.JulianChronology.getInstance : exitmonitor r1
org.joda.time.chrono.JulianChronology.getInstance : return r3
org.joda.time.chrono.JulianChronology.getInstance : $r6 = <org.joda.time.chrono.JulianChronology: java.util.Map cCache>
org.joda.time.chrono.JulianChronology.getInstance : if r0 != null goto $r6 = <org.joda.time.chrono.JulianChronology: java.util.Map cCache>
org.joda.time.chrono.JulianChronology.getInstance : if r3 != null goto exitmonitor r1
org.joda.time.chrono.JulianChronology.getInstance : goto [?= (branch)]
org.joda.time.chrono.JulianChronology.getInstance : $r7 = <org.joda.time.chrono.JulianChronology: java.util.Map cCache>
org.joda.time.chrono.JulianChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>(r0, 4)
org.joda.time.chrono.JulianChronology.getInstance : if r2 != null goto $i1 = i0 - 1
org.joda.time.MutableDateTime.now : $r2 = new org.joda.time.MutableDateTime
org.joda.time.MutableDateTime.now : if r0 != null goto $r2 = new org.joda.time.MutableDateTime
org.joda.time.field.PreciseDurationField.getDifferenceAsLong : l2 = staticinvoke <org.joda.time.field.FieldUtils: long safeSubtract(long,long)>(l0, l1)
org.joda.time.field.PreciseDurationField.getDifferenceAsLong : $l3 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis>
org.joda.time.field.BaseDurationField.isSupported : return 1
org.joda.time.chrono.AssembledChronology.days : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays>
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i5 = r0.<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int iMaxParsedDigits>
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : return i19
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if z0 == 0 goto $r6 = r0.<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: org.joda.time.DateTimeFieldType iFieldType>
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i19 = i0 + i2
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if i2 < 9 goto i4 = i0
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if i21 >= i19 goto (branch)
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i21 = i4 + 1
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i24 = i20 << 3
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if i2 != 0 goto (branch)
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : z0 = 0
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if z0 == 0 goto i21 = i4 + 1
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $r6 = r0.<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: org.joda.time.DateTimeFieldType iFieldType>
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : goto [?= i19 = i0 + i2]
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i2 = i2 + 1
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i2 = 0
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : goto [?= staticinvoke <edu.washington.cs.dt.impact.util.Tracer: void trace(java.lang.String,java.lang.String)>("if i2 >= i1 goto (branch)", "org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto")]
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if c3 < 48 goto (branch)
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i4 = i0
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if i2 >= i1 goto (branch)
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i8 = i0 + i2
org.joda.time.DateTimeZone.convertLocalToUTC : $l5 = (long) i2
org.joda.time.DateTimeZone.convertLocalToUTC : i2 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l1)
org.joda.time.DateTimeZone.convertLocalToUTC : return l3
org.joda.time.DateTimeZone.convertLocalToUTC : i4 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l3)
org.joda.time.DateTimeZone.convertLocalToUTC : if i4 != i2 goto $l6 = virtualinvoke r0.<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>(l0, z0)
org.joda.time.PeriodType.indexOf : return i0
org.joda.time.PeriodType.indexOf : $r2 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.PeriodType.indexOf : i0 = 0
org.joda.time.chrono.GJEraDateTimeField.get : $r1 = r0.<org.joda.time.chrono.GJEraDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.GJEraDateTimeField.get : return 1
org.joda.time.DateTimeUtils.getInstantChronology : if r1 != null goto return r1
org.joda.time.DateTimeUtils.getInstantChronology : r1 = interfaceinvoke r0.<org.joda.time.ReadableInstant: org.joda.time.Chronology getChronology()>()
org.joda.time.DateTimeUtils.getInstantChronology : if r0 != null goto r1 = interfaceinvoke r0.<org.joda.time.ReadableInstant: org.joda.time.Chronology getChronology()>()
org.joda.time.DateTimeUtils.getInstantChronology : return r1
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r7 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r10 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $b0 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: byte iOrdinal>
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r9 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.format.DateTimeParserBucket.saveField : $i4 = i0 + 1
org.joda.time.format.DateTimeParserBucket.saveField : r2 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields>
org.joda.time.format.DateTimeParserBucket.saveField : i0 = r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount>
org.joda.time.format.DateTimeParserBucket.saveField : $r2 = new org.joda.time.format.DateTimeParserBucket$SavedField
org.joda.time.format.DateTimeParserBucket.saveField : r2[i0] = r1
org.joda.time.format.DateTimeParserBucket.saveField : r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState> = null
org.joda.time.format.DateTimeParserBucket.saveField : $i1 = lengthof r2
org.joda.time.chrono.GregorianChronology.getMinYear : return -292275054
org.joda.time.Period.minusMillis : $i1 = neg i0
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getUnitMillis : $r1 = r0.<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: org.joda.time.field.ImpreciseDateTimeField this$0>
