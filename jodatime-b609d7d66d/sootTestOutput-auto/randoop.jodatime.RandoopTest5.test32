org.joda.time.MutablePeriod.clear : $i0 = virtualinvoke r0.<org.joda.time.MutablePeriod: int size()>()
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.isPrecise : return 0
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r9 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField days()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r13 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField seconds()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r6 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField years()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r12 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField minutes()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r14 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField millis()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r8 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField weeks()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r7 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField months()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r11 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField hours()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal>
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 1000 goto (branch)
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 10 goto (branch)
org.joda.time.format.FormatUtils.appendPaddedInteger : if i1 <= i15 goto $r10 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0)
org.joda.time.format.FormatUtils.appendPaddedInteger : i15 = 3
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 100 goto (branch)
org.joda.time.format.FormatUtils.appendPaddedInteger : $r10 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0)
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 0 goto (branch)
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.get : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.get : $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.chrono.BaseChronology.get : l2 = virtualinvoke r3.<org.joda.time.DurationField: long add(long,int)>(l2, i4)
org.joda.time.chrono.BaseChronology.get : $b5 = l0 cmp l1
org.joda.time.chrono.BaseChronology.get : return r2
org.joda.time.chrono.BaseChronology.get : $r4 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>(i3)
org.joda.time.chrono.BaseChronology.get : i2 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int size()>()
org.joda.time.chrono.BaseChronology.get : l2 = 0L
org.joda.time.chrono.BaseChronology.get : i3 = 0
org.joda.time.chrono.BaseChronology.get : l0 = virtualinvoke r3.<org.joda.time.DurationField: long add(long,int)>(l0, i4)
org.joda.time.chrono.BaseChronology.get : i1 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int size()>()
org.joda.time.chrono.BaseChronology.get : i4 = virtualinvoke r3.<org.joda.time.DurationField: int getDifference(long,long)>(l1, l0)
org.joda.time.chrono.BaseChronology.get : i4 = virtualinvoke r3.<org.joda.time.DurationField: int getDifference(long,long)>(l0, l2)
org.joda.time.chrono.BaseChronology.get : $b5 = l0 cmp 0L
org.joda.time.chrono.BaseChronology.get : r2 = newarray (int)[i1]
org.joda.time.chrono.BaseChronology.get : r2 = newarray (int)[i2]
org.joda.time.chrono.BaseChronology.get : $z0 = virtualinvoke r3.<org.joda.time.DurationField: boolean isPrecise()>()
org.joda.time.chrono.BaseChronology.get : r2[i3] = i4
org.joda.time.chrono.JulianChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.base.BasePeriod.getPeriodType : $r1 = r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType>
org.joda.time.base.BaseInterval.getChronology : $r1 = r0.<org.joda.time.base.BaseInterval: org.joda.time.Chronology iChronology>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.countFieldsToPrint : return 1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.countFieldsToPrint : $i1 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iPrintZeroSetting>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.countFieldsToPrint : if i0 > 0 goto $i1 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iPrintZeroSetting>
org.joda.time.base.AbstractInstant.isBefore : $l1 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: long getMillis()>()
org.joda.time.base.AbstractInstant.isBefore : $z0 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: boolean isBefore(long)>(l0)
org.joda.time.base.AbstractInstant.isBefore : l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>(r1)
org.joda.time.base.BasePeriod.addField : $r2 = r0.<org.joda.time.base.BasePeriod: int[] iValues>
org.joda.time.format.FormatUtils.calculateDigitCount : $d1 = staticinvoke <java.lang.Math: double log(double)>($d0)
org.joda.time.format.FormatUtils.calculateDigitCount : $b1 = l0 cmp 0L
org.joda.time.format.FormatUtils.calculateDigitCount : $b6 = l0 cmp 10L
org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : $r4 = r3[i2]
org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : i1 = 0
org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : i2 = lengthof r3
org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : r3 = r0.<org.joda.time.format.PeriodFormatterBuilder$Composite: org.joda.time.format.PeriodPrinter[] iPrinters>
org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : return i1
org.joda.time.format.FormatUtils.appendUnpaddedInteger : $i4 = i0 + 1
org.joda.time.format.FormatUtils.appendUnpaddedInteger : if i0 >= 10 goto (branch)
org.joda.time.format.FormatUtils.appendUnpaddedInteger : $r6 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0)
org.joda.time.format.FormatUtils.appendUnpaddedInteger : if i0 >= 100 goto $r6 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0)
org.joda.time.format.FormatUtils.appendUnpaddedInteger : $i6 = i1 + 48
org.joda.time.format.FormatUtils.appendUnpaddedInteger : $i8 = i1 << 3
org.joda.time.format.FormatUtils.appendUnpaddedInteger : goto [?= return]
org.joda.time.format.FormatUtils.appendUnpaddedInteger : $i2 = i0 + 48
org.joda.time.format.FormatUtils.appendUnpaddedInteger : if i0 >= 0 goto (branch)
org.joda.time.field.PreciseDurationDateTimeField.set : $i4 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int get(long)>(l0)
org.joda.time.field.PreciseDurationDateTimeField.set : $i2 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int getMinimumValue()>()
org.joda.time.field.PreciseDurationDateTimeField.set : $i3 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int getMaximumValueForSet(long,int)>(l0, i1)
org.joda.time.base.BasePeriod.addFieldInto : if i1 != -1 goto $i2 = r1[i1]
org.joda.time.base.BasePeriod.addFieldInto : i1 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int indexOf(org.joda.time.DurationFieldType)>(r2)
org.joda.time.base.BasePeriod.addFieldInto : $i2 = r1[i1]
org.joda.time.base.AbstractInterval.checkInterval : $b2 = l1 cmp l0
org.joda.time.DateMidnight.toLocalDate : $r1 = new org.joda.time.LocalDate
org.joda.time.chrono.BasicGJChronology.getYearDifference : $z1 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i2)
org.joda.time.chrono.BasicGJChronology.getYearDifference : $l7 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMillis(int)>(i2)
org.joda.time.chrono.BasicGJChronology.getYearDifference : $l12 = (long) i6
org.joda.time.chrono.BasicGJChronology.getYearDifference : i6 = i2 - i3
org.joda.time.chrono.BasicGJChronology.getYearDifference : $b11 = l4 cmp l5
org.joda.time.chrono.BasicGJChronology.getYearDifference : $b9 = l5 cmp 5097600000L
org.joda.time.chrono.BasicGJChronology.getYearDifference : $l8 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMillis(int)>(i3)
org.joda.time.chrono.BasicGJChronology.getYearDifference : i3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getYear(long)>(l1)
org.joda.time.chrono.BasicGJChronology.getYearDifference : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicGJChronology.getYearDifference : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i3)
org.joda.time.DurationFieldType.seconds : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType SECONDS_TYPE>
org.joda.time.field.PreciseDurationField.isPrecise : return 1
org.joda.time.base.BasePeriod.setField : $r2 = r0.<org.joda.time.base.BasePeriod: int[] iValues>
org.joda.time.base.AbstractInterval.isAfter : $l1 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: long getStartMillis()>()
org.joda.time.chrono.GregorianChronology.getAverageMillisPerYearDividedByTwo : return 15778476000L
org.joda.time.Interval.withChronology : $r3 = new org.joda.time.Interval
org.joda.time.Interval.withChronology : $r2 = virtualinvoke r0.<org.joda.time.Interval: org.joda.time.Chronology getChronology()>()
org.joda.time.base.BaseDateTime.checkInstant : return l0
org.joda.time.chrono.AssembledChronology.months : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMonths>
org.joda.time.chrono.ISOChronology.getInstance : if r0 != null goto $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0)
org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0)
org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache>
org.joda.time.chrono.ISOChronology.getInstance : return r1
org.joda.time.chrono.ISOChronology.getInstance : if r1 == null goto $r7 = <org.joda.time.chrono.ISOChronology: java.util.Map cCache>
org.joda.time.chrono.ISOChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $r3 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iPrefix>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $l9 = staticinvoke <java.lang.Math: long abs(long)>(l0)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $i8 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $i4 = staticinvoke <org.joda.time.format.FormatUtils: int calculateDigitCount(long)>(l0)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : i7 = staticinvoke <java.lang.Math: int max(int,int)>(i1, 4)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : return 0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $r6 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iSuffix>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $r5 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iSuffix>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : i2 = (int) l0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $b3 = l0 cmp 9223372036854775807L
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : i1 = i7 + 1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $i6 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : l0 = virtualinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>(r1)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : l0 = l0 / 1000L
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : return i1
org.joda.time.Duration.plus : if r1 != null goto $l0 = interfaceinvoke r1.<org.joda.time.ReadableDuration: long getMillis()>()
org.joda.time.Duration.plus : $l0 = interfaceinvoke r1.<org.joda.time.ReadableDuration: long getMillis()>()
org.joda.time.base.BasePeriod.addPeriodInto : r3 = interfaceinvoke r2.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>(i0)
org.joda.time.base.BasePeriod.addPeriodInto : if i3 != -1 goto $i4 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int getValue(int)>(i3)
org.joda.time.base.BasePeriod.addPeriodInto : i0 = 0
org.joda.time.base.BasePeriod.addPeriodInto : if i2 == 0 goto i0 = i0 + 1
org.joda.time.base.BasePeriod.addPeriodInto : i3 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int indexOf(org.joda.time.DurationFieldType)>(r3)
org.joda.time.base.BasePeriod.addPeriodInto : i2 = interfaceinvoke r2.<org.joda.time.ReadablePeriod: int getValue(int)>(i0)
org.joda.time.base.BasePeriod.addPeriodInto : return r1
org.joda.time.base.BasePeriod.addPeriodInto : $i4 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int getValue(int)>(i3)
org.joda.time.base.BaseSingleFieldPeriod.between : r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>(r0)
org.joda.time.base.BaseSingleFieldPeriod.between : return i0
org.joda.time.base.BaseSingleFieldPeriod.between : $r5 = virtualinvoke r2.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>(r3)
org.joda.time.base.BaseSingleFieldPeriod.between : if r0 == null goto $r4 = new java.lang.IllegalArgumentException
org.joda.time.DurationFieldType.millis : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MILLIS_TYPE>
org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : i1 = 0
org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : $r5 = r4[i1]
org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : i0 = lengthof r4
org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$Composite: org.joda.time.format.PeriodPrinter[] iPrinters>
org.joda.time.format.PeriodFormatterBuilder$Literal.calculatePrintedLength : $r3 = r0.<org.joda.time.format.PeriodFormatterBuilder$Literal: java.lang.String iText>
org.joda.time.MutablePeriod.setMonths : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>()
org.joda.time.chrono.BasicChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.BasicChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>
org.joda.time.base.AbstractPeriod.getFieldType : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.chrono.AssembledChronology.dayOfMonth : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth>
org.joda.time.chrono.ZonedChronology$ZonedDurationField.isPrecise : $z0 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean iTimeField>
org.joda.time.chrono.ZonedChronology.getZone : $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: java.lang.Object getParam()>()
org.joda.time.MutableDateTime.setChronology : specialinvoke r0.<org.joda.time.base.BaseDateTime: void setChronology(org.joda.time.Chronology)>(r1)
org.joda.time.field.MillisDurationField.getDifference : $l2 = staticinvoke <org.joda.time.field.FieldUtils: long safeSubtract(long,long)>(l0, l1)
org.joda.time.chrono.AssembledChronology.hours : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHours>
org.joda.time.chrono.AssembledChronology.years : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iYears>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $r4 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $r6 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $r10 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $r3 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $r5 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : tableswitch(i0) {     case 0: goto $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>();     case 1: goto $r3 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>();     case 2: goto $r4 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>();     case 3: goto $r5 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>();     case 4: goto $r6 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>();     case 5: goto $r7 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>();     case 6: goto $r8 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>();     case 7: goto $r9 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>();     case 8: goto $r10 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>();     case 9: goto $r10 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>();     default: goto return 0; }
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $r7 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>()
org.joda.time.DateTimeUtils.getChronology : if r0 != null goto return r0
org.joda.time.DateTimeUtils.getChronology : return r0
org.joda.time.DateTimeUtils.getChronology : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>()
org.joda.time.base.BasePeriod.setValues : $r2 = r0.<org.joda.time.base.BasePeriod: int[] iValues>
org.joda.time.format.ISOPeriodFormat.standard : $r0 = <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter cStandard>
org.joda.time.format.ISOPeriodFormat.standard : $r19 = <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter cStandard>
org.joda.time.Years.yearsBetween : $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>()
org.joda.time.Years.yearsBetween : $r3 = staticinvoke <org.joda.time.Years: org.joda.time.Years years(int)>(i0)
org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $b1 = l0 cmp 0L
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l2 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : $l3 = (long) i1
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DateTimeZone iZone>
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : return i1
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : $l4 = l0 ^ l2
org.joda.time.chrono.AssembledChronology.year : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear>
org.joda.time.DateTimeZone.getMillisKeepLocal : return l0
org.joda.time.DateTimeZone.getMillisKeepLocal : if r1 != null goto (branch)
org.joda.time.DateTimeZone.getMillisKeepLocal : if r1 != r0 goto l1 = virtualinvoke r0.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>(l0)
org.joda.time.base.AbstractPeriod.toString : $r1 = staticinvoke <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>()
org.joda.time.chrono.JulianChronology.getInstanceUTC : $r0 = <org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology INSTANCE_UTC>
org.joda.time.base.AbstractPeriod.indexOf : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.base.BasePeriod.setFieldInto : if i1 != -1 goto r1[i1] = i0
org.joda.time.base.BasePeriod.setFieldInto : i1 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int indexOf(org.joda.time.DurationFieldType)>(r2)
org.joda.time.base.BasePeriod.setFieldInto : r1[i1] = i0
org.joda.time.DateTimeUtils.getPeriodType : if r0 != null goto return r0
org.joda.time.DateTimeUtils.getPeriodType : $r1 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType standard()>()
org.joda.time.DateTimeUtils.getPeriodType : return r0
org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getMinimumValue : return 1
org.joda.time.base.BaseInterval.getEndMillis : $l0 = r0.<org.joda.time.base.BaseInterval: long iEndMillis>
org.joda.time.base.BasePeriod.getValue : $r1 = r0.<org.joda.time.base.BasePeriod: int[] iValues>
org.joda.time.field.MillisDurationField.add : $l2 = (long) i1
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : $l3 = (long) i1
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DateTimeZone iZone>
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : return i1
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetToAdd : $l4 = l0 ^ l2
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r7 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : return 9223372036854775807L
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : r2 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r11 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i18 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iPrintZeroSetting>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : if r2 == null goto $i5 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $b17 = l0 cmp 0L
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : return l0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : goto [?= $b17 = l0 cmp 0L]
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r3 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i5 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r6 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $l14 = (long) i1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r8 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $z1 = virtualinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isZero(org.joda.time.ReadablePeriod)>(r1)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r12 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i3 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iPrintZeroSetting>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r4 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r5 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>()
org.joda.time.DurationFieldType.hours : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType HOURS_TYPE>
org.joda.time.chrono.JulianChronology.getAverageMillisPerYearDividedByTwo : return 15778800000L
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $r1 = <org.joda.time.chrono.BasicGJChronology: long[] MAX_TOTAL_MILLIS_BY_MONTH_ARRAY>
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0)
org.joda.time.PeriodType.yearWeekDayTime : if r0 != null goto return r0
org.joda.time.PeriodType.yearWeekDayTime : r0 = <org.joda.time.PeriodType: org.joda.time.PeriodType cYWDTime>
org.joda.time.PeriodType.yearWeekDayTime : return r0
org.joda.time.Duration.standardHours : $r1 = new org.joda.time.Duration
org.joda.time.Duration.standardHours : $b1 = l0 cmp 0L
org.joda.time.chrono.BasicYearDateTimeField.getDifferenceAsLong : $b2 = l0 cmp l1
org.joda.time.chrono.BasicYearDateTimeField.getDifferenceAsLong : $r2 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.getDifferenceAsLong : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.field.FieldUtils.safeSubtract : $l3 = l0 ^ l2
org.joda.time.field.FieldUtils.safeSubtract : return l2
org.joda.time.field.FieldUtils.safeSubtract : l2 = l0 - l1
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : return l0
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : if i1 != 0 goto $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : return i0
org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : i0 = 0
org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : $r4 = r3[i1]
org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : r3 = r0.<org.joda.time.format.PeriodFormatterBuilder$Composite: org.joda.time.format.PeriodPrinter[] iPrinters>
org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : i1 = lengthof r3
org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DurationField iField>
org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : $z0 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: boolean iTimeField>
org.joda.time.chrono.ZonedChronology$ZonedDurationField.add : i2 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>(l0)
org.joda.time.DurationFieldType.days : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType DAYS_TYPE>
org.joda.time.MutableDateTime.setMillis : specialinvoke r0.<org.joda.time.base.BaseDateTime: void setMillis(long)>(l0)
org.joda.time.MutableDateTime.setMillis : goto [?= specialinvoke r0.<org.joda.time.base.BaseDateTime: void setMillis(long)>(l0)]
org.joda.time.MutableDateTime.setMillis : $i1 = r0.<org.joda.time.MutableDateTime: int iRoundingMode>
org.joda.time.chrono.BasicChronology.getYearInfo : if r1 == null goto $r3 = new org.joda.time.chrono.BasicChronology$YearInfo
org.joda.time.chrono.BasicChronology.getYearInfo : $r2 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache>
org.joda.time.chrono.BasicChronology.getYearInfo : return r1
org.joda.time.DateTimeUtils.currentTimeMillis : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider>
org.joda.time.chrono.AssembledChronology.minutes : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMinutes>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $b10 = l0 cmp l1
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $i11 = virtualinvoke r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int getDifference(long,long)>(l1, l0)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r4 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r10 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : return l6
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l25 = virtualinvoke $r11.<org.joda.time.chrono.BasicChronology: long getYearMonthMillis(int,int)>(i4, i5)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $b26 = l24 cmp l9
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r11 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : i7 = virtualinvoke $r5.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l0, i2, i3)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l23 = virtualinvoke $r10.<org.joda.time.chrono.BasicChronology: long getYearMonthMillis(int,int)>(i2, i3)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $i14 = i2 - i4
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r6 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i1)
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : return $b6
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMillis(int)>(i1)
org.joda.time.base.AbstractDuration.compareTo : $b3 = l0 cmp l1
org.joda.time.base.AbstractDuration.compareTo : $b2 = l0 cmp l1
org.joda.time.base.AbstractDuration.compareTo : l0 = virtualinvoke r0.<org.joda.time.base.AbstractDuration: long getMillis()>()
org.joda.time.base.AbstractDuration.compareTo : return 0
org.joda.time.base.AbstractDuration.compareTo : l1 = interfaceinvoke r1.<org.joda.time.ReadableDuration: long getMillis()>()
org.joda.time.base.BaseDateTime.setChronology : $r2 = virtualinvoke r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology checkChronology(org.joda.time.Chronology)>(r1)
org.joda.time.base.BasePeriod.addPeriod : $r2 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int[] getValues()>()
org.joda.time.base.BasePeriod.addPeriod : if r1 == null goto return
org.joda.time.PeriodType.size : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.field.PreciseDurationField.add : $l5 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l0, l2)
org.joda.time.field.PreciseDurationField.add : $l3 = (long) i1
org.joda.time.PeriodType.getIndexedField : $r2 = r0.<org.joda.time.PeriodType: int[] iIndices>
org.joda.time.PeriodType.getIndexedField : if i1 != -1 goto $i2 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int getValue(int)>(i1)
org.joda.time.MutableDateTime.setWeekOfWeekyear : $r1 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>()
org.joda.time.base.AbstractDuration.isShorterThan : if r1 != null goto $i0 = virtualinvoke r0.<org.joda.time.base.AbstractDuration: int compareTo(org.joda.time.ReadableDuration)>(r1)
org.joda.time.base.AbstractDuration.isShorterThan : $i0 = virtualinvoke r0.<org.joda.time.base.AbstractDuration: int compareTo(org.joda.time.ReadableDuration)>(r1)
org.joda.time.MutablePeriod.addDays : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>()
org.joda.time.chrono.JulianChronology.isLeapYear : $i1 = i0 & 3
org.joda.time.DateTimeZone.getDefault : if r0 != null goto return r0
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.field.BaseDurationField.getDifference : $l2 = virtualinvoke r0.<org.joda.time.field.BaseDurationField: long getDifferenceAsLong(long,long)>(l0, l1)
org.joda.time.base.BaseDateTime.checkChronology : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.tz.FixedDateTimeZone.getOffset : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset>
org.joda.time.chrono.JulianChronology.withUTC : $r1 = <org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology INSTANCE_UTC>
org.joda.time.Years.years : lookupswitch(i0) {     case -2147483648: goto $r5 = <org.joda.time.Years: org.joda.time.Years MIN_VALUE>;     case 0: goto $r0 = <org.joda.time.Years: org.joda.time.Years ZERO>;     case 1: goto $r1 = <org.joda.time.Years: org.joda.time.Years ONE>;     case 2: goto $r2 = <org.joda.time.Years: org.joda.time.Years TWO>;     case 3: goto $r3 = <org.joda.time.Years: org.joda.time.Years THREE>;     case 2147483647: goto $r4 = <org.joda.time.Years: org.joda.time.Years MAX_VALUE>;     default: goto $r6 = new org.joda.time.Years; }
org.joda.time.Years.years : $r0 = <org.joda.time.Years: org.joda.time.Years ZERO>
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.printTo : $r2 = r0.<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: java.lang.String iText>
org.joda.time.DateTimeZone.convertUTCToLocal : i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0)
org.joda.time.DateTimeZone.convertUTCToLocal : $l3 = (long) i1
org.joda.time.DateTimeZone.convertUTCToLocal : return l2
org.joda.time.DateTimeZone.convertUTCToLocal : $l4 = l0 ^ l2
org.joda.time.MutablePeriod.addMillis : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>()
org.joda.time.base.BaseDateTime.getMillis : $l0 = r0.<org.joda.time.base.BaseDateTime: long iMillis>
org.joda.time.chrono.BasicYearDateTimeField.add : if i1 != 0 goto i2 = virtualinvoke r0.<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>(l0)
org.joda.time.chrono.BasicYearDateTimeField.add : return l0
org.joda.time.MutablePeriod.getWeeks : $r1 = virtualinvoke r0.<org.joda.time.MutablePeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Duration.withDurationAdded : $b4 = l0 cmp 0L
org.joda.time.Duration.withDurationAdded : $r1 = new org.joda.time.Duration
org.joda.time.Duration.withDurationAdded : l2 = staticinvoke <org.joda.time.field.FieldUtils: long safeMultiply(long,int)>(l0, i1)
org.joda.time.Duration.withDurationAdded : $l5 = virtualinvoke r0.<org.joda.time.Duration: long getMillis()>()
org.joda.time.MutablePeriod.addYears : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>()
org.joda.time.DurationFieldType.minutes : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MINUTES_TYPE>
org.joda.time.MutablePeriod.setPeriod : $r3 = interfaceinvoke r1.<org.joda.time.ReadableInterval: org.joda.time.Chronology getChronology()>()
org.joda.time.MutablePeriod.setPeriod : virtualinvoke r0.<org.joda.time.MutablePeriod: void setPeriod(long,org.joda.time.Chronology)>(l0, null)
org.joda.time.MutablePeriod.setPeriod : $r3 = virtualinvoke r2.<org.joda.time.Chronology: int[] get(org.joda.time.ReadablePeriod,long)>(r0, l0)
org.joda.time.MutablePeriod.setPeriod : $r3 = virtualinvoke r2.<org.joda.time.Chronology: int[] get(org.joda.time.ReadablePeriod,long,long)>(r0, l0, l1)
org.joda.time.MutablePeriod.setPeriod : $l0 = interfaceinvoke r1.<org.joda.time.ReadableInterval: long getStartMillis()>()
org.joda.time.MutablePeriod.setPeriod : if r1 != null goto $r3 = interfaceinvoke r1.<org.joda.time.ReadableInterval: org.joda.time.Chronology getChronology()>()
org.joda.time.MutablePeriod.setPeriod : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.PeriodType.isSupported : $i0 = virtualinvoke r0.<org.joda.time.PeriodType: int indexOf(org.joda.time.DurationFieldType)>(r1)
org.joda.time.PeriodType.standard : if r0 != null goto return r0
org.joda.time.PeriodType.standard : r0 = <org.joda.time.PeriodType: org.joda.time.PeriodType cStandard>
org.joda.time.PeriodType.standard : return r0
org.joda.time.base.BaseInterval.getStartMillis : $l0 = r0.<org.joda.time.base.BaseInterval: long iStartMillis>
org.joda.time.base.BaseDateTime.getChronology : $r1 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology>
org.joda.time.chrono.BasicChronology.getYearMonthMillis : return l4
org.joda.time.chrono.BasicChronology.getYearMonthMillis : l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0)
org.joda.time.chrono.BasicChronology.getYearMonthMillis : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i0, i1)
org.joda.time.chrono.GregorianChronology.isLeapYear : $i1 = i0 & 3
org.joda.time.MutableDateTime.add : $l1 = interfaceinvoke r1.<org.joda.time.ReadableDuration: long getMillis()>()
org.joda.time.MutableDateTime.add : $l1 = virtualinvoke r0.<org.joda.time.MutableDateTime: long getMillis()>()
org.joda.time.MutableDateTime.add : virtualinvoke r0.<org.joda.time.MutableDateTime: void add(org.joda.time.ReadableDuration,int)>(r1, 1)
org.joda.time.MutableDateTime.add : if r1 == null goto return
org.joda.time.chrono.AssembledChronology.getParam : $r1 = r0.<org.joda.time.chrono.AssembledChronology: java.lang.Object iParam>
org.joda.time.format.PeriodFormatter.print : r2 = virtualinvoke r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter getPrinter()>()
org.joda.time.format.PeriodFormatter.print : $r4 = new java.lang.StringBuffer
org.joda.time.format.PeriodFormatter.print : specialinvoke r0.<org.joda.time.format.PeriodFormatter: void checkPeriod(org.joda.time.ReadablePeriod)>(r1)
org.joda.time.format.PeriodFormatter.print : $r6 = r0.<org.joda.time.format.PeriodFormatter: java.util.Locale iLocale>
org.joda.time.format.PeriodFormatter.print : $r7 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>()
org.joda.time.format.PeriodFormatter.print : specialinvoke r0.<org.joda.time.format.PeriodFormatter: void checkPrinter()>()
org.joda.time.chrono.BasicChronology.getDayOfWeek : $l9 = l1 + 3L
org.joda.time.chrono.BasicChronology.getDayOfWeek : l1 = l0 / 86400000L
org.joda.time.chrono.BasicChronology.getDayOfWeek : $b2 = l0 cmp 0L
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0)
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $r1 = <org.joda.time.chrono.BasicGJChronology: int[] MAX_DAYS_PER_MONTH_ARRAY>
org.joda.time.base.BasePeriod.checkPeriodType : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>(r1)
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.add : $r1 = r0.<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: org.joda.time.field.ImpreciseDateTimeField this$0>
org.joda.time.DateTimeUtils$OffsetMillisProvider.getMillis : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.joda.time.DurationFieldType.months : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MONTHS_TYPE>
org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : return i0
org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : $i3 = interfaceinvoke r4.<org.joda.time.format.PeriodPrinter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>(r1, r2)
org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : $i2 = interfaceinvoke r3.<org.joda.time.format.PeriodPrinter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>(r1, r2)
org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodPrinter iAfterPrinter>
org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : $z0 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: boolean iUseBefore>
org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : $z2 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: boolean iUseAfter>
org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : $r7 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: java.lang.String iText>
org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : r3 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodPrinter iBeforePrinter>
org.joda.time.chrono.AssembledChronology.millis : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMillis>
org.joda.time.field.FieldUtils.safeAdd : l2 = l0 + l1
org.joda.time.field.FieldUtils.safeAdd : $l3 = l0 ^ l2
org.joda.time.field.FieldUtils.safeAdd : return l2
org.joda.time.field.FieldUtils.safeAdd : return i2
org.joda.time.field.FieldUtils.safeAdd : $i3 = i0 ^ i2
org.joda.time.field.FieldUtils.safeAdd : i2 = i0 + i1
org.joda.time.chrono.AssembledChronology.weekOfWeekyear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekOfWeekyear>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, i3, 3)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $r8 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iSuffix>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $b4 = l0 cmp 9223372036854775807L
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : i2 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iMinPrintedDigits>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $i5 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $l8 = staticinvoke <java.lang.Math: long abs(long)>(l0)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $r7 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iSuffix>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iPrefix>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $i7 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : l0 = virtualinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>(r2)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : i1 = (int) l0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $i10 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : if i2 > 1 goto staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, i1, i2)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : staticinvoke <org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.StringBuffer,int)>(r1, i1)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $l6 = l0 / 1000L
org.joda.time.DateTimeUtils.getInstantMillis : $l1 = interfaceinvoke r0.<org.joda.time.ReadableInstant: long getMillis()>()
org.joda.time.DateTimeUtils.getInstantMillis : if r0 != null goto $l1 = interfaceinvoke r0.<org.joda.time.ReadableInstant: long getMillis()>()
org.joda.time.tz.FixedDateTimeZone.isFixed : return 1
org.joda.time.field.FieldUtils.safeToInt : $i3 = (int) l0
org.joda.time.field.FieldUtils.safeToInt : $b1 = -2147483648L cmp l0
org.joda.time.field.FieldUtils.safeMultiply : $l5 = (long) i1
org.joda.time.field.FieldUtils.safeMultiply : tableswitch(i1) {     case -1: goto $l3 = neg l0;     case 0: goto return 0L;     case 1: goto return l0;     default: goto $l4 = (long) i1; }
org.joda.time.field.FieldUtils.safeMultiply : return l2
org.joda.time.field.FieldUtils.safeMultiply : return l0
org.joda.time.field.FieldUtils.safeMultiply : $l4 = (long) i1
org.joda.time.format.PeriodFormatter.checkPrinter : $r1 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter iPrinter>
org.joda.time.field.FieldUtils.verifyValueBounds : if i0 < i1 goto $r1 = new org.joda.time.IllegalFieldValueException
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.set : $r4 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.set : $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.set : return l3
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.set : $r3 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.set : $i5 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>(l3)
org.joda.time.base.AbstractPeriod.get : $i1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int getValue(int)>(i0)
org.joda.time.base.AbstractPeriod.get : if i0 != -1 goto $i1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int getValue(int)>(i0)
org.joda.time.base.AbstractPeriod.get : i0 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int indexOf(org.joda.time.DurationFieldType)>(r1)
org.joda.time.field.ImpreciseDateTimeField.getDifference : $l2 = virtualinvoke r0.<org.joda.time.field.ImpreciseDateTimeField: long getDifferenceAsLong(long,long)>(l0, l1)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isZero : $i2 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int getValue(int)>(i0)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isZero : i0 = 0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isZero : return 0
org.joda.time.tz.FixedDateTimeZone.getOffsetFromLocal : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset>
org.joda.time.base.BaseDateTime.setMillis : $r1 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology>
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : $r11 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: java.lang.String iText>
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : interfaceinvoke r4.<org.joda.time.format.PeriodPrinter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>(r1, r2, r3)
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodPrinter iBeforePrinter>
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : $z0 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: boolean iUseBefore>
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : $z2 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: boolean iUseAfter>
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : interfaceinvoke r5.<org.joda.time.format.PeriodPrinter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>(r1, r2, r3)
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : r5 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodPrinter iAfterPrinter>
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.calculatePrintedLength : $r1 = r0.<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: java.lang.String iText>
org.joda.time.DateTimeUtils.getDurationMillis : $l0 = interfaceinvoke r0.<org.joda.time.ReadableDuration: long getMillis()>()
org.joda.time.DateTimeUtils.getDurationMillis : if r0 != null goto $l0 = interfaceinvoke r0.<org.joda.time.ReadableDuration: long getMillis()>()
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getDifference : $i2 = virtualinvoke $r1.<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>(l0, l1)
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getDifference : $r1 = r0.<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: org.joda.time.field.ImpreciseDateTimeField this$0>
org.joda.time.DateMidnight.checkInstant : $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.DurationFieldType.years : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType YEARS_TYPE>
org.joda.time.chrono.BasicChronology.getYearMillis : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>(i0)
org.joda.time.base.BaseDuration.getMillis : $l0 = r0.<org.joda.time.base.BaseDuration: long iMillis>
org.joda.time.DurationFieldType.weeks : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType WEEKS_TYPE>
org.joda.time.DateMidnight.now : if r0 != null goto $r2 = new org.joda.time.DateMidnight
org.joda.time.DateMidnight.now : $r2 = new org.joda.time.DateMidnight
org.joda.time.chrono.GregorianChronology.getApproxMillisAtEpochDividedByTwo : return 31083597720000L
org.joda.time.base.AbstractPeriod.getValues : $i3 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int getValue(int)>(i0)
org.joda.time.base.AbstractPeriod.getValues : i0 = 0
org.joda.time.base.AbstractPeriod.getValues : $i1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int size()>()
org.joda.time.base.AbstractPeriod.getValues : return r1
org.joda.time.chrono.JulianChronology.getApproxMillisAtEpochDividedByTwo : return 31083663600000L
org.joda.time.base.AbstractPeriod.size : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.field.MillisDurationField.isPrecise : return 1
org.joda.time.format.PeriodFormatter.checkPeriod : if r1 != null goto return
org.joda.time.MutablePeriod.add : $r2 = new org.joda.time.Period
org.joda.time.MutablePeriod.add : if r1 == null goto return
org.joda.time.MutablePeriod.add : specialinvoke r0.<org.joda.time.base.BasePeriod: void addPeriod(org.joda.time.ReadablePeriod)>(r1)
org.joda.time.chrono.BasicChronology.getDayOfMonth : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i1, i2)
org.joda.time.chrono.BasicChronology.getDayOfMonth : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1)
org.joda.time.chrono.BasicChronology.getDayOfMonth : $l6 = l0 - l5
org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $i5 = 8 - i2
org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0)
org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $i3 = r0.<org.joda.time.chrono.BasicChronology: int iMinDaysInFirstWeek>
org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDayOfWeek(long)>(l1)
org.joda.time.chrono.BasicChronology.getYear : $b12 = l5 cmp 0L
org.joda.time.chrono.BasicChronology.getYear : $b9 = l2 cmp 0L
org.joda.time.chrono.BasicChronology.getYear : l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i3)
org.joda.time.chrono.BasicChronology.getYear : $l7 = l0 >> 1
org.joda.time.chrono.BasicChronology.getYear : $b13 = l5 cmp 31536000000L
org.joda.time.chrono.BasicChronology.getYear : l5 = l0 - l4
org.joda.time.chrono.BasicChronology.getYear : return i3
org.joda.time.chrono.BasicChronology.getYear : l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getAverageMillisPerYearDividedByTwo()>()
org.joda.time.chrono.BasicChronology.getYear : $l11 = l2 / l1
org.joda.time.chrono.AssembledChronology.weeks : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeeks>
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference : $i4 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>(l0)
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DurationField iField>
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getDifference : i2 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: int getOffsetToAdd(long)>(l1)
org.joda.time.MutableDateTime.year : $r1 = new org.joda.time.MutableDateTime$Property
org.joda.time.field.PreciseDurationField.getDifferenceAsLong : l2 = staticinvoke <org.joda.time.field.FieldUtils: long safeSubtract(long,long)>(l0, l1)
org.joda.time.field.PreciseDurationField.getDifferenceAsLong : $l3 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis>
org.joda.time.chrono.AssembledChronology.days : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays>
org.joda.time.DateTimeZone.convertLocalToUTC : $l5 = (long) i2
org.joda.time.DateTimeZone.convertLocalToUTC : i2 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l1)
org.joda.time.DateTimeZone.convertLocalToUTC : return l3
org.joda.time.DateTimeZone.convertLocalToUTC : i4 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l3)
org.joda.time.DateTimeZone.convertLocalToUTC : if i4 != i2 goto $l6 = virtualinvoke r0.<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>(l0, z0)
org.joda.time.PeriodType.getFieldType : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.PeriodType.indexOf : return i0
org.joda.time.PeriodType.indexOf : $r2 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.PeriodType.indexOf : i0 = 0
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $b8 = l0 cmp l3
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $i7 = i1 + 1
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $l9 = l0 - l2
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getFirstWeekOfYearMillis(int)>(i1)
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $b4 = l0 cmp l2
org.joda.time.chrono.AssembledChronology.seconds : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iSeconds>
org.joda.time.DateTimeUtils.getInstantChronology : if r1 != null goto return r1
org.joda.time.DateTimeUtils.getInstantChronology : r1 = interfaceinvoke r0.<org.joda.time.ReadableInstant: org.joda.time.Chronology getChronology()>()
org.joda.time.DateTimeUtils.getInstantChronology : if r0 != null goto r1 = interfaceinvoke r0.<org.joda.time.ReadableInstant: org.joda.time.Chronology getChronology()>()
org.joda.time.DateTimeUtils.getInstantChronology : return r1
org.joda.time.format.PeriodFormatterBuilder$Literal.printTo : $r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$Literal: java.lang.String iText>
org.joda.time.format.PeriodFormatter.getPrinter : $r1 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter iPrinter>
org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getMaximumValueForSet : if i1 <= 52 goto $i2 = 52
