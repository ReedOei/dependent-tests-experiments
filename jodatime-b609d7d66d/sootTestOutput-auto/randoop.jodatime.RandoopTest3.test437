org.joda.time.chrono.AssembledChronology.era : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iEra>
org.joda.time.tz.FixedDateTimeZone.hashCode : $r1 = virtualinvoke r0.<org.joda.time.tz.FixedDateTimeZone: java.lang.String getID()>()
org.joda.time.DateTimeZone.getID : $r1 = r0.<org.joda.time.DateTimeZone: java.lang.String iID>
org.joda.time.chrono.BuddhistChronology.getInstance : $r3 = <org.joda.time.chrono.BuddhistChronology: java.util.Map cCache>
org.joda.time.chrono.BuddhistChronology.getInstance : if r0 != null goto $r3 = <org.joda.time.chrono.BuddhistChronology: java.util.Map cCache>
org.joda.time.chrono.BuddhistChronology.getInstance : if r1 != null goto return r1
org.joda.time.chrono.BuddhistChronology.getInstance : return r1
org.joda.time.chrono.BuddhistChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>()
org.joda.time.DateTimeZone.getDefault : if r0 != null goto return r0
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.chrono.AssembledChronology.dayOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfYear>
