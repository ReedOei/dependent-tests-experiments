org.joda.time.Years.minus : $i1 = staticinvoke <org.joda.time.field.FieldUtils: int safeNegate(int)>(i0)
org.joda.time.Years.minus : $i0 = virtualinvoke r1.<org.joda.time.Years: int getValue()>()
org.joda.time.Years.minus : if r1 != null goto $i0 = virtualinvoke r1.<org.joda.time.Years: int getValue()>()
org.joda.time.Years.getPeriodType : $r1 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType years()>()
org.joda.time.Years.negated : $i0 = virtualinvoke r0.<org.joda.time.Years: int getValue()>()
org.joda.time.PeriodType.years : if r0 != null goto return r0
org.joda.time.PeriodType.years : r0 = <org.joda.time.PeriodType: org.joda.time.PeriodType cYears>
org.joda.time.PeriodType.years : return r0
org.joda.time.Years.dividedBy : if i0 != 1 goto $i1 = virtualinvoke r0.<org.joda.time.Years: int getValue()>()
org.joda.time.Years.dividedBy : $i1 = virtualinvoke r0.<org.joda.time.Years: int getValue()>()
org.joda.time.field.FieldUtils.safeNegate : $i1 = neg i0
org.joda.time.field.FieldUtils.safeNegate : if i0 != -2147483648 goto $i1 = neg i0
org.joda.time.Years.plus : $i1 = virtualinvoke r0.<org.joda.time.Years: int getValue()>()
org.joda.time.Years.plus : if i0 != 0 goto $i1 = virtualinvoke r0.<org.joda.time.Years: int getValue()>()
org.joda.time.Years.years : $r6 = new org.joda.time.Years
org.joda.time.Years.years : $r1 = <org.joda.time.Years: org.joda.time.Years ONE>
org.joda.time.Years.years : lookupswitch(i0) {     case -2147483648: goto $r5 = <org.joda.time.Years: org.joda.time.Years MIN_VALUE>;     case 0: goto $r0 = <org.joda.time.Years: org.joda.time.Years ZERO>;     case 1: goto $r1 = <org.joda.time.Years: org.joda.time.Years ONE>;     case 2: goto $r2 = <org.joda.time.Years: org.joda.time.Years TWO>;     case 3: goto $r3 = <org.joda.time.Years: org.joda.time.Years THREE>;     case 2147483647: goto $r4 = <org.joda.time.Years: org.joda.time.Years MAX_VALUE>;     default: goto $r6 = new org.joda.time.Years; }
org.joda.time.Years.years : $r0 = <org.joda.time.Years: org.joda.time.Years ZERO>
org.joda.time.field.FieldUtils.safeAdd : return i2
org.joda.time.field.FieldUtils.safeAdd : $i3 = i0 ^ i2
org.joda.time.field.FieldUtils.safeAdd : i2 = i0 + i1
org.joda.time.base.BaseSingleFieldPeriod.compareTo : i1 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>()
org.joda.time.base.BaseSingleFieldPeriod.compareTo : if i1 >= i0 goto return 0
org.joda.time.base.BaseSingleFieldPeriod.compareTo : i0 = virtualinvoke r1.<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>()
org.joda.time.base.BaseSingleFieldPeriod.compareTo : return 0
org.joda.time.base.BaseSingleFieldPeriod.compareTo : $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>()
org.joda.time.base.BaseSingleFieldPeriod.compareTo : if i1 <= i0 goto (branch)
org.joda.time.base.BaseSingleFieldPeriod.getValue : $i0 = r0.<org.joda.time.base.BaseSingleFieldPeriod: int iPeriod>
