org.joda.time.LocalTime.getLocalMillis : $l0 = r0.<org.joda.time.LocalTime: long iLocalMillis>
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r6 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField years()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal>
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 10 goto (branch)
org.joda.time.format.FormatUtils.appendPaddedInteger : $i9 = i2 << 3
org.joda.time.format.FormatUtils.appendPaddedInteger : $i5 = i0 + 1
org.joda.time.format.FormatUtils.appendPaddedInteger : if i1 <= 2 goto $i5 = i0 + 1
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 100 goto (branch)
org.joda.time.format.FormatUtils.appendPaddedInteger : $i7 = i2 + 48
org.joda.time.format.FormatUtils.appendPaddedInteger : goto [?= return]
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 0 goto (branch)
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.get : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.get : $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.chrono.BaseChronology.get : $r3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i2)
org.joda.time.chrono.BaseChronology.get : $b5 = l0 cmp l1
org.joda.time.chrono.BaseChronology.get : return r2
org.joda.time.chrono.BaseChronology.get : i1 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>()
org.joda.time.chrono.BaseChronology.get : $r4 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>(i3)
org.joda.time.chrono.BaseChronology.get : i2 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int size()>()
org.joda.time.chrono.BaseChronology.get : r2 = newarray (int)[i1]
org.joda.time.chrono.BaseChronology.get : i3 = 0
org.joda.time.chrono.BaseChronology.get : i2 = 0
org.joda.time.chrono.BaseChronology.get : l0 = virtualinvoke r3.<org.joda.time.DurationField: long add(long,int)>(l0, i4)
org.joda.time.chrono.BaseChronology.get : i4 = virtualinvoke r3.<org.joda.time.DurationField: int getDifference(long,long)>(l1, l0)
org.joda.time.chrono.BaseChronology.get : r2 = newarray (int)[i2]
org.joda.time.chrono.BaseChronology.get : r2[i3] = i4
org.joda.time.format.DateTimeFormatter.requirePrinter : r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter iPrinter>
org.joda.time.format.DateTimeFormatter.requirePrinter : if r1 != null goto return r1
org.joda.time.format.DateTimeFormatter.requirePrinter : return r1
org.joda.time.chrono.ISOChronology.withUTC : $r1 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC>
org.joda.time.base.BaseSingleFieldPeriod.size : return 1
org.joda.time.chrono.LimitChronology$LimitDateTimeField.set : $r2 = virtualinvoke r0.<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DateTimeField getWrappedField()>()
org.joda.time.chrono.LimitChronology$LimitDateTimeField.set : $r3 = r0.<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.chrono.LimitChronology this$0>
org.joda.time.chrono.LimitChronology$LimitDateTimeField.set : return l2
org.joda.time.chrono.LimitChronology$LimitDateTimeField.set : $r1 = r0.<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.chrono.LimitChronology this$0>
org.joda.time.chrono.AssembledChronology.millisOfSecond : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfSecond>
org.joda.time.chrono.LimitChronology$LimitDurationField.add : $r3 = r0.<org.joda.time.chrono.LimitChronology$LimitDurationField: org.joda.time.chrono.LimitChronology this$0>
org.joda.time.chrono.LimitChronology$LimitDurationField.add : $r1 = r0.<org.joda.time.chrono.LimitChronology$LimitDurationField: org.joda.time.chrono.LimitChronology this$0>
org.joda.time.chrono.LimitChronology$LimitDurationField.add : return l2
org.joda.time.chrono.LimitChronology$LimitDurationField.add : $r2 = virtualinvoke r0.<org.joda.time.chrono.LimitChronology$LimitDurationField: org.joda.time.DurationField getWrappedField()>()
org.joda.time.chrono.BasicGJChronology.getYearDifference : $l7 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMillis(int)>(i2)
org.joda.time.chrono.BasicGJChronology.getYearDifference : $l12 = (long) i6
org.joda.time.chrono.BasicGJChronology.getYearDifference : i6 = i2 - i3
org.joda.time.chrono.BasicGJChronology.getYearDifference : $b11 = l4 cmp l5
org.joda.time.chrono.BasicGJChronology.getYearDifference : $b9 = l5 cmp 5097600000L
org.joda.time.chrono.BasicGJChronology.getYearDifference : $l8 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMillis(int)>(i3)
org.joda.time.chrono.BasicGJChronology.getYearDifference : i3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getYear(long)>(l1)
org.joda.time.chrono.BasicGJChronology.getYearDifference : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getYear(long)>(l0)
org.joda.time.base.AbstractPartial.getFieldType : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.Chronology getChronology()>()
org.joda.time.chrono.GregorianChronology.getAverageMillisPerYearDividedByTwo : return 15778476000L
org.joda.time.chrono.BaseChronology.set : i1 = 0
org.joda.time.chrono.BaseChronology.set : $r2 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i1)
org.joda.time.chrono.BaseChronology.set : return l0
org.joda.time.field.PreciseDurationDateTimeField.getMinimumValue : return 0
org.joda.time.chrono.ISOChronology.getInstance : if r0 != null goto $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0)
org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0)
org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache>
org.joda.time.chrono.ISOChronology.getInstance : return r1
org.joda.time.chrono.ISOChronology.getInstance : if r1 == null goto $r7 = <org.joda.time.chrono.ISOChronology: java.util.Map cCache>
org.joda.time.chrono.ISOChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>()
org.joda.time.TimeOfDay.secondOfMinute : $r1 = new org.joda.time.TimeOfDay$Property
org.joda.time.base.BaseSingleFieldPeriod.between : $z0 = staticinvoke <org.joda.time.DateTimeUtils: boolean isContiguous(org.joda.time.ReadablePartial)>(r0)
org.joda.time.base.BaseSingleFieldPeriod.between : $i6 = r12[0]
org.joda.time.base.BaseSingleFieldPeriod.between : if r0 == null goto $r3 = new java.lang.IllegalArgumentException
org.joda.time.base.BaseSingleFieldPeriod.between : $r5 = interfaceinvoke r0.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i0)
org.joda.time.base.BaseSingleFieldPeriod.between : i0 = 0
org.joda.time.base.BaseSingleFieldPeriod.between : $i2 = interfaceinvoke r0.<org.joda.time.ReadablePartial: int size()>()
org.joda.time.base.BaseSingleFieldPeriod.between : $l4 = virtualinvoke r11.<org.joda.time.Chronology: long set(org.joda.time.ReadablePartial,long)>(r0, 0L)
org.joda.time.base.BaseSingleFieldPeriod.between : $r9 = interfaceinvoke r0.<org.joda.time.ReadablePartial: org.joda.time.Chronology getChronology()>()
org.joda.time.DurationFieldType.millis : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MILLIS_TYPE>
org.joda.time.LocalTime.withMillisOfSecond : $r1 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>()
org.joda.time.chrono.BasicChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.BasicChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>
org.joda.time.chrono.BasicChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.ZonedChronology.getZone : $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: java.lang.Object getParam()>()
org.joda.time.chrono.AssembledChronology.hours : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHours>
org.joda.time.base.AbstractPartial.indexOfSupported : return i0
org.joda.time.base.AbstractPartial.indexOfSupported : i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DateTimeFieldType)>(r1)
org.joda.time.base.AbstractPartial.indexOfSupported : if i0 != -1 goto return i0
org.joda.time.chrono.AssembledChronology.years : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iYears>
org.joda.time.DateTimeUtils.getChronology : if r0 != null goto return r0
org.joda.time.DateTimeUtils.getChronology : return r0
org.joda.time.DateTimeUtils.getChronology : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>()
org.joda.time.field.DecoratedDateTimeField.getWrappedField : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.TimeOfDay.getField : $r6 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>()
org.joda.time.TimeOfDay.getField : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>()
org.joda.time.TimeOfDay.getField : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>()
org.joda.time.TimeOfDay.getField : $r5 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>()
org.joda.time.TimeOfDay.getField : tableswitch(i0) {     case 0: goto $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>();     case 1: goto $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>();     case 2: goto $r5 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>();     case 3: goto $r6 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>();     default: goto $r7 = new java.lang.IndexOutOfBoundsException; }
org.joda.time.Years.yearsBetween : $r3 = <org.joda.time.Years: org.joda.time.Years ZERO>
org.joda.time.Years.yearsBetween : $r9 = staticinvoke <org.joda.time.Years: org.joda.time.Years years(int)>(i3)
org.joda.time.Years.yearsBetween : $z0 = r0 instanceof org.joda.time.LocalDate
org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.DateTimeZone.getMillisKeepLocal : return l0
org.joda.time.DateTimeZone.getMillisKeepLocal : if r1 != null goto (branch)
org.joda.time.DateTimeZone.getMillisKeepLocal : if r1 != r0 goto l1 = virtualinvoke r0.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>(l0)
org.joda.time.LocalTime.size : return 4
org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : $l4 = l1 * l3
org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : goto [?= $r3 = newarray (long)[2]]
org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : l3 = 1000000000L
org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : tableswitch(i2) {     case 1: goto l3 = 10L;     case 2: goto l3 = 100L;     case 3: goto l3 = 1000L;     case 4: goto l3 = 10000L;     case 5: goto l3 = 100000L;     case 6: goto l3 = 1000000L;     case 7: goto l3 = 10000000L;     case 8: goto l3 = 100000000L;     case 9: goto l3 = 1000000000L;     case 10: goto l3 = 10000000000L;     case 11: goto l3 = 100000000000L;     case 12: goto l3 = 1000000000000L;     case 13: goto l3 = 10000000000000L;     case 14: goto l3 = 100000000000000L;     case 15: goto l3 = 1000000000000000L;     case 16: goto l3 = 10000000000000000L;     case 17: goto l3 = 100000000000000000L;     case 18: goto l3 = 1000000000000000000L;     default: goto l3 = 1L; }
org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : $r3 = newarray (long)[2]
org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : $r2 = virtualinvoke r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>()
org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : i2 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int iMaxDigits>
org.joda.time.TimeOfDay.getMillisOfSecond : $i0 = virtualinvoke r0.<org.joda.time.TimeOfDay: int getValue(int)>(3)
org.joda.time.tz.FixedDateTimeZone.hashCode : $r1 = virtualinvoke r0.<org.joda.time.tz.FixedDateTimeZone: java.lang.String getID()>()
org.joda.time.field.DecoratedDurationField.getWrappedField : $r1 = r0.<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField iField>
org.joda.time.format.DateTimeFormatter.printTo : $r5 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>
org.joda.time.format.DateTimeFormatter.printTo : if r2 != null goto $r5 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>
org.joda.time.format.DateTimeFormatter.printTo : r3 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter requirePrinter()>()
org.joda.time.TimeOfDay.getFieldType : $r1 = <org.joda.time.TimeOfDay: org.joda.time.DateTimeFieldType[] FIELD_TYPES>
org.joda.time.field.PreciseDurationField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis>
org.joda.time.chrono.BasicYearDateTimeField.getDifferenceAsLong : $b2 = l0 cmp l1
org.joda.time.chrono.BasicYearDateTimeField.getDifferenceAsLong : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.field.PreciseDateTimeField.getMaximumValue : $i0 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange>
org.joda.time.format.DateTimeFormatterBuilder$Composite.estimatePrintedLength : $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: int iPrintedLengthEstimate>
org.joda.time.chrono.EthiopicChronology.withUTC : $r1 = <org.joda.time.chrono.EthiopicChronology: org.joda.time.chrono.EthiopicChronology INSTANCE_UTC>
org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.DateTimeUtils.isContiguous : $r6 = virtualinvoke r2.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>()
org.joda.time.DateTimeUtils.isContiguous : if i0 <= 0 goto $r6 = virtualinvoke r2.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>()
org.joda.time.DateTimeUtils.isContiguous : $r4 = virtualinvoke r2.<org.joda.time.DateTimeField: org.joda.time.DurationField getRangeDurationField()>()
org.joda.time.DateTimeUtils.isContiguous : r2 = interfaceinvoke r0.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>(i0)
org.joda.time.DateTimeUtils.isContiguous : i0 = 0
org.joda.time.DateTimeUtils.isContiguous : return 1
org.joda.time.DateTimeUtils.isContiguous : if r0 != null goto r1 = null
org.joda.time.DateTimeUtils.isContiguous : r1 = null
org.joda.time.field.PreciseDateTimeField.set : $i4 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int get(long)>(l0)
org.joda.time.field.PreciseDateTimeField.set : $i2 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int getMinimumValue()>()
org.joda.time.chrono.LimitChronology.checkLimits : $r3 = r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime iLowerLimit>
org.joda.time.chrono.LimitChronology.checkLimits : $r5 = r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime iUpperLimit>
org.joda.time.field.MillisDurationField.getType : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>()
org.joda.time.base.AbstractPartial.get : $i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int indexOfSupported(org.joda.time.DateTimeFieldType)>(r1)
org.joda.time.base.AbstractPartial.indexOf : return i0
org.joda.time.base.AbstractPartial.indexOf : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i0)
org.joda.time.base.AbstractPartial.indexOf : i0 = 0
org.joda.time.chrono.BasicChronology.getYearInfo : if r1 == null goto $r3 = new org.joda.time.chrono.BasicChronology$YearInfo
org.joda.time.chrono.BasicChronology.getYearInfo : $r2 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache>
org.joda.time.chrono.BasicChronology.getYearInfo : return r1
org.joda.time.DateTimeUtils.currentTimeMillis : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider>
org.joda.time.field.PreciseDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.field.PreciseDateTimeField: org.joda.time.DurationField iRangeField>
org.joda.time.base.AbstractPartial.getField : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.Chronology getChronology()>()
org.joda.time.Years.getFieldType : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>()
org.joda.time.chrono.LimitChronology$LimitDateTimeField.get : $r2 = virtualinvoke r0.<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DateTimeField getWrappedField()>()
org.joda.time.chrono.LimitChronology$LimitDateTimeField.get : $r1 = r0.<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.chrono.LimitChronology this$0>
org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDurationField.add : $l5 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l0, l2)
org.joda.time.field.PreciseDurationField.add : $l3 = (long) i1
org.joda.time.DateTimeZone.getID : $r1 = r0.<org.joda.time.DateTimeZone: java.lang.String iID>
org.joda.time.LocalTime.minusHours : $r1 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>()
org.joda.time.LocalTime.minusHours : $r3 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.LocalTime withLocalMillis(long)>(l1)
org.joda.time.LocalTime.minusHours : if i0 != 0 goto $r1 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>()
org.joda.time.field.PreciseDurationDateTimeField.getDurationField : $r1 = r0.<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField iUnitField>
org.joda.time.DateTimeZone.getDefault : if r0 != null goto return r0
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.field.BaseDateTimeField.getType : $r1 = r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType iType>
org.joda.time.tz.FixedDateTimeZone.getOffset : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset>
org.joda.time.Years.years : lookupswitch(i0) {     case -2147483648: goto $r5 = <org.joda.time.Years: org.joda.time.Years MIN_VALUE>;     case 0: goto $r0 = <org.joda.time.Years: org.joda.time.Years ZERO>;     case 1: goto $r1 = <org.joda.time.Years: org.joda.time.Years ONE>;     case 2: goto $r2 = <org.joda.time.Years: org.joda.time.Years TWO>;     case 3: goto $r3 = <org.joda.time.Years: org.joda.time.Years THREE>;     case 2147483647: goto $r4 = <org.joda.time.Years: org.joda.time.Years MAX_VALUE>;     default: goto $r6 = new org.joda.time.Years; }
org.joda.time.Years.years : $r0 = <org.joda.time.Years: org.joda.time.Years ZERO>
org.joda.time.TimeOfDay.size : return 4
org.joda.time.field.BaseDurationField.getType : $r1 = r0.<org.joda.time.field.BaseDurationField: org.joda.time.DurationFieldType iType>
org.joda.time.DateTimeZone.convertUTCToLocal : i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0)
org.joda.time.DateTimeZone.convertUTCToLocal : $l3 = (long) i1
org.joda.time.DateTimeZone.convertUTCToLocal : return l2
org.joda.time.DateTimeZone.convertUTCToLocal : $l4 = l0 ^ l2
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.printTo : $c0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: char iValue>
org.joda.time.base.BaseDateTime.getMillis : $l0 = r0.<org.joda.time.base.BaseDateTime: long iMillis>
org.joda.time.chrono.BasicYearDateTimeField.add : if i1 != 0 goto i2 = virtualinvoke r0.<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>(l0)
org.joda.time.chrono.BasicYearDateTimeField.add : return l0
org.joda.time.chrono.EthiopicChronology.getInstance : $i1 = i0 - 1
org.joda.time.chrono.EthiopicChronology.getInstance : exitmonitor r1
org.joda.time.chrono.EthiopicChronology.getInstance : $r6 = <org.joda.time.chrono.EthiopicChronology: java.util.Map cCache>
org.joda.time.chrono.EthiopicChronology.getInstance : return r3
org.joda.time.chrono.EthiopicChronology.getInstance : if r3 != null goto exitmonitor r1
org.joda.time.chrono.EthiopicChronology.getInstance : $r7 = <org.joda.time.chrono.EthiopicChronology: java.util.Map cCache>
org.joda.time.chrono.EthiopicChronology.getInstance : goto [?= (branch)]
org.joda.time.chrono.EthiopicChronology.getInstance : if r2 != null goto $i1 = i0 - 1
org.joda.time.chrono.EthiopicChronology.getInstance : if r0 != null goto $r6 = <org.joda.time.chrono.EthiopicChronology: java.util.Map cCache>
org.joda.time.chrono.EthiopicChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>()
org.joda.time.chrono.AssembledChronology.millisOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay>
org.joda.time.base.BaseSingleFieldPeriod.getFieldType : if i0 == 0 goto $r3 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType()>()
org.joda.time.base.BaseSingleFieldPeriod.getFieldType : $r3 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType()>()
org.joda.time.LocalTime.getValue : $r6 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>()
org.joda.time.LocalTime.getValue : $r2 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>()
org.joda.time.LocalTime.getValue : $r8 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>()
org.joda.time.LocalTime.getValue : tableswitch(i0) {     case 0: goto $r2 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>();     case 1: goto $r4 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>();     case 2: goto $r6 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>();     case 3: goto $r8 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>();     default: goto $r10 = new java.lang.IndexOutOfBoundsException; }
org.joda.time.LocalTime.getValue : $r4 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>()
org.joda.time.LocalTime.fromMillisOfDay : $r1 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r0)
org.joda.time.LocalTime.fromMillisOfDay : $r3 = new org.joda.time.LocalTime
org.joda.time.LocalTime.withLocalMillis : $l1 = virtualinvoke r0.<org.joda.time.LocalTime: long getLocalMillis()>()
org.joda.time.base.BasePartial.getChronology : $r1 = r0.<org.joda.time.base.BasePartial: org.joda.time.Chronology iChronology>
org.joda.time.chrono.AssembledChronology.getParam : $r1 = r0.<org.joda.time.chrono.AssembledChronology: java.lang.Object iParam>
org.joda.time.field.PreciseDateTimeField.get : $b1 = l0 cmp 0L
org.joda.time.field.PreciseDateTimeField.get : $l2 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: long getUnitMillis()>()
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.add : $r1 = r0.<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: org.joda.time.field.ImpreciseDateTimeField this$0>
org.joda.time.TimeOfDay.toString : $r1 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter tTime()>()
org.joda.time.DateTimeUtils$OffsetMillisProvider.getMillis : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : if i1 >= i6 goto (branch)
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $b8 = l2 cmp 0L
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : i5 = i5 + -1
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : r6 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>(l2, r4)
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : i5 = virtualinvoke r10.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $l9 = r6[1]
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : if i5 >= i6 goto (branch)
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : goto [?= $b8 = l2 cmp 0L]
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $i12 = (int) l3
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : l2 = virtualinvoke r4.<org.joda.time.DateTimeField: long remainder(long)>(l0)
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : if r1 == null goto i17 = 0
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : goto [?= return]
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : i6 = i6 + -1
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $c16 = virtualinvoke r10.<java.lang.String: char charAt(int)>(i7)
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $i15 = virtualinvoke r10.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $r5 = interfaceinvoke r2.<org.joda.time.ReadablePartial: org.joda.time.Chronology getChronology()>()
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : l3 = r6[0]
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $r6 = interfaceinvoke r2.<org.joda.time.ReadablePartial: org.joda.time.Chronology getChronology()>()
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $r7 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: org.joda.time.DateTimeFieldType iFieldType>
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : if i5 <= 1 goto $i15 = virtualinvoke r10.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : i6 = i4
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $l10 = l3 & 2147483647L
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : i7 = 0
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : i1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int iMinDigits>
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : if i1 >= i6 goto $i15 = virtualinvoke r10.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $r6 = r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: org.joda.time.DateTimeFieldType iFieldType>
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : goto [?= return]
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $r5 = r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: org.joda.time.DateTimeFieldType iFieldType>
org.joda.time.field.FieldUtils.safeAdd : l2 = l0 + l1
org.joda.time.field.FieldUtils.safeAdd : $l3 = l0 ^ l2
org.joda.time.field.FieldUtils.safeAdd : return l2
org.joda.time.field.PreciseDurationDateTimeField.remainder : $b1 = l0 cmp 0L
org.joda.time.field.PreciseDurationDateTimeField.remainder : $l2 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.base.BasePartial.getValue : $r1 = r0.<org.joda.time.base.BasePartial: int[] iValues>
org.joda.time.chrono.AssembledChronology.secondOfMinute : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfMinute>
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : i1 = 0
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : if r3 != null goto i0 = lengthof r4
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : if r4 != null goto (branch)
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : r4 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: org.joda.time.format.DateTimePrinter[] iPrinters>
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : $r6 = r4[i1]
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : i0 = lengthof r4
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : r3 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>()
org.joda.time.field.FieldUtils.safeToInt : $i3 = (int) l0
org.joda.time.field.FieldUtils.safeToInt : $b1 = -2147483648L cmp l0
org.joda.time.LocalTime.getChronology : $r1 = r0.<org.joda.time.LocalTime: org.joda.time.Chronology iChronology>
org.joda.time.field.FieldUtils.verifyValueBounds : if i0 < i1 goto $r1 = new org.joda.time.IllegalFieldValueException
org.joda.time.field.ImpreciseDateTimeField.getDifference : $l2 = virtualinvoke r0.<org.joda.time.field.ImpreciseDateTimeField: long getDifferenceAsLong(long,long)>(l0, l1)
org.joda.time.format.DateTimeFormatter.print : $r5 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>()
org.joda.time.format.DateTimeFormatter.print : virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial)>(r3, r1)
org.joda.time.format.DateTimeFormatter.print : $r2 = new java.lang.StringBuffer
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getDifference : $i2 = virtualinvoke $r1.<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>(l0, l1)
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getDifference : $r1 = r0.<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: org.joda.time.field.ImpreciseDateTimeField this$0>
org.joda.time.DurationFieldType.years : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType YEARS_TYPE>
org.joda.time.chrono.BasicChronology.getYearMillis : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>(i0)
org.joda.time.format.ISODateTimeFormat.tTime : $r7 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter tt>
org.joda.time.format.ISODateTimeFormat.tTime : $r0 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter tt>
org.joda.time.LocalTime.getField : $r6 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>()
org.joda.time.LocalTime.getField : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>()
org.joda.time.LocalTime.getField : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>()
org.joda.time.LocalTime.getField : $r5 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>()
org.joda.time.LocalTime.getField : tableswitch(i0) {     case 0: goto $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>();     case 1: goto $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>();     case 2: goto $r5 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>();     case 3: goto $r6 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>();     default: goto $r7 = new java.lang.IndexOutOfBoundsException; }
org.joda.time.chrono.GregorianChronology.getApproxMillisAtEpochDividedByTwo : return 31083597720000L
org.joda.time.chrono.EthiopicChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.base.AbstractPartial.isSupported : $i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DateTimeFieldType)>(r1)
org.joda.time.chrono.BasicChronology.getYear : $b12 = l5 cmp 0L
org.joda.time.chrono.BasicChronology.getYear : $b9 = l2 cmp 0L
org.joda.time.chrono.BasicChronology.getYear : l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i3)
org.joda.time.chrono.BasicChronology.getYear : $l7 = l0 >> 1
org.joda.time.chrono.BasicChronology.getYear : $b13 = l5 cmp 31536000000L
org.joda.time.chrono.BasicChronology.getYear : l5 = l0 - l4
org.joda.time.chrono.BasicChronology.getYear : return i3
org.joda.time.chrono.BasicChronology.getYear : l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getAverageMillisPerYearDividedByTwo()>()
org.joda.time.chrono.BasicChronology.getYear : $l11 = l2 / l1
org.joda.time.chrono.AssembledChronology.secondOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfDay>
org.joda.time.chrono.AssembledChronology.minuteOfHour : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfHour>
org.joda.time.DurationField.subtract : if i1 != -2147483648 goto $i4 = neg i1
org.joda.time.DurationField.subtract : $i4 = neg i1
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r25 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r22 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfDay()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $b0 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: byte iOrdinal>
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r23 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r21 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r19 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>()
org.joda.time.chrono.AssembledChronology.hourOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay>
