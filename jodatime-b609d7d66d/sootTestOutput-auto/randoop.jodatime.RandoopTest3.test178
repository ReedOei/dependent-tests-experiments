org.joda.time.base.BasePeriod.getPeriodType : $r1 = r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType>
org.joda.time.base.BaseSingleFieldPeriod.size : return 1
org.joda.time.Period.months : $r0 = new org.joda.time.Period
org.joda.time.base.AbstractPeriod.indexOf : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.base.BasePeriod.getValue : $r1 = r0.<org.joda.time.base.BasePeriod: int[] iValues>
org.joda.time.Months.getFieldType : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>()
org.joda.time.Months.months : lookupswitch(i0) {     case -2147483648: goto $r14 = <org.joda.time.Months: org.joda.time.Months MIN_VALUE>;     case 0: goto $r0 = <org.joda.time.Months: org.joda.time.Months ZERO>;     case 1: goto $r1 = <org.joda.time.Months: org.joda.time.Months ONE>;     case 2: goto $r2 = <org.joda.time.Months: org.joda.time.Months TWO>;     case 3: goto $r3 = <org.joda.time.Months: org.joda.time.Months THREE>;     case 4: goto $r4 = <org.joda.time.Months: org.joda.time.Months FOUR>;     case 5: goto $r5 = <org.joda.time.Months: org.joda.time.Months FIVE>;     case 6: goto $r6 = <org.joda.time.Months: org.joda.time.Months SIX>;     case 7: goto $r7 = <org.joda.time.Months: org.joda.time.Months SEVEN>;     case 8: goto $r8 = <org.joda.time.Months: org.joda.time.Months EIGHT>;     case 9: goto $r9 = <org.joda.time.Months: org.joda.time.Months NINE>;     case 10: goto $r10 = <org.joda.time.Months: org.joda.time.Months TEN>;     case 11: goto $r11 = <org.joda.time.Months: org.joda.time.Months ELEVEN>;     case 12: goto $r12 = <org.joda.time.Months: org.joda.time.Months TWELVE>;     case 2147483647: goto $r13 = <org.joda.time.Months: org.joda.time.Months MAX_VALUE>;     default: goto $r15 = new org.joda.time.Months; }
org.joda.time.Months.months : $r15 = new org.joda.time.Months
org.joda.time.Period.withFields : r3 = specialinvoke r0.<org.joda.time.base.BasePeriod: int[] mergePeriodInto(int[],org.joda.time.ReadablePeriod)>(r2, r1)
org.joda.time.Period.withFields : $r4 = new org.joda.time.Period
org.joda.time.Period.withFields : if r1 != null goto r2 = virtualinvoke r0.<org.joda.time.Period: int[] getValues()>()
org.joda.time.Period.withFields : r2 = virtualinvoke r0.<org.joda.time.Period: int[] getValues()>()
org.joda.time.Months.plus : $i1 = virtualinvoke r0.<org.joda.time.Months: int getValue()>()
org.joda.time.Months.plus : if i0 != 0 goto $i1 = virtualinvoke r0.<org.joda.time.Months: int getValue()>()
org.joda.time.base.BasePeriod.mergePeriodInto : r3 = interfaceinvoke r2.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>(i0)
org.joda.time.base.BasePeriod.mergePeriodInto : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>(r3, r1, i2)
org.joda.time.base.BasePeriod.mergePeriodInto : i0 = 0
org.joda.time.base.BasePeriod.mergePeriodInto : i2 = interfaceinvoke r2.<org.joda.time.ReadablePeriod: int getValue(int)>(i0)
org.joda.time.base.BasePeriod.mergePeriodInto : return r1
org.joda.time.PeriodType.size : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.base.BaseSingleFieldPeriod.getFieldType : if i0 == 0 goto $r3 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType()>()
org.joda.time.base.BaseSingleFieldPeriod.getFieldType : $r3 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType()>()
org.joda.time.PeriodType.standard : if r0 != null goto return r0
org.joda.time.PeriodType.standard : r0 = <org.joda.time.PeriodType: org.joda.time.PeriodType cStandard>
org.joda.time.PeriodType.standard : return r0
org.joda.time.DurationFieldType.months : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MONTHS_TYPE>
org.joda.time.base.BasePeriod.checkAndUpdate : r2[i1] = i0
org.joda.time.base.BasePeriod.checkAndUpdate : i1 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int indexOf(org.joda.time.DurationFieldType)>(r1)
org.joda.time.base.BasePeriod.checkAndUpdate : if i1 != -1 goto r2[i1] = i0
org.joda.time.field.FieldUtils.safeAdd : return i2
org.joda.time.field.FieldUtils.safeAdd : $i3 = i0 ^ i2
org.joda.time.field.FieldUtils.safeAdd : i2 = i0 + i1
org.joda.time.base.AbstractPeriod.getValues : $i3 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int getValue(int)>(i0)
org.joda.time.base.AbstractPeriod.getValues : i0 = 0
org.joda.time.base.AbstractPeriod.getValues : $i1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int size()>()
org.joda.time.base.AbstractPeriod.getValues : return r1
org.joda.time.base.AbstractPeriod.size : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.PeriodType.indexOf : return i0
org.joda.time.PeriodType.indexOf : $r2 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.PeriodType.indexOf : i0 = 0
org.joda.time.base.BaseSingleFieldPeriod.getValue : if i0 == 0 goto $i1 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>()
org.joda.time.base.BaseSingleFieldPeriod.getValue : $i1 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>()
org.joda.time.base.BaseSingleFieldPeriod.getValue : $i0 = r0.<org.joda.time.base.BaseSingleFieldPeriod: int iPeriod>
