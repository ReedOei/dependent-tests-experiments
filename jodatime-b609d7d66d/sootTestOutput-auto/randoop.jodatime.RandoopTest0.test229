org.joda.time.format.DateTimeFormat.forPattern : $r1 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>(r0)
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.get : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.get : $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.PreciseDurationDateTimeField.getMinimumValue : return 0
org.joda.time.tz.CachedDateTimeZone$Info.getOffset : $i3 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: int iOffset>
org.joda.time.tz.CachedDateTimeZone$Info.getOffset : $i6 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: int iOffset>
org.joda.time.tz.CachedDateTimeZone$Info.getOffset : $r1 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: org.joda.time.tz.CachedDateTimeZone$Info iNextInfo>
org.joda.time.base.BaseDateTime.checkInstant : return l0
org.joda.time.chrono.ISOChronology.getInstance : if r0 != null goto $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0)
org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0)
org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache>
org.joda.time.chrono.ISOChronology.getInstance : return r1
org.joda.time.chrono.ISOChronology.getInstance : if r1 == null goto $r7 = <org.joda.time.chrono.ISOChronology: java.util.Map cCache>
org.joda.time.chrono.ISOChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>()
org.joda.time.tz.CachedDateTimeZone.getOffset : $r1 = specialinvoke r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info getInfo(long)>(l0)
org.joda.time.chrono.ZonedChronology.getZone : $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: java.lang.Object getParam()>()
org.joda.time.DateTimeUtils.getChronology : if r0 != null goto return r0
org.joda.time.DateTimeUtils.getChronology : return r0
org.joda.time.format.DateTimeFormat.parseToken : r1[0] = i0
org.joda.time.format.DateTimeFormat.parseToken : $i4 = i0 + 1
org.joda.time.format.DateTimeFormat.parseToken : if c3 != c2 goto r1[0] = i0
org.joda.time.format.DateTimeFormat.parseToken : $r9 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>()
org.joda.time.format.DateTimeFormat.parseToken : $i5 = i0 + 1
org.joda.time.format.DateTimeFormat.parseToken : if c2 < 65 goto (branch)
org.joda.time.format.DateTimeFormat.parseToken : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2)
org.joda.time.format.DateTimeFormat.parseToken : c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0)
org.joda.time.format.DateTimeFormat.parseToken : i0 = r1[0]
org.joda.time.format.DateTimeFormat.parseToken : $r2 = new java.lang.StringBuffer
org.joda.time.format.DateTimeFormat.parseToken : i1 = virtualinvoke r0.<java.lang.String: int length()>()
org.joda.time.field.PreciseDateTimeField.getMaximumValue : $i0 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange>
org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.field.PreciseDateTimeField.set : $i4 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int get(long)>(l0)
org.joda.time.field.PreciseDateTimeField.set : $i2 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int getMinimumValue()>()
org.joda.time.tz.CachedDateTimeZone.getInfo : r1 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info[] iInfoCache>
org.joda.time.tz.CachedDateTimeZone.getInfo : return r2
org.joda.time.tz.CachedDateTimeZone.getInfo : r2 = r1[i3]
org.joda.time.tz.CachedDateTimeZone.getInfo : $i2 = <org.joda.time.tz.CachedDateTimeZone: int cInfoCacheMask>
org.joda.time.tz.CachedDateTimeZone.getInfo : if r2 == null goto r2 = specialinvoke r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info createInfo(long)>(l0)
org.joda.time.tz.CachedDateTimeZone.getInfo : $l4 = l0 >> 32
org.joda.time.DateTime.withMillisOfDay : $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>()
org.joda.time.DateTimeUtils.currentTimeMillis : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider>
org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.DateTimeZone.getDefault : if r0 != null goto return r0
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.base.BaseDateTime.checkChronology : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.DateTimeZone.convertUTCToLocal : i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0)
org.joda.time.DateTimeZone.convertUTCToLocal : $l3 = (long) i1
org.joda.time.DateTimeZone.convertUTCToLocal : return l2
org.joda.time.DateTimeZone.convertUTCToLocal : $l4 = l0 ^ l2
org.joda.time.format.DateTimeFormat.createFormatterForPattern : $r6 = <org.joda.time.format.DateTimeFormat: java.util.Map cPatternedCache>
org.joda.time.format.DateTimeFormat.createFormatterForPattern : $r9 = new org.joda.time.format.DateTimeFormatterBuilder
org.joda.time.format.DateTimeFormat.createFormatterForPattern : staticinvoke <org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>(r2, r0)
org.joda.time.format.DateTimeFormat.createFormatterForPattern : if r0 == null goto $r4 = new java.lang.IllegalArgumentException
org.joda.time.format.DateTimeFormat.createFormatterForPattern : n0 = null
org.joda.time.format.DateTimeFormat.createFormatterForPattern : $r5 = <org.joda.time.format.DateTimeFormat: java.util.Map cPatternedCache>
org.joda.time.format.DateTimeFormat.createFormatterForPattern : if r8 != null goto exitmonitor r1
org.joda.time.base.BaseDateTime.getMillis : $l0 = r0.<org.joda.time.base.BaseDateTime: long iMillis>
org.joda.time.chrono.AssembledChronology.millisOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay>
org.joda.time.DateTime.yearOfEra : $r1 = new org.joda.time.DateTime$Property
org.joda.time.chrono.AssembledChronology.yearOfEra : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfEra>
org.joda.time.format.DateTimeFormat.parsePatternTo : i4 = r2[0]
org.joda.time.format.DateTimeFormat.parsePatternTo : i1 = 0
org.joda.time.format.DateTimeFormat.parsePatternTo : i2 = virtualinvoke r3.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormat.parsePatternTo : c3 = virtualinvoke r3.<java.lang.String: char charAt(int)>(0)
org.joda.time.format.DateTimeFormat.parsePatternTo : i0 = virtualinvoke r1.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormat.parsePatternTo : tableswitch(c3) {     case 39: goto r41 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int)>(1);     case 40: goto $r45 = new java.lang.IllegalArgumentException;     case 41: goto $r45 = new java.lang.IllegalArgumentException;     case 42: goto $r45 = new java.lang.IllegalArgumentException;     case 43: goto $r45 = new java.lang.IllegalArgumentException;     case 44: goto $r45 = new java.lang.IllegalArgumentException;     case 45: goto $r45 = new java.lang.IllegalArgumentException;     case 46: goto $r45 = new java.lang.IllegalArgumentException;     case 47: goto $r45 = new java.lang.IllegalArgumentException;     case 48: goto $r45 = new java.lang.IllegalArgumentException;     case 49: goto $r45 = new java.lang.IllegalArgumentException;     case 50: goto $r45 = new java.lang.IllegalArgumentException;     case 51: goto $r45 = new java.lang.IllegalArgumentException;     case 52: goto $r45 = new java.lang.IllegalArgumentException;     case 53: goto $r45 = new java.lang.IllegalArgumentException;     case 54: goto $r45 = new java.lang.IllegalArgumentException;     case 55: goto $r45 = new java.lang.IllegalArgumentException;     case 56: goto $r45 = new java.lang.IllegalArgumentException;     case 57: goto $r45 = new java.lang.IllegalArgumentException;     case 58: goto $r45 = new java.lang.IllegalArgumentException;     case 59: goto $r45 = new java.lang.IllegalArgumentException;     case 60: goto $r45 = new java.lang.IllegalArgumentException;     case 61: goto $r45 = new java.lang.IllegalArgumentException;     case 62: goto $r45 = new java.lang.IllegalArgumentException;     case 63: goto $r45 = new java.lang.IllegalArgumentException;     case 64: goto $r45 = new java.lang.IllegalArgumentException;     case 65: goto $r45 = new java.lang.IllegalArgumentException;     case 66: goto $r45 = new java.lang.IllegalArgumentException;     case 67: goto virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendCenturyOfEra(int,int)>(i2, i2);     case 68: goto virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfYear(int)>(i2);     case 69: goto if i2 < 4 goto virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeekShortText()>();     case 70: goto $r45 = new java.lang.IllegalArgumentException;     case 71: goto virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendEraText()>();     case 72: goto virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHourOfDay(int)>(i2);     case 73: goto $r45 = new java.lang.IllegalArgumentException;     case 74: goto $r45 = new java.lang.IllegalArgumentException;     case 75: goto virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHourOfHalfday(int)>(i2);     case 76: goto $r45 = new java.lang.IllegalArgumentException;     case 77: goto if i2 < 3 goto virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYear(int)>(i2);     case 78: goto $r45 = new java.lang.IllegalArgumentException;     case 79: goto $r45 = new java.lang.IllegalArgumentException;     case 80: goto $r45 = new java.lang.IllegalArgumentException;     case 81: goto $r45 = new java.lang.IllegalArgumentException;     case 82: goto $r45 = new java.lang.IllegalArgumentException;     case 83: goto virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfSecond(int,int)>(i2, i2);     case 84: goto $r45 = new java.lang.IllegalArgumentException;     case 85: goto $r45 = new java.lang.IllegalArgumentException;     case 86: goto $r45 = new java.lang.IllegalArgumentException;     case 87: goto $r45 = new java.lang.IllegalArgumentException;     case 88: goto $r45 = new java.lang.IllegalArgumentException;     case 89: goto if i2 != 2 goto i16 = 9;     case 90: goto if i2 != 1 goto (branch);     case 91: goto $r45 = new java.lang.IllegalArgumentException;     case 92: goto $r45 = new java.lang.IllegalArgumentException;     case 93: goto $r45 = new java.lang.IllegalArgumentException;     case 94: goto $r45 = new java.lang.IllegalArgumentException;     case 95: goto $r45 = new java.lang.IllegalArgumentException;     case 96: goto $r45 = new java.lang.IllegalArgumentException;     case 97: goto virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHalfdayOfDayText()>();     case 98: goto $r45 = new java.lang.IllegalArgumentException;     case 99: goto $r45 = new java.lang.IllegalArgumentException;     case 100: goto virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfMonth(int)>(i2);     case 101: goto virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeek(int)>(i2);     case 102: goto $r45 = new java.lang.IllegalArgumentException;     case 103: goto $r45 = new java.lang.IllegalArgumentException;     case 104: goto virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendClockhourOfHalfday(int)>(i2);     case 105: goto $r45 = new java.lang.IllegalArgumentException;     case 106: goto $r45 = new java.lang.IllegalArgumentException;     case 107: goto virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendClockhourOfDay(int)>(i2);     case 108: goto $r45 = new java.lang.IllegalArgumentException;     case 109: goto virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMinuteOfHour(int)>(i2);     case 110: goto $r45 = new java.lang.IllegalArgumentException;     case 111: goto $r45 = new java.lang.IllegalArgumentException;     case 112: goto $r45 = new java.lang.IllegalArgumentException;     case 113: goto $r45 = new java.lang.IllegalArgumentException;     case 114: goto $r45 = new java.lang.IllegalArgumentException;     case 115: goto virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSecondOfMinute(int)>(i2);     case 116: goto $r45 = new java.lang.IllegalArgumentException;     case 117: goto $r45 = new java.lang.IllegalArgumentException;     case 118: goto $r45 = new java.lang.IllegalArgumentException;     case 119: goto virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekOfWeekyear(int)>(i2);     case 120: goto if i2 != 2 goto i16 = 9;     case 121: goto if i2 != 2 goto i16 = 9;     case 122: goto if i2 < 4 goto virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneShortName()>();     default: goto $r45 = new java.lang.IllegalArgumentException; }
org.joda.time.format.DateTimeFormat.parsePatternTo : $r45 = new java.lang.IllegalArgumentException
org.joda.time.format.DateTimeFormat.parsePatternTo : r2[0] = i1
org.joda.time.format.DateTimeFormat.parsePatternTo : if i2 != 0 goto c3 = virtualinvoke r3.<java.lang.String: char charAt(int)>(0)
org.joda.time.format.DateTimeFormat.parsePatternTo : r2 = newarray (int)[1]
org.joda.time.format.DateTimeFormat.parsePatternTo : r3 = staticinvoke <org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>(r1, r2)
org.joda.time.DateTime.now : $r0 = new org.joda.time.DateTime
org.joda.time.base.BaseDateTime.getChronology : $r1 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology>
org.joda.time.chrono.AssembledChronology.getParam : $r1 = r0.<org.joda.time.chrono.AssembledChronology: java.lang.Object iParam>
org.joda.time.field.PreciseDateTimeField.get : $b1 = l0 cmp 0L
org.joda.time.field.PreciseDateTimeField.get : $l2 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: long getUnitMillis()>()
org.joda.time.base.AbstractDateTime.toString : $r3 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>(r1)
org.joda.time.base.AbstractDateTime.toString : if r1 != null goto $r3 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter forPattern(java.lang.String)>(r1)
org.joda.time.field.FieldUtils.verifyValueBounds : if i0 < i1 goto $r1 = new org.joda.time.IllegalFieldValueException
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.set : $r4 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.set : $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.set : return l3
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.set : $r3 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.set : $i5 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int get(long)>(l3)
org.joda.time.DateTime.withMillis : $l1 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>()
org.joda.time.DateTimeZone.convertLocalToUTC : $l5 = (long) i2
org.joda.time.DateTimeZone.convertLocalToUTC : i2 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l1)
org.joda.time.DateTimeZone.convertLocalToUTC : return l3
org.joda.time.DateTimeZone.convertLocalToUTC : i4 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l3)
org.joda.time.DateTimeZone.convertLocalToUTC : if i4 != i2 goto $l6 = virtualinvoke r0.<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>(l0, z0)
org.joda.time.DateTimeUtils$FixedMillisProvider.getMillis : $l0 = r0.<org.joda.time.DateTimeUtils$FixedMillisProvider: long iMillis>
