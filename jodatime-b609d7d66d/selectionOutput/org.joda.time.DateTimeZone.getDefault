org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> >>>>>>>> org.joda.time.DateTimeZone.getDefault : if r0 != null
org.joda.time.DateTimeZone.getDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : $r5 = class "org/joda/time/DateTimeZone"
org.joda.time.DateTimeZone.getDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.DateTimeZone.getDefault : $r5 = class "org/joda/time/DateTimeZone" >>>>>>>> org.joda.time.DateTimeZone.getDefault : r1 = $r5
org.joda.time.DateTimeZone.getDefault : r1 = $r5 >>>>>>>> org.joda.time.DateTimeZone.getDefault : entermonitor $r5
org.joda.time.DateTimeZone.getDefault : entermonitor $r5 >>>>>>>> org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : entermonitor $r5 >>>>>>>> org.joda.time.DateTimeZone.getDefault : $r12 := @caughtexception
org.joda.time.DateTimeZone.getDefault : r4 = $r12 >>>>>>>> org.joda.time.DateTimeZone.getDefault : exitmonitor r1
org.joda.time.DateTimeZone.getDefault : r4 = $r12 >>>>>>>> org.joda.time.DateTimeZone.getDefault : $r12 := @caughtexception
org.joda.time.DateTimeZone.getDefault : exitmonitor r1 >>>>>>>> org.joda.time.DateTimeZone.getDefault : throw r4
org.joda.time.DateTimeZone.getDefault : exitmonitor r1 >>>>>>>> org.joda.time.DateTimeZone.getDefault : $r12 := @caughtexception
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> >>>>>>>> org.joda.time.DateTimeZone.getDefault : if r0 != null
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> >>>>>>>> org.joda.time.DateTimeZone.getDefault : $r12 := @caughtexception
org.joda.time.DateTimeZone.getDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : r2 = null
org.joda.time.DateTimeZone.getDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : exitmonitor r1
org.joda.time.DateTimeZone.getDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : $r12 := @caughtexception
org.joda.time.DateTimeZone.getDefault : exitmonitor r1 >>>>>>>> org.joda.time.DateTimeZone.getDefault : goto [?= return r0]
org.joda.time.DateTimeZone.getDefault : exitmonitor r1 >>>>>>>> org.joda.time.DateTimeZone.getDefault : $r12 := @caughtexception
org.joda.time.DateTimeZone.getDefault : goto [?= return r0] >>>>>>>> org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.DateTimeZone.getDefault : r2 = null >>>>>>>> org.joda.time.DateTimeZone.getDefault : $r12 := @caughtexception
org.joda.time.DateTimeZone.getDefault : r2 = null >>>>>>>> org.joda.time.DateTimeZone.getDefault : $r6 := @caughtexception
org.joda.time.DateTimeZone.getDefault : r2 = null >>>>>>>> org.joda.time.DateTimeZone.getDefault : $r9 := @caughtexception
org.joda.time.DateTimeZone.getDefault : r2 = null >>>>>>>> org.joda.time.DateTimeZone.getDefault : r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.timezone")
org.joda.time.DateTimeZone.getDefault : r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.timezone") >>>>>>>> org.joda.time.DateTimeZone.getDefault : $r6 := @caughtexception
org.joda.time.DateTimeZone.getDefault : r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.timezone") >>>>>>>> org.joda.time.DateTimeZone.getDefault : $r12 := @caughtexception
org.joda.time.DateTimeZone.getDefault : r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.timezone") >>>>>>>> org.joda.time.DateTimeZone.getDefault : $r9 := @caughtexception
org.joda.time.DateTimeZone.getDefault : r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("user.timezone") >>>>>>>> org.joda.time.DateTimeZone.getDefault : if r3 == null
org.joda.time.DateTimeZone.getDefault : if r3 == null >>>>>>>> org.joda.time.DateTimeZone.getDefault : $r6 := @caughtexception
org.joda.time.DateTimeZone.getDefault : if r3 == null >>>>>>>> org.joda.time.DateTimeZone.getDefault : $r12 := @caughtexception
org.joda.time.DateTimeZone.getDefault : if r3 == null >>>>>>>> org.joda.time.DateTimeZone.getDefault : $r9 := @caughtexception
org.joda.time.DateTimeZone.getDefault : if r3 == null >>>>>>>> org.joda.time.DateTimeZone.getDefault : r2 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>(r3)
org.joda.time.DateTimeZone.getDefault : if r3 == null >>>>>>>> org.joda.time.DateTimeZone.getDefault : goto [?= (branch)]
org.joda.time.DateTimeZone.getDefault : goto [?= (branch)] >>>>>>>> org.joda.time.DateTimeZone.getDefault : $r9 := @caughtexception
org.joda.time.DateTimeZone.getDefault : goto [?= (branch)] >>>>>>>> org.joda.time.DateTimeZone.getDefault : $r12 := @caughtexception
org.joda.time.DateTimeZone.getDefault : goto [?= (branch)] >>>>>>>> org.joda.time.DateTimeZone.getDefault : if r2 != null
org.joda.time.DateTimeZone.getDefault : if r2 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : $r8 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>()
org.joda.time.DateTimeZone.getDefault : if r2 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : goto [?= (branch)]
org.joda.time.DateTimeZone.getDefault : if r2 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : $r12 := @caughtexception
org.joda.time.DateTimeZone.getDefault : if r2 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : $r9 := @caughtexception
org.joda.time.DateTimeZone.getDefault : r10 = $r9 >>>>>>>> org.joda.time.DateTimeZone.getDefault : if r2 != null
org.joda.time.DateTimeZone.getDefault : r10 = $r9 >>>>>>>> org.joda.time.DateTimeZone.getDefault : $r12 := @caughtexception
org.joda.time.DateTimeZone.getDefault : if r2 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : r2 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>
org.joda.time.DateTimeZone.getDefault : if r2 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : r0 = r2
org.joda.time.DateTimeZone.getDefault : if r2 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : $r12 := @caughtexception
org.joda.time.DateTimeZone.getDefault : r0 = r2 >>>>>>>> org.joda.time.DateTimeZone.getDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r2
org.joda.time.DateTimeZone.getDefault : r0 = r2 >>>>>>>> org.joda.time.DateTimeZone.getDefault : $r12 := @caughtexception
org.joda.time.DateTimeZone.getDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r2 >>>>>>>> org.joda.time.DateTimeZone.getDefault : exitmonitor r1
org.joda.time.DateTimeZone.getDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r2 >>>>>>>> org.joda.time.DateTimeZone.getDefault : $r12 := @caughtexception
org.joda.time.DateTimeZone.getDefault : r2 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC> >>>>>>>> org.joda.time.DateTimeZone.getDefault : r0 = r2
org.joda.time.DateTimeZone.getDefault : r2 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC> >>>>>>>> org.joda.time.DateTimeZone.getDefault : $r12 := @caughtexception
org.joda.time.DateTimeZone.getDefault : goto [?= (branch)] >>>>>>>> org.joda.time.DateTimeZone.getDefault : if r2 != null
org.joda.time.DateTimeZone.getDefault : goto [?= (branch)] >>>>>>>> org.joda.time.DateTimeZone.getDefault : $r12 := @caughtexception
org.joda.time.DateTimeZone.getDefault : $r8 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>() >>>>>>>> org.joda.time.DateTimeZone.getDefault : $r9 := @caughtexception
org.joda.time.DateTimeZone.getDefault : $r8 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>() >>>>>>>> org.joda.time.DateTimeZone.getDefault : $r12 := @caughtexception
org.joda.time.DateTimeZone.getDefault : $r8 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>() >>>>>>>> org.joda.time.DateTimeZone.getDefault : r2 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>($r8)
org.joda.time.DateTimeZone.getDefault : r2 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>($r8) >>>>>>>> org.joda.time.DateTimeZone.getDefault : $r12 := @caughtexception
org.joda.time.DateTimeZone.getDefault : r2 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>($r8) >>>>>>>> org.joda.time.DateTimeZone.getDefault : $r9 := @caughtexception
org.joda.time.DateTimeZone.getDefault : r2 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forTimeZone(java.util.TimeZone)>($r8) >>>>>>>> org.joda.time.DateTimeZone.getDefault : goto [?= (branch)]
org.joda.time.DateTimeZone.getDefault : r2 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>(r3) >>>>>>>> org.joda.time.DateTimeZone.getDefault : $r6 := @caughtexception
org.joda.time.DateTimeZone.getDefault : r2 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>(r3) >>>>>>>> org.joda.time.DateTimeZone.getDefault : $r12 := @caughtexception
org.joda.time.DateTimeZone.getDefault : r2 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>(r3) >>>>>>>> org.joda.time.DateTimeZone.getDefault : $r9 := @caughtexception
org.joda.time.DateTimeZone.getDefault : r2 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>(r3) >>>>>>>> org.joda.time.DateTimeZone.getDefault : goto [?= (branch)]
org.joda.time.DateTimeZone.getDefault : r7 = $r6 >>>>>>>> org.joda.time.DateTimeZone.getDefault : $r9 := @caughtexception
org.joda.time.DateTimeZone.getDefault : r7 = $r6 >>>>>>>> org.joda.time.DateTimeZone.getDefault : $r12 := @caughtexception
org.joda.time.DateTimeZone.getDefault : r7 = $r6 >>>>>>>> org.joda.time.DateTimeZone.getDefault : if r2 != null
