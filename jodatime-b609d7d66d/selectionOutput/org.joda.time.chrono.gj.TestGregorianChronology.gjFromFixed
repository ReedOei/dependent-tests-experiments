org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : i1 = virtualinvoke r0.<org.joda.time.chrono.gj.TestGregorianChronology: int gjYearFromFixed(long)>(l0) >>>>>>>> org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : $l6 = virtualinvoke r0.<org.joda.time.chrono.gj.TestGregorianChronology: long fixedFromGJ(int,int,int)>(i1, 1, 1)
org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : $l6 = virtualinvoke r0.<org.joda.time.chrono.gj.TestGregorianChronology: long fixedFromGJ(int,int,int)>(i1, 1, 1) >>>>>>>> org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : l2 = l0 - $l6
org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : l2 = l0 - $l6 >>>>>>>> org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : $l7 = virtualinvoke r0.<org.joda.time.chrono.gj.TestGregorianChronology: long fixedFromGJ(int,int,int)>(i1, 3, 1)
org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : $l7 = virtualinvoke r0.<org.joda.time.chrono.gj.TestGregorianChronology: long fixedFromGJ(int,int,int)>(i1, 3, 1) >>>>>>>> org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : $b8 = l0 cmp $l7
org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : $b8 = l0 cmp $l7 >>>>>>>> org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : if $b8 >= 0
org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : if $b8 >= 0 >>>>>>>> org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : l3 = 0L
org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : if $b8 >= 0 >>>>>>>> org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : $z0 = virtualinvoke r0.<org.joda.time.chrono.gj.TestGregorianChronology: boolean isLeapYear(int)>(i1)
org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : $z0 = virtualinvoke r0.<org.joda.time.chrono.gj.TestGregorianChronology: boolean isLeapYear(int)>(i1) >>>>>>>> org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : if $z0 == 0
org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : if $z0 == 0 >>>>>>>> org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : l3 = 1L
org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : if $z0 == 0 >>>>>>>> org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : l3 = 2L
org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : l3 = 2L >>>>>>>> org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : $l9 = l2 + l3
org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : $l9 = l2 + l3 >>>>>>>> org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : $l10 = 12L * $l9
org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : $l10 = 12L * $l9 >>>>>>>> org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : $l11 = $l10 + 373L
org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : $l11 = $l10 + 373L >>>>>>>> org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : $l12 = staticinvoke <org.joda.time.chrono.gj.TestGregorianChronology: long div(long,long)>($l11, 367L)
org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : $l12 = staticinvoke <org.joda.time.chrono.gj.TestGregorianChronology: long div(long,long)>($l11, 367L) >>>>>>>> org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : i4 = (int) $l12
org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : i4 = (int) $l12 >>>>>>>> org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : $l13 = virtualinvoke r0.<org.joda.time.chrono.gj.TestGregorianChronology: long fixedFromGJ(int,int,int)>(i1, i4, 1)
org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : $l13 = virtualinvoke r0.<org.joda.time.chrono.gj.TestGregorianChronology: long fixedFromGJ(int,int,int)>(i1, i4, 1) >>>>>>>> org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : $l14 = l0 - $l13
org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : $l14 = l0 - $l13 >>>>>>>> org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : $l15 = $l14 + 1L
org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : $l15 = $l14 + 1L >>>>>>>> org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : i5 = (int) $l15
org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : i5 = (int) $l15 >>>>>>>> org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : $r1 = newarray (int)[3]
org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : $r1 = newarray (int)[3] >>>>>>>> org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : $r1[0] = i1
org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : $r1[0] = i1 >>>>>>>> org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : $r1[1] = i4
org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : $r1[1] = i4 >>>>>>>> org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : $r1[2] = i5
org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : $r1[2] = i5 >>>>>>>> org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : return $r1
org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : l3 = 1L >>>>>>>> org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : goto [?= $l9 = l2 + l3]
org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : goto [?= $l9 = l2 + l3] >>>>>>>> org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : $l9 = l2 + l3
org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : l3 = 0L >>>>>>>> org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : goto [?= $l9 = l2 + l3]
org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : goto [?= $l9 = l2 + l3] >>>>>>>> org.joda.time.chrono.gj.TestGregorianChronology.gjFromFixed : $l9 = l2 + l3
