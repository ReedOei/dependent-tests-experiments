org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $r4 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: org.joda.time.DateTimeFieldType iFieldType> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $r5 = virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: org.joda.time.Chronology getChronology()>()
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $r5 = virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : r3 = virtualinvoke $r4.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r5)
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : r3 = virtualinvoke $r4.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r5) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $i7 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int iMaxDigits>
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $i7 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int iMaxDigits> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $i8 = virtualinvoke r2.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $i8 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $i9 = $i8 - i0
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $i9 = $i8 - i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : i1 = staticinvoke <java.lang.Math: int min(int,int)>($i7, $i9)
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : i1 = staticinvoke <java.lang.Math: int min(int,int)>($i7, $i9) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : l2 = 0L
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : l2 = 0L >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $r6 = virtualinvoke r3.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>()
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $r6 = virtualinvoke r3.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $l10 = virtualinvoke $r6.<org.joda.time.DurationField: long getUnitMillis()>()
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $l10 = virtualinvoke $r6.<org.joda.time.DurationField: long getUnitMillis()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : l3 = $l10 * 10L
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : l3 = $l10 * 10L >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : i4 = 0
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : i4 = 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : if i4 >= i1
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : if i4 >= i1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $i11 = i0 + i4
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : if i4 >= i1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : l15 = l2 / 10L
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : l15 = l2 / 10L >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : if i4 != 0
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : if i4 != 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $i16 = i0 ^ -1
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : if i4 != 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $b17 = l15 cmp 2147483647L
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $b17 = l15 cmp 2147483647L >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : if $b17 <= 0
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : if $b17 <= 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $i18 = i0 ^ -1
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : if $b17 <= 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $r7 = new org.joda.time.field.PreciseDateTimeField
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $r7 = new org.joda.time.field.PreciseDateTimeField >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $r8 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>()
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $r8 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $r9 = <org.joda.time.field.MillisDurationField: org.joda.time.DurationField INSTANCE>
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $r9 = <org.joda.time.field.MillisDurationField: org.joda.time.DurationField INSTANCE> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $r10 = virtualinvoke r3.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>()
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $r10 = virtualinvoke r3.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : specialinvoke $r7.<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>($r8, $r9, $r10)
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : specialinvoke $r7.<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>($r8, $r9, $r10) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : r11 = $r7
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : r11 = $r7 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $i19 = (int) l15
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $i19 = (int) l15 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeField,int)>(r11, $i19)
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeField,int)>(r11, $i19) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $i20 = i0 + i4
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $i20 = i0 + i4 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : return $i20
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $i18 = i0 ^ -1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : return $i18
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $i16 = i0 ^ -1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : return $i16
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $i11 = i0 + i4 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : c5 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i11)
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : c5 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i11) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : if c5 < 48
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : if c5 < 48 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : if c5 <= 57
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : if c5 < 48 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : l15 = l2 / 10L
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : if c5 <= 57 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : goto [?= l15 = l2 / 10L]
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : if c5 <= 57 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : i4 = i4 + 1
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : i4 = i4 + 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : l6 = l3 / 10L
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : l6 = l3 / 10L >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $i12 = c5 - 48
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $i12 = c5 - 48 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $l13 = (long) $i12
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $l13 = (long) $i12 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $l14 = $l13 * l6
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $l14 = $l13 * l6 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : l2 = l2 + $l14
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : l2 = l2 + $l14 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : l3 = l6
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : l3 = l6 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : goto [?= (branch)]
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : goto [?= (branch)] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : if i4 >= i1
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : goto [?= l15 = l2 / 10L] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : l15 = l2 / 10L
