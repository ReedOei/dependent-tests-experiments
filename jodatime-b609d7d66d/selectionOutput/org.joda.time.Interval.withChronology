org.joda.time.Interval.withChronology : $r2 = virtualinvoke r0.<org.joda.time.Interval: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.Interval.withChronology : if $r2 != r1
org.joda.time.Interval.withChronology : if $r2 != r1 >>>>>>>> org.joda.time.Interval.withChronology : return r0
org.joda.time.Interval.withChronology : if $r2 != r1 >>>>>>>> org.joda.time.Interval.withChronology : $r3 = new org.joda.time.Interval
org.joda.time.Interval.withChronology : $r3 = new org.joda.time.Interval >>>>>>>> org.joda.time.Interval.withChronology : $l0 = virtualinvoke r0.<org.joda.time.Interval: long getStartMillis()>()
org.joda.time.Interval.withChronology : $l0 = virtualinvoke r0.<org.joda.time.Interval: long getStartMillis()>() >>>>>>>> org.joda.time.Interval.withChronology : $l1 = virtualinvoke r0.<org.joda.time.Interval: long getEndMillis()>()
org.joda.time.Interval.withChronology : $l1 = virtualinvoke r0.<org.joda.time.Interval: long getEndMillis()>() >>>>>>>> org.joda.time.Interval.withChronology : specialinvoke $r3.<org.joda.time.Interval: void <init>(long,long,org.joda.time.Chronology)>($l0, $l1, r1)
org.joda.time.Interval.withChronology : specialinvoke $r3.<org.joda.time.Interval: void <init>(long,long,org.joda.time.Chronology)>($l0, $l1, r1) >>>>>>>> org.joda.time.Interval.withChronology : return $r3
