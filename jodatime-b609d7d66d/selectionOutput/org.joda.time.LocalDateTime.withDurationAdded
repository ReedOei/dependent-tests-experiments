org.joda.time.LocalDateTime.withDurationAdded : if r1 == null >>>>>>>> org.joda.time.LocalDateTime.withDurationAdded : if i0 != 0
org.joda.time.LocalDateTime.withDurationAdded : if r1 == null >>>>>>>> org.joda.time.LocalDateTime.withDurationAdded : return r0
org.joda.time.LocalDateTime.withDurationAdded : if i0 != 0 >>>>>>>> org.joda.time.LocalDateTime.withDurationAdded : return r0
org.joda.time.LocalDateTime.withDurationAdded : if i0 != 0 >>>>>>>> org.joda.time.LocalDateTime.withDurationAdded : $r2 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>()
org.joda.time.LocalDateTime.withDurationAdded : $r2 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.LocalDateTime.withDurationAdded : $l2 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>()
org.joda.time.LocalDateTime.withDurationAdded : $l2 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>() >>>>>>>> org.joda.time.LocalDateTime.withDurationAdded : $l3 = interfaceinvoke r1.<org.joda.time.ReadableDuration: long getMillis()>()
org.joda.time.LocalDateTime.withDurationAdded : $l3 = interfaceinvoke r1.<org.joda.time.ReadableDuration: long getMillis()>() >>>>>>>> org.joda.time.LocalDateTime.withDurationAdded : l1 = virtualinvoke $r2.<org.joda.time.Chronology: long add(long,long,int)>($l2, $l3, i0)
org.joda.time.LocalDateTime.withDurationAdded : l1 = virtualinvoke $r2.<org.joda.time.Chronology: long add(long,long,int)>($l2, $l3, i0) >>>>>>>> org.joda.time.LocalDateTime.withDurationAdded : $r3 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withLocalMillis(long)>(l1)
org.joda.time.LocalDateTime.withDurationAdded : $r3 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.LocalDateTime withLocalMillis(long)>(l1) >>>>>>>> org.joda.time.LocalDateTime.withDurationAdded : return $r3
