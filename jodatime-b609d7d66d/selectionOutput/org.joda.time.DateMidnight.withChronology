org.joda.time.DateMidnight.withChronology : $r2 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.DateMidnight.withChronology : if r1 != $r2
org.joda.time.DateMidnight.withChronology : if r1 != $r2 >>>>>>>> org.joda.time.DateMidnight.withChronology : $r3 = r0
org.joda.time.DateMidnight.withChronology : if r1 != $r2 >>>>>>>> org.joda.time.DateMidnight.withChronology : $r3 = new org.joda.time.DateMidnight
org.joda.time.DateMidnight.withChronology : $r3 = new org.joda.time.DateMidnight >>>>>>>> org.joda.time.DateMidnight.withChronology : $l0 = virtualinvoke r0.<org.joda.time.DateMidnight: long getMillis()>()
org.joda.time.DateMidnight.withChronology : $l0 = virtualinvoke r0.<org.joda.time.DateMidnight: long getMillis()>() >>>>>>>> org.joda.time.DateMidnight.withChronology : specialinvoke $r3.<org.joda.time.DateMidnight: void <init>(long,org.joda.time.Chronology)>($l0, r1)
org.joda.time.DateMidnight.withChronology : specialinvoke $r3.<org.joda.time.DateMidnight: void <init>(long,org.joda.time.Chronology)>($l0, r1) >>>>>>>> org.joda.time.DateMidnight.withChronology : return $r3
org.joda.time.DateMidnight.withChronology : $r3 = r0 >>>>>>>> org.joda.time.DateMidnight.withChronology : goto [?= return $r3]
org.joda.time.DateMidnight.withChronology : goto [?= return $r3] >>>>>>>> org.joda.time.DateMidnight.withChronology : return $r3
