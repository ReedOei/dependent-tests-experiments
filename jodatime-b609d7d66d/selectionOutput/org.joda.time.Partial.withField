org.joda.time.Partial.withField : i1 = virtualinvoke r0.<org.joda.time.Partial: int indexOfSupported(org.joda.time.DateTimeFieldType)>(r1) >>>>>>>> org.joda.time.Partial.withField : $i2 = virtualinvoke r0.<org.joda.time.Partial: int getValue(int)>(i1)
org.joda.time.Partial.withField : $i2 = virtualinvoke r0.<org.joda.time.Partial: int getValue(int)>(i1) >>>>>>>> org.joda.time.Partial.withField : if i0 != $i2
org.joda.time.Partial.withField : if i0 != $i2 >>>>>>>> org.joda.time.Partial.withField : return r0
org.joda.time.Partial.withField : if i0 != $i2 >>>>>>>> org.joda.time.Partial.withField : r2 = virtualinvoke r0.<org.joda.time.Partial: int[] getValues()>()
org.joda.time.Partial.withField : r2 = virtualinvoke r0.<org.joda.time.Partial: int[] getValues()>() >>>>>>>> org.joda.time.Partial.withField : $r3 = virtualinvoke r0.<org.joda.time.Partial: org.joda.time.DateTimeField getField(int)>(i1)
org.joda.time.Partial.withField : $r3 = virtualinvoke r0.<org.joda.time.Partial: org.joda.time.DateTimeField getField(int)>(i1) >>>>>>>> org.joda.time.Partial.withField : r4 = virtualinvoke $r3.<org.joda.time.DateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>(r0, i1, r2, i0)
org.joda.time.Partial.withField : r4 = virtualinvoke $r3.<org.joda.time.DateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>(r0, i1, r2, i0) >>>>>>>> org.joda.time.Partial.withField : $r5 = new org.joda.time.Partial
org.joda.time.Partial.withField : $r5 = new org.joda.time.Partial >>>>>>>> org.joda.time.Partial.withField : specialinvoke $r5.<org.joda.time.Partial: void <init>(org.joda.time.Partial,int[])>(r0, r4)
org.joda.time.Partial.withField : specialinvoke $r5.<org.joda.time.Partial: void <init>(org.joda.time.Partial,int[])>(r0, r4) >>>>>>>> org.joda.time.Partial.withField : return $r5
