org.joda.time.tz.ZoneInfoCompiler.test : $r6 = virtualinvoke r1.<org.joda.time.DateTimeZone: java.lang.String getID()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r6)
org.joda.time.tz.ZoneInfoCompiler.test : $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r6) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : if $z0 != 0
org.joda.time.tz.ZoneInfoCompiler.test : if $z0 != 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : return 1
org.joda.time.tz.ZoneInfoCompiler.test : if $z0 != 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r7 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>()
org.joda.time.tz.ZoneInfoCompiler.test : $r7 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r8 = virtualinvoke $r7.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeField year()>()
org.joda.time.tz.ZoneInfoCompiler.test : $r8 = virtualinvoke $r7.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : l0 = virtualinvoke $r8.<org.joda.time.DateTimeField: long set(long,int)>(0L, 1850)
org.joda.time.tz.ZoneInfoCompiler.test : l0 = virtualinvoke $r8.<org.joda.time.DateTimeField: long set(long,int)>(0L, 1850) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r9 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>()
org.joda.time.tz.ZoneInfoCompiler.test : $r9 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r10 = virtualinvoke $r9.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeField year()>()
org.joda.time.tz.ZoneInfoCompiler.test : $r10 = virtualinvoke $r9.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : l1 = virtualinvoke $r10.<org.joda.time.DateTimeField: long set(long,int)>(0L, 2050)
org.joda.time.tz.ZoneInfoCompiler.test : l1 = virtualinvoke $r10.<org.joda.time.DateTimeField: long set(long,int)>(0L, 2050) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : i2 = virtualinvoke r1.<org.joda.time.DateTimeZone: int getOffset(long)>(l0)
org.joda.time.tz.ZoneInfoCompiler.test : i2 = virtualinvoke r1.<org.joda.time.DateTimeZone: int getOffset(long)>(l0) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : r2 = virtualinvoke r1.<org.joda.time.DateTimeZone: java.lang.String getNameKey(long)>(l0)
org.joda.time.tz.ZoneInfoCompiler.test : r2 = virtualinvoke r1.<org.joda.time.DateTimeZone: java.lang.String getNameKey(long)>(l0) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r11 = new java.util.ArrayList
org.joda.time.tz.ZoneInfoCompiler.test : $r11 = new java.util.ArrayList >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : specialinvoke $r11.<java.util.ArrayList: void <init>()>()
org.joda.time.tz.ZoneInfoCompiler.test : specialinvoke $r11.<java.util.ArrayList: void <init>()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : r3 = $r11
org.joda.time.tz.ZoneInfoCompiler.test : r3 = $r11 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : l3 = virtualinvoke r1.<org.joda.time.DateTimeZone: long nextTransition(long)>(l0)
org.joda.time.tz.ZoneInfoCompiler.test : l3 = virtualinvoke r1.<org.joda.time.DateTimeZone: long nextTransition(long)>(l0) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $b6 = l3 cmp l0
org.joda.time.tz.ZoneInfoCompiler.test : $b6 = l3 cmp l0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : if $b6 == 0
org.joda.time.tz.ZoneInfoCompiler.test : if $b6 == 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $b7 = l3 cmp l1
org.joda.time.tz.ZoneInfoCompiler.test : if $b6 == 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r35 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>()
org.joda.time.tz.ZoneInfoCompiler.test : $r35 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r36 = virtualinvoke $r35.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeField year()>()
org.joda.time.tz.ZoneInfoCompiler.test : $r36 = virtualinvoke $r35.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : l9 = virtualinvoke $r36.<org.joda.time.DateTimeField: long set(long,int)>(0L, 2050)
org.joda.time.tz.ZoneInfoCompiler.test : l9 = virtualinvoke $r36.<org.joda.time.DateTimeField: long set(long,int)>(0L, 2050) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r37 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>()
org.joda.time.tz.ZoneInfoCompiler.test : $r37 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r38 = virtualinvoke $r37.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeField year()>()
org.joda.time.tz.ZoneInfoCompiler.test : $r38 = virtualinvoke $r37.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : l10 = virtualinvoke $r38.<org.joda.time.DateTimeField: long set(long,int)>(0L, 1850)
org.joda.time.tz.ZoneInfoCompiler.test : l10 = virtualinvoke $r38.<org.joda.time.DateTimeField: long set(long,int)>(0L, 1850) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : i11 = interfaceinvoke r3.<java.util.List: int size()>()
org.joda.time.tz.ZoneInfoCompiler.test : i11 = interfaceinvoke r3.<java.util.List: int size()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : i11 = i11 + -1
org.joda.time.tz.ZoneInfoCompiler.test : i11 = i11 + -1 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : if i11 < 0
org.joda.time.tz.ZoneInfoCompiler.test : if i11 < 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : l5 = virtualinvoke r1.<org.joda.time.DateTimeZone: long previousTransition(long)>(l9)
org.joda.time.tz.ZoneInfoCompiler.test : if i11 < 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : return 1
org.joda.time.tz.ZoneInfoCompiler.test : l5 = virtualinvoke r1.<org.joda.time.DateTimeZone: long previousTransition(long)>(l9) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $b12 = l5 cmp l9
org.joda.time.tz.ZoneInfoCompiler.test : $b12 = l5 cmp l9 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : if $b12 == 0
org.joda.time.tz.ZoneInfoCompiler.test : if $b12 == 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $b13 = l5 cmp l10
org.joda.time.tz.ZoneInfoCompiler.test : if $b12 == 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : return 1
org.joda.time.tz.ZoneInfoCompiler.test : $b13 = l5 cmp l10 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : if $b13 >= 0
org.joda.time.tz.ZoneInfoCompiler.test : if $b13 >= 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : goto [?= return 1]
org.joda.time.tz.ZoneInfoCompiler.test : if $b13 >= 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : l9 = l5
org.joda.time.tz.ZoneInfoCompiler.test : l9 = l5 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r39 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i11)
org.joda.time.tz.ZoneInfoCompiler.test : $r39 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i11) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r40 = (java.lang.Long) $r39
org.joda.time.tz.ZoneInfoCompiler.test : $r40 = (java.lang.Long) $r39 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : l14 = virtualinvoke $r40.<java.lang.Long: long longValue()>()
org.joda.time.tz.ZoneInfoCompiler.test : l14 = virtualinvoke $r40.<java.lang.Long: long longValue()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $l15 = l14 - 1L
org.joda.time.tz.ZoneInfoCompiler.test : $l15 = l14 - 1L >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $b16 = $l15 cmp l9
org.joda.time.tz.ZoneInfoCompiler.test : $b16 = $l15 cmp l9 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : if $b16 == 0
org.joda.time.tz.ZoneInfoCompiler.test : if $b16 == 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r41 = <java.lang.System: java.io.PrintStream out>
org.joda.time.tz.ZoneInfoCompiler.test : if $b16 == 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : goto [?= i11 = i11 + -1]
org.joda.time.tz.ZoneInfoCompiler.test : goto [?= i11 = i11 + -1] >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : i11 = i11 + -1
org.joda.time.tz.ZoneInfoCompiler.test : $r41 = <java.lang.System: java.io.PrintStream out> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r42 = new java.lang.StringBuilder
org.joda.time.tz.ZoneInfoCompiler.test : $r42 = new java.lang.StringBuilder >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : specialinvoke $r42.<java.lang.StringBuilder: void <init>()>()
org.joda.time.tz.ZoneInfoCompiler.test : specialinvoke $r42.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("*r* Error in ")
org.joda.time.tz.ZoneInfoCompiler.test : $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("*r* Error in ") >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r44 = virtualinvoke r1.<org.joda.time.DateTimeZone: java.lang.String getID()>()
org.joda.time.tz.ZoneInfoCompiler.test : $r44 = virtualinvoke r1.<org.joda.time.DateTimeZone: java.lang.String getID()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r44)
org.joda.time.tz.ZoneInfoCompiler.test : $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r44) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ")
org.joda.time.tz.ZoneInfoCompiler.test : $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ") >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r47 = new org.joda.time.DateTime
org.joda.time.tz.ZoneInfoCompiler.test : $r47 = new org.joda.time.DateTime >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r48 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>()
org.joda.time.tz.ZoneInfoCompiler.test : $r48 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : specialinvoke $r47.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>(l9, $r48)
org.joda.time.tz.ZoneInfoCompiler.test : specialinvoke $r47.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>(l9, $r48) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r49 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r47)
org.joda.time.tz.ZoneInfoCompiler.test : $r49 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r47) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" != ")
org.joda.time.tz.ZoneInfoCompiler.test : $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" != ") >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r51 = new org.joda.time.DateTime
org.joda.time.tz.ZoneInfoCompiler.test : $r51 = new org.joda.time.DateTime >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $l17 = l14 - 1L
org.joda.time.tz.ZoneInfoCompiler.test : $l17 = l14 - 1L >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r52 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>()
org.joda.time.tz.ZoneInfoCompiler.test : $r52 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : specialinvoke $r51.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>($l17, $r52)
org.joda.time.tz.ZoneInfoCompiler.test : specialinvoke $r51.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>($l17, $r52) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r53 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r51)
org.joda.time.tz.ZoneInfoCompiler.test : $r53 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r51) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>()
org.joda.time.tz.ZoneInfoCompiler.test : $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : virtualinvoke $r41.<java.io.PrintStream: void println(java.lang.String)>($r54)
org.joda.time.tz.ZoneInfoCompiler.test : virtualinvoke $r41.<java.io.PrintStream: void println(java.lang.String)>($r54) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : return 0
org.joda.time.tz.ZoneInfoCompiler.test : goto [?= return 1] >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : return 1
org.joda.time.tz.ZoneInfoCompiler.test : $b7 = l3 cmp l1 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : if $b7 <= 0
org.joda.time.tz.ZoneInfoCompiler.test : if $b7 <= 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : goto [?= $r35 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>()]
org.joda.time.tz.ZoneInfoCompiler.test : if $b7 <= 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : l0 = l3
org.joda.time.tz.ZoneInfoCompiler.test : l0 = l3 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : i4 = virtualinvoke r1.<org.joda.time.DateTimeZone: int getOffset(long)>(l0)
org.joda.time.tz.ZoneInfoCompiler.test : i4 = virtualinvoke r1.<org.joda.time.DateTimeZone: int getOffset(long)>(l0) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : r4 = virtualinvoke r1.<org.joda.time.DateTimeZone: java.lang.String getNameKey(long)>(l0)
org.joda.time.tz.ZoneInfoCompiler.test : r4 = virtualinvoke r1.<org.joda.time.DateTimeZone: java.lang.String getNameKey(long)>(l0) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : if i2 != i4
org.joda.time.tz.ZoneInfoCompiler.test : if i2 != i4 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(r4)
org.joda.time.tz.ZoneInfoCompiler.test : if i2 != i4 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : if r4 == null
org.joda.time.tz.ZoneInfoCompiler.test : if r4 == null >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $i8 = virtualinvoke r4.<java.lang.String: int length()>()
org.joda.time.tz.ZoneInfoCompiler.test : if r4 == null >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r22 = <java.lang.System: java.io.PrintStream out>
org.joda.time.tz.ZoneInfoCompiler.test : $r22 = <java.lang.System: java.io.PrintStream out> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r23 = new java.lang.StringBuilder
org.joda.time.tz.ZoneInfoCompiler.test : $r23 = new java.lang.StringBuilder >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : specialinvoke $r23.<java.lang.StringBuilder: void <init>()>()
org.joda.time.tz.ZoneInfoCompiler.test : specialinvoke $r23.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("*s* Error in ")
org.joda.time.tz.ZoneInfoCompiler.test : $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("*s* Error in ") >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r25 = virtualinvoke r1.<org.joda.time.DateTimeZone: java.lang.String getID()>()
org.joda.time.tz.ZoneInfoCompiler.test : $r25 = virtualinvoke r1.<org.joda.time.DateTimeZone: java.lang.String getID()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25)
org.joda.time.tz.ZoneInfoCompiler.test : $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ")
org.joda.time.tz.ZoneInfoCompiler.test : $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ") >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r28 = new org.joda.time.DateTime
org.joda.time.tz.ZoneInfoCompiler.test : $r28 = new org.joda.time.DateTime >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r29 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>()
org.joda.time.tz.ZoneInfoCompiler.test : $r29 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : specialinvoke $r28.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>(l0, $r29)
org.joda.time.tz.ZoneInfoCompiler.test : specialinvoke $r28.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>(l0, $r29) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r28)
org.joda.time.tz.ZoneInfoCompiler.test : $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r28) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", nameKey=")
org.joda.time.tz.ZoneInfoCompiler.test : $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", nameKey=") >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4)
org.joda.time.tz.ZoneInfoCompiler.test : $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>()
org.joda.time.tz.ZoneInfoCompiler.test : $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : virtualinvoke $r22.<java.io.PrintStream: void println(java.lang.String)>($r33)
org.joda.time.tz.ZoneInfoCompiler.test : virtualinvoke $r22.<java.io.PrintStream: void println(java.lang.String)>($r33) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : return 0
org.joda.time.tz.ZoneInfoCompiler.test : $i8 = virtualinvoke r4.<java.lang.String: int length()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : if $i8 >= 3
org.joda.time.tz.ZoneInfoCompiler.test : if $i8 >= 3 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r21 = "??"
org.joda.time.tz.ZoneInfoCompiler.test : if $i8 >= 3 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r34 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0)
org.joda.time.tz.ZoneInfoCompiler.test : $r34 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r34)
org.joda.time.tz.ZoneInfoCompiler.test : interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r34) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : i2 = i4
org.joda.time.tz.ZoneInfoCompiler.test : i2 = i4 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : r2 = r4
org.joda.time.tz.ZoneInfoCompiler.test : r2 = r4 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : goto [?= l3 = virtualinvoke r1.<org.joda.time.DateTimeZone: long nextTransition(long)>(l0)]
org.joda.time.tz.ZoneInfoCompiler.test : goto [?= l3 = virtualinvoke r1.<org.joda.time.DateTimeZone: long nextTransition(long)>(l0)] >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : l3 = virtualinvoke r1.<org.joda.time.DateTimeZone: long nextTransition(long)>(l0)
org.joda.time.tz.ZoneInfoCompiler.test : $r21 = "??" >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $z2 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>(r4)
org.joda.time.tz.ZoneInfoCompiler.test : $z2 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>(r4) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : if $z2 != 0
org.joda.time.tz.ZoneInfoCompiler.test : if $z2 != 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r22 = <java.lang.System: java.io.PrintStream out>
org.joda.time.tz.ZoneInfoCompiler.test : if $z2 != 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r34 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0)
org.joda.time.tz.ZoneInfoCompiler.test : $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(r4) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : if $z1 == 0
org.joda.time.tz.ZoneInfoCompiler.test : if $z1 == 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r12 = <java.lang.System: java.io.PrintStream out>
org.joda.time.tz.ZoneInfoCompiler.test : if $z1 == 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : if r4 == null
org.joda.time.tz.ZoneInfoCompiler.test : $r12 = <java.lang.System: java.io.PrintStream out> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r13 = new java.lang.StringBuilder
org.joda.time.tz.ZoneInfoCompiler.test : $r13 = new java.lang.StringBuilder >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : specialinvoke $r13.<java.lang.StringBuilder: void <init>()>()
org.joda.time.tz.ZoneInfoCompiler.test : specialinvoke $r13.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("*d* Error in ")
org.joda.time.tz.ZoneInfoCompiler.test : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("*d* Error in ") >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r15 = virtualinvoke r1.<org.joda.time.DateTimeZone: java.lang.String getID()>()
org.joda.time.tz.ZoneInfoCompiler.test : $r15 = virtualinvoke r1.<org.joda.time.DateTimeZone: java.lang.String getID()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15)
org.joda.time.tz.ZoneInfoCompiler.test : $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ")
org.joda.time.tz.ZoneInfoCompiler.test : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ") >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r18 = new org.joda.time.DateTime
org.joda.time.tz.ZoneInfoCompiler.test : $r18 = new org.joda.time.DateTime >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r5 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>()
org.joda.time.tz.ZoneInfoCompiler.test : $r5 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : specialinvoke $r18.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>(l0, $r5)
org.joda.time.tz.ZoneInfoCompiler.test : specialinvoke $r18.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>(l0, $r5) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18)
org.joda.time.tz.ZoneInfoCompiler.test : $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>()
org.joda.time.tz.ZoneInfoCompiler.test : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>($r20)
org.joda.time.tz.ZoneInfoCompiler.test : virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>($r20) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : return 0
org.joda.time.tz.ZoneInfoCompiler.test : goto [?= $r35 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>()] >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r35 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>()
