org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : if i0 != 0 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : $r2 = new java.lang.IllegalArgumentException
org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : if i0 != 0 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : if i0 >= 0
org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : if i0 >= 0 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : $i6 = i0 + 1
org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : if i0 >= 0 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : $i6 = i0
org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : $i6 = i0 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : i3 = $i6
org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : i3 = $i6 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : $i7 = i3 - 1
org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : $i7 = i3 - 1 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : l4 = (long) $i7
org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : l4 = (long) $i7 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : $l8 = <org.joda.time.chrono.gj.TestJulianChronology: long JULIAN_EPOCH>
org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : $l8 = <org.joda.time.chrono.gj.TestJulianChronology: long JULIAN_EPOCH> >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : $l9 = $l8 - 1L
org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : $l9 = $l8 - 1L >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : $l10 = 365L * l4
org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : $l10 = 365L * l4 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : $l11 = $l9 + $l10
org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : $l11 = $l9 + $l10 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : $l12 = staticinvoke <org.joda.time.chrono.gj.TestJulianChronology: long div(long,long)>(l4, 4L)
org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : $l12 = staticinvoke <org.joda.time.chrono.gj.TestJulianChronology: long div(long,long)>(l4, 4L) >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : $l13 = $l11 + $l12
org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : $l13 = $l11 + $l12 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : $i14 = 367 * i1
org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : $i14 = 367 * i1 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : $i15 = $i14 - 362
org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : $i15 = $i14 - 362 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : $l16 = (long) $i15
org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : $l16 = (long) $i15 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : $l17 = staticinvoke <org.joda.time.chrono.gj.TestJulianChronology: long div(long,long)>($l16, 12L)
org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : $l17 = staticinvoke <org.joda.time.chrono.gj.TestJulianChronology: long div(long,long)>($l16, 12L) >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : $l18 = $l13 + $l17
org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : $l18 = $l13 + $l17 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : $l19 = (long) i2
org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : $l19 = (long) i2 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : l5 = $l18 + $l19
org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : l5 = $l18 + $l19 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : if i1 <= 2
org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : if i1 <= 2 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : $l20 = l5
org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : if i1 <= 2 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : return l5
org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : $l20 = l5 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : $z0 = virtualinvoke r0.<org.joda.time.chrono.gj.TestJulianChronology: boolean isLeapYear(int)>(i0)
org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : $z0 = virtualinvoke r0.<org.joda.time.chrono.gj.TestJulianChronology: boolean isLeapYear(int)>(i0) >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : if $z0 == 0
org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : if $z0 == 0 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : $l21 = -1L
org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : if $z0 == 0 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : $l21 = -2L
org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : $l21 = -2L >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : l5 = $l20 + $l21
org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : l5 = $l20 + $l21 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : return l5
org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : $l21 = -1L >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : goto [?= l5 = $l20 + $l21]
org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : goto [?= l5 = $l20 + $l21] >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : l5 = $l20 + $l21
org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : $i6 = i0 + 1 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : goto [?= i3 = $i6]
org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : goto [?= i3 = $i6] >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : i3 = $i6
org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : $r2 = new java.lang.IllegalArgumentException >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : $r1 = new java.lang.StringBuilder
org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : $r1 = new java.lang.StringBuilder >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()
org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal year: ")
org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal year: ") >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)
org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0) >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>()
org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5)
org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5) >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromGJ : throw $r2
