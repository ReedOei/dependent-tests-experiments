org.joda.time.base.BasePeriod.toDurationTo : l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>(r1) >>>>>>>> org.joda.time.base.BasePeriod.toDurationTo : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>(r1)
org.joda.time.base.BasePeriod.toDurationTo : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>(r1) >>>>>>>> org.joda.time.base.BasePeriod.toDurationTo : l1 = virtualinvoke r2.<org.joda.time.Chronology: long add(org.joda.time.ReadablePeriod,long,int)>(r0, l0, -1)
org.joda.time.base.BasePeriod.toDurationTo : l1 = virtualinvoke r2.<org.joda.time.Chronology: long add(org.joda.time.ReadablePeriod,long,int)>(r0, l0, -1) >>>>>>>> org.joda.time.base.BasePeriod.toDurationTo : $r3 = new org.joda.time.Duration
org.joda.time.base.BasePeriod.toDurationTo : $r3 = new org.joda.time.Duration >>>>>>>> org.joda.time.base.BasePeriod.toDurationTo : specialinvoke $r3.<org.joda.time.Duration: void <init>(long,long)>(l1, l0)
org.joda.time.base.BasePeriod.toDurationTo : specialinvoke $r3.<org.joda.time.Duration: void <init>(long,long)>(l1, l0) >>>>>>>> org.joda.time.base.BasePeriod.toDurationTo : return $r3
