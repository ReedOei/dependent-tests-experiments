org.joda.time.DateTimeZone.parseOffset : $r1 = new org.joda.time.DateTimeZone$1 >>>>>>>> org.joda.time.DateTimeZone.parseOffset : specialinvoke $r1.<org.joda.time.DateTimeZone$1: void <init>()>()
org.joda.time.DateTimeZone.parseOffset : specialinvoke $r1.<org.joda.time.DateTimeZone$1: void <init>()>() >>>>>>>> org.joda.time.DateTimeZone.parseOffset : r2 = $r1
org.joda.time.DateTimeZone.parseOffset : r2 = $r1 >>>>>>>> org.joda.time.DateTimeZone.parseOffset : $r3 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.format.DateTimeFormatter offsetFormatter()>()
org.joda.time.DateTimeZone.parseOffset : $r3 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.format.DateTimeFormatter offsetFormatter()>() >>>>>>>> org.joda.time.DateTimeZone.parseOffset : $r4 = virtualinvoke $r3.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)>(r2)
org.joda.time.DateTimeZone.parseOffset : $r4 = virtualinvoke $r3.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)>(r2) >>>>>>>> org.joda.time.DateTimeZone.parseOffset : $l0 = virtualinvoke $r4.<org.joda.time.format.DateTimeFormatter: long parseMillis(java.lang.String)>(r0)
org.joda.time.DateTimeZone.parseOffset : $l0 = virtualinvoke $r4.<org.joda.time.format.DateTimeFormatter: long parseMillis(java.lang.String)>(r0) >>>>>>>> org.joda.time.DateTimeZone.parseOffset : $i1 = (int) $l0
org.joda.time.DateTimeZone.parseOffset : $i1 = (int) $l0 >>>>>>>> org.joda.time.DateTimeZone.parseOffset : $i2 = neg $i1
org.joda.time.DateTimeZone.parseOffset : $i2 = neg $i1 >>>>>>>> org.joda.time.DateTimeZone.parseOffset : return $i2
