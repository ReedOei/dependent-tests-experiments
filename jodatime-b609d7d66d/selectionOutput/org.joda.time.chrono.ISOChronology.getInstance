org.joda.time.chrono.ISOChronology.getInstance : if r0 != null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>()
org.joda.time.chrono.ISOChronology.getInstance : if r0 != null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0)
org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : i0 = $i1 & 63
org.joda.time.chrono.ISOChronology.getInstance : i0 = $i1 & 63 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache>
org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache> >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : r1 = $r5[i0]
org.joda.time.chrono.ISOChronology.getInstance : r1 = $r5[i0] >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if r1 == null
org.joda.time.chrono.ISOChronology.getInstance : if r1 == null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r6 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.ISOChronology.getInstance : if r1 == null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r7 = <org.joda.time.chrono.ISOChronology: java.util.Map cCache>
org.joda.time.chrono.ISOChronology.getInstance : $r7 = <org.joda.time.chrono.ISOChronology: java.util.Map cCache> >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : r2 = $r7
org.joda.time.chrono.ISOChronology.getInstance : r2 = $r7 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : entermonitor $r7
org.joda.time.chrono.ISOChronology.getInstance : entermonitor $r7 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r8 = <org.joda.time.chrono.ISOChronology: java.util.Map cCache>
org.joda.time.chrono.ISOChronology.getInstance : entermonitor $r7 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r15 := @caughtexception
org.joda.time.chrono.ISOChronology.getInstance : r4 = $r15 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : exitmonitor r2
org.joda.time.chrono.ISOChronology.getInstance : r4 = $r15 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r15 := @caughtexception
org.joda.time.chrono.ISOChronology.getInstance : exitmonitor r2 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : throw r4
org.joda.time.chrono.ISOChronology.getInstance : exitmonitor r2 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r15 := @caughtexception
org.joda.time.chrono.ISOChronology.getInstance : $r8 = <org.joda.time.chrono.ISOChronology: java.util.Map cCache> >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0)
org.joda.time.chrono.ISOChronology.getInstance : $r8 = <org.joda.time.chrono.ISOChronology: java.util.Map cCache> >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r15 := @caughtexception
org.joda.time.chrono.ISOChronology.getInstance : $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : r10 = (org.joda.time.chrono.ISOChronology) $r9
org.joda.time.chrono.ISOChronology.getInstance : $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r15 := @caughtexception
org.joda.time.chrono.ISOChronology.getInstance : r10 = (org.joda.time.chrono.ISOChronology) $r9 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if r10 != null
org.joda.time.chrono.ISOChronology.getInstance : r10 = (org.joda.time.chrono.ISOChronology) $r9 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r15 := @caughtexception
org.joda.time.chrono.ISOChronology.getInstance : if r10 != null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r11 = new org.joda.time.chrono.ISOChronology
org.joda.time.chrono.ISOChronology.getInstance : if r10 != null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : exitmonitor r2
org.joda.time.chrono.ISOChronology.getInstance : if r10 != null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r15 := @caughtexception
org.joda.time.chrono.ISOChronology.getInstance : exitmonitor r2 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : goto [?= $r16 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache>]
org.joda.time.chrono.ISOChronology.getInstance : exitmonitor r2 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r15 := @caughtexception
org.joda.time.chrono.ISOChronology.getInstance : goto [?= $r16 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache>] >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r16 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache>
org.joda.time.chrono.ISOChronology.getInstance : $r16 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache> >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r16[i0] = r10
org.joda.time.chrono.ISOChronology.getInstance : $r16[i0] = r10 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : return r10
org.joda.time.chrono.ISOChronology.getInstance : $r11 = new org.joda.time.chrono.ISOChronology >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r3 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC>
org.joda.time.chrono.ISOChronology.getInstance : $r11 = new org.joda.time.chrono.ISOChronology >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r15 := @caughtexception
org.joda.time.chrono.ISOChronology.getInstance : $r3 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r12 = staticinvoke <org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>($r3, r0)
org.joda.time.chrono.ISOChronology.getInstance : $r3 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r15 := @caughtexception
org.joda.time.chrono.ISOChronology.getInstance : $r12 = staticinvoke <org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>($r3, r0) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : specialinvoke $r11.<org.joda.time.chrono.ISOChronology: void <init>(org.joda.time.Chronology)>($r12)
org.joda.time.chrono.ISOChronology.getInstance : $r12 = staticinvoke <org.joda.time.chrono.ZonedChronology: org.joda.time.chrono.ZonedChronology getInstance(org.joda.time.Chronology,org.joda.time.DateTimeZone)>($r3, r0) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r15 := @caughtexception
org.joda.time.chrono.ISOChronology.getInstance : specialinvoke $r11.<org.joda.time.chrono.ISOChronology: void <init>(org.joda.time.Chronology)>($r12) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : r10 = $r11
org.joda.time.chrono.ISOChronology.getInstance : specialinvoke $r11.<org.joda.time.chrono.ISOChronology: void <init>(org.joda.time.Chronology)>($r12) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r15 := @caughtexception
org.joda.time.chrono.ISOChronology.getInstance : r10 = $r11 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r13 = <org.joda.time.chrono.ISOChronology: java.util.Map cCache>
org.joda.time.chrono.ISOChronology.getInstance : r10 = $r11 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r15 := @caughtexception
org.joda.time.chrono.ISOChronology.getInstance : $r13 = <org.joda.time.chrono.ISOChronology: java.util.Map cCache> >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r10)
org.joda.time.chrono.ISOChronology.getInstance : $r13 = <org.joda.time.chrono.ISOChronology: java.util.Map cCache> >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r15 := @caughtexception
org.joda.time.chrono.ISOChronology.getInstance : interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r10) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : exitmonitor r2
org.joda.time.chrono.ISOChronology.getInstance : interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r10) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r15 := @caughtexception
org.joda.time.chrono.ISOChronology.getInstance : $r6 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0
org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : return r1
org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r7 = <org.joda.time.chrono.ISOChronology: java.util.Map cCache>
org.joda.time.chrono.ISOChronology.getInstance : r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>() >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0)
