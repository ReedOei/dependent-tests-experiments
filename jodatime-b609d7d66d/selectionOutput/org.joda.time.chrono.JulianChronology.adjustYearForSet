org.joda.time.chrono.JulianChronology.adjustYearForSet : if i0 > 0 >>>>>>>> org.joda.time.chrono.JulianChronology.adjustYearForSet : if i0 != 0
org.joda.time.chrono.JulianChronology.adjustYearForSet : if i0 > 0 >>>>>>>> org.joda.time.chrono.JulianChronology.adjustYearForSet : return i0
org.joda.time.chrono.JulianChronology.adjustYearForSet : if i0 != 0 >>>>>>>> org.joda.time.chrono.JulianChronology.adjustYearForSet : $r1 = new org.joda.time.IllegalFieldValueException
org.joda.time.chrono.JulianChronology.adjustYearForSet : if i0 != 0 >>>>>>>> org.joda.time.chrono.JulianChronology.adjustYearForSet : i0 = i0 + 1
org.joda.time.chrono.JulianChronology.adjustYearForSet : i0 = i0 + 1 >>>>>>>> org.joda.time.chrono.JulianChronology.adjustYearForSet : return i0
org.joda.time.chrono.JulianChronology.adjustYearForSet : $r1 = new org.joda.time.IllegalFieldValueException >>>>>>>> org.joda.time.chrono.JulianChronology.adjustYearForSet : $r0 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>()
org.joda.time.chrono.JulianChronology.adjustYearForSet : $r0 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>() >>>>>>>> org.joda.time.chrono.JulianChronology.adjustYearForSet : $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)
org.joda.time.chrono.JulianChronology.adjustYearForSet : $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) >>>>>>>> org.joda.time.chrono.JulianChronology.adjustYearForSet : specialinvoke $r1.<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>($r0, $r2, null, null)
org.joda.time.chrono.JulianChronology.adjustYearForSet : specialinvoke $r1.<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>($r0, $r2, null, null) >>>>>>>> org.joda.time.chrono.JulianChronology.adjustYearForSet : throw $r1
