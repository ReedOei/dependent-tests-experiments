org.joda.time.field.BaseDateTimeField.convertText : r3 = $r4 >>>>>>>> org.joda.time.field.BaseDateTimeField.convertText : $r5 = new org.joda.time.IllegalFieldValueException
org.joda.time.field.BaseDateTimeField.convertText : $r5 = new org.joda.time.IllegalFieldValueException >>>>>>>> org.joda.time.field.BaseDateTimeField.convertText : $r6 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>()
org.joda.time.field.BaseDateTimeField.convertText : $r6 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType getType()>() >>>>>>>> org.joda.time.field.BaseDateTimeField.convertText : specialinvoke $r5.<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.String)>($r6, r1)
org.joda.time.field.BaseDateTimeField.convertText : specialinvoke $r5.<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.String)>($r6, r1) >>>>>>>> org.joda.time.field.BaseDateTimeField.convertText : throw $r5
org.joda.time.field.BaseDateTimeField.convertText : $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r1) >>>>>>>> org.joda.time.field.BaseDateTimeField.convertText : return $i0
org.joda.time.field.BaseDateTimeField.convertText : $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r1) >>>>>>>> org.joda.time.field.BaseDateTimeField.convertText : $r4 := @caughtexception
