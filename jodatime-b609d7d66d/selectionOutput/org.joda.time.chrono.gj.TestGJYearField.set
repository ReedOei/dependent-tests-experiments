org.joda.time.chrono.gj.TestGJYearField.set : $r2 = r0.<org.joda.time.chrono.gj.TestGJYearField: org.joda.time.chrono.gj.TestGJChronology iChronology> >>>>>>>> org.joda.time.chrono.gj.TestGJYearField.set : r1 = virtualinvoke $r2.<org.joda.time.chrono.gj.TestGJChronology: int[] gjFromMillis(long)>(l0)
org.joda.time.chrono.gj.TestGJYearField.set : r1 = virtualinvoke $r2.<org.joda.time.chrono.gj.TestGJChronology: int[] gjFromMillis(long)>(l0) >>>>>>>> org.joda.time.chrono.gj.TestGJYearField.set : $r3 = r0.<org.joda.time.chrono.gj.TestGJYearField: org.joda.time.chrono.gj.TestGJChronology iChronology>
org.joda.time.chrono.gj.TestGJYearField.set : $r3 = r0.<org.joda.time.chrono.gj.TestGJYearField: org.joda.time.chrono.gj.TestGJChronology iChronology> >>>>>>>> org.joda.time.chrono.gj.TestGJYearField.set : $l2 = virtualinvoke $r3.<org.joda.time.chrono.gj.TestGJChronology: long getTimeOnlyMillis(long)>(l0)
org.joda.time.chrono.gj.TestGJYearField.set : $l2 = virtualinvoke $r3.<org.joda.time.chrono.gj.TestGJChronology: long getTimeOnlyMillis(long)>(l0) >>>>>>>> org.joda.time.chrono.gj.TestGJYearField.set : $r4 = r0.<org.joda.time.chrono.gj.TestGJYearField: org.joda.time.chrono.gj.TestGJChronology iChronology>
org.joda.time.chrono.gj.TestGJYearField.set : $r4 = r0.<org.joda.time.chrono.gj.TestGJYearField: org.joda.time.chrono.gj.TestGJChronology iChronology> >>>>>>>> org.joda.time.chrono.gj.TestGJYearField.set : $i3 = r1[1]
org.joda.time.chrono.gj.TestGJYearField.set : $i3 = r1[1] >>>>>>>> org.joda.time.chrono.gj.TestGJYearField.set : $i4 = r1[2]
org.joda.time.chrono.gj.TestGJYearField.set : $i4 = r1[2] >>>>>>>> org.joda.time.chrono.gj.TestGJYearField.set : $l5 = virtualinvoke $r4.<org.joda.time.chrono.gj.TestGJChronology: long millisFromGJ(int,int,int)>(i1, $i3, $i4)
org.joda.time.chrono.gj.TestGJYearField.set : $l5 = virtualinvoke $r4.<org.joda.time.chrono.gj.TestGJChronology: long millisFromGJ(int,int,int)>(i1, $i3, $i4) >>>>>>>> org.joda.time.chrono.gj.TestGJYearField.set : l6 = $l2 + $l5
org.joda.time.chrono.gj.TestGJYearField.set : l6 = $l2 + $l5 >>>>>>>> org.joda.time.chrono.gj.TestGJYearField.set : $i7 = r1[1]
org.joda.time.chrono.gj.TestGJYearField.set : $i7 = r1[1] >>>>>>>> org.joda.time.chrono.gj.TestGJYearField.set : if $i7 != 2
org.joda.time.chrono.gj.TestGJYearField.set : if $i7 != 2 >>>>>>>> org.joda.time.chrono.gj.TestGJYearField.set : $i8 = r1[2]
org.joda.time.chrono.gj.TestGJYearField.set : if $i7 != 2 >>>>>>>> org.joda.time.chrono.gj.TestGJYearField.set : return l6
org.joda.time.chrono.gj.TestGJYearField.set : $i8 = r1[2] >>>>>>>> org.joda.time.chrono.gj.TestGJYearField.set : if $i8 != 29
org.joda.time.chrono.gj.TestGJYearField.set : if $i8 != 29 >>>>>>>> org.joda.time.chrono.gj.TestGJYearField.set : $r5 = r0.<org.joda.time.chrono.gj.TestGJYearField: org.joda.time.chrono.gj.TestGJChronology iChronology>
org.joda.time.chrono.gj.TestGJYearField.set : if $i8 != 29 >>>>>>>> org.joda.time.chrono.gj.TestGJYearField.set : return l6
org.joda.time.chrono.gj.TestGJYearField.set : $r5 = r0.<org.joda.time.chrono.gj.TestGJYearField: org.joda.time.chrono.gj.TestGJChronology iChronology> >>>>>>>> org.joda.time.chrono.gj.TestGJYearField.set : $z0 = virtualinvoke $r5.<org.joda.time.chrono.gj.TestGJChronology: boolean isLeapYear(int)>(i1)
org.joda.time.chrono.gj.TestGJYearField.set : $z0 = virtualinvoke $r5.<org.joda.time.chrono.gj.TestGJChronology: boolean isLeapYear(int)>(i1) >>>>>>>> org.joda.time.chrono.gj.TestGJYearField.set : if $z0 != 0
org.joda.time.chrono.gj.TestGJYearField.set : if $z0 != 0 >>>>>>>> org.joda.time.chrono.gj.TestGJYearField.set : $r6 = r0.<org.joda.time.chrono.gj.TestGJYearField: org.joda.time.chrono.gj.TestGJChronology iChronology>
org.joda.time.chrono.gj.TestGJYearField.set : if $z0 != 0 >>>>>>>> org.joda.time.chrono.gj.TestGJYearField.set : return l6
org.joda.time.chrono.gj.TestGJYearField.set : $r6 = r0.<org.joda.time.chrono.gj.TestGJYearField: org.joda.time.chrono.gj.TestGJChronology iChronology> >>>>>>>> org.joda.time.chrono.gj.TestGJYearField.set : $r7 = virtualinvoke $r6.<org.joda.time.chrono.gj.TestGJChronology: org.joda.time.DateTimeField dayOfYear()>()
org.joda.time.chrono.gj.TestGJYearField.set : $r7 = virtualinvoke $r6.<org.joda.time.chrono.gj.TestGJChronology: org.joda.time.DateTimeField dayOfYear()>() >>>>>>>> org.joda.time.chrono.gj.TestGJYearField.set : l6 = virtualinvoke $r7.<org.joda.time.DateTimeField: long add(long,int)>(l6, -1)
org.joda.time.chrono.gj.TestGJYearField.set : l6 = virtualinvoke $r7.<org.joda.time.DateTimeField: long add(long,int)>(l6, -1) >>>>>>>> org.joda.time.chrono.gj.TestGJYearField.set : return l6
