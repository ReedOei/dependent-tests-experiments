org.joda.time.tz.CachedDateTimeZone.forZone : $z0 = r0 instanceof org.joda.time.tz.CachedDateTimeZone >>>>>>>> org.joda.time.tz.CachedDateTimeZone.forZone : if $z0 == 0
org.joda.time.tz.CachedDateTimeZone.forZone : if $z0 == 0 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.forZone : $r1 = (org.joda.time.tz.CachedDateTimeZone) r0
org.joda.time.tz.CachedDateTimeZone.forZone : if $z0 == 0 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.forZone : $r2 = new org.joda.time.tz.CachedDateTimeZone
org.joda.time.tz.CachedDateTimeZone.forZone : $r2 = new org.joda.time.tz.CachedDateTimeZone >>>>>>>> org.joda.time.tz.CachedDateTimeZone.forZone : specialinvoke $r2.<org.joda.time.tz.CachedDateTimeZone: void <init>(org.joda.time.DateTimeZone)>(r0)
org.joda.time.tz.CachedDateTimeZone.forZone : specialinvoke $r2.<org.joda.time.tz.CachedDateTimeZone: void <init>(org.joda.time.DateTimeZone)>(r0) >>>>>>>> org.joda.time.tz.CachedDateTimeZone.forZone : return $r2
org.joda.time.tz.CachedDateTimeZone.forZone : $r1 = (org.joda.time.tz.CachedDateTimeZone) r0 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.forZone : return $r1
