org.joda.time.base.AbstractPartial.getValues : $i1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int size()>() >>>>>>>> org.joda.time.base.AbstractPartial.getValues : r1 = newarray (int)[$i1]
org.joda.time.base.AbstractPartial.getValues : r1 = newarray (int)[$i1] >>>>>>>> org.joda.time.base.AbstractPartial.getValues : i0 = 0
org.joda.time.base.AbstractPartial.getValues : i0 = 0 >>>>>>>> org.joda.time.base.AbstractPartial.getValues : $i2 = lengthof r1
org.joda.time.base.AbstractPartial.getValues : $i2 = lengthof r1 >>>>>>>> org.joda.time.base.AbstractPartial.getValues : if i0 >= $i2
org.joda.time.base.AbstractPartial.getValues : if i0 >= $i2 >>>>>>>> org.joda.time.base.AbstractPartial.getValues : $i3 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int getValue(int)>(i0)
org.joda.time.base.AbstractPartial.getValues : if i0 >= $i2 >>>>>>>> org.joda.time.base.AbstractPartial.getValues : return r1
org.joda.time.base.AbstractPartial.getValues : $i3 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int getValue(int)>(i0) >>>>>>>> org.joda.time.base.AbstractPartial.getValues : r1[i0] = $i3
org.joda.time.base.AbstractPartial.getValues : r1[i0] = $i3 >>>>>>>> org.joda.time.base.AbstractPartial.getValues : i0 = i0 + 1
org.joda.time.base.AbstractPartial.getValues : i0 = i0 + 1 >>>>>>>> org.joda.time.base.AbstractPartial.getValues : goto [?= $i2 = lengthof r1]
org.joda.time.base.AbstractPartial.getValues : goto [?= $i2 = lengthof r1] >>>>>>>> org.joda.time.base.AbstractPartial.getValues : $i2 = lengthof r1
