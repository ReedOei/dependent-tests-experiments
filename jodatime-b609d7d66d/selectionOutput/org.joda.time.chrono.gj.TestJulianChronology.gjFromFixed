org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $l1 = <org.joda.time.chrono.gj.TestJulianChronology: long JULIAN_EPOCH> >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $l9 = l0 - $l1
org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $l9 = l0 - $l1 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $l10 = 4L * $l9
org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $l10 = 4L * $l9 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $l11 = $l10 + 1464L
org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $l11 = $l10 + 1464L >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : l2 = staticinvoke <org.joda.time.chrono.gj.TestJulianChronology: long div(long,long)>($l11, 1461L)
org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : l2 = staticinvoke <org.joda.time.chrono.gj.TestJulianChronology: long div(long,long)>($l11, 1461L) >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $b12 = l2 cmp 0L
org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $b12 = l2 cmp 0L >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : if $b12 > 0
org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : if $b12 > 0 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $l13 = l2 - 1L
org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : if $b12 > 0 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $l13 = l2
org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $l13 = l2 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : l3 = $l13
org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : l3 = $l13 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : i4 = (int) l3
org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : i4 = (int) l3 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $l14 = (long) i4
org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $l14 = (long) i4 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $b15 = $l14 cmp l3
org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $b15 = $l14 cmp l3 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : if $b15 == 0
org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : if $b15 == 0 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $r1 = new java.lang.RuntimeException
org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : if $b15 == 0 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $l16 = virtualinvoke r0.<org.joda.time.chrono.gj.TestJulianChronology: long fixedFromGJ(int,int,int)>(i4, 1, 1)
org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $l16 = virtualinvoke r0.<org.joda.time.chrono.gj.TestJulianChronology: long fixedFromGJ(int,int,int)>(i4, 1, 1) >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : l5 = l0 - $l16
org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : l5 = l0 - $l16 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $l17 = virtualinvoke r0.<org.joda.time.chrono.gj.TestJulianChronology: long fixedFromGJ(int,int,int)>(i4, 3, 1)
org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $l17 = virtualinvoke r0.<org.joda.time.chrono.gj.TestJulianChronology: long fixedFromGJ(int,int,int)>(i4, 3, 1) >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $b18 = l0 cmp $l17
org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $b18 = l0 cmp $l17 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : if $b18 >= 0
org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : if $b18 >= 0 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : l6 = 0L
org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : if $b18 >= 0 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $z0 = virtualinvoke r0.<org.joda.time.chrono.gj.TestJulianChronology: boolean isLeapYear(int)>(i4)
org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $z0 = virtualinvoke r0.<org.joda.time.chrono.gj.TestJulianChronology: boolean isLeapYear(int)>(i4) >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : if $z0 == 0
org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : if $z0 == 0 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : l6 = 1L
org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : if $z0 == 0 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : l6 = 2L
org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : l6 = 2L >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $l19 = l5 + l6
org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $l19 = l5 + l6 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $l20 = 12L * $l19
org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $l20 = 12L * $l19 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $l21 = $l20 + 373L
org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $l21 = $l20 + 373L >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $l22 = staticinvoke <org.joda.time.chrono.gj.TestJulianChronology: long div(long,long)>($l21, 367L)
org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $l22 = staticinvoke <org.joda.time.chrono.gj.TestJulianChronology: long div(long,long)>($l21, 367L) >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : i7 = (int) $l22
org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : i7 = (int) $l22 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $l23 = virtualinvoke r0.<org.joda.time.chrono.gj.TestJulianChronology: long fixedFromGJ(int,int,int)>(i4, i7, 1)
org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $l23 = virtualinvoke r0.<org.joda.time.chrono.gj.TestJulianChronology: long fixedFromGJ(int,int,int)>(i4, i7, 1) >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $l24 = l0 - $l23
org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $l24 = l0 - $l23 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $l25 = $l24 + 1L
org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $l25 = $l24 + 1L >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : i8 = (int) $l25
org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : i8 = (int) $l25 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $r6 = newarray (int)[3]
org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $r6 = newarray (int)[3] >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $r6[0] = i4
org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $r6[0] = i4 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $r6[1] = i7
org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $r6[1] = i7 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $r6[2] = i8
org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $r6[2] = i8 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : return $r6
org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : l6 = 1L >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : goto [?= $l19 = l5 + l6]
org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : goto [?= $l19 = l5 + l6] >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $l19 = l5 + l6
org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : l6 = 0L >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : goto [?= $l19 = l5 + l6]
org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : goto [?= $l19 = l5 + l6] >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $l19 = l5 + l6
org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $r1 = new java.lang.RuntimeException >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $r2 = new java.lang.StringBuilder
org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $r2 = new java.lang.StringBuilder >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("year cannot be cast to an int: ")
org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("year cannot be cast to an int: ") >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l3)
org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l3) >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>()
org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>($r5)
org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>($r5) >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : throw $r1
org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : $l13 = l2 - 1L >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : goto [?= l3 = $l13]
org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : goto [?= l3 = $l13] >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.gjFromFixed : l3 = $l13
