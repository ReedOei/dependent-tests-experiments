org.joda.time.DateTime.withEarlierOffsetAtOverlap : $r1 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.DateTime.withEarlierOffsetAtOverlap : $l1 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>()
org.joda.time.DateTime.withEarlierOffsetAtOverlap : $l1 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>() >>>>>>>> org.joda.time.DateTime.withEarlierOffsetAtOverlap : l0 = virtualinvoke $r1.<org.joda.time.DateTimeZone: long adjustOffset(long,boolean)>($l1, 0)
org.joda.time.DateTime.withEarlierOffsetAtOverlap : l0 = virtualinvoke $r1.<org.joda.time.DateTimeZone: long adjustOffset(long,boolean)>($l1, 0) >>>>>>>> org.joda.time.DateTime.withEarlierOffsetAtOverlap : $r2 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>(l0)
org.joda.time.DateTime.withEarlierOffsetAtOverlap : $r2 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>(l0) >>>>>>>> org.joda.time.DateTime.withEarlierOffsetAtOverlap : return $r2
