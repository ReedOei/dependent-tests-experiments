org.joda.time.Partial.with : if r1 != null >>>>>>>> org.joda.time.Partial.with : $r9 = new java.lang.IllegalArgumentException
org.joda.time.Partial.with : if r1 != null >>>>>>>> org.joda.time.Partial.with : i1 = virtualinvoke r0.<org.joda.time.Partial: int indexOf(org.joda.time.DateTimeFieldType)>(r1)
org.joda.time.Partial.with : i1 = virtualinvoke r0.<org.joda.time.Partial: int indexOf(org.joda.time.DateTimeFieldType)>(r1) >>>>>>>> org.joda.time.Partial.with : if i1 != -1
org.joda.time.Partial.with : if i1 != -1 >>>>>>>> org.joda.time.Partial.with : $r10 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>
org.joda.time.Partial.with : if i1 != -1 >>>>>>>> org.joda.time.Partial.with : $i17 = virtualinvoke r0.<org.joda.time.Partial: int getValue(int)>(i1)
org.joda.time.Partial.with : $i17 = virtualinvoke r0.<org.joda.time.Partial: int getValue(int)>(i1) >>>>>>>> org.joda.time.Partial.with : if i0 != $i17
org.joda.time.Partial.with : if i0 != $i17 >>>>>>>> org.joda.time.Partial.with : return r0
org.joda.time.Partial.with : if i0 != $i17 >>>>>>>> org.joda.time.Partial.with : r29 = virtualinvoke r0.<org.joda.time.Partial: int[] getValues()>()
org.joda.time.Partial.with : r29 = virtualinvoke r0.<org.joda.time.Partial: int[] getValues()>() >>>>>>>> org.joda.time.Partial.with : $r30 = virtualinvoke r0.<org.joda.time.Partial: org.joda.time.DateTimeField getField(int)>(i1)
org.joda.time.Partial.with : $r30 = virtualinvoke r0.<org.joda.time.Partial: org.joda.time.DateTimeField getField(int)>(i1) >>>>>>>> org.joda.time.Partial.with : r31 = virtualinvoke $r30.<org.joda.time.DateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>(r0, i1, r29, i0)
org.joda.time.Partial.with : r31 = virtualinvoke $r30.<org.joda.time.DateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>(r0, i1, r29, i0) >>>>>>>> org.joda.time.Partial.with : $r32 = new org.joda.time.Partial
org.joda.time.Partial.with : $r32 = new org.joda.time.Partial >>>>>>>> org.joda.time.Partial.with : specialinvoke $r32.<org.joda.time.Partial: void <init>(org.joda.time.Partial,int[])>(r0, r31)
org.joda.time.Partial.with : specialinvoke $r32.<org.joda.time.Partial: void <init>(org.joda.time.Partial,int[])>(r0, r31) >>>>>>>> org.joda.time.Partial.with : return $r32
org.joda.time.Partial.with : $r10 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes> >>>>>>>> org.joda.time.Partial.with : $i4 = lengthof $r10
org.joda.time.Partial.with : $i4 = lengthof $r10 >>>>>>>> org.joda.time.Partial.with : $i5 = $i4 + 1
org.joda.time.Partial.with : $i5 = $i4 + 1 >>>>>>>> org.joda.time.Partial.with : r2 = newarray (org.joda.time.DateTimeFieldType)[$i5]
org.joda.time.Partial.with : r2 = newarray (org.joda.time.DateTimeFieldType)[$i5] >>>>>>>> org.joda.time.Partial.with : $i6 = lengthof r2
org.joda.time.Partial.with : $i6 = lengthof r2 >>>>>>>> org.joda.time.Partial.with : r3 = newarray (int)[$i6]
org.joda.time.Partial.with : r3 = newarray (int)[$i6] >>>>>>>> org.joda.time.Partial.with : i2 = 0
org.joda.time.Partial.with : i2 = 0 >>>>>>>> org.joda.time.Partial.with : $r11 = virtualinvoke r1.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getDurationType()>()
org.joda.time.Partial.with : $r11 = virtualinvoke r1.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getDurationType()>() >>>>>>>> org.joda.time.Partial.with : $r12 = r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology>
org.joda.time.Partial.with : $r12 = r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology> >>>>>>>> org.joda.time.Partial.with : r4 = virtualinvoke $r11.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r12)
org.joda.time.Partial.with : r4 = virtualinvoke $r11.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r12) >>>>>>>> org.joda.time.Partial.with : $z0 = virtualinvoke r4.<org.joda.time.DurationField: boolean isSupported()>()
org.joda.time.Partial.with : $z0 = virtualinvoke r4.<org.joda.time.DurationField: boolean isSupported()>() >>>>>>>> org.joda.time.Partial.with : if $z0 == 0
org.joda.time.Partial.with : if $z0 == 0 >>>>>>>> org.joda.time.Partial.with : $r13 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>
org.joda.time.Partial.with : if $z0 == 0 >>>>>>>> org.joda.time.Partial.with : $r21 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>
org.joda.time.Partial.with : $r21 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes> >>>>>>>> org.joda.time.Partial.with : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r21, 0, r2, 0, i2)
org.joda.time.Partial.with : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r21, 0, r2, 0, i2) >>>>>>>> org.joda.time.Partial.with : $r22 = r0.<org.joda.time.Partial: int[] iValues>
org.joda.time.Partial.with : $r22 = r0.<org.joda.time.Partial: int[] iValues> >>>>>>>> org.joda.time.Partial.with : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r22, 0, r3, 0, i2)
org.joda.time.Partial.with : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r22, 0, r3, 0, i2) >>>>>>>> org.joda.time.Partial.with : r2[i2] = r1
org.joda.time.Partial.with : r2[i2] = r1 >>>>>>>> org.joda.time.Partial.with : r3[i2] = i0
org.joda.time.Partial.with : r3[i2] = i0 >>>>>>>> org.joda.time.Partial.with : $r23 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>
org.joda.time.Partial.with : $r23 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes> >>>>>>>> org.joda.time.Partial.with : $i9 = i2 + 1
org.joda.time.Partial.with : $i9 = i2 + 1 >>>>>>>> org.joda.time.Partial.with : $i10 = lengthof r2
org.joda.time.Partial.with : $i10 = lengthof r2 >>>>>>>> org.joda.time.Partial.with : $i11 = $i10 - i2
org.joda.time.Partial.with : $i11 = $i10 - i2 >>>>>>>> org.joda.time.Partial.with : $i12 = $i11 - 1
org.joda.time.Partial.with : $i12 = $i11 - 1 >>>>>>>> org.joda.time.Partial.with : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r23, i2, r2, $i9, $i12)
org.joda.time.Partial.with : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r23, i2, r2, $i9, $i12) >>>>>>>> org.joda.time.Partial.with : $r24 = r0.<org.joda.time.Partial: int[] iValues>
org.joda.time.Partial.with : $r24 = r0.<org.joda.time.Partial: int[] iValues> >>>>>>>> org.joda.time.Partial.with : $i13 = i2 + 1
org.joda.time.Partial.with : $i13 = i2 + 1 >>>>>>>> org.joda.time.Partial.with : $i14 = lengthof r3
org.joda.time.Partial.with : $i14 = lengthof r3 >>>>>>>> org.joda.time.Partial.with : $i15 = $i14 - i2
org.joda.time.Partial.with : $i15 = $i14 - i2 >>>>>>>> org.joda.time.Partial.with : $i16 = $i15 - 1
org.joda.time.Partial.with : $i16 = $i15 - 1 >>>>>>>> org.joda.time.Partial.with : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r24, i2, r3, $i13, $i16)
org.joda.time.Partial.with : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r24, i2, r3, $i13, $i16) >>>>>>>> org.joda.time.Partial.with : $r25 = new org.joda.time.Partial
org.joda.time.Partial.with : $r25 = new org.joda.time.Partial >>>>>>>> org.joda.time.Partial.with : $r26 = r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology>
org.joda.time.Partial.with : $r26 = r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology> >>>>>>>> org.joda.time.Partial.with : specialinvoke $r25.<org.joda.time.Partial: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeFieldType[],int[])>($r26, r2, r3)
org.joda.time.Partial.with : specialinvoke $r25.<org.joda.time.Partial: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeFieldType[],int[])>($r26, r2, r3) >>>>>>>> org.joda.time.Partial.with : r27 = $r25
org.joda.time.Partial.with : r27 = $r25 >>>>>>>> org.joda.time.Partial.with : $r28 = r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology>
org.joda.time.Partial.with : $r28 = r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology> >>>>>>>> org.joda.time.Partial.with : virtualinvoke $r28.<org.joda.time.Chronology: void validate(org.joda.time.ReadablePartial,int[])>(r27, r3)
org.joda.time.Partial.with : virtualinvoke $r28.<org.joda.time.Chronology: void validate(org.joda.time.ReadablePartial,int[])>(r27, r3) >>>>>>>> org.joda.time.Partial.with : return r27
org.joda.time.Partial.with : $r13 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes> >>>>>>>> org.joda.time.Partial.with : $i7 = lengthof $r13
org.joda.time.Partial.with : $i7 = lengthof $r13 >>>>>>>> org.joda.time.Partial.with : if i2 >= $i7
org.joda.time.Partial.with : if i2 >= $i7 >>>>>>>> org.joda.time.Partial.with : $r14 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>
org.joda.time.Partial.with : if i2 >= $i7 >>>>>>>> org.joda.time.Partial.with : $r21 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>
org.joda.time.Partial.with : $r14 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes> >>>>>>>> org.joda.time.Partial.with : r5 = $r14[i2]
org.joda.time.Partial.with : r5 = $r14[i2] >>>>>>>> org.joda.time.Partial.with : $r15 = virtualinvoke r5.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getDurationType()>()
org.joda.time.Partial.with : $r15 = virtualinvoke r5.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getDurationType()>() >>>>>>>> org.joda.time.Partial.with : $r16 = r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology>
org.joda.time.Partial.with : $r16 = r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology> >>>>>>>> org.joda.time.Partial.with : r6 = virtualinvoke $r15.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r16)
org.joda.time.Partial.with : r6 = virtualinvoke $r15.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r16) >>>>>>>> org.joda.time.Partial.with : $z1 = virtualinvoke r6.<org.joda.time.DurationField: boolean isSupported()>()
org.joda.time.Partial.with : $z1 = virtualinvoke r6.<org.joda.time.DurationField: boolean isSupported()>() >>>>>>>> org.joda.time.Partial.with : if $z1 == 0
org.joda.time.Partial.with : if $z1 == 0 >>>>>>>> org.joda.time.Partial.with : i3 = virtualinvoke r4.<org.joda.time.DurationField: int compareTo(java.lang.Object)>(r6)
org.joda.time.Partial.with : if $z1 == 0 >>>>>>>> org.joda.time.Partial.with : i2 = i2 + 1
org.joda.time.Partial.with : i2 = i2 + 1 >>>>>>>> org.joda.time.Partial.with : goto [?= $r13 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>]
org.joda.time.Partial.with : goto [?= $r13 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>] >>>>>>>> org.joda.time.Partial.with : $r13 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>
org.joda.time.Partial.with : i3 = virtualinvoke r4.<org.joda.time.DurationField: int compareTo(java.lang.Object)>(r6) >>>>>>>> org.joda.time.Partial.with : if i3 <= 0
org.joda.time.Partial.with : if i3 <= 0 >>>>>>>> org.joda.time.Partial.with : goto [?= $r21 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>]
org.joda.time.Partial.with : if i3 <= 0 >>>>>>>> org.joda.time.Partial.with : if i3 != 0
org.joda.time.Partial.with : if i3 != 0 >>>>>>>> org.joda.time.Partial.with : $r17 = virtualinvoke r1.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getRangeDurationType()>()
org.joda.time.Partial.with : if i3 != 0 >>>>>>>> org.joda.time.Partial.with : i2 = i2 + 1
org.joda.time.Partial.with : $r17 = virtualinvoke r1.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getRangeDurationType()>() >>>>>>>> org.joda.time.Partial.with : $r18 = r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology>
org.joda.time.Partial.with : $r18 = r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology> >>>>>>>> org.joda.time.Partial.with : r7 = virtualinvoke $r17.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r18)
org.joda.time.Partial.with : r7 = virtualinvoke $r17.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r18) >>>>>>>> org.joda.time.Partial.with : $r19 = virtualinvoke r5.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getRangeDurationType()>()
org.joda.time.Partial.with : $r19 = virtualinvoke r5.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getRangeDurationType()>() >>>>>>>> org.joda.time.Partial.with : $r20 = r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology>
org.joda.time.Partial.with : $r20 = r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology> >>>>>>>> org.joda.time.Partial.with : r8 = virtualinvoke $r19.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r20)
org.joda.time.Partial.with : r8 = virtualinvoke $r19.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r20) >>>>>>>> org.joda.time.Partial.with : $i8 = virtualinvoke r7.<org.joda.time.DurationField: int compareTo(java.lang.Object)>(r8)
org.joda.time.Partial.with : $i8 = virtualinvoke r7.<org.joda.time.DurationField: int compareTo(java.lang.Object)>(r8) >>>>>>>> org.joda.time.Partial.with : if $i8 <= 0
org.joda.time.Partial.with : if $i8 <= 0 >>>>>>>> org.joda.time.Partial.with : goto [?= $r21 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>]
org.joda.time.Partial.with : if $i8 <= 0 >>>>>>>> org.joda.time.Partial.with : i2 = i2 + 1
org.joda.time.Partial.with : goto [?= $r21 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>] >>>>>>>> org.joda.time.Partial.with : $r21 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>
org.joda.time.Partial.with : goto [?= $r21 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>] >>>>>>>> org.joda.time.Partial.with : $r21 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>
org.joda.time.Partial.with : $r9 = new java.lang.IllegalArgumentException >>>>>>>> org.joda.time.Partial.with : specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The field type must not be null")
org.joda.time.Partial.with : specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The field type must not be null") >>>>>>>> org.joda.time.Partial.with : throw $r9
