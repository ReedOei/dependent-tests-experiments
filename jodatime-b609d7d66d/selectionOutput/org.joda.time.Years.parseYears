org.joda.time.Years.parseYears : if r0 != null >>>>>>>> org.joda.time.Years.parseYears : $r2 = <org.joda.time.Years: org.joda.time.Years ZERO>
org.joda.time.Years.parseYears : if r0 != null >>>>>>>> org.joda.time.Years.parseYears : $r3 = <org.joda.time.Years: org.joda.time.format.PeriodFormatter PARSER>
org.joda.time.Years.parseYears : $r3 = <org.joda.time.Years: org.joda.time.format.PeriodFormatter PARSER> >>>>>>>> org.joda.time.Years.parseYears : r1 = virtualinvoke $r3.<org.joda.time.format.PeriodFormatter: org.joda.time.Period parsePeriod(java.lang.String)>(r0)
org.joda.time.Years.parseYears : r1 = virtualinvoke $r3.<org.joda.time.format.PeriodFormatter: org.joda.time.Period parsePeriod(java.lang.String)>(r0) >>>>>>>> org.joda.time.Years.parseYears : $i0 = virtualinvoke r1.<org.joda.time.Period: int getYears()>()
org.joda.time.Years.parseYears : $i0 = virtualinvoke r1.<org.joda.time.Period: int getYears()>() >>>>>>>> org.joda.time.Years.parseYears : $r4 = staticinvoke <org.joda.time.Years: org.joda.time.Years years(int)>($i0)
org.joda.time.Years.parseYears : $r4 = staticinvoke <org.joda.time.Years: org.joda.time.Years years(int)>($i0) >>>>>>>> org.joda.time.Years.parseYears : return $r4
org.joda.time.Years.parseYears : $r2 = <org.joda.time.Years: org.joda.time.Years ZERO> >>>>>>>> org.joda.time.Years.parseYears : return $r2
