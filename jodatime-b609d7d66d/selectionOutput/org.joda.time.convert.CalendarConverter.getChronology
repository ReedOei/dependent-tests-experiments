org.joda.time.convert.CalendarConverter.getChronology : $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> org.joda.time.convert.CalendarConverter.getChronology : $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>()
org.joda.time.convert.CalendarConverter.getChronology : $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>() >>>>>>>> org.joda.time.convert.CalendarConverter.getChronology : $z0 = virtualinvoke $r5.<java.lang.String: boolean endsWith(java.lang.String)>(".BuddhistCalendar")
org.joda.time.convert.CalendarConverter.getChronology : $z0 = virtualinvoke $r5.<java.lang.String: boolean endsWith(java.lang.String)>(".BuddhistCalendar") >>>>>>>> org.joda.time.convert.CalendarConverter.getChronology : if $z0 == 0
org.joda.time.convert.CalendarConverter.getChronology : if $z0 == 0 >>>>>>>> org.joda.time.convert.CalendarConverter.getChronology : $r6 = staticinvoke <org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>(r2)
org.joda.time.convert.CalendarConverter.getChronology : if $z0 == 0 >>>>>>>> org.joda.time.convert.CalendarConverter.getChronology : $z1 = r1 instanceof java.util.GregorianCalendar
org.joda.time.convert.CalendarConverter.getChronology : $z1 = r1 instanceof java.util.GregorianCalendar >>>>>>>> org.joda.time.convert.CalendarConverter.getChronology : if $z1 == 0
org.joda.time.convert.CalendarConverter.getChronology : if $z1 == 0 >>>>>>>> org.joda.time.convert.CalendarConverter.getChronology : r3 = (java.util.GregorianCalendar) r1
org.joda.time.convert.CalendarConverter.getChronology : if $z1 == 0 >>>>>>>> org.joda.time.convert.CalendarConverter.getChronology : $r11 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>(r2)
org.joda.time.convert.CalendarConverter.getChronology : $r11 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>(r2) >>>>>>>> org.joda.time.convert.CalendarConverter.getChronology : return $r11
org.joda.time.convert.CalendarConverter.getChronology : r3 = (java.util.GregorianCalendar) r1 >>>>>>>> org.joda.time.convert.CalendarConverter.getChronology : $r7 = virtualinvoke r3.<java.util.GregorianCalendar: java.util.Date getGregorianChange()>()
org.joda.time.convert.CalendarConverter.getChronology : $r7 = virtualinvoke r3.<java.util.GregorianCalendar: java.util.Date getGregorianChange()>() >>>>>>>> org.joda.time.convert.CalendarConverter.getChronology : l0 = virtualinvoke $r7.<java.util.Date: long getTime()>()
org.joda.time.convert.CalendarConverter.getChronology : l0 = virtualinvoke $r7.<java.util.Date: long getTime()>() >>>>>>>> org.joda.time.convert.CalendarConverter.getChronology : $b1 = l0 cmp -9223372036854775808L
org.joda.time.convert.CalendarConverter.getChronology : $b1 = l0 cmp -9223372036854775808L >>>>>>>> org.joda.time.convert.CalendarConverter.getChronology : if $b1 != 0
org.joda.time.convert.CalendarConverter.getChronology : if $b1 != 0 >>>>>>>> org.joda.time.convert.CalendarConverter.getChronology : $r8 = staticinvoke <org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone)>(r2)
org.joda.time.convert.CalendarConverter.getChronology : if $b1 != 0 >>>>>>>> org.joda.time.convert.CalendarConverter.getChronology : $b2 = l0 cmp 9223372036854775807L
org.joda.time.convert.CalendarConverter.getChronology : $b2 = l0 cmp 9223372036854775807L >>>>>>>> org.joda.time.convert.CalendarConverter.getChronology : if $b2 != 0
org.joda.time.convert.CalendarConverter.getChronology : if $b2 != 0 >>>>>>>> org.joda.time.convert.CalendarConverter.getChronology : $r9 = staticinvoke <org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone)>(r2)
org.joda.time.convert.CalendarConverter.getChronology : if $b2 != 0 >>>>>>>> org.joda.time.convert.CalendarConverter.getChronology : $r10 = staticinvoke <org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,long,int)>(r2, l0, 4)
org.joda.time.convert.CalendarConverter.getChronology : $r10 = staticinvoke <org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,long,int)>(r2, l0, 4) >>>>>>>> org.joda.time.convert.CalendarConverter.getChronology : return $r10
org.joda.time.convert.CalendarConverter.getChronology : $r9 = staticinvoke <org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone)>(r2) >>>>>>>> org.joda.time.convert.CalendarConverter.getChronology : return $r9
org.joda.time.convert.CalendarConverter.getChronology : $r8 = staticinvoke <org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone)>(r2) >>>>>>>> org.joda.time.convert.CalendarConverter.getChronology : return $r8
org.joda.time.convert.CalendarConverter.getChronology : $r6 = staticinvoke <org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>(r2) >>>>>>>> org.joda.time.convert.CalendarConverter.getChronology : return $r6
