org.joda.time.YearMonthDay.toDateTime : $r4 = virtualinvoke r0.<org.joda.time.YearMonthDay: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.YearMonthDay.toDateTime : r3 = virtualinvoke $r4.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>(r2)
org.joda.time.YearMonthDay.toDateTime : r3 = virtualinvoke $r4.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>(r2) >>>>>>>> org.joda.time.YearMonthDay.toDateTime : l0 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>()
org.joda.time.YearMonthDay.toDateTime : l0 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>() >>>>>>>> org.joda.time.YearMonthDay.toDateTime : l1 = virtualinvoke r3.<org.joda.time.Chronology: long set(org.joda.time.ReadablePartial,long)>(r0, l0)
org.joda.time.YearMonthDay.toDateTime : l1 = virtualinvoke r3.<org.joda.time.Chronology: long set(org.joda.time.ReadablePartial,long)>(r0, l0) >>>>>>>> org.joda.time.YearMonthDay.toDateTime : if r1 == null
org.joda.time.YearMonthDay.toDateTime : if r1 == null >>>>>>>> org.joda.time.YearMonthDay.toDateTime : l1 = virtualinvoke r3.<org.joda.time.Chronology: long set(org.joda.time.ReadablePartial,long)>(r1, l1)
org.joda.time.YearMonthDay.toDateTime : if r1 == null >>>>>>>> org.joda.time.YearMonthDay.toDateTime : $r5 = new org.joda.time.DateTime
org.joda.time.YearMonthDay.toDateTime : $r5 = new org.joda.time.DateTime >>>>>>>> org.joda.time.YearMonthDay.toDateTime : specialinvoke $r5.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>(l1, r3)
org.joda.time.YearMonthDay.toDateTime : specialinvoke $r5.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>(l1, r3) >>>>>>>> org.joda.time.YearMonthDay.toDateTime : return $r5
org.joda.time.YearMonthDay.toDateTime : l1 = virtualinvoke r3.<org.joda.time.Chronology: long set(org.joda.time.ReadablePartial,long)>(r1, l1) >>>>>>>> org.joda.time.YearMonthDay.toDateTime : $r5 = new org.joda.time.DateTime
