org.joda.time.LocalTime.toDateTimeToday : $r3 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.LocalTime.toDateTimeToday : r2 = virtualinvoke $r3.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>(r1)
org.joda.time.LocalTime.toDateTimeToday : r2 = virtualinvoke $r3.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>(r1) >>>>>>>> org.joda.time.LocalTime.toDateTimeToday : l0 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>()
org.joda.time.LocalTime.toDateTimeToday : l0 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>() >>>>>>>> org.joda.time.LocalTime.toDateTimeToday : l1 = virtualinvoke r2.<org.joda.time.Chronology: long set(org.joda.time.ReadablePartial,long)>(r0, l0)
org.joda.time.LocalTime.toDateTimeToday : l1 = virtualinvoke r2.<org.joda.time.Chronology: long set(org.joda.time.ReadablePartial,long)>(r0, l0) >>>>>>>> org.joda.time.LocalTime.toDateTimeToday : $r4 = new org.joda.time.DateTime
org.joda.time.LocalTime.toDateTimeToday : $r4 = new org.joda.time.DateTime >>>>>>>> org.joda.time.LocalTime.toDateTimeToday : specialinvoke $r4.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>(l1, r2)
org.joda.time.LocalTime.toDateTimeToday : specialinvoke $r4.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>(l1, r2) >>>>>>>> org.joda.time.LocalTime.toDateTimeToday : return $r4
