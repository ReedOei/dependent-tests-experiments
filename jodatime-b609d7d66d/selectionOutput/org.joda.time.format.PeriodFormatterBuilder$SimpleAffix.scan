org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : r2 = r0.<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: java.lang.String iText> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : i1 = virtualinvoke r2.<java.lang.String: int length()>()
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : i1 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : i2 = virtualinvoke r1.<java.lang.String: int length()>()
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : i2 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : i3 = i0
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : i3 = i0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : if i3 >= i2
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : if i3 >= i2 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : $z0 = virtualinvoke r1.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, i3, r2, 0, i1)
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : if i3 >= i2 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : $i5 = i0 ^ -1
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : $i5 = i0 ^ -1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : return $i5
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : $z0 = virtualinvoke r1.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, i3, r2, 0, i1) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : if $z0 == 0
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : if $z0 == 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : return i3
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : if $z0 == 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : $c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i3)
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : $c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i3) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : tableswitch($c4) {     case 43:
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : tableswitch($c4) {     case 43: >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : goto [?= i3 = i3 + 1]
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : tableswitch($c4) {     case 43: >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : goto [?= $i5 = i0 ^ -1]
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : goto [?= $i5 = i0 ^ -1] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : $i5 = i0 ^ -1
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : goto [?= i3 = i3 + 1] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : i3 = i3 + 1
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : i3 = i3 + 1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : goto [?= (branch)]
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : goto [?= (branch)] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : if i3 >= i2
