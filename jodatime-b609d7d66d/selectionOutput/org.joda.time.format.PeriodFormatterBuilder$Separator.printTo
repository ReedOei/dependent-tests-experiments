org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodPrinter iBeforePrinter> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : r5 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodPrinter iAfterPrinter>
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : r5 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodPrinter iAfterPrinter> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : interfaceinvoke r4.<org.joda.time.format.PeriodPrinter: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>(r1, r2, r3)
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : interfaceinvoke r4.<org.joda.time.format.PeriodPrinter: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>(r1, r2, r3) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : $z0 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: boolean iUseBefore>
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : $z0 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: boolean iUseBefore> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : if $z0 == 0
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : if $z0 == 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : $i1 = interfaceinvoke r4.<org.joda.time.format.PeriodPrinter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>(r2, 1, r3)
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : if $z0 == 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : $z2 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: boolean iUseAfter>
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : $z2 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: boolean iUseAfter> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : if $z2 == 0
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : if $z2 == 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : $i2 = interfaceinvoke r5.<org.joda.time.format.PeriodPrinter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>(r2, 1, r3)
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : if $z2 == 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : interfaceinvoke r5.<org.joda.time.format.PeriodPrinter: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>(r1, r2, r3)
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : interfaceinvoke r5.<org.joda.time.format.PeriodPrinter: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>(r1, r2, r3) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : return
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : $i2 = interfaceinvoke r5.<org.joda.time.format.PeriodPrinter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>(r2, 1, r3) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : if $i2 <= 0
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : if $i2 <= 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : $r9 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: java.lang.String iText>
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : if $i2 <= 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : interfaceinvoke r5.<org.joda.time.format.PeriodPrinter: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>(r1, r2, r3)
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : $r9 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: java.lang.String iText> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r9)
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r9) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : interfaceinvoke r5.<org.joda.time.format.PeriodPrinter: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>(r1, r2, r3)
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : $i1 = interfaceinvoke r4.<org.joda.time.format.PeriodPrinter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>(r2, 1, r3) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : if $i1 <= 0
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : if $i1 <= 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : $z1 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: boolean iUseAfter>
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : if $i1 <= 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : interfaceinvoke r5.<org.joda.time.format.PeriodPrinter: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>(r1, r2, r3)
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : $z1 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: boolean iUseAfter> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : if $z1 == 0
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : if $z1 == 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : i0 = interfaceinvoke r5.<org.joda.time.format.PeriodPrinter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>(r2, 2, r3)
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : if $z1 == 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : $r8 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: java.lang.String iText>
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : $r8 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: java.lang.String iText> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r8)
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r8) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : goto [?= interfaceinvoke r5.<org.joda.time.format.PeriodPrinter: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>(r1, r2, r3)]
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : goto [?= interfaceinvoke r5.<org.joda.time.format.PeriodPrinter: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>(r1, r2, r3)] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : interfaceinvoke r5.<org.joda.time.format.PeriodPrinter: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>(r1, r2, r3)
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : i0 = interfaceinvoke r5.<org.joda.time.format.PeriodPrinter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>(r2, 2, r3) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : if i0 <= 0
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : if i0 <= 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : if i0 <= 1
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : if i0 <= 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : goto [?= interfaceinvoke r5.<org.joda.time.format.PeriodPrinter: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>(r1, r2, r3)]
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : goto [?= interfaceinvoke r5.<org.joda.time.format.PeriodPrinter: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>(r1, r2, r3)] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : interfaceinvoke r5.<org.joda.time.format.PeriodPrinter: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>(r1, r2, r3)
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : if i0 <= 1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : $r7 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: java.lang.String iText>
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : if i0 <= 1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : $r7 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: java.lang.String iFinalText>
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : $r7 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: java.lang.String iFinalText> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r7)
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r7) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : goto [?= interfaceinvoke r5.<org.joda.time.format.PeriodPrinter: void printTo(java.io.Writer,org.joda.time.ReadablePeriod,java.util.Locale)>(r1, r2, r3)]
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : $r7 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: java.lang.String iText> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : goto [?= virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r7)]
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : goto [?= virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r7)] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r7)
