org.joda.time.DateMidnight.withPeriodAdded : if r1 == null >>>>>>>> org.joda.time.DateMidnight.withPeriodAdded : if i0 != 0
org.joda.time.DateMidnight.withPeriodAdded : if r1 == null >>>>>>>> org.joda.time.DateMidnight.withPeriodAdded : return r0
org.joda.time.DateMidnight.withPeriodAdded : if i0 != 0 >>>>>>>> org.joda.time.DateMidnight.withPeriodAdded : return r0
org.joda.time.DateMidnight.withPeriodAdded : if i0 != 0 >>>>>>>> org.joda.time.DateMidnight.withPeriodAdded : $r2 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>()
org.joda.time.DateMidnight.withPeriodAdded : $r2 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.DateMidnight.withPeriodAdded : $l2 = virtualinvoke r0.<org.joda.time.DateMidnight: long getMillis()>()
org.joda.time.DateMidnight.withPeriodAdded : $l2 = virtualinvoke r0.<org.joda.time.DateMidnight: long getMillis()>() >>>>>>>> org.joda.time.DateMidnight.withPeriodAdded : l1 = virtualinvoke $r2.<org.joda.time.Chronology: long add(org.joda.time.ReadablePeriod,long,int)>(r1, $l2, i0)
org.joda.time.DateMidnight.withPeriodAdded : l1 = virtualinvoke $r2.<org.joda.time.Chronology: long add(org.joda.time.ReadablePeriod,long,int)>(r1, $l2, i0) >>>>>>>> org.joda.time.DateMidnight.withPeriodAdded : $r3 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.DateMidnight withMillis(long)>(l1)
org.joda.time.DateMidnight.withPeriodAdded : $r3 = virtualinvoke r0.<org.joda.time.DateMidnight: org.joda.time.DateMidnight withMillis(long)>(l1) >>>>>>>> org.joda.time.DateMidnight.withPeriodAdded : return $r3
