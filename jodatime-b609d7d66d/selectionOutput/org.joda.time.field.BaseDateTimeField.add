org.joda.time.field.BaseDateTimeField.add : if i1 != 0 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : return r2
org.joda.time.field.BaseDateTimeField.add : if i1 != 0 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : r3 = null
org.joda.time.field.BaseDateTimeField.add : r3 = null >>>>>>>> org.joda.time.field.BaseDateTimeField.add : if i1 <= 0
org.joda.time.field.BaseDateTimeField.add : if i1 <= 0 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : i2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r2)
org.joda.time.field.BaseDateTimeField.add : if i1 <= 0 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : if i1 >= 0
org.joda.time.field.BaseDateTimeField.add : if i1 >= 0 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : i15 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r2)
org.joda.time.field.BaseDateTimeField.add : if i1 >= 0 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $i28 = r2[i0]
org.joda.time.field.BaseDateTimeField.add : $i28 = r2[i0] >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $r16 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>(r1, i0, r2, $i28)
org.joda.time.field.BaseDateTimeField.add : $r16 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>(r1, i0, r2, $i28) >>>>>>>> org.joda.time.field.BaseDateTimeField.add : return $r16
org.joda.time.field.BaseDateTimeField.add : i15 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r2) >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $i16 = r2[i0]
org.joda.time.field.BaseDateTimeField.add : $i16 = r2[i0] >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $i17 = $i16 + i1
org.joda.time.field.BaseDateTimeField.add : $i17 = $i16 + i1 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : l18 = (long) $i17
org.joda.time.field.BaseDateTimeField.add : l18 = (long) $i17 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $l19 = (long) i15
org.joda.time.field.BaseDateTimeField.add : $l19 = (long) i15 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $b20 = l18 cmp $l19
org.joda.time.field.BaseDateTimeField.add : $b20 = l18 cmp $l19 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : if $b20 < 0
org.joda.time.field.BaseDateTimeField.add : if $b20 < 0 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $i21 = (int) l18
org.joda.time.field.BaseDateTimeField.add : if $b20 < 0 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : if r3 != null
org.joda.time.field.BaseDateTimeField.add : if r3 != null >>>>>>>> org.joda.time.field.BaseDateTimeField.add : if i0 != 0
org.joda.time.field.BaseDateTimeField.add : if r3 != null >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $i23 = i15 - 1
org.joda.time.field.BaseDateTimeField.add : $i23 = i15 - 1 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $i24 = r2[i0]
org.joda.time.field.BaseDateTimeField.add : $i24 = r2[i0] >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $i25 = $i23 - $i24
org.joda.time.field.BaseDateTimeField.add : $i25 = $i23 - $i24 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : i1 = i1 - $i25
org.joda.time.field.BaseDateTimeField.add : i1 = i1 - $i25 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $i26 = i0 - 1
org.joda.time.field.BaseDateTimeField.add : $i26 = i0 - 1 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : r2 = virtualinvoke r3.<org.joda.time.DateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>(r1, $i26, r2, -1)
org.joda.time.field.BaseDateTimeField.add : r2 = virtualinvoke r3.<org.joda.time.DateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>(r1, $i26, r2, -1) >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $i27 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r2)
org.joda.time.field.BaseDateTimeField.add : $i27 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r2) >>>>>>>> org.joda.time.field.BaseDateTimeField.add : r2[i0] = $i27
org.joda.time.field.BaseDateTimeField.add : r2[i0] = $i27 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : goto [?= (branch)]
org.joda.time.field.BaseDateTimeField.add : goto [?= (branch)] >>>>>>>> org.joda.time.field.BaseDateTimeField.add : if i1 >= 0
org.joda.time.field.BaseDateTimeField.add : if i0 != 0 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $r10 = new java.lang.IllegalArgumentException
org.joda.time.field.BaseDateTimeField.add : if i0 != 0 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $i22 = i0 - 1
org.joda.time.field.BaseDateTimeField.add : $i22 = i0 - 1 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : r3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>($i22)
org.joda.time.field.BaseDateTimeField.add : r3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>($i22) >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $r11 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getRangeDurationField()>()
org.joda.time.field.BaseDateTimeField.add : $r11 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getRangeDurationField()>() >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $r12 = virtualinvoke $r11.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>()
org.joda.time.field.BaseDateTimeField.add : $r12 = virtualinvoke $r11.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>() >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $r13 = virtualinvoke r3.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>()
org.joda.time.field.BaseDateTimeField.add : $r13 = virtualinvoke r3.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>() >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $r14 = virtualinvoke $r13.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>()
org.joda.time.field.BaseDateTimeField.add : $r14 = virtualinvoke $r13.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>() >>>>>>>> org.joda.time.field.BaseDateTimeField.add : if $r12 == $r14
org.joda.time.field.BaseDateTimeField.add : if $r12 == $r14 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $r15 = new java.lang.IllegalArgumentException
org.joda.time.field.BaseDateTimeField.add : if $r12 == $r14 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $i23 = i15 - 1
org.joda.time.field.BaseDateTimeField.add : $r15 = new java.lang.IllegalArgumentException >>>>>>>> org.joda.time.field.BaseDateTimeField.add : specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Fields invalid for add")
org.joda.time.field.BaseDateTimeField.add : specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Fields invalid for add") >>>>>>>> org.joda.time.field.BaseDateTimeField.add : throw $r15
org.joda.time.field.BaseDateTimeField.add : $r10 = new java.lang.IllegalArgumentException >>>>>>>> org.joda.time.field.BaseDateTimeField.add : specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Maximum value exceeded for add")
org.joda.time.field.BaseDateTimeField.add : specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Maximum value exceeded for add") >>>>>>>> org.joda.time.field.BaseDateTimeField.add : throw $r10
org.joda.time.field.BaseDateTimeField.add : $i21 = (int) l18 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : r2[i0] = $i21
org.joda.time.field.BaseDateTimeField.add : r2[i0] = $i21 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : goto [?= $i28 = r2[i0]]
org.joda.time.field.BaseDateTimeField.add : goto [?= $i28 = r2[i0]] >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $i28 = r2[i0]
org.joda.time.field.BaseDateTimeField.add : i2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r2) >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $i4 = r2[i0]
org.joda.time.field.BaseDateTimeField.add : $i4 = r2[i0] >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $i5 = $i4 + i1
org.joda.time.field.BaseDateTimeField.add : $i5 = $i4 + i1 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : l3 = (long) $i5
org.joda.time.field.BaseDateTimeField.add : l3 = (long) $i5 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $l6 = (long) i2
org.joda.time.field.BaseDateTimeField.add : $l6 = (long) i2 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $b7 = l3 cmp $l6
org.joda.time.field.BaseDateTimeField.add : $b7 = l3 cmp $l6 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : if $b7 > 0
org.joda.time.field.BaseDateTimeField.add : if $b7 > 0 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $i8 = (int) l3
org.joda.time.field.BaseDateTimeField.add : if $b7 > 0 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : if r3 != null
org.joda.time.field.BaseDateTimeField.add : if r3 != null >>>>>>>> org.joda.time.field.BaseDateTimeField.add : if i0 != 0
org.joda.time.field.BaseDateTimeField.add : if r3 != null >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $i10 = i2 + 1
org.joda.time.field.BaseDateTimeField.add : $i10 = i2 + 1 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $i11 = r2[i0]
org.joda.time.field.BaseDateTimeField.add : $i11 = r2[i0] >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $i12 = $i10 - $i11
org.joda.time.field.BaseDateTimeField.add : $i12 = $i10 - $i11 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : i1 = i1 - $i12
org.joda.time.field.BaseDateTimeField.add : i1 = i1 - $i12 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $i13 = i0 - 1
org.joda.time.field.BaseDateTimeField.add : $i13 = i0 - 1 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : r2 = virtualinvoke r3.<org.joda.time.DateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>(r1, $i13, r2, 1)
org.joda.time.field.BaseDateTimeField.add : r2 = virtualinvoke r3.<org.joda.time.DateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>(r1, $i13, r2, 1) >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $i14 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r2)
org.joda.time.field.BaseDateTimeField.add : $i14 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r2) >>>>>>>> org.joda.time.field.BaseDateTimeField.add : r2[i0] = $i14
org.joda.time.field.BaseDateTimeField.add : r2[i0] = $i14 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : goto [?= (branch)]
org.joda.time.field.BaseDateTimeField.add : goto [?= (branch)] >>>>>>>> org.joda.time.field.BaseDateTimeField.add : if i1 <= 0
org.joda.time.field.BaseDateTimeField.add : if i0 != 0 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $r4 = new java.lang.IllegalArgumentException
org.joda.time.field.BaseDateTimeField.add : if i0 != 0 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $i9 = i0 - 1
org.joda.time.field.BaseDateTimeField.add : $i9 = i0 - 1 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : r3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>($i9)
org.joda.time.field.BaseDateTimeField.add : r3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>($i9) >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $r5 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getRangeDurationField()>()
org.joda.time.field.BaseDateTimeField.add : $r5 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getRangeDurationField()>() >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $r6 = virtualinvoke $r5.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>()
org.joda.time.field.BaseDateTimeField.add : $r6 = virtualinvoke $r5.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>() >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $r7 = virtualinvoke r3.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>()
org.joda.time.field.BaseDateTimeField.add : $r7 = virtualinvoke r3.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>() >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $r8 = virtualinvoke $r7.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>()
org.joda.time.field.BaseDateTimeField.add : $r8 = virtualinvoke $r7.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>() >>>>>>>> org.joda.time.field.BaseDateTimeField.add : if $r6 == $r8
org.joda.time.field.BaseDateTimeField.add : if $r6 == $r8 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $r9 = new java.lang.IllegalArgumentException
org.joda.time.field.BaseDateTimeField.add : if $r6 == $r8 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $i10 = i2 + 1
org.joda.time.field.BaseDateTimeField.add : $r9 = new java.lang.IllegalArgumentException >>>>>>>> org.joda.time.field.BaseDateTimeField.add : specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Fields invalid for add")
org.joda.time.field.BaseDateTimeField.add : specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Fields invalid for add") >>>>>>>> org.joda.time.field.BaseDateTimeField.add : throw $r9
org.joda.time.field.BaseDateTimeField.add : $r4 = new java.lang.IllegalArgumentException >>>>>>>> org.joda.time.field.BaseDateTimeField.add : specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Maximum value exceeded for add")
org.joda.time.field.BaseDateTimeField.add : specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Maximum value exceeded for add") >>>>>>>> org.joda.time.field.BaseDateTimeField.add : throw $r4
org.joda.time.field.BaseDateTimeField.add : $i8 = (int) l3 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : r2[i0] = $i8
org.joda.time.field.BaseDateTimeField.add : r2[i0] = $i8 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : goto [?= (branch)]
org.joda.time.field.BaseDateTimeField.add : goto [?= (branch)] >>>>>>>> org.joda.time.field.BaseDateTimeField.add : if i1 >= 0
