org.joda.time.chrono.CopticChronology.readResolve : r1 = virtualinvoke r0.<org.joda.time.chrono.CopticChronology: org.joda.time.Chronology getBase()>() >>>>>>>> org.joda.time.chrono.CopticChronology.readResolve : i0 = virtualinvoke r0.<org.joda.time.chrono.CopticChronology: int getMinimumDaysInFirstWeek()>()
org.joda.time.chrono.CopticChronology.readResolve : i0 = virtualinvoke r0.<org.joda.time.chrono.CopticChronology: int getMinimumDaysInFirstWeek()>() >>>>>>>> org.joda.time.chrono.CopticChronology.readResolve : if i0 != 0
org.joda.time.chrono.CopticChronology.readResolve : if i0 != 0 >>>>>>>> org.joda.time.chrono.CopticChronology.readResolve : $i1 = 4
org.joda.time.chrono.CopticChronology.readResolve : if i0 != 0 >>>>>>>> org.joda.time.chrono.CopticChronology.readResolve : $i1 = i0
org.joda.time.chrono.CopticChronology.readResolve : $i1 = i0 >>>>>>>> org.joda.time.chrono.CopticChronology.readResolve : i2 = $i1
org.joda.time.chrono.CopticChronology.readResolve : i2 = $i1 >>>>>>>> org.joda.time.chrono.CopticChronology.readResolve : if r1 != null
org.joda.time.chrono.CopticChronology.readResolve : if r1 != null >>>>>>>> org.joda.time.chrono.CopticChronology.readResolve : $r2 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>
org.joda.time.chrono.CopticChronology.readResolve : if r1 != null >>>>>>>> org.joda.time.chrono.CopticChronology.readResolve : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.CopticChronology.readResolve : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.CopticChronology.readResolve : $r3 = staticinvoke <org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>($r4, i2)
org.joda.time.chrono.CopticChronology.readResolve : $r3 = staticinvoke <org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>($r4, i2) >>>>>>>> org.joda.time.chrono.CopticChronology.readResolve : return $r3
org.joda.time.chrono.CopticChronology.readResolve : $r2 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC> >>>>>>>> org.joda.time.chrono.CopticChronology.readResolve : $r3 = staticinvoke <org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>($r2, i2)
org.joda.time.chrono.CopticChronology.readResolve : $r3 = staticinvoke <org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology getInstance(org.joda.time.DateTimeZone,int)>($r2, i2) >>>>>>>> org.joda.time.chrono.CopticChronology.readResolve : goto [?= return $r3]
org.joda.time.chrono.CopticChronology.readResolve : goto [?= return $r3] >>>>>>>> org.joda.time.chrono.CopticChronology.readResolve : return $r3
org.joda.time.chrono.CopticChronology.readResolve : $i1 = 4 >>>>>>>> org.joda.time.chrono.CopticChronology.readResolve : goto [?= i2 = $i1]
org.joda.time.chrono.CopticChronology.readResolve : goto [?= i2 = $i1] >>>>>>>> org.joda.time.chrono.CopticChronology.readResolve : i2 = $i1
