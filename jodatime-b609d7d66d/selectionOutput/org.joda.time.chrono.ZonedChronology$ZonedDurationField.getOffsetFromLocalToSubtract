org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : i1 = virtualinvoke $r1.<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>(l0)
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : i1 = virtualinvoke $r1.<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>(l0) >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : $l3 = (long) i1
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : $l3 = (long) i1 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : l2 = l0 - $l3
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : l2 = l0 - $l3 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : $l4 = l0 ^ l2
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : $l4 = l0 ^ l2 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : $b5 = $l4 cmp 0L
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : $b5 = $l4 cmp 0L >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : if $b5 >= 0
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : if $b5 >= 0 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : $l6 = (long) i1
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : if $b5 >= 0 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : return i1
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : $l6 = (long) i1 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : $l7 = l0 ^ $l6
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : $l7 = l0 ^ $l6 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : $b8 = $l7 cmp 0L
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : $b8 = $l7 cmp 0L >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : if $b8 >= 0
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : if $b8 >= 0 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : $r2 = new java.lang.ArithmeticException
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : if $b8 >= 0 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : return i1
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : $r2 = new java.lang.ArithmeticException >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : specialinvoke $r2.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Subtracting time zone offset caused overflow")
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : specialinvoke $r2.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Subtracting time zone offset caused overflow") >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getOffsetFromLocalToSubtract : throw $r2
