org.joda.time.PeriodType.forFields : if r0 == null >>>>>>>> org.joda.time.PeriodType.forFields : $i1 = lengthof r0
org.joda.time.PeriodType.forFields : if r0 == null >>>>>>>> org.joda.time.PeriodType.forFields : $r7 = new java.lang.IllegalArgumentException
org.joda.time.PeriodType.forFields : $r7 = new java.lang.IllegalArgumentException >>>>>>>> org.joda.time.PeriodType.forFields : specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Types array must not be null or empty")
org.joda.time.PeriodType.forFields : specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Types array must not be null or empty") >>>>>>>> org.joda.time.PeriodType.forFields : throw $r7
org.joda.time.PeriodType.forFields : $i1 = lengthof r0 >>>>>>>> org.joda.time.PeriodType.forFields : if $i1 != 0
org.joda.time.PeriodType.forFields : if $i1 != 0 >>>>>>>> org.joda.time.PeriodType.forFields : $r7 = new java.lang.IllegalArgumentException
org.joda.time.PeriodType.forFields : if $i1 != 0 >>>>>>>> org.joda.time.PeriodType.forFields : i0 = 0
org.joda.time.PeriodType.forFields : i0 = 0 >>>>>>>> org.joda.time.PeriodType.forFields : $i2 = lengthof r0
org.joda.time.PeriodType.forFields : $i2 = lengthof r0 >>>>>>>> org.joda.time.PeriodType.forFields : if i0 >= $i2
org.joda.time.PeriodType.forFields : if i0 >= $i2 >>>>>>>> org.joda.time.PeriodType.forFields : $r8 = r0[i0]
org.joda.time.PeriodType.forFields : if i0 >= $i2 >>>>>>>> org.joda.time.PeriodType.forFields : r10 = <org.joda.time.PeriodType: java.util.Map cTypes>
org.joda.time.PeriodType.forFields : r10 = <org.joda.time.PeriodType: java.util.Map cTypes> >>>>>>>> org.joda.time.PeriodType.forFields : $z0 = interfaceinvoke r10.<java.util.Map: boolean isEmpty()>()
org.joda.time.PeriodType.forFields : $z0 = interfaceinvoke r10.<java.util.Map: boolean isEmpty()>() >>>>>>>> org.joda.time.PeriodType.forFields : if $z0 == 0
org.joda.time.PeriodType.forFields : if $z0 == 0 >>>>>>>> org.joda.time.PeriodType.forFields : $r11 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType standard()>()
org.joda.time.PeriodType.forFields : if $z0 == 0 >>>>>>>> org.joda.time.PeriodType.forFields : $r62 = new org.joda.time.PeriodType
org.joda.time.PeriodType.forFields : $r62 = new org.joda.time.PeriodType >>>>>>>> org.joda.time.PeriodType.forFields : specialinvoke $r62.<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>(null, r0, null)
org.joda.time.PeriodType.forFields : specialinvoke $r62.<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>(null, r0, null) >>>>>>>> org.joda.time.PeriodType.forFields : r1 = $r62
org.joda.time.PeriodType.forFields : r1 = $r62 >>>>>>>> org.joda.time.PeriodType.forFields : r2 = interfaceinvoke r10.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.joda.time.PeriodType.forFields : r2 = interfaceinvoke r10.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.joda.time.PeriodType.forFields : $z1 = r2 instanceof org.joda.time.PeriodType
org.joda.time.PeriodType.forFields : $z1 = r2 instanceof org.joda.time.PeriodType >>>>>>>> org.joda.time.PeriodType.forFields : if $z1 == 0
org.joda.time.PeriodType.forFields : if $z1 == 0 >>>>>>>> org.joda.time.PeriodType.forFields : $r63 = (org.joda.time.PeriodType) r2
org.joda.time.PeriodType.forFields : if $z1 == 0 >>>>>>>> org.joda.time.PeriodType.forFields : if r2 == null
org.joda.time.PeriodType.forFields : if r2 == null >>>>>>>> org.joda.time.PeriodType.forFields : $r64 = new java.lang.IllegalArgumentException
org.joda.time.PeriodType.forFields : if r2 == null >>>>>>>> org.joda.time.PeriodType.forFields : r3 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType standard()>()
org.joda.time.PeriodType.forFields : r3 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType standard()>() >>>>>>>> org.joda.time.PeriodType.forFields : $r69 = new java.util.ArrayList
org.joda.time.PeriodType.forFields : $r69 = new java.util.ArrayList >>>>>>>> org.joda.time.PeriodType.forFields : $r70 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r0)
org.joda.time.PeriodType.forFields : $r70 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r0) >>>>>>>> org.joda.time.PeriodType.forFields : specialinvoke $r69.<java.util.ArrayList: void <init>(java.util.Collection)>($r70)
org.joda.time.PeriodType.forFields : specialinvoke $r69.<java.util.ArrayList: void <init>(java.util.Collection)>($r70) >>>>>>>> org.joda.time.PeriodType.forFields : r4 = $r69
org.joda.time.PeriodType.forFields : r4 = $r69 >>>>>>>> org.joda.time.PeriodType.forFields : $r71 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>()
org.joda.time.PeriodType.forFields : $r71 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>() >>>>>>>> org.joda.time.PeriodType.forFields : $z2 = interfaceinvoke r4.<java.util.List: boolean remove(java.lang.Object)>($r71)
org.joda.time.PeriodType.forFields : $z2 = interfaceinvoke r4.<java.util.List: boolean remove(java.lang.Object)>($r71) >>>>>>>> org.joda.time.PeriodType.forFields : if $z2 != 0
org.joda.time.PeriodType.forFields : if $z2 != 0 >>>>>>>> org.joda.time.PeriodType.forFields : r3 = virtualinvoke r3.<org.joda.time.PeriodType: org.joda.time.PeriodType withYearsRemoved()>()
org.joda.time.PeriodType.forFields : if $z2 != 0 >>>>>>>> org.joda.time.PeriodType.forFields : $r72 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>()
org.joda.time.PeriodType.forFields : $r72 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>() >>>>>>>> org.joda.time.PeriodType.forFields : $z3 = interfaceinvoke r4.<java.util.List: boolean remove(java.lang.Object)>($r72)
org.joda.time.PeriodType.forFields : $z3 = interfaceinvoke r4.<java.util.List: boolean remove(java.lang.Object)>($r72) >>>>>>>> org.joda.time.PeriodType.forFields : if $z3 != 0
org.joda.time.PeriodType.forFields : if $z3 != 0 >>>>>>>> org.joda.time.PeriodType.forFields : r3 = virtualinvoke r3.<org.joda.time.PeriodType: org.joda.time.PeriodType withMonthsRemoved()>()
org.joda.time.PeriodType.forFields : if $z3 != 0 >>>>>>>> org.joda.time.PeriodType.forFields : $r73 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>()
org.joda.time.PeriodType.forFields : $r73 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>() >>>>>>>> org.joda.time.PeriodType.forFields : $z4 = interfaceinvoke r4.<java.util.List: boolean remove(java.lang.Object)>($r73)
org.joda.time.PeriodType.forFields : $z4 = interfaceinvoke r4.<java.util.List: boolean remove(java.lang.Object)>($r73) >>>>>>>> org.joda.time.PeriodType.forFields : if $z4 != 0
org.joda.time.PeriodType.forFields : if $z4 != 0 >>>>>>>> org.joda.time.PeriodType.forFields : r3 = virtualinvoke r3.<org.joda.time.PeriodType: org.joda.time.PeriodType withWeeksRemoved()>()
org.joda.time.PeriodType.forFields : if $z4 != 0 >>>>>>>> org.joda.time.PeriodType.forFields : $r74 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>()
org.joda.time.PeriodType.forFields : $r74 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>() >>>>>>>> org.joda.time.PeriodType.forFields : $z5 = interfaceinvoke r4.<java.util.List: boolean remove(java.lang.Object)>($r74)
org.joda.time.PeriodType.forFields : $z5 = interfaceinvoke r4.<java.util.List: boolean remove(java.lang.Object)>($r74) >>>>>>>> org.joda.time.PeriodType.forFields : if $z5 != 0
org.joda.time.PeriodType.forFields : if $z5 != 0 >>>>>>>> org.joda.time.PeriodType.forFields : r3 = virtualinvoke r3.<org.joda.time.PeriodType: org.joda.time.PeriodType withDaysRemoved()>()
org.joda.time.PeriodType.forFields : if $z5 != 0 >>>>>>>> org.joda.time.PeriodType.forFields : $r75 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>()
org.joda.time.PeriodType.forFields : $r75 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>() >>>>>>>> org.joda.time.PeriodType.forFields : $z6 = interfaceinvoke r4.<java.util.List: boolean remove(java.lang.Object)>($r75)
org.joda.time.PeriodType.forFields : $z6 = interfaceinvoke r4.<java.util.List: boolean remove(java.lang.Object)>($r75) >>>>>>>> org.joda.time.PeriodType.forFields : if $z6 != 0
org.joda.time.PeriodType.forFields : if $z6 != 0 >>>>>>>> org.joda.time.PeriodType.forFields : r3 = virtualinvoke r3.<org.joda.time.PeriodType: org.joda.time.PeriodType withHoursRemoved()>()
org.joda.time.PeriodType.forFields : if $z6 != 0 >>>>>>>> org.joda.time.PeriodType.forFields : $r76 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>()
org.joda.time.PeriodType.forFields : $r76 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>() >>>>>>>> org.joda.time.PeriodType.forFields : $z7 = interfaceinvoke r4.<java.util.List: boolean remove(java.lang.Object)>($r76)
org.joda.time.PeriodType.forFields : $z7 = interfaceinvoke r4.<java.util.List: boolean remove(java.lang.Object)>($r76) >>>>>>>> org.joda.time.PeriodType.forFields : if $z7 != 0
org.joda.time.PeriodType.forFields : if $z7 != 0 >>>>>>>> org.joda.time.PeriodType.forFields : r3 = virtualinvoke r3.<org.joda.time.PeriodType: org.joda.time.PeriodType withMinutesRemoved()>()
org.joda.time.PeriodType.forFields : if $z7 != 0 >>>>>>>> org.joda.time.PeriodType.forFields : $r77 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>()
org.joda.time.PeriodType.forFields : $r77 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>() >>>>>>>> org.joda.time.PeriodType.forFields : $z8 = interfaceinvoke r4.<java.util.List: boolean remove(java.lang.Object)>($r77)
org.joda.time.PeriodType.forFields : $z8 = interfaceinvoke r4.<java.util.List: boolean remove(java.lang.Object)>($r77) >>>>>>>> org.joda.time.PeriodType.forFields : if $z8 != 0
org.joda.time.PeriodType.forFields : if $z8 != 0 >>>>>>>> org.joda.time.PeriodType.forFields : r3 = virtualinvoke r3.<org.joda.time.PeriodType: org.joda.time.PeriodType withSecondsRemoved()>()
org.joda.time.PeriodType.forFields : if $z8 != 0 >>>>>>>> org.joda.time.PeriodType.forFields : $r78 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>()
org.joda.time.PeriodType.forFields : $r78 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>() >>>>>>>> org.joda.time.PeriodType.forFields : $z9 = interfaceinvoke r4.<java.util.List: boolean remove(java.lang.Object)>($r78)
org.joda.time.PeriodType.forFields : $z9 = interfaceinvoke r4.<java.util.List: boolean remove(java.lang.Object)>($r78) >>>>>>>> org.joda.time.PeriodType.forFields : if $z9 != 0
org.joda.time.PeriodType.forFields : if $z9 != 0 >>>>>>>> org.joda.time.PeriodType.forFields : r3 = virtualinvoke r3.<org.joda.time.PeriodType: org.joda.time.PeriodType withMillisRemoved()>()
org.joda.time.PeriodType.forFields : if $z9 != 0 >>>>>>>> org.joda.time.PeriodType.forFields : $i3 = interfaceinvoke r4.<java.util.List: int size()>()
org.joda.time.PeriodType.forFields : $i3 = interfaceinvoke r4.<java.util.List: int size()>() >>>>>>>> org.joda.time.PeriodType.forFields : if $i3 <= 0
org.joda.time.PeriodType.forFields : if $i3 <= 0 >>>>>>>> org.joda.time.PeriodType.forFields : interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r4)
org.joda.time.PeriodType.forFields : if $i3 <= 0 >>>>>>>> org.joda.time.PeriodType.forFields : $r85 = new org.joda.time.PeriodType
org.joda.time.PeriodType.forFields : $r85 = new org.joda.time.PeriodType >>>>>>>> org.joda.time.PeriodType.forFields : $r86 = r3.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.PeriodType.forFields : $r86 = r3.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes> >>>>>>>> org.joda.time.PeriodType.forFields : specialinvoke $r85.<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>(null, $r86, null)
org.joda.time.PeriodType.forFields : specialinvoke $r85.<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>(null, $r86, null) >>>>>>>> org.joda.time.PeriodType.forFields : r5 = $r85
org.joda.time.PeriodType.forFields : r5 = $r85 >>>>>>>> org.joda.time.PeriodType.forFields : $r87 = interfaceinvoke r10.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5)
org.joda.time.PeriodType.forFields : $r87 = interfaceinvoke r10.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5) >>>>>>>> org.joda.time.PeriodType.forFields : r6 = (org.joda.time.PeriodType) $r87
org.joda.time.PeriodType.forFields : r6 = (org.joda.time.PeriodType) $r87 >>>>>>>> org.joda.time.PeriodType.forFields : if r6 == null
org.joda.time.PeriodType.forFields : if r6 == null >>>>>>>> org.joda.time.PeriodType.forFields : interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r6)
org.joda.time.PeriodType.forFields : if r6 == null >>>>>>>> org.joda.time.PeriodType.forFields : interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3)
org.joda.time.PeriodType.forFields : interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3) >>>>>>>> org.joda.time.PeriodType.forFields : return r3
org.joda.time.PeriodType.forFields : interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r6) >>>>>>>> org.joda.time.PeriodType.forFields : return r6
org.joda.time.PeriodType.forFields : interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r4) >>>>>>>> org.joda.time.PeriodType.forFields : $r80 = new java.lang.IllegalArgumentException
org.joda.time.PeriodType.forFields : $r80 = new java.lang.IllegalArgumentException >>>>>>>> org.joda.time.PeriodType.forFields : $r81 = new java.lang.StringBuilder
org.joda.time.PeriodType.forFields : $r81 = new java.lang.StringBuilder >>>>>>>> org.joda.time.PeriodType.forFields : specialinvoke $r81.<java.lang.StringBuilder: void <init>()>()
org.joda.time.PeriodType.forFields : specialinvoke $r81.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.joda.time.PeriodType.forFields : $r82 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PeriodType does not support fields: ")
org.joda.time.PeriodType.forFields : $r82 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PeriodType does not support fields: ") >>>>>>>> org.joda.time.PeriodType.forFields : $r83 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4)
org.joda.time.PeriodType.forFields : $r83 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4) >>>>>>>> org.joda.time.PeriodType.forFields : $r84 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.String toString()>()
org.joda.time.PeriodType.forFields : $r84 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.joda.time.PeriodType.forFields : specialinvoke $r80.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r84)
org.joda.time.PeriodType.forFields : specialinvoke $r80.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r84) >>>>>>>> org.joda.time.PeriodType.forFields : throw $r80
org.joda.time.PeriodType.forFields : r3 = virtualinvoke r3.<org.joda.time.PeriodType: org.joda.time.PeriodType withMillisRemoved()>() >>>>>>>> org.joda.time.PeriodType.forFields : $i3 = interfaceinvoke r4.<java.util.List: int size()>()
org.joda.time.PeriodType.forFields : r3 = virtualinvoke r3.<org.joda.time.PeriodType: org.joda.time.PeriodType withSecondsRemoved()>() >>>>>>>> org.joda.time.PeriodType.forFields : $r78 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>()
org.joda.time.PeriodType.forFields : r3 = virtualinvoke r3.<org.joda.time.PeriodType: org.joda.time.PeriodType withMinutesRemoved()>() >>>>>>>> org.joda.time.PeriodType.forFields : $r77 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>()
org.joda.time.PeriodType.forFields : r3 = virtualinvoke r3.<org.joda.time.PeriodType: org.joda.time.PeriodType withHoursRemoved()>() >>>>>>>> org.joda.time.PeriodType.forFields : $r76 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>()
org.joda.time.PeriodType.forFields : r3 = virtualinvoke r3.<org.joda.time.PeriodType: org.joda.time.PeriodType withDaysRemoved()>() >>>>>>>> org.joda.time.PeriodType.forFields : $r75 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>()
org.joda.time.PeriodType.forFields : r3 = virtualinvoke r3.<org.joda.time.PeriodType: org.joda.time.PeriodType withWeeksRemoved()>() >>>>>>>> org.joda.time.PeriodType.forFields : $r74 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>()
org.joda.time.PeriodType.forFields : r3 = virtualinvoke r3.<org.joda.time.PeriodType: org.joda.time.PeriodType withMonthsRemoved()>() >>>>>>>> org.joda.time.PeriodType.forFields : $r73 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>()
org.joda.time.PeriodType.forFields : r3 = virtualinvoke r3.<org.joda.time.PeriodType: org.joda.time.PeriodType withYearsRemoved()>() >>>>>>>> org.joda.time.PeriodType.forFields : $r72 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>()
org.joda.time.PeriodType.forFields : $r64 = new java.lang.IllegalArgumentException >>>>>>>> org.joda.time.PeriodType.forFields : $r65 = new java.lang.StringBuilder
org.joda.time.PeriodType.forFields : $r65 = new java.lang.StringBuilder >>>>>>>> org.joda.time.PeriodType.forFields : specialinvoke $r65.<java.lang.StringBuilder: void <init>()>()
org.joda.time.PeriodType.forFields : specialinvoke $r65.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.joda.time.PeriodType.forFields : $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PeriodType does not support fields: ")
org.joda.time.PeriodType.forFields : $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PeriodType does not support fields: ") >>>>>>>> org.joda.time.PeriodType.forFields : $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2)
org.joda.time.PeriodType.forFields : $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2) >>>>>>>> org.joda.time.PeriodType.forFields : $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.String toString()>()
org.joda.time.PeriodType.forFields : $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.joda.time.PeriodType.forFields : specialinvoke $r64.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r68)
org.joda.time.PeriodType.forFields : specialinvoke $r64.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r68) >>>>>>>> org.joda.time.PeriodType.forFields : throw $r64
org.joda.time.PeriodType.forFields : $r63 = (org.joda.time.PeriodType) r2 >>>>>>>> org.joda.time.PeriodType.forFields : return $r63
org.joda.time.PeriodType.forFields : $r11 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType standard()>() >>>>>>>> org.joda.time.PeriodType.forFields : $r12 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType standard()>()
org.joda.time.PeriodType.forFields : $r12 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType standard()>() >>>>>>>> org.joda.time.PeriodType.forFields : interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, $r12)
org.joda.time.PeriodType.forFields : interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, $r12) >>>>>>>> org.joda.time.PeriodType.forFields : $r14 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDayTime()>()
org.joda.time.PeriodType.forFields : $r14 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDayTime()>() >>>>>>>> org.joda.time.PeriodType.forFields : $r15 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDayTime()>()
org.joda.time.PeriodType.forFields : $r15 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDayTime()>() >>>>>>>> org.joda.time.PeriodType.forFields : interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r15)
org.joda.time.PeriodType.forFields : interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r15) >>>>>>>> org.joda.time.PeriodType.forFields : $r17 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>()
org.joda.time.PeriodType.forFields : $r17 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>() >>>>>>>> org.joda.time.PeriodType.forFields : $r18 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>()
org.joda.time.PeriodType.forFields : $r18 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>() >>>>>>>> org.joda.time.PeriodType.forFields : interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, $r18)
org.joda.time.PeriodType.forFields : interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, $r18) >>>>>>>> org.joda.time.PeriodType.forFields : $r20 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType yearWeekDayTime()>()
org.joda.time.PeriodType.forFields : $r20 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType yearWeekDayTime()>() >>>>>>>> org.joda.time.PeriodType.forFields : $r21 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType yearWeekDayTime()>()
org.joda.time.PeriodType.forFields : $r21 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType yearWeekDayTime()>() >>>>>>>> org.joda.time.PeriodType.forFields : interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, $r21)
org.joda.time.PeriodType.forFields : interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, $r21) >>>>>>>> org.joda.time.PeriodType.forFields : $r23 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType yearWeekDay()>()
org.joda.time.PeriodType.forFields : $r23 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType yearWeekDay()>() >>>>>>>> org.joda.time.PeriodType.forFields : $r24 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType yearWeekDay()>()
org.joda.time.PeriodType.forFields : $r24 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType yearWeekDay()>() >>>>>>>> org.joda.time.PeriodType.forFields : interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r23, $r24)
org.joda.time.PeriodType.forFields : interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r23, $r24) >>>>>>>> org.joda.time.PeriodType.forFields : $r26 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType yearDayTime()>()
org.joda.time.PeriodType.forFields : $r26 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType yearDayTime()>() >>>>>>>> org.joda.time.PeriodType.forFields : $r27 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType yearDayTime()>()
org.joda.time.PeriodType.forFields : $r27 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType yearDayTime()>() >>>>>>>> org.joda.time.PeriodType.forFields : interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r26, $r27)
org.joda.time.PeriodType.forFields : interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r26, $r27) >>>>>>>> org.joda.time.PeriodType.forFields : $r29 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType yearDay()>()
org.joda.time.PeriodType.forFields : $r29 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType yearDay()>() >>>>>>>> org.joda.time.PeriodType.forFields : $r30 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType yearDay()>()
org.joda.time.PeriodType.forFields : $r30 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType yearDay()>() >>>>>>>> org.joda.time.PeriodType.forFields : interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r29, $r30)
org.joda.time.PeriodType.forFields : interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r29, $r30) >>>>>>>> org.joda.time.PeriodType.forFields : $r32 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType dayTime()>()
org.joda.time.PeriodType.forFields : $r32 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType dayTime()>() >>>>>>>> org.joda.time.PeriodType.forFields : $r33 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType dayTime()>()
org.joda.time.PeriodType.forFields : $r33 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType dayTime()>() >>>>>>>> org.joda.time.PeriodType.forFields : interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r32, $r33)
org.joda.time.PeriodType.forFields : interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r32, $r33) >>>>>>>> org.joda.time.PeriodType.forFields : $r35 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType time()>()
org.joda.time.PeriodType.forFields : $r35 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType time()>() >>>>>>>> org.joda.time.PeriodType.forFields : $r36 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType time()>()
org.joda.time.PeriodType.forFields : $r36 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType time()>() >>>>>>>> org.joda.time.PeriodType.forFields : interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r35, $r36)
org.joda.time.PeriodType.forFields : interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r35, $r36) >>>>>>>> org.joda.time.PeriodType.forFields : $r38 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType years()>()
org.joda.time.PeriodType.forFields : $r38 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType years()>() >>>>>>>> org.joda.time.PeriodType.forFields : $r39 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType years()>()
org.joda.time.PeriodType.forFields : $r39 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType years()>() >>>>>>>> org.joda.time.PeriodType.forFields : interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r38, $r39)
org.joda.time.PeriodType.forFields : interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r38, $r39) >>>>>>>> org.joda.time.PeriodType.forFields : $r41 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType months()>()
org.joda.time.PeriodType.forFields : $r41 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType months()>() >>>>>>>> org.joda.time.PeriodType.forFields : $r42 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType months()>()
org.joda.time.PeriodType.forFields : $r42 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType months()>() >>>>>>>> org.joda.time.PeriodType.forFields : interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r41, $r42)
org.joda.time.PeriodType.forFields : interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r41, $r42) >>>>>>>> org.joda.time.PeriodType.forFields : $r44 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType weeks()>()
org.joda.time.PeriodType.forFields : $r44 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType weeks()>() >>>>>>>> org.joda.time.PeriodType.forFields : $r45 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType weeks()>()
org.joda.time.PeriodType.forFields : $r45 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType weeks()>() >>>>>>>> org.joda.time.PeriodType.forFields : interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r44, $r45)
org.joda.time.PeriodType.forFields : interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r44, $r45) >>>>>>>> org.joda.time.PeriodType.forFields : $r47 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType days()>()
org.joda.time.PeriodType.forFields : $r47 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType days()>() >>>>>>>> org.joda.time.PeriodType.forFields : $r48 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType days()>()
org.joda.time.PeriodType.forFields : $r48 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType days()>() >>>>>>>> org.joda.time.PeriodType.forFields : interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r47, $r48)
org.joda.time.PeriodType.forFields : interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r47, $r48) >>>>>>>> org.joda.time.PeriodType.forFields : $r50 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType hours()>()
org.joda.time.PeriodType.forFields : $r50 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType hours()>() >>>>>>>> org.joda.time.PeriodType.forFields : $r51 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType hours()>()
org.joda.time.PeriodType.forFields : $r51 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType hours()>() >>>>>>>> org.joda.time.PeriodType.forFields : interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r50, $r51)
org.joda.time.PeriodType.forFields : interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r50, $r51) >>>>>>>> org.joda.time.PeriodType.forFields : $r53 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType minutes()>()
org.joda.time.PeriodType.forFields : $r53 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType minutes()>() >>>>>>>> org.joda.time.PeriodType.forFields : $r54 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType minutes()>()
org.joda.time.PeriodType.forFields : $r54 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType minutes()>() >>>>>>>> org.joda.time.PeriodType.forFields : interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r53, $r54)
org.joda.time.PeriodType.forFields : interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r53, $r54) >>>>>>>> org.joda.time.PeriodType.forFields : $r56 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType seconds()>()
org.joda.time.PeriodType.forFields : $r56 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType seconds()>() >>>>>>>> org.joda.time.PeriodType.forFields : $r57 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType seconds()>()
org.joda.time.PeriodType.forFields : $r57 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType seconds()>() >>>>>>>> org.joda.time.PeriodType.forFields : interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r56, $r57)
org.joda.time.PeriodType.forFields : interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r56, $r57) >>>>>>>> org.joda.time.PeriodType.forFields : $r59 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType millis()>()
org.joda.time.PeriodType.forFields : $r59 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType millis()>() >>>>>>>> org.joda.time.PeriodType.forFields : $r60 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType millis()>()
org.joda.time.PeriodType.forFields : $r60 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType millis()>() >>>>>>>> org.joda.time.PeriodType.forFields : interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r59, $r60)
org.joda.time.PeriodType.forFields : interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r59, $r60) >>>>>>>> org.joda.time.PeriodType.forFields : $r62 = new org.joda.time.PeriodType
org.joda.time.PeriodType.forFields : $r8 = r0[i0] >>>>>>>> org.joda.time.PeriodType.forFields : if $r8 != null
org.joda.time.PeriodType.forFields : if $r8 != null >>>>>>>> org.joda.time.PeriodType.forFields : $r9 = new java.lang.IllegalArgumentException
org.joda.time.PeriodType.forFields : if $r8 != null >>>>>>>> org.joda.time.PeriodType.forFields : i0 = i0 + 1
org.joda.time.PeriodType.forFields : i0 = i0 + 1 >>>>>>>> org.joda.time.PeriodType.forFields : goto [?= $i2 = lengthof r0]
org.joda.time.PeriodType.forFields : goto [?= $i2 = lengthof r0] >>>>>>>> org.joda.time.PeriodType.forFields : $i2 = lengthof r0
org.joda.time.PeriodType.forFields : $r9 = new java.lang.IllegalArgumentException >>>>>>>> org.joda.time.PeriodType.forFields : specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Types array must not contain null")
org.joda.time.PeriodType.forFields : specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Types array must not contain null") >>>>>>>> org.joda.time.PeriodType.forFields : throw $r9
