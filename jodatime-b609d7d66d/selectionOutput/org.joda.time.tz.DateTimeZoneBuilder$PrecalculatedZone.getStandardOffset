org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : i1 = staticinvoke <java.util.Arrays: int binarySearch(long[],long)>(r1, l0)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : i1 = staticinvoke <java.util.Arrays: int binarySearch(long[],long)>(r1, l0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : if i1 < 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : if i1 < 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iStandardOffsets>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : if i1 < 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : i3 = i1 ^ -1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : i3 = i1 ^ -1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : $i4 = lengthof r1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : $i4 = lengthof r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : if i3 >= $i4
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : if i3 >= $i4 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : if i3 <= 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : if i3 >= $i4 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : $r4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : $r4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : if $r4 != null
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : if $r4 != null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : $r5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iStandardOffsets>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : if $r4 != null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : $r6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : $r6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : $i9 = virtualinvoke $r6.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getStandardOffset(long)>(l0)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : $i9 = virtualinvoke $r6.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getStandardOffset(long)>(l0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : return $i9
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : $r5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iStandardOffsets> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : $i7 = i3 - 1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : $i7 = i3 - 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : $i8 = $r5[$i7]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : $i8 = $r5[$i7] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : return $i8
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : if i3 <= 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iStandardOffsets>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : if i3 <= 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : return 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iStandardOffsets> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : $i5 = i3 - 1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : $i5 = i3 - 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : $i6 = $r3[$i5]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : $i6 = $r3[$i5] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : return $i6
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iStandardOffsets> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : $i2 = $r2[i1]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : $i2 = $r2[i1] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : return $i2
