org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : i0 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(47) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : if i0 <= 0
org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : if i0 <= 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : $i1 = r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: int iSaveMillis>
org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : if i0 <= 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : i3 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String)>("%s")
org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : i3 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String)>("%s") >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : if i3 >= 0
org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : if i3 >= 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : return r1
org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : if i3 >= 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i3)
org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i3) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : $i4 = i3 + 2
org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : $i4 = i3 + 2 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i4)
org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i4) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : $r9 = r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String iLetterS>
org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : $r9 = r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String iLetterS> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : if $r9 != null
org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : if $r9 != null >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : r4 = virtualinvoke r2.<java.lang.String: java.lang.String concat(java.lang.String)>(r3)
org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : if $r9 != null >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : $r10 = new java.lang.StringBuilder
org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : $r10 = new java.lang.StringBuilder >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : specialinvoke $r10.<java.lang.StringBuilder: void <init>()>()
org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : $r12 = r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String iLetterS>
org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : $r12 = r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String iLetterS> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12)
org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3)
org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : r4 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>()
org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : r4 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : $r15 = virtualinvoke r4.<java.lang.String: java.lang.String intern()>()
org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : $r15 = virtualinvoke r4.<java.lang.String: java.lang.String intern()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : return $r15
org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : r4 = virtualinvoke r2.<java.lang.String: java.lang.String concat(java.lang.String)>(r3) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : goto [?= $r15 = virtualinvoke r4.<java.lang.String: java.lang.String intern()>()]
org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : goto [?= $r15 = virtualinvoke r4.<java.lang.String: java.lang.String intern()>()] >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : $r15 = virtualinvoke r4.<java.lang.String: java.lang.String intern()>()
org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : $i1 = r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: int iSaveMillis> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : if $i1 != 0
org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : if $i1 != 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : $r5 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i0)
org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : if $i1 != 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : $i2 = i0 + 1
org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : $i2 = i0 + 1 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : $r7 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i2)
org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : $r7 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i2) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String intern()>()
org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String intern()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : return $r8
org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : $r5 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i0) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String intern()>()
org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String intern()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : return $r6
