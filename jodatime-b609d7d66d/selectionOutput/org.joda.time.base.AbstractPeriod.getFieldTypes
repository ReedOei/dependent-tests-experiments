org.joda.time.base.AbstractPeriod.getFieldTypes : $i1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int size()>() >>>>>>>> org.joda.time.base.AbstractPeriod.getFieldTypes : r1 = newarray (org.joda.time.DurationFieldType)[$i1]
org.joda.time.base.AbstractPeriod.getFieldTypes : r1 = newarray (org.joda.time.DurationFieldType)[$i1] >>>>>>>> org.joda.time.base.AbstractPeriod.getFieldTypes : i0 = 0
org.joda.time.base.AbstractPeriod.getFieldTypes : i0 = 0 >>>>>>>> org.joda.time.base.AbstractPeriod.getFieldTypes : $i2 = lengthof r1
org.joda.time.base.AbstractPeriod.getFieldTypes : $i2 = lengthof r1 >>>>>>>> org.joda.time.base.AbstractPeriod.getFieldTypes : if i0 >= $i2
org.joda.time.base.AbstractPeriod.getFieldTypes : if i0 >= $i2 >>>>>>>> org.joda.time.base.AbstractPeriod.getFieldTypes : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.DurationFieldType getFieldType(int)>(i0)
org.joda.time.base.AbstractPeriod.getFieldTypes : if i0 >= $i2 >>>>>>>> org.joda.time.base.AbstractPeriod.getFieldTypes : return r1
org.joda.time.base.AbstractPeriod.getFieldTypes : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.DurationFieldType getFieldType(int)>(i0) >>>>>>>> org.joda.time.base.AbstractPeriod.getFieldTypes : r1[i0] = $r2
org.joda.time.base.AbstractPeriod.getFieldTypes : r1[i0] = $r2 >>>>>>>> org.joda.time.base.AbstractPeriod.getFieldTypes : i0 = i0 + 1
org.joda.time.base.AbstractPeriod.getFieldTypes : i0 = i0 + 1 >>>>>>>> org.joda.time.base.AbstractPeriod.getFieldTypes : goto [?= $i2 = lengthof r1]
org.joda.time.base.AbstractPeriod.getFieldTypes : goto [?= $i2 = lengthof r1] >>>>>>>> org.joda.time.base.AbstractPeriod.getFieldTypes : $i2 = lengthof r1
