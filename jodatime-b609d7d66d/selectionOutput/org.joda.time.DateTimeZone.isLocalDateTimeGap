org.joda.time.DateTimeZone.isLocalDateTimeGap : $z0 = virtualinvoke r0.<org.joda.time.DateTimeZone: boolean isFixed()>() >>>>>>>> org.joda.time.DateTimeZone.isLocalDateTimeGap : if $z0 == 0
org.joda.time.DateTimeZone.isLocalDateTimeGap : if $z0 == 0 >>>>>>>> org.joda.time.DateTimeZone.isLocalDateTimeGap : return 0
org.joda.time.DateTimeZone.isLocalDateTimeGap : if $z0 == 0 >>>>>>>> org.joda.time.DateTimeZone.isLocalDateTimeGap : virtualinvoke r1.<org.joda.time.LocalDateTime: org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone)>(r0)
org.joda.time.DateTimeZone.isLocalDateTimeGap : if $z0 == 0 >>>>>>>> org.joda.time.DateTimeZone.isLocalDateTimeGap : $r4 := @caughtexception
org.joda.time.DateTimeZone.isLocalDateTimeGap : r2 = $r4 >>>>>>>> org.joda.time.DateTimeZone.isLocalDateTimeGap : return 1
org.joda.time.DateTimeZone.isLocalDateTimeGap : virtualinvoke r1.<org.joda.time.LocalDateTime: org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone)>(r0) >>>>>>>> org.joda.time.DateTimeZone.isLocalDateTimeGap : $z1 = 0
org.joda.time.DateTimeZone.isLocalDateTimeGap : virtualinvoke r1.<org.joda.time.LocalDateTime: org.joda.time.DateTime toDateTime(org.joda.time.DateTimeZone)>(r0) >>>>>>>> org.joda.time.DateTimeZone.isLocalDateTimeGap : $r4 := @caughtexception
org.joda.time.DateTimeZone.isLocalDateTimeGap : $z1 = 0 >>>>>>>> org.joda.time.DateTimeZone.isLocalDateTimeGap : return $z1
org.joda.time.DateTimeZone.isLocalDateTimeGap : $z1 = 0 >>>>>>>> org.joda.time.DateTimeZone.isLocalDateTimeGap : $r4 := @caughtexception
