org.joda.time.Period.normalizedStandard : $i3 = virtualinvoke r0.<org.joda.time.Period: int getMillis()>() >>>>>>>> org.joda.time.Period.normalizedStandard : l0 = (long) $i3
org.joda.time.Period.normalizedStandard : l0 = (long) $i3 >>>>>>>> org.joda.time.Period.normalizedStandard : $i4 = virtualinvoke r0.<org.joda.time.Period: int getSeconds()>()
org.joda.time.Period.normalizedStandard : $i4 = virtualinvoke r0.<org.joda.time.Period: int getSeconds()>() >>>>>>>> org.joda.time.Period.normalizedStandard : $l5 = (long) $i4
org.joda.time.Period.normalizedStandard : $l5 = (long) $i4 >>>>>>>> org.joda.time.Period.normalizedStandard : $l6 = $l5 * 1000L
org.joda.time.Period.normalizedStandard : $l6 = $l5 * 1000L >>>>>>>> org.joda.time.Period.normalizedStandard : l7 = l0 + $l6
org.joda.time.Period.normalizedStandard : l7 = l0 + $l6 >>>>>>>> org.joda.time.Period.normalizedStandard : $i8 = virtualinvoke r0.<org.joda.time.Period: int getMinutes()>()
org.joda.time.Period.normalizedStandard : $i8 = virtualinvoke r0.<org.joda.time.Period: int getMinutes()>() >>>>>>>> org.joda.time.Period.normalizedStandard : $l9 = (long) $i8
org.joda.time.Period.normalizedStandard : $l9 = (long) $i8 >>>>>>>> org.joda.time.Period.normalizedStandard : $l10 = $l9 * 60000L
org.joda.time.Period.normalizedStandard : $l10 = $l9 * 60000L >>>>>>>> org.joda.time.Period.normalizedStandard : l11 = l7 + $l10
org.joda.time.Period.normalizedStandard : l11 = l7 + $l10 >>>>>>>> org.joda.time.Period.normalizedStandard : $i12 = virtualinvoke r0.<org.joda.time.Period: int getHours()>()
org.joda.time.Period.normalizedStandard : $i12 = virtualinvoke r0.<org.joda.time.Period: int getHours()>() >>>>>>>> org.joda.time.Period.normalizedStandard : $l13 = (long) $i12
org.joda.time.Period.normalizedStandard : $l13 = (long) $i12 >>>>>>>> org.joda.time.Period.normalizedStandard : $l14 = $l13 * 3600000L
org.joda.time.Period.normalizedStandard : $l14 = $l13 * 3600000L >>>>>>>> org.joda.time.Period.normalizedStandard : l15 = l11 + $l14
org.joda.time.Period.normalizedStandard : l15 = l11 + $l14 >>>>>>>> org.joda.time.Period.normalizedStandard : $i16 = virtualinvoke r0.<org.joda.time.Period: int getDays()>()
org.joda.time.Period.normalizedStandard : $i16 = virtualinvoke r0.<org.joda.time.Period: int getDays()>() >>>>>>>> org.joda.time.Period.normalizedStandard : $l17 = (long) $i16
org.joda.time.Period.normalizedStandard : $l17 = (long) $i16 >>>>>>>> org.joda.time.Period.normalizedStandard : $l18 = $l17 * 86400000L
org.joda.time.Period.normalizedStandard : $l18 = $l17 * 86400000L >>>>>>>> org.joda.time.Period.normalizedStandard : l19 = l15 + $l18
org.joda.time.Period.normalizedStandard : l19 = l15 + $l18 >>>>>>>> org.joda.time.Period.normalizedStandard : $i20 = virtualinvoke r0.<org.joda.time.Period: int getWeeks()>()
org.joda.time.Period.normalizedStandard : $i20 = virtualinvoke r0.<org.joda.time.Period: int getWeeks()>() >>>>>>>> org.joda.time.Period.normalizedStandard : $l21 = (long) $i20
org.joda.time.Period.normalizedStandard : $l21 = (long) $i20 >>>>>>>> org.joda.time.Period.normalizedStandard : $l22 = $l21 * 604800000L
org.joda.time.Period.normalizedStandard : $l22 = $l21 * 604800000L >>>>>>>> org.joda.time.Period.normalizedStandard : l23 = l19 + $l22
org.joda.time.Period.normalizedStandard : l23 = l19 + $l22 >>>>>>>> org.joda.time.Period.normalizedStandard : $r4 = new org.joda.time.Period
org.joda.time.Period.normalizedStandard : $r4 = new org.joda.time.Period >>>>>>>> org.joda.time.Period.normalizedStandard : $r5 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>(r1)
org.joda.time.Period.normalizedStandard : $r5 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>(r1) >>>>>>>> org.joda.time.Period.normalizedStandard : $r2 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>()
org.joda.time.Period.normalizedStandard : $r2 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>() >>>>>>>> org.joda.time.Period.normalizedStandard : specialinvoke $r4.<org.joda.time.Period: void <init>(long,org.joda.time.PeriodType,org.joda.time.Chronology)>(l23, $r5, $r2)
org.joda.time.Period.normalizedStandard : specialinvoke $r4.<org.joda.time.Period: void <init>(long,org.joda.time.PeriodType,org.joda.time.Chronology)>(l23, $r5, $r2) >>>>>>>> org.joda.time.Period.normalizedStandard : r3 = $r4
org.joda.time.Period.normalizedStandard : r3 = $r4 >>>>>>>> org.joda.time.Period.normalizedStandard : i1 = virtualinvoke r0.<org.joda.time.Period: int getYears()>()
org.joda.time.Period.normalizedStandard : i1 = virtualinvoke r0.<org.joda.time.Period: int getYears()>() >>>>>>>> org.joda.time.Period.normalizedStandard : i2 = virtualinvoke r0.<org.joda.time.Period: int getMonths()>()
org.joda.time.Period.normalizedStandard : i2 = virtualinvoke r0.<org.joda.time.Period: int getMonths()>() >>>>>>>> org.joda.time.Period.normalizedStandard : if i1 != 0
org.joda.time.Period.normalizedStandard : if i1 != 0 >>>>>>>> org.joda.time.Period.normalizedStandard : if i2 == 0
org.joda.time.Period.normalizedStandard : if i1 != 0 >>>>>>>> org.joda.time.Period.normalizedStandard : $i24 = i2 / 12
org.joda.time.Period.normalizedStandard : $i24 = i2 / 12 >>>>>>>> org.joda.time.Period.normalizedStandard : i25 = staticinvoke <org.joda.time.field.FieldUtils: int safeAdd(int,int)>(i1, $i24)
org.joda.time.Period.normalizedStandard : i25 = staticinvoke <org.joda.time.field.FieldUtils: int safeAdd(int,int)>(i1, $i24) >>>>>>>> org.joda.time.Period.normalizedStandard : i26 = i2 % 12
org.joda.time.Period.normalizedStandard : i26 = i2 % 12 >>>>>>>> org.joda.time.Period.normalizedStandard : if i25 == 0
org.joda.time.Period.normalizedStandard : if i25 == 0 >>>>>>>> org.joda.time.Period.normalizedStandard : r3 = virtualinvoke r3.<org.joda.time.Period: org.joda.time.Period withYears(int)>(i25)
org.joda.time.Period.normalizedStandard : if i25 == 0 >>>>>>>> org.joda.time.Period.normalizedStandard : if i26 == 0
org.joda.time.Period.normalizedStandard : if i26 == 0 >>>>>>>> org.joda.time.Period.normalizedStandard : r3 = virtualinvoke r3.<org.joda.time.Period: org.joda.time.Period withMonths(int)>(i26)
org.joda.time.Period.normalizedStandard : if i26 == 0 >>>>>>>> org.joda.time.Period.normalizedStandard : return r3
org.joda.time.Period.normalizedStandard : r3 = virtualinvoke r3.<org.joda.time.Period: org.joda.time.Period withMonths(int)>(i26) >>>>>>>> org.joda.time.Period.normalizedStandard : return r3
org.joda.time.Period.normalizedStandard : r3 = virtualinvoke r3.<org.joda.time.Period: org.joda.time.Period withYears(int)>(i25) >>>>>>>> org.joda.time.Period.normalizedStandard : if i26 == 0
org.joda.time.Period.normalizedStandard : if i2 == 0 >>>>>>>> org.joda.time.Period.normalizedStandard : $i24 = i2 / 12
org.joda.time.Period.normalizedStandard : if i2 == 0 >>>>>>>> org.joda.time.Period.normalizedStandard : return r3
