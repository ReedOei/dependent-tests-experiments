org.joda.time.chrono.ISOChronology.getInstanceUTC : $r0 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.ISOChronology.getInstanceUTC : return $r0
org.joda.time.chrono.ISOChronology.getInstanceUTC : return $r0 >>>>>>>> org.joda.time.DateTimeFieldType.secondOfMinute : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType SECOND_OF_MINUTE_TYPE>
org.joda.time.DateTimeFieldType.secondOfMinute : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType SECOND_OF_MINUTE_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.secondOfMinute : return $r0
org.joda.time.DateTimeFieldType.secondOfMinute : return $r0 >>>>>>>> org.joda.time.DateTimeComparator.getInstance : if r0 != null
org.joda.time.DateTimeComparator.getInstance : if r0 != null >>>>>>>> org.joda.time.DateTimeComparator.getInstance : if r1 != null
org.joda.time.DateTimeComparator.getInstance : if r1 != null >>>>>>>> org.joda.time.DateTimeComparator.getInstance : $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>()
org.joda.time.DateTimeComparator.getInstance : $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>() >>>>>>>> org.joda.time.DateTimeFieldType.dayOfYear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType DAY_OF_YEAR_TYPE>
org.joda.time.DateTimeFieldType.dayOfYear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType DAY_OF_YEAR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.dayOfYear : return $r0
org.joda.time.DateTimeFieldType.dayOfYear : return $r0 >>>>>>>> org.joda.time.DateTimeComparator.getInstance : if r0 != $r2
org.joda.time.DateTimeComparator.getInstance : if r0 != $r2 >>>>>>>> org.joda.time.DateTimeComparator.getInstance : $r5 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>()
org.joda.time.DateTimeComparator.getInstance : $r5 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>() >>>>>>>> org.joda.time.DateTimeComparator.getInstance : if r1 != $r5
org.joda.time.DateTimeComparator.getInstance : if r1 != $r5 >>>>>>>> org.joda.time.DateTimeComparator.getInstance : $r7 = new org.joda.time.DateTimeComparator
org.joda.time.DateTimeComparator.getInstance : $r7 = new org.joda.time.DateTimeComparator >>>>>>>> org.joda.time.DateTimeComparator.getInstance : specialinvoke $r7.<org.joda.time.DateTimeComparator: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DateTimeFieldType)>(r0, r1)
org.joda.time.DateTimeComparator.getInstance : specialinvoke $r7.<org.joda.time.DateTimeComparator: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DateTimeFieldType)>(r0, r1) >>>>>>>> org.joda.time.DateTimeComparator.getInstance : return $r7
org.joda.time.DateTimeComparator.getInstance : return $r7 >>>>>>>> org.joda.time.DateTimeFieldType.minuteOfHour : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MINUTE_OF_HOUR_TYPE>
org.joda.time.DateTimeFieldType.minuteOfHour : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MINUTE_OF_HOUR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.minuteOfHour : return $r0
org.joda.time.DateTimeFieldType.minuteOfHour : return $r0 >>>>>>>> org.joda.time.DateTimeFieldType.hourOfDay : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType HOUR_OF_DAY_TYPE>
org.joda.time.DateTimeFieldType.hourOfDay : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType HOUR_OF_DAY_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.hourOfDay : return $r0
org.joda.time.DateTimeFieldType.hourOfDay : return $r0 >>>>>>>> org.joda.time.DateTimeFieldType.dayOfWeek : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType DAY_OF_WEEK_TYPE>
org.joda.time.DateTimeFieldType.dayOfWeek : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType DAY_OF_WEEK_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.dayOfWeek : return $r0
org.joda.time.DateTimeFieldType.dayOfWeek : return $r0 >>>>>>>> org.joda.time.DateTimeFieldType.weekOfWeekyear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType WEEK_OF_WEEKYEAR_TYPE>
org.joda.time.DateTimeFieldType.weekOfWeekyear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType WEEK_OF_WEEKYEAR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.weekOfWeekyear : return $r0
org.joda.time.DateTimeFieldType.weekOfWeekyear : return $r0 >>>>>>>> org.joda.time.DateTimeFieldType.dayOfMonth : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType DAY_OF_MONTH_TYPE>
org.joda.time.DateTimeFieldType.dayOfMonth : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType DAY_OF_MONTH_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.dayOfMonth : return $r0
org.joda.time.DateTimeFieldType.dayOfMonth : return $r0 >>>>>>>> org.joda.time.DateTimeFieldType.monthOfYear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MONTH_OF_YEAR_TYPE>
org.joda.time.DateTimeFieldType.monthOfYear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MONTH_OF_YEAR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.monthOfYear : return $r0
org.joda.time.DateTimeFieldType.monthOfYear : return $r0 >>>>>>>> org.joda.time.DateTimeFieldType.year : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType YEAR_TYPE>
org.joda.time.DateTimeFieldType.year : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType YEAR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.year : return $r0
org.joda.time.DateTimeFieldType.year : return $r0 >>>>>>>> org.joda.time.DateTimeFieldType.weekyear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType WEEKYEAR_TYPE>
org.joda.time.DateTimeFieldType.weekyear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType WEEKYEAR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.weekyear : return $r0
org.joda.time.DateTimeFieldType.weekyear : return $r0 >>>>>>>> org.joda.time.DateTimeComparator.getInstance : $r1 = staticinvoke <org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DateTimeFieldType)>(r0, null)
org.joda.time.DateTimeComparator.getInstance : $r1 = staticinvoke <org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DateTimeFieldType)>(r0, null) >>>>>>>> org.joda.time.DateTimeComparator.getInstance : return $r1
org.joda.time.DateTimeComparator.getInstance : return $r1 >>>>>>>> org.joda.time.DateTimeComparator.getDateOnlyInstance : $r0 = <org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator DATE_INSTANCE>
org.joda.time.DateTimeComparator.getDateOnlyInstance : $r0 = <org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator DATE_INSTANCE> >>>>>>>> org.joda.time.DateTimeComparator.getDateOnlyInstance : return $r0
org.joda.time.DateTimeComparator.getDateOnlyInstance : return $r0 >>>>>>>> org.joda.time.DateTimeComparator.getTimeOnlyInstance : $r0 = <org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator TIME_INSTANCE>
org.joda.time.DateTimeComparator.getTimeOnlyInstance : $r0 = <org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator TIME_INSTANCE> >>>>>>>> org.joda.time.DateTimeComparator.getTimeOnlyInstance : return $r0
org.joda.time.DateTimeComparator.getTimeOnlyInstance : return $r0 >>>>>>>> org.joda.time.DateTimeComparator.getInstance : $r0 = <org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator ALL_INSTANCE>
org.joda.time.DateTimeComparator.getInstance : $r0 = <org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator ALL_INSTANCE> >>>>>>>> org.joda.time.DateTimeComparator.getInstance : return $r0
org.joda.time.DateTimeComparator.getInstance : return $r0 >>>>>>>> org.joda.time.DateTimeComparator.equals : $z0 = r1 instanceof org.joda.time.DateTimeComparator
org.joda.time.DateTimeComparator.equals : $z0 = r1 instanceof org.joda.time.DateTimeComparator >>>>>>>> org.joda.time.DateTimeComparator.equals : if $z0 == 0
org.joda.time.DateTimeComparator.equals : if $z0 == 0 >>>>>>>> org.joda.time.DateTimeComparator.equals : r2 = (org.joda.time.DateTimeComparator) r1
org.joda.time.DateTimeComparator.equals : r2 = (org.joda.time.DateTimeComparator) r1 >>>>>>>> org.joda.time.DateTimeComparator.equals : $r3 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iLowerLimit>
org.joda.time.DateTimeComparator.equals : $r3 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iLowerLimit> >>>>>>>> org.joda.time.DateTimeComparator.equals : $r4 = virtualinvoke r2.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType getLowerLimit()>()
org.joda.time.DateTimeComparator.equals : $r4 = virtualinvoke r2.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType getLowerLimit()>() >>>>>>>> org.joda.time.DateTimeComparator.getLowerLimit : $r1 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iLowerLimit>
org.joda.time.DateTimeComparator.getLowerLimit : $r1 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iLowerLimit> >>>>>>>> org.joda.time.DateTimeComparator.getLowerLimit : return $r1
org.joda.time.DateTimeComparator.getLowerLimit : return $r1 >>>>>>>> org.joda.time.DateTimeComparator.equals : if $r3 == $r4
org.joda.time.DateTimeComparator.equals : if $r3 == $r4 >>>>>>>> org.joda.time.DateTimeComparator.equals : $r8 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iUpperLimit>
org.joda.time.DateTimeComparator.equals : $r8 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iUpperLimit> >>>>>>>> org.joda.time.DateTimeComparator.equals : $r9 = virtualinvoke r2.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType getUpperLimit()>()
org.joda.time.DateTimeComparator.equals : $r9 = virtualinvoke r2.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType getUpperLimit()>() >>>>>>>> org.joda.time.DateTimeComparator.getUpperLimit : $r1 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iUpperLimit>
org.joda.time.DateTimeComparator.getUpperLimit : $r1 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iUpperLimit> >>>>>>>> org.joda.time.DateTimeComparator.getUpperLimit : return $r1
org.joda.time.DateTimeComparator.getUpperLimit : return $r1 >>>>>>>> org.joda.time.DateTimeComparator.equals : if $r8 == $r9
org.joda.time.DateTimeComparator.equals : if $r8 == $r9 >>>>>>>> org.joda.time.DateTimeComparator.equals : $z3 = 1
org.joda.time.DateTimeComparator.equals : $z3 = 1 >>>>>>>> org.joda.time.DateTimeComparator.equals : goto [?= return $z3]
org.joda.time.DateTimeComparator.equals : goto [?= return $z3] >>>>>>>> org.joda.time.DateTimeComparator.equals : return $z3
org.joda.time.DateTimeComparator.equals : return $z3 >>>>>>>> org.joda.time.DateTimeComparator.equals : return 0
org.joda.time.DateTimeComparator.equals : return 0 >>>>>>>> org.joda.time.DateTimeComparator.hashCode : $r1 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iLowerLimit>
org.joda.time.DateTimeComparator.hashCode : $r1 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iLowerLimit> >>>>>>>> org.joda.time.DateTimeComparator.hashCode : if $r1 != null
org.joda.time.DateTimeComparator.hashCode : if $r1 != null >>>>>>>> org.joda.time.DateTimeComparator.hashCode : $i1 = 0
org.joda.time.DateTimeComparator.hashCode : $i1 = 0 >>>>>>>> org.joda.time.DateTimeComparator.hashCode : goto [?= $b0 = 123]
org.joda.time.DateTimeComparator.hashCode : goto [?= $b0 = 123] >>>>>>>> org.joda.time.DateTimeComparator.hashCode : $b0 = 123
org.joda.time.DateTimeComparator.hashCode : $b0 = 123 >>>>>>>> org.joda.time.DateTimeComparator.hashCode : $r3 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iUpperLimit>
org.joda.time.DateTimeComparator.hashCode : $r3 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iUpperLimit> >>>>>>>> org.joda.time.DateTimeComparator.hashCode : if $r3 != null
org.joda.time.DateTimeComparator.hashCode : if $r3 != null >>>>>>>> org.joda.time.DateTimeComparator.hashCode : $i2 = 0
org.joda.time.DateTimeComparator.hashCode : $i2 = 0 >>>>>>>> org.joda.time.DateTimeComparator.hashCode : goto [?= $i3 = $b0 * $i2]
org.joda.time.DateTimeComparator.hashCode : goto [?= $i3 = $b0 * $i2] >>>>>>>> org.joda.time.DateTimeComparator.hashCode : $i3 = $b0 * $i2
org.joda.time.DateTimeComparator.hashCode : $i3 = $b0 * $i2 >>>>>>>> org.joda.time.DateTimeComparator.hashCode : $i4 = $i1 + $i3
org.joda.time.DateTimeComparator.hashCode : $i4 = $i1 + $i3 >>>>>>>> org.joda.time.DateTimeComparator.hashCode : return $i4
org.joda.time.DateTimeComparator.hashCode : return $i4 >>>>>>>> org.joda.time.DateTimeComparator.equals : $r10 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iUpperLimit>
org.joda.time.DateTimeComparator.equals : $r10 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iUpperLimit> >>>>>>>> org.joda.time.DateTimeComparator.equals : if $r10 == null
org.joda.time.DateTimeComparator.equals : if $r10 == null >>>>>>>> org.joda.time.DateTimeComparator.equals : $r11 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iUpperLimit>
org.joda.time.DateTimeComparator.equals : $r11 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iUpperLimit> >>>>>>>> org.joda.time.DateTimeComparator.equals : $r12 = virtualinvoke r2.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType getUpperLimit()>()
org.joda.time.DateTimeComparator.equals : $r12 = virtualinvoke r2.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType getUpperLimit()>() >>>>>>>> org.joda.time.DateTimeComparator.equals : $z2 = virtualinvoke $r11.<java.lang.Object: boolean equals(java.lang.Object)>($r12)
org.joda.time.DateTimeComparator.equals : $z2 = virtualinvoke $r11.<java.lang.Object: boolean equals(java.lang.Object)>($r12) >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.equals : if r0 != r1
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.equals : if r0 != r1 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.equals : $z0 = r1 instanceof org.joda.time.DateTimeFieldType$StandardDateTimeFieldType
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.equals : $z0 = r1 instanceof org.joda.time.DateTimeFieldType$StandardDateTimeFieldType >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.equals : if $z0 == 0
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.equals : if $z0 == 0 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.equals : return 0
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.equals : return 0 >>>>>>>> org.joda.time.DateTimeComparator.equals : if $z2 == 0
org.joda.time.DateTimeComparator.equals : if $z2 == 0 >>>>>>>> org.joda.time.DateTimeComparator.equals : $z3 = 0
org.joda.time.DateTimeComparator.equals : $z3 = 0 >>>>>>>> org.joda.time.DateTimeComparator.hashCode : $r4 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iUpperLimit>
org.joda.time.DateTimeComparator.hashCode : $r4 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iUpperLimit> >>>>>>>> org.joda.time.DateTimeComparator.hashCode : $i2 = virtualinvoke $r4.<java.lang.Object: int hashCode()>()
org.joda.time.DateTimeComparator.hashCode : $i2 = virtualinvoke $r4.<java.lang.Object: int hashCode()>() >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.hashCode : $b0 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: byte iOrdinal>
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.hashCode : $b0 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: byte iOrdinal> >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.hashCode : return $b0
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.hashCode : return $b0 >>>>>>>> org.joda.time.DateTimeComparator.hashCode : $r2 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iLowerLimit>
org.joda.time.DateTimeComparator.hashCode : $r2 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iLowerLimit> >>>>>>>> org.joda.time.DateTimeComparator.hashCode : $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>()
