org.joda.time.DateTimeUtils.setCurrentMillisSystem : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>() >>>>>>>> org.joda.time.DateTimeUtils.checkPermission : r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>()
org.joda.time.DateTimeUtils.checkPermission : r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>() >>>>>>>> org.joda.time.DateTimeUtils.checkPermission : if r0 == null
org.joda.time.DateTimeUtils.checkPermission : if r0 == null >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisSystem : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$SystemMillisProvider SYSTEM_MILLIS_PROVIDER>
org.joda.time.DateTimeUtils.setCurrentMillisSystem : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$SystemMillisProvider SYSTEM_MILLIS_PROVIDER> >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisSystem : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0
org.joda.time.DateTimeUtils.setCurrentMillisSystem : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0 >>>>>>>> org.joda.time.DateTimeZone.setDefault : r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>()
org.joda.time.DateTimeZone.setDefault : r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>() >>>>>>>> org.joda.time.DateTimeZone.setDefault : if r1 == null
org.joda.time.DateTimeZone.setDefault : if r1 == null >>>>>>>> org.joda.time.DateTimeZone.setDefault : if r0 != null
org.joda.time.DateTimeZone.setDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.setDefault : $r6 = class "org/joda/time/DateTimeZone"
org.joda.time.DateTimeZone.setDefault : $r6 = class "org/joda/time/DateTimeZone" >>>>>>>> org.joda.time.DateTimeZone.setDefault : r3 = $r6
org.joda.time.DateTimeZone.setDefault : r3 = $r6 >>>>>>>> org.joda.time.DateTimeZone.setDefault : entermonitor $r6
org.joda.time.DateTimeZone.setDefault : entermonitor $r6 >>>>>>>> org.joda.time.DateTimeZone.setDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r0
org.joda.time.DateTimeZone.setDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r0 >>>>>>>> org.joda.time.DateTimeZone.setDefault : exitmonitor r3
org.joda.time.DateTimeZone.setDefault : exitmonitor r3 >>>>>>>> org.joda.time.DateTimeZone.setDefault : goto [?= return]
org.joda.time.DateTimeZone.setDefault : goto [?= return] >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>()
org.joda.time.DateTimeUtils.setCurrentMillisFixed : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>() >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : $r0 = new org.joda.time.DateTimeUtils$FixedMillisProvider
org.joda.time.DateTimeUtils.setCurrentMillisFixed : $r0 = new org.joda.time.DateTimeUtils$FixedMillisProvider >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : specialinvoke $r0.<org.joda.time.DateTimeUtils$FixedMillisProvider: void <init>(long)>(l0)
org.joda.time.DateTimeUtils.setCurrentMillisFixed : specialinvoke $r0.<org.joda.time.DateTimeUtils$FixedMillisProvider: void <init>(long)>(l0) >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0
org.joda.time.DateTimeUtils.setCurrentMillisFixed : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0 >>>>>>>> org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> >>>>>>>> org.joda.time.DateTimeZone.getDefault : if r0 != null
org.joda.time.DateTimeZone.getDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.DateTimeZone.getDefault : return r0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.clear : r0.<org.joda.time.format.PeriodFormatterBuilder: int iMinPrintedDigits> = 1
org.joda.time.format.PeriodFormatterBuilder.clear : r0.<org.joda.time.format.PeriodFormatterBuilder: int iMinPrintedDigits> = 1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.clear : r0.<org.joda.time.format.PeriodFormatterBuilder: int iPrintZeroSetting> = 2
org.joda.time.format.PeriodFormatterBuilder.clear : r0.<org.joda.time.format.PeriodFormatterBuilder: int iPrintZeroSetting> = 2 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.clear : r0.<org.joda.time.format.PeriodFormatterBuilder: int iMaxParsedDigits> = 10
org.joda.time.format.PeriodFormatterBuilder.clear : r0.<org.joda.time.format.PeriodFormatterBuilder: int iMaxParsedDigits> = 10 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.clear : r0.<org.joda.time.format.PeriodFormatterBuilder: boolean iRejectSignedValues> = 0
org.joda.time.format.PeriodFormatterBuilder.clear : r0.<org.joda.time.format.PeriodFormatterBuilder: boolean iRejectSignedValues> = 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.clear : r0.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iPrefix> = null
org.joda.time.format.PeriodFormatterBuilder.clear : r0.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iPrefix> = null >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.clear : $r1 = r0.<org.joda.time.format.PeriodFormatterBuilder: java.util.List iElementPairs>
org.joda.time.format.PeriodFormatterBuilder.clear : $r1 = r0.<org.joda.time.format.PeriodFormatterBuilder: java.util.List iElementPairs> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.clear : if $r1 != null
org.joda.time.format.PeriodFormatterBuilder.clear : if $r1 != null >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.clear : $r2 = new java.util.ArrayList
org.joda.time.format.PeriodFormatterBuilder.clear : $r2 = new java.util.ArrayList >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.clear : specialinvoke $r2.<java.util.ArrayList: void <init>()>()
org.joda.time.format.PeriodFormatterBuilder.clear : specialinvoke $r2.<java.util.ArrayList: void <init>()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.clear : r0.<org.joda.time.format.PeriodFormatterBuilder: java.util.List iElementPairs> = $r2
org.joda.time.format.PeriodFormatterBuilder.clear : r0.<org.joda.time.format.PeriodFormatterBuilder: java.util.List iElementPairs> = $r2 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.clear : goto [?= r0.<org.joda.time.format.PeriodFormatterBuilder: boolean iNotPrinter> = 0]
org.joda.time.format.PeriodFormatterBuilder.clear : goto [?= r0.<org.joda.time.format.PeriodFormatterBuilder: boolean iNotPrinter> = 0] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.clear : r0.<org.joda.time.format.PeriodFormatterBuilder: boolean iNotPrinter> = 0
org.joda.time.format.PeriodFormatterBuilder.clear : r0.<org.joda.time.format.PeriodFormatterBuilder: boolean iNotPrinter> = 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.clear : r0.<org.joda.time.format.PeriodFormatterBuilder: boolean iNotParser> = 0
org.joda.time.format.PeriodFormatterBuilder.clear : r0.<org.joda.time.format.PeriodFormatterBuilder: boolean iNotParser> = 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.clear : $r4 = newarray (org.joda.time.format.PeriodFormatterBuilder$FieldFormatter)[10]
org.joda.time.format.PeriodFormatterBuilder.clear : $r4 = newarray (org.joda.time.format.PeriodFormatterBuilder$FieldFormatter)[10] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.clear : r0.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[] iFieldFormatters> = $r4
org.joda.time.format.PeriodFormatterBuilder.clear : r0.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[] iFieldFormatters> = $r4 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendYears : specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>(0)
org.joda.time.format.PeriodFormatterBuilder.appendYears : specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>(0) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendField : $i1 = r0.<org.joda.time.format.PeriodFormatterBuilder: int iMinPrintedDigits>
org.joda.time.format.PeriodFormatterBuilder.appendField : $i1 = r0.<org.joda.time.format.PeriodFormatterBuilder: int iMinPrintedDigits> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendField : specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder: void appendField(int,int)>(i0, $i1)
org.joda.time.format.PeriodFormatterBuilder.appendField : specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder: void appendField(int,int)>(i0, $i1) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendField : $r1 = new org.joda.time.format.PeriodFormatterBuilder$FieldFormatter
org.joda.time.format.PeriodFormatterBuilder.appendField : $r1 = new org.joda.time.format.PeriodFormatterBuilder$FieldFormatter >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendField : $i2 = r0.<org.joda.time.format.PeriodFormatterBuilder: int iPrintZeroSetting>
org.joda.time.format.PeriodFormatterBuilder.appendField : $i2 = r0.<org.joda.time.format.PeriodFormatterBuilder: int iPrintZeroSetting> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendField : $i3 = r0.<org.joda.time.format.PeriodFormatterBuilder: int iMaxParsedDigits>
org.joda.time.format.PeriodFormatterBuilder.appendField : $i3 = r0.<org.joda.time.format.PeriodFormatterBuilder: int iMaxParsedDigits> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendField : $z0 = r0.<org.joda.time.format.PeriodFormatterBuilder: boolean iRejectSignedValues>
org.joda.time.format.PeriodFormatterBuilder.appendField : $z0 = r0.<org.joda.time.format.PeriodFormatterBuilder: boolean iRejectSignedValues> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendField : $r3 = r0.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[] iFieldFormatters>
org.joda.time.format.PeriodFormatterBuilder.appendField : $r3 = r0.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[] iFieldFormatters> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendField : $r4 = r0.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iPrefix>
org.joda.time.format.PeriodFormatterBuilder.appendField : $r4 = r0.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iPrefix> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendField : specialinvoke $r1.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void <init>(int,int,int,boolean,int,org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[],org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>(i1, $i2, $i3, $z0, i0, $r3, $r4, null)
org.joda.time.format.PeriodFormatterBuilder.appendField : specialinvoke $r1.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void <init>(int,int,int,boolean,int,org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[],org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix,org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix)>(i1, $i2, $i3, $z0, i0, $r3, $r4, null) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendField : r2 = $r1
org.joda.time.format.PeriodFormatterBuilder.appendField : r2 = $r1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendField : specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder append0(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>(r2, r2)
org.joda.time.format.PeriodFormatterBuilder.appendField : specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder append0(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>(r2, r2) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.append0 : $r3 = r0.<org.joda.time.format.PeriodFormatterBuilder: java.util.List iElementPairs>
org.joda.time.format.PeriodFormatterBuilder.append0 : $r3 = r0.<org.joda.time.format.PeriodFormatterBuilder: java.util.List iElementPairs> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.append0 : interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r1)
org.joda.time.format.PeriodFormatterBuilder.append0 : interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r1) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.append0 : $r4 = r0.<org.joda.time.format.PeriodFormatterBuilder: java.util.List iElementPairs>
org.joda.time.format.PeriodFormatterBuilder.append0 : $r4 = r0.<org.joda.time.format.PeriodFormatterBuilder: java.util.List iElementPairs> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.append0 : interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r2)
org.joda.time.format.PeriodFormatterBuilder.append0 : interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r2) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.append0 : $z2 = r0.<org.joda.time.format.PeriodFormatterBuilder: boolean iNotPrinter>
org.joda.time.format.PeriodFormatterBuilder.append0 : $z2 = r0.<org.joda.time.format.PeriodFormatterBuilder: boolean iNotPrinter> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.append0 : if r1 != null
org.joda.time.format.PeriodFormatterBuilder.append0 : if r1 != null >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.append0 : $z3 = 0
org.joda.time.format.PeriodFormatterBuilder.append0 : $z3 = 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.append0 : $z4 = $z2 | $z3
org.joda.time.format.PeriodFormatterBuilder.append0 : $z4 = $z2 | $z3 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.append0 : r0.<org.joda.time.format.PeriodFormatterBuilder: boolean iNotPrinter> = $z4
org.joda.time.format.PeriodFormatterBuilder.append0 : r0.<org.joda.time.format.PeriodFormatterBuilder: boolean iNotPrinter> = $z4 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.append0 : $z5 = r0.<org.joda.time.format.PeriodFormatterBuilder: boolean iNotParser>
org.joda.time.format.PeriodFormatterBuilder.append0 : $z5 = r0.<org.joda.time.format.PeriodFormatterBuilder: boolean iNotParser> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.append0 : if r2 != null
org.joda.time.format.PeriodFormatterBuilder.append0 : if r2 != null >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.append0 : $z6 = 0
org.joda.time.format.PeriodFormatterBuilder.append0 : $z6 = 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.append0 : $z7 = $z5 | $z6
org.joda.time.format.PeriodFormatterBuilder.append0 : $z7 = $z5 | $z6 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.append0 : r0.<org.joda.time.format.PeriodFormatterBuilder: boolean iNotParser> = $z7
org.joda.time.format.PeriodFormatterBuilder.append0 : r0.<org.joda.time.format.PeriodFormatterBuilder: boolean iNotParser> = $z7 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.append0 : return r0
org.joda.time.format.PeriodFormatterBuilder.append0 : return r0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendField : $r6 = r0.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[] iFieldFormatters>
org.joda.time.format.PeriodFormatterBuilder.appendField : $r6 = r0.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[] iFieldFormatters> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendField : $r6[i0] = r2
org.joda.time.format.PeriodFormatterBuilder.appendField : $r6[i0] = r2 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendField : r0.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iPrefix> = null
org.joda.time.format.PeriodFormatterBuilder.appendField : r0.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iPrefix> = null >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendYears : return r0
org.joda.time.format.PeriodFormatterBuilder.appendYears : return r0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendLiteral : if r1 != null
org.joda.time.format.PeriodFormatterBuilder.appendLiteral : if r1 != null >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendLiteral : specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder: void clearPrefix()>()
org.joda.time.format.PeriodFormatterBuilder.appendLiteral : specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder: void clearPrefix()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.clearPrefix : $r1 = r0.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iPrefix>
org.joda.time.format.PeriodFormatterBuilder.clearPrefix : $r1 = r0.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iPrefix> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.clearPrefix : if $r1 == null
org.joda.time.format.PeriodFormatterBuilder.clearPrefix : if $r1 == null >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.clearPrefix : r0.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iPrefix> = null
org.joda.time.format.PeriodFormatterBuilder.clearPrefix : r0.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iPrefix> = null >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendLiteral : $r4 = new org.joda.time.format.PeriodFormatterBuilder$Literal
org.joda.time.format.PeriodFormatterBuilder.appendLiteral : $r4 = new org.joda.time.format.PeriodFormatterBuilder$Literal >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendLiteral : specialinvoke $r4.<org.joda.time.format.PeriodFormatterBuilder$Literal: void <init>(java.lang.String)>(r1)
org.joda.time.format.PeriodFormatterBuilder.appendLiteral : specialinvoke $r4.<org.joda.time.format.PeriodFormatterBuilder$Literal: void <init>(java.lang.String)>(r1) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendLiteral : r2 = $r4
org.joda.time.format.PeriodFormatterBuilder.appendLiteral : r2 = $r4 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendLiteral : specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder append0(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>(r2, r2)
org.joda.time.format.PeriodFormatterBuilder.appendLiteral : specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder append0(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>(r2, r2) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendLiteral : return r0
org.joda.time.format.PeriodFormatterBuilder.appendLiteral : return r0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendMonths : specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>(1)
org.joda.time.format.PeriodFormatterBuilder.appendMonths : specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>(1) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendMonths : return r0
org.joda.time.format.PeriodFormatterBuilder.appendMonths : return r0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendWeeks : specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>(2)
org.joda.time.format.PeriodFormatterBuilder.appendWeeks : specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>(2) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendWeeks : return r0
org.joda.time.format.PeriodFormatterBuilder.appendWeeks : return r0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendDays : specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>(3)
org.joda.time.format.PeriodFormatterBuilder.appendDays : specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder: void appendField(int)>(3) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.appendDays : return r0
org.joda.time.format.PeriodFormatterBuilder.appendDays : return r0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r2 = r0.<org.joda.time.format.PeriodFormatterBuilder: java.util.List iElementPairs>
org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r2 = r0.<org.joda.time.format.PeriodFormatterBuilder: java.util.List iElementPairs> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : $z0 = r0.<org.joda.time.format.PeriodFormatterBuilder: boolean iNotPrinter>
org.joda.time.format.PeriodFormatterBuilder.toFormatter : $z0 = r0.<org.joda.time.format.PeriodFormatterBuilder: boolean iNotPrinter> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : $z1 = r0.<org.joda.time.format.PeriodFormatterBuilder: boolean iNotParser>
org.joda.time.format.PeriodFormatterBuilder.toFormatter : $z1 = r0.<org.joda.time.format.PeriodFormatterBuilder: boolean iNotParser> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : r1 = staticinvoke <org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>($r2, $z0, $z1)
org.joda.time.format.PeriodFormatterBuilder.toFormatter : r1 = staticinvoke <org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatter toFormatter(java.util.List,boolean,boolean)>($r2, $z0, $z1) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : if z0 == 0
org.joda.time.format.PeriodFormatterBuilder.toFormatter : if z0 == 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : i0 = interfaceinvoke r0.<java.util.List: int size()>()
org.joda.time.format.PeriodFormatterBuilder.toFormatter : i0 = interfaceinvoke r0.<java.util.List: int size()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : if i0 < 2
org.joda.time.format.PeriodFormatterBuilder.toFormatter : if i0 < 2 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r4 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0)
org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r4 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : $z2 = $r4 instanceof org.joda.time.format.PeriodFormatterBuilder$Separator
org.joda.time.format.PeriodFormatterBuilder.toFormatter : $z2 = $r4 instanceof org.joda.time.format.PeriodFormatterBuilder$Separator >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : if $z2 == 0
org.joda.time.format.PeriodFormatterBuilder.toFormatter : if $z2 == 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : r13 = staticinvoke <org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>(r0)
org.joda.time.format.PeriodFormatterBuilder.toFormatter : r13 = staticinvoke <org.joda.time.format.PeriodFormatterBuilder: java.lang.Object[] createComposite(java.util.List)>(r0) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.createComposite : $i0 = interfaceinvoke r0.<java.util.List: int size()>()
org.joda.time.format.PeriodFormatterBuilder.createComposite : $i0 = interfaceinvoke r0.<java.util.List: int size()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.createComposite : lookupswitch($i0) {     case 0:
org.joda.time.format.PeriodFormatterBuilder.createComposite : lookupswitch($i0) {     case 0: >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.createComposite : $r8 = new org.joda.time.format.PeriodFormatterBuilder$Composite
org.joda.time.format.PeriodFormatterBuilder.createComposite : $r8 = new org.joda.time.format.PeriodFormatterBuilder$Composite >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.createComposite : specialinvoke $r8.<org.joda.time.format.PeriodFormatterBuilder$Composite: void <init>(java.util.List)>(r0)
org.joda.time.format.PeriodFormatterBuilder.createComposite : specialinvoke $r8.<org.joda.time.format.PeriodFormatterBuilder$Composite: void <init>(java.util.List)>(r0) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : i0 = interfaceinvoke r1.<java.util.List: int size()>()
org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : i0 = interfaceinvoke r1.<java.util.List: int size()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : i1 = 0
org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : i1 = 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : if i1 >= i0
org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : if i1 >= i0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1)
org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : $z0 = r4 instanceof org.joda.time.format.PeriodPrinter
org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : $z0 = r4 instanceof org.joda.time.format.PeriodPrinter >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : if $z0 == 0
org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : if $z0 == 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : $z1 = r4 instanceof org.joda.time.format.PeriodFormatterBuilder$Composite
org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : $z1 = r4 instanceof org.joda.time.format.PeriodFormatterBuilder$Composite >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : if $z1 == 0
org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : if $z1 == 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r4)
org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r4) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : $i2 = i1 + 1
org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : $i2 = i1 + 1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : r7 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i2)
org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : r7 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i2) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : $z3 = r7 instanceof org.joda.time.format.PeriodParser
org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : $z3 = r7 instanceof org.joda.time.format.PeriodParser >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : if $z3 == 0
org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : if $z3 == 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : $z4 = r7 instanceof org.joda.time.format.PeriodFormatterBuilder$Composite
org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : $z4 = r7 instanceof org.joda.time.format.PeriodFormatterBuilder$Composite >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : if $z4 == 0
org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : if $z4 == 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r7)
org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r7) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : i1 = i1 + 2
org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : i1 = i1 + 2 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : goto [?= (branch)]
org.joda.time.format.PeriodFormatterBuilder$Composite.decompose : goto [?= (branch)] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.createComposite : r2 = $r8
org.joda.time.format.PeriodFormatterBuilder.createComposite : r2 = $r8 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.createComposite : $r9 = newarray (java.lang.Object)[2]
org.joda.time.format.PeriodFormatterBuilder.createComposite : $r9 = newarray (java.lang.Object)[2] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.createComposite : $r9[0] = r2
org.joda.time.format.PeriodFormatterBuilder.createComposite : $r9[0] = r2 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.createComposite : $r9[1] = r2
org.joda.time.format.PeriodFormatterBuilder.createComposite : $r9[1] = r2 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.createComposite : return $r9
org.joda.time.format.PeriodFormatterBuilder.createComposite : return $r9 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : if z1 == 0
org.joda.time.format.PeriodFormatterBuilder.toFormatter : if z1 == 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r20 = new org.joda.time.format.PeriodFormatter
org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r20 = new org.joda.time.format.PeriodFormatter >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r21 = r13[0]
org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r21 = r13[0] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r22 = (org.joda.time.format.PeriodPrinter) $r21
org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r22 = (org.joda.time.format.PeriodPrinter) $r21 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r23 = r13[1]
org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r23 = r13[1] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r24 = (org.joda.time.format.PeriodParser) $r23
org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r24 = (org.joda.time.format.PeriodParser) $r23 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : specialinvoke $r20.<org.joda.time.format.PeriodFormatter: void <init>(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>($r22, $r24)
org.joda.time.format.PeriodFormatterBuilder.toFormatter : specialinvoke $r20.<org.joda.time.format.PeriodFormatter: void <init>(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser)>($r22, $r24) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : return $r20
org.joda.time.format.PeriodFormatterBuilder.toFormatter : return $r20 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r3 = r0.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[] iFieldFormatters>
org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r3 = r0.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[] iFieldFormatters> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>()
org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r5 = (org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[]) $r4
org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r5 = (org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[]) $r4 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r6 = (org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[]) $r5
org.joda.time.format.PeriodFormatterBuilder.toFormatter : $r6 = (org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[]) $r5 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : r0.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[] iFieldFormatters> = $r6
org.joda.time.format.PeriodFormatterBuilder.toFormatter : r0.<org.joda.time.format.PeriodFormatterBuilder: org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[] iFieldFormatters> = $r6 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder.toFormatter : return r1
org.joda.time.format.PeriodFormatterBuilder.toFormatter : return r1 >>>>>>>> org.joda.time.format.PeriodFormatter.print : specialinvoke r0.<org.joda.time.format.PeriodFormatter: void checkPrinter()>()
org.joda.time.format.PeriodFormatter.print : specialinvoke r0.<org.joda.time.format.PeriodFormatter: void checkPrinter()>() >>>>>>>> org.joda.time.format.PeriodFormatter.checkPrinter : $r1 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter iPrinter>
org.joda.time.format.PeriodFormatter.checkPrinter : $r1 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter iPrinter> >>>>>>>> org.joda.time.format.PeriodFormatter.checkPrinter : if $r1 != null
org.joda.time.format.PeriodFormatter.checkPrinter : if $r1 != null >>>>>>>> org.joda.time.format.PeriodFormatter.print : specialinvoke r0.<org.joda.time.format.PeriodFormatter: void checkPeriod(org.joda.time.ReadablePeriod)>(r1)
org.joda.time.format.PeriodFormatter.print : specialinvoke r0.<org.joda.time.format.PeriodFormatter: void checkPeriod(org.joda.time.ReadablePeriod)>(r1) >>>>>>>> org.joda.time.format.PeriodFormatter.checkPeriod : if r1 != null
org.joda.time.format.PeriodFormatter.checkPeriod : if r1 != null >>>>>>>> org.joda.time.format.PeriodFormatter.print : r2 = virtualinvoke r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter getPrinter()>()
org.joda.time.format.PeriodFormatter.print : r2 = virtualinvoke r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter getPrinter()>() >>>>>>>> org.joda.time.format.PeriodFormatter.getPrinter : $r1 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter iPrinter>
org.joda.time.format.PeriodFormatter.getPrinter : $r1 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter iPrinter> >>>>>>>> org.joda.time.format.PeriodFormatter.getPrinter : return $r1
org.joda.time.format.PeriodFormatter.getPrinter : return $r1 >>>>>>>> org.joda.time.format.PeriodFormatter.print : $r4 = new java.lang.StringBuffer
org.joda.time.format.PeriodFormatter.print : $r4 = new java.lang.StringBuffer >>>>>>>> org.joda.time.format.PeriodFormatter.print : $r5 = r0.<org.joda.time.format.PeriodFormatter: java.util.Locale iLocale>
org.joda.time.format.PeriodFormatter.print : $r5 = r0.<org.joda.time.format.PeriodFormatter: java.util.Locale iLocale> >>>>>>>> org.joda.time.format.PeriodFormatter.print : $i0 = interfaceinvoke r2.<org.joda.time.format.PeriodPrinter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>(r1, $r5)
org.joda.time.format.PeriodFormatter.print : $i0 = interfaceinvoke r2.<org.joda.time.format.PeriodPrinter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>(r1, $r5) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : i0 = 0
org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : i0 = 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : r3 = r0.<org.joda.time.format.PeriodFormatterBuilder$Composite: org.joda.time.format.PeriodPrinter[] iPrinters>
org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : r3 = r0.<org.joda.time.format.PeriodFormatterBuilder$Composite: org.joda.time.format.PeriodPrinter[] iPrinters> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : i1 = lengthof r3
org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : i1 = lengthof r3 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : i1 = i1 + -1
org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : i1 = i1 + -1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : if i1 < 0
org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : if i1 < 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : $r4 = r3[i1]
org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : $r4 = r3[i1] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : $i2 = interfaceinvoke $r4.<org.joda.time.format.PeriodPrinter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>(r1, r2)
org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : $i2 = interfaceinvoke $r4.<org.joda.time.format.PeriodPrinter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>(r1, r2) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : l0 = virtualinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>(r1)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : l0 = virtualinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>(r1) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i3 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iPrintZeroSetting>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i3 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iPrintZeroSetting> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : if $i3 != 4
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : if $i3 != 4 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : r2 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : r2 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.base.BasePeriod.getPeriodType : $r1 = r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType>
org.joda.time.base.BasePeriod.getPeriodType : $r1 = r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType> >>>>>>>> org.joda.time.base.BasePeriod.getPeriodType : return $r1
org.joda.time.base.BasePeriod.getPeriodType : return $r1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : if r2 == null
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : if r2 == null >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i4 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i4 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $z0 = virtualinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>(r2, $i4)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $z0 = virtualinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>(r2, $i4) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : tableswitch(i0) {     case 0:
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : tableswitch(i0) {     case 0: >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $r5 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $r5 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>() >>>>>>>> org.joda.time.DurationFieldType.days : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType DAYS_TYPE>
org.joda.time.DurationFieldType.days : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType DAYS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.days : return $r0
org.joda.time.DurationFieldType.days : return $r0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $z3 = virtualinvoke r1.<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>($r5)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $z3 = virtualinvoke r1.<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>($r5) >>>>>>>> org.joda.time.PeriodType.isSupported : $i0 = virtualinvoke r0.<org.joda.time.PeriodType: int indexOf(org.joda.time.DurationFieldType)>(r1)
org.joda.time.PeriodType.isSupported : $i0 = virtualinvoke r0.<org.joda.time.PeriodType: int indexOf(org.joda.time.DurationFieldType)>(r1) >>>>>>>> org.joda.time.PeriodType.indexOf : i0 = 0
org.joda.time.PeriodType.indexOf : i0 = 0 >>>>>>>> org.joda.time.PeriodType.indexOf : i1 = virtualinvoke r0.<org.joda.time.PeriodType: int size()>()
org.joda.time.PeriodType.indexOf : i1 = virtualinvoke r0.<org.joda.time.PeriodType: int size()>() >>>>>>>> org.joda.time.PeriodType.size : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.PeriodType.size : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes> >>>>>>>> org.joda.time.PeriodType.size : $i0 = lengthof $r1
org.joda.time.PeriodType.size : $i0 = lengthof $r1 >>>>>>>> org.joda.time.PeriodType.size : return $i0
org.joda.time.PeriodType.size : return $i0 >>>>>>>> org.joda.time.PeriodType.indexOf : if i0 >= i1
org.joda.time.PeriodType.indexOf : if i0 >= i1 >>>>>>>> org.joda.time.PeriodType.indexOf : $r2 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.PeriodType.indexOf : $r2 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes> >>>>>>>> org.joda.time.PeriodType.indexOf : $r3 = $r2[i0]
org.joda.time.PeriodType.indexOf : $r3 = $r2[i0] >>>>>>>> org.joda.time.PeriodType.indexOf : if $r3 != r1
org.joda.time.PeriodType.indexOf : if $r3 != r1 >>>>>>>> org.joda.time.PeriodType.indexOf : i0 = i0 + 1
org.joda.time.PeriodType.indexOf : i0 = i0 + 1 >>>>>>>> org.joda.time.PeriodType.indexOf : goto [?= (branch)]
org.joda.time.PeriodType.indexOf : goto [?= (branch)] >>>>>>>> org.joda.time.PeriodType.indexOf : return i0
org.joda.time.PeriodType.indexOf : return i0 >>>>>>>> org.joda.time.PeriodType.isSupported : if $i0 < 0
org.joda.time.PeriodType.isSupported : if $i0 < 0 >>>>>>>> org.joda.time.PeriodType.isSupported : $z0 = 1
org.joda.time.PeriodType.isSupported : $z0 = 1 >>>>>>>> org.joda.time.PeriodType.isSupported : goto [?= return $z0]
org.joda.time.PeriodType.isSupported : goto [?= return $z0] >>>>>>>> org.joda.time.PeriodType.isSupported : return $z0
org.joda.time.PeriodType.isSupported : return $z0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : return $z3
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : return $z3 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : if $z0 != 0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : if $z0 != 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i5 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i5 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : tableswitch($i5) {     case 0:
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : tableswitch($i5) {     case 0: >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r6 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r6 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i9 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r6)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i9 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r6) >>>>>>>> org.joda.time.base.AbstractPeriod.get : i0 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int indexOf(org.joda.time.DurationFieldType)>(r1)
org.joda.time.base.AbstractPeriod.get : i0 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int indexOf(org.joda.time.DurationFieldType)>(r1) >>>>>>>> org.joda.time.base.AbstractPeriod.indexOf : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.base.AbstractPeriod.indexOf : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.base.AbstractPeriod.indexOf : $i0 = virtualinvoke $r2.<org.joda.time.PeriodType: int indexOf(org.joda.time.DurationFieldType)>(r1)
org.joda.time.base.AbstractPeriod.indexOf : $i0 = virtualinvoke $r2.<org.joda.time.PeriodType: int indexOf(org.joda.time.DurationFieldType)>(r1) >>>>>>>> org.joda.time.base.AbstractPeriod.indexOf : return $i0
org.joda.time.base.AbstractPeriod.indexOf : return $i0 >>>>>>>> org.joda.time.base.AbstractPeriod.get : if i0 != -1
org.joda.time.base.AbstractPeriod.get : if i0 != -1 >>>>>>>> org.joda.time.base.AbstractPeriod.get : $i1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int getValue(int)>(i0)
org.joda.time.base.AbstractPeriod.get : $i1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int getValue(int)>(i0) >>>>>>>> org.joda.time.base.BasePeriod.getValue : $r1 = r0.<org.joda.time.base.BasePeriod: int[] iValues>
org.joda.time.base.BasePeriod.getValue : $r1 = r0.<org.joda.time.base.BasePeriod: int[] iValues> >>>>>>>> org.joda.time.base.BasePeriod.getValue : $i1 = $r1[i0]
org.joda.time.base.BasePeriod.getValue : $i1 = $r1[i0] >>>>>>>> org.joda.time.base.BasePeriod.getValue : return $i1
org.joda.time.base.BasePeriod.getValue : return $i1 >>>>>>>> org.joda.time.base.AbstractPeriod.get : return $i1
org.joda.time.base.AbstractPeriod.get : return $i1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : l0 = (long) $i9
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : l0 = (long) $i9 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : goto [?= $b17 = l0 cmp 0L]
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : goto [?= $b17 = l0 cmp 0L] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $b17 = l0 cmp 0L
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $b17 = l0 cmp 0L >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : if $b17 != 0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : if $b17 != 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : return l0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : return l0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $b3 = l0 cmp 9223372036854775807L
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $b3 = l0 cmp 9223372036854775807L >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : if $b3 != 0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : if $b3 != 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $i4 = staticinvoke <org.joda.time.format.FormatUtils: int calculateDigitCount(long)>(l0)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $i4 = staticinvoke <org.joda.time.format.FormatUtils: int calculateDigitCount(long)>(l0) >>>>>>>> org.joda.time.format.FormatUtils.calculateDigitCount : $b1 = l0 cmp 0L
org.joda.time.format.FormatUtils.calculateDigitCount : $b1 = l0 cmp 0L >>>>>>>> org.joda.time.format.FormatUtils.calculateDigitCount : if $b1 >= 0
org.joda.time.format.FormatUtils.calculateDigitCount : if $b1 >= 0 >>>>>>>> org.joda.time.format.FormatUtils.calculateDigitCount : $b6 = l0 cmp 10L
org.joda.time.format.FormatUtils.calculateDigitCount : $b6 = l0 cmp 10L >>>>>>>> org.joda.time.format.FormatUtils.calculateDigitCount : if $b6 >= 0
org.joda.time.format.FormatUtils.calculateDigitCount : if $b6 >= 0 >>>>>>>> org.joda.time.format.FormatUtils.calculateDigitCount : $i7 = 1
org.joda.time.format.FormatUtils.calculateDigitCount : $i7 = 1 >>>>>>>> org.joda.time.format.FormatUtils.calculateDigitCount : goto [?= return $i7]
org.joda.time.format.FormatUtils.calculateDigitCount : goto [?= return $i7] >>>>>>>> org.joda.time.format.FormatUtils.calculateDigitCount : return $i7
org.joda.time.format.FormatUtils.calculateDigitCount : return $i7 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $i5 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iMinPrintedDigits>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $i5 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iMinPrintedDigits> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : i1 = staticinvoke <java.lang.Math: int max(int,int)>($i4, $i5)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : i1 = staticinvoke <java.lang.Math: int max(int,int)>($i4, $i5) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $i6 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $i6 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : if $i6 < 8
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : if $i6 < 8 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : i2 = (int) l0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : i2 = (int) l0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $r3 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iPrefix>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $r3 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iPrefix> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : if $r3 == null
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : if $r3 == null >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $r5 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iSuffix>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $r5 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iSuffix> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : if $r5 == null
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : if $r5 == null >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : return i1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : return i1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : i0 = i0 + $i2
org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : i0 = i0 + $i2 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : goto [?= i1 = i1 + -1]
org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : goto [?= i1 = i1 + -1] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Literal.calculatePrintedLength : $r3 = r0.<org.joda.time.format.PeriodFormatterBuilder$Literal: java.lang.String iText>
org.joda.time.format.PeriodFormatterBuilder$Literal.calculatePrintedLength : $r3 = r0.<org.joda.time.format.PeriodFormatterBuilder$Literal: java.lang.String iText> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Literal.calculatePrintedLength : $i0 = virtualinvoke $r3.<java.lang.String: int length()>()
org.joda.time.format.PeriodFormatterBuilder$Literal.calculatePrintedLength : $i0 = virtualinvoke $r3.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Literal.calculatePrintedLength : return $i0
org.joda.time.format.PeriodFormatterBuilder$Literal.calculatePrintedLength : return $i0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $r4 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $r4 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>() >>>>>>>> org.joda.time.DurationFieldType.weeks : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType WEEKS_TYPE>
org.joda.time.DurationFieldType.weeks : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType WEEKS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.weeks : return $r0
org.joda.time.DurationFieldType.weeks : return $r0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $z2 = virtualinvoke r1.<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>($r4)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $z2 = virtualinvoke r1.<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>($r4) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : return $z2
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : return $z2 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r5 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r5 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i8 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r5)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i8 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r5) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : l0 = (long) $i8
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : l0 = (long) $i8 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $r3 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $r3 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>() >>>>>>>> org.joda.time.DurationFieldType.months : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MONTHS_TYPE>
org.joda.time.DurationFieldType.months : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MONTHS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.months : return $r0
org.joda.time.DurationFieldType.months : return $r0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $z1 = virtualinvoke r1.<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>($r3)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $z1 = virtualinvoke r1.<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>($r3) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : return $z1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : return $z1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r4 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r4 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i7 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r4)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i7 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r4) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : l0 = (long) $i7
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : l0 = (long) $i7 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>() >>>>>>>> org.joda.time.DurationFieldType.years : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType YEARS_TYPE>
org.joda.time.DurationFieldType.years : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType YEARS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.years : return $r0
org.joda.time.DurationFieldType.years : return $r0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $z0 = virtualinvoke r1.<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>($r2)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $z0 = virtualinvoke r1.<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>($r2) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : return $z0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : return $z0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r3 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r3 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i6 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r3)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i6 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r3) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : l0 = (long) $i6
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : l0 = (long) $i6 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : return i0
org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : return i0 >>>>>>>> org.joda.time.format.PeriodFormatter.print : specialinvoke $r4.<java.lang.StringBuffer: void <init>(int)>($i0)
org.joda.time.format.PeriodFormatter.print : specialinvoke $r4.<java.lang.StringBuffer: void <init>(int)>($i0) >>>>>>>> org.joda.time.format.PeriodFormatter.print : r3 = $r4
org.joda.time.format.PeriodFormatter.print : r3 = $r4 >>>>>>>> org.joda.time.format.PeriodFormatter.print : $r6 = r0.<org.joda.time.format.PeriodFormatter: java.util.Locale iLocale>
org.joda.time.format.PeriodFormatter.print : $r6 = r0.<org.joda.time.format.PeriodFormatter: java.util.Locale iLocale> >>>>>>>> org.joda.time.format.PeriodFormatter.print : interfaceinvoke r2.<org.joda.time.format.PeriodPrinter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>(r3, r1, $r6)
org.joda.time.format.PeriodFormatter.print : interfaceinvoke r2.<org.joda.time.format.PeriodPrinter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>(r3, r1, $r6) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$Composite: org.joda.time.format.PeriodPrinter[] iPrinters>
org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$Composite: org.joda.time.format.PeriodPrinter[] iPrinters> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : i0 = lengthof r4
org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : i0 = lengthof r4 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : i1 = 0
org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : i1 = 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : if i1 >= i0
org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : if i1 >= i0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : $r5 = r4[i1]
org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : $r5 = r4[i1] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : interfaceinvoke $r5.<org.joda.time.format.PeriodPrinter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>(r1, r2, r3)
org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : interfaceinvoke $r5.<org.joda.time.format.PeriodPrinter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>(r1, r2, r3) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : l0 = virtualinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>(r2)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : l0 = virtualinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>(r2) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $b4 = l0 cmp 9223372036854775807L
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $b4 = l0 cmp 9223372036854775807L >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : if $b4 != 0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : if $b4 != 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : i1 = (int) l0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : i1 = (int) l0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $i5 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $i5 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : if $i5 < 8
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : if $i5 < 8 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iPrefix>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iPrefix> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : if $r4 == null
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : if $r4 == null >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : i2 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iMinPrintedDigits>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : i2 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iMinPrintedDigits> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : if i2 > 1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : if i2 > 1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : staticinvoke <org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.StringBuffer,int)>(r1, i1)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : staticinvoke <org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.StringBuffer,int)>(r1, i1) >>>>>>>> org.joda.time.format.FormatUtils.appendUnpaddedInteger : if i0 >= 0
org.joda.time.format.FormatUtils.appendUnpaddedInteger : if i0 >= 0 >>>>>>>> org.joda.time.format.FormatUtils.appendUnpaddedInteger : if i0 >= 10
org.joda.time.format.FormatUtils.appendUnpaddedInteger : if i0 >= 10 >>>>>>>> org.joda.time.format.FormatUtils.appendUnpaddedInteger : $i2 = i0 + 48
org.joda.time.format.FormatUtils.appendUnpaddedInteger : $i2 = i0 + 48 >>>>>>>> org.joda.time.format.FormatUtils.appendUnpaddedInteger : $c3 = (char) $i2
org.joda.time.format.FormatUtils.appendUnpaddedInteger : $c3 = (char) $i2 >>>>>>>> org.joda.time.format.FormatUtils.appendUnpaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c3)
org.joda.time.format.FormatUtils.appendUnpaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c3) >>>>>>>> org.joda.time.format.FormatUtils.appendUnpaddedInteger : goto [?= return]
org.joda.time.format.FormatUtils.appendUnpaddedInteger : goto [?= return] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : goto [?= $i7 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType>]
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : goto [?= $i7 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType>] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $i7 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $i7 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : if $i7 < 8
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : if $i7 < 8 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $r7 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iSuffix>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $r7 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iSuffix> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : if $r7 == null
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : if $r7 == null >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : i1 = i1 + 1
org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : i1 = i1 + 1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : goto [?= (branch)]
org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : goto [?= (branch)] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Literal.printTo : $r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$Literal: java.lang.String iText>
org.joda.time.format.PeriodFormatterBuilder$Literal.printTo : $r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$Literal: java.lang.String iText> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Literal.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4)
org.joda.time.format.PeriodFormatterBuilder$Literal.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4) >>>>>>>> org.joda.time.format.PeriodFormatter.print : $r7 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>()
org.joda.time.format.PeriodFormatter.print : $r7 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> org.joda.time.format.PeriodFormatter.print : return $r7
org.joda.time.format.PeriodFormatter.print : return $r7 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : i1 = 0
org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : i1 = 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : r3 = r0.<org.joda.time.format.PeriodFormatterBuilder$Composite: org.joda.time.format.PeriodPrinter[] iPrinters>
org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : r3 = r0.<org.joda.time.format.PeriodFormatterBuilder$Composite: org.joda.time.format.PeriodPrinter[] iPrinters> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : i2 = lengthof r3
org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : i2 = lengthof r3 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : if i1 >= i0
org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : if i1 >= i0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : i2 = i2 + -1
org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : i2 = i2 + -1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : if i2 < 0
org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : if i2 < 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : $r4 = r3[i2]
org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : $r4 = r3[i2] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : $i3 = interfaceinvoke $r4.<org.joda.time.format.PeriodPrinter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>(r1, 2147483647, r2)
org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : $i3 = interfaceinvoke $r4.<org.joda.time.format.PeriodPrinter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>(r1, 2147483647, r2) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.countFieldsToPrint : if i0 > 0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.countFieldsToPrint : if i0 > 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.countFieldsToPrint : $i1 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iPrintZeroSetting>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.countFieldsToPrint : $i1 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iPrintZeroSetting> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.countFieldsToPrint : if $i1 == 4
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.countFieldsToPrint : if $i1 == 4 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.countFieldsToPrint : $l2 = virtualinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>(r1)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.countFieldsToPrint : $l2 = virtualinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>(r1) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.countFieldsToPrint : $b3 = $l2 cmp 9223372036854775807L
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.countFieldsToPrint : $b3 = $l2 cmp 9223372036854775807L >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.countFieldsToPrint : if $b3 == 0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.countFieldsToPrint : if $b3 == 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.countFieldsToPrint : return 1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.countFieldsToPrint : return 1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : i1 = i1 + $i3
org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : i1 = i1 + $i3 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : goto [?= (branch)]
org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : goto [?= (branch)] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Literal.countFieldsToPrint : return 0
org.joda.time.format.PeriodFormatterBuilder$Literal.countFieldsToPrint : return 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : return i1
org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : return i1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i18 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iPrintZeroSetting>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i18 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iPrintZeroSetting> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : tableswitch($i18) {     case 1:
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : tableswitch($i18) {     case 1: >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $z1 = virtualinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isZero(org.joda.time.ReadablePeriod)>(r1)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $z1 = virtualinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isZero(org.joda.time.ReadablePeriod)>(r1) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isZero : i0 = 0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isZero : i0 = 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isZero : i1 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int size()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isZero : i1 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int size()>() >>>>>>>> org.joda.time.base.AbstractPeriod.size : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.base.AbstractPeriod.size : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.base.AbstractPeriod.size : $i0 = virtualinvoke $r1.<org.joda.time.PeriodType: int size()>()
org.joda.time.base.AbstractPeriod.size : $i0 = virtualinvoke $r1.<org.joda.time.PeriodType: int size()>() >>>>>>>> org.joda.time.base.AbstractPeriod.size : return $i0
org.joda.time.base.AbstractPeriod.size : return $i0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isZero : if i0 >= i1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isZero : if i0 >= i1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isZero : $i2 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int getValue(int)>(i0)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isZero : $i2 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int getValue(int)>(i0) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isZero : if $i2 == 0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isZero : if $i2 == 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isZero : i0 = i0 + 1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isZero : i0 = i0 + 1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isZero : goto [?= (branch)]
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isZero : goto [?= (branch)] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isZero : return 1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isZero : return 1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : if $z1 == 0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : if $z1 == 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r13 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[] iFieldFormatters>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r13 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[] iFieldFormatters> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i19 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i19 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r14 = $r13[$i19]
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r14 = $r13[$i19] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : if $r14 != r0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : if $r14 != r0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i20 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i20 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : i21 = $i20 + 1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : i21 = $i20 + 1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : if i21 > 9
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : if i21 > 9 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $z2 = virtualinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>(r2, i21)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $z2 = virtualinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>(r2, i21) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $r6 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $r6 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>() >>>>>>>> org.joda.time.DurationFieldType.hours : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType HOURS_TYPE>
org.joda.time.DurationFieldType.hours : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType HOURS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.hours : return $r0
org.joda.time.DurationFieldType.hours : return $r0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $z4 = virtualinvoke r1.<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>($r6)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $z4 = virtualinvoke r1.<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>($r6) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : return $z4
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : return $z4 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : if $z2 == 0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : if $z2 == 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r15 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[] iFieldFormatters>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r15 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$FieldFormatter[] iFieldFormatters> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r16 = $r15[i21]
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r16 = $r15[i21] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : if $r16 == null
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : if $r16 == null >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : i21 = i21 + 1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : i21 = i21 + 1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : goto [?= (branch)]
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : goto [?= (branch)] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $r7 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $r7 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>() >>>>>>>> org.joda.time.DurationFieldType.minutes : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MINUTES_TYPE>
org.joda.time.DurationFieldType.minutes : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MINUTES_TYPE> >>>>>>>> org.joda.time.DurationFieldType.minutes : return $r0
org.joda.time.DurationFieldType.minutes : return $r0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $z5 = virtualinvoke r1.<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>($r7)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $z5 = virtualinvoke r1.<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>($r7) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : return $z5
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : return $z5 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $r8 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $r8 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>() >>>>>>>> org.joda.time.DurationFieldType.seconds : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType SECONDS_TYPE>
org.joda.time.DurationFieldType.seconds : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType SECONDS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.seconds : return $r0
org.joda.time.DurationFieldType.seconds : return $r0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $z6 = virtualinvoke r1.<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>($r8)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $z6 = virtualinvoke r1.<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>($r8) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : return $z6
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : return $z6 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $r9 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $r9 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>() >>>>>>>> org.joda.time.DurationFieldType.millis : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MILLIS_TYPE>
org.joda.time.DurationFieldType.millis : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MILLIS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.millis : return $r0
org.joda.time.DurationFieldType.millis : return $r0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $z7 = virtualinvoke r1.<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>($r9)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $z7 = virtualinvoke r1.<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>($r9) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : return $z7
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : return $z7 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $r10 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $r10 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $z8 = virtualinvoke r1.<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>($r10)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $z8 = virtualinvoke r1.<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>($r10) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : if $z8 != 0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : if $z8 != 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $z10 = 1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $z10 = 1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : goto [?= return $z10]
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : goto [?= return $z10] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : return $z10
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : return $z10 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : goto [?= return l0]
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : goto [?= return l0] >>>>>>>> org.joda.time.PeriodType.indexOf : return -1
org.joda.time.PeriodType.indexOf : return -1 >>>>>>>> org.joda.time.PeriodType.isSupported : $z0 = 0
org.joda.time.PeriodType.isSupported : $z0 = 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : return 9223372036854775807L
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : return 9223372036854775807L >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : return 0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : return 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.countFieldsToPrint : return 0
