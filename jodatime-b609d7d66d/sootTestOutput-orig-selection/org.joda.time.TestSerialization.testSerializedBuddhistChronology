org.joda.time.DateTimeUtils.setCurrentMillisSystem : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>() >>>>>>>> org.joda.time.DateTimeUtils.checkPermission : r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>()
org.joda.time.DateTimeUtils.checkPermission : r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>() >>>>>>>> org.joda.time.DateTimeUtils.checkPermission : if r0 == null
org.joda.time.DateTimeUtils.checkPermission : if r0 == null >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisSystem : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$SystemMillisProvider SYSTEM_MILLIS_PROVIDER>
org.joda.time.DateTimeUtils.setCurrentMillisSystem : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$SystemMillisProvider SYSTEM_MILLIS_PROVIDER> >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisSystem : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0
org.joda.time.DateTimeUtils.setCurrentMillisSystem : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0 >>>>>>>> org.joda.time.DateTimeZone.setDefault : r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>()
org.joda.time.DateTimeZone.setDefault : r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>() >>>>>>>> org.joda.time.DateTimeZone.setDefault : if r1 == null
org.joda.time.DateTimeZone.setDefault : if r1 == null >>>>>>>> org.joda.time.DateTimeZone.setDefault : if r0 != null
org.joda.time.DateTimeZone.setDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.setDefault : $r6 = class "org/joda/time/DateTimeZone"
org.joda.time.DateTimeZone.setDefault : $r6 = class "org/joda/time/DateTimeZone" >>>>>>>> org.joda.time.DateTimeZone.setDefault : r3 = $r6
org.joda.time.DateTimeZone.setDefault : r3 = $r6 >>>>>>>> org.joda.time.DateTimeZone.setDefault : entermonitor $r6
org.joda.time.DateTimeZone.setDefault : entermonitor $r6 >>>>>>>> org.joda.time.DateTimeZone.setDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r0
org.joda.time.DateTimeZone.setDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r0 >>>>>>>> org.joda.time.DateTimeZone.setDefault : exitmonitor r3
org.joda.time.DateTimeZone.setDefault : exitmonitor r3 >>>>>>>> org.joda.time.DateTimeZone.setDefault : goto [?= return]
org.joda.time.DateTimeZone.setDefault : goto [?= return] >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>()
org.joda.time.DateTimeUtils.setCurrentMillisFixed : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>() >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : $r0 = new org.joda.time.DateTimeUtils$FixedMillisProvider
org.joda.time.DateTimeUtils.setCurrentMillisFixed : $r0 = new org.joda.time.DateTimeUtils$FixedMillisProvider >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : specialinvoke $r0.<org.joda.time.DateTimeUtils$FixedMillisProvider: void <init>(long)>(l0)
org.joda.time.DateTimeUtils.setCurrentMillisFixed : specialinvoke $r0.<org.joda.time.DateTimeUtils$FixedMillisProvider: void <init>(long)>(l0) >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0
org.joda.time.DateTimeUtils.setCurrentMillisFixed : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0 >>>>>>>> org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> >>>>>>>> org.joda.time.DateTimeZone.getDefault : if r0 != null
org.joda.time.DateTimeZone.getDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.DateTimeZone.getDefault : return r0 >>>>>>>> org.joda.time.chrono.BuddhistChronology.getInstance : if r0 != null
org.joda.time.chrono.BuddhistChronology.getInstance : if r0 != null >>>>>>>> org.joda.time.chrono.BuddhistChronology.getInstance : $r3 = <org.joda.time.chrono.BuddhistChronology: java.util.Map cCache>
org.joda.time.chrono.BuddhistChronology.getInstance : $r3 = <org.joda.time.chrono.BuddhistChronology: java.util.Map cCache> >>>>>>>> org.joda.time.chrono.BuddhistChronology.getInstance : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0)
org.joda.time.chrono.BuddhistChronology.getInstance : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> org.joda.time.tz.CachedDateTimeZone.hashCode : $r1 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone>
org.joda.time.tz.CachedDateTimeZone.hashCode : $r1 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.tz.CachedDateTimeZone.hashCode : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeZone: int hashCode()>()
org.joda.time.tz.CachedDateTimeZone.hashCode : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeZone: int hashCode()>() >>>>>>>> org.joda.time.DateTimeZone.hashCode : $r1 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getID()>()
org.joda.time.DateTimeZone.hashCode : $r1 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getID()>() >>>>>>>> org.joda.time.DateTimeZone.getID : $r1 = r0.<org.joda.time.DateTimeZone: java.lang.String iID>
org.joda.time.DateTimeZone.getID : $r1 = r0.<org.joda.time.DateTimeZone: java.lang.String iID> >>>>>>>> org.joda.time.DateTimeZone.getID : return $r1
org.joda.time.DateTimeZone.getID : return $r1 >>>>>>>> org.joda.time.DateTimeZone.hashCode : $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>()
org.joda.time.DateTimeZone.hashCode : $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>() >>>>>>>> org.joda.time.DateTimeZone.hashCode : $i1 = 57 + $i0
org.joda.time.DateTimeZone.hashCode : $i1 = 57 + $i0 >>>>>>>> org.joda.time.DateTimeZone.hashCode : return $i1
org.joda.time.DateTimeZone.hashCode : return $i1 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.hashCode : return $i0
org.joda.time.tz.CachedDateTimeZone.hashCode : return $i0 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.equals : if r0 != r1
org.joda.time.tz.CachedDateTimeZone.equals : if r0 != r1 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.equals : $z0 = r1 instanceof org.joda.time.tz.CachedDateTimeZone
org.joda.time.tz.CachedDateTimeZone.equals : $z0 = r1 instanceof org.joda.time.tz.CachedDateTimeZone >>>>>>>> org.joda.time.tz.CachedDateTimeZone.equals : if $z0 == 0
org.joda.time.tz.CachedDateTimeZone.equals : if $z0 == 0 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.equals : $r2 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone>
org.joda.time.tz.CachedDateTimeZone.equals : $r2 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.tz.CachedDateTimeZone.equals : $r3 = (org.joda.time.tz.CachedDateTimeZone) r1
org.joda.time.tz.CachedDateTimeZone.equals : $r3 = (org.joda.time.tz.CachedDateTimeZone) r1 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.equals : $r4 = $r3.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone>
org.joda.time.tz.CachedDateTimeZone.equals : $r4 = $r3.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.tz.CachedDateTimeZone.equals : $z1 = virtualinvoke $r2.<org.joda.time.DateTimeZone: boolean equals(java.lang.Object)>($r4)
org.joda.time.tz.CachedDateTimeZone.equals : $z1 = virtualinvoke $r2.<org.joda.time.DateTimeZone: boolean equals(java.lang.Object)>($r4) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if r0 != r1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if r0 != r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z0 = r1 instanceof org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z0 = r1 instanceof org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if $z0 == 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if $z0 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : r2 = (org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone) r1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : r2 = (org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone) r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r3 = virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getID()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r3 = virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getID()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r4 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getID()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r4 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getID()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if $z1 == 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if $z1 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r6 = r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r6 = r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z2 = staticinvoke <java.util.Arrays: boolean equals(long[],long[])>($r5, $r6)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z2 = staticinvoke <java.util.Arrays: boolean equals(long[],long[])>($r5, $r6) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if $z2 == 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if $z2 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r7 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String[] iNameKeys>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r7 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String[] iNameKeys> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r8 = r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String[] iNameKeys>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r8 = r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String[] iNameKeys> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z3 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r7, $r8)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z3 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r7, $r8) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if $z3 == 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if $z3 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r9 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iWallOffsets>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r9 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iWallOffsets> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r10 = r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iWallOffsets>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r10 = r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iWallOffsets> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z4 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r9, $r10)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z4 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r9, $r10) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if $z4 == 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if $z4 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r11 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iStandardOffsets>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r11 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iStandardOffsets> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r12 = r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iStandardOffsets>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r12 = r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iStandardOffsets> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z5 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r11, $r12)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z5 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r11, $r12) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if $z5 == 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if $z5 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r13 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r13 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if $r13 != null
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if $r13 != null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r15 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r15 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r16 = r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r16 = r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z6 = virtualinvoke $r15.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)>($r16)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z6 = virtualinvoke $r15.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)>($r16) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : if r0 != r1
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : if r0 != r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $z0 = r1 instanceof org.joda.time.tz.DateTimeZoneBuilder$DSTZone
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $z0 = r1 instanceof org.joda.time.tz.DateTimeZoneBuilder$DSTZone >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : if $z0 == 0
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : if $z0 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : r2 = (org.joda.time.tz.DateTimeZoneBuilder$DSTZone) r1
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : r2 = (org.joda.time.tz.DateTimeZoneBuilder$DSTZone) r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $r3 = virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getID()>()
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $r3 = virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getID()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $r4 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getID()>()
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $r4 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getID()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4)
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : if $z1 == 0
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : if $z1 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset>
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $i1 = r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset>
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $i1 = r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : if $i0 != $i1
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : if $i0 != $i1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $r5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence>
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $r5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $r6 = r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence>
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $r6 = r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $z2 = virtualinvoke $r5.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: boolean equals(java.lang.Object)>($r6)
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $z2 = virtualinvoke $r5.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: boolean equals(java.lang.Object)>($r6) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : if r0 != r1
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : if r0 != r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $z0 = r1 instanceof org.joda.time.tz.DateTimeZoneBuilder$Recurrence
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $z0 = r1 instanceof org.joda.time.tz.DateTimeZoneBuilder$Recurrence >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : if $z0 == 0
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : if $z0 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : r2 = (org.joda.time.tz.DateTimeZoneBuilder$Recurrence) r1
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : r2 = (org.joda.time.tz.DateTimeZoneBuilder$Recurrence) r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int iSaveMillis>
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int iSaveMillis> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $i1 = r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int iSaveMillis>
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $i1 = r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int iSaveMillis> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : if $i0 != $i1
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : if $i0 != $i1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String iNameKey>
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String iNameKey> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $r4 = r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String iNameKey>
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $r4 = r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String iNameKey> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4)
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : if $z1 == 0
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : if $z1 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $r5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$OfYear iOfYear>
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $r5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$OfYear iOfYear> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $r6 = r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$OfYear iOfYear>
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $r6 = r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$OfYear iOfYear> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $z2 = virtualinvoke $r5.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: boolean equals(java.lang.Object)>($r6)
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $z2 = virtualinvoke $r5.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: boolean equals(java.lang.Object)>($r6) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : if r0 != r1
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : if r0 != r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $z0 = r1 instanceof org.joda.time.tz.DateTimeZoneBuilder$OfYear
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $z0 = r1 instanceof org.joda.time.tz.DateTimeZoneBuilder$OfYear >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : if $z0 == 0
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : if $z0 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : r2 = (org.joda.time.tz.DateTimeZoneBuilder$OfYear) r1
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : r2 = (org.joda.time.tz.DateTimeZoneBuilder$OfYear) r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $c0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $c0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $c1 = r2.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $c1 = r2.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : if $c0 != $c1
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : if $c0 != $c1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $i2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMonthOfYear>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $i2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMonthOfYear> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $i3 = r2.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMonthOfYear>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $i3 = r2.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMonthOfYear> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : if $i2 != $i3
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : if $i2 != $i3 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $i4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfMonth>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $i4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfMonth> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $i5 = r2.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfMonth>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $i5 = r2.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfMonth> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : if $i4 != $i5
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : if $i4 != $i5 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $i6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfWeek>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $i6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfWeek> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $i7 = r2.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfWeek>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $i7 = r2.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfWeek> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : if $i6 != $i7
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : if $i6 != $i7 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $z1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: boolean iAdvance>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $z1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: boolean iAdvance> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $z2 = r2.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: boolean iAdvance>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $z2 = r2.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: boolean iAdvance> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : if $z1 != $z2
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : if $z1 != $z2 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $i8 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMillisOfDay>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $i8 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMillisOfDay> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $i9 = r2.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMillisOfDay>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $i9 = r2.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMillisOfDay> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : if $i8 != $i9
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : if $i8 != $i9 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $z3 = 1
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $z3 = 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : goto [?= return $z3]
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : goto [?= return $z3] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : return $z3
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : return $z3 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : if $z2 == 0
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : if $z2 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $z3 = 1
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $z3 = 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : goto [?= return $z3]
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : goto [?= return $z3] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : return $z3
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : return $z3 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : if $z2 == 0
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : if $z2 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $r7 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence>
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $r7 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $r8 = r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence>
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $r8 = r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $z3 = virtualinvoke $r7.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: boolean equals(java.lang.Object)>($r8)
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $z3 = virtualinvoke $r7.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: boolean equals(java.lang.Object)>($r8) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : if $z3 == 0
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : if $z3 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $z4 = 1
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $z4 = 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : goto [?= return $z4]
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : goto [?= return $z4] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : return $z4
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : return $z4 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if $z6 == 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if $z6 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z7 = 1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z7 = 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : goto [?= return $z7]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : goto [?= return $z7] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : return $z7
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : return $z7 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.equals : return $z1
org.joda.time.tz.CachedDateTimeZone.equals : return $z1 >>>>>>>> org.joda.time.chrono.BuddhistChronology.getInstance : r1 = (org.joda.time.chrono.BuddhistChronology) $r4
org.joda.time.chrono.BuddhistChronology.getInstance : r1 = (org.joda.time.chrono.BuddhistChronology) $r4 >>>>>>>> org.joda.time.chrono.BuddhistChronology.getInstance : if r1 != null
org.joda.time.chrono.BuddhistChronology.getInstance : if r1 != null >>>>>>>> org.joda.time.chrono.BuddhistChronology.getInstance : return r1
org.joda.time.chrono.BuddhistChronology.getInstance : return r1 >>>>>>>> org.joda.time.chrono.AssembledChronology.readObject : virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>()
org.joda.time.chrono.AssembledChronology.readObject : virtualinvoke r1.<java.io.ObjectInputStream: void defaultReadObject()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.readObject : specialinvoke r0.<org.joda.time.chrono.AssembledChronology: void setFields()>()
org.joda.time.chrono.AssembledChronology.readObject : specialinvoke r0.<org.joda.time.chrono.AssembledChronology: void setFields()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r1 = new org.joda.time.chrono.AssembledChronology$Fields
org.joda.time.chrono.AssembledChronology.setFields : $r1 = new org.joda.time.chrono.AssembledChronology$Fields >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : specialinvoke $r1.<org.joda.time.chrono.AssembledChronology$Fields: void <init>()>()
org.joda.time.chrono.AssembledChronology.setFields : specialinvoke $r1.<org.joda.time.chrono.AssembledChronology$Fields: void <init>()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r2 = $r1
org.joda.time.chrono.AssembledChronology.setFields : r2 = $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r4 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.setFields : $r4 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r4 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r4 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : virtualinvoke r0.<org.joda.time.chrono.AssembledChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>(r2)
org.joda.time.chrono.AssembledChronology.setFields : virtualinvoke r0.<org.joda.time.chrono.AssembledChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>(r2) >>>>>>>> org.joda.time.chrono.JulianChronology.assemble : $r2 = virtualinvoke r0.<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.JulianChronology.assemble : $r2 = virtualinvoke r0.<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology getBase()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getBase : return $r1
org.joda.time.chrono.AssembledChronology.getBase : return $r1 >>>>>>>> org.joda.time.chrono.JulianChronology.assemble : if $r2 != null
org.joda.time.chrono.JulianChronology.assemble : if $r2 != null >>>>>>>> org.joda.time.chrono.JulianChronology.assemble : specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>(r1)
org.joda.time.chrono.JulianChronology.assemble : specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>(r1) >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : $r2 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cMillisField>
org.joda.time.chrono.BasicChronology.assemble : $r2 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cMillisField> >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField millis> = $r2
org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField millis> = $r2 >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : $r4 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cSecondsField>
org.joda.time.chrono.BasicChronology.assemble : $r4 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cSecondsField> >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField seconds> = $r4
org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField seconds> = $r4 >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : $r5 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cMinutesField>
org.joda.time.chrono.BasicChronology.assemble : $r5 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cMinutesField> >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField minutes> = $r5
org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField minutes> = $r5 >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : $r6 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cHoursField>
org.joda.time.chrono.BasicChronology.assemble : $r6 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cHoursField> >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField hours> = $r6
org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField hours> = $r6 >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : $r7 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cHalfdaysField>
org.joda.time.chrono.BasicChronology.assemble : $r7 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cHalfdaysField> >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField halfdays> = $r7
org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField halfdays> = $r7 >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : $r8 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cDaysField>
org.joda.time.chrono.BasicChronology.assemble : $r8 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cDaysField> >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days> = $r8
org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days> = $r8 >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : $r9 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cWeeksField>
org.joda.time.chrono.BasicChronology.assemble : $r9 = <org.joda.time.chrono.BasicChronology: org.joda.time.DurationField cWeeksField> >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weeks> = $r9
org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weeks> = $r9 >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : $r10 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cMillisOfSecondField>
org.joda.time.chrono.BasicChronology.assemble : $r10 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cMillisOfSecondField> >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond> = $r10
org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond> = $r10 >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : $r11 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cMillisOfDayField>
org.joda.time.chrono.BasicChronology.assemble : $r11 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cMillisOfDayField> >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay> = $r11
org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay> = $r11 >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : $r12 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cSecondOfMinuteField>
org.joda.time.chrono.BasicChronology.assemble : $r12 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cSecondOfMinuteField> >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute> = $r12
org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute> = $r12 >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : $r13 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cSecondOfDayField>
org.joda.time.chrono.BasicChronology.assemble : $r13 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cSecondOfDayField> >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay> = $r13
org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay> = $r13 >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : $r14 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cMinuteOfHourField>
org.joda.time.chrono.BasicChronology.assemble : $r14 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cMinuteOfHourField> >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour> = $r14
org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour> = $r14 >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : $r15 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cMinuteOfDayField>
org.joda.time.chrono.BasicChronology.assemble : $r15 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cMinuteOfDayField> >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay> = $r15
org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay> = $r15 >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : $r16 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cHourOfDayField>
org.joda.time.chrono.BasicChronology.assemble : $r16 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cHourOfDayField> >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay> = $r16
org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay> = $r16 >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : $r17 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cHourOfHalfdayField>
org.joda.time.chrono.BasicChronology.assemble : $r17 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cHourOfHalfdayField> >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday> = $r17
org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday> = $r17 >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : $r18 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cClockhourOfDayField>
org.joda.time.chrono.BasicChronology.assemble : $r18 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cClockhourOfDayField> >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay> = $r18
org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay> = $r18 >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : $r19 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cClockhourOfHalfdayField>
org.joda.time.chrono.BasicChronology.assemble : $r19 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cClockhourOfHalfdayField> >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday> = $r19
org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday> = $r19 >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : $r20 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cHalfdayOfDayField>
org.joda.time.chrono.BasicChronology.assemble : $r20 = <org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField cHalfdayOfDayField> >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay> = $r20
org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay> = $r20 >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : $r21 = new org.joda.time.chrono.BasicYearDateTimeField
org.joda.time.chrono.BasicChronology.assemble : $r21 = new org.joda.time.chrono.BasicYearDateTimeField >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : specialinvoke $r21.<org.joda.time.chrono.BasicYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>(r0)
org.joda.time.chrono.BasicChronology.assemble : specialinvoke $r21.<org.joda.time.chrono.BasicYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>(r0) >>>>>>>> org.joda.time.DateTimeFieldType.year : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType YEAR_TYPE>
org.joda.time.DateTimeFieldType.year : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType YEAR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.year : return $r0
org.joda.time.DateTimeFieldType.year : return $r0 >>>>>>>> org.joda.time.chrono.JulianChronology.getAverageMillisPerYear : return 31557600000L
org.joda.time.chrono.JulianChronology.getAverageMillisPerYear : return 31557600000L >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getDurationType : $r1 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DurationFieldType iUnitType>
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getDurationType : $r1 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DurationFieldType iUnitType> >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getDurationType : return $r1
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getDurationType : return $r1 >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> = $r21
org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> = $r21 >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : $r22 = new org.joda.time.chrono.GJYearOfEraDateTimeField
org.joda.time.chrono.BasicChronology.assemble : $r22 = new org.joda.time.chrono.GJYearOfEraDateTimeField >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : $r23 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year>
org.joda.time.chrono.BasicChronology.assemble : $r23 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : specialinvoke $r22.<org.joda.time.chrono.GJYearOfEraDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.chrono.BasicChronology)>($r23, r0)
org.joda.time.chrono.BasicChronology.assemble : specialinvoke $r22.<org.joda.time.chrono.GJYearOfEraDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.chrono.BasicChronology)>($r23, r0) >>>>>>>> org.joda.time.DateTimeFieldType.yearOfEra : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType YEAR_OF_ERA_TYPE>
org.joda.time.DateTimeFieldType.yearOfEra : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType YEAR_OF_ERA_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.yearOfEra : return $r0
org.joda.time.DateTimeFieldType.yearOfEra : return $r0 >>>>>>>> org.joda.time.field.BaseDateTimeField.isSupported : return 1
org.joda.time.field.BaseDateTimeField.isSupported : return 1 >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> = $r22
org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> = $r22 >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : $r24 = new org.joda.time.field.OffsetDateTimeField
org.joda.time.chrono.BasicChronology.assemble : $r24 = new org.joda.time.field.OffsetDateTimeField >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : $r25 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra>
org.joda.time.chrono.BasicChronology.assemble : $r25 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : specialinvoke $r24.<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,int)>($r25, 99)
org.joda.time.chrono.BasicChronology.assemble : specialinvoke $r24.<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,int)>($r25, 99) >>>>>>>> org.joda.time.field.BaseDateTimeField.getType : $r1 = r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType iType>
org.joda.time.field.BaseDateTimeField.getType : $r1 = r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType iType> >>>>>>>> org.joda.time.field.BaseDateTimeField.getType : return $r1
org.joda.time.field.BaseDateTimeField.getType : return $r1 >>>>>>>> org.joda.time.chrono.GJYearOfEraDateTimeField.getMinimumValue : return 1
org.joda.time.chrono.GJYearOfEraDateTimeField.getMinimumValue : return 1 >>>>>>>> org.joda.time.chrono.GJYearOfEraDateTimeField.getMaximumValue : $r1 = virtualinvoke r0.<org.joda.time.chrono.GJYearOfEraDateTimeField: org.joda.time.DateTimeField getWrappedField()>()
org.joda.time.chrono.GJYearOfEraDateTimeField.getMaximumValue : $r1 = virtualinvoke r0.<org.joda.time.chrono.GJYearOfEraDateTimeField: org.joda.time.DateTimeField getWrappedField()>() >>>>>>>> org.joda.time.field.DecoratedDateTimeField.getWrappedField : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DecoratedDateTimeField.getWrappedField : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.field.DecoratedDateTimeField.getWrappedField : return $r1
org.joda.time.field.DecoratedDateTimeField.getWrappedField : return $r1 >>>>>>>> org.joda.time.chrono.GJYearOfEraDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMaximumValue()>()
org.joda.time.chrono.GJYearOfEraDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMaxYear()>()
org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMaxYear()>() >>>>>>>> org.joda.time.chrono.JulianChronology.getMaxYear : return 292272992
org.joda.time.chrono.JulianChronology.getMaxYear : return 292272992 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : return $i0
org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : return $i0 >>>>>>>> org.joda.time.chrono.GJYearOfEraDateTimeField.getMaximumValue : return $i0
org.joda.time.chrono.GJYearOfEraDateTimeField.getMaximumValue : return $i0 >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : r3 = $r24
org.joda.time.chrono.BasicChronology.assemble : r3 = $r24 >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : $r26 = new org.joda.time.field.DividedDateTimeField
org.joda.time.chrono.BasicChronology.assemble : $r26 = new org.joda.time.field.DividedDateTimeField >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : $r27 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType centuryOfEra()>()
org.joda.time.chrono.BasicChronology.assemble : $r27 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType centuryOfEra()>() >>>>>>>> org.joda.time.DateTimeFieldType.centuryOfEra : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType CENTURY_OF_ERA_TYPE>
org.joda.time.DateTimeFieldType.centuryOfEra : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType CENTURY_OF_ERA_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.centuryOfEra : return $r0
org.joda.time.DateTimeFieldType.centuryOfEra : return $r0 >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : specialinvoke $r26.<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>(r3, $r27, 100)
org.joda.time.chrono.BasicChronology.assemble : specialinvoke $r26.<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>(r3, $r27, 100) >>>>>>>> org.joda.time.field.DecoratedDateTimeField.getDurationField : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DecoratedDateTimeField.getDurationField : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.field.DecoratedDateTimeField.getDurationField : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>()
org.joda.time.field.DecoratedDateTimeField.getDurationField : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>() >>>>>>>> org.joda.time.field.ImpreciseDateTimeField.getDurationField : $r1 = r0.<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField iDurationField>
org.joda.time.field.ImpreciseDateTimeField.getDurationField : $r1 = r0.<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField iDurationField> >>>>>>>> org.joda.time.field.ImpreciseDateTimeField.getDurationField : return $r1
org.joda.time.field.ImpreciseDateTimeField.getDurationField : return $r1 >>>>>>>> org.joda.time.field.DecoratedDateTimeField.getDurationField : return $r2
org.joda.time.field.DecoratedDateTimeField.getDurationField : return $r2 >>>>>>>> org.joda.time.field.BaseDurationField.isSupported : return 1
org.joda.time.field.BaseDurationField.isSupported : return 1 >>>>>>>> org.joda.time.field.OffsetDateTimeField.getMinimumValue : $i0 = r0.<org.joda.time.field.OffsetDateTimeField: int iMin>
org.joda.time.field.OffsetDateTimeField.getMinimumValue : $i0 = r0.<org.joda.time.field.OffsetDateTimeField: int iMin> >>>>>>>> org.joda.time.field.OffsetDateTimeField.getMinimumValue : return $i0
org.joda.time.field.OffsetDateTimeField.getMinimumValue : return $i0 >>>>>>>> org.joda.time.field.OffsetDateTimeField.getMaximumValue : $i0 = r0.<org.joda.time.field.OffsetDateTimeField: int iMax>
org.joda.time.field.OffsetDateTimeField.getMaximumValue : $i0 = r0.<org.joda.time.field.OffsetDateTimeField: int iMax> >>>>>>>> org.joda.time.field.OffsetDateTimeField.getMaximumValue : return $i0
org.joda.time.field.OffsetDateTimeField.getMaximumValue : return $i0 >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> = $r26
org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> = $r26 >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : $r28 = new org.joda.time.field.RemainderDateTimeField
org.joda.time.chrono.BasicChronology.assemble : $r28 = new org.joda.time.field.RemainderDateTimeField >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : $r29 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra>
org.joda.time.chrono.BasicChronology.assemble : $r29 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : $r30 = (org.joda.time.field.DividedDateTimeField) $r29
org.joda.time.chrono.BasicChronology.assemble : $r30 = (org.joda.time.field.DividedDateTimeField) $r29 >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : specialinvoke $r28.<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField)>($r30)
org.joda.time.chrono.BasicChronology.assemble : specialinvoke $r28.<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField)>($r30) >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : r31 = $r28
org.joda.time.chrono.BasicChronology.assemble : r31 = $r28 >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : $r32 = new org.joda.time.field.OffsetDateTimeField
org.joda.time.chrono.BasicChronology.assemble : $r32 = new org.joda.time.field.OffsetDateTimeField >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : $r33 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfCentury()>()
org.joda.time.chrono.BasicChronology.assemble : $r33 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfCentury()>() >>>>>>>> org.joda.time.DateTimeFieldType.yearOfCentury : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType YEAR_OF_CENTURY_TYPE>
org.joda.time.DateTimeFieldType.yearOfCentury : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType YEAR_OF_CENTURY_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.yearOfCentury : return $r0
org.joda.time.DateTimeFieldType.yearOfCentury : return $r0 >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : specialinvoke $r32.<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>(r31, $r33, 1)
org.joda.time.chrono.BasicChronology.assemble : specialinvoke $r32.<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>(r31, $r33, 1) >>>>>>>> org.joda.time.field.RemainderDateTimeField.getMinimumValue : return 0
org.joda.time.field.RemainderDateTimeField.getMinimumValue : return 0 >>>>>>>> org.joda.time.field.RemainderDateTimeField.getMaximumValue : $i0 = r0.<org.joda.time.field.RemainderDateTimeField: int iDivisor>
org.joda.time.field.RemainderDateTimeField.getMaximumValue : $i0 = r0.<org.joda.time.field.RemainderDateTimeField: int iDivisor> >>>>>>>> org.joda.time.field.RemainderDateTimeField.getMaximumValue : $i1 = $i0 - 1
org.joda.time.field.RemainderDateTimeField.getMaximumValue : $i1 = $i0 - 1 >>>>>>>> org.joda.time.field.RemainderDateTimeField.getMaximumValue : return $i1
org.joda.time.field.RemainderDateTimeField.getMaximumValue : return $i1 >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> = $r32
org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> = $r32 >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : $r34 = new org.joda.time.chrono.GJEraDateTimeField
org.joda.time.chrono.BasicChronology.assemble : $r34 = new org.joda.time.chrono.GJEraDateTimeField >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : specialinvoke $r34.<org.joda.time.chrono.GJEraDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>(r0)
org.joda.time.chrono.BasicChronology.assemble : specialinvoke $r34.<org.joda.time.chrono.GJEraDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>(r0) >>>>>>>> org.joda.time.DateTimeFieldType.era : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType ERA_TYPE>
org.joda.time.DateTimeFieldType.era : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType ERA_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.era : return $r0
org.joda.time.DateTimeFieldType.era : return $r0 >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> = $r34
org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> = $r34 >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : $r35 = new org.joda.time.chrono.GJDayOfWeekDateTimeField
org.joda.time.chrono.BasicChronology.assemble : $r35 = new org.joda.time.chrono.GJDayOfWeekDateTimeField >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : $r36 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days>
org.joda.time.chrono.BasicChronology.assemble : $r36 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days> >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : specialinvoke $r35.<org.joda.time.chrono.GJDayOfWeekDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>(r0, $r36)
org.joda.time.chrono.BasicChronology.assemble : specialinvoke $r35.<org.joda.time.chrono.GJDayOfWeekDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>(r0, $r36) >>>>>>>> org.joda.time.DateTimeFieldType.dayOfWeek : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType DAY_OF_WEEK_TYPE>
org.joda.time.DateTimeFieldType.dayOfWeek : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType DAY_OF_WEEK_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.dayOfWeek : return $r0
org.joda.time.DateTimeFieldType.dayOfWeek : return $r0 >>>>>>>> org.joda.time.field.PreciseDurationField.isPrecise : return 1
org.joda.time.field.PreciseDurationField.isPrecise : return 1 >>>>>>>> org.joda.time.field.PreciseDurationField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis>
org.joda.time.field.PreciseDurationField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationField.getUnitMillis : return $l0
org.joda.time.field.PreciseDurationField.getUnitMillis : return $l0 >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek> = $r35
org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek> = $r35 >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : $r37 = new org.joda.time.chrono.BasicDayOfMonthDateTimeField
org.joda.time.chrono.BasicChronology.assemble : $r37 = new org.joda.time.chrono.BasicDayOfMonthDateTimeField >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : $r38 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days>
org.joda.time.chrono.BasicChronology.assemble : $r38 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days> >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : specialinvoke $r37.<org.joda.time.chrono.BasicDayOfMonthDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>(r0, $r38)
org.joda.time.chrono.BasicChronology.assemble : specialinvoke $r37.<org.joda.time.chrono.BasicDayOfMonthDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>(r0, $r38) >>>>>>>> org.joda.time.DateTimeFieldType.dayOfMonth : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType DAY_OF_MONTH_TYPE>
org.joda.time.DateTimeFieldType.dayOfMonth : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType DAY_OF_MONTH_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.dayOfMonth : return $r0
org.joda.time.DateTimeFieldType.dayOfMonth : return $r0 >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth> = $r37
org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth> = $r37 >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : $r39 = new org.joda.time.chrono.BasicDayOfYearDateTimeField
org.joda.time.chrono.BasicChronology.assemble : $r39 = new org.joda.time.chrono.BasicDayOfYearDateTimeField >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : $r40 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days>
org.joda.time.chrono.BasicChronology.assemble : $r40 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days> >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : specialinvoke $r39.<org.joda.time.chrono.BasicDayOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>(r0, $r40)
org.joda.time.chrono.BasicChronology.assemble : specialinvoke $r39.<org.joda.time.chrono.BasicDayOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>(r0, $r40) >>>>>>>> org.joda.time.DateTimeFieldType.dayOfYear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType DAY_OF_YEAR_TYPE>
org.joda.time.DateTimeFieldType.dayOfYear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType DAY_OF_YEAR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.dayOfYear : return $r0
org.joda.time.DateTimeFieldType.dayOfYear : return $r0 >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear> = $r39
org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear> = $r39 >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : $r41 = new org.joda.time.chrono.GJMonthOfYearDateTimeField
org.joda.time.chrono.BasicChronology.assemble : $r41 = new org.joda.time.chrono.GJMonthOfYearDateTimeField >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : specialinvoke $r41.<org.joda.time.chrono.GJMonthOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>(r0)
org.joda.time.chrono.BasicChronology.assemble : specialinvoke $r41.<org.joda.time.chrono.GJMonthOfYearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>(r0) >>>>>>>> org.joda.time.DateTimeFieldType.monthOfYear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MONTH_OF_YEAR_TYPE>
org.joda.time.DateTimeFieldType.monthOfYear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MONTH_OF_YEAR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.monthOfYear : return $r0
org.joda.time.DateTimeFieldType.monthOfYear : return $r0 >>>>>>>> org.joda.time.chrono.JulianChronology.getAverageMillisPerMonth : return 2629800000L
org.joda.time.chrono.JulianChronology.getAverageMillisPerMonth : return 2629800000L >>>>>>>> org.joda.time.chrono.BasicChronology.getMaxMonth : return 12
org.joda.time.chrono.BasicChronology.getMaxMonth : return 12 >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> = $r41
org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> = $r41 >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : $r42 = new org.joda.time.chrono.BasicWeekyearDateTimeField
org.joda.time.chrono.BasicChronology.assemble : $r42 = new org.joda.time.chrono.BasicWeekyearDateTimeField >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : specialinvoke $r42.<org.joda.time.chrono.BasicWeekyearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>(r0)
org.joda.time.chrono.BasicChronology.assemble : specialinvoke $r42.<org.joda.time.chrono.BasicWeekyearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology)>(r0) >>>>>>>> org.joda.time.DateTimeFieldType.weekyear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType WEEKYEAR_TYPE>
org.joda.time.DateTimeFieldType.weekyear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType WEEKYEAR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.weekyear : return $r0
org.joda.time.DateTimeFieldType.weekyear : return $r0 >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> = $r42
org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> = $r42 >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : $r43 = new org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField
org.joda.time.chrono.BasicChronology.assemble : $r43 = new org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : $r44 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weeks>
org.joda.time.chrono.BasicChronology.assemble : $r44 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weeks> >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : specialinvoke $r43.<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>(r0, $r44)
org.joda.time.chrono.BasicChronology.assemble : specialinvoke $r43.<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: void <init>(org.joda.time.chrono.BasicChronology,org.joda.time.DurationField)>(r0, $r44) >>>>>>>> org.joda.time.DateTimeFieldType.weekOfWeekyear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType WEEK_OF_WEEKYEAR_TYPE>
org.joda.time.DateTimeFieldType.weekOfWeekyear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType WEEK_OF_WEEKYEAR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.weekOfWeekyear : return $r0
org.joda.time.DateTimeFieldType.weekOfWeekyear : return $r0 >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear> = $r43
org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear> = $r43 >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : $r45 = new org.joda.time.field.RemainderDateTimeField
org.joda.time.chrono.BasicChronology.assemble : $r45 = new org.joda.time.field.RemainderDateTimeField >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : $r46 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear>
org.joda.time.chrono.BasicChronology.assemble : $r46 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : $r47 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>()
org.joda.time.chrono.BasicChronology.assemble : $r47 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>() >>>>>>>> org.joda.time.DateTimeFieldType.weekyearOfCentury : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType WEEKYEAR_OF_CENTURY_TYPE>
org.joda.time.DateTimeFieldType.weekyearOfCentury : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType WEEKYEAR_OF_CENTURY_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.weekyearOfCentury : return $r0
org.joda.time.DateTimeFieldType.weekyearOfCentury : return $r0 >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : specialinvoke $r45.<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>($r46, $r47, 100)
org.joda.time.chrono.BasicChronology.assemble : specialinvoke $r45.<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>($r46, $r47, 100) >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getRangeDurationType : $r1 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DurationFieldType iRangeType>
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getRangeDurationType : $r1 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DurationFieldType iRangeType> >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getRangeDurationType : return $r1
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getRangeDurationType : return $r1 >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : r48 = $r45
org.joda.time.chrono.BasicChronology.assemble : r48 = $r45 >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : $r49 = new org.joda.time.field.OffsetDateTimeField
org.joda.time.chrono.BasicChronology.assemble : $r49 = new org.joda.time.field.OffsetDateTimeField >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : $r50 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>()
org.joda.time.chrono.BasicChronology.assemble : $r50 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>() >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : specialinvoke $r49.<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>(r48, $r50, 1)
org.joda.time.chrono.BasicChronology.assemble : specialinvoke $r49.<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>(r48, $r50, 1) >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> = $r49
org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> = $r49 >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : $r51 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year>
org.joda.time.chrono.BasicChronology.assemble : $r51 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : $r52 = virtualinvoke $r51.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>()
org.joda.time.chrono.BasicChronology.assemble : $r52 = virtualinvoke $r51.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>() >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years> = $r52
org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years> = $r52 >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : $r53 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra>
org.joda.time.chrono.BasicChronology.assemble : $r53 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : $r54 = virtualinvoke $r53.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>()
org.joda.time.chrono.BasicChronology.assemble : $r54 = virtualinvoke $r53.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>() >>>>>>>> org.joda.time.field.DividedDateTimeField.getDurationField : $r1 = r0.<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField iDurationField>
org.joda.time.field.DividedDateTimeField.getDurationField : $r1 = r0.<org.joda.time.field.DividedDateTimeField: org.joda.time.DurationField iDurationField> >>>>>>>> org.joda.time.field.DividedDateTimeField.getDurationField : return $r1
org.joda.time.field.DividedDateTimeField.getDurationField : return $r1 >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries> = $r54
org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries> = $r54 >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : $r55 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear>
org.joda.time.chrono.BasicChronology.assemble : $r55 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : $r56 = virtualinvoke $r55.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>()
org.joda.time.chrono.BasicChronology.assemble : $r56 = virtualinvoke $r55.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>() >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months> = $r56
org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months> = $r56 >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : $r57 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear>
org.joda.time.chrono.BasicChronology.assemble : $r57 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : $r58 = virtualinvoke $r57.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>()
org.joda.time.chrono.BasicChronology.assemble : $r58 = virtualinvoke $r57.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>() >>>>>>>> org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears> = $r58
org.joda.time.chrono.BasicChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears> = $r58 >>>>>>>> org.joda.time.chrono.JulianChronology.assemble : $r3 = new org.joda.time.field.SkipDateTimeField
org.joda.time.chrono.JulianChronology.assemble : $r3 = new org.joda.time.field.SkipDateTimeField >>>>>>>> org.joda.time.chrono.JulianChronology.assemble : $r4 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year>
org.joda.time.chrono.JulianChronology.assemble : $r4 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> >>>>>>>> org.joda.time.chrono.JulianChronology.assemble : specialinvoke $r3.<org.joda.time.field.SkipDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>(r0, $r4)
org.joda.time.chrono.JulianChronology.assemble : specialinvoke $r3.<org.joda.time.field.SkipDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>(r0, $r4) >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getMinimumValue : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DelegatedDateTimeField.getMinimumValue : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getMinimumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMinimumValue()>()
org.joda.time.field.DelegatedDateTimeField.getMinimumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMinimumValue()>() >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getMinimumValue : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.getMinimumValue : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getMinimumValue : $i0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMinYear()>()
org.joda.time.chrono.BasicYearDateTimeField.getMinimumValue : $i0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMinYear()>() >>>>>>>> org.joda.time.chrono.JulianChronology.getMinYear : return -292269054
org.joda.time.chrono.JulianChronology.getMinYear : return -292269054 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getMinimumValue : return $i0
org.joda.time.chrono.BasicYearDateTimeField.getMinimumValue : return $i0 >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getMinimumValue : return $i0
org.joda.time.field.DelegatedDateTimeField.getMinimumValue : return $i0 >>>>>>>> org.joda.time.chrono.JulianChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> = $r3
org.joda.time.chrono.JulianChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> = $r3 >>>>>>>> org.joda.time.chrono.JulianChronology.assemble : $r5 = new org.joda.time.field.SkipDateTimeField
org.joda.time.chrono.JulianChronology.assemble : $r5 = new org.joda.time.field.SkipDateTimeField >>>>>>>> org.joda.time.chrono.JulianChronology.assemble : $r6 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear>
org.joda.time.chrono.JulianChronology.assemble : $r6 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> >>>>>>>> org.joda.time.chrono.JulianChronology.assemble : specialinvoke $r5.<org.joda.time.field.SkipDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>(r0, $r6)
org.joda.time.chrono.JulianChronology.assemble : specialinvoke $r5.<org.joda.time.field.SkipDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>(r0, $r6) >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.getMinimumValue : $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicWeekyearDateTimeField.getMinimumValue : $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.getMinimumValue : $i0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMinYear()>()
org.joda.time.chrono.BasicWeekyearDateTimeField.getMinimumValue : $i0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMinYear()>() >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.getMinimumValue : return $i0
org.joda.time.chrono.BasicWeekyearDateTimeField.getMinimumValue : return $i0 >>>>>>>> org.joda.time.chrono.JulianChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> = $r5
org.joda.time.chrono.JulianChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> = $r5 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r7 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField millis>
org.joda.time.chrono.AssembledChronology.setFields : $r7 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField millis> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r3 = $r7
org.joda.time.chrono.AssembledChronology.setFields : r3 = $r7 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r7 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r7 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r8 = r3
org.joda.time.chrono.AssembledChronology.setFields : $r8 = r3 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMillis> = $r8]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMillis> = $r8] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMillis> = $r8
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMillis> = $r8 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r10 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField seconds>
org.joda.time.chrono.AssembledChronology.setFields : $r10 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField seconds> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r11 = $r10
org.joda.time.chrono.AssembledChronology.setFields : r11 = $r10 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r10 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r10 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r12 = r11
org.joda.time.chrono.AssembledChronology.setFields : $r12 = r11 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iSeconds> = $r12]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iSeconds> = $r12] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iSeconds> = $r12
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iSeconds> = $r12 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r14 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField minutes>
org.joda.time.chrono.AssembledChronology.setFields : $r14 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField minutes> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r15 = $r14
org.joda.time.chrono.AssembledChronology.setFields : r15 = $r14 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r14 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r14 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r16 = r15
org.joda.time.chrono.AssembledChronology.setFields : $r16 = r15 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMinutes> = $r16]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMinutes> = $r16] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMinutes> = $r16
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMinutes> = $r16 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r18 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField hours>
org.joda.time.chrono.AssembledChronology.setFields : $r18 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField hours> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r19 = $r18
org.joda.time.chrono.AssembledChronology.setFields : r19 = $r18 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r18 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r18 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r20 = r19
org.joda.time.chrono.AssembledChronology.setFields : $r20 = r19 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHours> = $r20]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHours> = $r20] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHours> = $r20
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHours> = $r20 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r22 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField halfdays>
org.joda.time.chrono.AssembledChronology.setFields : $r22 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField halfdays> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r23 = $r22
org.joda.time.chrono.AssembledChronology.setFields : r23 = $r22 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r22 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r22 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r24 = r23
org.joda.time.chrono.AssembledChronology.setFields : $r24 = r23 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHalfdays> = $r24]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHalfdays> = $r24] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHalfdays> = $r24
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHalfdays> = $r24 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r26 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days>
org.joda.time.chrono.AssembledChronology.setFields : $r26 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r27 = $r26
org.joda.time.chrono.AssembledChronology.setFields : r27 = $r26 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r26 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r26 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r28 = r27
org.joda.time.chrono.AssembledChronology.setFields : $r28 = r27 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays> = $r28]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays> = $r28] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays> = $r28
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays> = $r28 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r30 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weeks>
org.joda.time.chrono.AssembledChronology.setFields : $r30 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weeks> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r31 = $r30
org.joda.time.chrono.AssembledChronology.setFields : r31 = $r30 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r30 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r30 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r32 = r31
org.joda.time.chrono.AssembledChronology.setFields : $r32 = r31 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeeks> = $r32]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeeks> = $r32] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeeks> = $r32
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeeks> = $r32 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r34 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears>
org.joda.time.chrono.AssembledChronology.setFields : $r34 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r35 = $r34
org.joda.time.chrono.AssembledChronology.setFields : r35 = $r34 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r34 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r34 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r36 = r35
org.joda.time.chrono.AssembledChronology.setFields : $r36 = r35 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeekyears> = $r36]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeekyears> = $r36] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeekyears> = $r36
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeekyears> = $r36 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r38 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months>
org.joda.time.chrono.AssembledChronology.setFields : $r38 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r39 = $r38
org.joda.time.chrono.AssembledChronology.setFields : r39 = $r38 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r38 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r38 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r40 = r39
org.joda.time.chrono.AssembledChronology.setFields : $r40 = r39 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMonths> = $r40]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMonths> = $r40] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMonths> = $r40
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMonths> = $r40 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r42 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years>
org.joda.time.chrono.AssembledChronology.setFields : $r42 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r43 = $r42
org.joda.time.chrono.AssembledChronology.setFields : r43 = $r42 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r42 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r42 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r44 = r43
org.joda.time.chrono.AssembledChronology.setFields : $r44 = r43 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iYears> = $r44]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iYears> = $r44] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iYears> = $r44
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iYears> = $r44 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r46 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries>
org.joda.time.chrono.AssembledChronology.setFields : $r46 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r47 = $r46
org.joda.time.chrono.AssembledChronology.setFields : r47 = $r46 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r46 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r46 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r48 = r47
org.joda.time.chrono.AssembledChronology.setFields : $r48 = r47 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iCenturies> = $r48]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iCenturies> = $r48] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iCenturies> = $r48
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iCenturies> = $r48 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r50 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField eras>
org.joda.time.chrono.AssembledChronology.setFields : $r50 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField eras> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r51 = $r50
org.joda.time.chrono.AssembledChronology.setFields : r51 = $r50 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r50 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r50 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r52 = specialinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField eras()>()
org.joda.time.chrono.AssembledChronology.setFields : $r52 = specialinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField eras()>() >>>>>>>> org.joda.time.chrono.BaseChronology.eras : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType eras()>()
org.joda.time.chrono.BaseChronology.eras : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType eras()>() >>>>>>>> org.joda.time.DurationFieldType.eras : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType ERAS_TYPE>
org.joda.time.DurationFieldType.eras : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType ERAS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.eras : return $r0
org.joda.time.DurationFieldType.eras : return $r0 >>>>>>>> org.joda.time.chrono.BaseChronology.eras : $r2 = staticinvoke <org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>($r1)
org.joda.time.chrono.BaseChronology.eras : $r2 = staticinvoke <org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>($r1) >>>>>>>> org.joda.time.field.UnsupportedDurationField.getInstance : $r1 = <org.joda.time.field.UnsupportedDurationField: java.util.HashMap cCache>
org.joda.time.field.UnsupportedDurationField.getInstance : $r1 = <org.joda.time.field.UnsupportedDurationField: java.util.HashMap cCache> >>>>>>>> org.joda.time.field.UnsupportedDurationField.getInstance : if $r1 != null
org.joda.time.field.UnsupportedDurationField.getInstance : if $r1 != null >>>>>>>> org.joda.time.field.UnsupportedDurationField.getInstance : $r4 = <org.joda.time.field.UnsupportedDurationField: java.util.HashMap cCache>
org.joda.time.field.UnsupportedDurationField.getInstance : $r4 = <org.joda.time.field.UnsupportedDurationField: java.util.HashMap cCache> >>>>>>>> org.joda.time.field.UnsupportedDurationField.getInstance : $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0)
org.joda.time.field.UnsupportedDurationField.getInstance : $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.hashCode : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal>
org.joda.time.DurationFieldType$StandardDurationFieldType.hashCode : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal> >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.hashCode : return $b0
org.joda.time.DurationFieldType$StandardDurationFieldType.hashCode : return $b0 >>>>>>>> org.joda.time.field.UnsupportedDurationField.getInstance : r2 = (org.joda.time.field.UnsupportedDurationField) $r5
org.joda.time.field.UnsupportedDurationField.getInstance : r2 = (org.joda.time.field.UnsupportedDurationField) $r5 >>>>>>>> org.joda.time.field.UnsupportedDurationField.getInstance : if r2 != null
org.joda.time.field.UnsupportedDurationField.getInstance : if r2 != null >>>>>>>> org.joda.time.field.UnsupportedDurationField.getInstance : return r2
org.joda.time.field.UnsupportedDurationField.getInstance : return r2 >>>>>>>> org.joda.time.chrono.BaseChronology.eras : return $r2
org.joda.time.chrono.BaseChronology.eras : return $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iEras> = $r52
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iEras> = $r52 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r54 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond>
org.joda.time.chrono.AssembledChronology.setFields : $r54 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r55 = $r54
org.joda.time.chrono.AssembledChronology.setFields : r55 = $r54 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r54 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r54 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r56 = r55
org.joda.time.chrono.AssembledChronology.setFields : $r56 = r55 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfSecond> = $r56]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfSecond> = $r56] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfSecond> = $r56
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfSecond> = $r56 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r58 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay>
org.joda.time.chrono.AssembledChronology.setFields : $r58 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r59 = $r58
org.joda.time.chrono.AssembledChronology.setFields : r59 = $r58 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r58 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r58 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r60 = r59
org.joda.time.chrono.AssembledChronology.setFields : $r60 = r59 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay> = $r60]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay> = $r60] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay> = $r60
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay> = $r60 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r62 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute>
org.joda.time.chrono.AssembledChronology.setFields : $r62 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r63 = $r62
org.joda.time.chrono.AssembledChronology.setFields : r63 = $r62 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r62 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r62 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r64 = r63
org.joda.time.chrono.AssembledChronology.setFields : $r64 = r63 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfMinute> = $r64]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfMinute> = $r64] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfMinute> = $r64
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfMinute> = $r64 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r66 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay>
org.joda.time.chrono.AssembledChronology.setFields : $r66 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r67 = $r66
org.joda.time.chrono.AssembledChronology.setFields : r67 = $r66 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r66 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r66 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r68 = r67
org.joda.time.chrono.AssembledChronology.setFields : $r68 = r67 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfDay> = $r68]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfDay> = $r68] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfDay> = $r68
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfDay> = $r68 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r70 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour>
org.joda.time.chrono.AssembledChronology.setFields : $r70 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r71 = $r70
org.joda.time.chrono.AssembledChronology.setFields : r71 = $r70 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r70 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r70 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r72 = r71
org.joda.time.chrono.AssembledChronology.setFields : $r72 = r71 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfHour> = $r72]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfHour> = $r72] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfHour> = $r72
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfHour> = $r72 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r74 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay>
org.joda.time.chrono.AssembledChronology.setFields : $r74 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r75 = $r74
org.joda.time.chrono.AssembledChronology.setFields : r75 = $r74 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r74 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r74 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r76 = r75
org.joda.time.chrono.AssembledChronology.setFields : $r76 = r75 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfDay> = $r76]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfDay> = $r76] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfDay> = $r76
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfDay> = $r76 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r78 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay>
org.joda.time.chrono.AssembledChronology.setFields : $r78 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r79 = $r78
org.joda.time.chrono.AssembledChronology.setFields : r79 = $r78 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r78 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r78 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r80 = r79
org.joda.time.chrono.AssembledChronology.setFields : $r80 = r79 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay> = $r80]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay> = $r80] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay> = $r80
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay> = $r80 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r82 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay>
org.joda.time.chrono.AssembledChronology.setFields : $r82 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r83 = $r82
org.joda.time.chrono.AssembledChronology.setFields : r83 = $r82 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r82 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r82 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r84 = r83
org.joda.time.chrono.AssembledChronology.setFields : $r84 = r83 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfDay> = $r84]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfDay> = $r84] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfDay> = $r84
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfDay> = $r84 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r86 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday>
org.joda.time.chrono.AssembledChronology.setFields : $r86 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r87 = $r86
org.joda.time.chrono.AssembledChronology.setFields : r87 = $r86 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r86 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r86 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r88 = r87
org.joda.time.chrono.AssembledChronology.setFields : $r88 = r87 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfHalfday> = $r88]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfHalfday> = $r88] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfHalfday> = $r88
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfHalfday> = $r88 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r90 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday>
org.joda.time.chrono.AssembledChronology.setFields : $r90 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r91 = $r90
org.joda.time.chrono.AssembledChronology.setFields : r91 = $r90 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r90 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r90 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r92 = r91
org.joda.time.chrono.AssembledChronology.setFields : $r92 = r91 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfHalfday> = $r92]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfHalfday> = $r92] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfHalfday> = $r92
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfHalfday> = $r92 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r94 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay>
org.joda.time.chrono.AssembledChronology.setFields : $r94 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r95 = $r94
org.joda.time.chrono.AssembledChronology.setFields : r95 = $r94 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r94 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r94 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r96 = r95
org.joda.time.chrono.AssembledChronology.setFields : $r96 = r95 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHalfdayOfDay> = $r96]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHalfdayOfDay> = $r96] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHalfdayOfDay> = $r96
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHalfdayOfDay> = $r96 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r98 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek>
org.joda.time.chrono.AssembledChronology.setFields : $r98 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r99 = $r98
org.joda.time.chrono.AssembledChronology.setFields : r99 = $r98 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r98 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r98 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r100 = r99
org.joda.time.chrono.AssembledChronology.setFields : $r100 = r99 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfWeek> = $r100]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfWeek> = $r100] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfWeek> = $r100
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfWeek> = $r100 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r102 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth>
org.joda.time.chrono.AssembledChronology.setFields : $r102 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r103 = $r102
org.joda.time.chrono.AssembledChronology.setFields : r103 = $r102 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r102 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r102 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r104 = r103
org.joda.time.chrono.AssembledChronology.setFields : $r104 = r103 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth> = $r104]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth> = $r104] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth> = $r104
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth> = $r104 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r106 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear>
org.joda.time.chrono.AssembledChronology.setFields : $r106 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r107 = $r106
org.joda.time.chrono.AssembledChronology.setFields : r107 = $r106 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r106 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r106 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r108 = r107
org.joda.time.chrono.AssembledChronology.setFields : $r108 = r107 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfYear> = $r108]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfYear> = $r108] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfYear> = $r108
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfYear> = $r108 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r110 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear>
org.joda.time.chrono.AssembledChronology.setFields : $r110 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r111 = $r110
org.joda.time.chrono.AssembledChronology.setFields : r111 = $r110 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r110 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r110 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r112 = r111
org.joda.time.chrono.AssembledChronology.setFields : $r112 = r111 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekOfWeekyear> = $r112]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekOfWeekyear> = $r112] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekOfWeekyear> = $r112
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekOfWeekyear> = $r112 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r114 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear>
org.joda.time.chrono.AssembledChronology.setFields : $r114 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r115 = $r114
org.joda.time.chrono.AssembledChronology.setFields : r115 = $r114 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r114 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r114 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r116 = r115
org.joda.time.chrono.AssembledChronology.setFields : $r116 = r115 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyear> = $r116]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyear> = $r116] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyear> = $r116
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyear> = $r116 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r118 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury>
org.joda.time.chrono.AssembledChronology.setFields : $r118 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r119 = $r118
org.joda.time.chrono.AssembledChronology.setFields : r119 = $r118 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r118 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r118 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r120 = r119
org.joda.time.chrono.AssembledChronology.setFields : $r120 = r119 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyearOfCentury> = $r120]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyearOfCentury> = $r120] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyearOfCentury> = $r120
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyearOfCentury> = $r120 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r122 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear>
org.joda.time.chrono.AssembledChronology.setFields : $r122 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r123 = $r122
org.joda.time.chrono.AssembledChronology.setFields : r123 = $r122 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r122 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r122 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r124 = r123
org.joda.time.chrono.AssembledChronology.setFields : $r124 = r123 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear> = $r124]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear> = $r124] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear> = $r124
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear> = $r124 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r126 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year>
org.joda.time.chrono.AssembledChronology.setFields : $r126 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r127 = $r126
org.joda.time.chrono.AssembledChronology.setFields : r127 = $r126 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r126 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r126 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r128 = r127
org.joda.time.chrono.AssembledChronology.setFields : $r128 = r127 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear> = $r128]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear> = $r128] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear> = $r128
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear> = $r128 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r130 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra>
org.joda.time.chrono.AssembledChronology.setFields : $r130 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r131 = $r130
org.joda.time.chrono.AssembledChronology.setFields : r131 = $r130 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r130 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r130 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r132 = r131
org.joda.time.chrono.AssembledChronology.setFields : $r132 = r131 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfEra> = $r132]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfEra> = $r132] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfEra> = $r132
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfEra> = $r132 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r134 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury>
org.joda.time.chrono.AssembledChronology.setFields : $r134 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r135 = $r134
org.joda.time.chrono.AssembledChronology.setFields : r135 = $r134 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r134 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r134 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r136 = r135
org.joda.time.chrono.AssembledChronology.setFields : $r136 = r135 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfCentury> = $r136]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfCentury> = $r136] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfCentury> = $r136
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfCentury> = $r136 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r138 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra>
org.joda.time.chrono.AssembledChronology.setFields : $r138 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r139 = $r138
org.joda.time.chrono.AssembledChronology.setFields : r139 = $r138 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r138 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r138 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r140 = r139
org.joda.time.chrono.AssembledChronology.setFields : $r140 = r139 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iCenturyOfEra> = $r140]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iCenturyOfEra> = $r140] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iCenturyOfEra> = $r140
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iCenturyOfEra> = $r140 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r142 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era>
org.joda.time.chrono.AssembledChronology.setFields : $r142 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r143 = $r142
org.joda.time.chrono.AssembledChronology.setFields : r143 = $r142 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r142 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r142 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r144 = r143
org.joda.time.chrono.AssembledChronology.setFields : $r144 = r143 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iEra> = $r144]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iEra> = $r144] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iEra> = $r144
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iEra> = $r144 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r145 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.setFields : $r145 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r145 != null
org.joda.time.chrono.AssembledChronology.setFields : if $r145 != null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : b0 = 0
org.joda.time.chrono.AssembledChronology.setFields : b0 = 0 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: int iBaseFlags> = b0]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: int iBaseFlags> = b0] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: int iBaseFlags> = b0
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: int iBaseFlags> = b0 >>>>>>>> org.joda.time.chrono.JulianChronology.readResolve : r1 = virtualinvoke r0.<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.JulianChronology.readResolve : r1 = virtualinvoke r0.<org.joda.time.chrono.JulianChronology: org.joda.time.Chronology getBase()>() >>>>>>>> org.joda.time.chrono.JulianChronology.readResolve : i0 = virtualinvoke r0.<org.joda.time.chrono.JulianChronology: int getMinimumDaysInFirstWeek()>()
org.joda.time.chrono.JulianChronology.readResolve : i0 = virtualinvoke r0.<org.joda.time.chrono.JulianChronology: int getMinimumDaysInFirstWeek()>() >>>>>>>> org.joda.time.chrono.JulianChronology.getMinimumDaysInFirstWeek : $i0 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getMinimumDaysInFirstWeek()>()
org.joda.time.chrono.JulianChronology.getMinimumDaysInFirstWeek : $i0 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getMinimumDaysInFirstWeek()>() >>>>>>>> org.joda.time.chrono.BasicChronology.getMinimumDaysInFirstWeek : $i0 = r0.<org.joda.time.chrono.BasicChronology: int iMinDaysInFirstWeek>
org.joda.time.chrono.BasicChronology.getMinimumDaysInFirstWeek : $i0 = r0.<org.joda.time.chrono.BasicChronology: int iMinDaysInFirstWeek> >>>>>>>> org.joda.time.chrono.BasicChronology.getMinimumDaysInFirstWeek : return $i0
org.joda.time.chrono.BasicChronology.getMinimumDaysInFirstWeek : return $i0 >>>>>>>> org.joda.time.chrono.JulianChronology.getMinimumDaysInFirstWeek : return $i0
org.joda.time.chrono.JulianChronology.getMinimumDaysInFirstWeek : return $i0 >>>>>>>> org.joda.time.chrono.JulianChronology.readResolve : if i0 != 0
org.joda.time.chrono.JulianChronology.readResolve : if i0 != 0 >>>>>>>> org.joda.time.chrono.JulianChronology.readResolve : $i1 = 4
org.joda.time.chrono.JulianChronology.readResolve : $i1 = 4 >>>>>>>> org.joda.time.chrono.JulianChronology.readResolve : goto [?= i2 = $i1]
org.joda.time.chrono.JulianChronology.readResolve : goto [?= i2 = $i1] >>>>>>>> org.joda.time.chrono.JulianChronology.readResolve : i2 = $i1
org.joda.time.chrono.JulianChronology.readResolve : i2 = $i1 >>>>>>>> org.joda.time.chrono.JulianChronology.readResolve : if r1 != null
org.joda.time.chrono.JulianChronology.readResolve : if r1 != null >>>>>>>> org.joda.time.chrono.JulianChronology.readResolve : $r2 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>
org.joda.time.chrono.JulianChronology.readResolve : $r2 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC> >>>>>>>> org.joda.time.chrono.JulianChronology.readResolve : $r3 = staticinvoke <org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>($r2, i2)
org.joda.time.chrono.JulianChronology.readResolve : $r3 = staticinvoke <org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>($r2, i2) >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : if r0 != null
org.joda.time.chrono.JulianChronology.getInstance : if r0 != null >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : $r6 = <org.joda.time.chrono.JulianChronology: java.util.Map cCache>
org.joda.time.chrono.JulianChronology.getInstance : $r6 = <org.joda.time.chrono.JulianChronology: java.util.Map cCache> >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : r1 = $r6
org.joda.time.chrono.JulianChronology.getInstance : r1 = $r6 >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : entermonitor $r6
org.joda.time.chrono.JulianChronology.getInstance : entermonitor $r6 >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : $r7 = <org.joda.time.chrono.JulianChronology: java.util.Map cCache>
org.joda.time.chrono.JulianChronology.getInstance : $r7 = <org.joda.time.chrono.JulianChronology: java.util.Map cCache> >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0)
org.joda.time.chrono.JulianChronology.getInstance : $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $r1 = virtualinvoke r0.<org.joda.time.tz.FixedDateTimeZone: java.lang.String getID()>()
org.joda.time.tz.FixedDateTimeZone.hashCode : $r1 = virtualinvoke r0.<org.joda.time.tz.FixedDateTimeZone: java.lang.String getID()>() >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>()
org.joda.time.tz.FixedDateTimeZone.hashCode : $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>() >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iStandardOffset>
org.joda.time.tz.FixedDateTimeZone.hashCode : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iStandardOffset> >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i2 = 37 * $i1
org.joda.time.tz.FixedDateTimeZone.hashCode : $i2 = 37 * $i1 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i3 = $i0 + $i2
org.joda.time.tz.FixedDateTimeZone.hashCode : $i3 = $i0 + $i2 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i4 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset>
org.joda.time.tz.FixedDateTimeZone.hashCode : $i4 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset> >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i5 = 31 * $i4
org.joda.time.tz.FixedDateTimeZone.hashCode : $i5 = 31 * $i4 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i6 = $i3 + $i5
org.joda.time.tz.FixedDateTimeZone.hashCode : $i6 = $i3 + $i5 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : return $i6
org.joda.time.tz.FixedDateTimeZone.hashCode : return $i6 >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : r2 = (org.joda.time.chrono.JulianChronology[]) $r8
org.joda.time.chrono.JulianChronology.getInstance : r2 = (org.joda.time.chrono.JulianChronology[]) $r8 >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : if r2 != null
org.joda.time.chrono.JulianChronology.getInstance : if r2 != null >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : $i1 = i0 - 1
org.joda.time.chrono.JulianChronology.getInstance : $i1 = i0 - 1 >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : r3 = r2[$i1]
org.joda.time.chrono.JulianChronology.getInstance : r3 = r2[$i1] >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : goto [?= (branch)]
org.joda.time.chrono.JulianChronology.getInstance : goto [?= (branch)] >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : if r3 != null
org.joda.time.chrono.JulianChronology.getInstance : if r3 != null >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : exitmonitor r1
org.joda.time.chrono.JulianChronology.getInstance : exitmonitor r1 >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : goto [?= return r3]
org.joda.time.chrono.JulianChronology.getInstance : goto [?= return r3] >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : return r3
org.joda.time.chrono.JulianChronology.getInstance : return r3 >>>>>>>> org.joda.time.chrono.JulianChronology.readResolve : goto [?= return $r3]
org.joda.time.chrono.JulianChronology.readResolve : goto [?= return $r3] >>>>>>>> org.joda.time.chrono.JulianChronology.readResolve : return $r3
org.joda.time.chrono.JulianChronology.readResolve : return $r3 >>>>>>>> org.joda.time.chrono.GregorianChronology.assemble : $r2 = virtualinvoke r0.<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.GregorianChronology.assemble : $r2 = virtualinvoke r0.<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology getBase()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.assemble : if $r2 != null
org.joda.time.chrono.GregorianChronology.assemble : if $r2 != null >>>>>>>> org.joda.time.chrono.GregorianChronology.assemble : specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>(r1)
org.joda.time.chrono.GregorianChronology.assemble : specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>(r1) >>>>>>>> org.joda.time.chrono.GregorianChronology.getAverageMillisPerYear : return 31556952000L
org.joda.time.chrono.GregorianChronology.getAverageMillisPerYear : return 31556952000L >>>>>>>> org.joda.time.chrono.GregorianChronology.getMaxYear : return 292278993
org.joda.time.chrono.GregorianChronology.getMaxYear : return 292278993 >>>>>>>> org.joda.time.chrono.GregorianChronology.getAverageMillisPerMonth : return 2629746000L
org.joda.time.chrono.GregorianChronology.getAverageMillisPerMonth : return 2629746000L >>>>>>>> org.joda.time.chrono.GregorianChronology.readResolve : r1 = virtualinvoke r0.<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.GregorianChronology.readResolve : r1 = virtualinvoke r0.<org.joda.time.chrono.GregorianChronology: org.joda.time.Chronology getBase()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.readResolve : i0 = virtualinvoke r0.<org.joda.time.chrono.GregorianChronology: int getMinimumDaysInFirstWeek()>()
org.joda.time.chrono.GregorianChronology.readResolve : i0 = virtualinvoke r0.<org.joda.time.chrono.GregorianChronology: int getMinimumDaysInFirstWeek()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getMinimumDaysInFirstWeek : $i0 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getMinimumDaysInFirstWeek()>()
org.joda.time.chrono.GregorianChronology.getMinimumDaysInFirstWeek : $i0 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getMinimumDaysInFirstWeek()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getMinimumDaysInFirstWeek : return $i0
org.joda.time.chrono.GregorianChronology.getMinimumDaysInFirstWeek : return $i0 >>>>>>>> org.joda.time.chrono.GregorianChronology.readResolve : if i0 != 0
org.joda.time.chrono.GregorianChronology.readResolve : if i0 != 0 >>>>>>>> org.joda.time.chrono.GregorianChronology.readResolve : $i1 = 4
org.joda.time.chrono.GregorianChronology.readResolve : $i1 = 4 >>>>>>>> org.joda.time.chrono.GregorianChronology.readResolve : goto [?= i2 = $i1]
org.joda.time.chrono.GregorianChronology.readResolve : goto [?= i2 = $i1] >>>>>>>> org.joda.time.chrono.GregorianChronology.readResolve : i2 = $i1
org.joda.time.chrono.GregorianChronology.readResolve : i2 = $i1 >>>>>>>> org.joda.time.chrono.GregorianChronology.readResolve : if r1 != null
org.joda.time.chrono.GregorianChronology.readResolve : if r1 != null >>>>>>>> org.joda.time.chrono.GregorianChronology.readResolve : $r2 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>
org.joda.time.chrono.GregorianChronology.readResolve : $r2 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC> >>>>>>>> org.joda.time.chrono.GregorianChronology.readResolve : $r3 = staticinvoke <org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>($r2, i2)
org.joda.time.chrono.GregorianChronology.readResolve : $r3 = staticinvoke <org.joda.time.chrono.GregorianChronology: org.joda.time.chrono.GregorianChronology getInstance(org.joda.time.DateTimeZone,int)>($r2, i2) >>>>>>>> org.joda.time.chrono.GregorianChronology.getInstance : if r0 != null
org.joda.time.chrono.GregorianChronology.getInstance : if r0 != null >>>>>>>> org.joda.time.chrono.GregorianChronology.getInstance : $r6 = <org.joda.time.chrono.GregorianChronology: java.util.Map cCache>
org.joda.time.chrono.GregorianChronology.getInstance : $r6 = <org.joda.time.chrono.GregorianChronology: java.util.Map cCache> >>>>>>>> org.joda.time.chrono.GregorianChronology.getInstance : r1 = $r6
org.joda.time.chrono.GregorianChronology.getInstance : r1 = $r6 >>>>>>>> org.joda.time.chrono.GregorianChronology.getInstance : entermonitor $r6
org.joda.time.chrono.GregorianChronology.getInstance : entermonitor $r6 >>>>>>>> org.joda.time.chrono.GregorianChronology.getInstance : $r7 = <org.joda.time.chrono.GregorianChronology: java.util.Map cCache>
org.joda.time.chrono.GregorianChronology.getInstance : $r7 = <org.joda.time.chrono.GregorianChronology: java.util.Map cCache> >>>>>>>> org.joda.time.chrono.GregorianChronology.getInstance : $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0)
org.joda.time.chrono.GregorianChronology.getInstance : $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> org.joda.time.chrono.GregorianChronology.getInstance : r2 = (org.joda.time.chrono.GregorianChronology[]) $r8
org.joda.time.chrono.GregorianChronology.getInstance : r2 = (org.joda.time.chrono.GregorianChronology[]) $r8 >>>>>>>> org.joda.time.chrono.GregorianChronology.getInstance : if r2 != null
org.joda.time.chrono.GregorianChronology.getInstance : if r2 != null >>>>>>>> org.joda.time.chrono.GregorianChronology.getInstance : $i1 = i0 - 1
org.joda.time.chrono.GregorianChronology.getInstance : $i1 = i0 - 1 >>>>>>>> org.joda.time.chrono.GregorianChronology.getInstance : r3 = r2[$i1]
org.joda.time.chrono.GregorianChronology.getInstance : r3 = r2[$i1] >>>>>>>> org.joda.time.chrono.GregorianChronology.getInstance : goto [?= (branch)]
org.joda.time.chrono.GregorianChronology.getInstance : goto [?= (branch)] >>>>>>>> org.joda.time.chrono.GregorianChronology.getInstance : if r3 != null
org.joda.time.chrono.GregorianChronology.getInstance : if r3 != null >>>>>>>> org.joda.time.chrono.GregorianChronology.getInstance : exitmonitor r1
org.joda.time.chrono.GregorianChronology.getInstance : exitmonitor r1 >>>>>>>> org.joda.time.chrono.GregorianChronology.getInstance : goto [?= return r3]
org.joda.time.chrono.GregorianChronology.getInstance : goto [?= return r3] >>>>>>>> org.joda.time.chrono.GregorianChronology.getInstance : return r3
org.joda.time.chrono.GregorianChronology.getInstance : return r3 >>>>>>>> org.joda.time.chrono.GregorianChronology.readResolve : goto [?= return $r3]
org.joda.time.chrono.GregorianChronology.readResolve : goto [?= return $r3] >>>>>>>> org.joda.time.chrono.GregorianChronology.readResolve : return $r3
org.joda.time.chrono.GregorianChronology.readResolve : return $r3 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r6 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: java.lang.Object getParam()>()
org.joda.time.chrono.GJChronology.assemble : $r6 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: java.lang.Object getParam()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getParam : $r1 = r0.<org.joda.time.chrono.AssembledChronology: java.lang.Object iParam>
org.joda.time.chrono.AssembledChronology.getParam : $r1 = r0.<org.joda.time.chrono.AssembledChronology: java.lang.Object iParam> >>>>>>>> org.joda.time.chrono.AssembledChronology.getParam : return $r1
org.joda.time.chrono.AssembledChronology.getParam : return $r1 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r7 = (java.lang.Object[]) $r6
org.joda.time.chrono.GJChronology.assemble : $r7 = (java.lang.Object[]) $r6 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : r2 = (java.lang.Object[]) $r7
org.joda.time.chrono.GJChronology.assemble : r2 = (java.lang.Object[]) $r7 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r8 = r2[0]
org.joda.time.chrono.GJChronology.assemble : $r8 = r2[0] >>>>>>>> org.joda.time.chrono.GJChronology.assemble : r3 = (org.joda.time.chrono.JulianChronology) $r8
org.joda.time.chrono.GJChronology.assemble : r3 = (org.joda.time.chrono.JulianChronology) $r8 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r9 = r2[1]
org.joda.time.chrono.GJChronology.assemble : $r9 = r2[1] >>>>>>>> org.joda.time.chrono.GJChronology.assemble : r4 = (org.joda.time.chrono.GregorianChronology) $r9
org.joda.time.chrono.GJChronology.assemble : r4 = (org.joda.time.chrono.GregorianChronology) $r9 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r10 = r2[2]
org.joda.time.chrono.GJChronology.assemble : $r10 = r2[2] >>>>>>>> org.joda.time.chrono.GJChronology.assemble : r5 = (org.joda.time.Instant) $r10
org.joda.time.chrono.GJChronology.assemble : r5 = (org.joda.time.Instant) $r10 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $l1 = virtualinvoke r5.<org.joda.time.Instant: long getMillis()>()
org.joda.time.chrono.GJChronology.assemble : $l1 = virtualinvoke r5.<org.joda.time.Instant: long getMillis()>() >>>>>>>> org.joda.time.Instant.getMillis : $l0 = r0.<org.joda.time.Instant: long iMillis>
org.joda.time.Instant.getMillis : $l0 = r0.<org.joda.time.Instant: long iMillis> >>>>>>>> org.joda.time.Instant.getMillis : return $l0
org.joda.time.Instant.getMillis : return $l0 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis> = $l1
org.joda.time.chrono.GJChronology.assemble : r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis> = $l1 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.JulianChronology iJulianChronology> = r3
org.joda.time.chrono.GJChronology.assemble : r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.JulianChronology iJulianChronology> = r3 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology iGregorianChronology> = r4
org.joda.time.chrono.GJChronology.assemble : r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology iGregorianChronology> = r4 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : r0.<org.joda.time.chrono.GJChronology: org.joda.time.Instant iCutoverInstant> = r5
org.joda.time.chrono.GJChronology.assemble : r0.<org.joda.time.chrono.GJChronology: org.joda.time.Instant iCutoverInstant> = r5 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r11 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.GJChronology.assemble : $r11 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: org.joda.time.Chronology getBase()>() >>>>>>>> org.joda.time.chrono.GJChronology.assemble : if $r11 == null
org.joda.time.chrono.GJChronology.assemble : if $r11 == null >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $i2 = virtualinvoke r3.<org.joda.time.chrono.JulianChronology: int getMinimumDaysInFirstWeek()>()
org.joda.time.chrono.GJChronology.assemble : $i2 = virtualinvoke r3.<org.joda.time.chrono.JulianChronology: int getMinimumDaysInFirstWeek()>() >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $i3 = virtualinvoke r4.<org.joda.time.chrono.GregorianChronology: int getMinimumDaysInFirstWeek()>()
org.joda.time.chrono.GJChronology.assemble : $i3 = virtualinvoke r4.<org.joda.time.chrono.GregorianChronology: int getMinimumDaysInFirstWeek()>() >>>>>>>> org.joda.time.chrono.GJChronology.assemble : if $i2 == $i3
org.joda.time.chrono.GJChronology.assemble : if $i2 == $i3 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $l4 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>
org.joda.time.chrono.GJChronology.assemble : $l4 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $l5 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>
org.joda.time.chrono.GJChronology.assemble : $l5 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $l6 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: long julianToGregorianByYear(long)>($l5)
org.joda.time.chrono.GJChronology.assemble : $l6 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: long julianToGregorianByYear(long)>($l5) >>>>>>>> org.joda.time.chrono.GJChronology.julianToGregorianByYear : $r1 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.JulianChronology iJulianChronology>
org.joda.time.chrono.GJChronology.julianToGregorianByYear : $r1 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.JulianChronology iJulianChronology> >>>>>>>> org.joda.time.chrono.GJChronology.julianToGregorianByYear : $r2 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology iGregorianChronology>
org.joda.time.chrono.GJChronology.julianToGregorianByYear : $r2 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology iGregorianChronology> >>>>>>>> org.joda.time.chrono.GJChronology.julianToGregorianByYear : $l1 = staticinvoke <org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>(l0, $r1, $r2)
org.joda.time.chrono.GJChronology.julianToGregorianByYear : $l1 = staticinvoke <org.joda.time.chrono.GJChronology: long convertByYear(long,org.joda.time.Chronology,org.joda.time.Chronology)>(l0, $r1, $r2) >>>>>>>> org.joda.time.chrono.GJChronology.convertByYear : $r2 = virtualinvoke r0.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.chrono.GJChronology.convertByYear : $r2 = virtualinvoke r0.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.year : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear>
org.joda.time.chrono.AssembledChronology.year : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.year : return $r1
org.joda.time.chrono.AssembledChronology.year : return $r1 >>>>>>>> org.joda.time.chrono.GJChronology.convertByYear : $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>(l0)
org.joda.time.chrono.GJChronology.convertByYear : $i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.field.SkipDateTimeField.get : i1 = specialinvoke r0.<org.joda.time.field.DelegatedDateTimeField: int get(long)>(l0)
org.joda.time.field.SkipDateTimeField.get : i1 = specialinvoke r0.<org.joda.time.field.DelegatedDateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.field.DelegatedDateTimeField.get : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DelegatedDateTimeField.get : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.field.DelegatedDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.DateTimeField: int get(long)>(l0)
org.joda.time.field.DelegatedDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.DateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicYearDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getAverageMillisPerYearDividedByTwo()>()
org.joda.time.chrono.BasicChronology.getYear : l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getAverageMillisPerYearDividedByTwo()>() >>>>>>>> org.joda.time.chrono.JulianChronology.getAverageMillisPerYearDividedByTwo : return 15778800000L
org.joda.time.chrono.JulianChronology.getAverageMillisPerYearDividedByTwo : return 15778800000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $l7 = l0 >> 1
org.joda.time.chrono.BasicChronology.getYear : $l7 = l0 >> 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $l8 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getApproxMillisAtEpochDividedByTwo()>()
org.joda.time.chrono.BasicChronology.getYear : $l8 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getApproxMillisAtEpochDividedByTwo()>() >>>>>>>> org.joda.time.chrono.JulianChronology.getApproxMillisAtEpochDividedByTwo : return 31083663600000L
org.joda.time.chrono.JulianChronology.getApproxMillisAtEpochDividedByTwo : return 31083663600000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l2 = $l7 + $l8
org.joda.time.chrono.BasicChronology.getYear : l2 = $l7 + $l8 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $b9 = l2 cmp 0L
org.joda.time.chrono.BasicChronology.getYear : $b9 = l2 cmp 0L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $b9 >= 0
org.joda.time.chrono.BasicChronology.getYear : if $b9 >= 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $l11 = l2 / l1
org.joda.time.chrono.BasicChronology.getYear : $l11 = l2 / l1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : i3 = (int) $l11
org.joda.time.chrono.BasicChronology.getYear : i3 = (int) $l11 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i3)
org.joda.time.chrono.BasicChronology.getYear : l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i3) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMillis : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>(i0)
org.joda.time.chrono.BasicChronology.getYearMillis : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $r2 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache>
org.joda.time.chrono.BasicChronology.getYearInfo : $r2 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $i1 = i0 & 1023
org.joda.time.chrono.BasicChronology.getYearInfo : $i1 = i0 & 1023 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : r1 = $r2[$i1]
org.joda.time.chrono.BasicChronology.getYearInfo : r1 = $r2[$i1] >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : if r1 == null
org.joda.time.chrono.BasicChronology.getYearInfo : if r1 == null >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $i2 = r1.<org.joda.time.chrono.BasicChronology$YearInfo: int iYear>
org.joda.time.chrono.BasicChronology.getYearInfo : $i2 = r1.<org.joda.time.chrono.BasicChronology$YearInfo: int iYear> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : if $i2 == i0
org.joda.time.chrono.BasicChronology.getYearInfo : if $i2 == i0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : return r1
org.joda.time.chrono.BasicChronology.getYearInfo : return r1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMillis : $l1 = $r1.<org.joda.time.chrono.BasicChronology$YearInfo: long iFirstDayMillis>
org.joda.time.chrono.BasicChronology.getYearMillis : $l1 = $r1.<org.joda.time.chrono.BasicChronology$YearInfo: long iFirstDayMillis> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMillis : return $l1
org.joda.time.chrono.BasicChronology.getYearMillis : return $l1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l5 = l0 - l4
org.joda.time.chrono.BasicChronology.getYear : l5 = l0 - l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $b12 = l5 cmp 0L
org.joda.time.chrono.BasicChronology.getYear : $b12 = l5 cmp 0L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $b12 >= 0
org.joda.time.chrono.BasicChronology.getYear : if $b12 >= 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $b13 = l5 cmp 31536000000L
org.joda.time.chrono.BasicChronology.getYear : $b13 = l5 cmp 31536000000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $b13 < 0
org.joda.time.chrono.BasicChronology.getYear : if $b13 < 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : return i3
org.joda.time.chrono.BasicChronology.getYear : return i3 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.get : return $i1
org.joda.time.chrono.BasicYearDateTimeField.get : return $i1 >>>>>>>> org.joda.time.field.DelegatedDateTimeField.get : return $i1
org.joda.time.field.DelegatedDateTimeField.get : return $i1 >>>>>>>> org.joda.time.field.SkipDateTimeField.get : $i2 = r0.<org.joda.time.field.SkipDateTimeField: int iSkip>
org.joda.time.field.SkipDateTimeField.get : $i2 = r0.<org.joda.time.field.SkipDateTimeField: int iSkip> >>>>>>>> org.joda.time.field.SkipDateTimeField.get : if i1 > $i2
org.joda.time.field.SkipDateTimeField.get : if i1 > $i2 >>>>>>>> org.joda.time.field.SkipDateTimeField.get : return i1
org.joda.time.field.SkipDateTimeField.get : return i1 >>>>>>>> org.joda.time.chrono.GJChronology.convertByYear : $r3 = virtualinvoke r0.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.chrono.GJChronology.convertByYear : $r3 = virtualinvoke r0.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.monthOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear>
org.joda.time.chrono.AssembledChronology.monthOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.monthOfYear : return $r1
org.joda.time.chrono.AssembledChronology.monthOfYear : return $r1 >>>>>>>> org.joda.time.chrono.GJChronology.convertByYear : $i2 = virtualinvoke $r3.<org.joda.time.DateTimeField: int get(long)>(l0)
org.joda.time.chrono.GJChronology.convertByYear : $i2 = virtualinvoke $r3.<org.joda.time.DateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long)>(l0)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getMonthOfYear : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicChronology.getMonthOfYear : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getMonthOfYear : $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, $i1)
org.joda.time.chrono.BasicChronology.getMonthOfYear : $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, $i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMillis(int)>(i1)
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMillis(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l4 = l0 - $l3
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l4 = l0 - $l3 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l5 = $l4 >> 10
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l5 = $l4 >> 10 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : i2 = (int) $l5
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : i2 = (int) $l5 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i1)
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i1) >>>>>>>> org.joda.time.chrono.JulianChronology.isLeapYear : $i1 = i0 & 3
org.joda.time.chrono.JulianChronology.isLeapYear : $i1 = i0 & 3 >>>>>>>> org.joda.time.chrono.JulianChronology.isLeapYear : if $i1 != 0
org.joda.time.chrono.JulianChronology.isLeapYear : if $i1 != 0 >>>>>>>> org.joda.time.chrono.JulianChronology.isLeapYear : $z0 = 0
org.joda.time.chrono.JulianChronology.isLeapYear : $z0 = 0 >>>>>>>> org.joda.time.chrono.JulianChronology.isLeapYear : return $z0
org.joda.time.chrono.JulianChronology.isLeapYear : return $z0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if $z0 == 0
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 15271875
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 15271875 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 23034375
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 23034375 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 25650000
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 25650000 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 10
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 10 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : goto [?= return $b6]
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : goto [?= return $b6] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : return $b6
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : return $b6 >>>>>>>> org.joda.time.chrono.BasicChronology.getMonthOfYear : return $i2
org.joda.time.chrono.BasicChronology.getMonthOfYear : return $i2 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : return $i1
org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : return $i1 >>>>>>>> org.joda.time.chrono.GJChronology.convertByYear : $r4 = virtualinvoke r0.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.chrono.GJChronology.convertByYear : $r4 = virtualinvoke r0.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfMonth : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth>
org.joda.time.chrono.AssembledChronology.dayOfMonth : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth> >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfMonth : return $r1
org.joda.time.chrono.AssembledChronology.dayOfMonth : return $r1 >>>>>>>> org.joda.time.chrono.GJChronology.convertByYear : $i3 = virtualinvoke $r4.<org.joda.time.DateTimeField: int get(long)>(l0)
org.joda.time.chrono.GJChronology.convertByYear : $i3 = virtualinvoke $r4.<org.joda.time.DateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long)>(l0)
org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicChronology.getDayOfMonth : i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i1)
org.joda.time.chrono.BasicChronology.getDayOfMonth : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i1) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l0, i1, i2)
org.joda.time.chrono.BasicChronology.getDayOfMonth : $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l0, i1, i2) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1)
org.joda.time.chrono.BasicChronology.getDayOfMonth : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i1, i2)
org.joda.time.chrono.BasicChronology.getDayOfMonth : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i1, i2) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0)
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : if $z0 == 0
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $r2 = <org.joda.time.chrono.BasicGJChronology: long[] MIN_TOTAL_MILLIS_BY_MONTH_ARRAY>
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $r2 = <org.joda.time.chrono.BasicGJChronology: long[] MIN_TOTAL_MILLIS_BY_MONTH_ARRAY> >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $i4 = i1 - 1
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $i4 = i1 - 1 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $l5 = $r2[$i4]
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $l5 = $r2[$i4] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : return $l5
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : return $l5 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : l5 = l3 + $l4
org.joda.time.chrono.BasicChronology.getDayOfMonth : l5 = l3 + $l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $l6 = l0 - l5
org.joda.time.chrono.BasicChronology.getDayOfMonth : $l6 = l0 - l5 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $l7 = $l6 / 86400000L
org.joda.time.chrono.BasicChronology.getDayOfMonth : $l7 = $l6 / 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $i8 = (int) $l7
org.joda.time.chrono.BasicChronology.getDayOfMonth : $i8 = (int) $l7 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $i9 = $i8 + 1
org.joda.time.chrono.BasicChronology.getDayOfMonth : $i9 = $i8 + 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : return $i9
org.joda.time.chrono.BasicChronology.getDayOfMonth : return $i9 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : return $i3
org.joda.time.chrono.BasicChronology.getDayOfMonth : return $i3 >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : return $i1
org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : return $i1 >>>>>>>> org.joda.time.chrono.GJChronology.convertByYear : $r5 = virtualinvoke r0.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>()
org.joda.time.chrono.GJChronology.convertByYear : $r5 = virtualinvoke r0.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.millisOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay>
org.joda.time.chrono.AssembledChronology.millisOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.millisOfDay : return $r1
org.joda.time.chrono.AssembledChronology.millisOfDay : return $r1 >>>>>>>> org.joda.time.chrono.GJChronology.convertByYear : $i4 = virtualinvoke $r5.<org.joda.time.DateTimeField: int get(long)>(l0)
org.joda.time.chrono.GJChronology.convertByYear : $i4 = virtualinvoke $r5.<org.joda.time.DateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $b1 = l0 cmp 0L
org.joda.time.field.PreciseDateTimeField.get : $b1 = l0 cmp 0L >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : if $b1 < 0
org.joda.time.field.PreciseDateTimeField.get : if $b1 < 0 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $i8 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange>
org.joda.time.field.PreciseDateTimeField.get : $i8 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange> >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $i9 = $i8 - 1
org.joda.time.field.PreciseDateTimeField.get : $i9 = $i8 - 1 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l10 = l0 + 1L
org.joda.time.field.PreciseDateTimeField.get : $l10 = l0 + 1L >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l11 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: long getUnitMillis()>()
org.joda.time.field.PreciseDateTimeField.get : $l11 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: long getUnitMillis()>() >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : return $l0
org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : return $l0 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l12 = $l10 / $l11
org.joda.time.field.PreciseDateTimeField.get : $l12 = $l10 / $l11 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $i13 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange>
org.joda.time.field.PreciseDateTimeField.get : $i13 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange> >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l14 = (long) $i13
org.joda.time.field.PreciseDateTimeField.get : $l14 = (long) $i13 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l15 = $l12 % $l14
org.joda.time.field.PreciseDateTimeField.get : $l15 = $l12 % $l14 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $i16 = (int) $l15
org.joda.time.field.PreciseDateTimeField.get : $i16 = (int) $l15 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $i17 = $i9 + $i16
org.joda.time.field.PreciseDateTimeField.get : $i17 = $i9 + $i16 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : return $i17
org.joda.time.field.PreciseDateTimeField.get : return $i17 >>>>>>>> org.joda.time.chrono.GJChronology.convertByYear : $l5 = virtualinvoke r1.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int)>($i1, $i2, $i3, $i4)
org.joda.time.chrono.GJChronology.convertByYear : $l5 = virtualinvoke r1.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int)>($i1, $i2, $i3, $i4) >>>>>>>> org.joda.time.chrono.GregorianChronology.getDateTimeMillis : $l4 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getDateTimeMillis(int,int,int,int)>(i0, i1, i2, i3)
org.joda.time.chrono.GregorianChronology.getDateTimeMillis : $l4 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getDateTimeMillis(int,int,int,int)>(i0, i1, i2, i3) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>() >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : r1 = $r2
org.joda.time.chrono.BasicChronology.getDateTimeMillis : r1 = $r2 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : if $r2 == null
org.joda.time.chrono.BasicChronology.getDateTimeMillis : if $r2 == null >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r3 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfDay()>()
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r3 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfDay()>() >>>>>>>> org.joda.time.DateTimeFieldType.millisOfDay : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MILLIS_OF_DAY_TYPE>
org.joda.time.DateTimeFieldType.millisOfDay : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MILLIS_OF_DAY_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.millisOfDay : return $r0
org.joda.time.DateTimeFieldType.millisOfDay : return $r0 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r3, i3, 0, 86400000)
org.joda.time.chrono.BasicChronology.getDateTimeMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r3, i3, 0, 86400000) >>>>>>>> org.joda.time.field.FieldUtils.verifyValueBounds : if i0 < i1
org.joda.time.field.FieldUtils.verifyValueBounds : if i0 < i1 >>>>>>>> org.joda.time.field.FieldUtils.verifyValueBounds : if i0 <= i2
org.joda.time.field.FieldUtils.verifyValueBounds : if i0 <= i2 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l5 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>(i0, i1, i2)
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l5 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>(i0, i1, i2) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>()
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>() >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMinYear()>()
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMinYear()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getMinYear : return -292275054
org.joda.time.chrono.GregorianChronology.getMinYear : return -292275054 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMaxYear()>()
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMaxYear()>() >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r1, i0, $i3, $i4)
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r1, i0, $i3, $i4) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>()
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>() >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i5 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMaxMonth(int)>(i0)
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i5 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMaxMonth(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicChronology.getMaxMonth : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMaxMonth()>()
org.joda.time.chrono.BasicChronology.getMaxMonth : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMaxMonth()>() >>>>>>>> org.joda.time.chrono.BasicChronology.getMaxMonth : return $i1
org.joda.time.chrono.BasicChronology.getMaxMonth : return $i1 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r2, i1, 1, $i5)
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r2, i1, 1, $i5) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $r3 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>()
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $r3 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>() >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i6 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>(i0, i1)
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i6 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>(i0, i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0)
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0) >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : $i1 = i0 & 3
org.joda.time.chrono.GregorianChronology.isLeapYear : $i1 = i0 & 3 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : if $i1 != 0
org.joda.time.chrono.GregorianChronology.isLeapYear : if $i1 != 0 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : $z0 = 0
org.joda.time.chrono.GregorianChronology.isLeapYear : $z0 = 0 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : return $z0
org.joda.time.chrono.GregorianChronology.isLeapYear : return $z0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : if $z0 == 0
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $r2 = <org.joda.time.chrono.BasicGJChronology: int[] MIN_DAYS_PER_MONTH_ARRAY>
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $r2 = <org.joda.time.chrono.BasicGJChronology: int[] MIN_DAYS_PER_MONTH_ARRAY> >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i4 = i1 - 1
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i4 = i1 - 1 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i5 = $r2[$i4]
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i5 = $r2[$i4] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : return $i5
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : return $i5 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r3, i2, 1, $i6)
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r3, i2, 1, $i6) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $l7 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>(i0, i1, i2)
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $l7 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>(i0, i1, i2) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0)
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i0, i1)
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i0, i1) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l5 = l3 + $l4
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l5 = l3 + $l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $i6 = i2 - 1
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $i6 = i2 - 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l7 = (long) $i6
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l7 = (long) $i6 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l8 = $l7 * 86400000L
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l8 = $l7 * 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l9 = l5 + $l8
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l9 = l5 + $l8 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : return $l9
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : return $l9 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : return $l7
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : return $l7 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l6 = (long) i3
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l6 = (long) i3 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l7 = $l5 + $l6
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l7 = $l5 + $l6 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : return $l7
org.joda.time.chrono.BasicChronology.getDateTimeMillis : return $l7 >>>>>>>> org.joda.time.chrono.GregorianChronology.getDateTimeMillis : return $l4
org.joda.time.chrono.GregorianChronology.getDateTimeMillis : return $l4 >>>>>>>> org.joda.time.chrono.GJChronology.convertByYear : return $l5
org.joda.time.chrono.GJChronology.convertByYear : return $l5 >>>>>>>> org.joda.time.chrono.GJChronology.julianToGregorianByYear : return $l1
org.joda.time.chrono.GJChronology.julianToGregorianByYear : return $l1 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $l7 = $l4 - $l6
org.joda.time.chrono.GJChronology.assemble : $l7 = $l4 - $l6 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : r0.<org.joda.time.chrono.GJChronology: long iGapDuration> = $l7
org.joda.time.chrono.GJChronology.assemble : r0.<org.joda.time.chrono.GJChronology: long iGapDuration> = $l7 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : virtualinvoke r1.<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>(r4)
org.joda.time.chrono.GJChronology.assemble : virtualinvoke r1.<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>(r4) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField millis()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField millis()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.millis : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMillis>
org.joda.time.chrono.AssembledChronology.millis : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMillis> >>>>>>>> org.joda.time.chrono.AssembledChronology.millis : return $r1
org.joda.time.chrono.AssembledChronology.millis : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r2 = $r3
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r2 = $r3 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z0 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r3)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z0 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r3) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.isSupported : if r0 != null
org.joda.time.chrono.AssembledChronology$Fields.isSupported : if r0 != null >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.isSupported : $z0 = virtualinvoke r0.<org.joda.time.DurationField: boolean isSupported()>()
org.joda.time.chrono.AssembledChronology$Fields.isSupported : $z0 = virtualinvoke r0.<org.joda.time.DurationField: boolean isSupported()>() >>>>>>>> org.joda.time.field.MillisDurationField.isSupported : return 1
org.joda.time.field.MillisDurationField.isSupported : return 1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.isSupported : return $z0
org.joda.time.chrono.AssembledChronology$Fields.isSupported : return $z0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z0 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z0 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField millis> = r2
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField millis> = r2 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField seconds()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField seconds()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.seconds : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iSeconds>
org.joda.time.chrono.AssembledChronology.seconds : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iSeconds> >>>>>>>> org.joda.time.chrono.AssembledChronology.seconds : return $r1
org.joda.time.chrono.AssembledChronology.seconds : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r5 = $r4
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r5 = $r4 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z1 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r4)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z1 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r4) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z1 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z1 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField seconds> = r5
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField seconds> = r5 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r6 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField minutes()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r6 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField minutes()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.minutes : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMinutes>
org.joda.time.chrono.AssembledChronology.minutes : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMinutes> >>>>>>>> org.joda.time.chrono.AssembledChronology.minutes : return $r1
org.joda.time.chrono.AssembledChronology.minutes : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r7 = $r6
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r7 = $r6 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z2 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r6)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z2 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r6) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z2 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z2 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField minutes> = r7
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField minutes> = r7 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r8 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField hours()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r8 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField hours()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.hours : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHours>
org.joda.time.chrono.AssembledChronology.hours : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHours> >>>>>>>> org.joda.time.chrono.AssembledChronology.hours : return $r1
org.joda.time.chrono.AssembledChronology.hours : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r9 = $r8
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r9 = $r8 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z3 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r8)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z3 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r8) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z3 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z3 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField hours> = r9
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField hours> = r9 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r10 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField halfdays()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r10 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField halfdays()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.halfdays : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHalfdays>
org.joda.time.chrono.AssembledChronology.halfdays : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHalfdays> >>>>>>>> org.joda.time.chrono.AssembledChronology.halfdays : return $r1
org.joda.time.chrono.AssembledChronology.halfdays : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r11 = $r10
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r11 = $r10 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z4 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r10)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z4 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r10) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z4 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z4 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField halfdays> = r11
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField halfdays> = r11 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r12 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField days()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r12 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField days()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.days : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays>
org.joda.time.chrono.AssembledChronology.days : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays> >>>>>>>> org.joda.time.chrono.AssembledChronology.days : return $r1
org.joda.time.chrono.AssembledChronology.days : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r13 = $r12
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r13 = $r12 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z5 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r12)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z5 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r12) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z5 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z5 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days> = r13
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days> = r13 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r14 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField weeks()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r14 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField weeks()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.weeks : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeeks>
org.joda.time.chrono.AssembledChronology.weeks : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeeks> >>>>>>>> org.joda.time.chrono.AssembledChronology.weeks : return $r1
org.joda.time.chrono.AssembledChronology.weeks : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r15 = $r14
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r15 = $r14 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z6 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r14)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z6 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r14) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z6 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z6 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weeks> = r15
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weeks> = r15 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r16 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField weekyears()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r16 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField weekyears()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.weekyears : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeekyears>
org.joda.time.chrono.AssembledChronology.weekyears : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeekyears> >>>>>>>> org.joda.time.chrono.AssembledChronology.weekyears : return $r1
org.joda.time.chrono.AssembledChronology.weekyears : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r17 = $r16
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r17 = $r16 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z7 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r16)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z7 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r16) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z7 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z7 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears> = r17
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears> = r17 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r18 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField months()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r18 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField months()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.months : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMonths>
org.joda.time.chrono.AssembledChronology.months : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMonths> >>>>>>>> org.joda.time.chrono.AssembledChronology.months : return $r1
org.joda.time.chrono.AssembledChronology.months : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r19 = $r18
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r19 = $r18 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z8 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r18)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z8 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r18) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z8 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z8 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months> = r19
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months> = r19 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r20 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField years()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r20 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField years()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.years : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iYears>
org.joda.time.chrono.AssembledChronology.years : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iYears> >>>>>>>> org.joda.time.chrono.AssembledChronology.years : return $r1
org.joda.time.chrono.AssembledChronology.years : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r21 = $r20
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r21 = $r20 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z9 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r20)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z9 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r20) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z9 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z9 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years> = r21
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years> = r21 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r22 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField centuries()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r22 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField centuries()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.centuries : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iCenturies>
org.joda.time.chrono.AssembledChronology.centuries : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iCenturies> >>>>>>>> org.joda.time.chrono.AssembledChronology.centuries : return $r1
org.joda.time.chrono.AssembledChronology.centuries : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r23 = $r22
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r23 = $r22 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z10 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r22)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z10 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r22) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z10 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z10 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries> = r23
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries> = r23 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r24 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField eras()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r24 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField eras()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.eras : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iEras>
org.joda.time.chrono.AssembledChronology.eras : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iEras> >>>>>>>> org.joda.time.chrono.AssembledChronology.eras : return $r1
org.joda.time.chrono.AssembledChronology.eras : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r25 = $r24
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r25 = $r24 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z11 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r24)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z11 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r24) >>>>>>>> org.joda.time.field.UnsupportedDurationField.isSupported : return 0
org.joda.time.field.UnsupportedDurationField.isSupported : return 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z11 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z11 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r26 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r26 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.millisOfSecond : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfSecond>
org.joda.time.chrono.AssembledChronology.millisOfSecond : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfSecond> >>>>>>>> org.joda.time.chrono.AssembledChronology.millisOfSecond : return $r1
org.joda.time.chrono.AssembledChronology.millisOfSecond : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r27 = $r26
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r27 = $r26 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z12 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r26)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z12 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r26) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.isSupported : $z0 = virtualinvoke r0.<org.joda.time.DateTimeField: boolean isSupported()>()
org.joda.time.chrono.AssembledChronology$Fields.isSupported : $z0 = virtualinvoke r0.<org.joda.time.DateTimeField: boolean isSupported()>() >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z12 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z12 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond> = r27
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond> = r27 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r28 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r28 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>() >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r29 = $r28
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r29 = $r28 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z13 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r28)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z13 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r28) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z13 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z13 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay> = r29
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay> = r29 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r30 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r30 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.secondOfMinute : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfMinute>
org.joda.time.chrono.AssembledChronology.secondOfMinute : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfMinute> >>>>>>>> org.joda.time.chrono.AssembledChronology.secondOfMinute : return $r1
org.joda.time.chrono.AssembledChronology.secondOfMinute : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r31 = $r30
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r31 = $r30 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z14 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r30)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z14 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r30) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z14 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z14 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute> = r31
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute> = r31 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r32 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfDay()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r32 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfDay()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.secondOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfDay>
org.joda.time.chrono.AssembledChronology.secondOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.secondOfDay : return $r1
org.joda.time.chrono.AssembledChronology.secondOfDay : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r33 = $r32
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r33 = $r32 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z15 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r32)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z15 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r32) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z15 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z15 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay> = r33
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay> = r33 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r34 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r34 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.minuteOfHour : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfHour>
org.joda.time.chrono.AssembledChronology.minuteOfHour : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfHour> >>>>>>>> org.joda.time.chrono.AssembledChronology.minuteOfHour : return $r1
org.joda.time.chrono.AssembledChronology.minuteOfHour : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r35 = $r34
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r35 = $r34 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z16 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r34)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z16 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r34) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z16 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z16 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour> = r35
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour> = r35 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r36 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfDay()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r36 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfDay()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.minuteOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfDay>
org.joda.time.chrono.AssembledChronology.minuteOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.minuteOfDay : return $r1
org.joda.time.chrono.AssembledChronology.minuteOfDay : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r37 = $r36
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r37 = $r36 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z17 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r36)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z17 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r36) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z17 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z17 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay> = r37
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay> = r37 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r38 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r38 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.hourOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay>
org.joda.time.chrono.AssembledChronology.hourOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.hourOfDay : return $r1
org.joda.time.chrono.AssembledChronology.hourOfDay : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r39 = $r38
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r39 = $r38 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z18 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r38)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z18 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r38) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z18 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z18 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay> = r39
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay> = r39 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r40 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField clockhourOfDay()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r40 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField clockhourOfDay()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.clockhourOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfDay>
org.joda.time.chrono.AssembledChronology.clockhourOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.clockhourOfDay : return $r1
org.joda.time.chrono.AssembledChronology.clockhourOfDay : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r41 = $r40
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r41 = $r40 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z19 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r40)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z19 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r40) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z19 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z19 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay> = r41
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay> = r41 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r42 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfHalfday()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r42 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfHalfday()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.hourOfHalfday : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfHalfday>
org.joda.time.chrono.AssembledChronology.hourOfHalfday : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfHalfday> >>>>>>>> org.joda.time.chrono.AssembledChronology.hourOfHalfday : return $r1
org.joda.time.chrono.AssembledChronology.hourOfHalfday : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r43 = $r42
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r43 = $r42 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z20 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r42)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z20 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r42) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z20 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z20 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday> = r43
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday> = r43 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r44 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField clockhourOfHalfday()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r44 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField clockhourOfHalfday()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.clockhourOfHalfday : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfHalfday>
org.joda.time.chrono.AssembledChronology.clockhourOfHalfday : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfHalfday> >>>>>>>> org.joda.time.chrono.AssembledChronology.clockhourOfHalfday : return $r1
org.joda.time.chrono.AssembledChronology.clockhourOfHalfday : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r45 = $r44
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r45 = $r44 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z21 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r44)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z21 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r44) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z21 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z21 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday> = r45
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday> = r45 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r46 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField halfdayOfDay()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r46 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField halfdayOfDay()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.halfdayOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHalfdayOfDay>
org.joda.time.chrono.AssembledChronology.halfdayOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHalfdayOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.halfdayOfDay : return $r1
org.joda.time.chrono.AssembledChronology.halfdayOfDay : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r47 = $r46
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r47 = $r46 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z22 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r46)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z22 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r46) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z22 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z22 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay> = r47
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay> = r47 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r48 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r48 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfWeek : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfWeek>
org.joda.time.chrono.AssembledChronology.dayOfWeek : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfWeek> >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfWeek : return $r1
org.joda.time.chrono.AssembledChronology.dayOfWeek : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r49 = $r48
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r49 = $r48 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z23 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r48)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z23 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r48) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z23 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z23 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek> = r49
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek> = r49 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r50 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r50 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>() >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r51 = $r50
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r51 = $r50 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z24 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r50)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z24 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r50) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z24 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z24 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth> = r51
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth> = r51 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r52 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfYear()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r52 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfYear()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfYear>
org.joda.time.chrono.AssembledChronology.dayOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfYear : return $r1
org.joda.time.chrono.AssembledChronology.dayOfYear : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r53 = $r52
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r53 = $r52 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z25 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r52)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z25 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r52) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z25 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z25 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear> = r53
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear> = r53 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r54 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekOfWeekyear()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r54 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekOfWeekyear()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.weekOfWeekyear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekOfWeekyear>
org.joda.time.chrono.AssembledChronology.weekOfWeekyear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekOfWeekyear> >>>>>>>> org.joda.time.chrono.AssembledChronology.weekOfWeekyear : return $r1
org.joda.time.chrono.AssembledChronology.weekOfWeekyear : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r55 = $r54
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r55 = $r54 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z26 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r54)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z26 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r54) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z26 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z26 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear> = r55
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear> = r55 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r56 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekyear()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r56 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekyear()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.weekyear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyear>
org.joda.time.chrono.AssembledChronology.weekyear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyear> >>>>>>>> org.joda.time.chrono.AssembledChronology.weekyear : return $r1
org.joda.time.chrono.AssembledChronology.weekyear : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r57 = $r56
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r57 = $r56 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z27 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r56)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z27 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r56) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z27 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z27 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> = r57
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> = r57 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r58 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekyearOfCentury()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r58 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekyearOfCentury()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.weekyearOfCentury : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyearOfCentury>
org.joda.time.chrono.AssembledChronology.weekyearOfCentury : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyearOfCentury> >>>>>>>> org.joda.time.chrono.AssembledChronology.weekyearOfCentury : return $r1
org.joda.time.chrono.AssembledChronology.weekyearOfCentury : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r59 = $r58
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r59 = $r58 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z28 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r58)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z28 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r58) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z28 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z28 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> = r59
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> = r59 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r60 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r60 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>() >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r61 = $r60
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r61 = $r60 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z29 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r60)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z29 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r60) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z29 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z29 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> = r61
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> = r61 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r62 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r62 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r63 = $r62
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r63 = $r62 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z30 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r62)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z30 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r62) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z30 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z30 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> = r63
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> = r63 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r64 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField yearOfEra()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r64 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField yearOfEra()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.yearOfEra : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfEra>
org.joda.time.chrono.AssembledChronology.yearOfEra : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfEra> >>>>>>>> org.joda.time.chrono.AssembledChronology.yearOfEra : return $r1
org.joda.time.chrono.AssembledChronology.yearOfEra : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r65 = $r64
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r65 = $r64 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z31 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r64)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z31 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r64) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z31 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z31 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> = r65
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> = r65 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r66 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField yearOfCentury()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r66 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField yearOfCentury()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.yearOfCentury : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfCentury>
org.joda.time.chrono.AssembledChronology.yearOfCentury : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfCentury> >>>>>>>> org.joda.time.chrono.AssembledChronology.yearOfCentury : return $r1
org.joda.time.chrono.AssembledChronology.yearOfCentury : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r67 = $r66
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r67 = $r66 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z32 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r66)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z32 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r66) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z32 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z32 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> = r67
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> = r67 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r68 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField centuryOfEra()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r68 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField centuryOfEra()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.centuryOfEra : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iCenturyOfEra>
org.joda.time.chrono.AssembledChronology.centuryOfEra : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iCenturyOfEra> >>>>>>>> org.joda.time.chrono.AssembledChronology.centuryOfEra : return $r1
org.joda.time.chrono.AssembledChronology.centuryOfEra : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r69 = $r68
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r69 = $r68 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z33 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r68)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z33 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r68) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z33 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z33 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> = r69
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> = r69 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r70 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField era()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r70 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField era()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.era : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iEra>
org.joda.time.chrono.AssembledChronology.era : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iEra> >>>>>>>> org.joda.time.chrono.AssembledChronology.era : return $r1
org.joda.time.chrono.AssembledChronology.era : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r71 = $r70
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r71 = $r70 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z34 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r70)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z34 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r70) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z34 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z34 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> = r71
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> = r71 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r13 = virtualinvoke r4.<org.joda.time.chrono.GregorianChronology: org.joda.time.DateTimeField millisOfDay()>()
org.joda.time.chrono.GJChronology.assemble : $r13 = virtualinvoke r4.<org.joda.time.chrono.GregorianChronology: org.joda.time.DateTimeField millisOfDay()>() >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $l8 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>
org.joda.time.chrono.GJChronology.assemble : $l8 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $i9 = virtualinvoke $r13.<org.joda.time.DateTimeField: int get(long)>($l8)
org.joda.time.chrono.GJChronology.assemble : $i9 = virtualinvoke $r13.<org.joda.time.DateTimeField: int get(long)>($l8) >>>>>>>> org.joda.time.chrono.GJChronology.assemble : if $i9 != 0
org.joda.time.chrono.GJChronology.assemble : if $i9 != 0 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r14 = new org.joda.time.chrono.GJChronology$CutoverField
org.joda.time.chrono.GJChronology.assemble : $r14 = new org.joda.time.chrono.GJChronology$CutoverField >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r15 = virtualinvoke r3.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField millisOfSecond()>()
org.joda.time.chrono.GJChronology.assemble : $r15 = virtualinvoke r3.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField millisOfSecond()>() >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r16 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond>
org.joda.time.chrono.GJChronology.assemble : $r16 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $l10 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>
org.joda.time.chrono.GJChronology.assemble : $l10 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : specialinvoke $r14.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r15, $r16, $l10)
org.joda.time.chrono.GJChronology.assemble : specialinvoke $r14.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r15, $r16, $l10) >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getDurationField : $r1 = r0.<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField iUnitField>
org.joda.time.field.PreciseDurationDateTimeField.getDurationField : $r1 = r0.<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField iUnitField> >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getDurationField : return $r1
org.joda.time.field.PreciseDurationDateTimeField.getDurationField : return $r1 >>>>>>>> org.joda.time.field.PreciseDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.field.PreciseDateTimeField: org.joda.time.DurationField iRangeField>
org.joda.time.field.PreciseDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.field.PreciseDateTimeField: org.joda.time.DurationField iRangeField> >>>>>>>> org.joda.time.field.PreciseDateTimeField.getRangeDurationField : return $r1
org.joda.time.field.PreciseDateTimeField.getRangeDurationField : return $r1 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond> = $r14
org.joda.time.chrono.GJChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond> = $r14 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r17 = new org.joda.time.chrono.GJChronology$CutoverField
org.joda.time.chrono.GJChronology.assemble : $r17 = new org.joda.time.chrono.GJChronology$CutoverField >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r18 = virtualinvoke r3.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField millisOfDay()>()
org.joda.time.chrono.GJChronology.assemble : $r18 = virtualinvoke r3.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField millisOfDay()>() >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r19 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay>
org.joda.time.chrono.GJChronology.assemble : $r19 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $l11 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>
org.joda.time.chrono.GJChronology.assemble : $l11 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : specialinvoke $r17.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r18, $r19, $l11)
org.joda.time.chrono.GJChronology.assemble : specialinvoke $r17.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r18, $r19, $l11) >>>>>>>> org.joda.time.chrono.GJChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay> = $r17
org.joda.time.chrono.GJChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay> = $r17 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r20 = new org.joda.time.chrono.GJChronology$CutoverField
org.joda.time.chrono.GJChronology.assemble : $r20 = new org.joda.time.chrono.GJChronology$CutoverField >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r21 = virtualinvoke r3.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField secondOfMinute()>()
org.joda.time.chrono.GJChronology.assemble : $r21 = virtualinvoke r3.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField secondOfMinute()>() >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r22 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute>
org.joda.time.chrono.GJChronology.assemble : $r22 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $l12 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>
org.joda.time.chrono.GJChronology.assemble : $l12 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : specialinvoke $r20.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r21, $r22, $l12)
org.joda.time.chrono.GJChronology.assemble : specialinvoke $r20.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r21, $r22, $l12) >>>>>>>> org.joda.time.chrono.GJChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute> = $r20
org.joda.time.chrono.GJChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute> = $r20 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r23 = new org.joda.time.chrono.GJChronology$CutoverField
org.joda.time.chrono.GJChronology.assemble : $r23 = new org.joda.time.chrono.GJChronology$CutoverField >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r24 = virtualinvoke r3.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField secondOfDay()>()
org.joda.time.chrono.GJChronology.assemble : $r24 = virtualinvoke r3.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField secondOfDay()>() >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r25 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay>
org.joda.time.chrono.GJChronology.assemble : $r25 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $l13 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>
org.joda.time.chrono.GJChronology.assemble : $l13 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : specialinvoke $r23.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r24, $r25, $l13)
org.joda.time.chrono.GJChronology.assemble : specialinvoke $r23.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r24, $r25, $l13) >>>>>>>> org.joda.time.chrono.GJChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay> = $r23
org.joda.time.chrono.GJChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay> = $r23 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r26 = new org.joda.time.chrono.GJChronology$CutoverField
org.joda.time.chrono.GJChronology.assemble : $r26 = new org.joda.time.chrono.GJChronology$CutoverField >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r27 = virtualinvoke r3.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField minuteOfHour()>()
org.joda.time.chrono.GJChronology.assemble : $r27 = virtualinvoke r3.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField minuteOfHour()>() >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r28 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour>
org.joda.time.chrono.GJChronology.assemble : $r28 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $l14 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>
org.joda.time.chrono.GJChronology.assemble : $l14 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : specialinvoke $r26.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r27, $r28, $l14)
org.joda.time.chrono.GJChronology.assemble : specialinvoke $r26.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r27, $r28, $l14) >>>>>>>> org.joda.time.chrono.GJChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour> = $r26
org.joda.time.chrono.GJChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour> = $r26 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r29 = new org.joda.time.chrono.GJChronology$CutoverField
org.joda.time.chrono.GJChronology.assemble : $r29 = new org.joda.time.chrono.GJChronology$CutoverField >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r30 = virtualinvoke r3.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField minuteOfDay()>()
org.joda.time.chrono.GJChronology.assemble : $r30 = virtualinvoke r3.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField minuteOfDay()>() >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r31 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay>
org.joda.time.chrono.GJChronology.assemble : $r31 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $l15 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>
org.joda.time.chrono.GJChronology.assemble : $l15 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : specialinvoke $r29.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r30, $r31, $l15)
org.joda.time.chrono.GJChronology.assemble : specialinvoke $r29.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r30, $r31, $l15) >>>>>>>> org.joda.time.chrono.GJChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay> = $r29
org.joda.time.chrono.GJChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay> = $r29 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r32 = new org.joda.time.chrono.GJChronology$CutoverField
org.joda.time.chrono.GJChronology.assemble : $r32 = new org.joda.time.chrono.GJChronology$CutoverField >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r33 = virtualinvoke r3.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField hourOfDay()>()
org.joda.time.chrono.GJChronology.assemble : $r33 = virtualinvoke r3.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField hourOfDay()>() >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r34 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay>
org.joda.time.chrono.GJChronology.assemble : $r34 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $l16 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>
org.joda.time.chrono.GJChronology.assemble : $l16 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : specialinvoke $r32.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r33, $r34, $l16)
org.joda.time.chrono.GJChronology.assemble : specialinvoke $r32.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r33, $r34, $l16) >>>>>>>> org.joda.time.chrono.GJChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay> = $r32
org.joda.time.chrono.GJChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay> = $r32 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r35 = new org.joda.time.chrono.GJChronology$CutoverField
org.joda.time.chrono.GJChronology.assemble : $r35 = new org.joda.time.chrono.GJChronology$CutoverField >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r36 = virtualinvoke r3.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField hourOfHalfday()>()
org.joda.time.chrono.GJChronology.assemble : $r36 = virtualinvoke r3.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField hourOfHalfday()>() >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r37 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday>
org.joda.time.chrono.GJChronology.assemble : $r37 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $l17 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>
org.joda.time.chrono.GJChronology.assemble : $l17 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : specialinvoke $r35.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r36, $r37, $l17)
org.joda.time.chrono.GJChronology.assemble : specialinvoke $r35.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r36, $r37, $l17) >>>>>>>> org.joda.time.chrono.GJChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday> = $r35
org.joda.time.chrono.GJChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday> = $r35 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r38 = new org.joda.time.chrono.GJChronology$CutoverField
org.joda.time.chrono.GJChronology.assemble : $r38 = new org.joda.time.chrono.GJChronology$CutoverField >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r39 = virtualinvoke r3.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField clockhourOfDay()>()
org.joda.time.chrono.GJChronology.assemble : $r39 = virtualinvoke r3.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField clockhourOfDay()>() >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r40 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay>
org.joda.time.chrono.GJChronology.assemble : $r40 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $l18 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>
org.joda.time.chrono.GJChronology.assemble : $l18 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : specialinvoke $r38.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r39, $r40, $l18)
org.joda.time.chrono.GJChronology.assemble : specialinvoke $r38.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r39, $r40, $l18) >>>>>>>> org.joda.time.field.DecoratedDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DecoratedDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.field.DecoratedDateTimeField.getRangeDurationField : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getRangeDurationField()>()
org.joda.time.field.DecoratedDateTimeField.getRangeDurationField : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getRangeDurationField()>() >>>>>>>> org.joda.time.field.DecoratedDateTimeField.getRangeDurationField : return $r2
org.joda.time.field.DecoratedDateTimeField.getRangeDurationField : return $r2 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay> = $r38
org.joda.time.chrono.GJChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay> = $r38 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r41 = new org.joda.time.chrono.GJChronology$CutoverField
org.joda.time.chrono.GJChronology.assemble : $r41 = new org.joda.time.chrono.GJChronology$CutoverField >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r42 = virtualinvoke r3.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField clockhourOfHalfday()>()
org.joda.time.chrono.GJChronology.assemble : $r42 = virtualinvoke r3.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField clockhourOfHalfday()>() >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r43 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday>
org.joda.time.chrono.GJChronology.assemble : $r43 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $l19 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>
org.joda.time.chrono.GJChronology.assemble : $l19 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : specialinvoke $r41.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r42, $r43, $l19)
org.joda.time.chrono.GJChronology.assemble : specialinvoke $r41.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r42, $r43, $l19) >>>>>>>> org.joda.time.chrono.GJChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday> = $r41
org.joda.time.chrono.GJChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday> = $r41 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r44 = new org.joda.time.chrono.GJChronology$CutoverField
org.joda.time.chrono.GJChronology.assemble : $r44 = new org.joda.time.chrono.GJChronology$CutoverField >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r45 = virtualinvoke r3.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField halfdayOfDay()>()
org.joda.time.chrono.GJChronology.assemble : $r45 = virtualinvoke r3.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField halfdayOfDay()>() >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r46 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay>
org.joda.time.chrono.GJChronology.assemble : $r46 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $l20 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>
org.joda.time.chrono.GJChronology.assemble : $l20 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : specialinvoke $r44.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r45, $r46, $l20)
org.joda.time.chrono.GJChronology.assemble : specialinvoke $r44.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r45, $r46, $l20) >>>>>>>> org.joda.time.chrono.GJChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay> = $r44
org.joda.time.chrono.GJChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay> = $r44 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r47 = new org.joda.time.chrono.GJChronology$CutoverField
org.joda.time.chrono.GJChronology.assemble : $r47 = new org.joda.time.chrono.GJChronology$CutoverField >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r48 = virtualinvoke r3.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField era()>()
org.joda.time.chrono.GJChronology.assemble : $r48 = virtualinvoke r3.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField era()>() >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r49 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era>
org.joda.time.chrono.GJChronology.assemble : $r49 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $l21 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>
org.joda.time.chrono.GJChronology.assemble : $l21 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : specialinvoke $r47.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r48, $r49, $l21)
org.joda.time.chrono.GJChronology.assemble : specialinvoke $r47.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r48, $r49, $l21) >>>>>>>> org.joda.time.chrono.GJEraDateTimeField.getDurationField : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType eras()>()
org.joda.time.chrono.GJEraDateTimeField.getDurationField : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType eras()>() >>>>>>>> org.joda.time.chrono.GJEraDateTimeField.getDurationField : $r2 = staticinvoke <org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>($r1)
org.joda.time.chrono.GJEraDateTimeField.getDurationField : $r2 = staticinvoke <org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>($r1) >>>>>>>> org.joda.time.chrono.GJEraDateTimeField.getDurationField : return $r2
org.joda.time.chrono.GJEraDateTimeField.getDurationField : return $r2 >>>>>>>> org.joda.time.chrono.GJEraDateTimeField.getRangeDurationField : return null
org.joda.time.chrono.GJEraDateTimeField.getRangeDurationField : return null >>>>>>>> org.joda.time.chrono.GJChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> = $r47
org.joda.time.chrono.GJChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> = $r47 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r50 = virtualinvoke r4.<org.joda.time.chrono.GregorianChronology: org.joda.time.DateTimeField year()>()
org.joda.time.chrono.GJChronology.assemble : $r50 = virtualinvoke r4.<org.joda.time.chrono.GregorianChronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $l22 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>
org.joda.time.chrono.GJChronology.assemble : $l22 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : l0 = virtualinvoke $r50.<org.joda.time.DateTimeField: long roundCeiling(long)>($l22)
org.joda.time.chrono.GJChronology.assemble : l0 = virtualinvoke $r50.<org.joda.time.DateTimeField: long roundCeiling(long)>($l22) >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.roundCeiling : i1 = virtualinvoke r0.<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>(l0)
org.joda.time.chrono.BasicYearDateTimeField.roundCeiling : i1 = virtualinvoke r0.<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.chrono.GregorianChronology.getAverageMillisPerYearDividedByTwo : return 15778476000L
org.joda.time.chrono.GregorianChronology.getAverageMillisPerYearDividedByTwo : return 15778476000L >>>>>>>> org.joda.time.chrono.GregorianChronology.getApproxMillisAtEpochDividedByTwo : return 31083597720000L
org.joda.time.chrono.GregorianChronology.getApproxMillisAtEpochDividedByTwo : return 31083597720000L >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.roundCeiling : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.roundCeiling : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.roundCeiling : l2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1)
org.joda.time.chrono.BasicYearDateTimeField.roundCeiling : l2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.roundCeiling : $b3 = l0 cmp l2
org.joda.time.chrono.BasicYearDateTimeField.roundCeiling : $b3 = l0 cmp l2 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.roundCeiling : if $b3 == 0
org.joda.time.chrono.BasicYearDateTimeField.roundCeiling : if $b3 == 0 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.roundCeiling : $r2 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.roundCeiling : $r2 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.roundCeiling : $i4 = i1 + 1
org.joda.time.chrono.BasicYearDateTimeField.roundCeiling : $i4 = i1 + 1 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.roundCeiling : l0 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>($i4)
org.joda.time.chrono.BasicYearDateTimeField.roundCeiling : l0 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>($i4) >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.roundCeiling : return l0
org.joda.time.chrono.BasicYearDateTimeField.roundCeiling : return l0 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r51 = new org.joda.time.chrono.GJChronology$CutoverField
org.joda.time.chrono.GJChronology.assemble : $r51 = new org.joda.time.chrono.GJChronology$CutoverField >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r52 = virtualinvoke r3.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField dayOfYear()>()
org.joda.time.chrono.GJChronology.assemble : $r52 = virtualinvoke r3.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField dayOfYear()>() >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r53 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear>
org.joda.time.chrono.GJChronology.assemble : $r53 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : specialinvoke $r51.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r52, $r53, l0)
org.joda.time.chrono.GJChronology.assemble : specialinvoke $r51.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r52, $r53, l0) >>>>>>>> org.joda.time.chrono.BasicDayOfYearDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.chrono.BasicDayOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicDayOfYearDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.chrono.BasicDayOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicDayOfYearDateTimeField.getRangeDurationField : $r2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField years()>()
org.joda.time.chrono.BasicDayOfYearDateTimeField.getRangeDurationField : $r2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField years()>() >>>>>>>> org.joda.time.chrono.BasicDayOfYearDateTimeField.getRangeDurationField : return $r2
org.joda.time.chrono.BasicDayOfYearDateTimeField.getRangeDurationField : return $r2 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear> = $r51
org.joda.time.chrono.GJChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear> = $r51 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r54 = virtualinvoke r4.<org.joda.time.chrono.GregorianChronology: org.joda.time.DateTimeField weekyear()>()
org.joda.time.chrono.GJChronology.assemble : $r54 = virtualinvoke r4.<org.joda.time.chrono.GregorianChronology: org.joda.time.DateTimeField weekyear()>() >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $l23 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>
org.joda.time.chrono.GJChronology.assemble : $l23 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : l24 = virtualinvoke $r54.<org.joda.time.DateTimeField: long roundCeiling(long)>($l23)
org.joda.time.chrono.GJChronology.assemble : l24 = virtualinvoke $r54.<org.joda.time.DateTimeField: long roundCeiling(long)>($l23) >>>>>>>> org.joda.time.field.BaseDateTimeField.roundCeiling : l1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long roundFloor(long)>(l0)
org.joda.time.field.BaseDateTimeField.roundCeiling : l1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long roundFloor(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.roundFloor : $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicWeekyearDateTimeField.roundFloor : $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.roundFloor : $r2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField weekOfWeekyear()>()
org.joda.time.chrono.BasicWeekyearDateTimeField.roundFloor : $r2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField weekOfWeekyear()>() >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.roundFloor : l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long roundFloor(long)>(l0)
org.joda.time.chrono.BasicWeekyearDateTimeField.roundFloor : l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long roundFloor(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.roundFloor : $l1 = l0 + 259200000L
org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.roundFloor : $l1 = l0 + 259200000L >>>>>>>> org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.roundFloor : $l2 = specialinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: long roundFloor(long)>($l1)
org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.roundFloor : $l2 = specialinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: long roundFloor(long)>($l1) >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $b1 = l0 cmp 0L
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $b1 = l0 cmp 0L >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : if $b1 < 0
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : if $b1 < 0 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : l5 = l0 + 1L
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : l5 = l0 + 1L >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l6 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l6 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l7 = l5 % $l6
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l7 = l5 % $l6 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l8 = l5 - $l7
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l8 = l5 - $l7 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l9 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l9 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l10 = $l8 - $l9
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l10 = $l8 - $l9 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : return $l10
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : return $l10 >>>>>>>> org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.roundFloor : $l3 = $l2 - 259200000L
org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.roundFloor : $l3 = $l2 - 259200000L >>>>>>>> org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.roundFloor : return $l3
org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.roundFloor : return $l3 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.roundFloor : $r3 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicWeekyearDateTimeField.roundFloor : $r3 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.roundFloor : i1 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long)>(l2)
org.joda.time.chrono.BasicWeekyearDateTimeField.roundFloor : i1 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long)>(l2) >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long,int)>(l0, $i1)
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long,int)>(l0, $i1) >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getFirstWeekOfYearMillis(int)>(i1)
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getFirstWeekOfYearMillis(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0)
org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDayOfWeek(long)>(l1)
org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDayOfWeek(long)>(l1) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : $b2 = l0 cmp 0L
org.joda.time.chrono.BasicChronology.getDayOfWeek : $b2 = l0 cmp 0L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : if $b2 < 0
org.joda.time.chrono.BasicChronology.getDayOfWeek : if $b2 < 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : $l3 = l0 - 86399999L
org.joda.time.chrono.BasicChronology.getDayOfWeek : $l3 = l0 - 86399999L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : l1 = $l3 / 86400000L
org.joda.time.chrono.BasicChronology.getDayOfWeek : l1 = $l3 / 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : $b4 = l1 cmp -3L
org.joda.time.chrono.BasicChronology.getDayOfWeek : $b4 = l1 cmp -3L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : if $b4 >= 0
org.joda.time.chrono.BasicChronology.getDayOfWeek : if $b4 >= 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : $l5 = l1 + 4L
org.joda.time.chrono.BasicChronology.getDayOfWeek : $l5 = l1 + 4L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : $l6 = $l5 % 7L
org.joda.time.chrono.BasicChronology.getDayOfWeek : $l6 = $l5 % 7L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : $i7 = (int) $l6
org.joda.time.chrono.BasicChronology.getDayOfWeek : $i7 = (int) $l6 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : $i8 = 7 + $i7
org.joda.time.chrono.BasicChronology.getDayOfWeek : $i8 = 7 + $i7 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : return $i8
org.joda.time.chrono.BasicChronology.getDayOfWeek : return $i8 >>>>>>>> org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $i3 = r0.<org.joda.time.chrono.BasicChronology: int iMinDaysInFirstWeek>
org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $i3 = r0.<org.joda.time.chrono.BasicChronology: int iMinDaysInFirstWeek> >>>>>>>> org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $i4 = 8 - $i3
org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $i4 = 8 - $i3 >>>>>>>> org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : if i2 <= $i4
org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : if i2 <= $i4 >>>>>>>> org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $i5 = 8 - i2
org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $i5 = 8 - i2 >>>>>>>> org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $l6 = (long) $i5
org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $l6 = (long) $i5 >>>>>>>> org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $l7 = $l6 * 86400000L
org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $l7 = $l6 * 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $l8 = l1 + $l7
org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : $l8 = l1 + $l7 >>>>>>>> org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : return $l8
org.joda.time.chrono.BasicChronology.getFirstWeekOfYearMillis : return $l8 >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $b4 = l0 cmp l2
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $b4 = l0 cmp l2 >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : if $b4 >= 0
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : if $b4 >= 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $i7 = i1 + 1
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $i7 = i1 + 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getFirstWeekOfYearMillis(int)>($i7)
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getFirstWeekOfYearMillis(int)>($i7) >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $b8 = l0 cmp l3
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $b8 = l0 cmp l3 >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : if $b8 < 0
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : if $b8 < 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $l9 = l0 - l2
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $l9 = l0 - l2 >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $l10 = $l9 / 604800000L
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $l10 = $l9 / 604800000L >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $i11 = (int) $l10
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $i11 = (int) $l10 >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $i12 = $i11 + 1
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : $i12 = $i11 + 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : return $i12
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : return $i12 >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : return $i2
org.joda.time.chrono.BasicChronology.getWeekOfWeekyear : return $i2 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.roundFloor : if i1 <= 1
org.joda.time.chrono.BasicWeekyearDateTimeField.roundFloor : if i1 <= 1 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.roundFloor : $i3 = i1 - 1
org.joda.time.chrono.BasicWeekyearDateTimeField.roundFloor : $i3 = i1 - 1 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.roundFloor : $l4 = (long) $i3
org.joda.time.chrono.BasicWeekyearDateTimeField.roundFloor : $l4 = (long) $i3 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.roundFloor : $l5 = 604800000L * $l4
org.joda.time.chrono.BasicWeekyearDateTimeField.roundFloor : $l5 = 604800000L * $l4 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.roundFloor : l2 = l2 - $l5
org.joda.time.chrono.BasicWeekyearDateTimeField.roundFloor : l2 = l2 - $l5 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.roundFloor : return l2
org.joda.time.chrono.BasicWeekyearDateTimeField.roundFloor : return l2 >>>>>>>> org.joda.time.field.BaseDateTimeField.roundCeiling : $b2 = l1 cmp l0
org.joda.time.field.BaseDateTimeField.roundCeiling : $b2 = l1 cmp l0 >>>>>>>> org.joda.time.field.BaseDateTimeField.roundCeiling : if $b2 == 0
org.joda.time.field.BaseDateTimeField.roundCeiling : if $b2 == 0 >>>>>>>> org.joda.time.field.BaseDateTimeField.roundCeiling : l0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long add(long,int)>(l1, 1)
org.joda.time.field.BaseDateTimeField.roundCeiling : l0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long add(long,int)>(l1, 1) >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.add : if i1 != 0
org.joda.time.chrono.BasicWeekyearDateTimeField.add : if i1 != 0 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.add : $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>(l0)
org.joda.time.chrono.BasicWeekyearDateTimeField.add : $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicWeekyearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getWeekyear(long)>(l0)
org.joda.time.chrono.BasicWeekyearDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getWeekyear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekyear : i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicChronology.getWeekyear : i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekyear : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long,int)>(l0, i1)
org.joda.time.chrono.BasicChronology.getWeekyear : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long,int)>(l0, i1) >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekyear : if i2 != 1
org.joda.time.chrono.BasicChronology.getWeekyear : if i2 != 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekyear : $l3 = l0 + 604800000L
org.joda.time.chrono.BasicChronology.getWeekyear : $l3 = l0 + 604800000L >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekyear : $i4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>($l3)
org.joda.time.chrono.BasicChronology.getWeekyear : $i4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>($l3) >>>>>>>> org.joda.time.chrono.BasicChronology.getWeekyear : return $i4
org.joda.time.chrono.BasicChronology.getWeekyear : return $i4 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.get : return $i1
org.joda.time.chrono.BasicWeekyearDateTimeField.get : return $i1 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.add : $i3 = $i2 + i1
org.joda.time.chrono.BasicWeekyearDateTimeField.add : $i3 = $i2 + i1 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.add : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>(l0, $i3)
org.joda.time.chrono.BasicWeekyearDateTimeField.add : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: long set(long,int)>(l0, $i3) >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : $i11 = staticinvoke <java.lang.Math: int abs(int)>(i1)
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $i11 = staticinvoke <java.lang.Math: int abs(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : $i12 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMinYear()>()
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $i12 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMinYear()>() >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r2 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r2 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : $i13 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getMaxYear()>()
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $i13 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getMaxYear()>() >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, $i11, $i12, $i13)
org.joda.time.chrono.BasicWeekyearDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, $i11, $i12, $i13) >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>(l0)
org.joda.time.chrono.BasicWeekyearDateTimeField.set : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : if i2 != i1
org.joda.time.chrono.BasicWeekyearDateTimeField.set : if i2 != i1 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r3 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r3 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : i3 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: int getDayOfWeek(long)>(l0)
org.joda.time.chrono.BasicWeekyearDateTimeField.set : i3 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: int getDayOfWeek(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r4 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r4 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : i4 = virtualinvoke $r4.<org.joda.time.chrono.BasicChronology: int getWeeksInYear(int)>(i2)
org.joda.time.chrono.BasicWeekyearDateTimeField.set : i4 = virtualinvoke $r4.<org.joda.time.chrono.BasicChronology: int getWeeksInYear(int)>(i2) >>>>>>>> org.joda.time.chrono.BasicChronology.getWeeksInYear : l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getFirstWeekOfYearMillis(int)>(i0)
org.joda.time.chrono.BasicChronology.getWeeksInYear : l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getFirstWeekOfYearMillis(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicChronology.getWeeksInYear : $i3 = i0 + 1
org.joda.time.chrono.BasicChronology.getWeeksInYear : $i3 = i0 + 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getWeeksInYear : l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getFirstWeekOfYearMillis(int)>($i3)
org.joda.time.chrono.BasicChronology.getWeeksInYear : l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getFirstWeekOfYearMillis(int)>($i3) >>>>>>>> org.joda.time.chrono.BasicChronology.getWeeksInYear : $l4 = l2 - l1
org.joda.time.chrono.BasicChronology.getWeeksInYear : $l4 = l2 - l1 >>>>>>>> org.joda.time.chrono.BasicChronology.getWeeksInYear : $l5 = $l4 / 604800000L
org.joda.time.chrono.BasicChronology.getWeeksInYear : $l5 = $l4 / 604800000L >>>>>>>> org.joda.time.chrono.BasicChronology.getWeeksInYear : $i6 = (int) $l5
org.joda.time.chrono.BasicChronology.getWeeksInYear : $i6 = (int) $l5 >>>>>>>> org.joda.time.chrono.BasicChronology.getWeeksInYear : return $i6
org.joda.time.chrono.BasicChronology.getWeeksInYear : return $i6 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r5 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r5 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : i5 = virtualinvoke $r5.<org.joda.time.chrono.BasicChronology: int getWeeksInYear(int)>(i1)
org.joda.time.chrono.BasicWeekyearDateTimeField.set : i5 = virtualinvoke $r5.<org.joda.time.chrono.BasicChronology: int getWeeksInYear(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : if i5 >= i4
org.joda.time.chrono.BasicWeekyearDateTimeField.set : if i5 >= i4 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : $i14 = i4
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $i14 = i4 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : i6 = $i14
org.joda.time.chrono.BasicWeekyearDateTimeField.set : i6 = $i14 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r6 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r6 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : i7 = virtualinvoke $r6.<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long)>(l0)
org.joda.time.chrono.BasicWeekyearDateTimeField.set : i7 = virtualinvoke $r6.<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : if i7 <= i6
org.joda.time.chrono.BasicWeekyearDateTimeField.set : if i7 <= i6 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : l8 = l0
org.joda.time.chrono.BasicWeekyearDateTimeField.set : l8 = l0 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r7 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r7 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : l15 = virtualinvoke $r7.<org.joda.time.chrono.BasicChronology: long setYear(long,int)>(l8, i1)
org.joda.time.chrono.BasicWeekyearDateTimeField.set : l15 = virtualinvoke $r7.<org.joda.time.chrono.BasicChronology: long setYear(long,int)>(l8, i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicGJChronology.setYear : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : i3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getDayOfYear(long,int)>(l0, i2)
org.joda.time.chrono.BasicGJChronology.setYear : i3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getDayOfYear(long,int)>(l0, i2) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1)
org.joda.time.chrono.BasicChronology.getDayOfYear : l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : $l3 = l0 - l2
org.joda.time.chrono.BasicChronology.getDayOfYear : $l3 = l0 - l2 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : $l4 = $l3 / 86400000L
org.joda.time.chrono.BasicChronology.getDayOfYear : $l4 = $l3 / 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : $i5 = (int) $l4
org.joda.time.chrono.BasicChronology.getDayOfYear : $i5 = (int) $l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : $i6 = $i5 + 1
org.joda.time.chrono.BasicChronology.getDayOfYear : $i6 = $i5 + 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : return $i6
org.joda.time.chrono.BasicChronology.getDayOfYear : return $i6 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : i4 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getMillisOfDay(long)>(l0)
org.joda.time.chrono.BasicGJChronology.setYear : i4 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getMillisOfDay(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : $b1 = l0 cmp 0L
org.joda.time.chrono.BasicChronology.getMillisOfDay : $b1 = l0 cmp 0L >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : if $b1 < 0
org.joda.time.chrono.BasicChronology.getMillisOfDay : if $b1 < 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : $l4 = l0 + 1L
org.joda.time.chrono.BasicChronology.getMillisOfDay : $l4 = l0 + 1L >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : $l5 = $l4 % 86400000L
org.joda.time.chrono.BasicChronology.getMillisOfDay : $l5 = $l4 % 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : $i6 = (int) $l5
org.joda.time.chrono.BasicChronology.getMillisOfDay : $i6 = (int) $l5 >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : $i7 = 86399999 + $i6
org.joda.time.chrono.BasicChronology.getMillisOfDay : $i7 = 86399999 + $i6 >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : return $i7
org.joda.time.chrono.BasicChronology.getMillisOfDay : return $i7 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : if i3 <= 59
org.joda.time.chrono.BasicGJChronology.setYear : if i3 <= 59 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : l5 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMonthDayMillis(int,int,int)>(i1, 1, i3)
org.joda.time.chrono.BasicGJChronology.setYear : l5 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMonthDayMillis(int,int,int)>(i1, 1, i3) >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : $l6 = (long) i4
org.joda.time.chrono.BasicGJChronology.setYear : $l6 = (long) i4 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : l7 = l5 + $l6
org.joda.time.chrono.BasicGJChronology.setYear : l7 = l5 + $l6 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : return l7
org.joda.time.chrono.BasicGJChronology.setYear : return l7 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : i9 = virtualinvoke r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>(l15)
org.joda.time.chrono.BasicWeekyearDateTimeField.set : i9 = virtualinvoke r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: int get(long)>(l15) >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : if i9 >= i1
org.joda.time.chrono.BasicWeekyearDateTimeField.set : if i9 >= i1 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : if i9 <= i1
org.joda.time.chrono.BasicWeekyearDateTimeField.set : if i9 <= i1 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r8 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r8 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : i10 = virtualinvoke $r8.<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long)>(l15)
org.joda.time.chrono.BasicWeekyearDateTimeField.set : i10 = virtualinvoke $r8.<org.joda.time.chrono.BasicChronology: int getWeekOfWeekyear(long)>(l15) >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : $i16 = i7 - i10
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $i16 = i7 - i10 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : $l17 = (long) $i16
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $l17 = (long) $i16 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : $l18 = $l17 * 604800000L
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $l18 = $l17 * 604800000L >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : l19 = l15 + $l18
org.joda.time.chrono.BasicWeekyearDateTimeField.set : l19 = l15 + $l18 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r9 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r9 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r10 = virtualinvoke $r9.<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField dayOfWeek()>()
org.joda.time.chrono.BasicWeekyearDateTimeField.set : $r10 = virtualinvoke $r9.<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField dayOfWeek()>() >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : l20 = virtualinvoke $r10.<org.joda.time.DateTimeField: long set(long,int)>(l19, i3)
org.joda.time.chrono.BasicWeekyearDateTimeField.set : l20 = virtualinvoke $r10.<org.joda.time.DateTimeField: long set(long,int)>(l19, i3) >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : $i2 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int getMinimumValue()>()
org.joda.time.field.PreciseDurationDateTimeField.set : $i2 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int getMinimumValue()>() >>>>>>>> org.joda.time.chrono.GJDayOfWeekDateTimeField.getMinimumValue : return 1
org.joda.time.chrono.GJDayOfWeekDateTimeField.getMinimumValue : return 1 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : $i3 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int getMaximumValueForSet(long,int)>(l0, i1)
org.joda.time.field.PreciseDurationDateTimeField.set : $i3 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int getMaximumValueForSet(long,int)>(l0, i1) >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getMaximumValueForSet : $i2 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int getMaximumValue(long)>(l0)
org.joda.time.field.PreciseDurationDateTimeField.getMaximumValueForSet : $i2 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int getMaximumValue(long)>(l0) >>>>>>>> org.joda.time.field.BaseDateTimeField.getMaximumValue : $i1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue()>()
org.joda.time.field.BaseDateTimeField.getMaximumValue : $i1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.chrono.GJDayOfWeekDateTimeField.getMaximumValue : return 7
org.joda.time.chrono.GJDayOfWeekDateTimeField.getMaximumValue : return 7 >>>>>>>> org.joda.time.field.BaseDateTimeField.getMaximumValue : return $i1
org.joda.time.field.BaseDateTimeField.getMaximumValue : return $i1 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getMaximumValueForSet : return $i2
org.joda.time.field.PreciseDurationDateTimeField.getMaximumValueForSet : return $i2 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i2, $i3)
org.joda.time.field.PreciseDurationDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i2, $i3) >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : $i4 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int get(long)>(l0)
org.joda.time.field.PreciseDurationDateTimeField.set : $i4 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.chrono.GJDayOfWeekDateTimeField.get : $r1 = r0.<org.joda.time.chrono.GJDayOfWeekDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.GJDayOfWeekDateTimeField.get : $r1 = r0.<org.joda.time.chrono.GJDayOfWeekDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.GJDayOfWeekDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDayOfWeek(long)>(l0)
org.joda.time.chrono.GJDayOfWeekDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDayOfWeek(long)>(l0) >>>>>>>> org.joda.time.chrono.GJDayOfWeekDateTimeField.get : return $i1
org.joda.time.chrono.GJDayOfWeekDateTimeField.get : return $i1 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : $i5 = i1 - $i4
org.joda.time.field.PreciseDurationDateTimeField.set : $i5 = i1 - $i4 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : $l6 = (long) $i5
org.joda.time.field.PreciseDurationDateTimeField.set : $l6 = (long) $i5 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : $l7 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDurationDateTimeField.set : $l7 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : $l8 = $l6 * $l7
org.joda.time.field.PreciseDurationDateTimeField.set : $l8 = $l6 * $l7 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : $l9 = l0 + $l8
org.joda.time.field.PreciseDurationDateTimeField.set : $l9 = l0 + $l8 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : return $l9
org.joda.time.field.PreciseDurationDateTimeField.set : return $l9 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.set : return l20
org.joda.time.chrono.BasicWeekyearDateTimeField.set : return l20 >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.add : return $l4
org.joda.time.chrono.BasicWeekyearDateTimeField.add : return $l4 >>>>>>>> org.joda.time.field.BaseDateTimeField.roundCeiling : return l0
org.joda.time.field.BaseDateTimeField.roundCeiling : return l0 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r55 = new org.joda.time.chrono.GJChronology$CutoverField
org.joda.time.chrono.GJChronology.assemble : $r55 = new org.joda.time.chrono.GJChronology$CutoverField >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r56 = virtualinvoke r3.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField weekOfWeekyear()>()
org.joda.time.chrono.GJChronology.assemble : $r56 = virtualinvoke r3.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField weekOfWeekyear()>() >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r57 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear>
org.joda.time.chrono.GJChronology.assemble : $r57 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : specialinvoke $r55.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long,boolean)>(r0, $r56, $r57, l24, 1)
org.joda.time.chrono.GJChronology.assemble : specialinvoke $r55.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long,boolean)>(r0, $r56, $r57, l24, 1) >>>>>>>> org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getRangeDurationField : $r2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField weekyears()>()
org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getRangeDurationField : $r2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField weekyears()>() >>>>>>>> org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getRangeDurationField : return $r2
org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getRangeDurationField : return $r2 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear> = $r55
org.joda.time.chrono.GJChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear> = $r55 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r58 = new org.joda.time.chrono.GJChronology$ImpreciseCutoverField
org.joda.time.chrono.GJChronology.assemble : $r58 = new org.joda.time.chrono.GJChronology$ImpreciseCutoverField >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r59 = virtualinvoke r3.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField year()>()
org.joda.time.chrono.GJChronology.assemble : $r59 = virtualinvoke r3.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r60 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year>
org.joda.time.chrono.GJChronology.assemble : $r60 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $l25 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>
org.joda.time.chrono.GJChronology.assemble : $l25 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : specialinvoke $r58.<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r59, $r60, $l25)
org.joda.time.chrono.GJChronology.assemble : specialinvoke $r58.<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r59, $r60, $l25) >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getRangeDurationField : return null
org.joda.time.chrono.BasicYearDateTimeField.getRangeDurationField : return null >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DelegatedDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getRangeDurationField : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getRangeDurationField()>()
org.joda.time.field.DelegatedDateTimeField.getRangeDurationField : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getRangeDurationField()>() >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getRangeDurationField : return $r2
org.joda.time.field.DelegatedDateTimeField.getRangeDurationField : return $r2 >>>>>>>> org.joda.time.field.BaseDurationField.getType : $r1 = r0.<org.joda.time.field.BaseDurationField: org.joda.time.DurationFieldType iType>
org.joda.time.field.BaseDurationField.getType : $r1 = r0.<org.joda.time.field.BaseDurationField: org.joda.time.DurationFieldType iType> >>>>>>>> org.joda.time.field.BaseDurationField.getType : return $r1
org.joda.time.field.BaseDurationField.getType : return $r1 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> = $r58
org.joda.time.chrono.GJChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> = $r58 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r61 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year>
org.joda.time.chrono.GJChronology.assemble : $r61 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r62 = virtualinvoke $r61.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>()
org.joda.time.chrono.GJChronology.assemble : $r62 = virtualinvoke $r61.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>() >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.getDurationField : $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField iDurationField>
org.joda.time.chrono.GJChronology$CutoverField.getDurationField : $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField iDurationField> >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.getDurationField : return $r1
org.joda.time.chrono.GJChronology$CutoverField.getDurationField : return $r1 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years> = $r62
org.joda.time.chrono.GJChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years> = $r62 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r63 = new org.joda.time.chrono.GJChronology$ImpreciseCutoverField
org.joda.time.chrono.GJChronology.assemble : $r63 = new org.joda.time.chrono.GJChronology$ImpreciseCutoverField >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r64 = virtualinvoke r3.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField yearOfEra()>()
org.joda.time.chrono.GJChronology.assemble : $r64 = virtualinvoke r3.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField yearOfEra()>() >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r65 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra>
org.joda.time.chrono.GJChronology.assemble : $r65 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r66 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years>
org.joda.time.chrono.GJChronology.assemble : $r66 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $l26 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>
org.joda.time.chrono.GJChronology.assemble : $l26 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : specialinvoke $r63.<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long)>(r0, $r64, $r65, $r66, $l26)
org.joda.time.chrono.GJChronology.assemble : specialinvoke $r63.<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long)>(r0, $r64, $r65, $r66, $l26) >>>>>>>> org.joda.time.chrono.GJChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> = $r63
org.joda.time.chrono.GJChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> = $r63 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r67 = new org.joda.time.chrono.GJChronology$ImpreciseCutoverField
org.joda.time.chrono.GJChronology.assemble : $r67 = new org.joda.time.chrono.GJChronology$ImpreciseCutoverField >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r68 = virtualinvoke r3.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField yearOfCentury()>()
org.joda.time.chrono.GJChronology.assemble : $r68 = virtualinvoke r3.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField yearOfCentury()>() >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r69 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury>
org.joda.time.chrono.GJChronology.assemble : $r69 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r70 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years>
org.joda.time.chrono.GJChronology.assemble : $r70 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $l27 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>
org.joda.time.chrono.GJChronology.assemble : $l27 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : specialinvoke $r67.<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long)>(r0, $r68, $r69, $r70, $l27)
org.joda.time.chrono.GJChronology.assemble : specialinvoke $r67.<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long)>(r0, $r68, $r69, $r70, $l27) >>>>>>>> org.joda.time.field.RemainderDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField iRangeField>
org.joda.time.field.RemainderDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.field.RemainderDateTimeField: org.joda.time.DurationField iRangeField> >>>>>>>> org.joda.time.field.RemainderDateTimeField.getRangeDurationField : return $r1
org.joda.time.field.RemainderDateTimeField.getRangeDurationField : return $r1 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> = $r67
org.joda.time.chrono.GJChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> = $r67 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r71 = new org.joda.time.chrono.GJChronology$ImpreciseCutoverField
org.joda.time.chrono.GJChronology.assemble : $r71 = new org.joda.time.chrono.GJChronology$ImpreciseCutoverField >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r72 = virtualinvoke r3.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField centuryOfEra()>()
org.joda.time.chrono.GJChronology.assemble : $r72 = virtualinvoke r3.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField centuryOfEra()>() >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r73 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra>
org.joda.time.chrono.GJChronology.assemble : $r73 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $l28 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>
org.joda.time.chrono.GJChronology.assemble : $l28 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : specialinvoke $r71.<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r72, $r73, $l28)
org.joda.time.chrono.GJChronology.assemble : specialinvoke $r71.<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r72, $r73, $l28) >>>>>>>> org.joda.time.chrono.GJChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> = $r71
org.joda.time.chrono.GJChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> = $r71 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r74 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra>
org.joda.time.chrono.GJChronology.assemble : $r74 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r75 = virtualinvoke $r74.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>()
org.joda.time.chrono.GJChronology.assemble : $r75 = virtualinvoke $r74.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>() >>>>>>>> org.joda.time.chrono.GJChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries> = $r75
org.joda.time.chrono.GJChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries> = $r75 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r76 = new org.joda.time.chrono.GJChronology$ImpreciseCutoverField
org.joda.time.chrono.GJChronology.assemble : $r76 = new org.joda.time.chrono.GJChronology$ImpreciseCutoverField >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r77 = virtualinvoke r3.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.chrono.GJChronology.assemble : $r77 = virtualinvoke r3.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField monthOfYear()>() >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r78 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear>
org.joda.time.chrono.GJChronology.assemble : $r78 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $l29 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>
org.joda.time.chrono.GJChronology.assemble : $l29 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : specialinvoke $r76.<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r77, $r78, $l29)
org.joda.time.chrono.GJChronology.assemble : specialinvoke $r76.<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r77, $r78, $l29) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getRangeDurationField : $r2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField years()>()
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getRangeDurationField : $r2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField years()>() >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getRangeDurationField : return $r2
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getRangeDurationField : return $r2 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> = $r76
org.joda.time.chrono.GJChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> = $r76 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r79 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear>
org.joda.time.chrono.GJChronology.assemble : $r79 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r80 = virtualinvoke $r79.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>()
org.joda.time.chrono.GJChronology.assemble : $r80 = virtualinvoke $r79.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>() >>>>>>>> org.joda.time.chrono.GJChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months> = $r80
org.joda.time.chrono.GJChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months> = $r80 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r81 = new org.joda.time.chrono.GJChronology$ImpreciseCutoverField
org.joda.time.chrono.GJChronology.assemble : $r81 = new org.joda.time.chrono.GJChronology$ImpreciseCutoverField >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r82 = virtualinvoke r3.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField weekyear()>()
org.joda.time.chrono.GJChronology.assemble : $r82 = virtualinvoke r3.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField weekyear()>() >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r83 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear>
org.joda.time.chrono.GJChronology.assemble : $r83 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $l30 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>
org.joda.time.chrono.GJChronology.assemble : $l30 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : specialinvoke $r81.<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>(r0, $r82, $r83, null, $l30, 1)
org.joda.time.chrono.GJChronology.assemble : specialinvoke $r81.<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long,boolean)>(r0, $r82, $r83, null, $l30, 1) >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.getRangeDurationField : return null
org.joda.time.chrono.BasicWeekyearDateTimeField.getRangeDurationField : return null >>>>>>>> org.joda.time.chrono.GJChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> = $r81
org.joda.time.chrono.GJChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> = $r81 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r84 = new org.joda.time.chrono.GJChronology$ImpreciseCutoverField
org.joda.time.chrono.GJChronology.assemble : $r84 = new org.joda.time.chrono.GJChronology$ImpreciseCutoverField >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r85 = virtualinvoke r3.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField weekyearOfCentury()>()
org.joda.time.chrono.GJChronology.assemble : $r85 = virtualinvoke r3.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField weekyearOfCentury()>() >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r86 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury>
org.joda.time.chrono.GJChronology.assemble : $r86 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r87 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears>
org.joda.time.chrono.GJChronology.assemble : $r87 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $l31 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>
org.joda.time.chrono.GJChronology.assemble : $l31 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : specialinvoke $r84.<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long)>(r0, $r85, $r86, $r87, $l31)
org.joda.time.chrono.GJChronology.assemble : specialinvoke $r84.<org.joda.time.chrono.GJChronology$ImpreciseCutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,org.joda.time.DurationField,long)>(r0, $r85, $r86, $r87, $l31) >>>>>>>> org.joda.time.chrono.GJChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> = $r84
org.joda.time.chrono.GJChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> = $r84 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r88 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear>
org.joda.time.chrono.GJChronology.assemble : $r88 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r89 = virtualinvoke $r88.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>()
org.joda.time.chrono.GJChronology.assemble : $r89 = virtualinvoke $r88.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>() >>>>>>>> org.joda.time.chrono.GJChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears> = $r89
org.joda.time.chrono.GJChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears> = $r89 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r90 = new org.joda.time.chrono.GJChronology$CutoverField
org.joda.time.chrono.GJChronology.assemble : $r90 = new org.joda.time.chrono.GJChronology$CutoverField >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r91 = virtualinvoke r3.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.chrono.GJChronology.assemble : $r91 = virtualinvoke r3.<org.joda.time.chrono.JulianChronology: org.joda.time.DateTimeField dayOfMonth()>() >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r92 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth>
org.joda.time.chrono.GJChronology.assemble : $r92 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $l32 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis>
org.joda.time.chrono.GJChronology.assemble : $l32 = r0.<org.joda.time.chrono.GJChronology: long iCutoverMillis> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : specialinvoke $r90.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r91, $r92, $l32)
org.joda.time.chrono.GJChronology.assemble : specialinvoke $r90.<org.joda.time.chrono.GJChronology$CutoverField: void <init>(org.joda.time.chrono.GJChronology,org.joda.time.DateTimeField,org.joda.time.DateTimeField,long)>(r0, $r91, $r92, $l32) >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.getRangeDurationField : $r2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField months()>()
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getRangeDurationField : $r2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField months()>() >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.getRangeDurationField : return $r2
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getRangeDurationField : return $r2 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : r93 = $r90
org.joda.time.chrono.GJChronology.assemble : r93 = $r90 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : $r94 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months>
org.joda.time.chrono.GJChronology.assemble : $r94 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months> >>>>>>>> org.joda.time.chrono.GJChronology.assemble : r93.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField iRangeDurationField> = $r94
org.joda.time.chrono.GJChronology.assemble : r93.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField iRangeDurationField> = $r94 >>>>>>>> org.joda.time.chrono.GJChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth> = r93
org.joda.time.chrono.GJChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth> = r93 >>>>>>>> org.joda.time.chrono.GJChronology.readResolve : $r1 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.GJChronology.readResolve : $r1 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.GJChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.GJChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: org.joda.time.Chronology getBase()>() >>>>>>>> org.joda.time.chrono.GJChronology.getZone : r1 = $r2
org.joda.time.chrono.GJChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.GJChronology.getZone : if $r2 == null
org.joda.time.chrono.GJChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.GJChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>
org.joda.time.chrono.GJChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC> >>>>>>>> org.joda.time.chrono.GJChronology.getZone : return $r4
org.joda.time.chrono.GJChronology.getZone : return $r4 >>>>>>>> org.joda.time.chrono.GJChronology.readResolve : $r2 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.Instant iCutoverInstant>
org.joda.time.chrono.GJChronology.readResolve : $r2 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.Instant iCutoverInstant> >>>>>>>> org.joda.time.chrono.GJChronology.readResolve : $i0 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: int getMinimumDaysInFirstWeek()>()
org.joda.time.chrono.GJChronology.readResolve : $i0 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: int getMinimumDaysInFirstWeek()>() >>>>>>>> org.joda.time.chrono.GJChronology.getMinimumDaysInFirstWeek : $r1 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology iGregorianChronology>
org.joda.time.chrono.GJChronology.getMinimumDaysInFirstWeek : $r1 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.chrono.GregorianChronology iGregorianChronology> >>>>>>>> org.joda.time.chrono.GJChronology.getMinimumDaysInFirstWeek : $i0 = virtualinvoke $r1.<org.joda.time.chrono.GregorianChronology: int getMinimumDaysInFirstWeek()>()
org.joda.time.chrono.GJChronology.getMinimumDaysInFirstWeek : $i0 = virtualinvoke $r1.<org.joda.time.chrono.GregorianChronology: int getMinimumDaysInFirstWeek()>() >>>>>>>> org.joda.time.chrono.GJChronology.getMinimumDaysInFirstWeek : return $i0
org.joda.time.chrono.GJChronology.getMinimumDaysInFirstWeek : return $i0 >>>>>>>> org.joda.time.chrono.GJChronology.readResolve : $r3 = staticinvoke <org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>($r1, $r2, $i0)
org.joda.time.chrono.GJChronology.readResolve : $r3 = staticinvoke <org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>($r1, $r2, $i0) >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : r5 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>(r0)
org.joda.time.chrono.GJChronology.getInstance : r5 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>(r0) >>>>>>>> org.joda.time.DateTimeUtils.getZone : if r0 != null
org.joda.time.DateTimeUtils.getZone : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getZone : return r0
org.joda.time.DateTimeUtils.getZone : return r0 >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : if r1 != null
org.joda.time.chrono.GJChronology.getInstance : if r1 != null >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : r2 = interfaceinvoke r1.<org.joda.time.ReadableInstant: org.joda.time.Instant toInstant()>()
org.joda.time.chrono.GJChronology.getInstance : r2 = interfaceinvoke r1.<org.joda.time.ReadableInstant: org.joda.time.Instant toInstant()>() >>>>>>>> org.joda.time.Instant.toInstant : return r0
org.joda.time.Instant.toInstant : return r0 >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : $r6 = <org.joda.time.chrono.GJChronology: java.util.Map cCache>
org.joda.time.chrono.GJChronology.getInstance : $r6 = <org.joda.time.chrono.GJChronology: java.util.Map cCache> >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5)
org.joda.time.chrono.GJChronology.getInstance : $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5) >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : r3 = (java.util.ArrayList) $r7
org.joda.time.chrono.GJChronology.getInstance : r3 = (java.util.ArrayList) $r7 >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : if r3 != null
org.joda.time.chrono.GJChronology.getInstance : if r3 != null >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : i1 = virtualinvoke r3.<java.util.ArrayList: int size()>()
org.joda.time.chrono.GJChronology.getInstance : i1 = virtualinvoke r3.<java.util.ArrayList: int size()>() >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : i1 = i1 + -1
org.joda.time.chrono.GJChronology.getInstance : i1 = i1 + -1 >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : if i1 < 0
org.joda.time.chrono.GJChronology.getInstance : if i1 < 0 >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : $r11 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object get(int)>(i1)
org.joda.time.chrono.GJChronology.getInstance : $r11 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object get(int)>(i1) >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : r4 = (org.joda.time.chrono.GJChronology) $r11
org.joda.time.chrono.GJChronology.getInstance : r4 = (org.joda.time.chrono.GJChronology) $r11 >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : $i2 = virtualinvoke r4.<org.joda.time.chrono.GJChronology: int getMinimumDaysInFirstWeek()>()
org.joda.time.chrono.GJChronology.getInstance : $i2 = virtualinvoke r4.<org.joda.time.chrono.GJChronology: int getMinimumDaysInFirstWeek()>() >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : if i0 != $i2
org.joda.time.chrono.GJChronology.getInstance : if i0 != $i2 >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : $r12 = virtualinvoke r4.<org.joda.time.chrono.GJChronology: org.joda.time.Instant getGregorianCutover()>()
org.joda.time.chrono.GJChronology.getInstance : $r12 = virtualinvoke r4.<org.joda.time.chrono.GJChronology: org.joda.time.Instant getGregorianCutover()>() >>>>>>>> org.joda.time.chrono.GJChronology.getGregorianCutover : $r1 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.Instant iCutoverInstant>
org.joda.time.chrono.GJChronology.getGregorianCutover : $r1 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.Instant iCutoverInstant> >>>>>>>> org.joda.time.chrono.GJChronology.getGregorianCutover : return $r1
org.joda.time.chrono.GJChronology.getGregorianCutover : return $r1 >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : $z0 = virtualinvoke r2.<org.joda.time.Instant: boolean equals(java.lang.Object)>($r12)
org.joda.time.chrono.GJChronology.getInstance : $z0 = virtualinvoke r2.<org.joda.time.Instant: boolean equals(java.lang.Object)>($r12) >>>>>>>> org.joda.time.base.AbstractInstant.equals : if r0 != r1
org.joda.time.base.AbstractInstant.equals : if r0 != r1 >>>>>>>> org.joda.time.base.AbstractInstant.equals : $z0 = r1 instanceof org.joda.time.ReadableInstant
org.joda.time.base.AbstractInstant.equals : $z0 = r1 instanceof org.joda.time.ReadableInstant >>>>>>>> org.joda.time.base.AbstractInstant.equals : if $z0 != 0
org.joda.time.base.AbstractInstant.equals : if $z0 != 0 >>>>>>>> org.joda.time.base.AbstractInstant.equals : r2 = (org.joda.time.ReadableInstant) r1
org.joda.time.base.AbstractInstant.equals : r2 = (org.joda.time.ReadableInstant) r1 >>>>>>>> org.joda.time.base.AbstractInstant.equals : $l0 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: long getMillis()>()
org.joda.time.base.AbstractInstant.equals : $l0 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: long getMillis()>() >>>>>>>> org.joda.time.base.AbstractInstant.equals : $l1 = interfaceinvoke r2.<org.joda.time.ReadableInstant: long getMillis()>()
org.joda.time.base.AbstractInstant.equals : $l1 = interfaceinvoke r2.<org.joda.time.ReadableInstant: long getMillis()>() >>>>>>>> org.joda.time.base.AbstractInstant.equals : $b2 = $l0 cmp $l1
org.joda.time.base.AbstractInstant.equals : $b2 = $l0 cmp $l1 >>>>>>>> org.joda.time.base.AbstractInstant.equals : if $b2 != 0
org.joda.time.base.AbstractInstant.equals : if $b2 != 0 >>>>>>>> org.joda.time.base.AbstractInstant.equals : $r3 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: org.joda.time.Chronology getChronology()>()
org.joda.time.base.AbstractInstant.equals : $r3 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.Instant.getChronology : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>()
org.joda.time.Instant.getChronology : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>() >>>>>>>> org.joda.time.chrono.ISOChronology.getInstanceUTC : $r0 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC>
org.joda.time.chrono.ISOChronology.getInstanceUTC : $r0 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.ISOChronology.getInstanceUTC : return $r0
org.joda.time.chrono.ISOChronology.getInstanceUTC : return $r0 >>>>>>>> org.joda.time.Instant.getChronology : return $r1
org.joda.time.Instant.getChronology : return $r1 >>>>>>>> org.joda.time.base.AbstractInstant.equals : $r4 = interfaceinvoke r2.<org.joda.time.ReadableInstant: org.joda.time.Chronology getChronology()>()
org.joda.time.base.AbstractInstant.equals : $r4 = interfaceinvoke r2.<org.joda.time.ReadableInstant: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.base.AbstractInstant.equals : $z1 = staticinvoke <org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>($r3, $r4)
org.joda.time.base.AbstractInstant.equals : $z1 = staticinvoke <org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>($r3, $r4) >>>>>>>> org.joda.time.field.FieldUtils.equals : if r0 != r1
org.joda.time.field.FieldUtils.equals : if r0 != r1 >>>>>>>> org.joda.time.field.FieldUtils.equals : return 1
org.joda.time.field.FieldUtils.equals : return 1 >>>>>>>> org.joda.time.base.AbstractInstant.equals : if $z1 == 0
org.joda.time.base.AbstractInstant.equals : if $z1 == 0 >>>>>>>> org.joda.time.base.AbstractInstant.equals : $z2 = 1
org.joda.time.base.AbstractInstant.equals : $z2 = 1 >>>>>>>> org.joda.time.base.AbstractInstant.equals : goto [?= return $z2]
org.joda.time.base.AbstractInstant.equals : goto [?= return $z2] >>>>>>>> org.joda.time.base.AbstractInstant.equals : return $z2
org.joda.time.base.AbstractInstant.equals : return $z2 >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : if $z0 == 0
org.joda.time.chrono.GJChronology.getInstance : if $z0 == 0 >>>>>>>> org.joda.time.chrono.GJChronology.getInstance : return r4
org.joda.time.chrono.GJChronology.getInstance : return r4 >>>>>>>> org.joda.time.chrono.GJChronology.readResolve : return $r3
org.joda.time.chrono.GJChronology.readResolve : return $r3 >>>>>>>> org.joda.time.DateTimeZone$Stub.readObject : $r2 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.String readUTF()>()
org.joda.time.DateTimeZone$Stub.readObject : $r2 = virtualinvoke r1.<java.io.ObjectInputStream: java.lang.String readUTF()>() >>>>>>>> org.joda.time.DateTimeZone$Stub.readObject : r0.<org.joda.time.DateTimeZone$Stub: java.lang.String iID> = $r2
org.joda.time.DateTimeZone$Stub.readObject : r0.<org.joda.time.DateTimeZone$Stub: java.lang.String iID> = $r2 >>>>>>>> org.joda.time.DateTimeZone$Stub.readResolve : $r1 = r0.<org.joda.time.DateTimeZone$Stub: java.lang.String iID>
org.joda.time.DateTimeZone$Stub.readResolve : $r1 = r0.<org.joda.time.DateTimeZone$Stub: java.lang.String iID> >>>>>>>> org.joda.time.DateTimeZone$Stub.readResolve : $r2 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>($r1)
org.joda.time.DateTimeZone$Stub.readResolve : $r2 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forID(java.lang.String)>($r1) >>>>>>>> org.joda.time.DateTimeZone.forID : if r0 != null
org.joda.time.DateTimeZone.forID : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.forID : $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("UTC")
org.joda.time.DateTimeZone.forID : $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("UTC") >>>>>>>> org.joda.time.DateTimeZone.forID : if $z0 == 0
org.joda.time.DateTimeZone.forID : if $z0 == 0 >>>>>>>> org.joda.time.DateTimeZone.forID : $r4 = <org.joda.time.DateTimeZone: org.joda.time.tz.Provider cProvider>
org.joda.time.DateTimeZone.forID : $r4 = <org.joda.time.DateTimeZone: org.joda.time.tz.Provider cProvider> >>>>>>>> org.joda.time.DateTimeZone.forID : r1 = interfaceinvoke $r4.<org.joda.time.tz.Provider: org.joda.time.DateTimeZone getZone(java.lang.String)>(r0)
org.joda.time.DateTimeZone.forID : r1 = interfaceinvoke $r4.<org.joda.time.tz.Provider: org.joda.time.DateTimeZone getZone(java.lang.String)>(r0) >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : if r1 != null
org.joda.time.tz.ZoneInfoProvider.getZone : if r1 != null >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : $r5 = r0.<org.joda.time.tz.ZoneInfoProvider: java.util.Map iZoneInfoMap>
org.joda.time.tz.ZoneInfoProvider.getZone : $r5 = r0.<org.joda.time.tz.ZoneInfoProvider: java.util.Map iZoneInfoMap> >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : r2 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.joda.time.tz.ZoneInfoProvider.getZone : r2 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : if r2 != null
org.joda.time.tz.ZoneInfoProvider.getZone : if r2 != null >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r2)
org.joda.time.tz.ZoneInfoProvider.getZone : $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r2) >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : if $z0 == 0
org.joda.time.tz.ZoneInfoProvider.getZone : if $z0 == 0 >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : $z1 = r2 instanceof java.lang.ref.SoftReference
org.joda.time.tz.ZoneInfoProvider.getZone : $z1 = r2 instanceof java.lang.ref.SoftReference >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : if $z1 == 0
org.joda.time.tz.ZoneInfoProvider.getZone : if $z1 == 0 >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : r3 = (java.lang.ref.SoftReference) r2
org.joda.time.tz.ZoneInfoProvider.getZone : r3 = (java.lang.ref.SoftReference) r2 >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : $r7 = virtualinvoke r3.<java.lang.ref.SoftReference: java.lang.Object get()>()
org.joda.time.tz.ZoneInfoProvider.getZone : $r7 = virtualinvoke r3.<java.lang.ref.SoftReference: java.lang.Object get()>() >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : r4 = (org.joda.time.DateTimeZone) $r7
org.joda.time.tz.ZoneInfoProvider.getZone : r4 = (org.joda.time.DateTimeZone) $r7 >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : if r4 == null
org.joda.time.tz.ZoneInfoProvider.getZone : if r4 == null >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : return r4
org.joda.time.tz.ZoneInfoProvider.getZone : return r4 >>>>>>>> org.joda.time.DateTimeZone.forID : if r1 == null
org.joda.time.DateTimeZone.forID : if r1 == null >>>>>>>> org.joda.time.DateTimeZone.forID : return r1
org.joda.time.DateTimeZone.forID : return r1 >>>>>>>> org.joda.time.DateTimeZone$Stub.readResolve : return $r2
org.joda.time.DateTimeZone$Stub.readResolve : return $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r5 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.setFields : $r5 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : virtualinvoke r2.<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>($r5)
org.joda.time.chrono.AssembledChronology.setFields : virtualinvoke r2.<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>($r5) >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r2 = new java.util.HashMap
org.joda.time.chrono.ZonedChronology.assemble : $r2 = new java.util.HashMap >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : specialinvoke $r2.<java.util.HashMap: void <init>()>()
org.joda.time.chrono.ZonedChronology.assemble : specialinvoke $r2.<java.util.HashMap: void <init>()>() >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r3 = $r2
org.joda.time.chrono.ZonedChronology.assemble : r3 = $r2 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r4 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField eras>
org.joda.time.chrono.ZonedChronology.assemble : $r4 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField eras> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r5 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r4, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r5 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r4, r3) >>>>>>>> org.joda.time.chrono.ZonedChronology.convertField : if r1 == null
org.joda.time.chrono.ZonedChronology.convertField : if r1 == null >>>>>>>> org.joda.time.chrono.ZonedChronology.convertField : return r1
org.joda.time.chrono.ZonedChronology.convertField : return r1 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField eras> = $r5
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField eras> = $r5 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r6 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries>
org.joda.time.chrono.ZonedChronology.assemble : $r6 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r7 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r6, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r7 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r6, r3) >>>>>>>> org.joda.time.chrono.ZonedChronology.convertField : $z0 = virtualinvoke r1.<org.joda.time.DurationField: boolean isSupported()>()
org.joda.time.chrono.ZonedChronology.convertField : $z0 = virtualinvoke r1.<org.joda.time.DurationField: boolean isSupported()>() >>>>>>>> org.joda.time.chrono.ZonedChronology.convertField : if $z0 != 0
org.joda.time.chrono.ZonedChronology.convertField : if $z0 != 0 >>>>>>>> org.joda.time.chrono.ZonedChronology.convertField : $z1 = virtualinvoke r2.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r1)
org.joda.time.chrono.ZonedChronology.convertField : $z1 = virtualinvoke r2.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.joda.time.chrono.ZonedChronology.convertField : if $z1 == 0
org.joda.time.chrono.ZonedChronology.convertField : if $z1 == 0 >>>>>>>> org.joda.time.chrono.ZonedChronology.convertField : $r6 = new org.joda.time.chrono.ZonedChronology$ZonedDurationField
org.joda.time.chrono.ZonedChronology.convertField : $r6 = new org.joda.time.chrono.ZonedChronology$ZonedDurationField >>>>>>>> org.joda.time.chrono.ZonedChronology.convertField : $r7 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.ZonedChronology.convertField : $r7 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.ZonedChronology.getZone : $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: java.lang.Object getParam()>()
org.joda.time.chrono.ZonedChronology.getZone : $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: java.lang.Object getParam()>() >>>>>>>> org.joda.time.chrono.ZonedChronology.getZone : $r2 = (org.joda.time.DateTimeZone) $r1
org.joda.time.chrono.ZonedChronology.getZone : $r2 = (org.joda.time.DateTimeZone) $r1 >>>>>>>> org.joda.time.chrono.ZonedChronology.getZone : return $r2
org.joda.time.chrono.ZonedChronology.getZone : return $r2 >>>>>>>> org.joda.time.chrono.ZonedChronology.convertField : specialinvoke $r6.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DateTimeZone)>(r1, $r7)
org.joda.time.chrono.ZonedChronology.convertField : specialinvoke $r6.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: void <init>(org.joda.time.DurationField,org.joda.time.DateTimeZone)>(r1, $r7) >>>>>>>> org.joda.time.chrono.ZonedChronology.useTimeArithmetic : if r0 == null
org.joda.time.chrono.ZonedChronology.useTimeArithmetic : if r0 == null >>>>>>>> org.joda.time.chrono.ZonedChronology.useTimeArithmetic : $l0 = virtualinvoke r0.<org.joda.time.DurationField: long getUnitMillis()>()
org.joda.time.chrono.ZonedChronology.useTimeArithmetic : $l0 = virtualinvoke r0.<org.joda.time.DurationField: long getUnitMillis()>() >>>>>>>> org.joda.time.field.DecoratedDurationField.getUnitMillis : $r1 = r0.<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField iField>
org.joda.time.field.DecoratedDurationField.getUnitMillis : $r1 = r0.<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField iField> >>>>>>>> org.joda.time.field.DecoratedDurationField.getUnitMillis : $l0 = virtualinvoke $r1.<org.joda.time.DurationField: long getUnitMillis()>()
org.joda.time.field.DecoratedDurationField.getUnitMillis : $l0 = virtualinvoke $r1.<org.joda.time.DurationField: long getUnitMillis()>() >>>>>>>> org.joda.time.field.ScaledDurationField.getUnitMillis : $r1 = virtualinvoke r0.<org.joda.time.field.ScaledDurationField: org.joda.time.DurationField getWrappedField()>()
org.joda.time.field.ScaledDurationField.getUnitMillis : $r1 = virtualinvoke r0.<org.joda.time.field.ScaledDurationField: org.joda.time.DurationField getWrappedField()>() >>>>>>>> org.joda.time.field.DecoratedDurationField.getWrappedField : $r1 = r0.<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField iField>
org.joda.time.field.DecoratedDurationField.getWrappedField : $r1 = r0.<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField iField> >>>>>>>> org.joda.time.field.DecoratedDurationField.getWrappedField : return $r1
org.joda.time.field.DecoratedDurationField.getWrappedField : return $r1 >>>>>>>> org.joda.time.field.ScaledDurationField.getUnitMillis : $l0 = virtualinvoke $r1.<org.joda.time.DurationField: long getUnitMillis()>()
org.joda.time.field.ScaledDurationField.getUnitMillis : $l0 = virtualinvoke $r1.<org.joda.time.DurationField: long getUnitMillis()>() >>>>>>>> org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getUnitMillis : $r1 = r0.<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: org.joda.time.field.ImpreciseDateTimeField this$0>
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getUnitMillis : $r1 = r0.<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: org.joda.time.field.ImpreciseDateTimeField this$0> >>>>>>>> org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getUnitMillis : $l0 = $r1.<org.joda.time.field.ImpreciseDateTimeField: long iUnitMillis>
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getUnitMillis : $l0 = $r1.<org.joda.time.field.ImpreciseDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getUnitMillis : return $l0
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getUnitMillis : return $l0 >>>>>>>> org.joda.time.field.ScaledDurationField.getUnitMillis : $i1 = r0.<org.joda.time.field.ScaledDurationField: int iScalar>
org.joda.time.field.ScaledDurationField.getUnitMillis : $i1 = r0.<org.joda.time.field.ScaledDurationField: int iScalar> >>>>>>>> org.joda.time.field.ScaledDurationField.getUnitMillis : $l2 = (long) $i1
org.joda.time.field.ScaledDurationField.getUnitMillis : $l2 = (long) $i1 >>>>>>>> org.joda.time.field.ScaledDurationField.getUnitMillis : $l3 = $l0 * $l2
org.joda.time.field.ScaledDurationField.getUnitMillis : $l3 = $l0 * $l2 >>>>>>>> org.joda.time.field.ScaledDurationField.getUnitMillis : return $l3
org.joda.time.field.ScaledDurationField.getUnitMillis : return $l3 >>>>>>>> org.joda.time.field.DecoratedDurationField.getUnitMillis : return $l0
org.joda.time.field.DecoratedDurationField.getUnitMillis : return $l0 >>>>>>>> org.joda.time.chrono.ZonedChronology.useTimeArithmetic : $b1 = $l0 cmp 43200000L
org.joda.time.chrono.ZonedChronology.useTimeArithmetic : $b1 = $l0 cmp 43200000L >>>>>>>> org.joda.time.chrono.ZonedChronology.useTimeArithmetic : if $b1 >= 0
org.joda.time.chrono.ZonedChronology.useTimeArithmetic : if $b1 >= 0 >>>>>>>> org.joda.time.chrono.ZonedChronology.useTimeArithmetic : $z0 = 0
org.joda.time.chrono.ZonedChronology.useTimeArithmetic : $z0 = 0 >>>>>>>> org.joda.time.chrono.ZonedChronology.useTimeArithmetic : return $z0
org.joda.time.chrono.ZonedChronology.useTimeArithmetic : return $z0 >>>>>>>> org.joda.time.chrono.ZonedChronology.convertField : r3 = $r6
org.joda.time.chrono.ZonedChronology.convertField : r3 = $r6 >>>>>>>> org.joda.time.chrono.ZonedChronology.convertField : virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3)
org.joda.time.chrono.ZonedChronology.convertField : virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3) >>>>>>>> org.joda.time.chrono.ZonedChronology.convertField : return r3
org.joda.time.chrono.ZonedChronology.convertField : return r3 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries> = $r7
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries> = $r7 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r8 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years>
org.joda.time.chrono.ZonedChronology.assemble : $r8 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r9 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r8, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r9 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r8, r3) >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years> = $r9
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years> = $r9 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r10 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months>
org.joda.time.chrono.ZonedChronology.assemble : $r10 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r11 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r10, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r11 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r10, r3) >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months> = $r11
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months> = $r11 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r12 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears>
org.joda.time.chrono.ZonedChronology.assemble : $r12 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r13 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r12, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r13 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r12, r3) >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears> = $r13
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears> = $r13 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r14 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weeks>
org.joda.time.chrono.ZonedChronology.assemble : $r14 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weeks> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r15 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r14, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r15 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r14, r3) >>>>>>>> org.joda.time.field.PreciseDurationField.hashCode : l0 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis>
org.joda.time.field.PreciseDurationField.hashCode : l0 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationField.hashCode : $l2 = l0 >>> 32
org.joda.time.field.PreciseDurationField.hashCode : $l2 = l0 >>> 32 >>>>>>>> org.joda.time.field.PreciseDurationField.hashCode : $l3 = l0 ^ $l2
org.joda.time.field.PreciseDurationField.hashCode : $l3 = l0 ^ $l2 >>>>>>>> org.joda.time.field.PreciseDurationField.hashCode : i1 = (int) $l3
org.joda.time.field.PreciseDurationField.hashCode : i1 = (int) $l3 >>>>>>>> org.joda.time.field.PreciseDurationField.hashCode : $r1 = virtualinvoke r0.<org.joda.time.field.PreciseDurationField: org.joda.time.DurationFieldType getType()>()
org.joda.time.field.PreciseDurationField.hashCode : $r1 = virtualinvoke r0.<org.joda.time.field.PreciseDurationField: org.joda.time.DurationFieldType getType()>() >>>>>>>> org.joda.time.field.PreciseDurationField.hashCode : $i4 = virtualinvoke $r1.<java.lang.Object: int hashCode()>()
org.joda.time.field.PreciseDurationField.hashCode : $i4 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() >>>>>>>> org.joda.time.field.PreciseDurationField.hashCode : i5 = i1 + $i4
org.joda.time.field.PreciseDurationField.hashCode : i5 = i1 + $i4 >>>>>>>> org.joda.time.field.PreciseDurationField.hashCode : return i5
org.joda.time.field.PreciseDurationField.hashCode : return i5 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weeks> = $r15
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weeks> = $r15 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r16 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days>
org.joda.time.chrono.ZonedChronology.assemble : $r16 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r17 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r16, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r17 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r16, r3) >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days> = $r17
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days> = $r17 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r18 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField halfdays>
org.joda.time.chrono.ZonedChronology.assemble : $r18 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField halfdays> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r19 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r18, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r19 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r18, r3) >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField halfdays> = $r19
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField halfdays> = $r19 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r20 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField hours>
org.joda.time.chrono.ZonedChronology.assemble : $r20 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField hours> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r21 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r20, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r21 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r20, r3) >>>>>>>> org.joda.time.chrono.ZonedChronology.useTimeArithmetic : $z0 = 1
org.joda.time.chrono.ZonedChronology.useTimeArithmetic : $z0 = 1 >>>>>>>> org.joda.time.chrono.ZonedChronology.useTimeArithmetic : goto [?= return $z0]
org.joda.time.chrono.ZonedChronology.useTimeArithmetic : goto [?= return $z0] >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField hours> = $r21
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField hours> = $r21 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r22 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField minutes>
org.joda.time.chrono.ZonedChronology.assemble : $r22 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField minutes> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r23 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r22, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r23 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r22, r3) >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField minutes> = $r23
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField minutes> = $r23 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r24 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField seconds>
org.joda.time.chrono.ZonedChronology.assemble : $r24 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField seconds> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r25 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r24, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r25 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r24, r3) >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField seconds> = $r25
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField seconds> = $r25 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r26 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField millis>
org.joda.time.chrono.ZonedChronology.assemble : $r26 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField millis> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r27 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r26, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r27 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r26, r3) >>>>>>>> org.joda.time.field.MillisDurationField.hashCode : $l0 = virtualinvoke r0.<org.joda.time.field.MillisDurationField: long getUnitMillis()>()
org.joda.time.field.MillisDurationField.hashCode : $l0 = virtualinvoke r0.<org.joda.time.field.MillisDurationField: long getUnitMillis()>() >>>>>>>> org.joda.time.field.MillisDurationField.getUnitMillis : return 1L
org.joda.time.field.MillisDurationField.getUnitMillis : return 1L >>>>>>>> org.joda.time.field.MillisDurationField.hashCode : $i1 = (int) $l0
org.joda.time.field.MillisDurationField.hashCode : $i1 = (int) $l0 >>>>>>>> org.joda.time.field.MillisDurationField.hashCode : return $i1
org.joda.time.field.MillisDurationField.hashCode : return $i1 >>>>>>>> org.joda.time.field.MillisDurationField.getType : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>()
org.joda.time.field.MillisDurationField.getType : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>() >>>>>>>> org.joda.time.DurationFieldType.millis : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MILLIS_TYPE>
org.joda.time.DurationFieldType.millis : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MILLIS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.millis : return $r0
org.joda.time.DurationFieldType.millis : return $r0 >>>>>>>> org.joda.time.field.MillisDurationField.getType : return $r1
org.joda.time.field.MillisDurationField.getType : return $r1 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField millis> = $r27
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField millis> = $r27 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r28 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year>
org.joda.time.chrono.ZonedChronology.assemble : $r28 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r29 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r28, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r29 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r28, r3) >>>>>>>> org.joda.time.chrono.ZonedChronology.convertField : $z0 = virtualinvoke r1.<org.joda.time.DateTimeField: boolean isSupported()>()
org.joda.time.chrono.ZonedChronology.convertField : $z0 = virtualinvoke r1.<org.joda.time.DateTimeField: boolean isSupported()>() >>>>>>>> org.joda.time.chrono.ZonedChronology.convertField : $r6 = new org.joda.time.chrono.ZonedChronology$ZonedDateTimeField
org.joda.time.chrono.ZonedChronology.convertField : $r6 = new org.joda.time.chrono.ZonedChronology$ZonedDateTimeField >>>>>>>> org.joda.time.chrono.ZonedChronology.convertField : $r8 = virtualinvoke r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>()
org.joda.time.chrono.ZonedChronology.convertField : $r8 = virtualinvoke r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>() >>>>>>>> org.joda.time.chrono.ZonedChronology.convertField : $r9 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r8, r2)
org.joda.time.chrono.ZonedChronology.convertField : $r9 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r8, r2) >>>>>>>> org.joda.time.chrono.ZonedChronology.convertField : $r4 = virtualinvoke r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1)
org.joda.time.chrono.ZonedChronology.convertField : $r4 = virtualinvoke r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.joda.time.chrono.ZonedChronology.convertField : $r5 = (org.joda.time.DurationField) $r4
org.joda.time.chrono.ZonedChronology.convertField : $r5 = (org.joda.time.DurationField) $r4 >>>>>>>> org.joda.time.chrono.ZonedChronology.convertField : return $r5
org.joda.time.chrono.ZonedChronology.convertField : return $r5 >>>>>>>> org.joda.time.chrono.ZonedChronology.convertField : $r10 = virtualinvoke r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getRangeDurationField()>()
org.joda.time.chrono.ZonedChronology.convertField : $r10 = virtualinvoke r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getRangeDurationField()>() >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.getRangeDurationField : $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField iRangeDurationField>
org.joda.time.chrono.GJChronology$CutoverField.getRangeDurationField : $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DurationField iRangeDurationField> >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.getRangeDurationField : return $r1
org.joda.time.chrono.GJChronology$CutoverField.getRangeDurationField : return $r1 >>>>>>>> org.joda.time.chrono.ZonedChronology.convertField : $r11 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r10, r2)
org.joda.time.chrono.ZonedChronology.convertField : $r11 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r10, r2) >>>>>>>> org.joda.time.chrono.ZonedChronology.convertField : $r12 = virtualinvoke r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getLeapDurationField()>()
org.joda.time.chrono.ZonedChronology.convertField : $r12 = virtualinvoke r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getLeapDurationField()>() >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.getLeapDurationField : $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>
org.joda.time.chrono.GJChronology$CutoverField.getLeapDurationField : $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField> >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.getLeapDurationField : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getLeapDurationField()>()
org.joda.time.chrono.GJChronology$CutoverField.getLeapDurationField : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getLeapDurationField()>() >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getLeapDurationField : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.getLeapDurationField : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getLeapDurationField : $r2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField days()>()
org.joda.time.chrono.BasicYearDateTimeField.getLeapDurationField : $r2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField days()>() >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getLeapDurationField : return $r2
org.joda.time.chrono.BasicYearDateTimeField.getLeapDurationField : return $r2 >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.getLeapDurationField : return $r2
org.joda.time.chrono.GJChronology$CutoverField.getLeapDurationField : return $r2 >>>>>>>> org.joda.time.chrono.ZonedChronology.convertField : $r13 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r12, r2)
org.joda.time.chrono.ZonedChronology.convertField : $r13 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r12, r2) >>>>>>>> org.joda.time.chrono.ZonedChronology.convertField : specialinvoke $r6.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeZone,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>(r1, $r7, $r9, $r11, $r13)
org.joda.time.chrono.ZonedChronology.convertField : specialinvoke $r6.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeZone,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>(r1, $r7, $r9, $r11, $r13) >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getUnitMillis : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DurationField iField>
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getUnitMillis : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDurationField: org.joda.time.DurationField iField> >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getUnitMillis : $l0 = virtualinvoke $r1.<org.joda.time.DurationField: long getUnitMillis()>()
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getUnitMillis : $l0 = virtualinvoke $r1.<org.joda.time.DurationField: long getUnitMillis()>() >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDurationField.getUnitMillis : return $l0
org.joda.time.chrono.ZonedChronology$ZonedDurationField.getUnitMillis : return $l0 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> = $r29
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> = $r29 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r30 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra>
org.joda.time.chrono.ZonedChronology.assemble : $r30 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r31 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r30, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r31 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r30, r3) >>>>>>>> org.joda.time.field.BaseDateTimeField.getLeapDurationField : return null
org.joda.time.field.BaseDateTimeField.getLeapDurationField : return null >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> = $r31
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> = $r31 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r32 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury>
org.joda.time.chrono.ZonedChronology.assemble : $r32 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r33 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r32, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r33 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r32, r3) >>>>>>>> org.joda.time.field.ScaledDurationField.hashCode : $i2 = r0.<org.joda.time.field.ScaledDurationField: int iScalar>
org.joda.time.field.ScaledDurationField.hashCode : $i2 = r0.<org.joda.time.field.ScaledDurationField: int iScalar> >>>>>>>> org.joda.time.field.ScaledDurationField.hashCode : l0 = (long) $i2
org.joda.time.field.ScaledDurationField.hashCode : l0 = (long) $i2 >>>>>>>> org.joda.time.field.ScaledDurationField.hashCode : $l3 = l0 >>> 32
org.joda.time.field.ScaledDurationField.hashCode : $l3 = l0 >>> 32 >>>>>>>> org.joda.time.field.ScaledDurationField.hashCode : $l4 = l0 ^ $l3
org.joda.time.field.ScaledDurationField.hashCode : $l4 = l0 ^ $l3 >>>>>>>> org.joda.time.field.ScaledDurationField.hashCode : i1 = (int) $l4
org.joda.time.field.ScaledDurationField.hashCode : i1 = (int) $l4 >>>>>>>> org.joda.time.field.ScaledDurationField.hashCode : $r1 = virtualinvoke r0.<org.joda.time.field.ScaledDurationField: org.joda.time.DurationFieldType getType()>()
org.joda.time.field.ScaledDurationField.hashCode : $r1 = virtualinvoke r0.<org.joda.time.field.ScaledDurationField: org.joda.time.DurationFieldType getType()>() >>>>>>>> org.joda.time.field.ScaledDurationField.hashCode : $i5 = virtualinvoke $r1.<java.lang.Object: int hashCode()>()
org.joda.time.field.ScaledDurationField.hashCode : $i5 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() >>>>>>>> org.joda.time.field.ScaledDurationField.hashCode : i6 = i1 + $i5
org.joda.time.field.ScaledDurationField.hashCode : i6 = i1 + $i5 >>>>>>>> org.joda.time.field.ScaledDurationField.hashCode : $r2 = virtualinvoke r0.<org.joda.time.field.ScaledDurationField: org.joda.time.DurationField getWrappedField()>()
org.joda.time.field.ScaledDurationField.hashCode : $r2 = virtualinvoke r0.<org.joda.time.field.ScaledDurationField: org.joda.time.DurationField getWrappedField()>() >>>>>>>> org.joda.time.field.ScaledDurationField.hashCode : $i7 = virtualinvoke $r2.<java.lang.Object: int hashCode()>()
org.joda.time.field.ScaledDurationField.hashCode : $i7 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() >>>>>>>> org.joda.time.field.ScaledDurationField.hashCode : i8 = i6 + $i7
org.joda.time.field.ScaledDurationField.hashCode : i8 = i6 + $i7 >>>>>>>> org.joda.time.field.ScaledDurationField.hashCode : return i8
org.joda.time.field.ScaledDurationField.hashCode : return i8 >>>>>>>> org.joda.time.field.OffsetDateTimeField.getLeapDurationField : $r1 = virtualinvoke r0.<org.joda.time.field.OffsetDateTimeField: org.joda.time.DateTimeField getWrappedField()>()
org.joda.time.field.OffsetDateTimeField.getLeapDurationField : $r1 = virtualinvoke r0.<org.joda.time.field.OffsetDateTimeField: org.joda.time.DateTimeField getWrappedField()>() >>>>>>>> org.joda.time.field.OffsetDateTimeField.getLeapDurationField : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getLeapDurationField()>()
org.joda.time.field.OffsetDateTimeField.getLeapDurationField : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getLeapDurationField()>() >>>>>>>> org.joda.time.field.OffsetDateTimeField.getLeapDurationField : return $r2
org.joda.time.field.OffsetDateTimeField.getLeapDurationField : return $r2 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> = $r33
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> = $r33 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r34 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra>
org.joda.time.chrono.ZonedChronology.assemble : $r34 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r35 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r34, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r35 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r34, r3) >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> = $r35
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> = $r35 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r36 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era>
org.joda.time.chrono.ZonedChronology.assemble : $r36 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r37 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r36, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r37 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r36, r3) >>>>>>>> org.joda.time.field.UnsupportedDurationField.getUnitMillis : return 0L
org.joda.time.field.UnsupportedDurationField.getUnitMillis : return 0L >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> = $r37
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> = $r37 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r38 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek>
org.joda.time.chrono.ZonedChronology.assemble : $r38 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r39 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r38, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r39 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r38, r3) >>>>>>>> org.joda.time.chrono.GJDayOfWeekDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.chrono.GJDayOfWeekDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.GJDayOfWeekDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.chrono.GJDayOfWeekDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.GJDayOfWeekDateTimeField.getRangeDurationField : $r2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField weeks()>()
org.joda.time.chrono.GJDayOfWeekDateTimeField.getRangeDurationField : $r2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField weeks()>() >>>>>>>> org.joda.time.chrono.GJDayOfWeekDateTimeField.getRangeDurationField : return $r2
org.joda.time.chrono.GJDayOfWeekDateTimeField.getRangeDurationField : return $r2 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek> = $r39
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek> = $r39 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r40 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth>
org.joda.time.chrono.ZonedChronology.assemble : $r40 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r41 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r40, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r41 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r40, r3) >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth> = $r41
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth> = $r41 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r42 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear>
org.joda.time.chrono.ZonedChronology.assemble : $r42 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r43 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r42, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r43 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r42, r3) >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear> = $r43
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear> = $r43 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r44 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear>
org.joda.time.chrono.ZonedChronology.assemble : $r44 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r45 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r44, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r45 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r44, r3) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getLeapDurationField : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getLeapDurationField : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getLeapDurationField : $r2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField days()>()
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getLeapDurationField : $r2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField days()>() >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getLeapDurationField : return $r2
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getLeapDurationField : return $r2 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> = $r45
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> = $r45 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r46 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear>
org.joda.time.chrono.ZonedChronology.assemble : $r46 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r47 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r46, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r47 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r46, r3) >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear> = $r47
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear> = $r47 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r48 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear>
org.joda.time.chrono.ZonedChronology.assemble : $r48 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r49 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r48, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r49 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r48, r3) >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.getLeapDurationField : $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicWeekyearDateTimeField.getLeapDurationField : $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.getLeapDurationField : $r2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField weeks()>()
org.joda.time.chrono.BasicWeekyearDateTimeField.getLeapDurationField : $r2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField weeks()>() >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.getLeapDurationField : return $r2
org.joda.time.chrono.BasicWeekyearDateTimeField.getLeapDurationField : return $r2 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> = $r49
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> = $r49 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r50 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury>
org.joda.time.chrono.ZonedChronology.assemble : $r50 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r51 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r50, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r51 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r50, r3) >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> = $r51
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> = $r51 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r52 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond>
org.joda.time.chrono.ZonedChronology.assemble : $r52 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r53 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r52, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r53 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r52, r3) >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond> = $r53
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond> = $r53 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r54 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay>
org.joda.time.chrono.ZonedChronology.assemble : $r54 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r55 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r54, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r55 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r54, r3) >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay> = $r55
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay> = $r55 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r56 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute>
org.joda.time.chrono.ZonedChronology.assemble : $r56 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r57 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r56, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r57 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r56, r3) >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute> = $r57
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute> = $r57 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r58 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay>
org.joda.time.chrono.ZonedChronology.assemble : $r58 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r59 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r58, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r59 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r58, r3) >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay> = $r59
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay> = $r59 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r60 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour>
org.joda.time.chrono.ZonedChronology.assemble : $r60 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r61 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r60, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r61 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r60, r3) >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour> = $r61
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour> = $r61 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r62 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay>
org.joda.time.chrono.ZonedChronology.assemble : $r62 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r63 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r62, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r63 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r62, r3) >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay> = $r63
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay> = $r63 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r64 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay>
org.joda.time.chrono.ZonedChronology.assemble : $r64 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r65 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r64, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r65 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r64, r3) >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay> = $r65
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay> = $r65 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r66 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday>
org.joda.time.chrono.ZonedChronology.assemble : $r66 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r67 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r66, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r67 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r66, r3) >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday> = $r67
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday> = $r67 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r68 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay>
org.joda.time.chrono.ZonedChronology.assemble : $r68 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r69 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r68, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r69 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r68, r3) >>>>>>>> org.joda.time.field.ZeroIsMaxDateTimeField.getLeapDurationField : $r1 = virtualinvoke r0.<org.joda.time.field.ZeroIsMaxDateTimeField: org.joda.time.DateTimeField getWrappedField()>()
org.joda.time.field.ZeroIsMaxDateTimeField.getLeapDurationField : $r1 = virtualinvoke r0.<org.joda.time.field.ZeroIsMaxDateTimeField: org.joda.time.DateTimeField getWrappedField()>() >>>>>>>> org.joda.time.field.ZeroIsMaxDateTimeField.getLeapDurationField : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getLeapDurationField()>()
org.joda.time.field.ZeroIsMaxDateTimeField.getLeapDurationField : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getLeapDurationField()>() >>>>>>>> org.joda.time.field.ZeroIsMaxDateTimeField.getLeapDurationField : return $r2
org.joda.time.field.ZeroIsMaxDateTimeField.getLeapDurationField : return $r2 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay> = $r69
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay> = $r69 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r70 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday>
org.joda.time.chrono.ZonedChronology.assemble : $r70 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r71 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r70, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r71 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r70, r3) >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday> = $r71
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday> = $r71 >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r72 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay>
org.joda.time.chrono.ZonedChronology.assemble : $r72 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay> >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : $r73 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r72, r3)
org.joda.time.chrono.ZonedChronology.assemble : $r73 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r72, r3) >>>>>>>> org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay> = $r73
org.joda.time.chrono.ZonedChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay> = $r73 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r146 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay>
org.joda.time.chrono.AssembledChronology.setFields : $r146 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r147 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.setFields : $r147 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r148 = virtualinvoke $r147.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>()
org.joda.time.chrono.AssembledChronology.setFields : $r148 = virtualinvoke $r147.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r146 != $r148
org.joda.time.chrono.AssembledChronology.setFields : if $r146 != $r148 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $b1 = 0
org.joda.time.chrono.AssembledChronology.setFields : $b1 = 0 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r158 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay>
org.joda.time.chrono.AssembledChronology.setFields : $r158 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r159 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.setFields : $r159 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r160 = virtualinvoke $r159.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>()
org.joda.time.chrono.AssembledChronology.setFields : $r160 = virtualinvoke $r159.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r158 != $r160
org.joda.time.chrono.AssembledChronology.setFields : if $r158 != $r160 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $b2 = 0
org.joda.time.chrono.AssembledChronology.setFields : $b2 = 0 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $b3 = $b1 | $b2
org.joda.time.chrono.AssembledChronology.setFields : $b3 = $b1 | $b2 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r161 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear>
org.joda.time.chrono.AssembledChronology.setFields : $r161 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r162 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.setFields : $r162 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r163 = virtualinvoke $r162.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.chrono.AssembledChronology.setFields : $r163 = virtualinvoke $r162.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r161 != $r163
org.joda.time.chrono.AssembledChronology.setFields : if $r161 != $r163 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $b4 = 0
org.joda.time.chrono.AssembledChronology.setFields : $b4 = 0 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : b0 = $b3 | $b4
org.joda.time.chrono.AssembledChronology.setFields : b0 = $b3 | $b4 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r149 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfHour>
org.joda.time.chrono.AssembledChronology.setFields : $r149 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfHour> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r150 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.setFields : $r150 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r151 = virtualinvoke $r150.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>()
org.joda.time.chrono.AssembledChronology.setFields : $r151 = virtualinvoke $r150.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r149 != $r151
org.joda.time.chrono.AssembledChronology.setFields : if $r149 != $r151 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r152 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfMinute>
org.joda.time.chrono.AssembledChronology.setFields : $r152 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfMinute> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r153 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.setFields : $r153 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r154 = virtualinvoke $r153.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>()
org.joda.time.chrono.AssembledChronology.setFields : $r154 = virtualinvoke $r153.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r152 != $r154
org.joda.time.chrono.AssembledChronology.setFields : if $r152 != $r154 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r155 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfSecond>
org.joda.time.chrono.AssembledChronology.setFields : $r155 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfSecond> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r156 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.setFields : $r156 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r157 = virtualinvoke $r156.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>()
org.joda.time.chrono.AssembledChronology.setFields : $r157 = virtualinvoke $r156.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r155 != $r157
org.joda.time.chrono.AssembledChronology.setFields : if $r155 != $r157 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $b1 = 1
org.joda.time.chrono.AssembledChronology.setFields : $b1 = 1 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= $r158 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay>]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= $r158 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay>] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $b2 = 2
org.joda.time.chrono.AssembledChronology.setFields : $b2 = 2 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= $b3 = $b1 | $b2]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= $b3 = $b1 | $b2] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r164 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear>
org.joda.time.chrono.AssembledChronology.setFields : $r164 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r165 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.setFields : $r165 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r166 = virtualinvoke $r165.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.chrono.AssembledChronology.setFields : $r166 = virtualinvoke $r165.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r164 != $r166
org.joda.time.chrono.AssembledChronology.setFields : if $r164 != $r166 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r167 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth>
org.joda.time.chrono.AssembledChronology.setFields : $r167 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r168 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.setFields : $r168 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r169 = virtualinvoke $r168.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.chrono.AssembledChronology.setFields : $r169 = virtualinvoke $r168.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r167 != $r169
org.joda.time.chrono.AssembledChronology.setFields : if $r167 != $r169 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $b4 = 4
org.joda.time.chrono.AssembledChronology.setFields : $b4 = 4 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= b0 = $b3 | $b4]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= b0 = $b3 | $b4] >>>>>>>> org.joda.time.chrono.GJChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.GJChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.GJChronology.getZone : return $r3
org.joda.time.chrono.GJChronology.getZone : return $r3 >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : $r5 = virtualinvoke r0.<org.joda.time.chrono.BuddhistChronology: java.lang.Object getParam()>()
org.joda.time.chrono.BuddhistChronology.assemble : $r5 = virtualinvoke r0.<org.joda.time.chrono.BuddhistChronology: java.lang.Object getParam()>() >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : if $r5 != null
org.joda.time.chrono.BuddhistChronology.assemble : if $r5 != null >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : r2 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year>
org.joda.time.chrono.BuddhistChronology.assemble : r2 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : $r3 = new org.joda.time.field.OffsetDateTimeField
org.joda.time.chrono.BuddhistChronology.assemble : $r3 = new org.joda.time.field.OffsetDateTimeField >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : $r4 = new org.joda.time.field.SkipUndoDateTimeField
org.joda.time.chrono.BuddhistChronology.assemble : $r4 = new org.joda.time.field.SkipUndoDateTimeField >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : specialinvoke $r4.<org.joda.time.field.SkipUndoDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>(r0, r2)
org.joda.time.chrono.BuddhistChronology.assemble : specialinvoke $r4.<org.joda.time.field.SkipUndoDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>(r0, r2) >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMinimumValue : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMinimumValue : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMinimumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMinimumValue()>()
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMinimumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMinimumValue()>() >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue : $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iJulianField>
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue : $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iJulianField> >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMinimumValue()>()
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMinimumValue()>() >>>>>>>> org.joda.time.field.SkipDateTimeField.getMinimumValue : $i0 = r0.<org.joda.time.field.SkipDateTimeField: int iMinValue>
org.joda.time.field.SkipDateTimeField.getMinimumValue : $i0 = r0.<org.joda.time.field.SkipDateTimeField: int iMinValue> >>>>>>>> org.joda.time.field.SkipDateTimeField.getMinimumValue : return $i0
org.joda.time.field.SkipDateTimeField.getMinimumValue : return $i0 >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue : return $i0
org.joda.time.chrono.GJChronology$CutoverField.getMinimumValue : return $i0 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMinimumValue : return $i0
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMinimumValue : return $i0 >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : specialinvoke $r3.<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,int)>($r4, 543)
org.joda.time.chrono.BuddhistChronology.assemble : specialinvoke $r3.<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,int)>($r4, 543) >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getType : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeFieldType iType>
org.joda.time.field.DelegatedDateTimeField.getType : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeFieldType iType> >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getType : return $r1
org.joda.time.field.DelegatedDateTimeField.getType : return $r1 >>>>>>>> org.joda.time.field.DelegatedDateTimeField.isSupported : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DelegatedDateTimeField.isSupported : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.field.DelegatedDateTimeField.isSupported : $z0 = virtualinvoke $r1.<org.joda.time.DateTimeField: boolean isSupported()>()
org.joda.time.field.DelegatedDateTimeField.isSupported : $z0 = virtualinvoke $r1.<org.joda.time.DateTimeField: boolean isSupported()>() >>>>>>>> org.joda.time.field.DelegatedDateTimeField.isSupported : return $z0
org.joda.time.field.DelegatedDateTimeField.isSupported : return $z0 >>>>>>>> org.joda.time.field.SkipUndoDateTimeField.getMinimumValue : $i0 = r0.<org.joda.time.field.SkipUndoDateTimeField: int iMinValue>
org.joda.time.field.SkipUndoDateTimeField.getMinimumValue : $i0 = r0.<org.joda.time.field.SkipUndoDateTimeField: int iMinValue> >>>>>>>> org.joda.time.field.SkipUndoDateTimeField.getMinimumValue : return $i0
org.joda.time.field.SkipUndoDateTimeField.getMinimumValue : return $i0 >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DelegatedDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMaximumValue()>()
org.joda.time.field.DelegatedDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMaximumValue()>()
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.getMaximumValue : $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField>
org.joda.time.chrono.GJChronology$CutoverField.getMaximumValue : $r1 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.DateTimeField iGregorianField> >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMaximumValue()>()
org.joda.time.chrono.GJChronology$CutoverField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.getMaximumValue : return $i0
org.joda.time.chrono.GJChronology$CutoverField.getMaximumValue : return $i0 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMaximumValue : return $i0
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMaximumValue : return $i0 >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getMaximumValue : return $i0
org.joda.time.field.DelegatedDateTimeField.getMaximumValue : return $i0 >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> = $r3
org.joda.time.chrono.BuddhistChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> = $r3 >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : r6 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra>
org.joda.time.chrono.BuddhistChronology.assemble : r6 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : $r7 = new org.joda.time.field.DelegatedDateTimeField
org.joda.time.chrono.BuddhistChronology.assemble : $r7 = new org.joda.time.field.DelegatedDateTimeField >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : $r8 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year>
org.joda.time.chrono.BuddhistChronology.assemble : $r8 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : $r9 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfEra()>()
org.joda.time.chrono.BuddhistChronology.assemble : $r9 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfEra()>() >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : specialinvoke $r7.<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>($r8, $r9)
org.joda.time.chrono.BuddhistChronology.assemble : specialinvoke $r7.<org.joda.time.field.DelegatedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType)>($r8, $r9) >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> = $r7
org.joda.time.chrono.BuddhistChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> = $r7 >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : r10 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear>
org.joda.time.chrono.BuddhistChronology.assemble : r10 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : $r11 = new org.joda.time.field.OffsetDateTimeField
org.joda.time.chrono.BuddhistChronology.assemble : $r11 = new org.joda.time.field.OffsetDateTimeField >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : $r12 = new org.joda.time.field.SkipUndoDateTimeField
org.joda.time.chrono.BuddhistChronology.assemble : $r12 = new org.joda.time.field.SkipUndoDateTimeField >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : specialinvoke $r12.<org.joda.time.field.SkipUndoDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>(r0, r10)
org.joda.time.chrono.BuddhistChronology.assemble : specialinvoke $r12.<org.joda.time.field.SkipUndoDateTimeField: void <init>(org.joda.time.Chronology,org.joda.time.DateTimeField)>(r0, r10) >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : specialinvoke $r11.<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,int)>($r12, 543)
org.joda.time.chrono.BuddhistChronology.assemble : specialinvoke $r11.<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,int)>($r12, 543) >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicWeekyearDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.chrono.BasicWeekyearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMaxYear()>()
org.joda.time.chrono.BasicWeekyearDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMaxYear()>() >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.getMaximumValue : return $i0
org.joda.time.chrono.BasicWeekyearDateTimeField.getMaximumValue : return $i0 >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> = $r11
org.joda.time.chrono.BuddhistChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> = $r11 >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : $r13 = new org.joda.time.field.OffsetDateTimeField
org.joda.time.chrono.BuddhistChronology.assemble : $r13 = new org.joda.time.field.OffsetDateTimeField >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : $r14 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra>
org.joda.time.chrono.BuddhistChronology.assemble : $r14 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : specialinvoke $r13.<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,int)>($r14, 99)
org.joda.time.chrono.BuddhistChronology.assemble : specialinvoke $r13.<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,int)>($r14, 99) >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : r15 = $r13
org.joda.time.chrono.BuddhistChronology.assemble : r15 = $r13 >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : $r16 = new org.joda.time.field.DividedDateTimeField
org.joda.time.chrono.BuddhistChronology.assemble : $r16 = new org.joda.time.field.DividedDateTimeField >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : $r17 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType centuryOfEra()>()
org.joda.time.chrono.BuddhistChronology.assemble : $r17 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType centuryOfEra()>() >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : specialinvoke $r16.<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>(r15, $r17, 100)
org.joda.time.chrono.BuddhistChronology.assemble : specialinvoke $r16.<org.joda.time.field.DividedDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>(r15, $r17, 100) >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getDurationField : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DelegatedDateTimeField.getDurationField : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getDurationField : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>()
org.joda.time.field.DelegatedDateTimeField.getDurationField : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>() >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getDurationField : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField iDurationField>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getDurationField : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DurationField iDurationField> >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getDurationField : return $r1
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getDurationField : return $r1 >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getDurationField : return $r2
org.joda.time.field.DelegatedDateTimeField.getDurationField : return $r2 >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> = $r16
org.joda.time.chrono.BuddhistChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> = $r16 >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : $r18 = new org.joda.time.field.RemainderDateTimeField
org.joda.time.chrono.BuddhistChronology.assemble : $r18 = new org.joda.time.field.RemainderDateTimeField >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : $r19 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra>
org.joda.time.chrono.BuddhistChronology.assemble : $r19 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : $r20 = (org.joda.time.field.DividedDateTimeField) $r19
org.joda.time.chrono.BuddhistChronology.assemble : $r20 = (org.joda.time.field.DividedDateTimeField) $r19 >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : specialinvoke $r18.<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField)>($r20)
org.joda.time.chrono.BuddhistChronology.assemble : specialinvoke $r18.<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.field.DividedDateTimeField)>($r20) >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : r21 = $r18
org.joda.time.chrono.BuddhistChronology.assemble : r21 = $r18 >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : $r22 = new org.joda.time.field.OffsetDateTimeField
org.joda.time.chrono.BuddhistChronology.assemble : $r22 = new org.joda.time.field.OffsetDateTimeField >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : $r23 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfCentury()>()
org.joda.time.chrono.BuddhistChronology.assemble : $r23 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType yearOfCentury()>() >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : specialinvoke $r22.<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>(r21, $r23, 1)
org.joda.time.chrono.BuddhistChronology.assemble : specialinvoke $r22.<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>(r21, $r23, 1) >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> = $r22
org.joda.time.chrono.BuddhistChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> = $r22 >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : $r24 = new org.joda.time.field.RemainderDateTimeField
org.joda.time.chrono.BuddhistChronology.assemble : $r24 = new org.joda.time.field.RemainderDateTimeField >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : $r25 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear>
org.joda.time.chrono.BuddhistChronology.assemble : $r25 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : $r26 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>()
org.joda.time.chrono.BuddhistChronology.assemble : $r26 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>() >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : specialinvoke $r24.<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>($r25, $r26, 100)
org.joda.time.chrono.BuddhistChronology.assemble : specialinvoke $r24.<org.joda.time.field.RemainderDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>($r25, $r26, 100) >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : r27 = $r24
org.joda.time.chrono.BuddhistChronology.assemble : r27 = $r24 >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : $r28 = new org.joda.time.field.OffsetDateTimeField
org.joda.time.chrono.BuddhistChronology.assemble : $r28 = new org.joda.time.field.OffsetDateTimeField >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : $r29 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>()
org.joda.time.chrono.BuddhistChronology.assemble : $r29 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyearOfCentury()>() >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : specialinvoke $r28.<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>(r27, $r29, 1)
org.joda.time.chrono.BuddhistChronology.assemble : specialinvoke $r28.<org.joda.time.field.OffsetDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.DateTimeFieldType,int)>(r27, $r29, 1) >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> = $r28
org.joda.time.chrono.BuddhistChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> = $r28 >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : $r30 = <org.joda.time.chrono.BuddhistChronology: org.joda.time.DateTimeField ERA_FIELD>
org.joda.time.chrono.BuddhistChronology.assemble : $r30 = <org.joda.time.chrono.BuddhistChronology: org.joda.time.DateTimeField ERA_FIELD> >>>>>>>> org.joda.time.chrono.BuddhistChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> = $r30
org.joda.time.chrono.BuddhistChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> = $r30 >>>>>>>> org.joda.time.chrono.BuddhistChronology.readResolve : r1 = virtualinvoke r0.<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.BuddhistChronology.readResolve : r1 = virtualinvoke r0.<org.joda.time.chrono.BuddhistChronology: org.joda.time.Chronology getBase()>() >>>>>>>> org.joda.time.chrono.BuddhistChronology.readResolve : if r1 != null
org.joda.time.chrono.BuddhistChronology.readResolve : if r1 != null >>>>>>>> org.joda.time.chrono.BuddhistChronology.readResolve : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.BuddhistChronology.readResolve : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.BuddhistChronology.readResolve : $r2 = staticinvoke <org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>($r3)
org.joda.time.chrono.BuddhistChronology.readResolve : $r2 = staticinvoke <org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>($r3) >>>>>>>> org.joda.time.chrono.BuddhistChronology.readResolve : return $r2
org.joda.time.chrono.BuddhistChronology.readResolve : return $r2 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r2 = new java.util.HashMap
org.joda.time.chrono.LimitChronology.assemble : $r2 = new java.util.HashMap >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : specialinvoke $r2.<java.util.HashMap: void <init>()>()
org.joda.time.chrono.LimitChronology.assemble : specialinvoke $r2.<java.util.HashMap: void <init>()>() >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r3 = $r2
org.joda.time.chrono.LimitChronology.assemble : r3 = $r2 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r4 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField eras>
org.joda.time.chrono.LimitChronology.assemble : $r4 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField eras> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r5 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r4, r3)
org.joda.time.chrono.LimitChronology.assemble : $r5 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r4, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : if r1 == null
org.joda.time.chrono.LimitChronology.convertField : if r1 == null >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : return r1
org.joda.time.chrono.LimitChronology.convertField : return r1 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField eras> = $r5
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField eras> = $r5 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r6 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries>
org.joda.time.chrono.LimitChronology.assemble : $r6 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r7 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r6, r3)
org.joda.time.chrono.LimitChronology.assemble : $r7 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r6, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : $z0 = virtualinvoke r1.<org.joda.time.DurationField: boolean isSupported()>()
org.joda.time.chrono.LimitChronology.convertField : $z0 = virtualinvoke r1.<org.joda.time.DurationField: boolean isSupported()>() >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : if $z0 != 0
org.joda.time.chrono.LimitChronology.convertField : if $z0 != 0 >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : $z1 = virtualinvoke r2.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r1)
org.joda.time.chrono.LimitChronology.convertField : $z1 = virtualinvoke r2.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : if $z1 == 0
org.joda.time.chrono.LimitChronology.convertField : if $z1 == 0 >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : $r6 = new org.joda.time.chrono.LimitChronology$LimitDurationField
org.joda.time.chrono.LimitChronology.convertField : $r6 = new org.joda.time.chrono.LimitChronology$LimitDurationField >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : specialinvoke $r6.<org.joda.time.chrono.LimitChronology$LimitDurationField: void <init>(org.joda.time.chrono.LimitChronology,org.joda.time.DurationField)>(r0, r1)
org.joda.time.chrono.LimitChronology.convertField : specialinvoke $r6.<org.joda.time.chrono.LimitChronology$LimitDurationField: void <init>(org.joda.time.chrono.LimitChronology,org.joda.time.DurationField)>(r0, r1) >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : r3 = $r6
org.joda.time.chrono.LimitChronology.convertField : r3 = $r6 >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3)
org.joda.time.chrono.LimitChronology.convertField : virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : return r3
org.joda.time.chrono.LimitChronology.convertField : return r3 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries> = $r7
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries> = $r7 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r8 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years>
org.joda.time.chrono.LimitChronology.assemble : $r8 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r9 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r8, r3)
org.joda.time.chrono.LimitChronology.assemble : $r9 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r8, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years> = $r9
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years> = $r9 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r10 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months>
org.joda.time.chrono.LimitChronology.assemble : $r10 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r11 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r10, r3)
org.joda.time.chrono.LimitChronology.assemble : $r11 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r10, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months> = $r11
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months> = $r11 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r12 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears>
org.joda.time.chrono.LimitChronology.assemble : $r12 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r13 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r12, r3)
org.joda.time.chrono.LimitChronology.assemble : $r13 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r12, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears> = $r13
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears> = $r13 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r14 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weeks>
org.joda.time.chrono.LimitChronology.assemble : $r14 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weeks> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r15 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r14, r3)
org.joda.time.chrono.LimitChronology.assemble : $r15 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r14, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weeks> = $r15
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weeks> = $r15 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r16 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days>
org.joda.time.chrono.LimitChronology.assemble : $r16 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r17 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r16, r3)
org.joda.time.chrono.LimitChronology.assemble : $r17 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r16, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days> = $r17
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days> = $r17 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r18 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField halfdays>
org.joda.time.chrono.LimitChronology.assemble : $r18 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField halfdays> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r19 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r18, r3)
org.joda.time.chrono.LimitChronology.assemble : $r19 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r18, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField halfdays> = $r19
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField halfdays> = $r19 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r20 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField hours>
org.joda.time.chrono.LimitChronology.assemble : $r20 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField hours> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r21 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r20, r3)
org.joda.time.chrono.LimitChronology.assemble : $r21 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r20, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField hours> = $r21
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField hours> = $r21 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r22 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField minutes>
org.joda.time.chrono.LimitChronology.assemble : $r22 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField minutes> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r23 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r22, r3)
org.joda.time.chrono.LimitChronology.assemble : $r23 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r22, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField minutes> = $r23
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField minutes> = $r23 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r24 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField seconds>
org.joda.time.chrono.LimitChronology.assemble : $r24 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField seconds> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r25 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r24, r3)
org.joda.time.chrono.LimitChronology.assemble : $r25 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r24, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField seconds> = $r25
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField seconds> = $r25 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r26 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField millis>
org.joda.time.chrono.LimitChronology.assemble : $r26 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField millis> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r27 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r26, r3)
org.joda.time.chrono.LimitChronology.assemble : $r27 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r26, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField millis> = $r27
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField millis> = $r27 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r28 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year>
org.joda.time.chrono.LimitChronology.assemble : $r28 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r29 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r28, r3)
org.joda.time.chrono.LimitChronology.assemble : $r29 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r28, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : $z0 = virtualinvoke r1.<org.joda.time.DateTimeField: boolean isSupported()>()
org.joda.time.chrono.LimitChronology.convertField : $z0 = virtualinvoke r1.<org.joda.time.DateTimeField: boolean isSupported()>() >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : $r6 = new org.joda.time.chrono.LimitChronology$LimitDateTimeField
org.joda.time.chrono.LimitChronology.convertField : $r6 = new org.joda.time.chrono.LimitChronology$LimitDateTimeField >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : $r7 = virtualinvoke r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>()
org.joda.time.chrono.LimitChronology.convertField : $r7 = virtualinvoke r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>() >>>>>>>> org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDurationField : $r1 = r0.<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField iDurationField>
org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDurationField : $r1 = r0.<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField iDurationField> >>>>>>>> org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDurationField : return $r1
org.joda.time.chrono.LimitChronology$LimitDateTimeField.getDurationField : return $r1 >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : $r8 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r7, r2)
org.joda.time.chrono.LimitChronology.convertField : $r8 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r7, r2) >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : $r4 = virtualinvoke r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1)
org.joda.time.chrono.LimitChronology.convertField : $r4 = virtualinvoke r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : $r5 = (org.joda.time.DurationField) $r4
org.joda.time.chrono.LimitChronology.convertField : $r5 = (org.joda.time.DurationField) $r4 >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : return $r5
org.joda.time.chrono.LimitChronology.convertField : return $r5 >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : $r9 = virtualinvoke r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getRangeDurationField()>()
org.joda.time.chrono.LimitChronology.convertField : $r9 = virtualinvoke r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getRangeDurationField()>() >>>>>>>> org.joda.time.chrono.LimitChronology$LimitDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField iRangeDurationField>
org.joda.time.chrono.LimitChronology$LimitDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField iRangeDurationField> >>>>>>>> org.joda.time.chrono.LimitChronology$LimitDateTimeField.getRangeDurationField : return $r1
org.joda.time.chrono.LimitChronology$LimitDateTimeField.getRangeDurationField : return $r1 >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : $r10 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r9, r2)
org.joda.time.chrono.LimitChronology.convertField : $r10 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r9, r2) >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : $r11 = virtualinvoke r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getLeapDurationField()>()
org.joda.time.chrono.LimitChronology.convertField : $r11 = virtualinvoke r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getLeapDurationField()>() >>>>>>>> org.joda.time.chrono.LimitChronology$LimitDateTimeField.getLeapDurationField : $r1 = r0.<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField iLeapDurationField>
org.joda.time.chrono.LimitChronology$LimitDateTimeField.getLeapDurationField : $r1 = r0.<org.joda.time.chrono.LimitChronology$LimitDateTimeField: org.joda.time.DurationField iLeapDurationField> >>>>>>>> org.joda.time.chrono.LimitChronology$LimitDateTimeField.getLeapDurationField : return $r1
org.joda.time.chrono.LimitChronology$LimitDateTimeField.getLeapDurationField : return $r1 >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : $r12 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r11, r2)
org.joda.time.chrono.LimitChronology.convertField : $r12 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r11, r2) >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : specialinvoke $r6.<org.joda.time.chrono.LimitChronology$LimitDateTimeField: void <init>(org.joda.time.chrono.LimitChronology,org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>(r0, r1, $r8, $r10, $r12)
org.joda.time.chrono.LimitChronology.convertField : specialinvoke $r6.<org.joda.time.chrono.LimitChronology$LimitDateTimeField: void <init>(org.joda.time.chrono.LimitChronology,org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>(r0, r1, $r8, $r10, $r12) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> = $r29
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> = $r29 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r30 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra>
org.joda.time.chrono.LimitChronology.assemble : $r30 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r31 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r30, r3)
org.joda.time.chrono.LimitChronology.assemble : $r31 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r30, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> = $r31
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> = $r31 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r32 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury>
org.joda.time.chrono.LimitChronology.assemble : $r32 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r33 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r32, r3)
org.joda.time.chrono.LimitChronology.assemble : $r33 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r32, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> = $r33
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> = $r33 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r34 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra>
org.joda.time.chrono.LimitChronology.assemble : $r34 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r35 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r34, r3)
org.joda.time.chrono.LimitChronology.assemble : $r35 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r34, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> = $r35
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> = $r35 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r36 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era>
org.joda.time.chrono.LimitChronology.assemble : $r36 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r37 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r36, r3)
org.joda.time.chrono.LimitChronology.assemble : $r37 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r36, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> = $r37
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> = $r37 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r38 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek>
org.joda.time.chrono.LimitChronology.assemble : $r38 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r39 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r38, r3)
org.joda.time.chrono.LimitChronology.assemble : $r39 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r38, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek> = $r39
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek> = $r39 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r40 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth>
org.joda.time.chrono.LimitChronology.assemble : $r40 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r41 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r40, r3)
org.joda.time.chrono.LimitChronology.assemble : $r41 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r40, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth> = $r41
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth> = $r41 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r42 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear>
org.joda.time.chrono.LimitChronology.assemble : $r42 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r43 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r42, r3)
org.joda.time.chrono.LimitChronology.assemble : $r43 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r42, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear> = $r43
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear> = $r43 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r44 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear>
org.joda.time.chrono.LimitChronology.assemble : $r44 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r45 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r44, r3)
org.joda.time.chrono.LimitChronology.assemble : $r45 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r44, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> = $r45
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> = $r45 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r46 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear>
org.joda.time.chrono.LimitChronology.assemble : $r46 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r47 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r46, r3)
org.joda.time.chrono.LimitChronology.assemble : $r47 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r46, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear> = $r47
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear> = $r47 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r48 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear>
org.joda.time.chrono.LimitChronology.assemble : $r48 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r49 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r48, r3)
org.joda.time.chrono.LimitChronology.assemble : $r49 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r48, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> = $r49
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> = $r49 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r50 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury>
org.joda.time.chrono.LimitChronology.assemble : $r50 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r51 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r50, r3)
org.joda.time.chrono.LimitChronology.assemble : $r51 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r50, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> = $r51
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> = $r51 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r52 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond>
org.joda.time.chrono.LimitChronology.assemble : $r52 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r53 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r52, r3)
org.joda.time.chrono.LimitChronology.assemble : $r53 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r52, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond> = $r53
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond> = $r53 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r54 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay>
org.joda.time.chrono.LimitChronology.assemble : $r54 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r55 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r54, r3)
org.joda.time.chrono.LimitChronology.assemble : $r55 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r54, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay> = $r55
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay> = $r55 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r56 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute>
org.joda.time.chrono.LimitChronology.assemble : $r56 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r57 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r56, r3)
org.joda.time.chrono.LimitChronology.assemble : $r57 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r56, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute> = $r57
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute> = $r57 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r58 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay>
org.joda.time.chrono.LimitChronology.assemble : $r58 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r59 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r58, r3)
org.joda.time.chrono.LimitChronology.assemble : $r59 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r58, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay> = $r59
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay> = $r59 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r60 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour>
org.joda.time.chrono.LimitChronology.assemble : $r60 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r61 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r60, r3)
org.joda.time.chrono.LimitChronology.assemble : $r61 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r60, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour> = $r61
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour> = $r61 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r62 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay>
org.joda.time.chrono.LimitChronology.assemble : $r62 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r63 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r62, r3)
org.joda.time.chrono.LimitChronology.assemble : $r63 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r62, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay> = $r63
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay> = $r63 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r64 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay>
org.joda.time.chrono.LimitChronology.assemble : $r64 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r65 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r64, r3)
org.joda.time.chrono.LimitChronology.assemble : $r65 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r64, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay> = $r65
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay> = $r65 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r66 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday>
org.joda.time.chrono.LimitChronology.assemble : $r66 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r67 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r66, r3)
org.joda.time.chrono.LimitChronology.assemble : $r67 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r66, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday> = $r67
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday> = $r67 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r68 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay>
org.joda.time.chrono.LimitChronology.assemble : $r68 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r69 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r68, r3)
org.joda.time.chrono.LimitChronology.assemble : $r69 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r68, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay> = $r69
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay> = $r69 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r70 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday>
org.joda.time.chrono.LimitChronology.assemble : $r70 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r71 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r70, r3)
org.joda.time.chrono.LimitChronology.assemble : $r71 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r70, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday> = $r71
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday> = $r71 >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r72 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay>
org.joda.time.chrono.LimitChronology.assemble : $r72 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay> >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : $r73 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r72, r3)
org.joda.time.chrono.LimitChronology.assemble : $r73 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField,java.util.HashMap)>($r72, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay> = $r73
org.joda.time.chrono.LimitChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay> = $r73 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2
org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null
org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : return $r3
org.joda.time.chrono.AssembledChronology.getZone : return $r3 >>>>>>>> org.joda.time.DateTimeZone.writeReplace : $r1 = new org.joda.time.DateTimeZone$Stub
org.joda.time.DateTimeZone.writeReplace : $r1 = new org.joda.time.DateTimeZone$Stub >>>>>>>> org.joda.time.DateTimeZone.writeReplace : $r2 = r0.<org.joda.time.DateTimeZone: java.lang.String iID>
org.joda.time.DateTimeZone.writeReplace : $r2 = r0.<org.joda.time.DateTimeZone: java.lang.String iID> >>>>>>>> org.joda.time.DateTimeZone.writeReplace : specialinvoke $r1.<org.joda.time.DateTimeZone$Stub: void <init>(java.lang.String)>($r2)
org.joda.time.DateTimeZone.writeReplace : specialinvoke $r1.<org.joda.time.DateTimeZone$Stub: void <init>(java.lang.String)>($r2) >>>>>>>> org.joda.time.DateTimeZone.writeReplace : return $r1
org.joda.time.DateTimeZone.writeReplace : return $r1 >>>>>>>> org.joda.time.DateTimeZone$Stub.writeObject : $r2 = r0.<org.joda.time.DateTimeZone$Stub: java.lang.String iID>
org.joda.time.DateTimeZone$Stub.writeObject : $r2 = r0.<org.joda.time.DateTimeZone$Stub: java.lang.String iID> >>>>>>>> org.joda.time.DateTimeZone$Stub.writeObject : virtualinvoke r1.<java.io.ObjectOutputStream: void writeUTF(java.lang.String)>($r2)
org.joda.time.DateTimeZone$Stub.writeObject : virtualinvoke r1.<java.io.ObjectOutputStream: void writeUTF(java.lang.String)>($r2) >>>>>>>> org.joda.time.chrono.JulianChronology.readResolve : $i1 = i0
org.joda.time.chrono.JulianChronology.readResolve : $i1 = i0 >>>>>>>> org.joda.time.chrono.GregorianChronology.readResolve : $i1 = i0
