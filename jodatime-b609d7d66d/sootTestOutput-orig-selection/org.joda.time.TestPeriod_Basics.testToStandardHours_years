org.joda.time.DateTimeUtils.setCurrentMillisSystem : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>() >>>>>>>> org.joda.time.DateTimeUtils.checkPermission : r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>()
org.joda.time.DateTimeUtils.checkPermission : r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>() >>>>>>>> org.joda.time.DateTimeUtils.checkPermission : if r0 == null
org.joda.time.DateTimeUtils.checkPermission : if r0 == null >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisSystem : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$SystemMillisProvider SYSTEM_MILLIS_PROVIDER>
org.joda.time.DateTimeUtils.setCurrentMillisSystem : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$SystemMillisProvider SYSTEM_MILLIS_PROVIDER> >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisSystem : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0
org.joda.time.DateTimeUtils.setCurrentMillisSystem : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0 >>>>>>>> org.joda.time.DateTimeZone.setDefault : r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>()
org.joda.time.DateTimeZone.setDefault : r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>() >>>>>>>> org.joda.time.DateTimeZone.setDefault : if r1 == null
org.joda.time.DateTimeZone.setDefault : if r1 == null >>>>>>>> org.joda.time.DateTimeZone.setDefault : if r0 != null
org.joda.time.DateTimeZone.setDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.setDefault : $r6 = class "org/joda/time/DateTimeZone"
org.joda.time.DateTimeZone.setDefault : $r6 = class "org/joda/time/DateTimeZone" >>>>>>>> org.joda.time.DateTimeZone.setDefault : r3 = $r6
org.joda.time.DateTimeZone.setDefault : r3 = $r6 >>>>>>>> org.joda.time.DateTimeZone.setDefault : entermonitor $r6
org.joda.time.DateTimeZone.setDefault : entermonitor $r6 >>>>>>>> org.joda.time.DateTimeZone.setDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r0
org.joda.time.DateTimeZone.setDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r0 >>>>>>>> org.joda.time.DateTimeZone.setDefault : exitmonitor r3
org.joda.time.DateTimeZone.setDefault : exitmonitor r3 >>>>>>>> org.joda.time.DateTimeZone.setDefault : goto [?= return]
org.joda.time.DateTimeZone.setDefault : goto [?= return] >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>()
org.joda.time.DateTimeUtils.setCurrentMillisFixed : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>() >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : $r0 = new org.joda.time.DateTimeUtils$FixedMillisProvider
org.joda.time.DateTimeUtils.setCurrentMillisFixed : $r0 = new org.joda.time.DateTimeUtils$FixedMillisProvider >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : specialinvoke $r0.<org.joda.time.DateTimeUtils$FixedMillisProvider: void <init>(long)>(l0)
org.joda.time.DateTimeUtils.setCurrentMillisFixed : specialinvoke $r0.<org.joda.time.DateTimeUtils$FixedMillisProvider: void <init>(long)>(l0) >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0
org.joda.time.DateTimeUtils.setCurrentMillisFixed : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0 >>>>>>>> org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> >>>>>>>> org.joda.time.DateTimeZone.getDefault : if r0 != null
org.joda.time.DateTimeZone.getDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.DateTimeZone.getDefault : return r0 >>>>>>>> org.joda.time.Period.years : $r0 = new org.joda.time.Period
org.joda.time.Period.years : $r0 = new org.joda.time.Period >>>>>>>> org.joda.time.Period.years : $r1 = newarray (int)[9]
org.joda.time.Period.years : $r1 = newarray (int)[9] >>>>>>>> org.joda.time.Period.years : $r1[0] = i0
org.joda.time.Period.years : $r1[0] = i0 >>>>>>>> org.joda.time.Period.years : $r1[1] = 0
org.joda.time.Period.years : $r1[1] = 0 >>>>>>>> org.joda.time.Period.years : $r1[2] = 0
org.joda.time.Period.years : $r1[2] = 0 >>>>>>>> org.joda.time.Period.years : $r1[3] = 0
org.joda.time.Period.years : $r1[3] = 0 >>>>>>>> org.joda.time.Period.years : $r1[4] = 0
org.joda.time.Period.years : $r1[4] = 0 >>>>>>>> org.joda.time.Period.years : $r1[5] = 0
org.joda.time.Period.years : $r1[5] = 0 >>>>>>>> org.joda.time.Period.years : $r1[6] = 0
org.joda.time.Period.years : $r1[6] = 0 >>>>>>>> org.joda.time.Period.years : $r1[7] = 0
org.joda.time.Period.years : $r1[7] = 0 >>>>>>>> org.joda.time.Period.years : $r1[8] = 0
org.joda.time.Period.years : $r1[8] = 0 >>>>>>>> org.joda.time.Period.years : $r2 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType standard()>()
org.joda.time.Period.years : $r2 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType standard()>() >>>>>>>> org.joda.time.PeriodType.standard : r0 = <org.joda.time.PeriodType: org.joda.time.PeriodType cStandard>
org.joda.time.PeriodType.standard : r0 = <org.joda.time.PeriodType: org.joda.time.PeriodType cStandard> >>>>>>>> org.joda.time.PeriodType.standard : if r0 != null
org.joda.time.PeriodType.standard : if r0 != null >>>>>>>> org.joda.time.PeriodType.standard : return r0
org.joda.time.PeriodType.standard : return r0 >>>>>>>> org.joda.time.Period.years : specialinvoke $r0.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>($r1, $r2)
org.joda.time.Period.years : specialinvoke $r0.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>($r1, $r2) >>>>>>>> org.joda.time.Period.years : return $r0
org.joda.time.Period.years : return $r0 >>>>>>>> org.joda.time.Period.toStandardHours : specialinvoke r0.<org.joda.time.Period: void checkYearsAndMonths(java.lang.String)>("Hours")
org.joda.time.Period.toStandardHours : specialinvoke r0.<org.joda.time.Period: void checkYearsAndMonths(java.lang.String)>("Hours") >>>>>>>> org.joda.time.Period.checkYearsAndMonths : $i0 = virtualinvoke r0.<org.joda.time.Period: int getMonths()>()
org.joda.time.Period.checkYearsAndMonths : $i0 = virtualinvoke r0.<org.joda.time.Period: int getMonths()>() >>>>>>>> org.joda.time.Period.getMonths : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.getMonths : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.base.BasePeriod.getPeriodType : $r1 = r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType>
org.joda.time.base.BasePeriod.getPeriodType : $r1 = r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType> >>>>>>>> org.joda.time.base.BasePeriod.getPeriodType : return $r1
org.joda.time.base.BasePeriod.getPeriodType : return $r1 >>>>>>>> org.joda.time.Period.getMonths : $i0 = <org.joda.time.PeriodType: int MONTH_INDEX>
org.joda.time.Period.getMonths : $i0 = <org.joda.time.PeriodType: int MONTH_INDEX> >>>>>>>> org.joda.time.Period.getMonths : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0)
org.joda.time.Period.getMonths : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0) >>>>>>>> org.joda.time.PeriodType.getIndexedField : $r2 = r0.<org.joda.time.PeriodType: int[] iIndices>
org.joda.time.PeriodType.getIndexedField : $r2 = r0.<org.joda.time.PeriodType: int[] iIndices> >>>>>>>> org.joda.time.PeriodType.getIndexedField : i1 = $r2[i0]
org.joda.time.PeriodType.getIndexedField : i1 = $r2[i0] >>>>>>>> org.joda.time.PeriodType.getIndexedField : if i1 != -1
org.joda.time.PeriodType.getIndexedField : if i1 != -1 >>>>>>>> org.joda.time.PeriodType.getIndexedField : $i2 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int getValue(int)>(i1)
org.joda.time.PeriodType.getIndexedField : $i2 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int getValue(int)>(i1) >>>>>>>> org.joda.time.base.BasePeriod.getValue : $r1 = r0.<org.joda.time.base.BasePeriod: int[] iValues>
org.joda.time.base.BasePeriod.getValue : $r1 = r0.<org.joda.time.base.BasePeriod: int[] iValues> >>>>>>>> org.joda.time.base.BasePeriod.getValue : $i1 = $r1[i0]
org.joda.time.base.BasePeriod.getValue : $i1 = $r1[i0] >>>>>>>> org.joda.time.base.BasePeriod.getValue : return $i1
org.joda.time.base.BasePeriod.getValue : return $i1 >>>>>>>> org.joda.time.PeriodType.getIndexedField : return $i2
org.joda.time.PeriodType.getIndexedField : return $i2 >>>>>>>> org.joda.time.Period.getMonths : return $i1
org.joda.time.Period.getMonths : return $i1 >>>>>>>> org.joda.time.Period.checkYearsAndMonths : if $i0 == 0
org.joda.time.Period.checkYearsAndMonths : if $i0 == 0 >>>>>>>> org.joda.time.Period.checkYearsAndMonths : $i1 = virtualinvoke r0.<org.joda.time.Period: int getYears()>()
org.joda.time.Period.checkYearsAndMonths : $i1 = virtualinvoke r0.<org.joda.time.Period: int getYears()>() >>>>>>>> org.joda.time.Period.getYears : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.getYears : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.getYears : $i0 = <org.joda.time.PeriodType: int YEAR_INDEX>
org.joda.time.Period.getYears : $i0 = <org.joda.time.PeriodType: int YEAR_INDEX> >>>>>>>> org.joda.time.Period.getYears : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0)
org.joda.time.Period.getYears : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0) >>>>>>>> org.joda.time.Period.getYears : return $i1
org.joda.time.Period.getYears : return $i1 >>>>>>>> org.joda.time.Period.checkYearsAndMonths : if $i1 == 0
org.joda.time.Period.checkYearsAndMonths : if $i1 == 0 >>>>>>>> org.joda.time.Period.checkYearsAndMonths : $r8 = new java.lang.UnsupportedOperationException
org.joda.time.Period.checkYearsAndMonths : $r8 = new java.lang.UnsupportedOperationException >>>>>>>> org.joda.time.Period.checkYearsAndMonths : $r9 = new java.lang.StringBuilder
org.joda.time.Period.checkYearsAndMonths : $r9 = new java.lang.StringBuilder >>>>>>>> org.joda.time.Period.checkYearsAndMonths : specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()
org.joda.time.Period.checkYearsAndMonths : specialinvoke $r9.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.joda.time.Period.checkYearsAndMonths : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot convert to ")
org.joda.time.Period.checkYearsAndMonths : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot convert to ") >>>>>>>> org.joda.time.Period.checkYearsAndMonths : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.joda.time.Period.checkYearsAndMonths : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.joda.time.Period.checkYearsAndMonths : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as this period contains years and years vary in length")
org.joda.time.Period.checkYearsAndMonths : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as this period contains years and years vary in length") >>>>>>>> org.joda.time.Period.checkYearsAndMonths : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()
org.joda.time.Period.checkYearsAndMonths : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.joda.time.Period.checkYearsAndMonths : specialinvoke $r8.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r13)
org.joda.time.Period.checkYearsAndMonths : specialinvoke $r8.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r13) >>>>>>>> org.joda.time.Period.checkYearsAndMonths : throw $r8
org.joda.time.Period.checkYearsAndMonths : throw $r8 >>>>>>>> org.joda.time.Period.toStandardHours : $i2 = virtualinvoke r0.<org.joda.time.Period: int getMillis()>()
org.joda.time.Period.toStandardHours : $i2 = virtualinvoke r0.<org.joda.time.Period: int getMillis()>() >>>>>>>> org.joda.time.Period.getMillis : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.getMillis : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.getMillis : $i0 = <org.joda.time.PeriodType: int MILLI_INDEX>
org.joda.time.Period.getMillis : $i0 = <org.joda.time.PeriodType: int MILLI_INDEX> >>>>>>>> org.joda.time.Period.getMillis : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0)
org.joda.time.Period.getMillis : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0) >>>>>>>> org.joda.time.Period.getMillis : return $i1
org.joda.time.Period.getMillis : return $i1 >>>>>>>> org.joda.time.Period.toStandardHours : l0 = (long) $i2
org.joda.time.Period.toStandardHours : l0 = (long) $i2 >>>>>>>> org.joda.time.Period.toStandardHours : $i3 = virtualinvoke r0.<org.joda.time.Period: int getSeconds()>()
org.joda.time.Period.toStandardHours : $i3 = virtualinvoke r0.<org.joda.time.Period: int getSeconds()>() >>>>>>>> org.joda.time.Period.getSeconds : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.getSeconds : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.getSeconds : $i0 = <org.joda.time.PeriodType: int SECOND_INDEX>
org.joda.time.Period.getSeconds : $i0 = <org.joda.time.PeriodType: int SECOND_INDEX> >>>>>>>> org.joda.time.Period.getSeconds : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0)
org.joda.time.Period.getSeconds : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0) >>>>>>>> org.joda.time.Period.getSeconds : return $i1
org.joda.time.Period.getSeconds : return $i1 >>>>>>>> org.joda.time.Period.toStandardHours : $l4 = (long) $i3
org.joda.time.Period.toStandardHours : $l4 = (long) $i3 >>>>>>>> org.joda.time.Period.toStandardHours : $l5 = $l4 * 1000L
org.joda.time.Period.toStandardHours : $l5 = $l4 * 1000L >>>>>>>> org.joda.time.Period.toStandardHours : l6 = l0 + $l5
org.joda.time.Period.toStandardHours : l6 = l0 + $l5 >>>>>>>> org.joda.time.Period.toStandardHours : $i7 = virtualinvoke r0.<org.joda.time.Period: int getMinutes()>()
org.joda.time.Period.toStandardHours : $i7 = virtualinvoke r0.<org.joda.time.Period: int getMinutes()>() >>>>>>>> org.joda.time.Period.getMinutes : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.getMinutes : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.getMinutes : $i0 = <org.joda.time.PeriodType: int MINUTE_INDEX>
org.joda.time.Period.getMinutes : $i0 = <org.joda.time.PeriodType: int MINUTE_INDEX> >>>>>>>> org.joda.time.Period.getMinutes : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0)
org.joda.time.Period.getMinutes : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0) >>>>>>>> org.joda.time.Period.getMinutes : return $i1
org.joda.time.Period.getMinutes : return $i1 >>>>>>>> org.joda.time.Period.toStandardHours : $l8 = (long) $i7
org.joda.time.Period.toStandardHours : $l8 = (long) $i7 >>>>>>>> org.joda.time.Period.toStandardHours : $l9 = $l8 * 60000L
org.joda.time.Period.toStandardHours : $l9 = $l8 * 60000L >>>>>>>> org.joda.time.Period.toStandardHours : l10 = l6 + $l9
org.joda.time.Period.toStandardHours : l10 = l6 + $l9 >>>>>>>> org.joda.time.Period.toStandardHours : l1 = l10 / 3600000L
org.joda.time.Period.toStandardHours : l1 = l10 / 3600000L >>>>>>>> org.joda.time.Period.toStandardHours : $i11 = virtualinvoke r0.<org.joda.time.Period: int getHours()>()
org.joda.time.Period.toStandardHours : $i11 = virtualinvoke r0.<org.joda.time.Period: int getHours()>() >>>>>>>> org.joda.time.Period.getHours : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.getHours : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.getHours : $i0 = <org.joda.time.PeriodType: int HOUR_INDEX>
org.joda.time.Period.getHours : $i0 = <org.joda.time.PeriodType: int HOUR_INDEX> >>>>>>>> org.joda.time.Period.getHours : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0)
org.joda.time.Period.getHours : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0) >>>>>>>> org.joda.time.Period.getHours : return $i1
org.joda.time.Period.getHours : return $i1 >>>>>>>> org.joda.time.Period.toStandardHours : $l12 = (long) $i11
org.joda.time.Period.toStandardHours : $l12 = (long) $i11 >>>>>>>> org.joda.time.Period.toStandardHours : l13 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l1, $l12)
org.joda.time.Period.toStandardHours : l13 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l1, $l12) >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : l2 = l0 + l1
org.joda.time.field.FieldUtils.safeAdd : l2 = l0 + l1 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $l3 = l0 ^ l2
org.joda.time.field.FieldUtils.safeAdd : $l3 = l0 ^ l2 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $b4 = $l3 cmp 0L
org.joda.time.field.FieldUtils.safeAdd : $b4 = $l3 cmp 0L >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : if $b4 >= 0
org.joda.time.field.FieldUtils.safeAdd : if $b4 >= 0 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : return l2
org.joda.time.field.FieldUtils.safeAdd : return l2 >>>>>>>> org.joda.time.Period.toStandardHours : $i14 = virtualinvoke r0.<org.joda.time.Period: int getDays()>()
org.joda.time.Period.toStandardHours : $i14 = virtualinvoke r0.<org.joda.time.Period: int getDays()>() >>>>>>>> org.joda.time.Period.getDays : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.getDays : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.getDays : $i0 = <org.joda.time.PeriodType: int DAY_INDEX>
org.joda.time.Period.getDays : $i0 = <org.joda.time.PeriodType: int DAY_INDEX> >>>>>>>> org.joda.time.Period.getDays : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0)
org.joda.time.Period.getDays : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0) >>>>>>>> org.joda.time.Period.getDays : return $i1
org.joda.time.Period.getDays : return $i1 >>>>>>>> org.joda.time.Period.toStandardHours : $l15 = (long) $i14
org.joda.time.Period.toStandardHours : $l15 = (long) $i14 >>>>>>>> org.joda.time.Period.toStandardHours : $l16 = $l15 * 24L
org.joda.time.Period.toStandardHours : $l16 = $l15 * 24L >>>>>>>> org.joda.time.Period.toStandardHours : l17 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l13, $l16)
org.joda.time.Period.toStandardHours : l17 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l13, $l16) >>>>>>>> org.joda.time.Period.toStandardHours : $i18 = virtualinvoke r0.<org.joda.time.Period: int getWeeks()>()
org.joda.time.Period.toStandardHours : $i18 = virtualinvoke r0.<org.joda.time.Period: int getWeeks()>() >>>>>>>> org.joda.time.Period.getWeeks : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.getWeeks : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.getWeeks : $i0 = <org.joda.time.PeriodType: int WEEK_INDEX>
org.joda.time.Period.getWeeks : $i0 = <org.joda.time.PeriodType: int WEEK_INDEX> >>>>>>>> org.joda.time.Period.getWeeks : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0)
org.joda.time.Period.getWeeks : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0) >>>>>>>> org.joda.time.Period.getWeeks : return $i1
org.joda.time.Period.getWeeks : return $i1 >>>>>>>> org.joda.time.Period.toStandardHours : $l19 = (long) $i18
org.joda.time.Period.toStandardHours : $l19 = (long) $i18 >>>>>>>> org.joda.time.Period.toStandardHours : $l20 = $l19 * 168L
org.joda.time.Period.toStandardHours : $l20 = $l19 * 168L >>>>>>>> org.joda.time.Period.toStandardHours : l21 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l17, $l20)
org.joda.time.Period.toStandardHours : l21 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l17, $l20) >>>>>>>> org.joda.time.Period.toStandardHours : $i22 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>(l21)
org.joda.time.Period.toStandardHours : $i22 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>(l21) >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : $b1 = -2147483648L cmp l0
org.joda.time.field.FieldUtils.safeToInt : $b1 = -2147483648L cmp l0 >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : if $b1 > 0
org.joda.time.field.FieldUtils.safeToInt : if $b1 > 0 >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : $b2 = l0 cmp 2147483647L
org.joda.time.field.FieldUtils.safeToInt : $b2 = l0 cmp 2147483647L >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : if $b2 > 0
org.joda.time.field.FieldUtils.safeToInt : if $b2 > 0 >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : $i3 = (int) l0
org.joda.time.field.FieldUtils.safeToInt : $i3 = (int) l0 >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : return $i3
org.joda.time.field.FieldUtils.safeToInt : return $i3 >>>>>>>> org.joda.time.Period.toStandardHours : $r1 = staticinvoke <org.joda.time.Hours: org.joda.time.Hours hours(int)>($i22)
org.joda.time.Period.toStandardHours : $r1 = staticinvoke <org.joda.time.Hours: org.joda.time.Hours hours(int)>($i22) >>>>>>>> org.joda.time.Hours.hours : lookupswitch(i0) {     case -2147483648:
org.joda.time.Hours.hours : lookupswitch(i0) {     case -2147483648: >>>>>>>> org.joda.time.Hours.hours : $r0 = <org.joda.time.Hours: org.joda.time.Hours ZERO>
org.joda.time.Hours.hours : $r0 = <org.joda.time.Hours: org.joda.time.Hours ZERO> >>>>>>>> org.joda.time.Hours.hours : return $r0
org.joda.time.Hours.hours : return $r0 >>>>>>>> org.joda.time.Period.toStandardHours : return $r1
org.joda.time.Period.toStandardHours : return $r1 >>>>>>>> org.joda.time.Hours.getHours : $i0 = virtualinvoke r0.<org.joda.time.Hours: int getValue()>()
org.joda.time.Hours.getHours : $i0 = virtualinvoke r0.<org.joda.time.Hours: int getValue()>() >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.getValue : $i0 = r0.<org.joda.time.base.BaseSingleFieldPeriod: int iPeriod>
org.joda.time.base.BaseSingleFieldPeriod.getValue : $i0 = r0.<org.joda.time.base.BaseSingleFieldPeriod: int iPeriod> >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.getValue : return $i0
org.joda.time.base.BaseSingleFieldPeriod.getValue : return $i0 >>>>>>>> org.joda.time.Hours.getHours : return $i0
