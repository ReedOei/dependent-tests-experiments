org.joda.time.DateTimeZone.setDefault : r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>() >>>>>>>> org.joda.time.DateTimeZone.setDefault : if r1 == null
org.joda.time.DateTimeZone.setDefault : if r1 == null >>>>>>>> org.joda.time.DateTimeZone.setDefault : if r0 != null
org.joda.time.DateTimeZone.setDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.setDefault : $r6 = class "org/joda/time/DateTimeZone"
org.joda.time.DateTimeZone.setDefault : $r6 = class "org/joda/time/DateTimeZone" >>>>>>>> org.joda.time.DateTimeZone.setDefault : r3 = $r6
org.joda.time.DateTimeZone.setDefault : r3 = $r6 >>>>>>>> org.joda.time.DateTimeZone.setDefault : entermonitor $r6
org.joda.time.DateTimeZone.setDefault : entermonitor $r6 >>>>>>>> org.joda.time.DateTimeZone.setDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r0
org.joda.time.DateTimeZone.setDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r0 >>>>>>>> org.joda.time.DateTimeZone.setDefault : exitmonitor r3
org.joda.time.DateTimeZone.setDefault : exitmonitor r3 >>>>>>>> org.joda.time.DateTimeZone.setDefault : goto [?= return]
org.joda.time.DateTimeZone.setDefault : goto [?= return] >>>>>>>> org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> >>>>>>>> org.joda.time.DateTimeZone.getDefault : if r0 != null
org.joda.time.DateTimeZone.getDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.DateTimeZone.getDefault : return r0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.setStandardOffset : $r1 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder$RuleSet getLastRuleSet()>()
org.joda.time.tz.DateTimeZoneBuilder.setStandardOffset : $r1 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder$RuleSet getLastRuleSet()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets>
org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>()
org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : if $i0 != 0
org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : if $i0 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addCutover(int,char,int,int,int,boolean,int)>(-2147483648, 119, 1, 1, 0, 0, 0)
org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addCutover(int,char,int,int,int,boolean,int)>(-2147483648, 119, 1, 1, 0, 0, 0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addCutover : $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets>
org.joda.time.tz.DateTimeZoneBuilder.addCutover : $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addCutover : $i6 = virtualinvoke $r3.<java.util.ArrayList: int size()>()
org.joda.time.tz.DateTimeZoneBuilder.addCutover : $i6 = virtualinvoke $r3.<java.util.ArrayList: int size()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addCutover : if $i6 <= 0
org.joda.time.tz.DateTimeZoneBuilder.addCutover : if $i6 <= 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addCutover : $r8 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets>
org.joda.time.tz.DateTimeZoneBuilder.addCutover : $r8 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addCutover : $r9 = new org.joda.time.tz.DateTimeZoneBuilder$RuleSet
org.joda.time.tz.DateTimeZoneBuilder.addCutover : $r9 = new org.joda.time.tz.DateTimeZoneBuilder$RuleSet >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addCutover : specialinvoke $r9.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <init>()>()
org.joda.time.tz.DateTimeZoneBuilder.addCutover : specialinvoke $r9.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <init>()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addCutover : virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>($r9)
org.joda.time.tz.DateTimeZoneBuilder.addCutover : virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>($r9) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addCutover : return r0
org.joda.time.tz.DateTimeZoneBuilder.addCutover : return r0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets>
org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : $r4 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets>
org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : $r4 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : $i1 = virtualinvoke $r4.<java.util.ArrayList: int size()>()
org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : $i1 = virtualinvoke $r4.<java.util.ArrayList: int size()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : $i2 = $i1 - 1
org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : $i2 = $i1 - 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : $r5 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>($i2)
org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : $r5 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>($i2) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : $r6 = (org.joda.time.tz.DateTimeZoneBuilder$RuleSet) $r5
org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : $r6 = (org.joda.time.tz.DateTimeZoneBuilder$RuleSet) $r5 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : return $r6
org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : return $r6 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.setStandardOffset : virtualinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void setStandardOffset(int)>(i0)
org.joda.time.tz.DateTimeZoneBuilder.setStandardOffset : virtualinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void setStandardOffset(int)>(i0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.setStandardOffset : r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset> = i0
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.setStandardOffset : r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset> = i0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.setStandardOffset : return r0
org.joda.time.tz.DateTimeZoneBuilder.setStandardOffset : return r0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.setFixedSavings : $r2 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder$RuleSet getLastRuleSet()>()
org.joda.time.tz.DateTimeZoneBuilder.setFixedSavings : $r2 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder$RuleSet getLastRuleSet()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.setFixedSavings : virtualinvoke $r2.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void setFixedSavings(java.lang.String,int)>(r1, i0)
org.joda.time.tz.DateTimeZoneBuilder.setFixedSavings : virtualinvoke $r2.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void setFixedSavings(java.lang.String,int)>(r1, i0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.setFixedSavings : r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String iInitialNameKey> = r1
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.setFixedSavings : r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String iInitialNameKey> = r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.setFixedSavings : r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iInitialSaveMillis> = i0
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.setFixedSavings : r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iInitialSaveMillis> = i0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.setFixedSavings : return r0
org.joda.time.tz.DateTimeZoneBuilder.setFixedSavings : return r0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if r1 != null
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if r1 != null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r7 = new java.util.ArrayList
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r7 = new java.util.ArrayList >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : specialinvoke $r7.<java.util.ArrayList: void <init>()>()
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : specialinvoke $r7.<java.util.ArrayList: void <init>()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : r2 = $r7
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : r2 = $r7 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : r3 = null
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : r3 = null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : l0 = -9223372036854775808L
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : l0 = -9223372036854775808L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : z1 = 0
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : z1 = 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r8 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets>
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r8 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : i1 = virtualinvoke $r8.<java.util.ArrayList: int size()>()
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : i1 = virtualinvoke $r8.<java.util.ArrayList: int size()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : i2 = 0
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : i2 = 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if i2 >= i1
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if i2 >= i1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r9 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets>
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r9 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r10 = virtualinvoke $r9.<java.util.ArrayList: java.lang.Object get(int)>(i2)
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r10 = virtualinvoke $r9.<java.util.ArrayList: java.lang.Object get(int)>(i2) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : r4 = (org.joda.time.tz.DateTimeZoneBuilder$RuleSet) $r10
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : r4 = (org.joda.time.tz.DateTimeZoneBuilder$RuleSet) $r10 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : r5 = virtualinvoke r4.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>(l0)
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : r5 = virtualinvoke r4.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>(l0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $r6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String iInitialNameKey>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $r6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String iInitialNameKey> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : if $r6 == null
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : if $r6 == null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $r7 = new org.joda.time.tz.DateTimeZoneBuilder$Transition
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $r7 = new org.joda.time.tz.DateTimeZoneBuilder$Transition >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $r8 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String iInitialNameKey>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $r8 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String iInitialNameKey> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $i3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $i3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $i4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iInitialSaveMillis>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $i4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iInitialSaveMillis> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $i5 = $i3 + $i4
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $i5 = $i3 + $i4 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $i6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $i6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : specialinvoke $r7.<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,java.lang.String,int,int)>(l0, $r8, $i5, $i6)
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : specialinvoke $r7.<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,java.lang.String,int,int)>(l0, $r8, $i5, $i6) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : return $r7
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : return $r7 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if r5 != null
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if r5 != null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>(r2, r5)
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>(r2, r5) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : i0 = virtualinvoke r1.<java.util.ArrayList: int size()>()
org.joda.time.tz.DateTimeZoneBuilder.addTransition : i0 = virtualinvoke r1.<java.util.ArrayList: int size()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : if i0 != 0
org.joda.time.tz.DateTimeZoneBuilder.addTransition : if i0 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r2)
org.joda.time.tz.DateTimeZoneBuilder.addTransition : virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r2) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : return 1
org.joda.time.tz.DateTimeZoneBuilder.addTransition : return 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : l3 = virtualinvoke r5.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>()
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : l3 = virtualinvoke r5.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.getMillis : $l0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long iMillis>
org.joda.time.tz.DateTimeZoneBuilder$Transition.getMillis : $l0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long iMillis> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.getMillis : return $l0
org.joda.time.tz.DateTimeZoneBuilder$Transition.getMillis : return $l0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : i4 = virtualinvoke r5.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getSaveMillis()>()
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : i4 = virtualinvoke r5.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getSaveMillis()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.getSaveMillis : $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int iWallOffset>
org.joda.time.tz.DateTimeZoneBuilder$Transition.getSaveMillis : $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int iWallOffset> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.getSaveMillis : $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int iStandardOffset>
org.joda.time.tz.DateTimeZoneBuilder$Transition.getSaveMillis : $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int iStandardOffset> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.getSaveMillis : $i2 = $i0 - $i1
org.joda.time.tz.DateTimeZoneBuilder$Transition.getSaveMillis : $i2 = $i0 - $i1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.getSaveMillis : return $i2
org.joda.time.tz.DateTimeZoneBuilder$Transition.getSaveMillis : return $i2 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r11 = new org.joda.time.tz.DateTimeZoneBuilder$RuleSet
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r11 = new org.joda.time.tz.DateTimeZoneBuilder$RuleSet >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : specialinvoke $r11.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <init>(org.joda.time.tz.DateTimeZoneBuilder$RuleSet)>(r4)
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : specialinvoke $r11.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <init>(org.joda.time.tz.DateTimeZoneBuilder$RuleSet)>(r4) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : r12 = $r11
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : r12 = $r11 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r13 = virtualinvoke r12.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>(l3, i4)
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r13 = virtualinvoke r12.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>(l3, i4) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>() >>>>>>>> org.joda.time.chrono.ISOChronology.getInstanceUTC : $r0 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC>
org.joda.time.chrono.ISOChronology.getInstanceUTC : $r0 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.ISOChronology.getInstanceUTC : return $r0
org.joda.time.chrono.ISOChronology.getInstanceUTC : return $r0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : r2 = null
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : r2 = null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : l2 = 9223372036854775807L
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : l2 = 9223372036854775807L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $r5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $r5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : r3 = virtualinvoke $r5.<java.util.ArrayList: java.util.Iterator iterator()>()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : r3 = virtualinvoke $r5.<java.util.ArrayList: java.util.Iterator iterator()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : if $z0 == 0
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : if $z0 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : if r2 != null
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : if r2 != null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : return null
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : return null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : r14 = $r13
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : r14 = $r13 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if $r13 == null
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if $r13 == null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : l0 = virtualinvoke r12.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: long getUpperLimit(int)>(i4)
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : l0 = virtualinvoke r12.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: long getUpperLimit(int)>(i4) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.getUpperLimit : $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iUpperYear>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.getUpperLimit : $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iUpperYear> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.getUpperLimit : if $i1 != 2147483647
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.getUpperLimit : if $i1 != 2147483647 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.getUpperLimit : return 9223372036854775807L
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.getUpperLimit : return 9223372036854775807L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : i2 = i2 + 1
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : i2 = i2 + 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : goto [?= (branch)]
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : goto [?= (branch)] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $i6 = virtualinvoke r2.<java.util.ArrayList: int size()>()
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $i6 = virtualinvoke r2.<java.util.ArrayList: int size()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if $i6 != 0
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if $i6 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $i7 = virtualinvoke r2.<java.util.ArrayList: int size()>()
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $i7 = virtualinvoke r2.<java.util.ArrayList: int size()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if $i7 != 1
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if $i7 != 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if r3 != null
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if r3 != null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r16 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(0)
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r16 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : r17 = (org.joda.time.tz.DateTimeZoneBuilder$Transition) $r16
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : r17 = (org.joda.time.tz.DateTimeZoneBuilder$Transition) $r16 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r18 = virtualinvoke r17.<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String getNameKey()>()
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r18 = virtualinvoke r17.<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String getNameKey()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.getNameKey : $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String iNameKey>
org.joda.time.tz.DateTimeZoneBuilder$Transition.getNameKey : $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String iNameKey> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.getNameKey : return $r1
org.joda.time.tz.DateTimeZoneBuilder$Transition.getNameKey : return $r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $i8 = virtualinvoke r17.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getWallOffset()>()
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $i8 = virtualinvoke r17.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getWallOffset()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.getWallOffset : $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int iWallOffset>
org.joda.time.tz.DateTimeZoneBuilder$Transition.getWallOffset : $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int iWallOffset> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.getWallOffset : return $i0
org.joda.time.tz.DateTimeZoneBuilder$Transition.getWallOffset : return $i0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $i9 = virtualinvoke r17.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getStandardOffset()>()
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $i9 = virtualinvoke r17.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getStandardOffset()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.getStandardOffset : $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int iStandardOffset>
org.joda.time.tz.DateTimeZoneBuilder$Transition.getStandardOffset : $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int iStandardOffset> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.getStandardOffset : return $i0
org.joda.time.tz.DateTimeZoneBuilder$Transition.getStandardOffset : return $i0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r19 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone buildFixedZone(java.lang.String,java.lang.String,int,int)>(r1, $r18, $i8, $i9)
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r19 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone buildFixedZone(java.lang.String,java.lang.String,int,int)>(r1, $r18, $i8, $i9) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.buildFixedZone : $r2 = "UTC"
org.joda.time.tz.DateTimeZoneBuilder.buildFixedZone : $r2 = "UTC" >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.buildFixedZone : $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0)
org.joda.time.tz.DateTimeZoneBuilder.buildFixedZone : $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.buildFixedZone : if $z0 == 0
org.joda.time.tz.DateTimeZoneBuilder.buildFixedZone : if $z0 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.buildFixedZone : $r4 = new org.joda.time.tz.FixedDateTimeZone
org.joda.time.tz.DateTimeZoneBuilder.buildFixedZone : $r4 = new org.joda.time.tz.FixedDateTimeZone >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.buildFixedZone : specialinvoke $r4.<org.joda.time.tz.FixedDateTimeZone: void <init>(java.lang.String,java.lang.String,int,int)>(r0, r1, i0, i1)
org.joda.time.tz.DateTimeZoneBuilder.buildFixedZone : specialinvoke $r4.<org.joda.time.tz.FixedDateTimeZone: void <init>(java.lang.String,java.lang.String,int,int)>(r0, r1, i0, i1) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.buildFixedZone : return $r4
org.joda.time.tz.DateTimeZoneBuilder.buildFixedZone : return $r4 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : return $r19
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : return $r19 >>>>>>>> org.joda.time.DateTimeZone.getID : $r1 = r0.<org.joda.time.DateTimeZone: java.lang.String iID>
org.joda.time.DateTimeZone.getID : $r1 = r0.<org.joda.time.DateTimeZone: java.lang.String iID> >>>>>>>> org.joda.time.DateTimeZone.getID : return $r1
org.joda.time.DateTimeZone.getID : return $r1 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.isFixed : return 1
org.joda.time.tz.FixedDateTimeZone.isFixed : return 1 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.getOffset : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset>
org.joda.time.tz.FixedDateTimeZone.getOffset : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset> >>>>>>>> org.joda.time.tz.FixedDateTimeZone.getOffset : return $i1
org.joda.time.tz.FixedDateTimeZone.getOffset : return $i1 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.getStandardOffset : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iStandardOffset>
org.joda.time.tz.FixedDateTimeZone.getStandardOffset : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iStandardOffset> >>>>>>>> org.joda.time.tz.FixedDateTimeZone.getStandardOffset : return $i1
org.joda.time.tz.FixedDateTimeZone.getStandardOffset : return $i1 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.nextTransition : return l0
org.joda.time.tz.FixedDateTimeZone.nextTransition : return l0 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.previousTransition : return l0
org.joda.time.tz.FixedDateTimeZone.previousTransition : return l0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeTo : $z0 = r2 instanceof java.io.DataOutput
org.joda.time.tz.DateTimeZoneBuilder.writeTo : $z0 = r2 instanceof java.io.DataOutput >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeTo : if $z0 == 0
org.joda.time.tz.DateTimeZoneBuilder.writeTo : if $z0 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeTo : $r4 = new java.io.DataOutputStream
org.joda.time.tz.DateTimeZoneBuilder.writeTo : $r4 = new java.io.DataOutputStream >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeTo : specialinvoke $r4.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>(r2)
org.joda.time.tz.DateTimeZoneBuilder.writeTo : specialinvoke $r4.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>(r2) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeTo : virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>(r1, $r4)
org.joda.time.tz.DateTimeZoneBuilder.writeTo : virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>(r1, $r4) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeTo : r3 = virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>(r1, 0)
org.joda.time.tz.DateTimeZoneBuilder.writeTo : r3 = virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>(r1, 0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeTo : $z0 = r3 instanceof org.joda.time.tz.FixedDateTimeZone
org.joda.time.tz.DateTimeZoneBuilder.writeTo : $z0 = r3 instanceof org.joda.time.tz.FixedDateTimeZone >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeTo : interfaceinvoke r2.<java.io.DataOutput: void writeByte(int)>(70)
org.joda.time.tz.DateTimeZoneBuilder.writeTo : interfaceinvoke r2.<java.io.DataOutput: void writeByte(int)>(70) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeTo : $r4 = virtualinvoke r3.<org.joda.time.DateTimeZone: java.lang.String getNameKey(long)>(0L)
org.joda.time.tz.DateTimeZoneBuilder.writeTo : $r4 = virtualinvoke r3.<org.joda.time.DateTimeZone: java.lang.String getNameKey(long)>(0L) >>>>>>>> org.joda.time.tz.FixedDateTimeZone.getNameKey : $r1 = r0.<org.joda.time.tz.FixedDateTimeZone: java.lang.String iNameKey>
org.joda.time.tz.FixedDateTimeZone.getNameKey : $r1 = r0.<org.joda.time.tz.FixedDateTimeZone: java.lang.String iNameKey> >>>>>>>> org.joda.time.tz.FixedDateTimeZone.getNameKey : return $r1
org.joda.time.tz.FixedDateTimeZone.getNameKey : return $r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeTo : interfaceinvoke r2.<java.io.DataOutput: void writeUTF(java.lang.String)>($r4)
org.joda.time.tz.DateTimeZoneBuilder.writeTo : interfaceinvoke r2.<java.io.DataOutput: void writeUTF(java.lang.String)>($r4) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeTo : $i0 = virtualinvoke r3.<org.joda.time.DateTimeZone: int getOffset(long)>(0L)
org.joda.time.tz.DateTimeZoneBuilder.writeTo : $i0 = virtualinvoke r3.<org.joda.time.DateTimeZone: int getOffset(long)>(0L) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeTo : $l1 = (long) $i0
org.joda.time.tz.DateTimeZoneBuilder.writeTo : $l1 = (long) $i0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeTo : staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>(r2, $l1)
org.joda.time.tz.DateTimeZoneBuilder.writeTo : staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>(r2, $l1) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l2 = l0 % 1800000L
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l2 = l0 % 1800000L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $b3 = $l2 cmp 0L
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $b3 = $l2 cmp 0L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : if $b3 != 0
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : if $b3 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : l1 = l0 / 1800000L
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : l1 = l0 / 1800000L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l4 = l1 << 58
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l4 = l1 << 58 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l5 = $l4 >> 58
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l5 = $l4 >> 58 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $b6 = $l5 cmp l1
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $b6 = $l5 cmp l1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : if $b6 != 0
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : if $b6 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l7 = l1 & 63L
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l7 = l1 & 63L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $i8 = (int) $l7
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $i8 = (int) $l7 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : interfaceinvoke r0.<java.io.DataOutput: void writeByte(int)>($i8)
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : interfaceinvoke r0.<java.io.DataOutput: void writeByte(int)>($i8) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeTo : $i2 = virtualinvoke r3.<org.joda.time.DateTimeZone: int getStandardOffset(long)>(0L)
org.joda.time.tz.DateTimeZoneBuilder.writeTo : $i2 = virtualinvoke r3.<org.joda.time.DateTimeZone: int getStandardOffset(long)>(0L) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeTo : $l3 = (long) $i2
org.joda.time.tz.DateTimeZoneBuilder.writeTo : $l3 = (long) $i2 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeTo : staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>(r2, $l3)
org.joda.time.tz.DateTimeZoneBuilder.writeTo : staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>(r2, $l3) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeTo : goto [?= return]
org.joda.time.tz.DateTimeZoneBuilder.writeTo : goto [?= return] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readFrom : $z0 = r0 instanceof java.io.DataInput
org.joda.time.tz.DateTimeZoneBuilder.readFrom : $z0 = r0 instanceof java.io.DataInput >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readFrom : if $z0 == 0
org.joda.time.tz.DateTimeZoneBuilder.readFrom : if $z0 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readFrom : $r4 = new java.io.DataInputStream
org.joda.time.tz.DateTimeZoneBuilder.readFrom : $r4 = new java.io.DataInputStream >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readFrom : specialinvoke $r4.<java.io.DataInputStream: void <init>(java.io.InputStream)>(r0)
org.joda.time.tz.DateTimeZoneBuilder.readFrom : specialinvoke $r4.<java.io.DataInputStream: void <init>(java.io.InputStream)>(r0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readFrom : $r5 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>($r4, r1)
org.joda.time.tz.DateTimeZoneBuilder.readFrom : $r5 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>($r4, r1) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readFrom : $i0 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>()
org.joda.time.tz.DateTimeZoneBuilder.readFrom : $i0 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readFrom : lookupswitch($i0) {     case 67:
org.joda.time.tz.DateTimeZoneBuilder.readFrom : lookupswitch($i0) {     case 67: >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readFrom : $r3 = new org.joda.time.tz.FixedDateTimeZone
org.joda.time.tz.DateTimeZoneBuilder.readFrom : $r3 = new org.joda.time.tz.FixedDateTimeZone >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readFrom : $r4 = interfaceinvoke r0.<java.io.DataInput: java.lang.String readUTF()>()
org.joda.time.tz.DateTimeZoneBuilder.readFrom : $r4 = interfaceinvoke r0.<java.io.DataInput: java.lang.String readUTF()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readFrom : $l1 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>(r0)
org.joda.time.tz.DateTimeZoneBuilder.readFrom : $l1 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>(r0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readMillis : i0 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>()
org.joda.time.tz.DateTimeZoneBuilder.readMillis : i0 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readMillis : $i2 = i0 >> 6
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $i2 = i0 >> 6 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readMillis : tableswitch($i2) {     case 0:
org.joda.time.tz.DateTimeZoneBuilder.readMillis : tableswitch($i2) {     case 0: >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readMillis : $i3 = i0 << 26
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $i3 = i0 << 26 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readMillis : i4 = $i3 >> 26
org.joda.time.tz.DateTimeZoneBuilder.readMillis : i4 = $i3 >> 26 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readMillis : $l5 = (long) i4
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $l5 = (long) i4 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readMillis : $l6 = $l5 * 1800000L
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $l6 = $l5 * 1800000L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readMillis : return $l6
org.joda.time.tz.DateTimeZoneBuilder.readMillis : return $l6 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readFrom : $i2 = (int) $l1
org.joda.time.tz.DateTimeZoneBuilder.readFrom : $i2 = (int) $l1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readFrom : $l3 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>(r0)
org.joda.time.tz.DateTimeZoneBuilder.readFrom : $l3 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>(r0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readFrom : $i4 = (int) $l3
org.joda.time.tz.DateTimeZoneBuilder.readFrom : $i4 = (int) $l3 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readFrom : specialinvoke $r3.<org.joda.time.tz.FixedDateTimeZone: void <init>(java.lang.String,java.lang.String,int,int)>(r1, $r4, $i2, $i4)
org.joda.time.tz.DateTimeZoneBuilder.readFrom : specialinvoke $r3.<org.joda.time.tz.FixedDateTimeZone: void <init>(java.lang.String,java.lang.String,int,int)>(r1, $r4, $i2, $i4) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readFrom : r2 = $r3
org.joda.time.tz.DateTimeZoneBuilder.readFrom : r2 = $r3 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readFrom : $r5 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>
org.joda.time.tz.DateTimeZoneBuilder.readFrom : $r5 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readFrom : $z0 = virtualinvoke r2.<org.joda.time.DateTimeZone: boolean equals(java.lang.Object)>($r5)
org.joda.time.tz.DateTimeZoneBuilder.readFrom : $z0 = virtualinvoke r2.<org.joda.time.DateTimeZone: boolean equals(java.lang.Object)>($r5) >>>>>>>> org.joda.time.tz.FixedDateTimeZone.equals : if r0 != r1
org.joda.time.tz.FixedDateTimeZone.equals : if r0 != r1 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.equals : $z0 = r1 instanceof org.joda.time.tz.FixedDateTimeZone
org.joda.time.tz.FixedDateTimeZone.equals : $z0 = r1 instanceof org.joda.time.tz.FixedDateTimeZone >>>>>>>> org.joda.time.tz.FixedDateTimeZone.equals : if $z0 == 0
org.joda.time.tz.FixedDateTimeZone.equals : if $z0 == 0 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.equals : r2 = (org.joda.time.tz.FixedDateTimeZone) r1
org.joda.time.tz.FixedDateTimeZone.equals : r2 = (org.joda.time.tz.FixedDateTimeZone) r1 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.equals : $r3 = virtualinvoke r0.<org.joda.time.tz.FixedDateTimeZone: java.lang.String getID()>()
org.joda.time.tz.FixedDateTimeZone.equals : $r3 = virtualinvoke r0.<org.joda.time.tz.FixedDateTimeZone: java.lang.String getID()>() >>>>>>>> org.joda.time.tz.FixedDateTimeZone.equals : $r4 = virtualinvoke r2.<org.joda.time.tz.FixedDateTimeZone: java.lang.String getID()>()
org.joda.time.tz.FixedDateTimeZone.equals : $r4 = virtualinvoke r2.<org.joda.time.tz.FixedDateTimeZone: java.lang.String getID()>() >>>>>>>> org.joda.time.tz.FixedDateTimeZone.equals : $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4)
org.joda.time.tz.FixedDateTimeZone.equals : $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4) >>>>>>>> org.joda.time.tz.FixedDateTimeZone.equals : if $z1 == 0
org.joda.time.tz.FixedDateTimeZone.equals : if $z1 == 0 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.equals : $z2 = 0
org.joda.time.tz.FixedDateTimeZone.equals : $z2 = 0 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.equals : return $z2
org.joda.time.tz.FixedDateTimeZone.equals : return $z2 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readFrom : return r2
org.joda.time.tz.DateTimeZoneBuilder.readFrom : return r2 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readFrom : return $r5
