org.joda.time.Years.years : lookupswitch(i0) {     case -2147483648: >>>>>>>> org.joda.time.Years.years : $r2 = <org.joda.time.Years: org.joda.time.Years TWO>
org.joda.time.Years.years : $r2 = <org.joda.time.Years: org.joda.time.Years TWO> >>>>>>>> org.joda.time.Years.years : return $r2
org.joda.time.Years.years : return $r2 >>>>>>>> org.joda.time.Years.plus : if i0 != 0
org.joda.time.Years.plus : if i0 != 0 >>>>>>>> org.joda.time.Years.plus : $i1 = virtualinvoke r0.<org.joda.time.Years: int getValue()>()
org.joda.time.Years.plus : $i1 = virtualinvoke r0.<org.joda.time.Years: int getValue()>() >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.getValue : $i0 = r0.<org.joda.time.base.BaseSingleFieldPeriod: int iPeriod>
org.joda.time.base.BaseSingleFieldPeriod.getValue : $i0 = r0.<org.joda.time.base.BaseSingleFieldPeriod: int iPeriod> >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.getValue : return $i0
org.joda.time.base.BaseSingleFieldPeriod.getValue : return $i0 >>>>>>>> org.joda.time.Years.plus : $i2 = staticinvoke <org.joda.time.field.FieldUtils: int safeAdd(int,int)>($i1, i0)
org.joda.time.Years.plus : $i2 = staticinvoke <org.joda.time.field.FieldUtils: int safeAdd(int,int)>($i1, i0) >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : i2 = i0 + i1
org.joda.time.field.FieldUtils.safeAdd : i2 = i0 + i1 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $i3 = i0 ^ i2
org.joda.time.field.FieldUtils.safeAdd : $i3 = i0 ^ i2 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : if $i3 >= 0
org.joda.time.field.FieldUtils.safeAdd : if $i3 >= 0 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : return i2
org.joda.time.field.FieldUtils.safeAdd : return i2 >>>>>>>> org.joda.time.Years.plus : $r1 = staticinvoke <org.joda.time.Years: org.joda.time.Years years(int)>($i2)
org.joda.time.Years.plus : $r1 = staticinvoke <org.joda.time.Years: org.joda.time.Years years(int)>($i2) >>>>>>>> org.joda.time.Years.years : $r6 = new org.joda.time.Years
org.joda.time.Years.years : $r6 = new org.joda.time.Years >>>>>>>> org.joda.time.Years.years : specialinvoke $r6.<org.joda.time.Years: void <init>(int)>(i0)
org.joda.time.Years.years : specialinvoke $r6.<org.joda.time.Years: void <init>(int)>(i0) >>>>>>>> org.joda.time.Years.years : return $r6
org.joda.time.Years.years : return $r6 >>>>>>>> org.joda.time.Years.plus : return $r1
org.joda.time.Years.plus : return $r1 >>>>>>>> org.joda.time.Years.getYears : $i0 = virtualinvoke r0.<org.joda.time.Years: int getValue()>()
org.joda.time.Years.getYears : $i0 = virtualinvoke r0.<org.joda.time.Years: int getValue()>() >>>>>>>> org.joda.time.Years.getYears : return $i0
org.joda.time.Years.getYears : return $i0 >>>>>>>> org.joda.time.Years.plus : return r0
org.joda.time.Years.plus : return r0 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $i4 = i0 ^ i1
org.joda.time.field.FieldUtils.safeAdd : $i4 = i0 ^ i1 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : if $i4 < 0
org.joda.time.field.FieldUtils.safeAdd : if $i4 < 0 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $r1 = new java.lang.ArithmeticException
org.joda.time.field.FieldUtils.safeAdd : $r1 = new java.lang.ArithmeticException >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $r0 = new java.lang.StringBuilder
org.joda.time.field.FieldUtils.safeAdd : $r0 = new java.lang.StringBuilder >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()
org.joda.time.field.FieldUtils.safeAdd : specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The calculation caused an overflow: ")
org.joda.time.field.FieldUtils.safeAdd : $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The calculation caused an overflow: ") >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)
org.joda.time.field.FieldUtils.safeAdd : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0) >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" + ")
org.joda.time.field.FieldUtils.safeAdd : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" + ") >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1)
org.joda.time.field.FieldUtils.safeAdd : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1) >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()
org.joda.time.field.FieldUtils.safeAdd : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : specialinvoke $r1.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r6)
org.joda.time.field.FieldUtils.safeAdd : specialinvoke $r1.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r6) >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : throw $r1
