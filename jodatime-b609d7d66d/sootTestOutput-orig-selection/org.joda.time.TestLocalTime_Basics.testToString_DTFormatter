org.joda.time.DateTimeUtils.setCurrentMillisSystem : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>() >>>>>>>> org.joda.time.DateTimeUtils.checkPermission : r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>()
org.joda.time.DateTimeUtils.checkPermission : r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>() >>>>>>>> org.joda.time.DateTimeUtils.checkPermission : if r0 == null
org.joda.time.DateTimeUtils.checkPermission : if r0 == null >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisSystem : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$SystemMillisProvider SYSTEM_MILLIS_PROVIDER>
org.joda.time.DateTimeUtils.setCurrentMillisSystem : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$SystemMillisProvider SYSTEM_MILLIS_PROVIDER> >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisSystem : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0
org.joda.time.DateTimeUtils.setCurrentMillisSystem : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0 >>>>>>>> org.joda.time.DateTimeZone.setDefault : r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>()
org.joda.time.DateTimeZone.setDefault : r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>() >>>>>>>> org.joda.time.DateTimeZone.setDefault : if r1 == null
org.joda.time.DateTimeZone.setDefault : if r1 == null >>>>>>>> org.joda.time.DateTimeZone.setDefault : if r0 != null
org.joda.time.DateTimeZone.setDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.setDefault : $r6 = class "org/joda/time/DateTimeZone"
org.joda.time.DateTimeZone.setDefault : $r6 = class "org/joda/time/DateTimeZone" >>>>>>>> org.joda.time.DateTimeZone.setDefault : r3 = $r6
org.joda.time.DateTimeZone.setDefault : r3 = $r6 >>>>>>>> org.joda.time.DateTimeZone.setDefault : entermonitor $r6
org.joda.time.DateTimeZone.setDefault : entermonitor $r6 >>>>>>>> org.joda.time.DateTimeZone.setDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r0
org.joda.time.DateTimeZone.setDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r0 >>>>>>>> org.joda.time.DateTimeZone.setDefault : exitmonitor r3
org.joda.time.DateTimeZone.setDefault : exitmonitor r3 >>>>>>>> org.joda.time.DateTimeZone.setDefault : goto [?= return]
org.joda.time.DateTimeZone.setDefault : goto [?= return] >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>()
org.joda.time.DateTimeUtils.setCurrentMillisFixed : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>() >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : $r0 = new org.joda.time.DateTimeUtils$FixedMillisProvider
org.joda.time.DateTimeUtils.setCurrentMillisFixed : $r0 = new org.joda.time.DateTimeUtils$FixedMillisProvider >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : specialinvoke $r0.<org.joda.time.DateTimeUtils$FixedMillisProvider: void <init>(long)>(l0)
org.joda.time.DateTimeUtils.setCurrentMillisFixed : specialinvoke $r0.<org.joda.time.DateTimeUtils$FixedMillisProvider: void <init>(long)>(l0) >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0
org.joda.time.DateTimeUtils.setCurrentMillisFixed : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0 >>>>>>>> org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> >>>>>>>> org.joda.time.DateTimeZone.getDefault : if r0 != null
org.joda.time.DateTimeZone.getDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.DateTimeZone.getDefault : return r0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstanceUTC : $r0 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC>
org.joda.time.chrono.ISOChronology.getInstanceUTC : $r0 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.ISOChronology.getInstanceUTC : return $r0
org.joda.time.chrono.ISOChronology.getInstanceUTC : return $r0 >>>>>>>> org.joda.time.DateTimeUtils.getChronology : if r0 != null
org.joda.time.DateTimeUtils.getChronology : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getChronology : return r0
org.joda.time.DateTimeUtils.getChronology : return r0 >>>>>>>> org.joda.time.chrono.ISOChronology.withUTC : $r1 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC>
org.joda.time.chrono.ISOChronology.withUTC : $r1 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.ISOChronology.withUTC : return $r1
org.joda.time.chrono.ISOChronology.withUTC : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getDateTimeMillis : r1 = $r2
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : r1 = $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.getDateTimeMillis : if $r2 == null
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : if $r2 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $i5 = r0.<org.joda.time.chrono.AssembledChronology: int iBaseFlags>
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $i5 = r0.<org.joda.time.chrono.AssembledChronology: int iBaseFlags> >>>>>>>> org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $i6 = $i5 & 1
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $i6 = $i5 & 1 >>>>>>>> org.joda.time.chrono.AssembledChronology.getDateTimeMillis : if $i6 != 1
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : if $i6 != 1 >>>>>>>> org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $l7 = virtualinvoke r1.<org.joda.time.Chronology: long getDateTimeMillis(long,int,int,int,int)>(l0, i1, i2, i3, i4)
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $l7 = virtualinvoke r1.<org.joda.time.Chronology: long getDateTimeMillis(long,int,int,int,int)>(l0, i1, i2, i3, i4) >>>>>>>> org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $l8 = specialinvoke r0.<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>(l0, i1, i2, i3, i4)
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $l8 = specialinvoke r0.<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(long,int,int,int,int)>(l0, i1, i2, i3, i4) >>>>>>>> org.joda.time.chrono.BaseChronology.getDateTimeMillis : $r1 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>()
org.joda.time.chrono.BaseChronology.getDateTimeMillis : $r1 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.hourOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay>
org.joda.time.chrono.AssembledChronology.hourOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.hourOfDay : return $r1
org.joda.time.chrono.AssembledChronology.hourOfDay : return $r1 >>>>>>>> org.joda.time.chrono.BaseChronology.getDateTimeMillis : l5 = virtualinvoke $r1.<org.joda.time.DateTimeField: long set(long,int)>(l0, i1)
org.joda.time.chrono.BaseChronology.getDateTimeMillis : l5 = virtualinvoke $r1.<org.joda.time.DateTimeField: long set(long,int)>(l0, i1) >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $i2 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int getMinimumValue()>()
org.joda.time.field.PreciseDateTimeField.set : $i2 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int getMinimumValue()>() >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getMinimumValue : return 0
org.joda.time.field.PreciseDurationDateTimeField.getMinimumValue : return 0 >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $i3 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int getMaximumValue()>()
org.joda.time.field.PreciseDateTimeField.set : $i3 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.field.PreciseDateTimeField.getMaximumValue : $i0 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange>
org.joda.time.field.PreciseDateTimeField.getMaximumValue : $i0 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange> >>>>>>>> org.joda.time.field.PreciseDateTimeField.getMaximumValue : $i1 = $i0 - 1
org.joda.time.field.PreciseDateTimeField.getMaximumValue : $i1 = $i0 - 1 >>>>>>>> org.joda.time.field.PreciseDateTimeField.getMaximumValue : return $i1
org.joda.time.field.PreciseDateTimeField.getMaximumValue : return $i1 >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i2, $i3)
org.joda.time.field.PreciseDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i2, $i3) >>>>>>>> org.joda.time.field.FieldUtils.verifyValueBounds : if i0 < i1
org.joda.time.field.FieldUtils.verifyValueBounds : if i0 < i1 >>>>>>>> org.joda.time.field.FieldUtils.verifyValueBounds : if i0 <= i2
org.joda.time.field.FieldUtils.verifyValueBounds : if i0 <= i2 >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $i4 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int get(long)>(l0)
org.joda.time.field.PreciseDateTimeField.set : $i4 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $b1 = l0 cmp 0L
org.joda.time.field.PreciseDateTimeField.get : $b1 = l0 cmp 0L >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : if $b1 < 0
org.joda.time.field.PreciseDateTimeField.get : if $b1 < 0 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l2 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: long getUnitMillis()>()
org.joda.time.field.PreciseDateTimeField.get : $l2 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: long getUnitMillis()>() >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : return $l0
org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : return $l0 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l3 = l0 / $l2
org.joda.time.field.PreciseDateTimeField.get : $l3 = l0 / $l2 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $i4 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange>
org.joda.time.field.PreciseDateTimeField.get : $i4 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange> >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l5 = (long) $i4
org.joda.time.field.PreciseDateTimeField.get : $l5 = (long) $i4 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l6 = $l3 % $l5
org.joda.time.field.PreciseDateTimeField.get : $l6 = $l3 % $l5 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $i7 = (int) $l6
org.joda.time.field.PreciseDateTimeField.get : $i7 = (int) $l6 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : return $i7
org.joda.time.field.PreciseDateTimeField.get : return $i7 >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $i5 = i1 - $i4
org.joda.time.field.PreciseDateTimeField.set : $i5 = i1 - $i4 >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $l6 = (long) $i5
org.joda.time.field.PreciseDateTimeField.set : $l6 = (long) $i5 >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $l7 = r0.<org.joda.time.field.PreciseDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDateTimeField.set : $l7 = r0.<org.joda.time.field.PreciseDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $l8 = $l6 * $l7
org.joda.time.field.PreciseDateTimeField.set : $l8 = $l6 * $l7 >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $l9 = l0 + $l8
org.joda.time.field.PreciseDateTimeField.set : $l9 = l0 + $l8 >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : return $l9
org.joda.time.field.PreciseDateTimeField.set : return $l9 >>>>>>>> org.joda.time.chrono.BaseChronology.getDateTimeMillis : $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>()
org.joda.time.chrono.BaseChronology.getDateTimeMillis : $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.minuteOfHour : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfHour>
org.joda.time.chrono.AssembledChronology.minuteOfHour : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfHour> >>>>>>>> org.joda.time.chrono.AssembledChronology.minuteOfHour : return $r1
org.joda.time.chrono.AssembledChronology.minuteOfHour : return $r1 >>>>>>>> org.joda.time.chrono.BaseChronology.getDateTimeMillis : l6 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>(l5, i2)
org.joda.time.chrono.BaseChronology.getDateTimeMillis : l6 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>(l5, i2) >>>>>>>> org.joda.time.chrono.BaseChronology.getDateTimeMillis : $r3 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>()
org.joda.time.chrono.BaseChronology.getDateTimeMillis : $r3 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.secondOfMinute : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfMinute>
org.joda.time.chrono.AssembledChronology.secondOfMinute : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfMinute> >>>>>>>> org.joda.time.chrono.AssembledChronology.secondOfMinute : return $r1
org.joda.time.chrono.AssembledChronology.secondOfMinute : return $r1 >>>>>>>> org.joda.time.chrono.BaseChronology.getDateTimeMillis : l7 = virtualinvoke $r3.<org.joda.time.DateTimeField: long set(long,int)>(l6, i3)
org.joda.time.chrono.BaseChronology.getDateTimeMillis : l7 = virtualinvoke $r3.<org.joda.time.DateTimeField: long set(long,int)>(l6, i3) >>>>>>>> org.joda.time.chrono.BaseChronology.getDateTimeMillis : $r4 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>()
org.joda.time.chrono.BaseChronology.getDateTimeMillis : $r4 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.millisOfSecond : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfSecond>
org.joda.time.chrono.AssembledChronology.millisOfSecond : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfSecond> >>>>>>>> org.joda.time.chrono.AssembledChronology.millisOfSecond : return $r1
org.joda.time.chrono.AssembledChronology.millisOfSecond : return $r1 >>>>>>>> org.joda.time.chrono.BaseChronology.getDateTimeMillis : $l8 = virtualinvoke $r4.<org.joda.time.DateTimeField: long set(long,int)>(l7, i4)
org.joda.time.chrono.BaseChronology.getDateTimeMillis : $l8 = virtualinvoke $r4.<org.joda.time.DateTimeField: long set(long,int)>(l7, i4) >>>>>>>> org.joda.time.chrono.BaseChronology.getDateTimeMillis : return $l8
org.joda.time.chrono.BaseChronology.getDateTimeMillis : return $l8 >>>>>>>> org.joda.time.chrono.AssembledChronology.getDateTimeMillis : return $l8
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : return $l8 >>>>>>>> org.joda.time.chrono.AssembledChronology.getDateTimeMillis : return $l7
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : return $l7 >>>>>>>> org.joda.time.format.DateTimeFormat.forPattern : $r1 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>(r0)
org.joda.time.format.DateTimeFormat.forPattern : $r1 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>(r0) >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : if r0 == null
org.joda.time.format.DateTimeFormat.createFormatterForPattern : if r0 == null >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : $i0 = virtualinvoke r0.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormat.createFormatterForPattern : $i0 = virtualinvoke r0.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : if $i0 != 0
org.joda.time.format.DateTimeFormat.createFormatterForPattern : if $i0 != 0 >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : n0 = null
org.joda.time.format.DateTimeFormat.createFormatterForPattern : n0 = null >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : $r5 = <org.joda.time.format.DateTimeFormat: java.util.Map cPatternedCache>
org.joda.time.format.DateTimeFormat.createFormatterForPattern : $r5 = <org.joda.time.format.DateTimeFormat: java.util.Map cPatternedCache> >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : r1 = $r5
org.joda.time.format.DateTimeFormat.createFormatterForPattern : r1 = $r5 >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : entermonitor $r5
org.joda.time.format.DateTimeFormat.createFormatterForPattern : entermonitor $r5 >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : $r6 = <org.joda.time.format.DateTimeFormat: java.util.Map cPatternedCache>
org.joda.time.format.DateTimeFormat.createFormatterForPattern : $r6 = <org.joda.time.format.DateTimeFormat: java.util.Map cPatternedCache> >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0)
org.joda.time.format.DateTimeFormat.createFormatterForPattern : $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : r8 = (org.joda.time.format.DateTimeFormatter) $r7
org.joda.time.format.DateTimeFormat.createFormatterForPattern : r8 = (org.joda.time.format.DateTimeFormatter) $r7 >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : if r8 != null
org.joda.time.format.DateTimeFormat.createFormatterForPattern : if r8 != null >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : exitmonitor r1
org.joda.time.format.DateTimeFormat.createFormatterForPattern : exitmonitor r1 >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : goto [?= return r8]
org.joda.time.format.DateTimeFormat.createFormatterForPattern : goto [?= return r8] >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : return r8
org.joda.time.format.DateTimeFormat.createFormatterForPattern : return r8 >>>>>>>> org.joda.time.format.DateTimeFormat.forPattern : return $r1
org.joda.time.format.DateTimeFormat.forPattern : return $r1 >>>>>>>> org.joda.time.base.AbstractPartial.toString : if r1 != null
org.joda.time.base.AbstractPartial.toString : if r1 != null >>>>>>>> org.joda.time.base.AbstractPartial.toString : $r3 = virtualinvoke r1.<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>(r0)
org.joda.time.base.AbstractPartial.toString : $r3 = virtualinvoke r1.<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>(r0) >>>>>>>> org.joda.time.format.DateTimeFormatter.print : $r2 = new java.lang.StringBuffer
org.joda.time.format.DateTimeFormatter.print : $r2 = new java.lang.StringBuffer >>>>>>>> org.joda.time.format.DateTimeFormatter.print : $r4 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter requirePrinter()>()
org.joda.time.format.DateTimeFormatter.print : $r4 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter requirePrinter()>() >>>>>>>> org.joda.time.format.DateTimeFormatter.requirePrinter : r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter iPrinter>
org.joda.time.format.DateTimeFormatter.requirePrinter : r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter iPrinter> >>>>>>>> org.joda.time.format.DateTimeFormatter.requirePrinter : if r1 != null
org.joda.time.format.DateTimeFormatter.requirePrinter : if r1 != null >>>>>>>> org.joda.time.format.DateTimeFormatter.requirePrinter : return r1
org.joda.time.format.DateTimeFormatter.requirePrinter : return r1 >>>>>>>> org.joda.time.format.DateTimeFormatter.print : $i0 = interfaceinvoke $r4.<org.joda.time.format.DateTimePrinter: int estimatePrintedLength()>()
org.joda.time.format.DateTimeFormatter.print : $i0 = interfaceinvoke $r4.<org.joda.time.format.DateTimePrinter: int estimatePrintedLength()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.estimatePrintedLength : $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: int iPrintedLengthEstimate>
org.joda.time.format.DateTimeFormatterBuilder$Composite.estimatePrintedLength : $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: int iPrintedLengthEstimate> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.estimatePrintedLength : return $i0
org.joda.time.format.DateTimeFormatterBuilder$Composite.estimatePrintedLength : return $i0 >>>>>>>> org.joda.time.format.DateTimeFormatter.print : specialinvoke $r2.<java.lang.StringBuffer: void <init>(int)>($i0)
org.joda.time.format.DateTimeFormatter.print : specialinvoke $r2.<java.lang.StringBuffer: void <init>(int)>($i0) >>>>>>>> org.joda.time.format.DateTimeFormatter.print : r3 = $r2
org.joda.time.format.DateTimeFormatter.print : r3 = $r2 >>>>>>>> org.joda.time.format.DateTimeFormatter.print : virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial)>(r3, r1)
org.joda.time.format.DateTimeFormatter.print : virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial)>(r3, r1) >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : r3 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter requirePrinter()>()
org.joda.time.format.DateTimeFormatter.printTo : r3 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter requirePrinter()>() >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : if r2 != null
org.joda.time.format.DateTimeFormatter.printTo : if r2 != null >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : $r5 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>
org.joda.time.format.DateTimeFormatter.printTo : $r5 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale> >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : interfaceinvoke r3.<org.joda.time.format.DateTimePrinter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale)>(r1, r2, $r5)
org.joda.time.format.DateTimeFormatter.printTo : interfaceinvoke r3.<org.joda.time.format.DateTimePrinter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale)>(r1, r2, $r5) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : r4 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: org.joda.time.format.DateTimePrinter[] iPrinters>
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : r4 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: org.joda.time.format.DateTimePrinter[] iPrinters> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : if r4 != null
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : if r4 != null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : if r3 != null
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : if r3 != null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : r3 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>()
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : r3 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : i0 = lengthof r4
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : i0 = lengthof r4 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : i1 = 0
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : i1 = 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : if i1 >= i0
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : if i1 >= i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : $r6 = r4[i1]
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : $r6 = r4[i1] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : interfaceinvoke $r6.<org.joda.time.format.DateTimePrinter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale)>(r1, r2, r3)
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : interfaceinvoke $r6.<org.joda.time.format.DateTimePrinter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale)>(r1, r2, r3) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $r5 = r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: org.joda.time.DateTimeFieldType iFieldType>
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $r5 = r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: org.joda.time.DateTimeFieldType iFieldType> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $z0 = interfaceinvoke r2.<org.joda.time.ReadablePartial: boolean isSupported(org.joda.time.DateTimeFieldType)>($r5)
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $z0 = interfaceinvoke r2.<org.joda.time.ReadablePartial: boolean isSupported(org.joda.time.DateTimeFieldType)>($r5) >>>>>>>> org.joda.time.LocalTime.isSupported : if r1 != null
org.joda.time.LocalTime.isSupported : if r1 != null >>>>>>>> org.joda.time.LocalTime.isSupported : $r3 = virtualinvoke r1.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getDurationType()>()
org.joda.time.LocalTime.isSupported : $r3 = virtualinvoke r1.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getDurationType()>() >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getDurationType : $r1 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DurationFieldType iUnitType>
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getDurationType : $r1 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DurationFieldType iUnitType> >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getDurationType : return $r1
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getDurationType : return $r1 >>>>>>>> org.joda.time.LocalTime.isSupported : $z0 = virtualinvoke r0.<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>($r3)
org.joda.time.LocalTime.isSupported : $z0 = virtualinvoke r0.<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>($r3) >>>>>>>> org.joda.time.LocalTime.isSupported : $r3 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>()
org.joda.time.LocalTime.isSupported : $r3 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.LocalTime.getChronology : $r1 = r0.<org.joda.time.LocalTime: org.joda.time.Chronology iChronology>
org.joda.time.LocalTime.getChronology : $r1 = r0.<org.joda.time.LocalTime: org.joda.time.Chronology iChronology> >>>>>>>> org.joda.time.LocalTime.getChronology : return $r1
org.joda.time.LocalTime.getChronology : return $r1 >>>>>>>> org.joda.time.LocalTime.isSupported : r2 = virtualinvoke r1.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r3)
org.joda.time.LocalTime.isSupported : r2 = virtualinvoke r1.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r3) >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal>
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal> >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : tableswitch($b0) {     case 1:
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : tableswitch($b0) {     case 1: >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r6 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField years()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r6 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField years()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.years : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iYears>
org.joda.time.chrono.AssembledChronology.years : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iYears> >>>>>>>> org.joda.time.chrono.AssembledChronology.years : return $r1
org.joda.time.chrono.AssembledChronology.years : return $r1 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r6
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r6 >>>>>>>> org.joda.time.LocalTime.isSupported : $r4 = <org.joda.time.LocalTime: java.util.Set TIME_DURATION_TYPES>
org.joda.time.LocalTime.isSupported : $r4 = <org.joda.time.LocalTime: java.util.Set TIME_DURATION_TYPES> >>>>>>>> org.joda.time.LocalTime.isSupported : $z0 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>(r1)
org.joda.time.LocalTime.isSupported : $z0 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>(r1) >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.hashCode : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal>
org.joda.time.DurationFieldType$StandardDurationFieldType.hashCode : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal> >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.hashCode : return $b0
org.joda.time.DurationFieldType$StandardDurationFieldType.hashCode : return $b0 >>>>>>>> org.joda.time.LocalTime.isSupported : if $z0 != 0
org.joda.time.LocalTime.isSupported : if $z0 != 0 >>>>>>>> org.joda.time.LocalTime.isSupported : $l0 = virtualinvoke r2.<org.joda.time.DurationField: long getUnitMillis()>()
org.joda.time.LocalTime.isSupported : $l0 = virtualinvoke r2.<org.joda.time.DurationField: long getUnitMillis()>() >>>>>>>> org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getUnitMillis : $r1 = r0.<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: org.joda.time.field.ImpreciseDateTimeField this$0>
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getUnitMillis : $r1 = r0.<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: org.joda.time.field.ImpreciseDateTimeField this$0> >>>>>>>> org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getUnitMillis : $l0 = $r1.<org.joda.time.field.ImpreciseDateTimeField: long iUnitMillis>
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getUnitMillis : $l0 = $r1.<org.joda.time.field.ImpreciseDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getUnitMillis : return $l0
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getUnitMillis : return $l0 >>>>>>>> org.joda.time.LocalTime.isSupported : $r5 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>()
org.joda.time.LocalTime.isSupported : $r5 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.LocalTime.isSupported : $r6 = virtualinvoke $r5.<org.joda.time.Chronology: org.joda.time.DurationField days()>()
org.joda.time.LocalTime.isSupported : $r6 = virtualinvoke $r5.<org.joda.time.Chronology: org.joda.time.DurationField days()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.days : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays>
org.joda.time.chrono.AssembledChronology.days : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays> >>>>>>>> org.joda.time.chrono.AssembledChronology.days : return $r1
org.joda.time.chrono.AssembledChronology.days : return $r1 >>>>>>>> org.joda.time.LocalTime.isSupported : $l1 = virtualinvoke $r6.<org.joda.time.DurationField: long getUnitMillis()>()
org.joda.time.LocalTime.isSupported : $l1 = virtualinvoke $r6.<org.joda.time.DurationField: long getUnitMillis()>() >>>>>>>> org.joda.time.field.PreciseDurationField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis>
org.joda.time.field.PreciseDurationField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationField.getUnitMillis : return $l0
org.joda.time.field.PreciseDurationField.getUnitMillis : return $l0 >>>>>>>> org.joda.time.LocalTime.isSupported : $b2 = $l0 cmp $l1
org.joda.time.LocalTime.isSupported : $b2 = $l0 cmp $l1 >>>>>>>> org.joda.time.LocalTime.isSupported : if $b2 >= 0
org.joda.time.LocalTime.isSupported : if $b2 >= 0 >>>>>>>> org.joda.time.LocalTime.isSupported : return 0
org.joda.time.LocalTime.isSupported : return 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : if $z0 == 0
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : if $z0 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $i3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: int iMinPrintedDigits>
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $i3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: int iMinPrintedDigits> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : staticinvoke <org.joda.time.format.DateTimeFormatterBuilder: void appendUnknownString(java.lang.StringBuffer,int)>(r1, $i3)
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : staticinvoke <org.joda.time.format.DateTimeFormatterBuilder: void appendUnknownString(java.lang.StringBuffer,int)>(r1, $i3) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendUnknownString : i1 = i0
org.joda.time.format.DateTimeFormatterBuilder.appendUnknownString : i1 = i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendUnknownString : i1 = i1 + -1
org.joda.time.format.DateTimeFormatterBuilder.appendUnknownString : i1 = i1 + -1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendUnknownString : if i1 < 0
org.joda.time.format.DateTimeFormatterBuilder.appendUnknownString : if i1 < 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendUnknownString : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(65533)
org.joda.time.format.DateTimeFormatterBuilder.appendUnknownString : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(65533) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendUnknownString : goto [?= i1 = i1 + -1]
org.joda.time.format.DateTimeFormatterBuilder.appendUnknownString : goto [?= i1 = i1 + -1] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : i1 = i1 + 1
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : i1 = i1 + 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : goto [?= (branch)]
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : goto [?= (branch)] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.printTo : $c0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: char iValue>
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.printTo : $c0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: char iValue> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c0)
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c0) >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r11 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField hours()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r11 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField hours()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.hours : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHours>
org.joda.time.chrono.AssembledChronology.hours : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHours> >>>>>>>> org.joda.time.chrono.AssembledChronology.hours : return $r1
org.joda.time.chrono.AssembledChronology.hours : return $r1 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r11
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r11 >>>>>>>> org.joda.time.LocalTime.isSupported : $z1 = virtualinvoke r2.<org.joda.time.DurationField: boolean isSupported()>()
org.joda.time.LocalTime.isSupported : $z1 = virtualinvoke r2.<org.joda.time.DurationField: boolean isSupported()>() >>>>>>>> org.joda.time.field.BaseDurationField.isSupported : return 1
org.joda.time.field.BaseDurationField.isSupported : return 1 >>>>>>>> org.joda.time.LocalTime.isSupported : return $z1
org.joda.time.LocalTime.isSupported : return $z1 >>>>>>>> org.joda.time.LocalTime.isSupported : r2 = virtualinvoke r1.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getRangeDurationType()>()
org.joda.time.LocalTime.isSupported : r2 = virtualinvoke r1.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getRangeDurationType()>() >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getRangeDurationType : $r1 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DurationFieldType iRangeType>
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getRangeDurationType : $r1 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DurationFieldType iRangeType> >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getRangeDurationType : return $r1
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getRangeDurationType : return $r1 >>>>>>>> org.joda.time.LocalTime.isSupported : $z1 = virtualinvoke r0.<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>(r2)
org.joda.time.LocalTime.isSupported : $z1 = virtualinvoke r0.<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DurationFieldType)>(r2) >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r9 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField days()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r9 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField days()>() >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r9
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r9 >>>>>>>> org.joda.time.LocalTime.isSupported : if $z1 != 0
org.joda.time.LocalTime.isSupported : if $z1 != 0 >>>>>>>> org.joda.time.LocalTime.isSupported : $r4 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>()
org.joda.time.LocalTime.isSupported : $r4 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>() >>>>>>>> org.joda.time.DurationFieldType.days : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType DAYS_TYPE>
org.joda.time.DurationFieldType.days : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType DAYS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.days : return $r0
org.joda.time.DurationFieldType.days : return $r0 >>>>>>>> org.joda.time.LocalTime.isSupported : if r2 != $r4
org.joda.time.LocalTime.isSupported : if r2 != $r4 >>>>>>>> org.joda.time.LocalTime.isSupported : $z2 = 1
org.joda.time.LocalTime.isSupported : $z2 = 1 >>>>>>>> org.joda.time.LocalTime.isSupported : goto [?= return $z2]
org.joda.time.LocalTime.isSupported : goto [?= return $z2] >>>>>>>> org.joda.time.LocalTime.isSupported : return $z2
org.joda.time.LocalTime.isSupported : return $z2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $r6 = r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: org.joda.time.DateTimeFieldType iFieldType>
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $r6 = r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: org.joda.time.DateTimeFieldType iFieldType> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $i0 = interfaceinvoke r2.<org.joda.time.ReadablePartial: int get(org.joda.time.DateTimeFieldType)>($r6)
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $i0 = interfaceinvoke r2.<org.joda.time.ReadablePartial: int get(org.joda.time.DateTimeFieldType)>($r6) >>>>>>>> org.joda.time.LocalTime.get : if r1 != null
org.joda.time.LocalTime.get : if r1 != null >>>>>>>> org.joda.time.LocalTime.get : $z0 = virtualinvoke r0.<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DateTimeFieldType)>(r1)
org.joda.time.LocalTime.get : $z0 = virtualinvoke r0.<org.joda.time.LocalTime: boolean isSupported(org.joda.time.DateTimeFieldType)>(r1) >>>>>>>> org.joda.time.LocalTime.get : if $z0 != 0
org.joda.time.LocalTime.get : if $z0 != 0 >>>>>>>> org.joda.time.LocalTime.get : $r9 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>()
org.joda.time.LocalTime.get : $r9 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.LocalTime.get : $r10 = virtualinvoke r1.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r9)
org.joda.time.LocalTime.get : $r10 = virtualinvoke r1.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r9) >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $b0 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: byte iOrdinal>
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $b0 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: byte iOrdinal> >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : tableswitch($b0) {     case 1:
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : tableswitch($b0) {     case 1: >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r19 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r19 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>() >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r19
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r19 >>>>>>>> org.joda.time.LocalTime.get : $l0 = virtualinvoke r0.<org.joda.time.LocalTime: long getLocalMillis()>()
org.joda.time.LocalTime.get : $l0 = virtualinvoke r0.<org.joda.time.LocalTime: long getLocalMillis()>() >>>>>>>> org.joda.time.LocalTime.getLocalMillis : $l0 = r0.<org.joda.time.LocalTime: long iLocalMillis>
org.joda.time.LocalTime.getLocalMillis : $l0 = r0.<org.joda.time.LocalTime: long iLocalMillis> >>>>>>>> org.joda.time.LocalTime.getLocalMillis : return $l0
org.joda.time.LocalTime.getLocalMillis : return $l0 >>>>>>>> org.joda.time.LocalTime.get : $i1 = virtualinvoke $r10.<org.joda.time.DateTimeField: int get(long)>($l0)
org.joda.time.LocalTime.get : $i1 = virtualinvoke $r10.<org.joda.time.DateTimeField: int get(long)>($l0) >>>>>>>> org.joda.time.LocalTime.get : return $i1
org.joda.time.LocalTime.get : return $i1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $i1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: int iMinPrintedDigits>
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $i1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: int iMinPrintedDigits> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, $i0, $i1)
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, $i0, $i1) >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 0
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 0 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 10
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 10 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 100
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 100 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i1 <= 2
org.joda.time.format.FormatUtils.appendPaddedInteger : if i1 <= 2 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i5 = i0 + 1
org.joda.time.format.FormatUtils.appendPaddedInteger : $i5 = i0 + 1 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i6 = $i5 * 13421772
org.joda.time.format.FormatUtils.appendPaddedInteger : $i6 = $i5 * 13421772 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : i2 = $i6 >> 27
org.joda.time.format.FormatUtils.appendPaddedInteger : i2 = $i6 >> 27 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i7 = i2 + 48
org.joda.time.format.FormatUtils.appendPaddedInteger : $i7 = i2 + 48 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $c8 = (char) $i7
org.joda.time.format.FormatUtils.appendPaddedInteger : $c8 = (char) $i7 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c8)
org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c8) >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i9 = i2 << 3
org.joda.time.format.FormatUtils.appendPaddedInteger : $i9 = i2 << 3 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i10 = i0 - $i9
org.joda.time.format.FormatUtils.appendPaddedInteger : $i10 = i0 - $i9 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i11 = i2 << 1
org.joda.time.format.FormatUtils.appendPaddedInteger : $i11 = i2 << 1 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i12 = $i10 - $i11
org.joda.time.format.FormatUtils.appendPaddedInteger : $i12 = $i10 - $i11 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i13 = $i12 + 48
org.joda.time.format.FormatUtils.appendPaddedInteger : $i13 = $i12 + 48 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $c14 = (char) $i13
org.joda.time.format.FormatUtils.appendPaddedInteger : $c14 = (char) $i13 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c14)
org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c14) >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : goto [?= return]
org.joda.time.format.FormatUtils.appendPaddedInteger : goto [?= return] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : goto [?= return]
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : goto [?= return] >>>>>>>> org.joda.time.format.DateTimeFormatter.print : $r5 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>()
org.joda.time.format.DateTimeFormatter.print : $r5 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> org.joda.time.format.DateTimeFormatter.print : return $r5
org.joda.time.format.DateTimeFormatter.print : return $r5 >>>>>>>> org.joda.time.base.AbstractPartial.toString : return $r3
org.joda.time.base.AbstractPartial.toString : return $r3 >>>>>>>> org.joda.time.base.AbstractPartial.toString : $r2 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>()
org.joda.time.base.AbstractPartial.toString : $r2 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>() >>>>>>>> org.joda.time.LocalTime.toString : $r1 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter time()>()
org.joda.time.LocalTime.toString : $r1 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter time()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.time : $r0 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter t>
org.joda.time.format.ISODateTimeFormat.time : $r0 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter t> >>>>>>>> org.joda.time.format.ISODateTimeFormat.time : if $r0 != null
org.joda.time.format.ISODateTimeFormat.time : if $r0 != null >>>>>>>> org.joda.time.format.ISODateTimeFormat.time : $r7 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter t>
org.joda.time.format.ISODateTimeFormat.time : $r7 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter t> >>>>>>>> org.joda.time.format.ISODateTimeFormat.time : return $r7
org.joda.time.format.ISODateTimeFormat.time : return $r7 >>>>>>>> org.joda.time.LocalTime.toString : $r2 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>(r0)
org.joda.time.LocalTime.toString : $r2 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadablePartial)>(r0) >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r12 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField minutes()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r12 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField minutes()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.minutes : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMinutes>
org.joda.time.chrono.AssembledChronology.minutes : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMinutes> >>>>>>>> org.joda.time.chrono.AssembledChronology.minutes : return $r1
org.joda.time.chrono.AssembledChronology.minutes : return $r1 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r12
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r12 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r21 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r21 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>() >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r21
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r21 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r13 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField seconds()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r13 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField seconds()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.seconds : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iSeconds>
org.joda.time.chrono.AssembledChronology.seconds : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iSeconds> >>>>>>>> org.joda.time.chrono.AssembledChronology.seconds : return $r1
org.joda.time.chrono.AssembledChronology.seconds : return $r1 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r13
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r13 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r23 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r23 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>() >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r23
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r23 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $r5 = interfaceinvoke r2.<org.joda.time.ReadablePartial: org.joda.time.Chronology getChronology()>()
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $r5 = interfaceinvoke r2.<org.joda.time.ReadablePartial: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : l0 = virtualinvoke $r5.<org.joda.time.Chronology: long set(org.joda.time.ReadablePartial,long)>(r2, 0L)
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : l0 = virtualinvoke $r5.<org.joda.time.Chronology: long set(org.joda.time.ReadablePartial,long)>(r2, 0L) >>>>>>>> org.joda.time.chrono.BaseChronology.set : i1 = 0
org.joda.time.chrono.BaseChronology.set : i1 = 0 >>>>>>>> org.joda.time.chrono.BaseChronology.set : i2 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>()
org.joda.time.chrono.BaseChronology.set : i2 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>() >>>>>>>> org.joda.time.LocalTime.size : return 4
org.joda.time.LocalTime.size : return 4 >>>>>>>> org.joda.time.chrono.BaseChronology.set : if i1 >= i2
org.joda.time.chrono.BaseChronology.set : if i1 >= i2 >>>>>>>> org.joda.time.chrono.BaseChronology.set : $r2 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i1)
org.joda.time.chrono.BaseChronology.set : $r2 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i1) >>>>>>>> org.joda.time.base.AbstractPartial.getFieldType : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.Chronology getChronology()>()
org.joda.time.base.AbstractPartial.getFieldType : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.base.AbstractPartial.getFieldType : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>(i0, $r1)
org.joda.time.base.AbstractPartial.getFieldType : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>(i0, $r1) >>>>>>>> org.joda.time.LocalTime.getField : tableswitch(i0) {     case 0:
org.joda.time.LocalTime.getField : tableswitch(i0) {     case 0: >>>>>>>> org.joda.time.LocalTime.getField : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>()
org.joda.time.LocalTime.getField : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>() >>>>>>>> org.joda.time.LocalTime.getField : return $r3
org.joda.time.LocalTime.getField : return $r3 >>>>>>>> org.joda.time.base.AbstractPartial.getFieldType : $r3 = virtualinvoke $r2.<org.joda.time.DateTimeField: org.joda.time.DateTimeFieldType getType()>()
org.joda.time.base.AbstractPartial.getFieldType : $r3 = virtualinvoke $r2.<org.joda.time.DateTimeField: org.joda.time.DateTimeFieldType getType()>() >>>>>>>> org.joda.time.field.BaseDateTimeField.getType : $r1 = r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType iType>
org.joda.time.field.BaseDateTimeField.getType : $r1 = r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType iType> >>>>>>>> org.joda.time.field.BaseDateTimeField.getType : return $r1
org.joda.time.field.BaseDateTimeField.getType : return $r1 >>>>>>>> org.joda.time.base.AbstractPartial.getFieldType : return $r3
org.joda.time.base.AbstractPartial.getFieldType : return $r3 >>>>>>>> org.joda.time.chrono.BaseChronology.set : $r3 = virtualinvoke $r2.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r0)
org.joda.time.chrono.BaseChronology.set : $r3 = virtualinvoke $r2.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r0) >>>>>>>> org.joda.time.chrono.BaseChronology.set : $i3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int getValue(int)>(i1)
org.joda.time.chrono.BaseChronology.set : $i3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int getValue(int)>(i1) >>>>>>>> org.joda.time.LocalTime.getValue : tableswitch(i0) {     case 0:
org.joda.time.LocalTime.getValue : tableswitch(i0) {     case 0: >>>>>>>> org.joda.time.LocalTime.getValue : $r2 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>()
org.joda.time.LocalTime.getValue : $r2 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.LocalTime.getValue : $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>()
org.joda.time.LocalTime.getValue : $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>() >>>>>>>> org.joda.time.LocalTime.getValue : $l1 = virtualinvoke r0.<org.joda.time.LocalTime: long getLocalMillis()>()
org.joda.time.LocalTime.getValue : $l1 = virtualinvoke r0.<org.joda.time.LocalTime: long getLocalMillis()>() >>>>>>>> org.joda.time.LocalTime.getValue : $i2 = virtualinvoke $r3.<org.joda.time.DateTimeField: int get(long)>($l1)
org.joda.time.LocalTime.getValue : $i2 = virtualinvoke $r3.<org.joda.time.DateTimeField: int get(long)>($l1) >>>>>>>> org.joda.time.LocalTime.getValue : return $i2
org.joda.time.LocalTime.getValue : return $i2 >>>>>>>> org.joda.time.chrono.BaseChronology.set : l0 = virtualinvoke $r3.<org.joda.time.DateTimeField: long set(long,int)>(l0, $i3)
org.joda.time.chrono.BaseChronology.set : l0 = virtualinvoke $r3.<org.joda.time.DateTimeField: long set(long,int)>(l0, $i3) >>>>>>>> org.joda.time.chrono.BaseChronology.set : i1 = i1 + 1
org.joda.time.chrono.BaseChronology.set : i1 = i1 + 1 >>>>>>>> org.joda.time.chrono.BaseChronology.set : goto [?= (branch)]
org.joda.time.chrono.BaseChronology.set : goto [?= (branch)] >>>>>>>> org.joda.time.LocalTime.getField : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>()
org.joda.time.LocalTime.getField : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>() >>>>>>>> org.joda.time.LocalTime.getField : return $r4
org.joda.time.LocalTime.getField : return $r4 >>>>>>>> org.joda.time.LocalTime.getValue : $r4 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>()
org.joda.time.LocalTime.getValue : $r4 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.LocalTime.getValue : $r5 = virtualinvoke $r4.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>()
org.joda.time.LocalTime.getValue : $r5 = virtualinvoke $r4.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>() >>>>>>>> org.joda.time.LocalTime.getValue : $l3 = virtualinvoke r0.<org.joda.time.LocalTime: long getLocalMillis()>()
org.joda.time.LocalTime.getValue : $l3 = virtualinvoke r0.<org.joda.time.LocalTime: long getLocalMillis()>() >>>>>>>> org.joda.time.LocalTime.getValue : $i4 = virtualinvoke $r5.<org.joda.time.DateTimeField: int get(long)>($l3)
org.joda.time.LocalTime.getValue : $i4 = virtualinvoke $r5.<org.joda.time.DateTimeField: int get(long)>($l3) >>>>>>>> org.joda.time.LocalTime.getValue : return $i4
org.joda.time.LocalTime.getValue : return $i4 >>>>>>>> org.joda.time.LocalTime.getField : $r5 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>()
org.joda.time.LocalTime.getField : $r5 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>() >>>>>>>> org.joda.time.LocalTime.getField : return $r5
org.joda.time.LocalTime.getField : return $r5 >>>>>>>> org.joda.time.LocalTime.getValue : $r6 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>()
org.joda.time.LocalTime.getValue : $r6 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.LocalTime.getValue : $r7 = virtualinvoke $r6.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>()
org.joda.time.LocalTime.getValue : $r7 = virtualinvoke $r6.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>() >>>>>>>> org.joda.time.LocalTime.getValue : $l5 = virtualinvoke r0.<org.joda.time.LocalTime: long getLocalMillis()>()
org.joda.time.LocalTime.getValue : $l5 = virtualinvoke r0.<org.joda.time.LocalTime: long getLocalMillis()>() >>>>>>>> org.joda.time.LocalTime.getValue : $i6 = virtualinvoke $r7.<org.joda.time.DateTimeField: int get(long)>($l5)
org.joda.time.LocalTime.getValue : $i6 = virtualinvoke $r7.<org.joda.time.DateTimeField: int get(long)>($l5) >>>>>>>> org.joda.time.LocalTime.getValue : return $i6
org.joda.time.LocalTime.getValue : return $i6 >>>>>>>> org.joda.time.LocalTime.getField : $r6 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>()
org.joda.time.LocalTime.getField : $r6 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>() >>>>>>>> org.joda.time.LocalTime.getField : return $r6
org.joda.time.LocalTime.getField : return $r6 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r25 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r25 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>() >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r25
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r25 >>>>>>>> org.joda.time.LocalTime.getValue : $r8 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>()
org.joda.time.LocalTime.getValue : $r8 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.LocalTime.getValue : $r9 = virtualinvoke $r8.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>()
org.joda.time.LocalTime.getValue : $r9 = virtualinvoke $r8.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>() >>>>>>>> org.joda.time.LocalTime.getValue : $l7 = virtualinvoke r0.<org.joda.time.LocalTime: long getLocalMillis()>()
org.joda.time.LocalTime.getValue : $l7 = virtualinvoke r0.<org.joda.time.LocalTime: long getLocalMillis()>() >>>>>>>> org.joda.time.LocalTime.getValue : $i8 = virtualinvoke $r9.<org.joda.time.DateTimeField: int get(long)>($l7)
org.joda.time.LocalTime.getValue : $i8 = virtualinvoke $r9.<org.joda.time.DateTimeField: int get(long)>($l7) >>>>>>>> org.joda.time.LocalTime.getValue : return $i8
org.joda.time.LocalTime.getValue : return $i8 >>>>>>>> org.joda.time.chrono.BaseChronology.set : return l0
org.joda.time.chrono.BaseChronology.set : return l0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $r6 = interfaceinvoke r2.<org.joda.time.ReadablePartial: org.joda.time.Chronology getChronology()>()
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $r6 = interfaceinvoke r2.<org.joda.time.ReadablePartial: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.StringBuffer,java.io.Writer,long,org.joda.time.Chronology)>(r1, null, l0, $r6)
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.StringBuffer,java.io.Writer,long,org.joda.time.Chronology)>(r1, null, l0, $r6) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $r7 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: org.joda.time.DateTimeFieldType iFieldType>
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $r7 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: org.joda.time.DateTimeFieldType iFieldType> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : r4 = virtualinvoke $r7.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r3)
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : r4 = virtualinvoke $r7.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r3) >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r22 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfDay()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r22 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfDay()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.secondOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfDay>
org.joda.time.chrono.AssembledChronology.secondOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.secondOfDay : return $r1
org.joda.time.chrono.AssembledChronology.secondOfDay : return $r1 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r22
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r22 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : i1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int iMinDigits>
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : i1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int iMinDigits> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : l2 = virtualinvoke r4.<org.joda.time.DateTimeField: long remainder(long)>(l0)
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : l2 = virtualinvoke r4.<org.joda.time.DateTimeField: long remainder(long)>(l0) >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.remainder : $b1 = l0 cmp 0L
org.joda.time.field.PreciseDurationDateTimeField.remainder : $b1 = l0 cmp 0L >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.remainder : if $b1 < 0
org.joda.time.field.PreciseDurationDateTimeField.remainder : if $b1 < 0 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.remainder : $l2 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDurationDateTimeField.remainder : $l2 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.remainder : $l3 = l0 % $l2
org.joda.time.field.PreciseDurationDateTimeField.remainder : $l3 = l0 % $l2 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.remainder : return $l3
org.joda.time.field.PreciseDurationDateTimeField.remainder : return $l3 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : goto [?= $b8 = l2 cmp 0L]
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : goto [?= $b8 = l2 cmp 0L] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $b8 = l2 cmp 0L
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $b8 = l2 cmp 0L >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : if $b8 != 0
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : if $b8 != 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : r6 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>(l2, r4)
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : r6 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>(l2, r4) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : $r2 = virtualinvoke r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>()
org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : $r2 = virtualinvoke r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>() >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getDurationField : $r1 = r0.<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField iUnitField>
org.joda.time.field.PreciseDurationDateTimeField.getDurationField : $r1 = r0.<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField iUnitField> >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getDurationField : return $r1
org.joda.time.field.PreciseDurationDateTimeField.getDurationField : return $r1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : l1 = virtualinvoke $r2.<org.joda.time.DurationField: long getUnitMillis()>()
org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : l1 = virtualinvoke $r2.<org.joda.time.DurationField: long getUnitMillis()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : i2 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int iMaxDigits>
org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : i2 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int iMaxDigits> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : tableswitch(i2) {     case 1:
org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : tableswitch(i2) {     case 1: >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : l3 = 1000000000L
org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : l3 = 1000000000L >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : goto [?= $l4 = l1 * l3]
org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : goto [?= $l4 = l1 * l3] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : $l4 = l1 * l3
org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : $l4 = l1 * l3 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : $l5 = $l4 / l3
org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : $l5 = $l4 / l3 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : $b6 = $l5 cmp l1
org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : $b6 = $l5 cmp l1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : if $b6 != 0
org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : if $b6 != 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : goto [?= $r3 = newarray (long)[2]]
org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : goto [?= $r3 = newarray (long)[2]] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : $r3 = newarray (long)[2]
org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : $r3 = newarray (long)[2] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : $l7 = l0 * l3
org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : $l7 = l0 * l3 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : $l8 = $l7 / l1
org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : $l8 = $l7 / l1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : $r3[0] = $l8
org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : $r3[0] = $l8 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : $l9 = (long) i2
org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : $l9 = (long) i2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : $r3[1] = $l9
org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : $r3[1] = $l9 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : return $r3
org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : return $r3 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : l3 = r6[0]
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : l3 = r6[0] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $l9 = r6[1]
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $l9 = r6[1] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : i4 = (int) $l9
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : i4 = (int) $l9 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $l10 = l3 & 2147483647L
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $l10 = l3 & 2147483647L >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $b11 = $l10 cmp l3
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $b11 = $l10 cmp l3 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : if $b11 != 0
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : if $b11 != 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $i12 = (int) l3
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $i12 = (int) l3 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : r10 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i12)
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : r10 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i12) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : goto [?= i5 = virtualinvoke r10.<java.lang.String: int length()>()]
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : goto [?= i5 = virtualinvoke r10.<java.lang.String: int length()>()] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : i5 = virtualinvoke r10.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : i5 = virtualinvoke r10.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : i6 = i4
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : i6 = i4 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : if i5 >= i6
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : if i5 >= i6 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : if r1 == null
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : if r1 == null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48)
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : goto [?= i1 = i1 + -1]
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : goto [?= i1 = i1 + -1] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : i1 = i1 + -1
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : i1 = i1 + -1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : i6 = i6 + -1
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : i6 = i6 + -1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : goto [?= (branch)]
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : goto [?= (branch)] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : if i1 >= i6
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : if i1 >= i6 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : if i5 <= 1
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : if i5 <= 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $i13 = i5 - 1
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $i13 = i5 - 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $c14 = virtualinvoke r10.<java.lang.String: char charAt(int)>($i13)
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $c14 = virtualinvoke r10.<java.lang.String: char charAt(int)>($i13) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : if $c14 == 48
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : if $c14 == 48 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : i5 = i5 + -1
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : i5 = i5 + -1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $i15 = virtualinvoke r10.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $i15 = virtualinvoke r10.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : if i5 >= $i15
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : if i5 >= $i15 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : i7 = 0
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : i7 = 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : if i7 >= i5
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : if i7 >= i5 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $c16 = virtualinvoke r10.<java.lang.String: char charAt(int)>(i7)
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $c16 = virtualinvoke r10.<java.lang.String: char charAt(int)>(i7) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c16)
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c16) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : i7 = i7 + 1
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : i7 = i7 + 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : goto [?= return]
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : goto [?= return] >>>>>>>> org.joda.time.LocalTime.toString : return $r2
org.joda.time.LocalTime.toString : return $r2 >>>>>>>> org.joda.time.base.AbstractPartial.toString : return $r2
