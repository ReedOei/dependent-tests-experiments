org.joda.time.DateTimeZone.forID : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.forID : $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("UTC")
org.joda.time.DateTimeZone.forID : $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("UTC") >>>>>>>> org.joda.time.DateTimeZone.forID : if $z0 == 0
org.joda.time.DateTimeZone.forID : if $z0 == 0 >>>>>>>> org.joda.time.DateTimeZone.forID : $r4 = <org.joda.time.DateTimeZone: org.joda.time.tz.Provider cProvider>
org.joda.time.DateTimeZone.forID : $r4 = <org.joda.time.DateTimeZone: org.joda.time.tz.Provider cProvider> >>>>>>>> org.joda.time.DateTimeZone.forID : r1 = interfaceinvoke $r4.<org.joda.time.tz.Provider: org.joda.time.DateTimeZone getZone(java.lang.String)>(r0)
org.joda.time.DateTimeZone.forID : r1 = interfaceinvoke $r4.<org.joda.time.tz.Provider: org.joda.time.DateTimeZone getZone(java.lang.String)>(r0) >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : if r1 != null
org.joda.time.tz.ZoneInfoProvider.getZone : if r1 != null >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : $r5 = r0.<org.joda.time.tz.ZoneInfoProvider: java.util.Map iZoneInfoMap>
org.joda.time.tz.ZoneInfoProvider.getZone : $r5 = r0.<org.joda.time.tz.ZoneInfoProvider: java.util.Map iZoneInfoMap> >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : r2 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.joda.time.tz.ZoneInfoProvider.getZone : r2 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : if r2 != null
org.joda.time.tz.ZoneInfoProvider.getZone : if r2 != null >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r2)
org.joda.time.tz.ZoneInfoProvider.getZone : $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r2) >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : if $z0 == 0
org.joda.time.tz.ZoneInfoProvider.getZone : if $z0 == 0 >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : $z1 = r2 instanceof java.lang.ref.SoftReference
org.joda.time.tz.ZoneInfoProvider.getZone : $z1 = r2 instanceof java.lang.ref.SoftReference >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : if $z1 == 0
org.joda.time.tz.ZoneInfoProvider.getZone : if $z1 == 0 >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : r3 = (java.lang.ref.SoftReference) r2
org.joda.time.tz.ZoneInfoProvider.getZone : r3 = (java.lang.ref.SoftReference) r2 >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : $r7 = virtualinvoke r3.<java.lang.ref.SoftReference: java.lang.Object get()>()
org.joda.time.tz.ZoneInfoProvider.getZone : $r7 = virtualinvoke r3.<java.lang.ref.SoftReference: java.lang.Object get()>() >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : r4 = (org.joda.time.DateTimeZone) $r7
org.joda.time.tz.ZoneInfoProvider.getZone : r4 = (org.joda.time.DateTimeZone) $r7 >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : if r4 == null
org.joda.time.tz.ZoneInfoProvider.getZone : if r4 == null >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : return r4
org.joda.time.tz.ZoneInfoProvider.getZone : return r4 >>>>>>>> org.joda.time.DateTimeZone.forID : if r1 == null
org.joda.time.DateTimeZone.forID : if r1 == null >>>>>>>> org.joda.time.DateTimeZone.forID : return r1
org.joda.time.DateTimeZone.forID : return r1 >>>>>>>> org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> >>>>>>>> org.joda.time.DateTimeZone.getDefault : if r0 != null
org.joda.time.DateTimeZone.getDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.DateTimeZone.getDefault : return r0 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.equals : if r0 != r1
org.joda.time.tz.CachedDateTimeZone.equals : if r0 != r1 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.equals : return 1
org.joda.time.tz.CachedDateTimeZone.equals : return 1 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.hashCode : $r1 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone>
org.joda.time.tz.CachedDateTimeZone.hashCode : $r1 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.tz.CachedDateTimeZone.hashCode : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeZone: int hashCode()>()
org.joda.time.tz.CachedDateTimeZone.hashCode : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeZone: int hashCode()>() >>>>>>>> org.joda.time.DateTimeZone.hashCode : $r1 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getID()>()
org.joda.time.DateTimeZone.hashCode : $r1 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getID()>() >>>>>>>> org.joda.time.DateTimeZone.getID : $r1 = r0.<org.joda.time.DateTimeZone: java.lang.String iID>
org.joda.time.DateTimeZone.getID : $r1 = r0.<org.joda.time.DateTimeZone: java.lang.String iID> >>>>>>>> org.joda.time.DateTimeZone.getID : return $r1
org.joda.time.DateTimeZone.getID : return $r1 >>>>>>>> org.joda.time.DateTimeZone.hashCode : $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>()
org.joda.time.DateTimeZone.hashCode : $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>() >>>>>>>> org.joda.time.DateTimeZone.hashCode : $i1 = 57 + $i0
org.joda.time.DateTimeZone.hashCode : $i1 = 57 + $i0 >>>>>>>> org.joda.time.DateTimeZone.hashCode : return $i1
org.joda.time.DateTimeZone.hashCode : return $i1 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.hashCode : return $i0
org.joda.time.tz.CachedDateTimeZone.hashCode : return $i0 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.equals : $z0 = r1 instanceof org.joda.time.tz.CachedDateTimeZone
org.joda.time.tz.CachedDateTimeZone.equals : $z0 = r1 instanceof org.joda.time.tz.CachedDateTimeZone >>>>>>>> org.joda.time.tz.CachedDateTimeZone.equals : if $z0 == 0
org.joda.time.tz.CachedDateTimeZone.equals : if $z0 == 0 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.equals : $r2 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone>
org.joda.time.tz.CachedDateTimeZone.equals : $r2 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.tz.CachedDateTimeZone.equals : $r3 = (org.joda.time.tz.CachedDateTimeZone) r1
org.joda.time.tz.CachedDateTimeZone.equals : $r3 = (org.joda.time.tz.CachedDateTimeZone) r1 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.equals : $r4 = $r3.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone>
org.joda.time.tz.CachedDateTimeZone.equals : $r4 = $r3.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.tz.CachedDateTimeZone.equals : $z1 = virtualinvoke $r2.<org.joda.time.DateTimeZone: boolean equals(java.lang.Object)>($r4)
org.joda.time.tz.CachedDateTimeZone.equals : $z1 = virtualinvoke $r2.<org.joda.time.DateTimeZone: boolean equals(java.lang.Object)>($r4) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if r0 != r1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if r0 != r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z0 = r1 instanceof org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z0 = r1 instanceof org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if $z0 == 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if $z0 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : r2 = (org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone) r1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : r2 = (org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone) r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r3 = virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getID()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r3 = virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getID()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r4 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getID()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r4 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getID()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if $z1 == 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if $z1 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z7 = 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z7 = 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : return $z7
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : return $z7 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.equals : return $z1
org.joda.time.tz.CachedDateTimeZone.equals : return $z1 >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : return null
org.joda.time.tz.ZoneInfoProvider.getZone : return null >>>>>>>> org.joda.time.DateTimeZone.forID : $z1 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("+")
org.joda.time.DateTimeZone.forID : $z1 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("+") >>>>>>>> org.joda.time.DateTimeZone.forID : if $z1 != 0
org.joda.time.DateTimeZone.forID : if $z1 != 0 >>>>>>>> org.joda.time.DateTimeZone.forID : i0 = staticinvoke <org.joda.time.DateTimeZone: int parseOffset(java.lang.String)>(r0)
org.joda.time.DateTimeZone.forID : i0 = staticinvoke <org.joda.time.DateTimeZone: int parseOffset(java.lang.String)>(r0) >>>>>>>> org.joda.time.DateTimeZone.parseOffset : $r1 = new org.joda.time.DateTimeZone$1
org.joda.time.DateTimeZone.parseOffset : $r1 = new org.joda.time.DateTimeZone$1 >>>>>>>> org.joda.time.DateTimeZone.parseOffset : specialinvoke $r1.<org.joda.time.DateTimeZone$1: void <init>()>()
org.joda.time.DateTimeZone.parseOffset : specialinvoke $r1.<org.joda.time.DateTimeZone$1: void <init>()>() >>>>>>>> org.joda.time.DateTimeZone.parseOffset : r2 = $r1
org.joda.time.DateTimeZone.parseOffset : r2 = $r1 >>>>>>>> org.joda.time.DateTimeZone.parseOffset : $r3 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.format.DateTimeFormatter offsetFormatter()>()
org.joda.time.DateTimeZone.parseOffset : $r3 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.format.DateTimeFormatter offsetFormatter()>() >>>>>>>> org.joda.time.DateTimeZone.offsetFormatter : $r0 = <org.joda.time.DateTimeZone: org.joda.time.format.DateTimeFormatter cOffsetFormatter>
org.joda.time.DateTimeZone.offsetFormatter : $r0 = <org.joda.time.DateTimeZone: org.joda.time.format.DateTimeFormatter cOffsetFormatter> >>>>>>>> org.joda.time.DateTimeZone.offsetFormatter : if $r0 != null
org.joda.time.DateTimeZone.offsetFormatter : if $r0 != null >>>>>>>> org.joda.time.DateTimeZone.offsetFormatter : $r1 = new org.joda.time.format.DateTimeFormatterBuilder
org.joda.time.DateTimeZone.offsetFormatter : $r1 = new org.joda.time.format.DateTimeFormatterBuilder >>>>>>>> org.joda.time.DateTimeZone.offsetFormatter : specialinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>()
org.joda.time.DateTimeZone.offsetFormatter : specialinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>() >>>>>>>> org.joda.time.DateTimeZone.offsetFormatter : $r2 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,boolean,int,int)>(null, 1, 2, 4)
org.joda.time.DateTimeZone.offsetFormatter : $r2 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,boolean,int,int)>(null, 1, 2, 4) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendTimeZoneOffset : $r2 = new org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset
org.joda.time.format.DateTimeFormatterBuilder.appendTimeZoneOffset : $r2 = new org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendTimeZoneOffset : specialinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void <init>(java.lang.String,java.lang.String,boolean,int,int)>(r1, r1, z0, i0, i1)
org.joda.time.format.DateTimeFormatterBuilder.appendTimeZoneOffset : specialinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void <init>(java.lang.String,java.lang.String,boolean,int,int)>(r1, r1, z0, i0, i1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendTimeZoneOffset : $r3 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r2)
org.joda.time.format.DateTimeFormatterBuilder.appendTimeZoneOffset : $r3 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r2) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.append0 : r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object iFormatter> = null
org.joda.time.format.DateTimeFormatterBuilder.append0 : r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object iFormatter> = null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.append0 : $r2 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs>
org.joda.time.format.DateTimeFormatterBuilder.append0 : $r2 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.append0 : virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1)
org.joda.time.format.DateTimeFormatterBuilder.append0 : virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.append0 : $r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs>
org.joda.time.format.DateTimeFormatterBuilder.append0 : $r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.append0 : virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r1)
org.joda.time.format.DateTimeFormatterBuilder.append0 : virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.append0 : return r0
org.joda.time.format.DateTimeFormatterBuilder.append0 : return r0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendTimeZoneOffset : return $r3
org.joda.time.format.DateTimeFormatterBuilder.appendTimeZoneOffset : return $r3 >>>>>>>> org.joda.time.DateTimeZone.offsetFormatter : $r3 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>()
org.joda.time.DateTimeZone.offsetFormatter : $r3 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>()
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r1 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object iFormatter>
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r1 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object iFormatter> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : if r1 != null
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : if r1 != null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $r4 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs>
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $r4 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>()
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : if $i0 != 2
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : if $i0 != 2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $r5 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs>
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $r5 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r2 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(0)
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r2 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(0) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $r6 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs>
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $r6 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r3 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>(1)
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r3 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>(1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : if r2 == null
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : if r2 == null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : if r2 == r3
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : if r2 == r3 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r1 = r2
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r1 = r2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : goto [?= (branch)]
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : goto [?= (branch)] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object iFormatter> = r1
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object iFormatter> = r1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : return r1
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : return r1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r2 = null
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r2 = null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : $z0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isPrinter(java.lang.Object)>(r1)
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : $z0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isPrinter(java.lang.Object)>(r1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isPrinter : $z0 = r1 instanceof org.joda.time.format.DateTimePrinter
org.joda.time.format.DateTimeFormatterBuilder.isPrinter : $z0 = r1 instanceof org.joda.time.format.DateTimePrinter >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isPrinter : if $z0 == 0
org.joda.time.format.DateTimeFormatterBuilder.isPrinter : if $z0 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isPrinter : $z1 = r1 instanceof org.joda.time.format.DateTimeFormatterBuilder$Composite
org.joda.time.format.DateTimeFormatterBuilder.isPrinter : $z1 = r1 instanceof org.joda.time.format.DateTimeFormatterBuilder$Composite >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isPrinter : if $z1 == 0
org.joda.time.format.DateTimeFormatterBuilder.isPrinter : if $z1 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isPrinter : return 1
org.joda.time.format.DateTimeFormatterBuilder.isPrinter : return 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : if $z0 == 0
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : if $z0 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r2 = (org.joda.time.format.DateTimePrinter) r1
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r2 = (org.joda.time.format.DateTimePrinter) r1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r3 = null
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r3 = null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : $z1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isParser(java.lang.Object)>(r1)
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : $z1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isParser(java.lang.Object)>(r1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isParser : $z0 = r1 instanceof org.joda.time.format.DateTimeParser
org.joda.time.format.DateTimeFormatterBuilder.isParser : $z0 = r1 instanceof org.joda.time.format.DateTimeParser >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isParser : if $z0 == 0
org.joda.time.format.DateTimeFormatterBuilder.isParser : if $z0 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isParser : $z1 = r1 instanceof org.joda.time.format.DateTimeFormatterBuilder$Composite
org.joda.time.format.DateTimeFormatterBuilder.isParser : $z1 = r1 instanceof org.joda.time.format.DateTimeFormatterBuilder$Composite >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isParser : if $z1 == 0
org.joda.time.format.DateTimeFormatterBuilder.isParser : if $z1 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isParser : return 1
org.joda.time.format.DateTimeFormatterBuilder.isParser : return 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : if $z1 == 0
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : if $z1 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r3 = (org.joda.time.format.DateTimeParser) r1
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r3 = (org.joda.time.format.DateTimeParser) r1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : if r2 != null
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : if r2 != null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : $r4 = new org.joda.time.format.DateTimeFormatter
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : $r4 = new org.joda.time.format.DateTimeFormatter >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : specialinvoke $r4.<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser)>(r2, r3)
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : specialinvoke $r4.<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser)>(r2, r3) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : return $r4
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : return $r4 >>>>>>>> org.joda.time.DateTimeZone.offsetFormatter : <org.joda.time.DateTimeZone: org.joda.time.format.DateTimeFormatter cOffsetFormatter> = $r3
org.joda.time.DateTimeZone.offsetFormatter : <org.joda.time.DateTimeZone: org.joda.time.format.DateTimeFormatter cOffsetFormatter> = $r3 >>>>>>>> org.joda.time.DateTimeZone.offsetFormatter : $r4 = <org.joda.time.DateTimeZone: org.joda.time.format.DateTimeFormatter cOffsetFormatter>
org.joda.time.DateTimeZone.offsetFormatter : $r4 = <org.joda.time.DateTimeZone: org.joda.time.format.DateTimeFormatter cOffsetFormatter> >>>>>>>> org.joda.time.DateTimeZone.offsetFormatter : return $r4
org.joda.time.DateTimeZone.offsetFormatter : return $r4 >>>>>>>> org.joda.time.DateTimeZone.parseOffset : $r4 = virtualinvoke $r3.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)>(r2)
org.joda.time.DateTimeZone.parseOffset : $r4 = virtualinvoke $r3.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)>(r2) >>>>>>>> org.joda.time.format.DateTimeFormatter.withChronology : $r2 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>
org.joda.time.format.DateTimeFormatter.withChronology : $r2 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono> >>>>>>>> org.joda.time.format.DateTimeFormatter.withChronology : if $r2 != r1
org.joda.time.format.DateTimeFormatter.withChronology : if $r2 != r1 >>>>>>>> org.joda.time.format.DateTimeFormatter.withChronology : $r3 = new org.joda.time.format.DateTimeFormatter
org.joda.time.format.DateTimeFormatter.withChronology : $r3 = new org.joda.time.format.DateTimeFormatter >>>>>>>> org.joda.time.format.DateTimeFormatter.withChronology : $r4 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter iPrinter>
org.joda.time.format.DateTimeFormatter.withChronology : $r4 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter iPrinter> >>>>>>>> org.joda.time.format.DateTimeFormatter.withChronology : $r5 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser iParser>
org.joda.time.format.DateTimeFormatter.withChronology : $r5 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser iParser> >>>>>>>> org.joda.time.format.DateTimeFormatter.withChronology : $r6 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>
org.joda.time.format.DateTimeFormatter.withChronology : $r6 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale> >>>>>>>> org.joda.time.format.DateTimeFormatter.withChronology : $z0 = r0.<org.joda.time.format.DateTimeFormatter: boolean iOffsetParsed>
org.joda.time.format.DateTimeFormatter.withChronology : $z0 = r0.<org.joda.time.format.DateTimeFormatter: boolean iOffsetParsed> >>>>>>>> org.joda.time.format.DateTimeFormatter.withChronology : $r7 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>
org.joda.time.format.DateTimeFormatter.withChronology : $r7 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.format.DateTimeFormatter.withChronology : $r8 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear>
org.joda.time.format.DateTimeFormatter.withChronology : $r8 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear> >>>>>>>> org.joda.time.format.DateTimeFormatter.withChronology : $i0 = r0.<org.joda.time.format.DateTimeFormatter: int iDefaultYear>
org.joda.time.format.DateTimeFormatter.withChronology : $i0 = r0.<org.joda.time.format.DateTimeFormatter: int iDefaultYear> >>>>>>>> org.joda.time.format.DateTimeFormatter.withChronology : specialinvoke $r3.<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser,java.util.Locale,boolean,org.joda.time.Chronology,org.joda.time.DateTimeZone,java.lang.Integer,int)>($r4, $r5, $r6, $z0, r1, $r7, $r8, $i0)
org.joda.time.format.DateTimeFormatter.withChronology : specialinvoke $r3.<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser,java.util.Locale,boolean,org.joda.time.Chronology,org.joda.time.DateTimeZone,java.lang.Integer,int)>($r4, $r5, $r6, $z0, r1, $r7, $r8, $i0) >>>>>>>> org.joda.time.format.DateTimeFormatter.withChronology : return $r3
org.joda.time.format.DateTimeFormatter.withChronology : return $r3 >>>>>>>> org.joda.time.DateTimeZone.parseOffset : $l0 = virtualinvoke $r4.<org.joda.time.format.DateTimeFormatter: long parseMillis(java.lang.String)>(r0)
org.joda.time.DateTimeZone.parseOffset : $l0 = virtualinvoke $r4.<org.joda.time.format.DateTimeFormatter: long parseMillis(java.lang.String)>(r0) >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : r2 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser requireParser()>()
org.joda.time.format.DateTimeFormatter.parseMillis : r2 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser requireParser()>() >>>>>>>> org.joda.time.format.DateTimeFormatter.requireParser : r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser iParser>
org.joda.time.format.DateTimeFormatter.requireParser : r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser iParser> >>>>>>>> org.joda.time.format.DateTimeFormatter.requireParser : if r1 != null
org.joda.time.format.DateTimeFormatter.requireParser : if r1 != null >>>>>>>> org.joda.time.format.DateTimeFormatter.requireParser : return r1
org.joda.time.format.DateTimeFormatter.requireParser : return r1 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : $r5 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>
org.joda.time.format.DateTimeFormatter.parseMillis : $r5 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono> >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : r3 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>($r5)
org.joda.time.format.DateTimeFormatter.parseMillis : r3 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>($r5) >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.format.DateTimeFormatter.selectChronology : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DateTimeUtils.getChronology : if r0 != null
org.joda.time.DateTimeUtils.getChronology : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getChronology : return r0
org.joda.time.DateTimeUtils.getChronology : return r0 >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : $r3 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>
org.joda.time.format.DateTimeFormatter.selectChronology : $r3 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono> >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : if $r3 == null
org.joda.time.format.DateTimeFormatter.selectChronology : if $r3 == null >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : r2 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>
org.joda.time.format.DateTimeFormatter.selectChronology : r2 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono> >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : $r4 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>
org.joda.time.format.DateTimeFormatter.selectChronology : $r4 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : if $r4 == null
org.joda.time.format.DateTimeFormatter.selectChronology : if $r4 == null >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : return r2
org.joda.time.format.DateTimeFormatter.selectChronology : return r2 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : $r6 = new org.joda.time.format.DateTimeParserBucket
org.joda.time.format.DateTimeFormatter.parseMillis : $r6 = new org.joda.time.format.DateTimeParserBucket >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : $r7 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>
org.joda.time.format.DateTimeFormatter.parseMillis : $r7 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale> >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : $r8 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear>
org.joda.time.format.DateTimeFormatter.parseMillis : $r8 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear> >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : $i1 = r0.<org.joda.time.format.DateTimeFormatter: int iDefaultYear>
org.joda.time.format.DateTimeFormatter.parseMillis : $i1 = r0.<org.joda.time.format.DateTimeFormatter: int iDefaultYear> >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : specialinvoke $r6.<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>(0L, r3, $r7, $r8, $i1)
org.joda.time.format.DateTimeFormatter.parseMillis : specialinvoke $r6.<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>(0L, r3, $r7, $r8, $i1) >>>>>>>> org.joda.time.DateTimeZone$1.getZone : return null
org.joda.time.DateTimeZone$1.getZone : return null >>>>>>>> org.joda.time.DateTimeZone$1.withUTC : return r0
org.joda.time.DateTimeZone$1.withUTC : return r0 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : r4 = $r6
org.joda.time.format.DateTimeFormatter.parseMillis : r4 = $r6 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : i0 = interfaceinvoke r2.<org.joda.time.format.DateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>(r4, r1, 0)
org.joda.time.format.DateTimeFormatter.parseMillis : i0 = interfaceinvoke r2.<org.joda.time.format.DateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>(r4, r1, 0) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i9 = virtualinvoke r2.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i9 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i1 = $i9 - i0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i1 = $i9 - i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetParseText>
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetParseText> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if $r3 == null
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if $r3 == null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i1 > 1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i1 > 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : c3 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i0)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : c3 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i0) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if c3 != 45
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if c3 != 45 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if c3 != 43
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if c3 != 43 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : z2 = 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : z2 = 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : goto [?= i16 = i1 + -1]
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : goto [?= i16 = i1 + -1] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i16 = i1 + -1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i16 = i1 + -1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i17 = i0 + 1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i17 = i0 + 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i18 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.String,int,int)>(r2, i17, 2)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i18 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.String,int,int)>(r2, i17, 2) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : $i4 = virtualinvoke r1.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : $i4 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : $i5 = $i4 - i0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : $i5 = $i4 - i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : i2 = staticinvoke <java.lang.Math: int min(int,int)>($i5, i1)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : i2 = staticinvoke <java.lang.Math: int min(int,int)>($i5, i1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : i6 = 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : i6 = 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : if i2 <= 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : if i2 <= 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : $i7 = i0 + i6
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : $i7 = i0 + i6 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i7)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i7) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : if c3 < 48
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : if c3 < 48 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : if c3 <= 57
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : if c3 <= 57 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : i6 = i6 + 1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : i6 = i6 + 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : i2 = i2 + -1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : i2 = i2 + -1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : goto [?= (branch)]
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : goto [?= (branch)] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : return i6
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : return i6 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if $i18 >= 2
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if $i18 >= 2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i4 = staticinvoke <org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.String,int)>(r2, i17)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i4 = staticinvoke <org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.String,int)>(r2, i17) >>>>>>>> org.joda.time.format.FormatUtils.parseTwoDigits : $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0)
org.joda.time.format.FormatUtils.parseTwoDigits : $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0) >>>>>>>> org.joda.time.format.FormatUtils.parseTwoDigits : i1 = $c2 - 48
org.joda.time.format.FormatUtils.parseTwoDigits : i1 = $c2 - 48 >>>>>>>> org.joda.time.format.FormatUtils.parseTwoDigits : $i3 = i1 << 3
org.joda.time.format.FormatUtils.parseTwoDigits : $i3 = i1 << 3 >>>>>>>> org.joda.time.format.FormatUtils.parseTwoDigits : $i4 = i1 << 1
org.joda.time.format.FormatUtils.parseTwoDigits : $i4 = i1 << 1 >>>>>>>> org.joda.time.format.FormatUtils.parseTwoDigits : $i5 = $i3 + $i4
org.joda.time.format.FormatUtils.parseTwoDigits : $i5 = $i3 + $i4 >>>>>>>> org.joda.time.format.FormatUtils.parseTwoDigits : $i6 = i0 + 1
org.joda.time.format.FormatUtils.parseTwoDigits : $i6 = i0 + 1 >>>>>>>> org.joda.time.format.FormatUtils.parseTwoDigits : $c7 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i6)
org.joda.time.format.FormatUtils.parseTwoDigits : $c7 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i6) >>>>>>>> org.joda.time.format.FormatUtils.parseTwoDigits : $i8 = $i5 + $c7
org.joda.time.format.FormatUtils.parseTwoDigits : $i8 = $i5 + $c7 >>>>>>>> org.joda.time.format.FormatUtils.parseTwoDigits : $i9 = $i8 - 48
org.joda.time.format.FormatUtils.parseTwoDigits : $i9 = $i8 - 48 >>>>>>>> org.joda.time.format.FormatUtils.parseTwoDigits : return $i9
org.joda.time.format.FormatUtils.parseTwoDigits : return $i9 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i4 <= 23
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i4 <= 23 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i5 = i4 * 3600000
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i5 = i4 * 3600000 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i21 = i16 + -2
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i21 = i16 + -2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i22 = i17 + 2
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i22 = i17 + 2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i21 > 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i21 > 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : c23 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i22)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : c23 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i22) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if c23 != 58
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if c23 != 58 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : z0 = 1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : z0 = 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i21 = i21 + -1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i21 = i21 + -1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i22 = i22 + 1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i22 = i22 + 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : goto [?= i6 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.String,int,int)>(r2, i22, 2)]
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : goto [?= i6 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.String,int,int)>(r2, i22, 2)] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i6 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.String,int,int)>(r2, i22, 2)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i6 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.String,int,int)>(r2, i22, 2) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i6 != 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i6 != 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i6 >= 2
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i6 >= 2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i7 = staticinvoke <org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.String,int)>(r2, i22)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i7 = staticinvoke <org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.String,int)>(r2, i22) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i7 <= 59
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i7 <= 59 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i26 = i7 * 60000
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i26 = i7 * 60000 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i5 = i5 + $i26
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i5 = i5 + $i26 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i27 = i21 + -2
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i27 = i21 + -2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i22 = i22 + 2
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i22 = i22 + 2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i27 > 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i27 > 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : goto [?= (branch)]
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : goto [?= (branch)] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if z2 == 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if z2 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i50 = i5
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i50 = i5 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i50)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i50) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: void setOffset(java.lang.Integer)>($r11)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: void setOffset(java.lang.Integer)>($r11) >>>>>>>> org.joda.time.format.DateTimeParserBucket.setOffset : r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState> = null
org.joda.time.format.DateTimeParserBucket.setOffset : r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState> = null >>>>>>>> org.joda.time.format.DateTimeParserBucket.setOffset : r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset> = r1
org.joda.time.format.DateTimeParserBucket.setOffset : r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset> = r1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : return i22
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : return i22 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : if i0 < 0
org.joda.time.format.DateTimeFormatter.parseMillis : if i0 < 0 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : $i2 = virtualinvoke r1.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatter.parseMillis : $i2 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : if i0 < $i2
org.joda.time.format.DateTimeFormatter.parseMillis : if i0 < $i2 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : $l3 = virtualinvoke r4.<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.String)>(1, r1)
org.joda.time.format.DateTimeFormatter.parseMillis : $l3 = virtualinvoke r4.<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.String)>(1, r1) >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : r2 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields>
org.joda.time.format.DateTimeParserBucket.computeMillis : r2 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields> >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : i0 = r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount>
org.joda.time.format.DateTimeParserBucket.computeMillis : i0 = r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount> >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $z1 = r0.<org.joda.time.format.DateTimeParserBucket: boolean iSavedFieldsShared>
org.joda.time.format.DateTimeParserBucket.computeMillis : $z1 = r0.<org.joda.time.format.DateTimeParserBucket: boolean iSavedFieldsShared> >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : if $z1 == 0
org.joda.time.format.DateTimeParserBucket.computeMillis : if $z1 == 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : staticinvoke <org.joda.time.format.DateTimeParserBucket: void sort(org.joda.time.format.DateTimeParserBucket$SavedField[],int)>(r2, i0)
org.joda.time.format.DateTimeParserBucket.computeMillis : staticinvoke <org.joda.time.format.DateTimeParserBucket: void sort(org.joda.time.format.DateTimeParserBucket$SavedField[],int)>(r2, i0) >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : if i0 <= 10
org.joda.time.format.DateTimeParserBucket.sort : if i0 <= 10 >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : i1 = 0
org.joda.time.format.DateTimeParserBucket.sort : i1 = 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : if i1 >= i0
org.joda.time.format.DateTimeParserBucket.sort : if i1 >= i0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : if i0 <= 0
org.joda.time.format.DateTimeParserBucket.computeMillis : if i0 <= 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : l5 = r0.<org.joda.time.format.DateTimeParserBucket: long iMillis>
org.joda.time.format.DateTimeParserBucket.computeMillis : l5 = r0.<org.joda.time.format.DateTimeParserBucket: long iMillis> >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : i6 = 0
org.joda.time.format.DateTimeParserBucket.computeMillis : i6 = 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : if i6 >= i0
org.joda.time.format.DateTimeParserBucket.computeMillis : if i6 >= i0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : if z0 == 0
org.joda.time.format.DateTimeParserBucket.computeMillis : if z0 == 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : i7 = 0
org.joda.time.format.DateTimeParserBucket.computeMillis : i7 = 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : if i7 >= i0
org.joda.time.format.DateTimeParserBucket.computeMillis : if i7 >= i0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : goto [?= $r27 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset>]
org.joda.time.format.DateTimeParserBucket.computeMillis : goto [?= $r27 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset>] >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $r27 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset>
org.joda.time.format.DateTimeParserBucket.computeMillis : $r27 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset> >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : if $r27 == null
org.joda.time.format.DateTimeParserBucket.computeMillis : if $r27 == null >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $r28 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset>
org.joda.time.format.DateTimeParserBucket.computeMillis : $r28 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset> >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $i10 = virtualinvoke $r28.<java.lang.Integer: int intValue()>()
org.joda.time.format.DateTimeParserBucket.computeMillis : $i10 = virtualinvoke $r28.<java.lang.Integer: int intValue()>() >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $l11 = (long) $i10
org.joda.time.format.DateTimeParserBucket.computeMillis : $l11 = (long) $i10 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : l5 = l5 - $l11
org.joda.time.format.DateTimeParserBucket.computeMillis : l5 = l5 - $l11 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : goto [?= return l5]
org.joda.time.format.DateTimeParserBucket.computeMillis : goto [?= return l5] >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : return l5
org.joda.time.format.DateTimeParserBucket.computeMillis : return l5 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : return $l3
org.joda.time.format.DateTimeFormatter.parseMillis : return $l3 >>>>>>>> org.joda.time.DateTimeZone.parseOffset : $i1 = (int) $l0
org.joda.time.DateTimeZone.parseOffset : $i1 = (int) $l0 >>>>>>>> org.joda.time.DateTimeZone.parseOffset : $i2 = neg $i1
org.joda.time.DateTimeZone.parseOffset : $i2 = neg $i1 >>>>>>>> org.joda.time.DateTimeZone.parseOffset : return $i2
org.joda.time.DateTimeZone.parseOffset : return $i2 >>>>>>>> org.joda.time.DateTimeZone.forID : $l1 = (long) i0
org.joda.time.DateTimeZone.forID : $l1 = (long) i0 >>>>>>>> org.joda.time.DateTimeZone.forID : $b2 = $l1 cmp 0L
org.joda.time.DateTimeZone.forID : $b2 = $l1 cmp 0L >>>>>>>> org.joda.time.DateTimeZone.forID : if $b2 != 0
org.joda.time.DateTimeZone.forID : if $b2 != 0 >>>>>>>> org.joda.time.DateTimeZone.forID : r6 = staticinvoke <org.joda.time.DateTimeZone: java.lang.String printOffset(int)>(i0)
org.joda.time.DateTimeZone.forID : r6 = staticinvoke <org.joda.time.DateTimeZone: java.lang.String printOffset(int)>(i0) >>>>>>>> org.joda.time.DateTimeZone.printOffset : $r0 = new java.lang.StringBuffer
org.joda.time.DateTimeZone.printOffset : $r0 = new java.lang.StringBuffer >>>>>>>> org.joda.time.DateTimeZone.printOffset : specialinvoke $r0.<java.lang.StringBuffer: void <init>()>()
org.joda.time.DateTimeZone.printOffset : specialinvoke $r0.<java.lang.StringBuffer: void <init>()>() >>>>>>>> org.joda.time.DateTimeZone.printOffset : r1 = $r0
org.joda.time.DateTimeZone.printOffset : r1 = $r0 >>>>>>>> org.joda.time.DateTimeZone.printOffset : if i0 < 0
org.joda.time.DateTimeZone.printOffset : if i0 < 0 >>>>>>>> org.joda.time.DateTimeZone.printOffset : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(43)
org.joda.time.DateTimeZone.printOffset : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(43) >>>>>>>> org.joda.time.DateTimeZone.printOffset : goto [?= i1 = i0 / 3600000]
org.joda.time.DateTimeZone.printOffset : goto [?= i1 = i0 / 3600000] >>>>>>>> org.joda.time.DateTimeZone.printOffset : i1 = i0 / 3600000
org.joda.time.DateTimeZone.printOffset : i1 = i0 / 3600000 >>>>>>>> org.joda.time.DateTimeZone.printOffset : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, i1, 2)
org.joda.time.DateTimeZone.printOffset : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, i1, 2) >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 0
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 0 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 10
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 10 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i1 <= 1
org.joda.time.format.FormatUtils.appendPaddedInteger : if i1 <= 1 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48)
org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48) >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : i1 = i1 + -1
org.joda.time.format.FormatUtils.appendPaddedInteger : i1 = i1 + -1 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : goto [?= (branch)]
org.joda.time.format.FormatUtils.appendPaddedInteger : goto [?= (branch)] >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i3 = i0 + 48
org.joda.time.format.FormatUtils.appendPaddedInteger : $i3 = i0 + 48 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $c4 = (char) $i3
org.joda.time.format.FormatUtils.appendPaddedInteger : $c4 = (char) $i3 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4)
org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4) >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : goto [?= return]
org.joda.time.format.FormatUtils.appendPaddedInteger : goto [?= return] >>>>>>>> org.joda.time.DateTimeZone.printOffset : $i4 = i1 * 3600000
org.joda.time.DateTimeZone.printOffset : $i4 = i1 * 3600000 >>>>>>>> org.joda.time.DateTimeZone.printOffset : i5 = i0 - $i4
org.joda.time.DateTimeZone.printOffset : i5 = i0 - $i4 >>>>>>>> org.joda.time.DateTimeZone.printOffset : i2 = i5 / 60000
org.joda.time.DateTimeZone.printOffset : i2 = i5 / 60000 >>>>>>>> org.joda.time.DateTimeZone.printOffset : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58)
org.joda.time.DateTimeZone.printOffset : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58) >>>>>>>> org.joda.time.DateTimeZone.printOffset : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, i2, 2)
org.joda.time.DateTimeZone.printOffset : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, i2, 2) >>>>>>>> org.joda.time.DateTimeZone.printOffset : $i6 = i2 * 60000
org.joda.time.DateTimeZone.printOffset : $i6 = i2 * 60000 >>>>>>>> org.joda.time.DateTimeZone.printOffset : i7 = i5 - $i6
org.joda.time.DateTimeZone.printOffset : i7 = i5 - $i6 >>>>>>>> org.joda.time.DateTimeZone.printOffset : if i7 != 0
org.joda.time.DateTimeZone.printOffset : if i7 != 0 >>>>>>>> org.joda.time.DateTimeZone.printOffset : $r5 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>()
org.joda.time.DateTimeZone.printOffset : $r5 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> org.joda.time.DateTimeZone.printOffset : return $r5
org.joda.time.DateTimeZone.printOffset : return $r5 >>>>>>>> org.joda.time.DateTimeZone.forID : $r7 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone fixedOffsetZone(java.lang.String,int)>(r6, i0)
org.joda.time.DateTimeZone.forID : $r7 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone fixedOffsetZone(java.lang.String,int)>(r6, i0) >>>>>>>> org.joda.time.DateTimeZone.fixedOffsetZone : if i0 != 0
org.joda.time.DateTimeZone.fixedOffsetZone : if i0 != 0 >>>>>>>> org.joda.time.DateTimeZone.fixedOffsetZone : $r4 = <org.joda.time.DateTimeZone: java.util.Map iFixedOffsetCache>
org.joda.time.DateTimeZone.fixedOffsetZone : $r4 = <org.joda.time.DateTimeZone: java.util.Map iFixedOffsetCache> >>>>>>>> org.joda.time.DateTimeZone.fixedOffsetZone : if $r4 != null
org.joda.time.DateTimeZone.fixedOffsetZone : if $r4 != null >>>>>>>> org.joda.time.DateTimeZone.fixedOffsetZone : $r5 = new java.util.HashMap
org.joda.time.DateTimeZone.fixedOffsetZone : $r5 = new java.util.HashMap >>>>>>>> org.joda.time.DateTimeZone.fixedOffsetZone : specialinvoke $r5.<java.util.HashMap: void <init>()>()
org.joda.time.DateTimeZone.fixedOffsetZone : specialinvoke $r5.<java.util.HashMap: void <init>()>() >>>>>>>> org.joda.time.DateTimeZone.fixedOffsetZone : <org.joda.time.DateTimeZone: java.util.Map iFixedOffsetCache> = $r5
org.joda.time.DateTimeZone.fixedOffsetZone : <org.joda.time.DateTimeZone: java.util.Map iFixedOffsetCache> = $r5 >>>>>>>> org.joda.time.DateTimeZone.fixedOffsetZone : $r6 = <org.joda.time.DateTimeZone: java.util.Map iFixedOffsetCache>
org.joda.time.DateTimeZone.fixedOffsetZone : $r6 = <org.joda.time.DateTimeZone: java.util.Map iFixedOffsetCache> >>>>>>>> org.joda.time.DateTimeZone.fixedOffsetZone : $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0)
org.joda.time.DateTimeZone.fixedOffsetZone : $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> org.joda.time.DateTimeZone.fixedOffsetZone : r1 = (java.lang.ref.Reference) $r7
org.joda.time.DateTimeZone.fixedOffsetZone : r1 = (java.lang.ref.Reference) $r7 >>>>>>>> org.joda.time.DateTimeZone.fixedOffsetZone : if r1 == null
org.joda.time.DateTimeZone.fixedOffsetZone : if r1 == null >>>>>>>> org.joda.time.DateTimeZone.fixedOffsetZone : $r9 = new org.joda.time.tz.FixedDateTimeZone
org.joda.time.DateTimeZone.fixedOffsetZone : $r9 = new org.joda.time.tz.FixedDateTimeZone >>>>>>>> org.joda.time.DateTimeZone.fixedOffsetZone : specialinvoke $r9.<org.joda.time.tz.FixedDateTimeZone: void <init>(java.lang.String,java.lang.String,int,int)>(r0, null, i0, i0)
org.joda.time.DateTimeZone.fixedOffsetZone : specialinvoke $r9.<org.joda.time.tz.FixedDateTimeZone: void <init>(java.lang.String,java.lang.String,int,int)>(r0, null, i0, i0) >>>>>>>> org.joda.time.DateTimeZone.fixedOffsetZone : r10 = $r9
org.joda.time.DateTimeZone.fixedOffsetZone : r10 = $r9 >>>>>>>> org.joda.time.DateTimeZone.fixedOffsetZone : $r11 = <org.joda.time.DateTimeZone: java.util.Map iFixedOffsetCache>
org.joda.time.DateTimeZone.fixedOffsetZone : $r11 = <org.joda.time.DateTimeZone: java.util.Map iFixedOffsetCache> >>>>>>>> org.joda.time.DateTimeZone.fixedOffsetZone : $r12 = new java.lang.ref.SoftReference
org.joda.time.DateTimeZone.fixedOffsetZone : $r12 = new java.lang.ref.SoftReference >>>>>>>> org.joda.time.DateTimeZone.fixedOffsetZone : specialinvoke $r12.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>(r10)
org.joda.time.DateTimeZone.fixedOffsetZone : specialinvoke $r12.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>(r10) >>>>>>>> org.joda.time.DateTimeZone.fixedOffsetZone : interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r12)
org.joda.time.DateTimeZone.fixedOffsetZone : interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r12) >>>>>>>> org.joda.time.DateTimeZone.fixedOffsetZone : return r10
org.joda.time.DateTimeZone.fixedOffsetZone : return r10 >>>>>>>> org.joda.time.DateTimeZone.forID : return $r7
org.joda.time.DateTimeZone.forID : return $r7 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.equals : if r0 != r1
org.joda.time.tz.FixedDateTimeZone.equals : if r0 != r1 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.equals : return 1
org.joda.time.tz.FixedDateTimeZone.equals : return 1 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.equals : return 0
org.joda.time.tz.CachedDateTimeZone.equals : return 0 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.equals : $z0 = r1 instanceof org.joda.time.tz.FixedDateTimeZone
org.joda.time.tz.FixedDateTimeZone.equals : $z0 = r1 instanceof org.joda.time.tz.FixedDateTimeZone >>>>>>>> org.joda.time.tz.FixedDateTimeZone.equals : if $z0 == 0
org.joda.time.tz.FixedDateTimeZone.equals : if $z0 == 0 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.equals : return 0
org.joda.time.tz.FixedDateTimeZone.equals : return 0 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $r1 = virtualinvoke r0.<org.joda.time.tz.FixedDateTimeZone: java.lang.String getID()>()
org.joda.time.tz.FixedDateTimeZone.hashCode : $r1 = virtualinvoke r0.<org.joda.time.tz.FixedDateTimeZone: java.lang.String getID()>() >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>()
org.joda.time.tz.FixedDateTimeZone.hashCode : $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>() >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iStandardOffset>
org.joda.time.tz.FixedDateTimeZone.hashCode : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iStandardOffset> >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i2 = 37 * $i1
org.joda.time.tz.FixedDateTimeZone.hashCode : $i2 = 37 * $i1 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i3 = $i0 + $i2
org.joda.time.tz.FixedDateTimeZone.hashCode : $i3 = $i0 + $i2 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i4 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset>
org.joda.time.tz.FixedDateTimeZone.hashCode : $i4 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset> >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i5 = 31 * $i4
org.joda.time.tz.FixedDateTimeZone.hashCode : $i5 = 31 * $i4 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i6 = $i3 + $i5
org.joda.time.tz.FixedDateTimeZone.hashCode : $i6 = $i3 + $i5 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : return $i6
org.joda.time.tz.FixedDateTimeZone.hashCode : return $i6 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.equals : r2 = (org.joda.time.tz.FixedDateTimeZone) r1
org.joda.time.tz.FixedDateTimeZone.equals : r2 = (org.joda.time.tz.FixedDateTimeZone) r1 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.equals : $r3 = virtualinvoke r0.<org.joda.time.tz.FixedDateTimeZone: java.lang.String getID()>()
org.joda.time.tz.FixedDateTimeZone.equals : $r3 = virtualinvoke r0.<org.joda.time.tz.FixedDateTimeZone: java.lang.String getID()>() >>>>>>>> org.joda.time.tz.FixedDateTimeZone.equals : $r4 = virtualinvoke r2.<org.joda.time.tz.FixedDateTimeZone: java.lang.String getID()>()
org.joda.time.tz.FixedDateTimeZone.equals : $r4 = virtualinvoke r2.<org.joda.time.tz.FixedDateTimeZone: java.lang.String getID()>() >>>>>>>> org.joda.time.tz.FixedDateTimeZone.equals : $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4)
org.joda.time.tz.FixedDateTimeZone.equals : $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4) >>>>>>>> org.joda.time.tz.FixedDateTimeZone.equals : if $z1 == 0
org.joda.time.tz.FixedDateTimeZone.equals : if $z1 == 0 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.equals : $z2 = 0
org.joda.time.tz.FixedDateTimeZone.equals : $z2 = 0 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.equals : return $z2
