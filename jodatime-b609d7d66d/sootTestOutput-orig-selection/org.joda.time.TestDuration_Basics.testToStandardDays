org.joda.time.DateTimeUtils.setCurrentMillisSystem : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>() >>>>>>>> org.joda.time.DateTimeUtils.checkPermission : r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>()
org.joda.time.DateTimeUtils.checkPermission : r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>() >>>>>>>> org.joda.time.DateTimeUtils.checkPermission : if r0 == null
org.joda.time.DateTimeUtils.checkPermission : if r0 == null >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisSystem : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$SystemMillisProvider SYSTEM_MILLIS_PROVIDER>
org.joda.time.DateTimeUtils.setCurrentMillisSystem : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$SystemMillisProvider SYSTEM_MILLIS_PROVIDER> >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisSystem : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0
org.joda.time.DateTimeUtils.setCurrentMillisSystem : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0 >>>>>>>> org.joda.time.DateTimeZone.setDefault : r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>()
org.joda.time.DateTimeZone.setDefault : r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>() >>>>>>>> org.joda.time.DateTimeZone.setDefault : if r1 == null
org.joda.time.DateTimeZone.setDefault : if r1 == null >>>>>>>> org.joda.time.DateTimeZone.setDefault : if r0 != null
org.joda.time.DateTimeZone.setDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.setDefault : $r6 = class "org/joda/time/DateTimeZone"
org.joda.time.DateTimeZone.setDefault : $r6 = class "org/joda/time/DateTimeZone" >>>>>>>> org.joda.time.DateTimeZone.setDefault : r3 = $r6
org.joda.time.DateTimeZone.setDefault : r3 = $r6 >>>>>>>> org.joda.time.DateTimeZone.setDefault : entermonitor $r6
org.joda.time.DateTimeZone.setDefault : entermonitor $r6 >>>>>>>> org.joda.time.DateTimeZone.setDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r0
org.joda.time.DateTimeZone.setDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r0 >>>>>>>> org.joda.time.DateTimeZone.setDefault : exitmonitor r3
org.joda.time.DateTimeZone.setDefault : exitmonitor r3 >>>>>>>> org.joda.time.DateTimeZone.setDefault : goto [?= return]
org.joda.time.DateTimeZone.setDefault : goto [?= return] >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>()
org.joda.time.DateTimeUtils.setCurrentMillisFixed : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>() >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : $r0 = new org.joda.time.DateTimeUtils$FixedMillisProvider
org.joda.time.DateTimeUtils.setCurrentMillisFixed : $r0 = new org.joda.time.DateTimeUtils$FixedMillisProvider >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : specialinvoke $r0.<org.joda.time.DateTimeUtils$FixedMillisProvider: void <init>(long)>(l0)
org.joda.time.DateTimeUtils.setCurrentMillisFixed : specialinvoke $r0.<org.joda.time.DateTimeUtils$FixedMillisProvider: void <init>(long)>(l0) >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0
org.joda.time.DateTimeUtils.setCurrentMillisFixed : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0 >>>>>>>> org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> >>>>>>>> org.joda.time.DateTimeZone.getDefault : if r0 != null
org.joda.time.DateTimeZone.getDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.DateTimeZone.getDefault : return r0 >>>>>>>> org.joda.time.Days.days : lookupswitch(i0) {     case -2147483648:
org.joda.time.Days.days : lookupswitch(i0) {     case -2147483648: >>>>>>>> org.joda.time.Days.days : $r0 = <org.joda.time.Days: org.joda.time.Days ZERO>
org.joda.time.Days.days : $r0 = <org.joda.time.Days: org.joda.time.Days ZERO> >>>>>>>> org.joda.time.Days.days : return $r0
org.joda.time.Days.days : return $r0 >>>>>>>> org.joda.time.Duration.toStandardDays : l0 = virtualinvoke r0.<org.joda.time.Duration: long getStandardDays()>()
org.joda.time.Duration.toStandardDays : l0 = virtualinvoke r0.<org.joda.time.Duration: long getStandardDays()>() >>>>>>>> org.joda.time.Duration.getStandardDays : $l0 = virtualinvoke r0.<org.joda.time.Duration: long getMillis()>()
org.joda.time.Duration.getStandardDays : $l0 = virtualinvoke r0.<org.joda.time.Duration: long getMillis()>() >>>>>>>> org.joda.time.base.BaseDuration.getMillis : $l0 = r0.<org.joda.time.base.BaseDuration: long iMillis>
org.joda.time.base.BaseDuration.getMillis : $l0 = r0.<org.joda.time.base.BaseDuration: long iMillis> >>>>>>>> org.joda.time.base.BaseDuration.getMillis : return $l0
org.joda.time.base.BaseDuration.getMillis : return $l0 >>>>>>>> org.joda.time.Duration.getStandardDays : $l1 = $l0 / 86400000L
org.joda.time.Duration.getStandardDays : $l1 = $l0 / 86400000L >>>>>>>> org.joda.time.Duration.getStandardDays : return $l1
org.joda.time.Duration.getStandardDays : return $l1 >>>>>>>> org.joda.time.Duration.toStandardDays : $i1 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>(l0)
org.joda.time.Duration.toStandardDays : $i1 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>(l0) >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : $b1 = -2147483648L cmp l0
org.joda.time.field.FieldUtils.safeToInt : $b1 = -2147483648L cmp l0 >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : if $b1 > 0
org.joda.time.field.FieldUtils.safeToInt : if $b1 > 0 >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : $b2 = l0 cmp 2147483647L
org.joda.time.field.FieldUtils.safeToInt : $b2 = l0 cmp 2147483647L >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : if $b2 > 0
org.joda.time.field.FieldUtils.safeToInt : if $b2 > 0 >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : $i3 = (int) l0
org.joda.time.field.FieldUtils.safeToInt : $i3 = (int) l0 >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : return $i3
org.joda.time.field.FieldUtils.safeToInt : return $i3 >>>>>>>> org.joda.time.Duration.toStandardDays : $r1 = staticinvoke <org.joda.time.Days: org.joda.time.Days days(int)>($i1)
org.joda.time.Duration.toStandardDays : $r1 = staticinvoke <org.joda.time.Days: org.joda.time.Days days(int)>($i1) >>>>>>>> org.joda.time.Duration.toStandardDays : return $r1
org.joda.time.Duration.toStandardDays : return $r1 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.equals : if r0 != r1
org.joda.time.base.BaseSingleFieldPeriod.equals : if r0 != r1 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.equals : return 1
org.joda.time.base.BaseSingleFieldPeriod.equals : return 1 >>>>>>>> org.joda.time.Days.days : $r1 = <org.joda.time.Days: org.joda.time.Days ONE>
org.joda.time.Days.days : $r1 = <org.joda.time.Days: org.joda.time.Days ONE> >>>>>>>> org.joda.time.Days.days : return $r1
org.joda.time.Days.days : return $r1 >>>>>>>> org.joda.time.Days.days : $r2 = <org.joda.time.Days: org.joda.time.Days TWO>
org.joda.time.Days.days : $r2 = <org.joda.time.Days: org.joda.time.Days TWO> >>>>>>>> org.joda.time.Days.days : return $r2
org.joda.time.Days.days : return $r2 >>>>>>>> org.joda.time.Days.days : $r10 = new org.joda.time.Days
org.joda.time.Days.days : $r10 = new org.joda.time.Days >>>>>>>> org.joda.time.Days.days : specialinvoke $r10.<org.joda.time.Days: void <init>(int)>(i0)
org.joda.time.Days.days : specialinvoke $r10.<org.joda.time.Days: void <init>(int)>(i0) >>>>>>>> org.joda.time.Days.days : return $r10
org.joda.time.Days.days : return $r10 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.equals : $z0 = r1 instanceof org.joda.time.ReadablePeriod
org.joda.time.base.BaseSingleFieldPeriod.equals : $z0 = r1 instanceof org.joda.time.ReadablePeriod >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.equals : if $z0 != 0
org.joda.time.base.BaseSingleFieldPeriod.equals : if $z0 != 0 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.equals : r2 = (org.joda.time.ReadablePeriod) r1
org.joda.time.base.BaseSingleFieldPeriod.equals : r2 = (org.joda.time.ReadablePeriod) r1 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.equals : $r3 = interfaceinvoke r2.<org.joda.time.ReadablePeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.base.BaseSingleFieldPeriod.equals : $r3 = interfaceinvoke r2.<org.joda.time.ReadablePeriod: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Days.getPeriodType : $r1 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType days()>()
org.joda.time.Days.getPeriodType : $r1 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType days()>() >>>>>>>> org.joda.time.PeriodType.days : r0 = <org.joda.time.PeriodType: org.joda.time.PeriodType cDays>
org.joda.time.PeriodType.days : r0 = <org.joda.time.PeriodType: org.joda.time.PeriodType cDays> >>>>>>>> org.joda.time.PeriodType.days : if r0 != null
org.joda.time.PeriodType.days : if r0 != null >>>>>>>> org.joda.time.PeriodType.days : return r0
org.joda.time.PeriodType.days : return r0 >>>>>>>> org.joda.time.Days.getPeriodType : return $r1
org.joda.time.Days.getPeriodType : return $r1 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.equals : $r4 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.base.BaseSingleFieldPeriod.equals : $r4 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.equals : if $r3 != $r4
org.joda.time.base.BaseSingleFieldPeriod.equals : if $r3 != $r4 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.equals : $i0 = interfaceinvoke r2.<org.joda.time.ReadablePeriod: int getValue(int)>(0)
org.joda.time.base.BaseSingleFieldPeriod.equals : $i0 = interfaceinvoke r2.<org.joda.time.ReadablePeriod: int getValue(int)>(0) >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.getValue : if i0 == 0
org.joda.time.base.BaseSingleFieldPeriod.getValue : if i0 == 0 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.getValue : $i1 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>()
org.joda.time.base.BaseSingleFieldPeriod.getValue : $i1 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>() >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.getValue : $i0 = r0.<org.joda.time.base.BaseSingleFieldPeriod: int iPeriod>
org.joda.time.base.BaseSingleFieldPeriod.getValue : $i0 = r0.<org.joda.time.base.BaseSingleFieldPeriod: int iPeriod> >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.getValue : return $i0
org.joda.time.base.BaseSingleFieldPeriod.getValue : return $i0 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.getValue : return $i1
org.joda.time.base.BaseSingleFieldPeriod.getValue : return $i1 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.equals : $i1 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>()
org.joda.time.base.BaseSingleFieldPeriod.equals : $i1 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>() >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.equals : if $i0 != $i1
org.joda.time.base.BaseSingleFieldPeriod.equals : if $i0 != $i1 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.equals : $z1 = 1
org.joda.time.base.BaseSingleFieldPeriod.equals : $z1 = 1 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.equals : goto [?= return $z1]
org.joda.time.base.BaseSingleFieldPeriod.equals : goto [?= return $z1] >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.equals : return $z1
