org.joda.time.DateTimeUtils.setCurrentMillisSystem : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>() >>>>>>>> org.joda.time.DateTimeUtils.checkPermission : r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>()
org.joda.time.DateTimeUtils.checkPermission : r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>() >>>>>>>> org.joda.time.DateTimeUtils.checkPermission : if r0 == null
org.joda.time.DateTimeUtils.checkPermission : if r0 == null >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisSystem : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$SystemMillisProvider SYSTEM_MILLIS_PROVIDER>
org.joda.time.DateTimeUtils.setCurrentMillisSystem : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$SystemMillisProvider SYSTEM_MILLIS_PROVIDER> >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisSystem : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0
org.joda.time.DateTimeUtils.setCurrentMillisSystem : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0 >>>>>>>> org.joda.time.DateTimeZone.setDefault : r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>()
org.joda.time.DateTimeZone.setDefault : r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>() >>>>>>>> org.joda.time.DateTimeZone.setDefault : if r1 == null
org.joda.time.DateTimeZone.setDefault : if r1 == null >>>>>>>> org.joda.time.DateTimeZone.setDefault : if r0 != null
org.joda.time.DateTimeZone.setDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.setDefault : $r6 = class "org/joda/time/DateTimeZone"
org.joda.time.DateTimeZone.setDefault : $r6 = class "org/joda/time/DateTimeZone" >>>>>>>> org.joda.time.DateTimeZone.setDefault : r3 = $r6
org.joda.time.DateTimeZone.setDefault : r3 = $r6 >>>>>>>> org.joda.time.DateTimeZone.setDefault : entermonitor $r6
org.joda.time.DateTimeZone.setDefault : entermonitor $r6 >>>>>>>> org.joda.time.DateTimeZone.setDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r0
org.joda.time.DateTimeZone.setDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r0 >>>>>>>> org.joda.time.DateTimeZone.setDefault : exitmonitor r3
org.joda.time.DateTimeZone.setDefault : exitmonitor r3 >>>>>>>> org.joda.time.DateTimeZone.setDefault : goto [?= return]
org.joda.time.DateTimeZone.setDefault : goto [?= return] >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>()
org.joda.time.DateTimeUtils.setCurrentMillisFixed : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>() >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : $r0 = new org.joda.time.DateTimeUtils$FixedMillisProvider
org.joda.time.DateTimeUtils.setCurrentMillisFixed : $r0 = new org.joda.time.DateTimeUtils$FixedMillisProvider >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : specialinvoke $r0.<org.joda.time.DateTimeUtils$FixedMillisProvider: void <init>(long)>(l0)
org.joda.time.DateTimeUtils.setCurrentMillisFixed : specialinvoke $r0.<org.joda.time.DateTimeUtils$FixedMillisProvider: void <init>(long)>(l0) >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0
org.joda.time.DateTimeUtils.setCurrentMillisFixed : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0 >>>>>>>> org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> >>>>>>>> org.joda.time.DateTimeZone.getDefault : if r0 != null
org.joda.time.DateTimeZone.getDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.DateTimeZone.getDefault : return r0 >>>>>>>> org.joda.time.DateTimeUtils.getChronology : if r0 != null
org.joda.time.DateTimeUtils.getChronology : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getChronology : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>()
org.joda.time.DateTimeUtils.getChronology : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>() >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>()
org.joda.time.chrono.ISOChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>() >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r0)
org.joda.time.chrono.ISOChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r0) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if r0 != null
org.joda.time.chrono.ISOChronology.getInstance : if r0 != null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0)
org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : i0 = $i1 & 63
org.joda.time.chrono.ISOChronology.getInstance : i0 = $i1 & 63 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache>
org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache> >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : r1 = $r5[i0]
org.joda.time.chrono.ISOChronology.getInstance : r1 = $r5[i0] >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if r1 == null
org.joda.time.chrono.ISOChronology.getInstance : if r1 == null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r6 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.ISOChronology.getInstance : $r6 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2
org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null
org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.GregorianChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.BasicChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getBase : return $r1
org.joda.time.chrono.AssembledChronology.getBase : return $r1 >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : r1 = $r2
org.joda.time.chrono.BasicChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : if $r2 == null
org.joda.time.chrono.BasicChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>
org.joda.time.chrono.BasicChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC> >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : return $r4
org.joda.time.chrono.BasicChronology.getZone : return $r4 >>>>>>>> org.joda.time.chrono.GregorianChronology.getZone : return $r1
org.joda.time.chrono.GregorianChronology.getZone : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : return $r3
org.joda.time.chrono.AssembledChronology.getZone : return $r3 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0
org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : return r1
org.joda.time.chrono.ISOChronology.getInstance : return r1 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : return $r1
org.joda.time.chrono.ISOChronology.getInstance : return $r1 >>>>>>>> org.joda.time.DateTimeUtils.getChronology : return $r1
org.joda.time.DateTimeUtils.getChronology : return $r1 >>>>>>>> org.joda.time.chrono.ISOChronology.withUTC : $r1 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC>
org.joda.time.chrono.ISOChronology.withUTC : $r1 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.ISOChronology.withUTC : return $r1
org.joda.time.chrono.ISOChronology.withUTC : return $r1 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i0 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>()
org.joda.time.chrono.BaseChronology.validate : i0 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>() >>>>>>>> org.joda.time.YearMonth.size : return 2
org.joda.time.YearMonth.size : return 2 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i1 = 0
org.joda.time.chrono.BaseChronology.validate : i1 = 0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : if i1 >= i0
org.joda.time.chrono.BaseChronology.validate : if i1 >= i0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i2 = r2[i1]
org.joda.time.chrono.BaseChronology.validate : i2 = r2[i1] >>>>>>>> org.joda.time.chrono.BaseChronology.validate : r3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>(i1)
org.joda.time.chrono.BaseChronology.validate : r3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>(i1) >>>>>>>> org.joda.time.base.AbstractPartial.getField : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.Chronology getChronology()>()
org.joda.time.base.AbstractPartial.getField : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.base.BasePartial.getChronology : $r1 = r0.<org.joda.time.base.BasePartial: org.joda.time.Chronology iChronology>
org.joda.time.base.BasePartial.getChronology : $r1 = r0.<org.joda.time.base.BasePartial: org.joda.time.Chronology iChronology> >>>>>>>> org.joda.time.base.BasePartial.getChronology : return $r1
org.joda.time.base.BasePartial.getChronology : return $r1 >>>>>>>> org.joda.time.base.AbstractPartial.getField : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>(i0, $r1)
org.joda.time.base.AbstractPartial.getField : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>(i0, $r1) >>>>>>>> org.joda.time.YearMonth.getField : lookupswitch(i0) {     case 0:
org.joda.time.YearMonth.getField : lookupswitch(i0) {     case 0: >>>>>>>> org.joda.time.YearMonth.getField : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.YearMonth.getField : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.year : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear>
org.joda.time.chrono.AssembledChronology.year : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.year : return $r1
org.joda.time.chrono.AssembledChronology.year : return $r1 >>>>>>>> org.joda.time.YearMonth.getField : return $r3
org.joda.time.YearMonth.getField : return $r3 >>>>>>>> org.joda.time.base.AbstractPartial.getField : return $r2
org.joda.time.base.AbstractPartial.getField : return $r2 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : $i3 = virtualinvoke r3.<org.joda.time.DateTimeField: int getMinimumValue()>()
org.joda.time.chrono.BaseChronology.validate : $i3 = virtualinvoke r3.<org.joda.time.DateTimeField: int getMinimumValue()>() >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getMinimumValue : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.getMinimumValue : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getMinimumValue : $i0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMinYear()>()
org.joda.time.chrono.BasicYearDateTimeField.getMinimumValue : $i0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMinYear()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getMinYear : return -292275054
org.joda.time.chrono.GregorianChronology.getMinYear : return -292275054 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getMinimumValue : return $i0
org.joda.time.chrono.BasicYearDateTimeField.getMinimumValue : return $i0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : if i2 >= $i3
org.joda.time.chrono.BaseChronology.validate : if i2 >= $i3 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : $i5 = virtualinvoke r3.<org.joda.time.DateTimeField: int getMaximumValue()>()
org.joda.time.chrono.BaseChronology.validate : $i5 = virtualinvoke r3.<org.joda.time.DateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMaxYear()>()
org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMaxYear()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getMaxYear : return 292278993
org.joda.time.chrono.GregorianChronology.getMaxYear : return 292278993 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : return $i0
org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : return $i0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : if i2 <= $i5
org.joda.time.chrono.BaseChronology.validate : if i2 <= $i5 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i1 = i1 + 1
org.joda.time.chrono.BaseChronology.validate : i1 = i1 + 1 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : goto [?= (branch)]
org.joda.time.chrono.BaseChronology.validate : goto [?= (branch)] >>>>>>>> org.joda.time.YearMonth.getField : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.YearMonth.getField : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.monthOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear>
org.joda.time.chrono.AssembledChronology.monthOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.monthOfYear : return $r1
org.joda.time.chrono.AssembledChronology.monthOfYear : return $r1 >>>>>>>> org.joda.time.YearMonth.getField : return $r4
org.joda.time.YearMonth.getField : return $r4 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getMinimumValue : return 1
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getMinimumValue : return 1 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getMaximumValue : $i0 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getMaximumValue : $i0 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getMaximumValue : return $i0
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getMaximumValue : return $i0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i7 = 0
org.joda.time.chrono.BaseChronology.validate : i7 = 0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : if i7 >= i0
org.joda.time.chrono.BaseChronology.validate : if i7 >= i0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i8 = r2[i7]
org.joda.time.chrono.BaseChronology.validate : i8 = r2[i7] >>>>>>>> org.joda.time.chrono.BaseChronology.validate : r12 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>(i7)
org.joda.time.chrono.BaseChronology.validate : r12 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>(i7) >>>>>>>> org.joda.time.chrono.BaseChronology.validate : $i9 = virtualinvoke r12.<org.joda.time.DateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r2)
org.joda.time.chrono.BaseChronology.validate : $i9 = virtualinvoke r12.<org.joda.time.DateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r2) >>>>>>>> org.joda.time.field.BaseDateTimeField.getMinimumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>(r1)
org.joda.time.field.BaseDateTimeField.getMinimumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>(r1) >>>>>>>> org.joda.time.field.BaseDateTimeField.getMinimumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue()>()
org.joda.time.field.BaseDateTimeField.getMinimumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue()>() >>>>>>>> org.joda.time.field.BaseDateTimeField.getMinimumValue : return $i0
org.joda.time.field.BaseDateTimeField.getMinimumValue : return $i0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : if i8 >= $i9
org.joda.time.chrono.BaseChronology.validate : if i8 >= $i9 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : $i11 = virtualinvoke r12.<org.joda.time.DateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r2)
org.joda.time.chrono.BaseChronology.validate : $i11 = virtualinvoke r12.<org.joda.time.DateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r2) >>>>>>>> org.joda.time.field.BaseDateTimeField.getMaximumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>(r1)
org.joda.time.field.BaseDateTimeField.getMaximumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>(r1) >>>>>>>> org.joda.time.field.BaseDateTimeField.getMaximumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue()>()
org.joda.time.field.BaseDateTimeField.getMaximumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.field.BaseDateTimeField.getMaximumValue : return $i0
org.joda.time.field.BaseDateTimeField.getMaximumValue : return $i0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : if i8 <= $i11
org.joda.time.chrono.BaseChronology.validate : if i8 <= $i11 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i7 = i7 + 1
org.joda.time.chrono.BaseChronology.validate : i7 = i7 + 1 >>>>>>>> org.joda.time.YearMonth.monthOfYear : $r1 = new org.joda.time.YearMonth$Property
org.joda.time.YearMonth.monthOfYear : $r1 = new org.joda.time.YearMonth$Property >>>>>>>> org.joda.time.YearMonth.monthOfYear : specialinvoke $r1.<org.joda.time.YearMonth$Property: void <init>(org.joda.time.YearMonth,int)>(r0, 1)
org.joda.time.YearMonth.monthOfYear : specialinvoke $r1.<org.joda.time.YearMonth$Property: void <init>(org.joda.time.YearMonth,int)>(r0, 1) >>>>>>>> org.joda.time.YearMonth.monthOfYear : return $r1
org.joda.time.YearMonth.monthOfYear : return $r1 >>>>>>>> org.joda.time.YearMonth$Property.getField : $r1 = r0.<org.joda.time.YearMonth$Property: org.joda.time.YearMonth iBase>
org.joda.time.YearMonth$Property.getField : $r1 = r0.<org.joda.time.YearMonth$Property: org.joda.time.YearMonth iBase> >>>>>>>> org.joda.time.YearMonth$Property.getField : $i0 = r0.<org.joda.time.YearMonth$Property: int iFieldIndex>
org.joda.time.YearMonth$Property.getField : $i0 = r0.<org.joda.time.YearMonth$Property: int iFieldIndex> >>>>>>>> org.joda.time.YearMonth$Property.getField : $r2 = virtualinvoke $r1.<org.joda.time.YearMonth: org.joda.time.DateTimeField getField(int)>($i0)
org.joda.time.YearMonth$Property.getField : $r2 = virtualinvoke $r1.<org.joda.time.YearMonth: org.joda.time.DateTimeField getField(int)>($i0) >>>>>>>> org.joda.time.YearMonth$Property.getField : return $r2
org.joda.time.YearMonth$Property.getField : return $r2 >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.getName : $r1 = virtualinvoke r0.<org.joda.time.field.AbstractPartialFieldProperty: org.joda.time.DateTimeField getField()>()
org.joda.time.field.AbstractPartialFieldProperty.getName : $r1 = virtualinvoke r0.<org.joda.time.field.AbstractPartialFieldProperty: org.joda.time.DateTimeField getField()>() >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.getName : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: java.lang.String getName()>()
org.joda.time.field.AbstractPartialFieldProperty.getName : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: java.lang.String getName()>() >>>>>>>> org.joda.time.field.BaseDateTimeField.getName : $r1 = r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType iType>
org.joda.time.field.BaseDateTimeField.getName : $r1 = r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType iType> >>>>>>>> org.joda.time.field.BaseDateTimeField.getName : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeFieldType: java.lang.String getName()>()
org.joda.time.field.BaseDateTimeField.getName : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeFieldType: java.lang.String getName()>() >>>>>>>> org.joda.time.DateTimeFieldType.getName : $r1 = r0.<org.joda.time.DateTimeFieldType: java.lang.String iName>
org.joda.time.DateTimeFieldType.getName : $r1 = r0.<org.joda.time.DateTimeFieldType: java.lang.String iName> >>>>>>>> org.joda.time.DateTimeFieldType.getName : return $r1
org.joda.time.DateTimeFieldType.getName : return $r1 >>>>>>>> org.joda.time.field.BaseDateTimeField.getName : return $r2
org.joda.time.field.BaseDateTimeField.getName : return $r2 >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.getName : return $r2
org.joda.time.field.AbstractPartialFieldProperty.getName : return $r2 >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.toString : $r1 = new java.lang.StringBuilder
org.joda.time.field.AbstractPartialFieldProperty.toString : $r1 = new java.lang.StringBuilder >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.toString : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()
org.joda.time.field.AbstractPartialFieldProperty.toString : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.toString : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Property[")
org.joda.time.field.AbstractPartialFieldProperty.toString : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Property[") >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.toString : $r3 = virtualinvoke r0.<org.joda.time.field.AbstractPartialFieldProperty: java.lang.String getName()>()
org.joda.time.field.AbstractPartialFieldProperty.toString : $r3 = virtualinvoke r0.<org.joda.time.field.AbstractPartialFieldProperty: java.lang.String getName()>() >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.toString : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3)
org.joda.time.field.AbstractPartialFieldProperty.toString : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.toString : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]")
org.joda.time.field.AbstractPartialFieldProperty.toString : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]") >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.toString : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()
org.joda.time.field.AbstractPartialFieldProperty.toString : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.toString : return $r6
org.joda.time.field.AbstractPartialFieldProperty.toString : return $r6 >>>>>>>> org.joda.time.YearMonth$Property.getReadablePartial : $r1 = r0.<org.joda.time.YearMonth$Property: org.joda.time.YearMonth iBase>
org.joda.time.YearMonth$Property.getReadablePartial : $r1 = r0.<org.joda.time.YearMonth$Property: org.joda.time.YearMonth iBase> >>>>>>>> org.joda.time.YearMonth$Property.getReadablePartial : return $r1
org.joda.time.YearMonth$Property.getReadablePartial : return $r1 >>>>>>>> org.joda.time.YearMonth$Property.getYearMonth : $r1 = r0.<org.joda.time.YearMonth$Property: org.joda.time.YearMonth iBase>
org.joda.time.YearMonth$Property.getYearMonth : $r1 = r0.<org.joda.time.YearMonth$Property: org.joda.time.YearMonth iBase> >>>>>>>> org.joda.time.YearMonth$Property.getYearMonth : return $r1
org.joda.time.YearMonth$Property.getYearMonth : return $r1 >>>>>>>> org.joda.time.YearMonth$Property.get : $r1 = r0.<org.joda.time.YearMonth$Property: org.joda.time.YearMonth iBase>
org.joda.time.YearMonth$Property.get : $r1 = r0.<org.joda.time.YearMonth$Property: org.joda.time.YearMonth iBase> >>>>>>>> org.joda.time.YearMonth$Property.get : $i0 = r0.<org.joda.time.YearMonth$Property: int iFieldIndex>
org.joda.time.YearMonth$Property.get : $i0 = r0.<org.joda.time.YearMonth$Property: int iFieldIndex> >>>>>>>> org.joda.time.YearMonth$Property.get : $i1 = virtualinvoke $r1.<org.joda.time.YearMonth: int getValue(int)>($i0)
org.joda.time.YearMonth$Property.get : $i1 = virtualinvoke $r1.<org.joda.time.YearMonth: int getValue(int)>($i0) >>>>>>>> org.joda.time.base.BasePartial.getValue : $r1 = r0.<org.joda.time.base.BasePartial: int[] iValues>
org.joda.time.base.BasePartial.getValue : $r1 = r0.<org.joda.time.base.BasePartial: int[] iValues> >>>>>>>> org.joda.time.base.BasePartial.getValue : $i1 = $r1[i0]
org.joda.time.base.BasePartial.getValue : $i1 = $r1[i0] >>>>>>>> org.joda.time.base.BasePartial.getValue : return $i1
org.joda.time.base.BasePartial.getValue : return $i1 >>>>>>>> org.joda.time.YearMonth$Property.get : return $i1
org.joda.time.YearMonth$Property.get : return $i1 >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.getAsString : $i0 = virtualinvoke r0.<org.joda.time.field.AbstractPartialFieldProperty: int get()>()
org.joda.time.field.AbstractPartialFieldProperty.getAsString : $i0 = virtualinvoke r0.<org.joda.time.field.AbstractPartialFieldProperty: int get()>() >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.getAsString : $r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0)
org.joda.time.field.AbstractPartialFieldProperty.getAsString : $r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0) >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.getAsString : return $r1
org.joda.time.field.AbstractPartialFieldProperty.getAsString : return $r1 >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.getAsText : $r1 = virtualinvoke r0.<org.joda.time.field.AbstractPartialFieldProperty: java.lang.String getAsText(java.util.Locale)>(null)
org.joda.time.field.AbstractPartialFieldProperty.getAsText : $r1 = virtualinvoke r0.<org.joda.time.field.AbstractPartialFieldProperty: java.lang.String getAsText(java.util.Locale)>(null) >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.getAsText : $r2 = virtualinvoke r0.<org.joda.time.field.AbstractPartialFieldProperty: org.joda.time.DateTimeField getField()>()
org.joda.time.field.AbstractPartialFieldProperty.getAsText : $r2 = virtualinvoke r0.<org.joda.time.field.AbstractPartialFieldProperty: org.joda.time.DateTimeField getField()>() >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.getAsText : $r3 = virtualinvoke r0.<org.joda.time.field.AbstractPartialFieldProperty: org.joda.time.ReadablePartial getReadablePartial()>()
org.joda.time.field.AbstractPartialFieldProperty.getAsText : $r3 = virtualinvoke r0.<org.joda.time.field.AbstractPartialFieldProperty: org.joda.time.ReadablePartial getReadablePartial()>() >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.getAsText : $i0 = virtualinvoke r0.<org.joda.time.field.AbstractPartialFieldProperty: int get()>()
org.joda.time.field.AbstractPartialFieldProperty.getAsText : $i0 = virtualinvoke r0.<org.joda.time.field.AbstractPartialFieldProperty: int get()>() >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.getAsText : $r4 = virtualinvoke $r2.<org.joda.time.DateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,int,java.util.Locale)>($r3, $i0, r1)
org.joda.time.field.AbstractPartialFieldProperty.getAsText : $r4 = virtualinvoke $r2.<org.joda.time.DateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,int,java.util.Locale)>($r3, $i0, r1) >>>>>>>> org.joda.time.field.BaseDateTimeField.getAsText : $r3 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(int,java.util.Locale)>(i0, r2)
org.joda.time.field.BaseDateTimeField.getAsText : $r3 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(int,java.util.Locale)>(i0, r2) >>>>>>>> org.joda.time.chrono.GJMonthOfYearDateTimeField.getAsText : $r2 = staticinvoke <org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>(r1)
org.joda.time.chrono.GJMonthOfYearDateTimeField.getAsText : $r2 = staticinvoke <org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>(r1) >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.forLocale : if r0 != null
org.joda.time.chrono.GJLocaleSymbols.forLocale : if r0 != null >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.forLocale : r0 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>()
org.joda.time.chrono.GJLocaleSymbols.forLocale : r0 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>() >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.forLocale : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0)
org.joda.time.chrono.GJLocaleSymbols.forLocale : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0) >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.forLocale : i0 = $i1 & 63
org.joda.time.chrono.GJLocaleSymbols.forLocale : i0 = $i1 & 63 >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.forLocale : $r4 = <org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols[] cFastCache>
org.joda.time.chrono.GJLocaleSymbols.forLocale : $r4 = <org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols[] cFastCache> >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.forLocale : r1 = $r4[i0]
org.joda.time.chrono.GJLocaleSymbols.forLocale : r1 = $r4[i0] >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.forLocale : if r1 == null
org.joda.time.chrono.GJLocaleSymbols.forLocale : if r1 == null >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.forLocale : $r5 = r1.<org.joda.time.chrono.GJLocaleSymbols: java.lang.ref.WeakReference iLocale>
org.joda.time.chrono.GJLocaleSymbols.forLocale : $r5 = r1.<org.joda.time.chrono.GJLocaleSymbols: java.lang.ref.WeakReference iLocale> >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.forLocale : $r6 = virtualinvoke $r5.<java.lang.ref.WeakReference: java.lang.Object get()>()
org.joda.time.chrono.GJLocaleSymbols.forLocale : $r6 = virtualinvoke $r5.<java.lang.ref.WeakReference: java.lang.Object get()>() >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.forLocale : if $r6 != r0
org.joda.time.chrono.GJLocaleSymbols.forLocale : if $r6 != r0 >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.forLocale : return r1
org.joda.time.chrono.GJLocaleSymbols.forLocale : return r1 >>>>>>>> org.joda.time.chrono.GJMonthOfYearDateTimeField.getAsText : $r3 = virtualinvoke $r2.<org.joda.time.chrono.GJLocaleSymbols: java.lang.String monthOfYearValueToText(int)>(i0)
org.joda.time.chrono.GJMonthOfYearDateTimeField.getAsText : $r3 = virtualinvoke $r2.<org.joda.time.chrono.GJLocaleSymbols: java.lang.String monthOfYearValueToText(int)>(i0) >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.monthOfYearValueToText : $r1 = r0.<org.joda.time.chrono.GJLocaleSymbols: java.lang.String[] iMonths>
org.joda.time.chrono.GJLocaleSymbols.monthOfYearValueToText : $r1 = r0.<org.joda.time.chrono.GJLocaleSymbols: java.lang.String[] iMonths> >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.monthOfYearValueToText : $r2 = $r1[i0]
org.joda.time.chrono.GJLocaleSymbols.monthOfYearValueToText : $r2 = $r1[i0] >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.monthOfYearValueToText : return $r2
org.joda.time.chrono.GJLocaleSymbols.monthOfYearValueToText : return $r2 >>>>>>>> org.joda.time.chrono.GJMonthOfYearDateTimeField.getAsText : return $r3
org.joda.time.chrono.GJMonthOfYearDateTimeField.getAsText : return $r3 >>>>>>>> org.joda.time.field.BaseDateTimeField.getAsText : return $r3
org.joda.time.field.BaseDateTimeField.getAsText : return $r3 >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.getAsText : return $r4
org.joda.time.field.AbstractPartialFieldProperty.getAsText : return $r4 >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.getAsText : return $r1
org.joda.time.field.AbstractPartialFieldProperty.getAsText : return $r1 >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.getAsShortText : $r1 = virtualinvoke r0.<org.joda.time.field.AbstractPartialFieldProperty: java.lang.String getAsShortText(java.util.Locale)>(null)
org.joda.time.field.AbstractPartialFieldProperty.getAsShortText : $r1 = virtualinvoke r0.<org.joda.time.field.AbstractPartialFieldProperty: java.lang.String getAsShortText(java.util.Locale)>(null) >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.getAsShortText : $r2 = virtualinvoke r0.<org.joda.time.field.AbstractPartialFieldProperty: org.joda.time.DateTimeField getField()>()
org.joda.time.field.AbstractPartialFieldProperty.getAsShortText : $r2 = virtualinvoke r0.<org.joda.time.field.AbstractPartialFieldProperty: org.joda.time.DateTimeField getField()>() >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.getAsShortText : $r3 = virtualinvoke r0.<org.joda.time.field.AbstractPartialFieldProperty: org.joda.time.ReadablePartial getReadablePartial()>()
org.joda.time.field.AbstractPartialFieldProperty.getAsShortText : $r3 = virtualinvoke r0.<org.joda.time.field.AbstractPartialFieldProperty: org.joda.time.ReadablePartial getReadablePartial()>() >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.getAsShortText : $i0 = virtualinvoke r0.<org.joda.time.field.AbstractPartialFieldProperty: int get()>()
org.joda.time.field.AbstractPartialFieldProperty.getAsShortText : $i0 = virtualinvoke r0.<org.joda.time.field.AbstractPartialFieldProperty: int get()>() >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.getAsShortText : $r4 = virtualinvoke $r2.<org.joda.time.DateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,int,java.util.Locale)>($r3, $i0, r1)
org.joda.time.field.AbstractPartialFieldProperty.getAsShortText : $r4 = virtualinvoke $r2.<org.joda.time.DateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,int,java.util.Locale)>($r3, $i0, r1) >>>>>>>> org.joda.time.field.BaseDateTimeField.getAsShortText : $r3 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>(i0, r2)
org.joda.time.field.BaseDateTimeField.getAsShortText : $r3 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>(i0, r2) >>>>>>>> org.joda.time.chrono.GJMonthOfYearDateTimeField.getAsShortText : $r2 = staticinvoke <org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>(r1)
org.joda.time.chrono.GJMonthOfYearDateTimeField.getAsShortText : $r2 = staticinvoke <org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>(r1) >>>>>>>> org.joda.time.chrono.GJMonthOfYearDateTimeField.getAsShortText : $r3 = virtualinvoke $r2.<org.joda.time.chrono.GJLocaleSymbols: java.lang.String monthOfYearValueToShortText(int)>(i0)
org.joda.time.chrono.GJMonthOfYearDateTimeField.getAsShortText : $r3 = virtualinvoke $r2.<org.joda.time.chrono.GJLocaleSymbols: java.lang.String monthOfYearValueToShortText(int)>(i0) >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.monthOfYearValueToShortText : $r1 = r0.<org.joda.time.chrono.GJLocaleSymbols: java.lang.String[] iShortMonths>
org.joda.time.chrono.GJLocaleSymbols.monthOfYearValueToShortText : $r1 = r0.<org.joda.time.chrono.GJLocaleSymbols: java.lang.String[] iShortMonths> >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.monthOfYearValueToShortText : $r2 = $r1[i0]
org.joda.time.chrono.GJLocaleSymbols.monthOfYearValueToShortText : $r2 = $r1[i0] >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.monthOfYearValueToShortText : return $r2
org.joda.time.chrono.GJLocaleSymbols.monthOfYearValueToShortText : return $r2 >>>>>>>> org.joda.time.chrono.GJMonthOfYearDateTimeField.getAsShortText : return $r3
org.joda.time.chrono.GJMonthOfYearDateTimeField.getAsShortText : return $r3 >>>>>>>> org.joda.time.field.BaseDateTimeField.getAsShortText : return $r3
org.joda.time.field.BaseDateTimeField.getAsShortText : return $r3 >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.getAsShortText : return $r4
org.joda.time.field.AbstractPartialFieldProperty.getAsShortText : return $r4 >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.getAsShortText : return $r1
org.joda.time.field.AbstractPartialFieldProperty.getAsShortText : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology.months : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMonths>
org.joda.time.chrono.AssembledChronology.months : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMonths> >>>>>>>> org.joda.time.chrono.AssembledChronology.months : return $r1
org.joda.time.chrono.AssembledChronology.months : return $r1 >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.getDurationField : $r1 = virtualinvoke r0.<org.joda.time.field.AbstractPartialFieldProperty: org.joda.time.DateTimeField getField()>()
org.joda.time.field.AbstractPartialFieldProperty.getDurationField : $r1 = virtualinvoke r0.<org.joda.time.field.AbstractPartialFieldProperty: org.joda.time.DateTimeField getField()>() >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.getDurationField : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>()
org.joda.time.field.AbstractPartialFieldProperty.getDurationField : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>() >>>>>>>> org.joda.time.field.ImpreciseDateTimeField.getDurationField : $r1 = r0.<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField iDurationField>
org.joda.time.field.ImpreciseDateTimeField.getDurationField : $r1 = r0.<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField iDurationField> >>>>>>>> org.joda.time.field.ImpreciseDateTimeField.getDurationField : return $r1
org.joda.time.field.ImpreciseDateTimeField.getDurationField : return $r1 >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.getDurationField : return $r2
org.joda.time.field.AbstractPartialFieldProperty.getDurationField : return $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.years : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iYears>
org.joda.time.chrono.AssembledChronology.years : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iYears> >>>>>>>> org.joda.time.chrono.AssembledChronology.years : return $r1
org.joda.time.chrono.AssembledChronology.years : return $r1 >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.getRangeDurationField : $r1 = virtualinvoke r0.<org.joda.time.field.AbstractPartialFieldProperty: org.joda.time.DateTimeField getField()>()
org.joda.time.field.AbstractPartialFieldProperty.getRangeDurationField : $r1 = virtualinvoke r0.<org.joda.time.field.AbstractPartialFieldProperty: org.joda.time.DateTimeField getField()>() >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.getRangeDurationField : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getRangeDurationField()>()
org.joda.time.field.AbstractPartialFieldProperty.getRangeDurationField : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getRangeDurationField()>() >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getRangeDurationField : $r2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField years()>()
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getRangeDurationField : $r2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField years()>() >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getRangeDurationField : return $r2
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getRangeDurationField : return $r2 >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.getRangeDurationField : return $r2
org.joda.time.field.AbstractPartialFieldProperty.getRangeDurationField : return $r2 >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.getMaximumTextLength : $r2 = virtualinvoke r0.<org.joda.time.field.AbstractPartialFieldProperty: org.joda.time.DateTimeField getField()>()
org.joda.time.field.AbstractPartialFieldProperty.getMaximumTextLength : $r2 = virtualinvoke r0.<org.joda.time.field.AbstractPartialFieldProperty: org.joda.time.DateTimeField getField()>() >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.getMaximumTextLength : $i0 = virtualinvoke $r2.<org.joda.time.DateTimeField: int getMaximumTextLength(java.util.Locale)>(r1)
org.joda.time.field.AbstractPartialFieldProperty.getMaximumTextLength : $i0 = virtualinvoke $r2.<org.joda.time.DateTimeField: int getMaximumTextLength(java.util.Locale)>(r1) >>>>>>>> org.joda.time.chrono.GJMonthOfYearDateTimeField.getMaximumTextLength : $r2 = staticinvoke <org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>(r1)
org.joda.time.chrono.GJMonthOfYearDateTimeField.getMaximumTextLength : $r2 = staticinvoke <org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>(r1) >>>>>>>> org.joda.time.chrono.GJMonthOfYearDateTimeField.getMaximumTextLength : $i0 = virtualinvoke $r2.<org.joda.time.chrono.GJLocaleSymbols: int getMonthMaxTextLength()>()
org.joda.time.chrono.GJMonthOfYearDateTimeField.getMaximumTextLength : $i0 = virtualinvoke $r2.<org.joda.time.chrono.GJLocaleSymbols: int getMonthMaxTextLength()>() >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.getMonthMaxTextLength : $i0 = r0.<org.joda.time.chrono.GJLocaleSymbols: int iMaxMonthLength>
org.joda.time.chrono.GJLocaleSymbols.getMonthMaxTextLength : $i0 = r0.<org.joda.time.chrono.GJLocaleSymbols: int iMaxMonthLength> >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.getMonthMaxTextLength : return $i0
org.joda.time.chrono.GJLocaleSymbols.getMonthMaxTextLength : return $i0 >>>>>>>> org.joda.time.chrono.GJMonthOfYearDateTimeField.getMaximumTextLength : return $i0
org.joda.time.chrono.GJMonthOfYearDateTimeField.getMaximumTextLength : return $i0 >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.getMaximumTextLength : return $i0
org.joda.time.field.AbstractPartialFieldProperty.getMaximumTextLength : return $i0 >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.getMaximumShortTextLength : $r2 = virtualinvoke r0.<org.joda.time.field.AbstractPartialFieldProperty: org.joda.time.DateTimeField getField()>()
org.joda.time.field.AbstractPartialFieldProperty.getMaximumShortTextLength : $r2 = virtualinvoke r0.<org.joda.time.field.AbstractPartialFieldProperty: org.joda.time.DateTimeField getField()>() >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.getMaximumShortTextLength : $i0 = virtualinvoke $r2.<org.joda.time.DateTimeField: int getMaximumShortTextLength(java.util.Locale)>(r1)
org.joda.time.field.AbstractPartialFieldProperty.getMaximumShortTextLength : $i0 = virtualinvoke $r2.<org.joda.time.DateTimeField: int getMaximumShortTextLength(java.util.Locale)>(r1) >>>>>>>> org.joda.time.chrono.GJMonthOfYearDateTimeField.getMaximumShortTextLength : $r2 = staticinvoke <org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>(r1)
org.joda.time.chrono.GJMonthOfYearDateTimeField.getMaximumShortTextLength : $r2 = staticinvoke <org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>(r1) >>>>>>>> org.joda.time.chrono.GJMonthOfYearDateTimeField.getMaximumShortTextLength : $i0 = virtualinvoke $r2.<org.joda.time.chrono.GJLocaleSymbols: int getMonthMaxShortTextLength()>()
org.joda.time.chrono.GJMonthOfYearDateTimeField.getMaximumShortTextLength : $i0 = virtualinvoke $r2.<org.joda.time.chrono.GJLocaleSymbols: int getMonthMaxShortTextLength()>() >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.getMonthMaxShortTextLength : $i0 = r0.<org.joda.time.chrono.GJLocaleSymbols: int iMaxShortMonthLength>
org.joda.time.chrono.GJLocaleSymbols.getMonthMaxShortTextLength : $i0 = r0.<org.joda.time.chrono.GJLocaleSymbols: int iMaxShortMonthLength> >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.getMonthMaxShortTextLength : return $i0
org.joda.time.chrono.GJLocaleSymbols.getMonthMaxShortTextLength : return $i0 >>>>>>>> org.joda.time.chrono.GJMonthOfYearDateTimeField.getMaximumShortTextLength : return $i0
org.joda.time.chrono.GJMonthOfYearDateTimeField.getMaximumShortTextLength : return $i0 >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.getMaximumShortTextLength : return $i0
