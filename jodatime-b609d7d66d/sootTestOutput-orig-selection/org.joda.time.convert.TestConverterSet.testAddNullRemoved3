org.joda.time.convert.ConverterSet.add : r3 = r0.<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter[] iConverters> >>>>>>>> org.joda.time.convert.ConverterSet.add : i0 = lengthof r3
org.joda.time.convert.ConverterSet.add : i0 = lengthof r3 >>>>>>>> org.joda.time.convert.ConverterSet.add : i1 = 0
org.joda.time.convert.ConverterSet.add : i1 = 0 >>>>>>>> org.joda.time.convert.ConverterSet.add : if i1 >= i0
org.joda.time.convert.ConverterSet.add : if i1 >= i0 >>>>>>>> org.joda.time.convert.ConverterSet.add : r4 = r3[i1]
org.joda.time.convert.ConverterSet.add : r4 = r3[i1] >>>>>>>> org.joda.time.convert.ConverterSet.add : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r4)
org.joda.time.convert.ConverterSet.add : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r4) >>>>>>>> org.joda.time.convert.ConverterSet.add : if $z0 == 0
org.joda.time.convert.ConverterSet.add : if $z0 == 0 >>>>>>>> org.joda.time.convert.ConverterSet.add : $r6 = interfaceinvoke r1.<org.joda.time.convert.Converter: java.lang.Class getSupportedType()>()
org.joda.time.convert.ConverterSet.add : $r6 = interfaceinvoke r1.<org.joda.time.convert.Converter: java.lang.Class getSupportedType()>() >>>>>>>> org.joda.time.convert.TestConverterSet$5.getSupportedType : return class "java/lang/Short"
org.joda.time.convert.TestConverterSet$5.getSupportedType : return class "java/lang/Short" >>>>>>>> org.joda.time.convert.ConverterSet.add : $r7 = interfaceinvoke r4.<org.joda.time.convert.Converter: java.lang.Class getSupportedType()>()
org.joda.time.convert.ConverterSet.add : $r7 = interfaceinvoke r4.<org.joda.time.convert.Converter: java.lang.Class getSupportedType()>() >>>>>>>> org.joda.time.convert.TestConverterSet$1.getSupportedType : return class "java/lang/Boolean"
org.joda.time.convert.TestConverterSet$1.getSupportedType : return class "java/lang/Boolean" >>>>>>>> org.joda.time.convert.ConverterSet.add : if $r6 != $r7
org.joda.time.convert.ConverterSet.add : if $r6 != $r7 >>>>>>>> org.joda.time.convert.ConverterSet.add : i1 = i1 + 1
org.joda.time.convert.ConverterSet.add : i1 = i1 + 1 >>>>>>>> org.joda.time.convert.ConverterSet.add : goto [?= (branch)]
org.joda.time.convert.ConverterSet.add : goto [?= (branch)] >>>>>>>> org.joda.time.convert.TestConverterSet$2.getSupportedType : return class "java/lang/Character"
org.joda.time.convert.TestConverterSet$2.getSupportedType : return class "java/lang/Character" >>>>>>>> org.joda.time.convert.TestConverterSet$3.getSupportedType : return class "java/lang/Byte"
org.joda.time.convert.TestConverterSet$3.getSupportedType : return class "java/lang/Byte" >>>>>>>> org.joda.time.convert.TestConverterSet$4.getSupportedType : return class "java/lang/Short"
org.joda.time.convert.TestConverterSet$4.getSupportedType : return class "java/lang/Short" >>>>>>>> org.joda.time.convert.ConverterSet.add : r5 = newarray (org.joda.time.convert.Converter)[i0]
org.joda.time.convert.ConverterSet.add : r5 = newarray (org.joda.time.convert.Converter)[i0] >>>>>>>> org.joda.time.convert.ConverterSet.add : i2 = 0
org.joda.time.convert.ConverterSet.add : i2 = 0 >>>>>>>> org.joda.time.convert.ConverterSet.add : if i2 >= i0
org.joda.time.convert.ConverterSet.add : if i2 >= i0 >>>>>>>> org.joda.time.convert.ConverterSet.add : if i2 == i1
org.joda.time.convert.ConverterSet.add : if i2 == i1 >>>>>>>> org.joda.time.convert.ConverterSet.add : $r8 = r3[i2]
org.joda.time.convert.ConverterSet.add : $r8 = r3[i2] >>>>>>>> org.joda.time.convert.ConverterSet.add : r5[i2] = $r8
org.joda.time.convert.ConverterSet.add : r5[i2] = $r8 >>>>>>>> org.joda.time.convert.ConverterSet.add : goto [?= i2 = i2 + 1]
org.joda.time.convert.ConverterSet.add : goto [?= i2 = i2 + 1] >>>>>>>> org.joda.time.convert.ConverterSet.add : i2 = i2 + 1
org.joda.time.convert.ConverterSet.add : i2 = i2 + 1 >>>>>>>> org.joda.time.convert.ConverterSet.add : r5[i2] = r1
org.joda.time.convert.ConverterSet.add : r5[i2] = r1 >>>>>>>> org.joda.time.convert.ConverterSet.add : if r2 == null
org.joda.time.convert.ConverterSet.add : if r2 == null >>>>>>>> org.joda.time.convert.ConverterSet.add : $r9 = new org.joda.time.convert.ConverterSet
org.joda.time.convert.ConverterSet.add : $r9 = new org.joda.time.convert.ConverterSet >>>>>>>> org.joda.time.convert.ConverterSet.add : specialinvoke $r9.<org.joda.time.convert.ConverterSet: void <init>(org.joda.time.convert.Converter[])>(r5)
org.joda.time.convert.ConverterSet.add : specialinvoke $r9.<org.joda.time.convert.ConverterSet: void <init>(org.joda.time.convert.Converter[])>(r5) >>>>>>>> org.joda.time.convert.ConverterSet.add : return $r9
org.joda.time.convert.ConverterSet.add : return $r9 >>>>>>>> org.joda.time.convert.ConverterSet.size : $r1 = r0.<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter[] iConverters>
org.joda.time.convert.ConverterSet.size : $r1 = r0.<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter[] iConverters> >>>>>>>> org.joda.time.convert.ConverterSet.size : $i0 = lengthof $r1
org.joda.time.convert.ConverterSet.size : $i0 = lengthof $r1 >>>>>>>> org.joda.time.convert.ConverterSet.size : return $i0
