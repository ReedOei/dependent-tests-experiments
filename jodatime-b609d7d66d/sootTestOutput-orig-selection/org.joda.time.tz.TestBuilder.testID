org.joda.time.DateTimeZone.setDefault : r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>() >>>>>>>> org.joda.time.DateTimeZone.setDefault : if r1 == null
org.joda.time.DateTimeZone.setDefault : if r1 == null >>>>>>>> org.joda.time.DateTimeZone.setDefault : if r0 != null
org.joda.time.DateTimeZone.setDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.setDefault : $r6 = class "org/joda/time/DateTimeZone"
org.joda.time.DateTimeZone.setDefault : $r6 = class "org/joda/time/DateTimeZone" >>>>>>>> org.joda.time.DateTimeZone.setDefault : r3 = $r6
org.joda.time.DateTimeZone.setDefault : r3 = $r6 >>>>>>>> org.joda.time.DateTimeZone.setDefault : entermonitor $r6
org.joda.time.DateTimeZone.setDefault : entermonitor $r6 >>>>>>>> org.joda.time.DateTimeZone.setDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r0
org.joda.time.DateTimeZone.setDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r0 >>>>>>>> org.joda.time.DateTimeZone.setDefault : exitmonitor r3
org.joda.time.DateTimeZone.setDefault : exitmonitor r3 >>>>>>>> org.joda.time.DateTimeZone.setDefault : goto [?= return]
org.joda.time.DateTimeZone.setDefault : goto [?= return] >>>>>>>> org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> >>>>>>>> org.joda.time.DateTimeZone.getDefault : if r0 != null
org.joda.time.DateTimeZone.getDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.DateTimeZone.getDefault : return r0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addCutover : $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets>
org.joda.time.tz.DateTimeZoneBuilder.addCutover : $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addCutover : $i6 = virtualinvoke $r3.<java.util.ArrayList: int size()>()
org.joda.time.tz.DateTimeZoneBuilder.addCutover : $i6 = virtualinvoke $r3.<java.util.ArrayList: int size()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addCutover : if $i6 <= 0
org.joda.time.tz.DateTimeZoneBuilder.addCutover : if $i6 <= 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addCutover : $r8 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets>
org.joda.time.tz.DateTimeZoneBuilder.addCutover : $r8 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addCutover : $r9 = new org.joda.time.tz.DateTimeZoneBuilder$RuleSet
org.joda.time.tz.DateTimeZoneBuilder.addCutover : $r9 = new org.joda.time.tz.DateTimeZoneBuilder$RuleSet >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addCutover : specialinvoke $r9.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <init>()>()
org.joda.time.tz.DateTimeZoneBuilder.addCutover : specialinvoke $r9.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <init>()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addCutover : virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>($r9)
org.joda.time.tz.DateTimeZoneBuilder.addCutover : virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>($r9) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addCutover : return r0
org.joda.time.tz.DateTimeZoneBuilder.addCutover : return r0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.setStandardOffset : $r1 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder$RuleSet getLastRuleSet()>()
org.joda.time.tz.DateTimeZoneBuilder.setStandardOffset : $r1 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder$RuleSet getLastRuleSet()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets>
org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>()
org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : if $i0 != 0
org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : if $i0 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets>
org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : $r4 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets>
org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : $r4 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : $i1 = virtualinvoke $r4.<java.util.ArrayList: int size()>()
org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : $i1 = virtualinvoke $r4.<java.util.ArrayList: int size()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : $i2 = $i1 - 1
org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : $i2 = $i1 - 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : $r5 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>($i2)
org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : $r5 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>($i2) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : $r6 = (org.joda.time.tz.DateTimeZoneBuilder$RuleSet) $r5
org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : $r6 = (org.joda.time.tz.DateTimeZoneBuilder$RuleSet) $r5 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : return $r6
org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : return $r6 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.setStandardOffset : virtualinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void setStandardOffset(int)>(i0)
org.joda.time.tz.DateTimeZoneBuilder.setStandardOffset : virtualinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void setStandardOffset(int)>(i0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.setStandardOffset : r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset> = i0
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.setStandardOffset : r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset> = i0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.setStandardOffset : return r0
org.joda.time.tz.DateTimeZoneBuilder.setStandardOffset : return r0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.setFixedSavings : $r2 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder$RuleSet getLastRuleSet()>()
org.joda.time.tz.DateTimeZoneBuilder.setFixedSavings : $r2 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder$RuleSet getLastRuleSet()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.setFixedSavings : virtualinvoke $r2.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void setFixedSavings(java.lang.String,int)>(r1, i0)
org.joda.time.tz.DateTimeZoneBuilder.setFixedSavings : virtualinvoke $r2.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void setFixedSavings(java.lang.String,int)>(r1, i0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.setFixedSavings : r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String iInitialNameKey> = r1
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.setFixedSavings : r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String iInitialNameKey> = r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.setFixedSavings : r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iInitialSaveMillis> = i0
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.setFixedSavings : r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iInitialSaveMillis> = i0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.setFixedSavings : return r0
org.joda.time.tz.DateTimeZoneBuilder.setFixedSavings : return r0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addCutover : $r4 = new org.joda.time.tz.DateTimeZoneBuilder$OfYear
org.joda.time.tz.DateTimeZoneBuilder.addCutover : $r4 = new org.joda.time.tz.DateTimeZoneBuilder$OfYear >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addCutover : specialinvoke $r4.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void <init>(char,int,int,int,boolean,int)>(c1, i2, i3, i4, z0, i5)
org.joda.time.tz.DateTimeZoneBuilder.addCutover : specialinvoke $r4.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void <init>(char,int,int,int,boolean,int)>(c1, i2, i3, i4, z0, i5) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addCutover : r1 = $r4
org.joda.time.tz.DateTimeZoneBuilder.addCutover : r1 = $r4 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addCutover : $r5 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets>
org.joda.time.tz.DateTimeZoneBuilder.addCutover : $r5 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addCutover : $r6 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets>
org.joda.time.tz.DateTimeZoneBuilder.addCutover : $r6 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addCutover : $i7 = virtualinvoke $r6.<java.util.ArrayList: int size()>()
org.joda.time.tz.DateTimeZoneBuilder.addCutover : $i7 = virtualinvoke $r6.<java.util.ArrayList: int size()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addCutover : $i8 = $i7 - 1
org.joda.time.tz.DateTimeZoneBuilder.addCutover : $i8 = $i7 - 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addCutover : $r7 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>($i8)
org.joda.time.tz.DateTimeZoneBuilder.addCutover : $r7 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>($i8) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addCutover : r2 = (org.joda.time.tz.DateTimeZoneBuilder$RuleSet) $r7
org.joda.time.tz.DateTimeZoneBuilder.addCutover : r2 = (org.joda.time.tz.DateTimeZoneBuilder$RuleSet) $r7 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addCutover : virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void setUpperLimit(int,org.joda.time.tz.DateTimeZoneBuilder$OfYear)>(i0, r1)
org.joda.time.tz.DateTimeZoneBuilder.addCutover : virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void setUpperLimit(int,org.joda.time.tz.DateTimeZoneBuilder$OfYear)>(i0, r1) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.setUpperLimit : r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iUpperYear> = i0
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.setUpperLimit : r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iUpperYear> = i0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.setUpperLimit : r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$OfYear iUpperOfYear> = r1
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.setUpperLimit : r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$OfYear iUpperOfYear> = r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : if i1 > i2
org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : if i1 > i2 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : $r5 = new org.joda.time.tz.DateTimeZoneBuilder$OfYear
org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : $r5 = new org.joda.time.tz.DateTimeZoneBuilder$OfYear >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : specialinvoke $r5.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void <init>(char,int,int,int,boolean,int)>(c3, i4, i5, i6, z0, i7)
org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : specialinvoke $r5.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void <init>(char,int,int,int,boolean,int)>(c3, i4, i5, i6, z0, i7) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : r2 = $r5
org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : r2 = $r5 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : $r6 = new org.joda.time.tz.DateTimeZoneBuilder$Recurrence
org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : $r6 = new org.joda.time.tz.DateTimeZoneBuilder$Recurrence >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : specialinvoke $r6.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: void <init>(org.joda.time.tz.DateTimeZoneBuilder$OfYear,java.lang.String,int)>(r2, r1, i0)
org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : specialinvoke $r6.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: void <init>(org.joda.time.tz.DateTimeZoneBuilder$OfYear,java.lang.String,int)>(r2, r1, i0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : r3 = $r6
org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : r3 = $r6 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : $r7 = new org.joda.time.tz.DateTimeZoneBuilder$Rule
org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : $r7 = new org.joda.time.tz.DateTimeZoneBuilder$Rule >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : specialinvoke $r7.<org.joda.time.tz.DateTimeZoneBuilder$Rule: void <init>(org.joda.time.tz.DateTimeZoneBuilder$Recurrence,int,int)>(r3, i1, i2)
org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : specialinvoke $r7.<org.joda.time.tz.DateTimeZoneBuilder$Rule: void <init>(org.joda.time.tz.DateTimeZoneBuilder$Recurrence,int,int)>(r3, i1, i2) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : r4 = $r7
org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : r4 = $r7 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : $r8 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder$RuleSet getLastRuleSet()>()
org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : $r8 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder$RuleSet getLastRuleSet()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : virtualinvoke $r8.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void addRule(org.joda.time.tz.DateTimeZoneBuilder$Rule)>(r4)
org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : virtualinvoke $r8.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void addRule(org.joda.time.tz.DateTimeZoneBuilder$Rule)>(r4) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.addRule : $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.addRule : $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.addRule : $z0 = virtualinvoke $r2.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1)
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.addRule : $z0 = virtualinvoke $r2.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.addRule : if $z0 != 0
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.addRule : if $z0 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.addRule : $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.addRule : $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.addRule : virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r1)
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.addRule : virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r1) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : return r0
org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : return r0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if r1 != null
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if r1 != null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r7 = new java.util.ArrayList
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r7 = new java.util.ArrayList >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : specialinvoke $r7.<java.util.ArrayList: void <init>()>()
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : specialinvoke $r7.<java.util.ArrayList: void <init>()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : r2 = $r7
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : r2 = $r7 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : r3 = null
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : r3 = null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : l0 = -9223372036854775808L
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : l0 = -9223372036854775808L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : z1 = 0
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : z1 = 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r8 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets>
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r8 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : i1 = virtualinvoke $r8.<java.util.ArrayList: int size()>()
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : i1 = virtualinvoke $r8.<java.util.ArrayList: int size()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : i2 = 0
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : i2 = 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if i2 >= i1
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if i2 >= i1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r9 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets>
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r9 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r10 = virtualinvoke $r9.<java.util.ArrayList: java.lang.Object get(int)>(i2)
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r10 = virtualinvoke $r9.<java.util.ArrayList: java.lang.Object get(int)>(i2) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : r4 = (org.joda.time.tz.DateTimeZoneBuilder$RuleSet) $r10
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : r4 = (org.joda.time.tz.DateTimeZoneBuilder$RuleSet) $r10 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : r5 = virtualinvoke r4.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>(l0)
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : r5 = virtualinvoke r4.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>(l0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $r6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String iInitialNameKey>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $r6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String iInitialNameKey> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : if $r6 == null
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : if $r6 == null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $r7 = new org.joda.time.tz.DateTimeZoneBuilder$Transition
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $r7 = new org.joda.time.tz.DateTimeZoneBuilder$Transition >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $r8 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String iInitialNameKey>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $r8 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String iInitialNameKey> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $i3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $i3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $i4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iInitialSaveMillis>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $i4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iInitialSaveMillis> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $i5 = $i3 + $i4
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $i5 = $i3 + $i4 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $i6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $i6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : specialinvoke $r7.<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,java.lang.String,int,int)>(l0, $r8, $i5, $i6)
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : specialinvoke $r7.<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,java.lang.String,int,int)>(l0, $r8, $i5, $i6) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : return $r7
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : return $r7 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if r5 != null
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if r5 != null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>(r2, r5)
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>(r2, r5) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : i0 = virtualinvoke r1.<java.util.ArrayList: int size()>()
org.joda.time.tz.DateTimeZoneBuilder.addTransition : i0 = virtualinvoke r1.<java.util.ArrayList: int size()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : if i0 != 0
org.joda.time.tz.DateTimeZoneBuilder.addTransition : if i0 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r2)
org.joda.time.tz.DateTimeZoneBuilder.addTransition : virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r2) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : return 1
org.joda.time.tz.DateTimeZoneBuilder.addTransition : return 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : l3 = virtualinvoke r5.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>()
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : l3 = virtualinvoke r5.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.getMillis : $l0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long iMillis>
org.joda.time.tz.DateTimeZoneBuilder$Transition.getMillis : $l0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long iMillis> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.getMillis : return $l0
org.joda.time.tz.DateTimeZoneBuilder$Transition.getMillis : return $l0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : i4 = virtualinvoke r5.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getSaveMillis()>()
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : i4 = virtualinvoke r5.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getSaveMillis()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.getSaveMillis : $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int iWallOffset>
org.joda.time.tz.DateTimeZoneBuilder$Transition.getSaveMillis : $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int iWallOffset> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.getSaveMillis : $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int iStandardOffset>
org.joda.time.tz.DateTimeZoneBuilder$Transition.getSaveMillis : $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int iStandardOffset> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.getSaveMillis : $i2 = $i0 - $i1
org.joda.time.tz.DateTimeZoneBuilder$Transition.getSaveMillis : $i2 = $i0 - $i1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.getSaveMillis : return $i2
org.joda.time.tz.DateTimeZoneBuilder$Transition.getSaveMillis : return $i2 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r11 = new org.joda.time.tz.DateTimeZoneBuilder$RuleSet
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r11 = new org.joda.time.tz.DateTimeZoneBuilder$RuleSet >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : specialinvoke $r11.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <init>(org.joda.time.tz.DateTimeZoneBuilder$RuleSet)>(r4)
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : specialinvoke $r11.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <init>(org.joda.time.tz.DateTimeZoneBuilder$RuleSet)>(r4) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : r12 = $r11
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : r12 = $r11 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r13 = virtualinvoke r12.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>(l3, i4)
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r13 = virtualinvoke r12.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>(l3, i4) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>() >>>>>>>> org.joda.time.chrono.ISOChronology.getInstanceUTC : $r0 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC>
org.joda.time.chrono.ISOChronology.getInstanceUTC : $r0 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.ISOChronology.getInstanceUTC : return $r0
org.joda.time.chrono.ISOChronology.getInstanceUTC : return $r0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : r2 = null
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : r2 = null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : l2 = 9223372036854775807L
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : l2 = 9223372036854775807L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $r5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $r5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : r3 = virtualinvoke $r5.<java.util.ArrayList: java.util.Iterator iterator()>()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : r3 = virtualinvoke $r5.<java.util.ArrayList: java.util.Iterator iterator()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : if $z0 == 0
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : if $z0 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : if r2 != null
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : if r2 != null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : return null
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : return null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : r14 = $r13
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : r14 = $r13 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if $r13 == null
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if $r13 == null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : l0 = virtualinvoke r12.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: long getUpperLimit(int)>(i4)
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : l0 = virtualinvoke r12.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: long getUpperLimit(int)>(i4) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.getUpperLimit : $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iUpperYear>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.getUpperLimit : $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iUpperYear> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.getUpperLimit : if $i1 != 2147483647
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.getUpperLimit : if $i1 != 2147483647 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.getUpperLimit : $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$OfYear iUpperOfYear>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.getUpperLimit : $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$OfYear iUpperOfYear> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.getUpperLimit : $i2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iUpperYear>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.getUpperLimit : $i2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iUpperYear> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.getUpperLimit : $i3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.getUpperLimit : $i3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.getUpperLimit : $l4 = virtualinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>($i2, $i3, i0)
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.getUpperLimit : $l4 = virtualinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>($i2, $i3, i0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : $c5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : $c5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : if $c5 != 119
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : if $c5 != 119 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : i3 = i1 + i2
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : i3 = i1 + i2 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : goto [?= r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>()]
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : goto [?= r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>()] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.year : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear>
org.joda.time.chrono.AssembledChronology.year : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.year : return $r1
org.joda.time.chrono.AssembledChronology.year : return $r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : l4 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>(0L, i0)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : l4 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>(0L, i0) >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.set : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : $i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMinYear()>()
org.joda.time.chrono.BasicYearDateTimeField.set : $i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMinYear()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getMinYear : return -292275054
org.joda.time.chrono.GregorianChronology.getMinYear : return -292275054 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : $r2 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.set : $r2 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : $i3 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getMaxYear()>()
org.joda.time.chrono.BasicYearDateTimeField.set : $i3 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getMaxYear()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getMaxYear : return 292278993
org.joda.time.chrono.GregorianChronology.getMaxYear : return 292278993 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i2, $i3)
org.joda.time.chrono.BasicYearDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i2, $i3) >>>>>>>> org.joda.time.field.FieldUtils.verifyValueBounds : if i0 < i1
org.joda.time.field.FieldUtils.verifyValueBounds : if i0 < i1 >>>>>>>> org.joda.time.field.FieldUtils.verifyValueBounds : if i0 <= i2
org.joda.time.field.FieldUtils.verifyValueBounds : if i0 <= i2 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : $r3 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.set : $r3 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : $l4 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: long setYear(long,int)>(l0, i1)
org.joda.time.chrono.BasicYearDateTimeField.set : $l4 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: long setYear(long,int)>(l0, i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicGJChronology.setYear : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getAverageMillisPerYearDividedByTwo()>()
org.joda.time.chrono.BasicChronology.getYear : l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getAverageMillisPerYearDividedByTwo()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getAverageMillisPerYearDividedByTwo : return 15778476000L
org.joda.time.chrono.GregorianChronology.getAverageMillisPerYearDividedByTwo : return 15778476000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $l7 = l0 >> 1
org.joda.time.chrono.BasicChronology.getYear : $l7 = l0 >> 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $l8 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getApproxMillisAtEpochDividedByTwo()>()
org.joda.time.chrono.BasicChronology.getYear : $l8 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getApproxMillisAtEpochDividedByTwo()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getApproxMillisAtEpochDividedByTwo : return 31083597720000L
org.joda.time.chrono.GregorianChronology.getApproxMillisAtEpochDividedByTwo : return 31083597720000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l2 = $l7 + $l8
org.joda.time.chrono.BasicChronology.getYear : l2 = $l7 + $l8 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $b9 = l2 cmp 0L
org.joda.time.chrono.BasicChronology.getYear : $b9 = l2 cmp 0L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $b9 >= 0
org.joda.time.chrono.BasicChronology.getYear : if $b9 >= 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $l11 = l2 / l1
org.joda.time.chrono.BasicChronology.getYear : $l11 = l2 / l1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : i3 = (int) $l11
org.joda.time.chrono.BasicChronology.getYear : i3 = (int) $l11 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i3)
org.joda.time.chrono.BasicChronology.getYear : l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i3) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMillis : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>(i0)
org.joda.time.chrono.BasicChronology.getYearMillis : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $r2 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache>
org.joda.time.chrono.BasicChronology.getYearInfo : $r2 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $i1 = i0 & 1023
org.joda.time.chrono.BasicChronology.getYearInfo : $i1 = i0 & 1023 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : r1 = $r2[$i1]
org.joda.time.chrono.BasicChronology.getYearInfo : r1 = $r2[$i1] >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : if r1 == null
org.joda.time.chrono.BasicChronology.getYearInfo : if r1 == null >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $i2 = r1.<org.joda.time.chrono.BasicChronology$YearInfo: int iYear>
org.joda.time.chrono.BasicChronology.getYearInfo : $i2 = r1.<org.joda.time.chrono.BasicChronology$YearInfo: int iYear> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : if $i2 == i0
org.joda.time.chrono.BasicChronology.getYearInfo : if $i2 == i0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : return r1
org.joda.time.chrono.BasicChronology.getYearInfo : return r1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMillis : $l1 = $r1.<org.joda.time.chrono.BasicChronology$YearInfo: long iFirstDayMillis>
org.joda.time.chrono.BasicChronology.getYearMillis : $l1 = $r1.<org.joda.time.chrono.BasicChronology$YearInfo: long iFirstDayMillis> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMillis : return $l1
org.joda.time.chrono.BasicChronology.getYearMillis : return $l1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l5 = l0 - l4
org.joda.time.chrono.BasicChronology.getYear : l5 = l0 - l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $b12 = l5 cmp 0L
org.joda.time.chrono.BasicChronology.getYear : $b12 = l5 cmp 0L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $b12 >= 0
org.joda.time.chrono.BasicChronology.getYear : if $b12 >= 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $b13 = l5 cmp 31536000000L
org.joda.time.chrono.BasicChronology.getYear : $b13 = l5 cmp 31536000000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $b13 < 0
org.joda.time.chrono.BasicChronology.getYear : if $b13 < 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : return i3
org.joda.time.chrono.BasicChronology.getYear : return i3 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : i3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getDayOfYear(long,int)>(l0, i2)
org.joda.time.chrono.BasicGJChronology.setYear : i3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getDayOfYear(long,int)>(l0, i2) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1)
org.joda.time.chrono.BasicChronology.getDayOfYear : l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : $l3 = l0 - l2
org.joda.time.chrono.BasicChronology.getDayOfYear : $l3 = l0 - l2 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : $l4 = $l3 / 86400000L
org.joda.time.chrono.BasicChronology.getDayOfYear : $l4 = $l3 / 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : $i5 = (int) $l4
org.joda.time.chrono.BasicChronology.getDayOfYear : $i5 = (int) $l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : $i6 = $i5 + 1
org.joda.time.chrono.BasicChronology.getDayOfYear : $i6 = $i5 + 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : return $i6
org.joda.time.chrono.BasicChronology.getDayOfYear : return $i6 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : i4 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getMillisOfDay(long)>(l0)
org.joda.time.chrono.BasicGJChronology.setYear : i4 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getMillisOfDay(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : $b1 = l0 cmp 0L
org.joda.time.chrono.BasicChronology.getMillisOfDay : $b1 = l0 cmp 0L >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : if $b1 < 0
org.joda.time.chrono.BasicChronology.getMillisOfDay : if $b1 < 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : $l2 = l0 % 86400000L
org.joda.time.chrono.BasicChronology.getMillisOfDay : $l2 = l0 % 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : $i3 = (int) $l2
org.joda.time.chrono.BasicChronology.getMillisOfDay : $i3 = (int) $l2 >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : return $i3
org.joda.time.chrono.BasicChronology.getMillisOfDay : return $i3 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : if i3 <= 59
org.joda.time.chrono.BasicGJChronology.setYear : if i3 <= 59 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : l5 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMonthDayMillis(int,int,int)>(i1, 1, i3)
org.joda.time.chrono.BasicGJChronology.setYear : l5 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMonthDayMillis(int,int,int)>(i1, 1, i3) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0)
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i0, i1)
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i0, i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0)
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0) >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : $i1 = i0 & 3
org.joda.time.chrono.GregorianChronology.isLeapYear : $i1 = i0 & 3 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : if $i1 != 0
org.joda.time.chrono.GregorianChronology.isLeapYear : if $i1 != 0 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : $z0 = 0
org.joda.time.chrono.GregorianChronology.isLeapYear : $z0 = 0 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : return $z0
org.joda.time.chrono.GregorianChronology.isLeapYear : return $z0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : if $z0 == 0
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $r2 = <org.joda.time.chrono.BasicGJChronology: long[] MIN_TOTAL_MILLIS_BY_MONTH_ARRAY>
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $r2 = <org.joda.time.chrono.BasicGJChronology: long[] MIN_TOTAL_MILLIS_BY_MONTH_ARRAY> >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $i4 = i1 - 1
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $i4 = i1 - 1 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $l5 = $r2[$i4]
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $l5 = $r2[$i4] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : return $l5
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : return $l5 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l5 = l3 + $l4
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l5 = l3 + $l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $i6 = i2 - 1
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $i6 = i2 - 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l7 = (long) $i6
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l7 = (long) $i6 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l8 = $l7 * 86400000L
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l8 = $l7 * 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l9 = l5 + $l8
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l9 = l5 + $l8 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : return $l9
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : return $l9 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : $l6 = (long) i4
org.joda.time.chrono.BasicGJChronology.setYear : $l6 = (long) i4 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : l7 = l5 + $l6
org.joda.time.chrono.BasicGJChronology.setYear : l7 = l5 + $l6 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : return l7
org.joda.time.chrono.BasicGJChronology.setYear : return l7 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : return $l4
org.joda.time.chrono.BasicYearDateTimeField.set : return $l4 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.monthOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear>
org.joda.time.chrono.AssembledChronology.monthOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.monthOfYear : return $r1
org.joda.time.chrono.AssembledChronology.monthOfYear : return $r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : $i7 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMonthOfYear>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : $i7 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMonthOfYear> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : l8 = virtualinvoke $r3.<org.joda.time.DateTimeField: long set(long,int)>(l4, $i7)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : l8 = virtualinvoke $r3.<org.joda.time.DateTimeField: long set(long,int)>(l4, $i7) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $i5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $i5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, 1, $i5)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, 1, $i5) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : i3 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int)>(l0, i2)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : i3 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int)>(l0, i2) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i1)
org.joda.time.chrono.BasicChronology.getDayOfMonth : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMillis(int)>(i1)
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMillis(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l4 = l0 - $l3
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l4 = l0 - $l3 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l5 = $l4 >> 10
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l5 = $l4 >> 10 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : i2 = (int) $l5
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : i2 = (int) $l5 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i1)
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if $z0 == 0
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 15271875
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 15271875 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 7593750
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 7593750 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 2615625
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 2615625 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 1
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 1 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : goto [?= return $b6]
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : goto [?= return $b6] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : return $b6
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : return $b6 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l0, i1, i2)
org.joda.time.chrono.BasicChronology.getDayOfMonth : $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l0, i1, i2) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1)
org.joda.time.chrono.BasicChronology.getDayOfMonth : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i1, i2)
org.joda.time.chrono.BasicChronology.getDayOfMonth : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i1, i2) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : l5 = l3 + $l4
org.joda.time.chrono.BasicChronology.getDayOfMonth : l5 = l3 + $l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $l6 = l0 - l5
org.joda.time.chrono.BasicChronology.getDayOfMonth : $l6 = l0 - l5 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $l7 = $l6 / 86400000L
org.joda.time.chrono.BasicChronology.getDayOfMonth : $l7 = $l6 / 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $i8 = (int) $l7
org.joda.time.chrono.BasicChronology.getDayOfMonth : $i8 = (int) $l7 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $i9 = $i8 + 1
org.joda.time.chrono.BasicChronology.getDayOfMonth : $i9 = $i8 + 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : return $i9
org.joda.time.chrono.BasicChronology.getDayOfMonth : return $i9 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : return $i3
org.joda.time.chrono.BasicChronology.getDayOfMonth : return $i3 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : i4 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>(i2, i1)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : i4 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>(i2, i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0)
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : if $z0 == 0
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $r2 = <org.joda.time.chrono.BasicGJChronology: int[] MIN_DAYS_PER_MONTH_ARRAY>
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $r2 = <org.joda.time.chrono.BasicGJChronology: int[] MIN_DAYS_PER_MONTH_ARRAY> >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i4 = i1 - 1
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i4 = i1 - 1 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i5 = $r2[$i4]
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i5 = $r2[$i4] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : return $i5
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : return $i5 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : if i3 <= i4
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : if i3 <= i4 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r4 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r4 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $l6 = virtualinvoke $r4.<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>(i2, i1, i3)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $l6 = virtualinvoke $r4.<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>(i2, i1, i3) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $i7 = virtualinvoke $r5.<org.joda.time.chrono.BasicChronology: int getMillisOfDay(long)>(l0)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $i7 = virtualinvoke $r5.<org.joda.time.chrono.BasicChronology: int getMillisOfDay(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : $l4 = l0 + 1L
org.joda.time.chrono.BasicChronology.getMillisOfDay : $l4 = l0 + 1L >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : $l5 = $l4 % 86400000L
org.joda.time.chrono.BasicChronology.getMillisOfDay : $l5 = $l4 % 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : $i6 = (int) $l5
org.joda.time.chrono.BasicChronology.getMillisOfDay : $i6 = (int) $l5 >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : $i7 = 86399999 + $i6
org.joda.time.chrono.BasicChronology.getMillisOfDay : $i7 = 86399999 + $i6 >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : return $i7
org.joda.time.chrono.BasicChronology.getMillisOfDay : return $i7 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $l8 = (long) $i7
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $l8 = (long) $i7 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $l9 = $l6 + $l8
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $l9 = $l6 + $l8 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : return $l9
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : return $l9 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.millisOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay>
org.joda.time.chrono.AssembledChronology.millisOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.millisOfDay : return $r1
org.joda.time.chrono.AssembledChronology.millisOfDay : return $r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : $i9 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMillisOfDay>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : $i9 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMillisOfDay> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : l10 = virtualinvoke $r4.<org.joda.time.DateTimeField: long set(long,int)>(l8, $i9)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : l10 = virtualinvoke $r4.<org.joda.time.DateTimeField: long set(long,int)>(l8, $i9) >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $i2 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int getMinimumValue()>()
org.joda.time.field.PreciseDateTimeField.set : $i2 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int getMinimumValue()>() >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getMinimumValue : return 0
org.joda.time.field.PreciseDurationDateTimeField.getMinimumValue : return 0 >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $i3 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int getMaximumValue()>()
org.joda.time.field.PreciseDateTimeField.set : $i3 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.field.PreciseDateTimeField.getMaximumValue : $i0 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange>
org.joda.time.field.PreciseDateTimeField.getMaximumValue : $i0 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange> >>>>>>>> org.joda.time.field.PreciseDateTimeField.getMaximumValue : $i1 = $i0 - 1
org.joda.time.field.PreciseDateTimeField.getMaximumValue : $i1 = $i0 - 1 >>>>>>>> org.joda.time.field.PreciseDateTimeField.getMaximumValue : return $i1
org.joda.time.field.PreciseDateTimeField.getMaximumValue : return $i1 >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i2, $i3)
org.joda.time.field.PreciseDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i2, $i3) >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $i4 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int get(long)>(l0)
org.joda.time.field.PreciseDateTimeField.set : $i4 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $b1 = l0 cmp 0L
org.joda.time.field.PreciseDateTimeField.get : $b1 = l0 cmp 0L >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : if $b1 < 0
org.joda.time.field.PreciseDateTimeField.get : if $b1 < 0 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $i8 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange>
org.joda.time.field.PreciseDateTimeField.get : $i8 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange> >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $i9 = $i8 - 1
org.joda.time.field.PreciseDateTimeField.get : $i9 = $i8 - 1 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l10 = l0 + 1L
org.joda.time.field.PreciseDateTimeField.get : $l10 = l0 + 1L >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l11 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: long getUnitMillis()>()
org.joda.time.field.PreciseDateTimeField.get : $l11 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: long getUnitMillis()>() >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : return $l0
org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : return $l0 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l12 = $l10 / $l11
org.joda.time.field.PreciseDateTimeField.get : $l12 = $l10 / $l11 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $i13 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange>
org.joda.time.field.PreciseDateTimeField.get : $i13 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange> >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l14 = (long) $i13
org.joda.time.field.PreciseDateTimeField.get : $l14 = (long) $i13 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l15 = $l12 % $l14
org.joda.time.field.PreciseDateTimeField.get : $l15 = $l12 % $l14 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $i16 = (int) $l15
org.joda.time.field.PreciseDateTimeField.get : $i16 = (int) $l15 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $i17 = $i9 + $i16
org.joda.time.field.PreciseDateTimeField.get : $i17 = $i9 + $i16 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : return $i17
org.joda.time.field.PreciseDateTimeField.get : return $i17 >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $i5 = i1 - $i4
org.joda.time.field.PreciseDateTimeField.set : $i5 = i1 - $i4 >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $l6 = (long) $i5
org.joda.time.field.PreciseDateTimeField.set : $l6 = (long) $i5 >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $l7 = r0.<org.joda.time.field.PreciseDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDateTimeField.set : $l7 = r0.<org.joda.time.field.PreciseDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $l8 = $l6 * $l7
org.joda.time.field.PreciseDateTimeField.set : $l8 = $l6 * $l7 >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $l9 = l0 + $l8
org.joda.time.field.PreciseDateTimeField.set : $l9 = l0 + $l8 >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : return $l9
org.joda.time.field.PreciseDateTimeField.set : return $l9 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : l11 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>(r1, l10)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : l11 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>(r1, l10) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfMonth>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfMonth> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : if $i1 < 0
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : if $i1 < 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfMonth : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth>
org.joda.time.chrono.AssembledChronology.dayOfMonth : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth> >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfMonth : return $r1
org.joda.time.chrono.AssembledChronology.dayOfMonth : return $r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : $i2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfMonth>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : $i2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfMonth> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : l3 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>(l0, $i2)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : l3 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>(l0, $i2) >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : $i2 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int getMinimumValue()>()
org.joda.time.field.PreciseDurationDateTimeField.set : $i2 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int getMinimumValue()>() >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMinimumValue : return 1
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMinimumValue : return 1 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : $i3 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int getMaximumValueForSet(long,int)>(l0, i1)
org.joda.time.field.PreciseDurationDateTimeField.set : $i3 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int getMaximumValueForSet(long,int)>(l0, i1) >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValueForSet : $r1 = r0.<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValueForSet : $r1 = r0.<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValueForSet : $i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDaysInMonthMaxForSet(long,int)>(l0, i1)
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValueForSet : $i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDaysInMonthMaxForSet(long,int)>(l0, i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInMonthMaxForSet : if i1 <= 28
org.joda.time.chrono.BasicGJChronology.getDaysInMonthMaxForSet : if i1 <= 28 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInMonthMaxForSet : $i2 = 28
org.joda.time.chrono.BasicGJChronology.getDaysInMonthMaxForSet : $i2 = 28 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInMonthMaxForSet : return $i2
org.joda.time.chrono.BasicGJChronology.getDaysInMonthMaxForSet : return $i2 >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValueForSet : return $i2
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValueForSet : return $i2 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i2, $i3)
org.joda.time.field.PreciseDurationDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i2, $i3) >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : $i4 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int get(long)>(l0)
org.joda.time.field.PreciseDurationDateTimeField.set : $i4 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long)>(l0)
org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicChronology.getDayOfMonth : i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 23034375
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 23034375 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 25650000
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 25650000 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 28181250
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 28181250 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 11
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 11 >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : return $i1
org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : return $i1 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : $i5 = i1 - $i4
org.joda.time.field.PreciseDurationDateTimeField.set : $i5 = i1 - $i4 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : $l6 = (long) $i5
org.joda.time.field.PreciseDurationDateTimeField.set : $l6 = (long) $i5 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : $l7 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDurationDateTimeField.set : $l7 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : $l8 = $l6 * $l7
org.joda.time.field.PreciseDurationDateTimeField.set : $l8 = $l6 * $l7 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : $l9 = l0 + $l8
org.joda.time.field.PreciseDurationDateTimeField.set : $l9 = l0 + $l8 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : return $l9
org.joda.time.field.PreciseDurationDateTimeField.set : return $l9 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : goto [?= return l3]
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : goto [?= return l3] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : return l3
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : return l3 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : $i12 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfWeek>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : $i12 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfWeek> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : if $i12 == 0
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : if $i12 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : $l13 = (long) i3
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : $l13 = (long) i3 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : $l14 = l11 - $l13
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : $l14 = l11 - $l13 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : return $l14
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : return $l14 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.getUpperLimit : return $l4
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.getUpperLimit : return $l4 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : i2 = i2 + 1
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : i2 = i2 + 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : goto [?= (branch)]
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : goto [?= (branch)] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $r9 = new java.util.ArrayList
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $r9 = new java.util.ArrayList >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $r10 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $r10 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : specialinvoke $r9.<java.util.ArrayList: void <init>(java.util.Collection)>($r10)
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : specialinvoke $r9.<java.util.ArrayList: void <init>(java.util.Collection)>($r10) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : r1 = $r9
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : r1 = $r9 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : l1 = -9223372036854775808L
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : l1 = -9223372036854775808L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : i2 = 0
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : i2 = 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : r2 = null
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : r2 = null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $r11 = virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>(l1, i2)
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $r11 = virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>(l1, i2) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : r4 = (org.joda.time.tz.DateTimeZoneBuilder$Rule) $r6
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : r4 = (org.joda.time.tz.DateTimeZoneBuilder$Rule) $r6 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $i4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $i4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : l3 = virtualinvoke r4.<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>(l0, $i4, i1)
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : l3 = virtualinvoke r4.<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>(l0, $i4, i1) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>()
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : i3 = i1 + i2
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : i3 = i1 + i2 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : l4 = l0
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : l4 = l0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $b7 = l0 cmp -9223372036854775808L
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $b7 = l0 cmp -9223372036854775808L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : if $b7 != 0
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : if $b7 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : i5 = -2147483648
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : i5 = -2147483648 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : goto [?= $i10 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int iFromYear>]
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : goto [?= $i10 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int iFromYear>] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $i10 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int iFromYear>
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $i10 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int iFromYear> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : if i5 >= $i10
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : if i5 >= $i10 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $i11 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int iFromYear>
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $i11 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int iFromYear> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $l12 = virtualinvoke $r3.<org.joda.time.DateTimeField: long set(long,int)>(0L, $i11)
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $l12 = virtualinvoke $r3.<org.joda.time.DateTimeField: long set(long,int)>(0L, $i11) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $l13 = (long) i3
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $l13 = (long) i3 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : l14 = $l12 - $l13
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : l14 = $l12 - $l13 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : l4 = l14 - 1L
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : l4 = l14 - 1L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $r4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iRecurrence>
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $r4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iRecurrence> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : l6 = virtualinvoke $r4.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long next(long,int,int)>(l4, i1, i2)
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : l6 = virtualinvoke $r4.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long next(long,int,int)>(l4, i1, i2) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.next : $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$OfYear iOfYear>
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.next : $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$OfYear iOfYear> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.next : $l3 = virtualinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>(l0, i1, i2)
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.next : $l3 = virtualinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>(l0, i1, i2) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $c5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $c5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : if $c5 != 119
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : if $c5 != 119 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : i3 = i1 + i2
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : i3 = i1 + i2 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : goto [?= $l7 = (long) i3]
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : goto [?= $l7 = (long) i3] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $l7 = (long) i3
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $l7 = (long) i3 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l8 = l0 + $l7
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l8 = l0 + $l7 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $i9 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMonthOfYear>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $i9 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMonthOfYear> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l4 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>(l8, $i9)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l4 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>(l8, $i9) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 12
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 12 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l10 = virtualinvoke $r3.<org.joda.time.DateTimeField: long set(long,int)>(l4, 0)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l10 = virtualinvoke $r3.<org.joda.time.DateTimeField: long set(long,int)>(l4, 0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $i11 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMillisOfDay>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $i11 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMillisOfDay> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l12 = virtualinvoke $r4.<org.joda.time.DateTimeField: long add(long,int)>(l10, $i11)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l12 = virtualinvoke $r4.<org.joda.time.DateTimeField: long add(long,int)>(l10, $i11) >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $r1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getDurationField()>()
org.joda.time.field.BaseDateTimeField.add : $r1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getDurationField()>() >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getDurationField : $r1 = r0.<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField iUnitField>
org.joda.time.field.PreciseDurationDateTimeField.getDurationField : $r1 = r0.<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField iUnitField> >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getDurationField : return $r1
org.joda.time.field.PreciseDurationDateTimeField.getDurationField : return $r1 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $l2 = virtualinvoke $r1.<org.joda.time.DurationField: long add(long,int)>(l0, i1)
org.joda.time.field.BaseDateTimeField.add : $l2 = virtualinvoke $r1.<org.joda.time.DurationField: long add(long,int)>(l0, i1) >>>>>>>> org.joda.time.field.MillisDurationField.add : $l2 = (long) i1
org.joda.time.field.MillisDurationField.add : $l2 = (long) i1 >>>>>>>> org.joda.time.field.MillisDurationField.add : $l3 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l0, $l2)
org.joda.time.field.MillisDurationField.add : $l3 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l0, $l2) >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : l2 = l0 + l1
org.joda.time.field.FieldUtils.safeAdd : l2 = l0 + l1 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $l3 = l0 ^ l2
org.joda.time.field.FieldUtils.safeAdd : $l3 = l0 ^ l2 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $b4 = $l3 cmp 0L
org.joda.time.field.FieldUtils.safeAdd : $b4 = $l3 cmp 0L >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : if $b4 >= 0
org.joda.time.field.FieldUtils.safeAdd : if $b4 >= 0 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : return l2
org.joda.time.field.FieldUtils.safeAdd : return l2 >>>>>>>> org.joda.time.field.MillisDurationField.add : return $l3
org.joda.time.field.MillisDurationField.add : return $l3 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : return $l2
org.joda.time.field.BaseDateTimeField.add : return $l2 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l13 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>(r1, l12)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l13 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>(r1, l12) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonthNext : l0 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>(r1, l0)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonthNext : l0 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>(r1, l0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : l4 = virtualinvoke $r3.<org.joda.time.DateTimeField: long set(long,int)>(l0, 1)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : l4 = virtualinvoke $r3.<org.joda.time.DateTimeField: long set(long,int)>(l0, 1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 4978125
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 4978125 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 3
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 3 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : l5 = virtualinvoke $r4.<org.joda.time.DateTimeField: long add(long,int)>(l4, 1)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : l5 = virtualinvoke $r4.<org.joda.time.DateTimeField: long add(long,int)>(l4, 1) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : if i1 != 0
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : if i1 != 0 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i10 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMillisOfDay(long)>(l0)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i10 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMillisOfDay(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : l2 = (long) $i10
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : l2 = (long) $i10 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i3 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i3 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i4 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i3)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i4 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i3) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i11 = i4 - 1
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i11 = i4 - 1 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i5 = $i11 + i1
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i5 = $i11 + i1 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : if i5 < 0
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : if i5 < 0 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i12 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i12 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i13 = i5 / $i12
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i13 = i5 / $i12 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i6 = i3 + $i13
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i6 = i3 + $i13 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i14 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i14 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i15 = i5 % $i14
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i15 = i5 % $i14 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i16 = $i15 + 1
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i16 = $i15 + 1 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : goto [?= $r4 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>]
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : goto [?= $r4 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>] >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r4 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r4 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i24 = virtualinvoke $r4.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l0, i3, i4)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i24 = virtualinvoke $r4.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l0, i3, i4) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i8 = virtualinvoke $r5.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>(i6, i16)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i8 = virtualinvoke $r5.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>(i6, i16) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : if i24 <= i8
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : if i24 <= i8 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r6 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r6 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : l9 = virtualinvoke $r6.<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>(i6, i16, i24)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : l9 = virtualinvoke $r6.<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>(i6, i16, i24) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $l25 = l9 + l2
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $l25 = l9 + l2 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : return $l25
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : return $l25 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : $r5 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : $r5 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : $i6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfMonth>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : $i6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfMonth> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : l3 = virtualinvoke $r5.<org.joda.time.DateTimeField: long add(long,int)>(l5, $i6)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : l3 = virtualinvoke $r5.<org.joda.time.DateTimeField: long add(long,int)>(l5, $i6) >>>>>>>> org.joda.time.field.PreciseDurationField.add : $l3 = (long) i1
org.joda.time.field.PreciseDurationField.add : $l3 = (long) i1 >>>>>>>> org.joda.time.field.PreciseDurationField.add : $l4 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis>
org.joda.time.field.PreciseDurationField.add : $l4 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationField.add : l2 = $l3 * $l4
org.joda.time.field.PreciseDurationField.add : l2 = $l3 * $l4 >>>>>>>> org.joda.time.field.PreciseDurationField.add : $l5 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l0, l2)
org.joda.time.field.PreciseDurationField.add : $l5 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l0, l2) >>>>>>>> org.joda.time.field.PreciseDurationField.add : return $l5
org.joda.time.field.PreciseDurationField.add : return $l5 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonthNext : goto [?= return l0]
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonthNext : goto [?= return l0] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonthNext : return l0
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonthNext : return l0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $i14 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfWeek>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $i14 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfWeek> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : if $i14 != 0
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : if $i14 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l13 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>(r1, l13)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l13 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>(r1, l13) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfWeek : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfWeek>
org.joda.time.chrono.AssembledChronology.dayOfWeek : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfWeek> >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfWeek : return $r1
org.joda.time.chrono.AssembledChronology.dayOfWeek : return $r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>(l0)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.chrono.GJDayOfWeekDateTimeField.get : $r1 = r0.<org.joda.time.chrono.GJDayOfWeekDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.GJDayOfWeekDateTimeField.get : $r1 = r0.<org.joda.time.chrono.GJDayOfWeekDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.GJDayOfWeekDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDayOfWeek(long)>(l0)
org.joda.time.chrono.GJDayOfWeekDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDayOfWeek(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : $b2 = l0 cmp 0L
org.joda.time.chrono.BasicChronology.getDayOfWeek : $b2 = l0 cmp 0L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : if $b2 < 0
org.joda.time.chrono.BasicChronology.getDayOfWeek : if $b2 < 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : $l3 = l0 - 86399999L
org.joda.time.chrono.BasicChronology.getDayOfWeek : $l3 = l0 - 86399999L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : l1 = $l3 / 86400000L
org.joda.time.chrono.BasicChronology.getDayOfWeek : l1 = $l3 / 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : $b4 = l1 cmp -3L
org.joda.time.chrono.BasicChronology.getDayOfWeek : $b4 = l1 cmp -3L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : if $b4 >= 0
org.joda.time.chrono.BasicChronology.getDayOfWeek : if $b4 >= 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : $l5 = l1 + 4L
org.joda.time.chrono.BasicChronology.getDayOfWeek : $l5 = l1 + 4L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : $l6 = $l5 % 7L
org.joda.time.chrono.BasicChronology.getDayOfWeek : $l6 = $l5 % 7L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : $i7 = (int) $l6
org.joda.time.chrono.BasicChronology.getDayOfWeek : $i7 = (int) $l6 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : $i8 = 7 + $i7
org.joda.time.chrono.BasicChronology.getDayOfWeek : $i8 = 7 + $i7 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : return $i8
org.joda.time.chrono.BasicChronology.getDayOfWeek : return $i8 >>>>>>>> org.joda.time.chrono.GJDayOfWeekDateTimeField.get : return $i1
org.joda.time.chrono.GJDayOfWeekDateTimeField.get : return $i1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : $i3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfWeek>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : $i3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfWeek> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : i2 = $i3 - i1
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : i2 = $i3 - i1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : if i2 == 0
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : if i2 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : $z0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: boolean iAdvance>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : $z0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: boolean iAdvance> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : if $z0 == 0
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : if $z0 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : if i2 <= 0
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : if i2 <= 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : i2 = i2 + -7
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : i2 = i2 + -7 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : l0 = virtualinvoke $r3.<org.joda.time.DateTimeField: long add(long,int)>(l0, i2)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : l0 = virtualinvoke $r3.<org.joda.time.DateTimeField: long add(long,int)>(l0, i2) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : return l0
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : return l0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $b17 = l13 cmp l8
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $b17 = l13 cmp l8 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : if $b17 > 0
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : if $b17 > 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $r6 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $r6 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l18 = virtualinvoke $r6.<org.joda.time.DateTimeField: long add(long,int)>(l13, 1)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l18 = virtualinvoke $r6.<org.joda.time.DateTimeField: long add(long,int)>(l13, 1) >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.add : if i1 != 0
org.joda.time.chrono.BasicYearDateTimeField.add : if i1 != 0 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.add : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>(l0)
org.joda.time.chrono.BasicYearDateTimeField.add : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicYearDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.get : return $i1
org.joda.time.chrono.BasicYearDateTimeField.get : return $i1 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.add : i3 = staticinvoke <org.joda.time.field.FieldUtils: int safeAdd(int,int)>(i2, i1)
org.joda.time.chrono.BasicYearDateTimeField.add : i3 = staticinvoke <org.joda.time.field.FieldUtils: int safeAdd(int,int)>(i2, i1) >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : i2 = i0 + i1
org.joda.time.field.FieldUtils.safeAdd : i2 = i0 + i1 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $i3 = i0 ^ i2
org.joda.time.field.FieldUtils.safeAdd : $i3 = i0 ^ i2 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : if $i3 >= 0
org.joda.time.field.FieldUtils.safeAdd : if $i3 >= 0 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : return i2
org.joda.time.field.FieldUtils.safeAdd : return i2 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.add : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>(l0, i3)
org.joda.time.chrono.BasicYearDateTimeField.add : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>(l0, i3) >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i2)
org.joda.time.chrono.BasicGJChronology.setYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i2) >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : if $z0 == 0
org.joda.time.chrono.BasicGJChronology.setYear : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : $z2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i1)
org.joda.time.chrono.BasicGJChronology.setYear : $z2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : if $z2 == 0
org.joda.time.chrono.BasicGJChronology.setYear : if $z2 == 0 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.add : return $l4
org.joda.time.chrono.BasicYearDateTimeField.add : return $l4 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $r7 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $r7 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $i19 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMonthOfYear>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $i19 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMonthOfYear> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l20 = virtualinvoke $r7.<org.joda.time.DateTimeField: long set(long,int)>(l18, $i19)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l20 = virtualinvoke $r7.<org.joda.time.DateTimeField: long set(long,int)>(l18, $i19) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l21 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>(r1, l20)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l21 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>(r1, l20) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l13 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>(r1, l21)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l13 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>(r1, l21) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $l22 = (long) i3
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $l22 = (long) i3 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $l23 = l13 - $l22
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $l23 = l13 - $l22 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : return $l23
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : return $l23 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.next : return $l3
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.next : return $l3 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $b15 = l6 cmp l0
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $b15 = l6 cmp l0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : if $b15 <= 0
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : if $b15 <= 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $r5 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $r5 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $l16 = (long) i3
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $l16 = (long) i3 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $l17 = l6 + $l16
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $l17 = l6 + $l16 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : i18 = virtualinvoke $r5.<org.joda.time.DateTimeField: int get(long)>($l17)
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : i18 = virtualinvoke $r5.<org.joda.time.DateTimeField: int get(long)>($l17) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $i19 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int iToYear>
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $i19 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int iToYear> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : if i18 <= $i19
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : if i18 <= $i19 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : return l6
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : return l6 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $b5 = l3 cmp l0
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $b5 = l3 cmp l0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : if $b5 > 0
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : if $b5 > 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $b6 = l3 cmp l2
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $b6 = l3 cmp l2 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : if $b6 > 0
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : if $b6 > 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : r2 = r4
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : r2 = r4 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : l2 = l3
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : l2 = l3 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 10
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 10 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : i3 = i4
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : i3 = i4 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 2
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 2 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $b15 = l13 cmp l8
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $b15 = l13 cmp l8 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : if $b15 > 0
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : if $b15 > 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $r5 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $r5 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l16 = virtualinvoke $r5.<org.joda.time.DateTimeField: long add(long,int)>(l13, 1)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l16 = virtualinvoke $r5.<org.joda.time.DateTimeField: long add(long,int)>(l13, 1) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l13 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>(r1, l16)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l13 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>(r1, l16) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : goto [?= $l22 = (long) i3]
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : goto [?= $l22 = (long) i3] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $c6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $c6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : if $c6 != 115
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : if $c6 != 115 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : i3 = 0
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : i3 = 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 17887500
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 17887500 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 20503125
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 20503125 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 8
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 8 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : i3 = i3 + -1
org.joda.time.chrono.BasicChronology.getYear : i3 = i3 + -1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : goto [?= return i3]
org.joda.time.chrono.BasicChronology.getYear : goto [?= return i3] >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : $i2 = i0 % 100
org.joda.time.chrono.GregorianChronology.isLeapYear : $i2 = i0 % 100 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : if $i2 != 0
org.joda.time.chrono.GregorianChronology.isLeapYear : if $i2 != 0 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : $z0 = 1
org.joda.time.chrono.GregorianChronology.isLeapYear : $z0 = 1 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : goto [?= return $z0]
org.joda.time.chrono.GregorianChronology.isLeapYear : goto [?= return $z0] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 15356250
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 15356250 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 23118750
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 23118750 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 25734375
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 25734375 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 28265625
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 28265625 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $r1 = <org.joda.time.chrono.BasicGJChronology: long[] MAX_TOTAL_MILLIS_BY_MONTH_ARRAY>
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $r1 = <org.joda.time.chrono.BasicGJChronology: long[] MAX_TOTAL_MILLIS_BY_MONTH_ARRAY> >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $i2 = i1 - 1
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $i2 = i1 - 1 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $l3 = $r1[$i2]
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $l3 = $r1[$i2] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : return $l3
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : return $l3 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $r1 = <org.joda.time.chrono.BasicGJChronology: int[] MAX_DAYS_PER_MONTH_ARRAY>
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $r1 = <org.joda.time.chrono.BasicGJChronology: int[] MAX_DAYS_PER_MONTH_ARRAY> >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i2 = i1 - 1
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i2 = i1 - 1 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i3 = $r1[$i2]
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i3 = $r1[$i2] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : return $i3
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : return $i3 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInMonthMaxForSet : $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getDaysInMonthMax(long)>(l0)
org.joda.time.chrono.BasicGJChronology.getDaysInMonthMaxForSet : $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getDaysInMonthMax(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getDaysInMonthMax : i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicChronology.getDaysInMonthMax : i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getDaysInMonthMax : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i1)
org.joda.time.chrono.BasicChronology.getDaysInMonthMax : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 17971875
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 17971875 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 20587500
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 20587500 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 9
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 9 >>>>>>>> org.joda.time.chrono.BasicChronology.getDaysInMonthMax : $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>(i1, i2)
org.joda.time.chrono.BasicChronology.getDaysInMonthMax : $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>(i1, i2) >>>>>>>> org.joda.time.chrono.BasicChronology.getDaysInMonthMax : return $i3
org.joda.time.chrono.BasicChronology.getDaysInMonthMax : return $i3 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInMonthMaxForSet : goto [?= return $i2]
org.joda.time.chrono.BasicGJChronology.getDaysInMonthMaxForSet : goto [?= return $i2] >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : $z1 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i1)
org.joda.time.chrono.BasicGJChronology.setYear : $z1 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : if $z1 != 0
org.joda.time.chrono.BasicGJChronology.setYear : if $z1 != 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : i3 = i3 + -1
org.joda.time.chrono.BasicGJChronology.setYear : i3 = i3 + -1 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : goto [?= l5 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMonthDayMillis(int,int,int)>(i1, 1, i3)]
org.joda.time.chrono.BasicGJChronology.setYear : goto [?= l5 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMonthDayMillis(int,int,int)>(i1, 1, i3)] >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : i3 = i3 + 1
org.joda.time.chrono.BasicGJChronology.setYear : i3 = i3 + 1 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 7678125
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 7678125 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 5062500
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 5062500 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: boolean isLeapYear(int)>(i3)
org.joda.time.chrono.BasicChronology.getYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: boolean isLeapYear(int)>(i3) >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $z0 == 0
org.joda.time.chrono.BasicChronology.getYear : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l6 = 31536000000L
org.joda.time.chrono.BasicChronology.getYear : l6 = 31536000000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l14 = l4 + l6
org.joda.time.chrono.BasicChronology.getYear : l14 = l4 + l6 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $b15 = l14 cmp l0
org.joda.time.chrono.BasicChronology.getYear : $b15 = l14 cmp l0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $b15 > 0
org.joda.time.chrono.BasicChronology.getYear : if $b15 > 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : i3 = i3 + 1
org.joda.time.chrono.BasicChronology.getYear : i3 = i3 + 1 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 10125000
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 10125000 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 4
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 4 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l2 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: long getUnitMillis()>()
org.joda.time.field.PreciseDateTimeField.get : $l2 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: long getUnitMillis()>() >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l3 = l0 / $l2
org.joda.time.field.PreciseDateTimeField.get : $l3 = l0 / $l2 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $i4 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange>
org.joda.time.field.PreciseDateTimeField.get : $i4 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange> >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l5 = (long) $i4
org.joda.time.field.PreciseDateTimeField.get : $l5 = (long) $i4 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l6 = $l3 % $l5
org.joda.time.field.PreciseDateTimeField.get : $l6 = $l3 % $l5 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $i7 = (int) $l6
org.joda.time.field.PreciseDateTimeField.get : $i7 = (int) $l6 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : return $i7
org.joda.time.field.PreciseDateTimeField.get : return $i7 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : l1 = l0 / 86400000L
org.joda.time.chrono.BasicChronology.getDayOfWeek : l1 = l0 / 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : goto [?= $l9 = l1 + 3L]
org.joda.time.chrono.BasicChronology.getDayOfWeek : goto [?= $l9 = l1 + 3L] >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : $l9 = l1 + 3L
org.joda.time.chrono.BasicChronology.getDayOfWeek : $l9 = l1 + 3L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : $l10 = $l9 % 7L
org.joda.time.chrono.BasicChronology.getDayOfWeek : $l10 = $l9 % 7L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : $i11 = (int) $l10
org.joda.time.chrono.BasicChronology.getDayOfWeek : $i11 = (int) $l10 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : $i12 = 1 + $i11
org.joda.time.chrono.BasicChronology.getDayOfWeek : $i12 = 1 + $i11 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : return $i12
org.joda.time.chrono.BasicChronology.getDayOfWeek : return $i12 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 10209375
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 10209375 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : if i2 >= 0
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : if i2 >= 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $r7 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $r7 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $i7 = virtualinvoke $r7.<org.joda.time.DateTimeField: int get(long)>(l2)
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $i7 = virtualinvoke $r7.<org.joda.time.DateTimeField: int get(long)>(l2) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $i8 = <org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int YEAR_LIMIT>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $i8 = <org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int YEAR_LIMIT> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : if $i7 < $i8
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : if $i7 < $i8 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $i9 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iUpperYear>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $i9 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iUpperYear> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : if $i9 >= 2147483647
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : if $i9 >= 2147483647 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $r9 = new org.joda.time.tz.DateTimeZoneBuilder$Transition
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $r9 = new org.joda.time.tz.DateTimeZoneBuilder$Transition >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $i14 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $i14 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : specialinvoke $r9.<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Rule,int)>(l2, r2, $i14)
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : specialinvoke $r9.<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Rule,int)>(l2, r2, $i14) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.getNameKey : $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iRecurrence>
org.joda.time.tz.DateTimeZoneBuilder$Rule.getNameKey : $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iRecurrence> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.getNameKey : $r2 = virtualinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String getNameKey()>()
org.joda.time.tz.DateTimeZoneBuilder$Rule.getNameKey : $r2 = virtualinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String getNameKey()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.getNameKey : $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String iNameKey>
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.getNameKey : $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String iNameKey> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.getNameKey : return $r1
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.getNameKey : return $r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.getNameKey : return $r2
org.joda.time.tz.DateTimeZoneBuilder$Rule.getNameKey : return $r2 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.getSaveMillis : $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iRecurrence>
org.joda.time.tz.DateTimeZoneBuilder$Rule.getSaveMillis : $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iRecurrence> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.getSaveMillis : $i0 = virtualinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>()
org.joda.time.tz.DateTimeZoneBuilder$Rule.getSaveMillis : $i0 = virtualinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.getSaveMillis : $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int iSaveMillis>
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.getSaveMillis : $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int iSaveMillis> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.getSaveMillis : return $i0
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.getSaveMillis : return $i0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.getSaveMillis : return $i0
org.joda.time.tz.DateTimeZoneBuilder$Rule.getSaveMillis : return $i0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : return $r9
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : return $r9 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : r3 = $r11
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : r3 = $r11 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : if $r11 == null
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : if $r11 == null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : l1 = virtualinvoke r3.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : l1 = virtualinvoke r3.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $b7 = l1 cmp l0
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $b7 = l1 cmp l0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : if $b7 != 0
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : if $b7 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $b8 = l1 cmp l0
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $b8 = l1 cmp l0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : if $b8 <= 0
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : if $b8 <= 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : if r2 != null
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : if r2 != null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : r4 = virtualinvoke r1.<java.util.ArrayList: java.util.Iterator iterator()>()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : r4 = virtualinvoke r1.<java.util.ArrayList: java.util.Iterator iterator()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : if $z0 == 0
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : if $z0 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $r13 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $r13 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : r5 = (org.joda.time.tz.DateTimeZoneBuilder$Rule) $r13
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : r5 = (org.joda.time.tz.DateTimeZoneBuilder$Rule) $r13 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $i9 = virtualinvoke r5.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int getSaveMillis()>()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $i9 = virtualinvoke r5.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int getSaveMillis()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : if $i9 != 0
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : if $i9 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $r14 = new org.joda.time.tz.DateTimeZoneBuilder$Transition
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $r14 = new org.joda.time.tz.DateTimeZoneBuilder$Transition >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $i10 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $i10 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : specialinvoke $r14.<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Rule,int)>(l0, r5, $i10)
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : specialinvoke $r14.<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Rule,int)>(l0, r5, $i10) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : r2 = $r14
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : r2 = $r14 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : goto [?= (branch)]
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : goto [?= (branch)] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules> = r1
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules> = r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : return r2
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : return r2 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : $i5 = i0 - 1
org.joda.time.tz.DateTimeZoneBuilder.addTransition : $i5 = i0 - 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : $r4 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>($i5)
org.joda.time.tz.DateTimeZoneBuilder.addTransition : $r4 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>($i5) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : r3 = (org.joda.time.tz.DateTimeZoneBuilder$Transition) $r4
org.joda.time.tz.DateTimeZoneBuilder.addTransition : r3 = (org.joda.time.tz.DateTimeZoneBuilder$Transition) $r4 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : $z1 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$Transition: boolean isTransitionFrom(org.joda.time.tz.DateTimeZoneBuilder$Transition)>(r3)
org.joda.time.tz.DateTimeZoneBuilder.addTransition : $z1 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$Transition: boolean isTransitionFrom(org.joda.time.tz.DateTimeZoneBuilder$Transition)>(r3) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : if r1 != null
org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : if r1 != null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : $l0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long iMillis>
org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : $l0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long iMillis> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : $l1 = r1.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long iMillis>
org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : $l1 = r1.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long iMillis> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : $b2 = $l0 cmp $l1
org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : $b2 = $l0 cmp $l1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : if $b2 <= 0
org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : if $b2 <= 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : $i3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int iWallOffset>
org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : $i3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int iWallOffset> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : $i4 = r1.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int iWallOffset>
org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : $i4 = r1.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int iWallOffset> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : if $i3 != $i4
org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : if $i3 != $i4 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : $z1 = 1
org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : $z1 = 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : goto [?= return $z1]
org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : goto [?= return $z1] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : return $z1
org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : return $z1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : if $z1 != 0
org.joda.time.tz.DateTimeZoneBuilder.addTransition : if $z1 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : i1 = 0
org.joda.time.tz.DateTimeZoneBuilder.addTransition : i1 = 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : if i0 < 2
org.joda.time.tz.DateTimeZoneBuilder.addTransition : if i0 < 2 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : i2 = virtualinvoke r3.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getWallOffset()>()
org.joda.time.tz.DateTimeZoneBuilder.addTransition : i2 = virtualinvoke r3.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getWallOffset()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.getWallOffset : $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int iWallOffset>
org.joda.time.tz.DateTimeZoneBuilder$Transition.getWallOffset : $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int iWallOffset> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.getWallOffset : return $i0
org.joda.time.tz.DateTimeZoneBuilder$Transition.getWallOffset : return $i0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : $l7 = virtualinvoke r3.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>()
org.joda.time.tz.DateTimeZoneBuilder.addTransition : $l7 = virtualinvoke r3.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : $l8 = (long) i1
org.joda.time.tz.DateTimeZoneBuilder.addTransition : $l8 = (long) i1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : l3 = $l7 + $l8
org.joda.time.tz.DateTimeZoneBuilder.addTransition : l3 = $l7 + $l8 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : $l9 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>()
org.joda.time.tz.DateTimeZoneBuilder.addTransition : $l9 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : $l10 = (long) i2
org.joda.time.tz.DateTimeZoneBuilder.addTransition : $l10 = (long) i2 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : l4 = $l9 + $l10
org.joda.time.tz.DateTimeZoneBuilder.addTransition : l4 = $l9 + $l10 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : $b11 = l4 cmp l3
org.joda.time.tz.DateTimeZoneBuilder.addTransition : $b11 = l4 cmp l3 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : if $b11 == 0
org.joda.time.tz.DateTimeZoneBuilder.addTransition : if $b11 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $l8 = (long) i3
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $l8 = (long) i3 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $l9 = l0 + $l8
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $l9 = l0 + $l8 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : i5 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l9)
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : i5 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l9) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $z3 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>(r2, r14)
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $z3 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>(r2, r14) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : $i6 = i0 - 2
org.joda.time.tz.DateTimeZoneBuilder.addTransition : $i6 = i0 - 2 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : $r5 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>($i6)
org.joda.time.tz.DateTimeZoneBuilder.addTransition : $r5 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>($i6) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : $r6 = (org.joda.time.tz.DateTimeZoneBuilder$Transition) $r5
org.joda.time.tz.DateTimeZoneBuilder.addTransition : $r6 = (org.joda.time.tz.DateTimeZoneBuilder$Transition) $r5 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : i1 = virtualinvoke $r6.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getWallOffset()>()
org.joda.time.tz.DateTimeZoneBuilder.addTransition : i1 = virtualinvoke $r6.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getWallOffset()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if $z3 == 0
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if $z3 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if r3 == null
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if r3 == null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : l3 = virtualinvoke r14.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>()
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : l3 = virtualinvoke r14.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : i4 = virtualinvoke r14.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getSaveMillis()>()
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : i4 = virtualinvoke r14.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getSaveMillis()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if r3 != null
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if r3 != null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $i5 = i1 - 1
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $i5 = i1 - 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if i2 != $i5
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if i2 != $i5 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : r3 = virtualinvoke r12.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$DSTZone buildTailZone(java.lang.String)>(r1)
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : r3 = virtualinvoke r12.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$DSTZone buildTailZone(java.lang.String)>(r1) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $r4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $r4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : if $i0 != 2
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : if $i0 != 2 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : return null
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : return null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : goto [?= $r13 = virtualinvoke r12.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>(l3, i4)]
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : goto [?= $r13 = virtualinvoke r12.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>(l3, i4)] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String iNameKey>
org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String iNameKey> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : $r3 = r1.<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String iNameKey>
org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : $r3 = r1.<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String iNameKey> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3)
org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : if $z0 != 0
org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : if $z0 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : $z1 = 0
org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : $z1 = 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : return 0
org.joda.time.tz.DateTimeZoneBuilder.addTransition : return 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : l6 = l0
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : l6 = l0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : interfaceinvoke r3.<java.util.Iterator: void remove()>()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : interfaceinvoke r3.<java.util.Iterator: void remove()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $r5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $r5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(0)
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : r2 = (org.joda.time.tz.DateTimeZoneBuilder$Rule) $r6
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : r2 = (org.joda.time.tz.DateTimeZoneBuilder$Rule) $r6 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $r7 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $r7 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(1)
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(1) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : r3 = (org.joda.time.tz.DateTimeZoneBuilder$Rule) $r8
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : r3 = (org.joda.time.tz.DateTimeZoneBuilder$Rule) $r8 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $i1 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int getToYear()>()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $i1 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int getToYear()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.getToYear : $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int iToYear>
org.joda.time.tz.DateTimeZoneBuilder$Rule.getToYear : $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int iToYear> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.getToYear : return $i0
org.joda.time.tz.DateTimeZoneBuilder$Rule.getToYear : return $i0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : if $i1 != 2147483647
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : if $i1 != 2147483647 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $i2 = virtualinvoke r3.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int getToYear()>()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $i2 = virtualinvoke r3.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int getToYear()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : if $i2 != 2147483647
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : if $i2 != 2147483647 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $r9 = new org.joda.time.tz.DateTimeZoneBuilder$DSTZone
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $r9 = new org.joda.time.tz.DateTimeZoneBuilder$DSTZone >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $i3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $i3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $r10 = r2.<org.joda.time.tz.DateTimeZoneBuilder$Rule: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iRecurrence>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $r10 = r2.<org.joda.time.tz.DateTimeZoneBuilder$Rule: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iRecurrence> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $r11 = r3.<org.joda.time.tz.DateTimeZoneBuilder$Rule: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iRecurrence>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $r11 = r3.<org.joda.time.tz.DateTimeZoneBuilder$Rule: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iRecurrence> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : specialinvoke $r9.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void <init>(java.lang.String,int,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,org.joda.time.tz.DateTimeZoneBuilder$Recurrence)>(r1, $i3, $r10, $r11)
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : specialinvoke $r9.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void <init>(java.lang.String,int,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,org.joda.time.tz.DateTimeZoneBuilder$Recurrence)>(r1, $i3, $r10, $r11) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : return $r9
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : return $r9 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : goto [?= l0 = virtualinvoke r12.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: long getUpperLimit(int)>(i4)]
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : goto [?= l0 = virtualinvoke r12.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: long getUpperLimit(int)>(i4)] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.getUpperLimit : return 9223372036854775807L
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.getUpperLimit : return 9223372036854775807L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $i6 = virtualinvoke r2.<java.util.ArrayList: int size()>()
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $i6 = virtualinvoke r2.<java.util.ArrayList: int size()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if $i6 != 0
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if $i6 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $i7 = virtualinvoke r2.<java.util.ArrayList: int size()>()
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $i7 = virtualinvoke r2.<java.util.ArrayList: int size()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if $i7 != 1
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if $i7 != 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : r20 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>(r1, z0, r2, r3)
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : r20 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>(r1, z0, r2, r3) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : i0 = virtualinvoke r1.<java.util.ArrayList: int size()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : i0 = virtualinvoke r1.<java.util.ArrayList: int size()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if i0 != 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if i0 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r3 = newarray (long)[i0]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r3 = newarray (long)[i0] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r4 = newarray (int)[i0]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r4 = newarray (int)[i0] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r5 = newarray (int)[i0]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r5 = newarray (int)[i0] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r6 = newarray (java.lang.String)[i0]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r6 = newarray (java.lang.String)[i0] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r7 = null
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r7 = null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : i1 = 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : i1 = 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if i1 >= i0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if i1 >= i0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r14 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i1)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r14 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i1) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r8 = (org.joda.time.tz.DateTimeZoneBuilder$Transition) $r14
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r8 = (org.joda.time.tz.DateTimeZoneBuilder$Transition) $r14 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $z1 = virtualinvoke r8.<org.joda.time.tz.DateTimeZoneBuilder$Transition: boolean isTransitionFrom(org.joda.time.tz.DateTimeZoneBuilder$Transition)>(r7)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $z1 = virtualinvoke r8.<org.joda.time.tz.DateTimeZoneBuilder$Transition: boolean isTransitionFrom(org.joda.time.tz.DateTimeZoneBuilder$Transition)>(r7) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : return 1
org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : return 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if $z1 != 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if $z1 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $l7 = virtualinvoke r8.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $l7 = virtualinvoke r8.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r3[i1] = $l7
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r3[i1] = $l7 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i8 = virtualinvoke r8.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getWallOffset()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i8 = virtualinvoke r8.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getWallOffset()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r4[i1] = $i8
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r4[i1] = $i8 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i9 = virtualinvoke r8.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getStandardOffset()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i9 = virtualinvoke r8.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getStandardOffset()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.getStandardOffset : $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int iStandardOffset>
org.joda.time.tz.DateTimeZoneBuilder$Transition.getStandardOffset : $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int iStandardOffset> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.getStandardOffset : return $i0
org.joda.time.tz.DateTimeZoneBuilder$Transition.getStandardOffset : return $i0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r5[i1] = $i9
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r5[i1] = $i9 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r16 = virtualinvoke r8.<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String getNameKey()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r16 = virtualinvoke r8.<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String getNameKey()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.getNameKey : $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String iNameKey>
org.joda.time.tz.DateTimeZoneBuilder$Transition.getNameKey : $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String iNameKey> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.getNameKey : return $r1
org.joda.time.tz.DateTimeZoneBuilder$Transition.getNameKey : return $r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r6[i1] = $r16
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r6[i1] = $r16 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r7 = r8
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r7 = r8 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : i1 = i1 + 1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : i1 = i1 + 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : goto [?= (branch)]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : goto [?= (branch)] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r17 = newarray (java.lang.String)[5]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r17 = newarray (java.lang.String)[5] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r18 = new java.text.DateFormatSymbols
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r18 = new java.text.DateFormatSymbols >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r19 = <java.util.Locale: java.util.Locale ENGLISH>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r19 = <java.util.Locale: java.util.Locale ENGLISH> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : specialinvoke $r18.<java.text.DateFormatSymbols: void <init>(java.util.Locale)>($r19)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : specialinvoke $r18.<java.text.DateFormatSymbols: void <init>(java.util.Locale)>($r19) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r20 = virtualinvoke $r18.<java.text.DateFormatSymbols: java.lang.String[][] getZoneStrings()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r20 = virtualinvoke $r18.<java.text.DateFormatSymbols: java.lang.String[][] getZoneStrings()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : i2 = 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : i2 = 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i10 = lengthof r20
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i10 = lengthof r20 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if i2 >= $i10
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if i2 >= $i10 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r9 = r20[i2]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r9 = r20[i2] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if r9 == null
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if r9 == null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i11 = lengthof r9
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i11 = lengthof r9 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if $i11 != 5
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if $i11 != 5 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r21 = r9[0]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r21 = r9[0] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r21)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r21) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if $z2 == 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if $z2 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r17 = r9
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r17 = r9 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : i2 = i2 + 1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : i2 = i2 + 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : goto [?= $i10 = lengthof r20]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : goto [?= $i10 = lengthof r20] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r22 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r22 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : i12 = 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : i12 = 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i13 = lengthof r6
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i13 = lengthof r6 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i14 = $i13 - 1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i14 = $i13 - 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if i12 >= $i14
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if i12 >= $i14 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r10 = r6[i12]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r10 = r6[i12] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i15 = i12 + 1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i15 = i12 + 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r11 = r6[$i15]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r11 = r6[$i15] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i16 = r4[i12]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i16 = r4[i12] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : l3 = (long) $i16
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : l3 = (long) $i16 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i17 = i12 + 1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i17 = i12 + 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i18 = r4[$i17]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i18 = r4[$i17] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : l4 = (long) $i18
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : l4 = (long) $i18 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i19 = r5[i12]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i19 = r5[i12] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : l5 = (long) $i19
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : l5 = (long) $i19 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i20 = i12 + 1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i20 = i12 + 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i21 = r5[$i20]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i21 = r5[$i20] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : l6 = (long) $i21
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : l6 = (long) $i21 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r23 = new org.joda.time.Period
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r23 = new org.joda.time.Period >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $l22 = r3[i12]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $l22 = r3[i12] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i23 = i12 + 1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i23 = i12 + 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $l24 = r3[$i23]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $l24 = r3[$i23] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r24 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r24 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>() >>>>>>>> org.joda.time.PeriodType.yearMonthDay : r0 = <org.joda.time.PeriodType: org.joda.time.PeriodType cYMD>
org.joda.time.PeriodType.yearMonthDay : r0 = <org.joda.time.PeriodType: org.joda.time.PeriodType cYMD> >>>>>>>> org.joda.time.PeriodType.yearMonthDay : if r0 != null
org.joda.time.PeriodType.yearMonthDay : if r0 != null >>>>>>>> org.joda.time.PeriodType.yearMonthDay : return r0
org.joda.time.PeriodType.yearMonthDay : return r0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : specialinvoke $r23.<org.joda.time.Period: void <init>(long,long,org.joda.time.PeriodType,org.joda.time.Chronology)>($l22, $l24, $r24, r22)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : specialinvoke $r23.<org.joda.time.Period: void <init>(long,long,org.joda.time.PeriodType,org.joda.time.Chronology)>($l22, $l24, $r24, r22) >>>>>>>> org.joda.time.base.BasePeriod.checkPeriodType : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>(r1)
org.joda.time.base.BasePeriod.checkPeriodType : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>(r1) >>>>>>>> org.joda.time.DateTimeUtils.getPeriodType : if r0 != null
org.joda.time.DateTimeUtils.getPeriodType : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getPeriodType : return r0
org.joda.time.DateTimeUtils.getPeriodType : return r0 >>>>>>>> org.joda.time.base.BasePeriod.checkPeriodType : return $r2
org.joda.time.base.BasePeriod.checkPeriodType : return $r2 >>>>>>>> org.joda.time.DateTimeUtils.getChronology : if r0 != null
org.joda.time.DateTimeUtils.getChronology : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getChronology : return r0
org.joda.time.DateTimeUtils.getChronology : return r0 >>>>>>>> org.joda.time.chrono.BaseChronology.get : i2 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int size()>()
org.joda.time.chrono.BaseChronology.get : i2 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int size()>() >>>>>>>> org.joda.time.base.AbstractPeriod.size : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.base.AbstractPeriod.size : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.base.BasePeriod.getPeriodType : $r1 = r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType>
org.joda.time.base.BasePeriod.getPeriodType : $r1 = r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType> >>>>>>>> org.joda.time.base.BasePeriod.getPeriodType : return $r1
org.joda.time.base.BasePeriod.getPeriodType : return $r1 >>>>>>>> org.joda.time.base.AbstractPeriod.size : $i0 = virtualinvoke $r1.<org.joda.time.PeriodType: int size()>()
org.joda.time.base.AbstractPeriod.size : $i0 = virtualinvoke $r1.<org.joda.time.PeriodType: int size()>() >>>>>>>> org.joda.time.PeriodType.size : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.PeriodType.size : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes> >>>>>>>> org.joda.time.PeriodType.size : $i0 = lengthof $r1
org.joda.time.PeriodType.size : $i0 = lengthof $r1 >>>>>>>> org.joda.time.PeriodType.size : return $i0
org.joda.time.PeriodType.size : return $i0 >>>>>>>> org.joda.time.base.AbstractPeriod.size : return $i0
org.joda.time.base.AbstractPeriod.size : return $i0 >>>>>>>> org.joda.time.chrono.BaseChronology.get : r2 = newarray (int)[i2]
org.joda.time.chrono.BaseChronology.get : r2 = newarray (int)[i2] >>>>>>>> org.joda.time.chrono.BaseChronology.get : $b5 = l0 cmp l1
org.joda.time.chrono.BaseChronology.get : $b5 = l0 cmp l1 >>>>>>>> org.joda.time.chrono.BaseChronology.get : if $b5 == 0
org.joda.time.chrono.BaseChronology.get : if $b5 == 0 >>>>>>>> org.joda.time.chrono.BaseChronology.get : i3 = 0
org.joda.time.chrono.BaseChronology.get : i3 = 0 >>>>>>>> org.joda.time.chrono.BaseChronology.get : if i3 >= i2
org.joda.time.chrono.BaseChronology.get : if i3 >= i2 >>>>>>>> org.joda.time.chrono.BaseChronology.get : $r4 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>(i3)
org.joda.time.chrono.BaseChronology.get : $r4 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>(i3) >>>>>>>> org.joda.time.base.AbstractPeriod.getFieldType : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.base.AbstractPeriod.getFieldType : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.base.AbstractPeriod.getFieldType : $r2 = virtualinvoke $r1.<org.joda.time.PeriodType: org.joda.time.DurationFieldType getFieldType(int)>(i0)
org.joda.time.base.AbstractPeriod.getFieldType : $r2 = virtualinvoke $r1.<org.joda.time.PeriodType: org.joda.time.DurationFieldType getFieldType(int)>(i0) >>>>>>>> org.joda.time.PeriodType.getFieldType : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.PeriodType.getFieldType : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes> >>>>>>>> org.joda.time.PeriodType.getFieldType : $r2 = $r1[i0]
org.joda.time.PeriodType.getFieldType : $r2 = $r1[i0] >>>>>>>> org.joda.time.PeriodType.getFieldType : return $r2
org.joda.time.PeriodType.getFieldType : return $r2 >>>>>>>> org.joda.time.base.AbstractPeriod.getFieldType : return $r2
org.joda.time.base.AbstractPeriod.getFieldType : return $r2 >>>>>>>> org.joda.time.chrono.BaseChronology.get : r3 = virtualinvoke $r4.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>(r0)
org.joda.time.chrono.BaseChronology.get : r3 = virtualinvoke $r4.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>(r0) >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal>
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal> >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : tableswitch($b0) {     case 1:
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : tableswitch($b0) {     case 1: >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r6 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField years()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r6 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField years()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.years : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iYears>
org.joda.time.chrono.AssembledChronology.years : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iYears> >>>>>>>> org.joda.time.chrono.AssembledChronology.years : return $r1
org.joda.time.chrono.AssembledChronology.years : return $r1 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r6
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r6 >>>>>>>> org.joda.time.chrono.BaseChronology.get : i4 = virtualinvoke r3.<org.joda.time.DurationField: int getDifference(long,long)>(l1, l0)
org.joda.time.chrono.BaseChronology.get : i4 = virtualinvoke r3.<org.joda.time.DurationField: int getDifference(long,long)>(l1, l0) >>>>>>>> org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getDifference : $r1 = r0.<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: org.joda.time.field.ImpreciseDateTimeField this$0>
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getDifference : $r1 = r0.<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: org.joda.time.field.ImpreciseDateTimeField this$0> >>>>>>>> org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getDifference : $i2 = virtualinvoke $r1.<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>(l0, l1)
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getDifference : $i2 = virtualinvoke $r1.<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>(l0, l1) >>>>>>>> org.joda.time.field.ImpreciseDateTimeField.getDifference : $l2 = virtualinvoke r0.<org.joda.time.field.ImpreciseDateTimeField: long getDifferenceAsLong(long,long)>(l0, l1)
org.joda.time.field.ImpreciseDateTimeField.getDifference : $l2 = virtualinvoke r0.<org.joda.time.field.ImpreciseDateTimeField: long getDifferenceAsLong(long,long)>(l0, l1) >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getDifferenceAsLong : $b2 = l0 cmp l1
org.joda.time.chrono.BasicYearDateTimeField.getDifferenceAsLong : $b2 = l0 cmp l1 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getDifferenceAsLong : if $b2 >= 0
org.joda.time.chrono.BasicYearDateTimeField.getDifferenceAsLong : if $b2 >= 0 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getDifferenceAsLong : $r2 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.getDifferenceAsLong : $r2 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getDifferenceAsLong : $l5 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: long getYearDifference(long,long)>(l0, l1)
org.joda.time.chrono.BasicYearDateTimeField.getDifferenceAsLong : $l5 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: long getYearDifference(long,long)>(l0, l1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicGJChronology.getYearDifference : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : i3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getYear(long)>(l1)
org.joda.time.chrono.BasicGJChronology.getYearDifference : i3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getYear(long)>(l1) >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $l10 = l2 - l1
org.joda.time.chrono.BasicChronology.getYear : $l10 = l2 - l1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l2 = $l10 + 1L
org.joda.time.chrono.BasicChronology.getYear : l2 = $l10 + 1L >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : $l7 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMillis(int)>(i2)
org.joda.time.chrono.BasicGJChronology.getYearDifference : $l7 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMillis(int)>(i2) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : l4 = l0 - $l7
org.joda.time.chrono.BasicGJChronology.getYearDifference : l4 = l0 - $l7 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : $l8 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMillis(int)>(i3)
org.joda.time.chrono.BasicGJChronology.getYearDifference : $l8 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMillis(int)>(i3) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : l5 = l1 - $l8
org.joda.time.chrono.BasicGJChronology.getYearDifference : l5 = l1 - $l8 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : $b9 = l5 cmp 5097600000L
org.joda.time.chrono.BasicGJChronology.getYearDifference : $b9 = l5 cmp 5097600000L >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : if $b9 < 0
org.joda.time.chrono.BasicGJChronology.getYearDifference : if $b9 < 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i3)
org.joda.time.chrono.BasicGJChronology.getYearDifference : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i3) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : if $z0 == 0
org.joda.time.chrono.BasicGJChronology.getYearDifference : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : $b10 = l4 cmp 5097600000L
org.joda.time.chrono.BasicGJChronology.getYearDifference : $b10 = l4 cmp 5097600000L >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : if $b10 < 0
org.joda.time.chrono.BasicGJChronology.getYearDifference : if $b10 < 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : $z2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i2)
org.joda.time.chrono.BasicGJChronology.getYearDifference : $z2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i2) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : if $z2 == 0
org.joda.time.chrono.BasicGJChronology.getYearDifference : if $z2 == 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : i6 = i2 - i3
org.joda.time.chrono.BasicGJChronology.getYearDifference : i6 = i2 - i3 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : $b11 = l4 cmp l5
org.joda.time.chrono.BasicGJChronology.getYearDifference : $b11 = l4 cmp l5 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : if $b11 >= 0
org.joda.time.chrono.BasicGJChronology.getYearDifference : if $b11 >= 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : $l12 = (long) i6
org.joda.time.chrono.BasicGJChronology.getYearDifference : $l12 = (long) i6 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : return $l12
org.joda.time.chrono.BasicGJChronology.getYearDifference : return $l12 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getDifferenceAsLong : return $l5
org.joda.time.chrono.BasicYearDateTimeField.getDifferenceAsLong : return $l5 >>>>>>>> org.joda.time.field.ImpreciseDateTimeField.getDifference : $i3 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>($l2)
org.joda.time.field.ImpreciseDateTimeField.getDifference : $i3 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>($l2) >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : $b1 = -2147483648L cmp l0
org.joda.time.field.FieldUtils.safeToInt : $b1 = -2147483648L cmp l0 >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : if $b1 > 0
org.joda.time.field.FieldUtils.safeToInt : if $b1 > 0 >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : $b2 = l0 cmp 2147483647L
org.joda.time.field.FieldUtils.safeToInt : $b2 = l0 cmp 2147483647L >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : if $b2 > 0
org.joda.time.field.FieldUtils.safeToInt : if $b2 > 0 >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : $i3 = (int) l0
org.joda.time.field.FieldUtils.safeToInt : $i3 = (int) l0 >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : return $i3
org.joda.time.field.FieldUtils.safeToInt : return $i3 >>>>>>>> org.joda.time.field.ImpreciseDateTimeField.getDifference : return $i3
org.joda.time.field.ImpreciseDateTimeField.getDifference : return $i3 >>>>>>>> org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getDifference : return $i2
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getDifference : return $i2 >>>>>>>> org.joda.time.chrono.BaseChronology.get : l0 = virtualinvoke r3.<org.joda.time.DurationField: long add(long,int)>(l0, i4)
org.joda.time.chrono.BaseChronology.get : l0 = virtualinvoke r3.<org.joda.time.DurationField: long add(long,int)>(l0, i4) >>>>>>>> org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.add : $r1 = r0.<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: org.joda.time.field.ImpreciseDateTimeField this$0>
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.add : $r1 = r0.<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: org.joda.time.field.ImpreciseDateTimeField this$0> >>>>>>>> org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.add : $l2 = virtualinvoke $r1.<org.joda.time.field.ImpreciseDateTimeField: long add(long,int)>(l0, i1)
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.add : $l2 = virtualinvoke $r1.<org.joda.time.field.ImpreciseDateTimeField: long add(long,int)>(l0, i1) >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $i4 = i0 ^ i1
org.joda.time.field.FieldUtils.safeAdd : $i4 = i0 ^ i1 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : if $i4 < 0
org.joda.time.field.FieldUtils.safeAdd : if $i4 < 0 >>>>>>>> org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.add : return $l2
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.add : return $l2 >>>>>>>> org.joda.time.chrono.BaseChronology.get : r2[i3] = i4
org.joda.time.chrono.BaseChronology.get : r2[i3] = i4 >>>>>>>> org.joda.time.chrono.BaseChronology.get : i3 = i3 + 1
org.joda.time.chrono.BaseChronology.get : i3 = i3 + 1 >>>>>>>> org.joda.time.chrono.BaseChronology.get : goto [?= (branch)]
org.joda.time.chrono.BaseChronology.get : goto [?= (branch)] >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r7 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField months()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r7 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField months()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.months : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMonths>
org.joda.time.chrono.AssembledChronology.months : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMonths> >>>>>>>> org.joda.time.chrono.AssembledChronology.months : return $r1
org.joda.time.chrono.AssembledChronology.months : return $r1 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r7
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r7 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $b10 = l0 cmp l1
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $b10 = l0 cmp l1 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : if $b10 >= 0
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : if $b10 >= 0 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : i3 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i2)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : i3 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i2) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : i4 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l1)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : i4 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l1) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r4 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r4 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : i5 = virtualinvoke $r4.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l1, i4)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : i5 = virtualinvoke $r4.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l1, i4) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 12740625
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 12740625 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 5
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 5 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $i14 = i2 - i4
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $i14 = i2 - i4 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l15 = (long) $i14
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l15 = (long) $i14 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $i16 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $i16 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l17 = (long) $i16
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l17 = (long) $i16 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l18 = $l15 * $l17
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l18 = $l15 * $l17 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l19 = (long) i3
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l19 = (long) i3 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l20 = $l18 + $l19
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l20 = $l18 + $l19 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l21 = (long) i5
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l21 = (long) i5 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : l6 = $l20 - $l21
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : l6 = $l20 - $l21 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : i7 = virtualinvoke $r5.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l0, i2, i3)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : i7 = virtualinvoke $r5.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l0, i2, i3) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r6 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r6 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $i22 = virtualinvoke $r6.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>(i2, i3)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $i22 = virtualinvoke $r6.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>(i2, i3) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : if i7 != $i22
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : if i7 != $i22 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r10 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r10 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l23 = virtualinvoke $r10.<org.joda.time.chrono.BasicChronology: long getYearMonthMillis(int,int)>(i2, i3)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l23 = virtualinvoke $r10.<org.joda.time.chrono.BasicChronology: long getYearMonthMillis(int,int)>(i2, i3) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthMillis : l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0)
org.joda.time.chrono.BasicChronology.getYearMonthMillis : l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthMillis : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i0, i1)
org.joda.time.chrono.BasicChronology.getYearMonthMillis : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i0, i1) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthMillis : l4 = l2 + $l3
org.joda.time.chrono.BasicChronology.getYearMonthMillis : l4 = l2 + $l3 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthMillis : return l4
org.joda.time.chrono.BasicChronology.getYearMonthMillis : return l4 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : l24 = l0 - $l23
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : l24 = l0 - $l23 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r11 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r11 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l25 = virtualinvoke $r11.<org.joda.time.chrono.BasicChronology: long getYearMonthMillis(int,int)>(i4, i5)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l25 = virtualinvoke $r11.<org.joda.time.chrono.BasicChronology: long getYearMonthMillis(int,int)>(i4, i5) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : l9 = l1 - $l25
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : l9 = l1 - $l25 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $b26 = l24 cmp l9
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $b26 = l24 cmp l9 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : if $b26 >= 0
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : if $b26 >= 0 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : return l6
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : return l6 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r9 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField days()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r9 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField days()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.days : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays>
org.joda.time.chrono.AssembledChronology.days : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays> >>>>>>>> org.joda.time.chrono.AssembledChronology.days : return $r1
org.joda.time.chrono.AssembledChronology.days : return $r1 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r9
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r9 >>>>>>>> org.joda.time.field.BaseDurationField.getDifference : $l2 = virtualinvoke r0.<org.joda.time.field.BaseDurationField: long getDifferenceAsLong(long,long)>(l0, l1)
org.joda.time.field.BaseDurationField.getDifference : $l2 = virtualinvoke r0.<org.joda.time.field.BaseDurationField: long getDifferenceAsLong(long,long)>(l0, l1) >>>>>>>> org.joda.time.field.PreciseDurationField.getDifferenceAsLong : l2 = staticinvoke <org.joda.time.field.FieldUtils: long safeSubtract(long,long)>(l0, l1)
org.joda.time.field.PreciseDurationField.getDifferenceAsLong : l2 = staticinvoke <org.joda.time.field.FieldUtils: long safeSubtract(long,long)>(l0, l1) >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : l2 = l0 - l1
org.joda.time.field.FieldUtils.safeSubtract : l2 = l0 - l1 >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : $l3 = l0 ^ l2
org.joda.time.field.FieldUtils.safeSubtract : $l3 = l0 ^ l2 >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : $b4 = $l3 cmp 0L
org.joda.time.field.FieldUtils.safeSubtract : $b4 = $l3 cmp 0L >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : if $b4 >= 0
org.joda.time.field.FieldUtils.safeSubtract : if $b4 >= 0 >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : $l5 = l0 ^ l1
org.joda.time.field.FieldUtils.safeSubtract : $l5 = l0 ^ l1 >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : $b6 = $l5 cmp 0L
org.joda.time.field.FieldUtils.safeSubtract : $b6 = $l5 cmp 0L >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : if $b6 >= 0
org.joda.time.field.FieldUtils.safeSubtract : if $b6 >= 0 >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : return l2
org.joda.time.field.FieldUtils.safeSubtract : return l2 >>>>>>>> org.joda.time.field.PreciseDurationField.getDifferenceAsLong : $l3 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis>
org.joda.time.field.PreciseDurationField.getDifferenceAsLong : $l3 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationField.getDifferenceAsLong : $l4 = l2 / $l3
org.joda.time.field.PreciseDurationField.getDifferenceAsLong : $l4 = l2 / $l3 >>>>>>>> org.joda.time.field.PreciseDurationField.getDifferenceAsLong : return $l4
org.joda.time.field.PreciseDurationField.getDifferenceAsLong : return $l4 >>>>>>>> org.joda.time.field.BaseDurationField.getDifference : $i3 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>($l2)
org.joda.time.field.BaseDurationField.getDifference : $i3 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>($l2) >>>>>>>> org.joda.time.field.BaseDurationField.getDifference : return $i3
org.joda.time.field.BaseDurationField.getDifference : return $i3 >>>>>>>> org.joda.time.chrono.BaseChronology.get : return r2
org.joda.time.chrono.BaseChronology.get : return r2 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r12 = $r23
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r12 = $r23 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $b25 = l3 cmp l4
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $b25 = l3 cmp l4 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if $b25 == 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if $b25 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $b26 = l5 cmp l6
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $b26 = l5 cmp l6 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if $b26 != 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if $b26 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : i12 = i12 + 1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : i12 = i12 + 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : goto [?= $i13 = lengthof r6]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : goto [?= $i13 = lengthof r6] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : i6 = i6 + -1
org.joda.time.chrono.BasicGJChronology.getYearDifference : i6 = i6 + -1 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r7 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r7 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : i8 = virtualinvoke $r7.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l1, i4, i5)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : i8 = virtualinvoke $r7.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l1, i4, i5) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : if i8 <= i7
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : if i8 <= i7 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $z3 = virtualinvoke r10.<java.lang.String: boolean equals(java.lang.Object)>(r11)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $z3 = virtualinvoke r10.<java.lang.String: boolean equals(java.lang.Object)>(r11) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if $z3 == 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if $z3 == 0 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.add : return l0
org.joda.time.chrono.BasicYearDateTimeField.add : return l0 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : l6 = l6 - 1L
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : l6 = l6 - 1L >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i24 = i8
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i24 = i8 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : l4 = l4 - 86400000L
org.joda.time.chrono.BasicGJChronology.getYearDifference : l4 = l4 - 86400000L >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : $z1 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i2)
org.joda.time.chrono.BasicGJChronology.getYearDifference : $z1 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i2) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : if $z1 != 0
org.joda.time.chrono.BasicGJChronology.getYearDifference : if $z1 != 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : l5 = l5 - 86400000L
org.joda.time.chrono.BasicGJChronology.getYearDifference : l5 = l5 - 86400000L >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : goto [?= i6 = i2 - i3]
org.joda.time.chrono.BasicGJChronology.getYearDifference : goto [?= i6 = i2 - i3] >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r8 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r8 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r9 = virtualinvoke $r8.<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r9 = virtualinvoke $r8.<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField dayOfMonth()>() >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : l1 = virtualinvoke $r9.<org.joda.time.DateTimeField: long set(long,int)>(l1, i7)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : l1 = virtualinvoke $r9.<org.joda.time.DateTimeField: long set(long,int)>(l1, i7) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if r2 == null
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if r2 == null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r51 = r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r51 = r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r52 = virtualinvoke $r51.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String getNameKey()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r52 = virtualinvoke $r51.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String getNameKey()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r53 = r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r53 = r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r54 = virtualinvoke $r53.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String getNameKey()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r54 = virtualinvoke $r53.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String getNameKey()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $z7 = virtualinvoke $r52.<java.lang.String: boolean equals(java.lang.Object)>($r54)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $z7 = virtualinvoke $r52.<java.lang.String: boolean equals(java.lang.Object)>($r54) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if $z7 == 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if $z7 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r73 = new org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r73 = new org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if z0 == 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if z0 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r75 = r0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r75 = r0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : goto [?= specialinvoke $r73.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void <init>(java.lang.String,long[],int[],int[],java.lang.String[],org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>($r75, r3, r4, r5, r6, r2)]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : goto [?= specialinvoke $r73.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void <init>(java.lang.String,long[],int[],int[],java.lang.String[],org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>($r75, r3, r4, r5, r6, r2)] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : specialinvoke $r73.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void <init>(java.lang.String,long[],int[],int[],java.lang.String[],org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>($r75, r3, r4, r5, r6, r2)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : specialinvoke $r73.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void <init>(java.lang.String,long[],int[],int[],java.lang.String[],org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>($r75, r3, r4, r5, r6, r2) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : return $r73
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : return $r73 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $z4 = virtualinvoke r20.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean isCachable()>()
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $z4 = virtualinvoke r20.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean isCachable()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.isCachable : $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.isCachable : $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.isCachable : if $r2 == null
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.isCachable : if $r2 == null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.isCachable : return 1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.isCachable : return 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if $z4 == 0
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if $z4 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r21 = staticinvoke <org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone forZone(org.joda.time.DateTimeZone)>(r20)
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r21 = staticinvoke <org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone forZone(org.joda.time.DateTimeZone)>(r20) >>>>>>>> org.joda.time.tz.CachedDateTimeZone.forZone : $z0 = r0 instanceof org.joda.time.tz.CachedDateTimeZone
org.joda.time.tz.CachedDateTimeZone.forZone : $z0 = r0 instanceof org.joda.time.tz.CachedDateTimeZone >>>>>>>> org.joda.time.tz.CachedDateTimeZone.forZone : if $z0 == 0
org.joda.time.tz.CachedDateTimeZone.forZone : if $z0 == 0 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.forZone : $r2 = new org.joda.time.tz.CachedDateTimeZone
org.joda.time.tz.CachedDateTimeZone.forZone : $r2 = new org.joda.time.tz.CachedDateTimeZone >>>>>>>> org.joda.time.tz.CachedDateTimeZone.forZone : specialinvoke $r2.<org.joda.time.tz.CachedDateTimeZone: void <init>(org.joda.time.DateTimeZone)>(r0)
org.joda.time.tz.CachedDateTimeZone.forZone : specialinvoke $r2.<org.joda.time.tz.CachedDateTimeZone: void <init>(org.joda.time.DateTimeZone)>(r0) >>>>>>>> org.joda.time.DateTimeZone.getID : $r1 = r0.<org.joda.time.DateTimeZone: java.lang.String iID>
org.joda.time.DateTimeZone.getID : $r1 = r0.<org.joda.time.DateTimeZone: java.lang.String iID> >>>>>>>> org.joda.time.DateTimeZone.getID : return $r1
org.joda.time.DateTimeZone.getID : return $r1 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.forZone : return $r2
org.joda.time.tz.CachedDateTimeZone.forZone : return $r2 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : return $r21
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : return $r21 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.isFixed : $r1 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone>
org.joda.time.tz.CachedDateTimeZone.isFixed : $r1 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.tz.CachedDateTimeZone.isFixed : $z0 = virtualinvoke $r1.<org.joda.time.DateTimeZone: boolean isFixed()>()
org.joda.time.tz.CachedDateTimeZone.isFixed : $z0 = virtualinvoke $r1.<org.joda.time.DateTimeZone: boolean isFixed()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.isFixed : return 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.isFixed : return 0 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.isFixed : return $z0
