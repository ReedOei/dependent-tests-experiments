org.joda.time.DateTimeUtils.setCurrentMillisSystem : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>() >>>>>>>> org.joda.time.DateTimeUtils.checkPermission : r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>()
org.joda.time.DateTimeUtils.checkPermission : r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>() >>>>>>>> org.joda.time.DateTimeUtils.checkPermission : if r0 == null
org.joda.time.DateTimeUtils.checkPermission : if r0 == null >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisSystem : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$SystemMillisProvider SYSTEM_MILLIS_PROVIDER>
org.joda.time.DateTimeUtils.setCurrentMillisSystem : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$SystemMillisProvider SYSTEM_MILLIS_PROVIDER> >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisSystem : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0
org.joda.time.DateTimeUtils.setCurrentMillisSystem : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0 >>>>>>>> org.joda.time.DateTimeZone.setDefault : r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>()
org.joda.time.DateTimeZone.setDefault : r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>() >>>>>>>> org.joda.time.DateTimeZone.setDefault : if r1 == null
org.joda.time.DateTimeZone.setDefault : if r1 == null >>>>>>>> org.joda.time.DateTimeZone.setDefault : if r0 != null
org.joda.time.DateTimeZone.setDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.setDefault : $r6 = class "org/joda/time/DateTimeZone"
org.joda.time.DateTimeZone.setDefault : $r6 = class "org/joda/time/DateTimeZone" >>>>>>>> org.joda.time.DateTimeZone.setDefault : r3 = $r6
org.joda.time.DateTimeZone.setDefault : r3 = $r6 >>>>>>>> org.joda.time.DateTimeZone.setDefault : entermonitor $r6
org.joda.time.DateTimeZone.setDefault : entermonitor $r6 >>>>>>>> org.joda.time.DateTimeZone.setDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r0
org.joda.time.DateTimeZone.setDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r0 >>>>>>>> org.joda.time.DateTimeZone.setDefault : exitmonitor r3
org.joda.time.DateTimeZone.setDefault : exitmonitor r3 >>>>>>>> org.joda.time.DateTimeZone.setDefault : goto [?= return]
org.joda.time.DateTimeZone.setDefault : goto [?= return] >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>()
org.joda.time.DateTimeUtils.setCurrentMillisFixed : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>() >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : $r0 = new org.joda.time.DateTimeUtils$FixedMillisProvider
org.joda.time.DateTimeUtils.setCurrentMillisFixed : $r0 = new org.joda.time.DateTimeUtils$FixedMillisProvider >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : specialinvoke $r0.<org.joda.time.DateTimeUtils$FixedMillisProvider: void <init>(long)>(l0)
org.joda.time.DateTimeUtils.setCurrentMillisFixed : specialinvoke $r0.<org.joda.time.DateTimeUtils$FixedMillisProvider: void <init>(long)>(l0) >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0
org.joda.time.DateTimeUtils.setCurrentMillisFixed : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0 >>>>>>>> org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> >>>>>>>> org.joda.time.DateTimeZone.getDefault : if r0 != null
org.joda.time.DateTimeZone.getDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.DateTimeZone.getDefault : return r0 >>>>>>>> org.joda.time.DurationFieldType.centuries : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType CENTURIES_TYPE>
org.joda.time.DurationFieldType.centuries : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType CENTURIES_TYPE> >>>>>>>> org.joda.time.DurationFieldType.centuries : return $r0
org.joda.time.DurationFieldType.centuries : return $r0 >>>>>>>> org.joda.time.DurationFieldType.months : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MONTHS_TYPE>
org.joda.time.DurationFieldType.months : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MONTHS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.months : return $r0
org.joda.time.DurationFieldType.months : return $r0 >>>>>>>> org.joda.time.PeriodType.forFields : if r0 == null
org.joda.time.PeriodType.forFields : if r0 == null >>>>>>>> org.joda.time.PeriodType.forFields : $i1 = lengthof r0
org.joda.time.PeriodType.forFields : $i1 = lengthof r0 >>>>>>>> org.joda.time.PeriodType.forFields : if $i1 != 0
org.joda.time.PeriodType.forFields : if $i1 != 0 >>>>>>>> org.joda.time.PeriodType.forFields : i0 = 0
org.joda.time.PeriodType.forFields : i0 = 0 >>>>>>>> org.joda.time.PeriodType.forFields : $i2 = lengthof r0
org.joda.time.PeriodType.forFields : $i2 = lengthof r0 >>>>>>>> org.joda.time.PeriodType.forFields : if i0 >= $i2
org.joda.time.PeriodType.forFields : if i0 >= $i2 >>>>>>>> org.joda.time.PeriodType.forFields : $r8 = r0[i0]
org.joda.time.PeriodType.forFields : $r8 = r0[i0] >>>>>>>> org.joda.time.PeriodType.forFields : if $r8 != null
org.joda.time.PeriodType.forFields : if $r8 != null >>>>>>>> org.joda.time.PeriodType.forFields : i0 = i0 + 1
org.joda.time.PeriodType.forFields : i0 = i0 + 1 >>>>>>>> org.joda.time.PeriodType.forFields : goto [?= $i2 = lengthof r0]
org.joda.time.PeriodType.forFields : goto [?= $i2 = lengthof r0] >>>>>>>> org.joda.time.PeriodType.forFields : r10 = <org.joda.time.PeriodType: java.util.Map cTypes>
org.joda.time.PeriodType.forFields : r10 = <org.joda.time.PeriodType: java.util.Map cTypes> >>>>>>>> org.joda.time.PeriodType.forFields : $z0 = interfaceinvoke r10.<java.util.Map: boolean isEmpty()>()
org.joda.time.PeriodType.forFields : $z0 = interfaceinvoke r10.<java.util.Map: boolean isEmpty()>() >>>>>>>> org.joda.time.PeriodType.forFields : if $z0 == 0
org.joda.time.PeriodType.forFields : if $z0 == 0 >>>>>>>> org.joda.time.PeriodType.forFields : $r62 = new org.joda.time.PeriodType
org.joda.time.PeriodType.forFields : $r62 = new org.joda.time.PeriodType >>>>>>>> org.joda.time.PeriodType.forFields : specialinvoke $r62.<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>(null, r0, null)
org.joda.time.PeriodType.forFields : specialinvoke $r62.<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>(null, r0, null) >>>>>>>> org.joda.time.PeriodType.forFields : r1 = $r62
org.joda.time.PeriodType.forFields : r1 = $r62 >>>>>>>> org.joda.time.PeriodType.forFields : r2 = interfaceinvoke r10.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.joda.time.PeriodType.forFields : r2 = interfaceinvoke r10.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.joda.time.PeriodType.hashCode : i0 = 0
org.joda.time.PeriodType.hashCode : i0 = 0 >>>>>>>> org.joda.time.PeriodType.hashCode : i1 = 0
org.joda.time.PeriodType.hashCode : i1 = 0 >>>>>>>> org.joda.time.PeriodType.hashCode : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.PeriodType.hashCode : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes> >>>>>>>> org.joda.time.PeriodType.hashCode : $i2 = lengthof $r1
org.joda.time.PeriodType.hashCode : $i2 = lengthof $r1 >>>>>>>> org.joda.time.PeriodType.hashCode : if i1 >= $i2
org.joda.time.PeriodType.hashCode : if i1 >= $i2 >>>>>>>> org.joda.time.PeriodType.hashCode : $r2 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.PeriodType.hashCode : $r2 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes> >>>>>>>> org.joda.time.PeriodType.hashCode : $r3 = $r2[i1]
org.joda.time.PeriodType.hashCode : $r3 = $r2[i1] >>>>>>>> org.joda.time.PeriodType.hashCode : $i3 = virtualinvoke $r3.<java.lang.Object: int hashCode()>()
org.joda.time.PeriodType.hashCode : $i3 = virtualinvoke $r3.<java.lang.Object: int hashCode()>() >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.hashCode : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal>
org.joda.time.DurationFieldType$StandardDurationFieldType.hashCode : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal> >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.hashCode : return $b0
org.joda.time.DurationFieldType$StandardDurationFieldType.hashCode : return $b0 >>>>>>>> org.joda.time.PeriodType.hashCode : i0 = i0 + $i3
org.joda.time.PeriodType.hashCode : i0 = i0 + $i3 >>>>>>>> org.joda.time.PeriodType.hashCode : i1 = i1 + 1
org.joda.time.PeriodType.hashCode : i1 = i1 + 1 >>>>>>>> org.joda.time.PeriodType.hashCode : goto [?= $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>]
org.joda.time.PeriodType.hashCode : goto [?= $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>] >>>>>>>> org.joda.time.PeriodType.hashCode : return i0
org.joda.time.PeriodType.hashCode : return i0 >>>>>>>> org.joda.time.PeriodType.equals : if r0 != r1
org.joda.time.PeriodType.equals : if r0 != r1 >>>>>>>> org.joda.time.PeriodType.equals : $z0 = r1 instanceof org.joda.time.PeriodType
org.joda.time.PeriodType.equals : $z0 = r1 instanceof org.joda.time.PeriodType >>>>>>>> org.joda.time.PeriodType.equals : if $z0 != 0
org.joda.time.PeriodType.equals : if $z0 != 0 >>>>>>>> org.joda.time.PeriodType.equals : r2 = (org.joda.time.PeriodType) r1
org.joda.time.PeriodType.equals : r2 = (org.joda.time.PeriodType) r1 >>>>>>>> org.joda.time.PeriodType.equals : $r3 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.PeriodType.equals : $r3 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes> >>>>>>>> org.joda.time.PeriodType.equals : $r4 = r2.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.PeriodType.equals : $r4 = r2.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes> >>>>>>>> org.joda.time.PeriodType.equals : $z1 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r3, $r4)
org.joda.time.PeriodType.equals : $z1 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r3, $r4) >>>>>>>> org.joda.time.PeriodType.equals : return $z1
org.joda.time.PeriodType.equals : return $z1 >>>>>>>> org.joda.time.PeriodType.forFields : $z1 = r2 instanceof org.joda.time.PeriodType
org.joda.time.PeriodType.forFields : $z1 = r2 instanceof org.joda.time.PeriodType >>>>>>>> org.joda.time.PeriodType.forFields : if $z1 == 0
org.joda.time.PeriodType.forFields : if $z1 == 0 >>>>>>>> org.joda.time.PeriodType.forFields : if r2 == null
org.joda.time.PeriodType.forFields : if r2 == null >>>>>>>> org.joda.time.PeriodType.forFields : r3 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType standard()>()
org.joda.time.PeriodType.forFields : r3 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType standard()>() >>>>>>>> org.joda.time.PeriodType.standard : r0 = <org.joda.time.PeriodType: org.joda.time.PeriodType cStandard>
org.joda.time.PeriodType.standard : r0 = <org.joda.time.PeriodType: org.joda.time.PeriodType cStandard> >>>>>>>> org.joda.time.PeriodType.standard : if r0 != null
org.joda.time.PeriodType.standard : if r0 != null >>>>>>>> org.joda.time.PeriodType.standard : return r0
org.joda.time.PeriodType.standard : return r0 >>>>>>>> org.joda.time.PeriodType.forFields : $r69 = new java.util.ArrayList
org.joda.time.PeriodType.forFields : $r69 = new java.util.ArrayList >>>>>>>> org.joda.time.PeriodType.forFields : $r70 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r0)
org.joda.time.PeriodType.forFields : $r70 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r0) >>>>>>>> org.joda.time.PeriodType.forFields : specialinvoke $r69.<java.util.ArrayList: void <init>(java.util.Collection)>($r70)
org.joda.time.PeriodType.forFields : specialinvoke $r69.<java.util.ArrayList: void <init>(java.util.Collection)>($r70) >>>>>>>> org.joda.time.PeriodType.forFields : r4 = $r69
org.joda.time.PeriodType.forFields : r4 = $r69 >>>>>>>> org.joda.time.PeriodType.forFields : $r71 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>()
org.joda.time.PeriodType.forFields : $r71 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>() >>>>>>>> org.joda.time.DurationFieldType.years : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType YEARS_TYPE>
org.joda.time.DurationFieldType.years : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType YEARS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.years : return $r0
org.joda.time.DurationFieldType.years : return $r0 >>>>>>>> org.joda.time.PeriodType.forFields : $z2 = interfaceinvoke r4.<java.util.List: boolean remove(java.lang.Object)>($r71)
org.joda.time.PeriodType.forFields : $z2 = interfaceinvoke r4.<java.util.List: boolean remove(java.lang.Object)>($r71) >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.equals : if r0 != r1
org.joda.time.DurationFieldType$StandardDurationFieldType.equals : if r0 != r1 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.equals : $z0 = r1 instanceof org.joda.time.DurationFieldType$StandardDurationFieldType
org.joda.time.DurationFieldType$StandardDurationFieldType.equals : $z0 = r1 instanceof org.joda.time.DurationFieldType$StandardDurationFieldType >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.equals : if $z0 == 0
org.joda.time.DurationFieldType$StandardDurationFieldType.equals : if $z0 == 0 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.equals : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal>
org.joda.time.DurationFieldType$StandardDurationFieldType.equals : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal> >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.equals : $r2 = (org.joda.time.DurationFieldType$StandardDurationFieldType) r1
org.joda.time.DurationFieldType$StandardDurationFieldType.equals : $r2 = (org.joda.time.DurationFieldType$StandardDurationFieldType) r1 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.equals : $b1 = $r2.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal>
org.joda.time.DurationFieldType$StandardDurationFieldType.equals : $b1 = $r2.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal> >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.equals : if $b0 != $b1
org.joda.time.DurationFieldType$StandardDurationFieldType.equals : if $b0 != $b1 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.equals : $z1 = 0
org.joda.time.DurationFieldType$StandardDurationFieldType.equals : $z1 = 0 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.equals : return $z1
org.joda.time.DurationFieldType$StandardDurationFieldType.equals : return $z1 >>>>>>>> org.joda.time.PeriodType.forFields : if $z2 != 0
org.joda.time.PeriodType.forFields : if $z2 != 0 >>>>>>>> org.joda.time.PeriodType.forFields : r3 = virtualinvoke r3.<org.joda.time.PeriodType: org.joda.time.PeriodType withYearsRemoved()>()
org.joda.time.PeriodType.forFields : r3 = virtualinvoke r3.<org.joda.time.PeriodType: org.joda.time.PeriodType withYearsRemoved()>() >>>>>>>> org.joda.time.PeriodType.withYearsRemoved : $r1 = specialinvoke r0.<org.joda.time.PeriodType: org.joda.time.PeriodType withFieldRemoved(int,java.lang.String)>(0, "NoYears")
org.joda.time.PeriodType.withYearsRemoved : $r1 = specialinvoke r0.<org.joda.time.PeriodType: org.joda.time.PeriodType withFieldRemoved(int,java.lang.String)>(0, "NoYears") >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : $r3 = r0.<org.joda.time.PeriodType: int[] iIndices>
org.joda.time.PeriodType.withFieldRemoved : $r3 = r0.<org.joda.time.PeriodType: int[] iIndices> >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : i1 = $r3[i0]
org.joda.time.PeriodType.withFieldRemoved : i1 = $r3[i0] >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : if i1 != -1
org.joda.time.PeriodType.withFieldRemoved : if i1 != -1 >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : $i4 = virtualinvoke r0.<org.joda.time.PeriodType: int size()>()
org.joda.time.PeriodType.withFieldRemoved : $i4 = virtualinvoke r0.<org.joda.time.PeriodType: int size()>() >>>>>>>> org.joda.time.PeriodType.size : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.PeriodType.size : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes> >>>>>>>> org.joda.time.PeriodType.size : $i0 = lengthof $r1
org.joda.time.PeriodType.size : $i0 = lengthof $r1 >>>>>>>> org.joda.time.PeriodType.size : return $i0
org.joda.time.PeriodType.size : return $i0 >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : $i5 = $i4 - 1
org.joda.time.PeriodType.withFieldRemoved : $i5 = $i4 - 1 >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : r2 = newarray (org.joda.time.DurationFieldType)[$i5]
org.joda.time.PeriodType.withFieldRemoved : r2 = newarray (org.joda.time.DurationFieldType)[$i5] >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : i2 = 0
org.joda.time.PeriodType.withFieldRemoved : i2 = 0 >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : $r4 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.PeriodType.withFieldRemoved : $r4 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes> >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : $i6 = lengthof $r4
org.joda.time.PeriodType.withFieldRemoved : $i6 = lengthof $r4 >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : if i2 >= $i6
org.joda.time.PeriodType.withFieldRemoved : if i2 >= $i6 >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : if i2 >= i1
org.joda.time.PeriodType.withFieldRemoved : if i2 >= i1 >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : if i2 <= i1
org.joda.time.PeriodType.withFieldRemoved : if i2 <= i1 >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : i2 = i2 + 1
org.joda.time.PeriodType.withFieldRemoved : i2 = i2 + 1 >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : goto [?= $r4 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>]
org.joda.time.PeriodType.withFieldRemoved : goto [?= $r4 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>] >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : $i7 = i2 - 1
org.joda.time.PeriodType.withFieldRemoved : $i7 = i2 - 1 >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : $r7 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.PeriodType.withFieldRemoved : $r7 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes> >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : $r8 = $r7[i2]
org.joda.time.PeriodType.withFieldRemoved : $r8 = $r7[i2] >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : r2[$i7] = $r8
org.joda.time.PeriodType.withFieldRemoved : r2[$i7] = $r8 >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : r9 = newarray (int)[8]
org.joda.time.PeriodType.withFieldRemoved : r9 = newarray (int)[8] >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : i3 = 0
org.joda.time.PeriodType.withFieldRemoved : i3 = 0 >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : $i8 = lengthof r9
org.joda.time.PeriodType.withFieldRemoved : $i8 = lengthof r9 >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : if i3 >= $i8
org.joda.time.PeriodType.withFieldRemoved : if i3 >= $i8 >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : if i3 >= i0
org.joda.time.PeriodType.withFieldRemoved : if i3 >= i0 >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : if i3 <= i0
org.joda.time.PeriodType.withFieldRemoved : if i3 <= i0 >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : r9[i3] = -1
org.joda.time.PeriodType.withFieldRemoved : r9[i3] = -1 >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : i3 = i3 + 1
org.joda.time.PeriodType.withFieldRemoved : i3 = i3 + 1 >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : goto [?= $i8 = lengthof r9]
org.joda.time.PeriodType.withFieldRemoved : goto [?= $i8 = lengthof r9] >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : $i10 = i3
org.joda.time.PeriodType.withFieldRemoved : $i10 = i3 >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : $r12 = r0.<org.joda.time.PeriodType: int[] iIndices>
org.joda.time.PeriodType.withFieldRemoved : $r12 = r0.<org.joda.time.PeriodType: int[] iIndices> >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : $i11 = $r12[i3]
org.joda.time.PeriodType.withFieldRemoved : $i11 = $r12[i3] >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : if $i11 != -1
org.joda.time.PeriodType.withFieldRemoved : if $i11 != -1 >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : $r13 = r0.<org.joda.time.PeriodType: int[] iIndices>
org.joda.time.PeriodType.withFieldRemoved : $r13 = r0.<org.joda.time.PeriodType: int[] iIndices> >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : $i13 = $r13[i3]
org.joda.time.PeriodType.withFieldRemoved : $i13 = $r13[i3] >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : $i12 = $i13 - 1
org.joda.time.PeriodType.withFieldRemoved : $i12 = $i13 - 1 >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : r9[$i10] = $i12
org.joda.time.PeriodType.withFieldRemoved : r9[$i10] = $i12 >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : goto [?= i3 = i3 + 1]
org.joda.time.PeriodType.withFieldRemoved : goto [?= i3 = i3 + 1] >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : $r14 = new org.joda.time.PeriodType
org.joda.time.PeriodType.withFieldRemoved : $r14 = new org.joda.time.PeriodType >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : $r15 = new java.lang.StringBuilder
org.joda.time.PeriodType.withFieldRemoved : $r15 = new java.lang.StringBuilder >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : specialinvoke $r15.<java.lang.StringBuilder: void <init>()>()
org.joda.time.PeriodType.withFieldRemoved : specialinvoke $r15.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : $r16 = virtualinvoke r0.<org.joda.time.PeriodType: java.lang.String getName()>()
org.joda.time.PeriodType.withFieldRemoved : $r16 = virtualinvoke r0.<org.joda.time.PeriodType: java.lang.String getName()>() >>>>>>>> org.joda.time.PeriodType.getName : $r1 = r0.<org.joda.time.PeriodType: java.lang.String iName>
org.joda.time.PeriodType.getName : $r1 = r0.<org.joda.time.PeriodType: java.lang.String iName> >>>>>>>> org.joda.time.PeriodType.getName : return $r1
org.joda.time.PeriodType.getName : return $r1 >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16)
org.joda.time.PeriodType.withFieldRemoved : $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.joda.time.PeriodType.withFieldRemoved : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>()
org.joda.time.PeriodType.withFieldRemoved : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : specialinvoke $r14.<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>($r19, r2, r9)
org.joda.time.PeriodType.withFieldRemoved : specialinvoke $r14.<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>($r19, r2, r9) >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : return $r14
org.joda.time.PeriodType.withFieldRemoved : return $r14 >>>>>>>> org.joda.time.PeriodType.withYearsRemoved : return $r1
org.joda.time.PeriodType.withYearsRemoved : return $r1 >>>>>>>> org.joda.time.PeriodType.forFields : $r72 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>()
org.joda.time.PeriodType.forFields : $r72 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>() >>>>>>>> org.joda.time.PeriodType.forFields : $z3 = interfaceinvoke r4.<java.util.List: boolean remove(java.lang.Object)>($r72)
org.joda.time.PeriodType.forFields : $z3 = interfaceinvoke r4.<java.util.List: boolean remove(java.lang.Object)>($r72) >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.equals : return 1
org.joda.time.DurationFieldType$StandardDurationFieldType.equals : return 1 >>>>>>>> org.joda.time.PeriodType.forFields : if $z3 != 0
org.joda.time.PeriodType.forFields : if $z3 != 0 >>>>>>>> org.joda.time.PeriodType.forFields : $r73 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>()
org.joda.time.PeriodType.forFields : $r73 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>() >>>>>>>> org.joda.time.DurationFieldType.weeks : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType WEEKS_TYPE>
org.joda.time.DurationFieldType.weeks : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType WEEKS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.weeks : return $r0
org.joda.time.DurationFieldType.weeks : return $r0 >>>>>>>> org.joda.time.PeriodType.forFields : $z4 = interfaceinvoke r4.<java.util.List: boolean remove(java.lang.Object)>($r73)
org.joda.time.PeriodType.forFields : $z4 = interfaceinvoke r4.<java.util.List: boolean remove(java.lang.Object)>($r73) >>>>>>>> org.joda.time.PeriodType.forFields : if $z4 != 0
org.joda.time.PeriodType.forFields : if $z4 != 0 >>>>>>>> org.joda.time.PeriodType.forFields : r3 = virtualinvoke r3.<org.joda.time.PeriodType: org.joda.time.PeriodType withWeeksRemoved()>()
org.joda.time.PeriodType.forFields : r3 = virtualinvoke r3.<org.joda.time.PeriodType: org.joda.time.PeriodType withWeeksRemoved()>() >>>>>>>> org.joda.time.PeriodType.withWeeksRemoved : $r1 = specialinvoke r0.<org.joda.time.PeriodType: org.joda.time.PeriodType withFieldRemoved(int,java.lang.String)>(2, "NoWeeks")
org.joda.time.PeriodType.withWeeksRemoved : $r1 = specialinvoke r0.<org.joda.time.PeriodType: org.joda.time.PeriodType withFieldRemoved(int,java.lang.String)>(2, "NoWeeks") >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : $r5 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.PeriodType.withFieldRemoved : $r5 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes> >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : $r6 = $r5[i2]
org.joda.time.PeriodType.withFieldRemoved : $r6 = $r5[i2] >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : r2[i2] = $r6
org.joda.time.PeriodType.withFieldRemoved : r2[i2] = $r6 >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : goto [?= i2 = i2 + 1]
org.joda.time.PeriodType.withFieldRemoved : goto [?= i2 = i2 + 1] >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : $r10 = r0.<org.joda.time.PeriodType: int[] iIndices>
org.joda.time.PeriodType.withFieldRemoved : $r10 = r0.<org.joda.time.PeriodType: int[] iIndices> >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : $i9 = $r10[i3]
org.joda.time.PeriodType.withFieldRemoved : $i9 = $r10[i3] >>>>>>>> org.joda.time.PeriodType.withFieldRemoved : r9[i3] = $i9
org.joda.time.PeriodType.withFieldRemoved : r9[i3] = $i9 >>>>>>>> org.joda.time.PeriodType.withWeeksRemoved : return $r1
org.joda.time.PeriodType.withWeeksRemoved : return $r1 >>>>>>>> org.joda.time.PeriodType.forFields : $r74 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>()
org.joda.time.PeriodType.forFields : $r74 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>() >>>>>>>> org.joda.time.DurationFieldType.days : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType DAYS_TYPE>
org.joda.time.DurationFieldType.days : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType DAYS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.days : return $r0
org.joda.time.DurationFieldType.days : return $r0 >>>>>>>> org.joda.time.PeriodType.forFields : $z5 = interfaceinvoke r4.<java.util.List: boolean remove(java.lang.Object)>($r74)
org.joda.time.PeriodType.forFields : $z5 = interfaceinvoke r4.<java.util.List: boolean remove(java.lang.Object)>($r74) >>>>>>>> org.joda.time.PeriodType.forFields : if $z5 != 0
org.joda.time.PeriodType.forFields : if $z5 != 0 >>>>>>>> org.joda.time.PeriodType.forFields : r3 = virtualinvoke r3.<org.joda.time.PeriodType: org.joda.time.PeriodType withDaysRemoved()>()
org.joda.time.PeriodType.forFields : r3 = virtualinvoke r3.<org.joda.time.PeriodType: org.joda.time.PeriodType withDaysRemoved()>() >>>>>>>> org.joda.time.PeriodType.withDaysRemoved : $r1 = specialinvoke r0.<org.joda.time.PeriodType: org.joda.time.PeriodType withFieldRemoved(int,java.lang.String)>(3, "NoDays")
org.joda.time.PeriodType.withDaysRemoved : $r1 = specialinvoke r0.<org.joda.time.PeriodType: org.joda.time.PeriodType withFieldRemoved(int,java.lang.String)>(3, "NoDays") >>>>>>>> org.joda.time.PeriodType.withDaysRemoved : return $r1
org.joda.time.PeriodType.withDaysRemoved : return $r1 >>>>>>>> org.joda.time.PeriodType.forFields : $r75 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>()
org.joda.time.PeriodType.forFields : $r75 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>() >>>>>>>> org.joda.time.DurationFieldType.hours : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType HOURS_TYPE>
org.joda.time.DurationFieldType.hours : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType HOURS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.hours : return $r0
org.joda.time.DurationFieldType.hours : return $r0 >>>>>>>> org.joda.time.PeriodType.forFields : $z6 = interfaceinvoke r4.<java.util.List: boolean remove(java.lang.Object)>($r75)
org.joda.time.PeriodType.forFields : $z6 = interfaceinvoke r4.<java.util.List: boolean remove(java.lang.Object)>($r75) >>>>>>>> org.joda.time.PeriodType.forFields : if $z6 != 0
org.joda.time.PeriodType.forFields : if $z6 != 0 >>>>>>>> org.joda.time.PeriodType.forFields : r3 = virtualinvoke r3.<org.joda.time.PeriodType: org.joda.time.PeriodType withHoursRemoved()>()
org.joda.time.PeriodType.forFields : r3 = virtualinvoke r3.<org.joda.time.PeriodType: org.joda.time.PeriodType withHoursRemoved()>() >>>>>>>> org.joda.time.PeriodType.withHoursRemoved : $r1 = specialinvoke r0.<org.joda.time.PeriodType: org.joda.time.PeriodType withFieldRemoved(int,java.lang.String)>(4, "NoHours")
org.joda.time.PeriodType.withHoursRemoved : $r1 = specialinvoke r0.<org.joda.time.PeriodType: org.joda.time.PeriodType withFieldRemoved(int,java.lang.String)>(4, "NoHours") >>>>>>>> org.joda.time.PeriodType.withHoursRemoved : return $r1
org.joda.time.PeriodType.withHoursRemoved : return $r1 >>>>>>>> org.joda.time.PeriodType.forFields : $r76 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>()
org.joda.time.PeriodType.forFields : $r76 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>() >>>>>>>> org.joda.time.DurationFieldType.minutes : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MINUTES_TYPE>
org.joda.time.DurationFieldType.minutes : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MINUTES_TYPE> >>>>>>>> org.joda.time.DurationFieldType.minutes : return $r0
org.joda.time.DurationFieldType.minutes : return $r0 >>>>>>>> org.joda.time.PeriodType.forFields : $z7 = interfaceinvoke r4.<java.util.List: boolean remove(java.lang.Object)>($r76)
org.joda.time.PeriodType.forFields : $z7 = interfaceinvoke r4.<java.util.List: boolean remove(java.lang.Object)>($r76) >>>>>>>> org.joda.time.PeriodType.forFields : if $z7 != 0
org.joda.time.PeriodType.forFields : if $z7 != 0 >>>>>>>> org.joda.time.PeriodType.forFields : r3 = virtualinvoke r3.<org.joda.time.PeriodType: org.joda.time.PeriodType withMinutesRemoved()>()
org.joda.time.PeriodType.forFields : r3 = virtualinvoke r3.<org.joda.time.PeriodType: org.joda.time.PeriodType withMinutesRemoved()>() >>>>>>>> org.joda.time.PeriodType.withMinutesRemoved : $r1 = specialinvoke r0.<org.joda.time.PeriodType: org.joda.time.PeriodType withFieldRemoved(int,java.lang.String)>(5, "NoMinutes")
org.joda.time.PeriodType.withMinutesRemoved : $r1 = specialinvoke r0.<org.joda.time.PeriodType: org.joda.time.PeriodType withFieldRemoved(int,java.lang.String)>(5, "NoMinutes") >>>>>>>> org.joda.time.PeriodType.withMinutesRemoved : return $r1
org.joda.time.PeriodType.withMinutesRemoved : return $r1 >>>>>>>> org.joda.time.PeriodType.forFields : $r77 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>()
org.joda.time.PeriodType.forFields : $r77 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>() >>>>>>>> org.joda.time.DurationFieldType.seconds : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType SECONDS_TYPE>
org.joda.time.DurationFieldType.seconds : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType SECONDS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.seconds : return $r0
org.joda.time.DurationFieldType.seconds : return $r0 >>>>>>>> org.joda.time.PeriodType.forFields : $z8 = interfaceinvoke r4.<java.util.List: boolean remove(java.lang.Object)>($r77)
org.joda.time.PeriodType.forFields : $z8 = interfaceinvoke r4.<java.util.List: boolean remove(java.lang.Object)>($r77) >>>>>>>> org.joda.time.PeriodType.forFields : if $z8 != 0
org.joda.time.PeriodType.forFields : if $z8 != 0 >>>>>>>> org.joda.time.PeriodType.forFields : r3 = virtualinvoke r3.<org.joda.time.PeriodType: org.joda.time.PeriodType withSecondsRemoved()>()
org.joda.time.PeriodType.forFields : r3 = virtualinvoke r3.<org.joda.time.PeriodType: org.joda.time.PeriodType withSecondsRemoved()>() >>>>>>>> org.joda.time.PeriodType.withSecondsRemoved : $r1 = specialinvoke r0.<org.joda.time.PeriodType: org.joda.time.PeriodType withFieldRemoved(int,java.lang.String)>(6, "NoSeconds")
org.joda.time.PeriodType.withSecondsRemoved : $r1 = specialinvoke r0.<org.joda.time.PeriodType: org.joda.time.PeriodType withFieldRemoved(int,java.lang.String)>(6, "NoSeconds") >>>>>>>> org.joda.time.PeriodType.withSecondsRemoved : return $r1
org.joda.time.PeriodType.withSecondsRemoved : return $r1 >>>>>>>> org.joda.time.PeriodType.forFields : $r78 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>()
org.joda.time.PeriodType.forFields : $r78 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>() >>>>>>>> org.joda.time.DurationFieldType.millis : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MILLIS_TYPE>
org.joda.time.DurationFieldType.millis : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MILLIS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.millis : return $r0
org.joda.time.DurationFieldType.millis : return $r0 >>>>>>>> org.joda.time.PeriodType.forFields : $z9 = interfaceinvoke r4.<java.util.List: boolean remove(java.lang.Object)>($r78)
org.joda.time.PeriodType.forFields : $z9 = interfaceinvoke r4.<java.util.List: boolean remove(java.lang.Object)>($r78) >>>>>>>> org.joda.time.PeriodType.forFields : if $z9 != 0
org.joda.time.PeriodType.forFields : if $z9 != 0 >>>>>>>> org.joda.time.PeriodType.forFields : r3 = virtualinvoke r3.<org.joda.time.PeriodType: org.joda.time.PeriodType withMillisRemoved()>()
org.joda.time.PeriodType.forFields : r3 = virtualinvoke r3.<org.joda.time.PeriodType: org.joda.time.PeriodType withMillisRemoved()>() >>>>>>>> org.joda.time.PeriodType.withMillisRemoved : $r1 = specialinvoke r0.<org.joda.time.PeriodType: org.joda.time.PeriodType withFieldRemoved(int,java.lang.String)>(7, "NoMillis")
org.joda.time.PeriodType.withMillisRemoved : $r1 = specialinvoke r0.<org.joda.time.PeriodType: org.joda.time.PeriodType withFieldRemoved(int,java.lang.String)>(7, "NoMillis") >>>>>>>> org.joda.time.PeriodType.withMillisRemoved : return $r1
org.joda.time.PeriodType.withMillisRemoved : return $r1 >>>>>>>> org.joda.time.PeriodType.forFields : $i3 = interfaceinvoke r4.<java.util.List: int size()>()
org.joda.time.PeriodType.forFields : $i3 = interfaceinvoke r4.<java.util.List: int size()>() >>>>>>>> org.joda.time.PeriodType.forFields : if $i3 <= 0
org.joda.time.PeriodType.forFields : if $i3 <= 0 >>>>>>>> org.joda.time.PeriodType.forFields : interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r4)
org.joda.time.PeriodType.forFields : interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r4) >>>>>>>> org.joda.time.PeriodType.forFields : $r80 = new java.lang.IllegalArgumentException
org.joda.time.PeriodType.forFields : $r80 = new java.lang.IllegalArgumentException >>>>>>>> org.joda.time.PeriodType.forFields : $r81 = new java.lang.StringBuilder
org.joda.time.PeriodType.forFields : $r81 = new java.lang.StringBuilder >>>>>>>> org.joda.time.PeriodType.forFields : specialinvoke $r81.<java.lang.StringBuilder: void <init>()>()
org.joda.time.PeriodType.forFields : specialinvoke $r81.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.joda.time.PeriodType.forFields : $r82 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PeriodType does not support fields: ")
org.joda.time.PeriodType.forFields : $r82 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PeriodType does not support fields: ") >>>>>>>> org.joda.time.PeriodType.forFields : $r83 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4)
org.joda.time.PeriodType.forFields : $r83 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4) >>>>>>>> org.joda.time.DurationFieldType.toString : $r1 = virtualinvoke r0.<org.joda.time.DurationFieldType: java.lang.String getName()>()
org.joda.time.DurationFieldType.toString : $r1 = virtualinvoke r0.<org.joda.time.DurationFieldType: java.lang.String getName()>() >>>>>>>> org.joda.time.DurationFieldType.getName : $r1 = r0.<org.joda.time.DurationFieldType: java.lang.String iName>
org.joda.time.DurationFieldType.getName : $r1 = r0.<org.joda.time.DurationFieldType: java.lang.String iName> >>>>>>>> org.joda.time.DurationFieldType.getName : return $r1
org.joda.time.DurationFieldType.getName : return $r1 >>>>>>>> org.joda.time.DurationFieldType.toString : return $r1
org.joda.time.DurationFieldType.toString : return $r1 >>>>>>>> org.joda.time.PeriodType.forFields : $r84 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.String toString()>()
org.joda.time.PeriodType.forFields : $r84 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.joda.time.PeriodType.forFields : specialinvoke $r80.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r84)
org.joda.time.PeriodType.forFields : specialinvoke $r80.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r84) >>>>>>>> org.joda.time.PeriodType.forFields : throw $r80
org.joda.time.PeriodType.forFields : throw $r80 >>>>>>>> org.joda.time.PeriodType.forFields : $r64 = new java.lang.IllegalArgumentException
org.joda.time.PeriodType.forFields : $r64 = new java.lang.IllegalArgumentException >>>>>>>> org.joda.time.PeriodType.forFields : $r65 = new java.lang.StringBuilder
org.joda.time.PeriodType.forFields : $r65 = new java.lang.StringBuilder >>>>>>>> org.joda.time.PeriodType.forFields : specialinvoke $r65.<java.lang.StringBuilder: void <init>()>()
org.joda.time.PeriodType.forFields : specialinvoke $r65.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.joda.time.PeriodType.forFields : $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PeriodType does not support fields: ")
org.joda.time.PeriodType.forFields : $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PeriodType does not support fields: ") >>>>>>>> org.joda.time.PeriodType.forFields : $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2)
org.joda.time.PeriodType.forFields : $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2) >>>>>>>> org.joda.time.PeriodType.forFields : $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.String toString()>()
org.joda.time.PeriodType.forFields : $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.joda.time.PeriodType.forFields : specialinvoke $r64.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r68)
org.joda.time.PeriodType.forFields : specialinvoke $r64.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r68) >>>>>>>> org.joda.time.PeriodType.forFields : throw $r64
