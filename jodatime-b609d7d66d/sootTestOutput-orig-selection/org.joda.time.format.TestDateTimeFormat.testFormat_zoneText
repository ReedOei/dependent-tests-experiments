org.joda.time.DateTimeUtils.setCurrentMillisSystem : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>() >>>>>>>> org.joda.time.DateTimeUtils.checkPermission : r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>()
org.joda.time.DateTimeUtils.checkPermission : r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>() >>>>>>>> org.joda.time.DateTimeUtils.checkPermission : if r0 == null
org.joda.time.DateTimeUtils.checkPermission : if r0 == null >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisSystem : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$SystemMillisProvider SYSTEM_MILLIS_PROVIDER>
org.joda.time.DateTimeUtils.setCurrentMillisSystem : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$SystemMillisProvider SYSTEM_MILLIS_PROVIDER> >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisSystem : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0
org.joda.time.DateTimeUtils.setCurrentMillisSystem : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0 >>>>>>>> org.joda.time.DateTimeZone.setDefault : r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>()
org.joda.time.DateTimeZone.setDefault : r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>() >>>>>>>> org.joda.time.DateTimeZone.setDefault : if r1 == null
org.joda.time.DateTimeZone.setDefault : if r1 == null >>>>>>>> org.joda.time.DateTimeZone.setDefault : if r0 != null
org.joda.time.DateTimeZone.setDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.setDefault : $r6 = class "org/joda/time/DateTimeZone"
org.joda.time.DateTimeZone.setDefault : $r6 = class "org/joda/time/DateTimeZone" >>>>>>>> org.joda.time.DateTimeZone.setDefault : r3 = $r6
org.joda.time.DateTimeZone.setDefault : r3 = $r6 >>>>>>>> org.joda.time.DateTimeZone.setDefault : entermonitor $r6
org.joda.time.DateTimeZone.setDefault : entermonitor $r6 >>>>>>>> org.joda.time.DateTimeZone.setDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r0
org.joda.time.DateTimeZone.setDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r0 >>>>>>>> org.joda.time.DateTimeZone.setDefault : exitmonitor r3
org.joda.time.DateTimeZone.setDefault : exitmonitor r3 >>>>>>>> org.joda.time.DateTimeZone.setDefault : goto [?= return]
org.joda.time.DateTimeZone.setDefault : goto [?= return] >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>()
org.joda.time.DateTimeUtils.setCurrentMillisFixed : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>() >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : $r0 = new org.joda.time.DateTimeUtils$FixedMillisProvider
org.joda.time.DateTimeUtils.setCurrentMillisFixed : $r0 = new org.joda.time.DateTimeUtils$FixedMillisProvider >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : specialinvoke $r0.<org.joda.time.DateTimeUtils$FixedMillisProvider: void <init>(long)>(l0)
org.joda.time.DateTimeUtils.setCurrentMillisFixed : specialinvoke $r0.<org.joda.time.DateTimeUtils$FixedMillisProvider: void <init>(long)>(l0) >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0
org.joda.time.DateTimeUtils.setCurrentMillisFixed : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0 >>>>>>>> org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> >>>>>>>> org.joda.time.DateTimeZone.getDefault : if r0 != null
org.joda.time.DateTimeZone.getDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.DateTimeZone.getDefault : return r0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if r0 != null
org.joda.time.chrono.ISOChronology.getInstance : if r0 != null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0)
org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : i0 = $i1 & 63
org.joda.time.chrono.ISOChronology.getInstance : i0 = $i1 & 63 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache>
org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache> >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : r1 = $r5[i0]
org.joda.time.chrono.ISOChronology.getInstance : r1 = $r5[i0] >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if r1 == null
org.joda.time.chrono.ISOChronology.getInstance : if r1 == null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r6 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.ISOChronology.getInstance : $r6 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2
org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null
org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.GregorianChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.BasicChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getBase : return $r1
org.joda.time.chrono.AssembledChronology.getBase : return $r1 >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : r1 = $r2
org.joda.time.chrono.BasicChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : if $r2 == null
org.joda.time.chrono.BasicChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>
org.joda.time.chrono.BasicChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC> >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : return $r4
org.joda.time.chrono.BasicChronology.getZone : return $r4 >>>>>>>> org.joda.time.chrono.GregorianChronology.getZone : return $r1
org.joda.time.chrono.GregorianChronology.getZone : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : return $r3
org.joda.time.chrono.AssembledChronology.getZone : return $r3 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0
org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : return r1
org.joda.time.chrono.ISOChronology.getInstance : return r1 >>>>>>>> org.joda.time.base.BaseDateTime.checkChronology : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.base.BaseDateTime.checkChronology : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DateTimeUtils.getChronology : if r0 != null
org.joda.time.DateTimeUtils.getChronology : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getChronology : return r0
org.joda.time.DateTimeUtils.getChronology : return r0 >>>>>>>> org.joda.time.base.BaseDateTime.checkChronology : return $r2
org.joda.time.base.BaseDateTime.checkChronology : return $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getDateTimeMillis : r1 = $r2
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : r1 = $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.getDateTimeMillis : if $r2 == null
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : if $r2 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $i7 = r0.<org.joda.time.chrono.AssembledChronology: int iBaseFlags>
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $i7 = r0.<org.joda.time.chrono.AssembledChronology: int iBaseFlags> >>>>>>>> org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $i8 = $i7 & 5
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $i8 = $i7 & 5 >>>>>>>> org.joda.time.chrono.AssembledChronology.getDateTimeMillis : if $i8 != 5
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : if $i8 != 5 >>>>>>>> org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $l9 = virtualinvoke r1.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5, i6)
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $l9 = virtualinvoke r1.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5, i6) >>>>>>>> org.joda.time.chrono.GregorianChronology.getDateTimeMillis : $l7 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5, i6)
org.joda.time.chrono.GregorianChronology.getDateTimeMillis : $l7 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5, i6) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>() >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : r1 = $r2
org.joda.time.chrono.BasicChronology.getDateTimeMillis : r1 = $r2 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : if $r2 == null
org.joda.time.chrono.BasicChronology.getDateTimeMillis : if $r2 == null >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r3 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>()
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r3 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>() >>>>>>>> org.joda.time.DateTimeFieldType.hourOfDay : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType HOUR_OF_DAY_TYPE>
org.joda.time.DateTimeFieldType.hourOfDay : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType HOUR_OF_DAY_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.hourOfDay : return $r0
org.joda.time.DateTimeFieldType.hourOfDay : return $r0 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r3, i3, 0, 23)
org.joda.time.chrono.BasicChronology.getDateTimeMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r3, i3, 0, 23) >>>>>>>> org.joda.time.field.FieldUtils.verifyValueBounds : if i0 < i1
org.joda.time.field.FieldUtils.verifyValueBounds : if i0 < i1 >>>>>>>> org.joda.time.field.FieldUtils.verifyValueBounds : if i0 <= i2
org.joda.time.field.FieldUtils.verifyValueBounds : if i0 <= i2 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r4 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>()
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r4 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>() >>>>>>>> org.joda.time.DateTimeFieldType.minuteOfHour : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MINUTE_OF_HOUR_TYPE>
org.joda.time.DateTimeFieldType.minuteOfHour : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MINUTE_OF_HOUR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.minuteOfHour : return $r0
org.joda.time.DateTimeFieldType.minuteOfHour : return $r0 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r4, i4, 0, 59)
org.joda.time.chrono.BasicChronology.getDateTimeMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r4, i4, 0, 59) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r5 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>()
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r5 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>() >>>>>>>> org.joda.time.DateTimeFieldType.secondOfMinute : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType SECOND_OF_MINUTE_TYPE>
org.joda.time.DateTimeFieldType.secondOfMinute : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType SECOND_OF_MINUTE_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.secondOfMinute : return $r0
org.joda.time.DateTimeFieldType.secondOfMinute : return $r0 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r5, i5, 0, 59)
org.joda.time.chrono.BasicChronology.getDateTimeMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r5, i5, 0, 59) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r6 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>()
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r6 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>() >>>>>>>> org.joda.time.DateTimeFieldType.millisOfSecond : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MILLIS_OF_SECOND_TYPE>
org.joda.time.DateTimeFieldType.millisOfSecond : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MILLIS_OF_SECOND_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.millisOfSecond : return $r0
org.joda.time.DateTimeFieldType.millisOfSecond : return $r0 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r6, i6, 0, 999)
org.joda.time.chrono.BasicChronology.getDateTimeMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r6, i6, 0, 999) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l8 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>(i0, i1, i2)
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l8 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>(i0, i1, i2) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>()
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>() >>>>>>>> org.joda.time.DateTimeFieldType.year : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType YEAR_TYPE>
org.joda.time.DateTimeFieldType.year : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType YEAR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.year : return $r0
org.joda.time.DateTimeFieldType.year : return $r0 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMinYear()>()
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMinYear()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getMinYear : return -292275054
org.joda.time.chrono.GregorianChronology.getMinYear : return -292275054 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMaxYear()>()
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMaxYear()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getMaxYear : return 292278993
org.joda.time.chrono.GregorianChronology.getMaxYear : return 292278993 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r1, i0, $i3, $i4)
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r1, i0, $i3, $i4) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>()
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>() >>>>>>>> org.joda.time.DateTimeFieldType.monthOfYear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MONTH_OF_YEAR_TYPE>
org.joda.time.DateTimeFieldType.monthOfYear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MONTH_OF_YEAR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.monthOfYear : return $r0
org.joda.time.DateTimeFieldType.monthOfYear : return $r0 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i5 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMaxMonth(int)>(i0)
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i5 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMaxMonth(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicChronology.getMaxMonth : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMaxMonth()>()
org.joda.time.chrono.BasicChronology.getMaxMonth : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMaxMonth()>() >>>>>>>> org.joda.time.chrono.BasicChronology.getMaxMonth : return 12
org.joda.time.chrono.BasicChronology.getMaxMonth : return 12 >>>>>>>> org.joda.time.chrono.BasicChronology.getMaxMonth : return $i1
org.joda.time.chrono.BasicChronology.getMaxMonth : return $i1 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r2, i1, 1, $i5)
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r2, i1, 1, $i5) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $r3 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>()
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $r3 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>() >>>>>>>> org.joda.time.DateTimeFieldType.dayOfMonth : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType DAY_OF_MONTH_TYPE>
org.joda.time.DateTimeFieldType.dayOfMonth : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType DAY_OF_MONTH_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.dayOfMonth : return $r0
org.joda.time.DateTimeFieldType.dayOfMonth : return $r0 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i6 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>(i0, i1)
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i6 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>(i0, i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0)
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0) >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : $i1 = i0 & 3
org.joda.time.chrono.GregorianChronology.isLeapYear : $i1 = i0 & 3 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : if $i1 != 0
org.joda.time.chrono.GregorianChronology.isLeapYear : if $i1 != 0 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : $i2 = i0 % 100
org.joda.time.chrono.GregorianChronology.isLeapYear : $i2 = i0 % 100 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : if $i2 != 0
org.joda.time.chrono.GregorianChronology.isLeapYear : if $i2 != 0 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : $z0 = 1
org.joda.time.chrono.GregorianChronology.isLeapYear : $z0 = 1 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : goto [?= return $z0]
org.joda.time.chrono.GregorianChronology.isLeapYear : goto [?= return $z0] >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : return $z0
org.joda.time.chrono.GregorianChronology.isLeapYear : return $z0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : if $z0 == 0
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $r1 = <org.joda.time.chrono.BasicGJChronology: int[] MAX_DAYS_PER_MONTH_ARRAY>
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $r1 = <org.joda.time.chrono.BasicGJChronology: int[] MAX_DAYS_PER_MONTH_ARRAY> >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i2 = i1 - 1
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i2 = i1 - 1 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i3 = $r1[$i2]
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i3 = $r1[$i2] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : return $i3
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : return $i3 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r3, i2, 1, $i6)
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r3, i2, 1, $i6) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $l7 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>(i0, i1, i2)
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $l7 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>(i0, i1, i2) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0)
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMillis : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>(i0)
org.joda.time.chrono.BasicChronology.getYearMillis : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $r2 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache>
org.joda.time.chrono.BasicChronology.getYearInfo : $r2 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $i1 = i0 & 1023
org.joda.time.chrono.BasicChronology.getYearInfo : $i1 = i0 & 1023 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : r1 = $r2[$i1]
org.joda.time.chrono.BasicChronology.getYearInfo : r1 = $r2[$i1] >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : if r1 == null
org.joda.time.chrono.BasicChronology.getYearInfo : if r1 == null >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $i2 = r1.<org.joda.time.chrono.BasicChronology$YearInfo: int iYear>
org.joda.time.chrono.BasicChronology.getYearInfo : $i2 = r1.<org.joda.time.chrono.BasicChronology$YearInfo: int iYear> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : if $i2 == i0
org.joda.time.chrono.BasicChronology.getYearInfo : if $i2 == i0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : return r1
org.joda.time.chrono.BasicChronology.getYearInfo : return r1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMillis : $l1 = $r1.<org.joda.time.chrono.BasicChronology$YearInfo: long iFirstDayMillis>
org.joda.time.chrono.BasicChronology.getYearMillis : $l1 = $r1.<org.joda.time.chrono.BasicChronology$YearInfo: long iFirstDayMillis> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMillis : return $l1
org.joda.time.chrono.BasicChronology.getYearMillis : return $l1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i0, i1)
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i0, i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0)
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : if $z0 == 0
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $r1 = <org.joda.time.chrono.BasicGJChronology: long[] MAX_TOTAL_MILLIS_BY_MONTH_ARRAY>
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $r1 = <org.joda.time.chrono.BasicGJChronology: long[] MAX_TOTAL_MILLIS_BY_MONTH_ARRAY> >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $i2 = i1 - 1
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $i2 = i1 - 1 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $l3 = $r1[$i2]
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $l3 = $r1[$i2] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : return $l3
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : return $l3 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l5 = l3 + $l4
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l5 = l3 + $l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $i6 = i2 - 1
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $i6 = i2 - 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l7 = (long) $i6
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l7 = (long) $i6 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l8 = $l7 * 86400000L
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l8 = $l7 * 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l9 = l5 + $l8
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l9 = l5 + $l8 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : return $l9
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : return $l9 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : return $l7
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : return $l7 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $i9 = i3 * 3600000
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $i9 = i3 * 3600000 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l10 = (long) $i9
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l10 = (long) $i9 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l11 = $l8 + $l10
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l11 = $l8 + $l10 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $i12 = i4 * 60000
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $i12 = i4 * 60000 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l13 = (long) $i12
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l13 = (long) $i12 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l14 = $l11 + $l13
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l14 = $l11 + $l13 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $i15 = i5 * 1000
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $i15 = i5 * 1000 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l16 = (long) $i15
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l16 = (long) $i15 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l17 = $l14 + $l16
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l17 = $l14 + $l16 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l18 = (long) i6
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l18 = (long) i6 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l19 = $l17 + $l18
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l19 = $l17 + $l18 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : return $l19
org.joda.time.chrono.BasicChronology.getDateTimeMillis : return $l19 >>>>>>>> org.joda.time.chrono.GregorianChronology.getDateTimeMillis : return $l7
org.joda.time.chrono.GregorianChronology.getDateTimeMillis : return $l7 >>>>>>>> org.joda.time.chrono.AssembledChronology.getDateTimeMillis : return $l9
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : return $l9 >>>>>>>> org.joda.time.base.BaseDateTime.checkInstant : return l0
org.joda.time.base.BaseDateTime.checkInstant : return l0 >>>>>>>> org.joda.time.format.DateTimeFormat.forPattern : $r1 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>(r0)
org.joda.time.format.DateTimeFormat.forPattern : $r1 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForPattern(java.lang.String)>(r0) >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : if r0 == null
org.joda.time.format.DateTimeFormat.createFormatterForPattern : if r0 == null >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : $i0 = virtualinvoke r0.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormat.createFormatterForPattern : $i0 = virtualinvoke r0.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : if $i0 != 0
org.joda.time.format.DateTimeFormat.createFormatterForPattern : if $i0 != 0 >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : n0 = null
org.joda.time.format.DateTimeFormat.createFormatterForPattern : n0 = null >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : $r5 = <org.joda.time.format.DateTimeFormat: java.util.Map cPatternedCache>
org.joda.time.format.DateTimeFormat.createFormatterForPattern : $r5 = <org.joda.time.format.DateTimeFormat: java.util.Map cPatternedCache> >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : r1 = $r5
org.joda.time.format.DateTimeFormat.createFormatterForPattern : r1 = $r5 >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : entermonitor $r5
org.joda.time.format.DateTimeFormat.createFormatterForPattern : entermonitor $r5 >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : $r6 = <org.joda.time.format.DateTimeFormat: java.util.Map cPatternedCache>
org.joda.time.format.DateTimeFormat.createFormatterForPattern : $r6 = <org.joda.time.format.DateTimeFormat: java.util.Map cPatternedCache> >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0)
org.joda.time.format.DateTimeFormat.createFormatterForPattern : $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : r8 = (org.joda.time.format.DateTimeFormatter) $r7
org.joda.time.format.DateTimeFormat.createFormatterForPattern : r8 = (org.joda.time.format.DateTimeFormatter) $r7 >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : if r8 != null
org.joda.time.format.DateTimeFormat.createFormatterForPattern : if r8 != null >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : $r9 = new org.joda.time.format.DateTimeFormatterBuilder
org.joda.time.format.DateTimeFormat.createFormatterForPattern : $r9 = new org.joda.time.format.DateTimeFormatterBuilder >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : specialinvoke $r9.<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>()
org.joda.time.format.DateTimeFormat.createFormatterForPattern : specialinvoke $r9.<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>() >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : r2 = $r9
org.joda.time.format.DateTimeFormat.createFormatterForPattern : r2 = $r9 >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : staticinvoke <org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>(r2, r0)
org.joda.time.format.DateTimeFormat.createFormatterForPattern : staticinvoke <org.joda.time.format.DateTimeFormat: void parsePatternTo(org.joda.time.format.DateTimeFormatterBuilder,java.lang.String)>(r2, r0) >>>>>>>> org.joda.time.format.DateTimeFormat.parsePatternTo : i0 = virtualinvoke r1.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormat.parsePatternTo : i0 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.DateTimeFormat.parsePatternTo : r2 = newarray (int)[1]
org.joda.time.format.DateTimeFormat.parsePatternTo : r2 = newarray (int)[1] >>>>>>>> org.joda.time.format.DateTimeFormat.parsePatternTo : i1 = 0
org.joda.time.format.DateTimeFormat.parsePatternTo : i1 = 0 >>>>>>>> org.joda.time.format.DateTimeFormat.parsePatternTo : if i1 >= i0
org.joda.time.format.DateTimeFormat.parsePatternTo : if i1 >= i0 >>>>>>>> org.joda.time.format.DateTimeFormat.parsePatternTo : r2[0] = i1
org.joda.time.format.DateTimeFormat.parsePatternTo : r2[0] = i1 >>>>>>>> org.joda.time.format.DateTimeFormat.parsePatternTo : r3 = staticinvoke <org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>(r1, r2)
org.joda.time.format.DateTimeFormat.parsePatternTo : r3 = staticinvoke <org.joda.time.format.DateTimeFormat: java.lang.String parseToken(java.lang.String,int[])>(r1, r2) >>>>>>>> org.joda.time.format.DateTimeFormat.parseToken : $r2 = new java.lang.StringBuffer
org.joda.time.format.DateTimeFormat.parseToken : $r2 = new java.lang.StringBuffer >>>>>>>> org.joda.time.format.DateTimeFormat.parseToken : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>()
org.joda.time.format.DateTimeFormat.parseToken : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() >>>>>>>> org.joda.time.format.DateTimeFormat.parseToken : r3 = $r2
org.joda.time.format.DateTimeFormat.parseToken : r3 = $r2 >>>>>>>> org.joda.time.format.DateTimeFormat.parseToken : i0 = r1[0]
org.joda.time.format.DateTimeFormat.parseToken : i0 = r1[0] >>>>>>>> org.joda.time.format.DateTimeFormat.parseToken : i1 = virtualinvoke r0.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormat.parseToken : i1 = virtualinvoke r0.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.DateTimeFormat.parseToken : c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0)
org.joda.time.format.DateTimeFormat.parseToken : c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0) >>>>>>>> org.joda.time.format.DateTimeFormat.parseToken : if c2 < 65
org.joda.time.format.DateTimeFormat.parseToken : if c2 < 65 >>>>>>>> org.joda.time.format.DateTimeFormat.parseToken : if c2 <= 90
org.joda.time.format.DateTimeFormat.parseToken : if c2 <= 90 >>>>>>>> org.joda.time.format.DateTimeFormat.parseToken : if c2 < 97
org.joda.time.format.DateTimeFormat.parseToken : if c2 < 97 >>>>>>>> org.joda.time.format.DateTimeFormat.parseToken : if c2 > 122
org.joda.time.format.DateTimeFormat.parseToken : if c2 > 122 >>>>>>>> org.joda.time.format.DateTimeFormat.parseToken : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2)
org.joda.time.format.DateTimeFormat.parseToken : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2) >>>>>>>> org.joda.time.format.DateTimeFormat.parseToken : $i4 = i0 + 1
org.joda.time.format.DateTimeFormat.parseToken : $i4 = i0 + 1 >>>>>>>> org.joda.time.format.DateTimeFormat.parseToken : if $i4 >= i1
org.joda.time.format.DateTimeFormat.parseToken : if $i4 >= i1 >>>>>>>> org.joda.time.format.DateTimeFormat.parseToken : r1[0] = i0
org.joda.time.format.DateTimeFormat.parseToken : r1[0] = i0 >>>>>>>> org.joda.time.format.DateTimeFormat.parseToken : $r9 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>()
org.joda.time.format.DateTimeFormat.parseToken : $r9 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> org.joda.time.format.DateTimeFormat.parseToken : return $r9
org.joda.time.format.DateTimeFormat.parseToken : return $r9 >>>>>>>> org.joda.time.format.DateTimeFormat.parsePatternTo : i4 = r2[0]
org.joda.time.format.DateTimeFormat.parsePatternTo : i4 = r2[0] >>>>>>>> org.joda.time.format.DateTimeFormat.parsePatternTo : i2 = virtualinvoke r3.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormat.parsePatternTo : i2 = virtualinvoke r3.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.DateTimeFormat.parsePatternTo : if i2 != 0
org.joda.time.format.DateTimeFormat.parsePatternTo : if i2 != 0 >>>>>>>> org.joda.time.format.DateTimeFormat.parsePatternTo : c3 = virtualinvoke r3.<java.lang.String: char charAt(int)>(0)
org.joda.time.format.DateTimeFormat.parsePatternTo : c3 = virtualinvoke r3.<java.lang.String: char charAt(int)>(0) >>>>>>>> org.joda.time.format.DateTimeFormat.parsePatternTo : tableswitch(c3) {     case 39:
org.joda.time.format.DateTimeFormat.parsePatternTo : tableswitch(c3) {     case 39: >>>>>>>> org.joda.time.format.DateTimeFormat.parsePatternTo : if i2 < 4
org.joda.time.format.DateTimeFormat.parsePatternTo : if i2 < 4 >>>>>>>> org.joda.time.format.DateTimeFormat.parsePatternTo : virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneShortName()>()
org.joda.time.format.DateTimeFormat.parsePatternTo : virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneShortName()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendTimeZoneShortName : $r1 = new org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName
org.joda.time.format.DateTimeFormatterBuilder.appendTimeZoneShortName : $r1 = new org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendTimeZoneShortName : specialinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void <init>(int,java.util.Map)>(1, null)
org.joda.time.format.DateTimeFormatterBuilder.appendTimeZoneShortName : specialinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: void <init>(int,java.util.Map)>(1, null) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendTimeZoneShortName : $r2 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser)>($r1, null)
org.joda.time.format.DateTimeFormatterBuilder.appendTimeZoneShortName : $r2 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser)>($r1, null) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.append0 : r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object iFormatter> = null
org.joda.time.format.DateTimeFormatterBuilder.append0 : r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object iFormatter> = null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.append0 : $r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs>
org.joda.time.format.DateTimeFormatterBuilder.append0 : $r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.append0 : virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r1)
org.joda.time.format.DateTimeFormatterBuilder.append0 : virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.append0 : $r4 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs>
org.joda.time.format.DateTimeFormatterBuilder.append0 : $r4 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.append0 : virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r2)
org.joda.time.format.DateTimeFormatterBuilder.append0 : virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r2) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.append0 : return r0
org.joda.time.format.DateTimeFormatterBuilder.append0 : return r0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendTimeZoneShortName : return $r2
org.joda.time.format.DateTimeFormatterBuilder.appendTimeZoneShortName : return $r2 >>>>>>>> org.joda.time.format.DateTimeFormat.parsePatternTo : goto [?= i1 = i4 + 1]
org.joda.time.format.DateTimeFormat.parsePatternTo : goto [?= i1 = i4 + 1] >>>>>>>> org.joda.time.format.DateTimeFormat.parsePatternTo : i1 = i4 + 1
org.joda.time.format.DateTimeFormat.parsePatternTo : i1 = i4 + 1 >>>>>>>> org.joda.time.format.DateTimeFormat.parsePatternTo : goto [?= (branch)]
org.joda.time.format.DateTimeFormat.parsePatternTo : goto [?= (branch)] >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : r8 = virtualinvoke r2.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>()
org.joda.time.format.DateTimeFormat.createFormatterForPattern : r8 = virtualinvoke r2.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>()
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r1 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object iFormatter>
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r1 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object iFormatter> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : if r1 != null
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : if r1 != null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $r4 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs>
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $r4 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>()
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : if $i0 != 2
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : if $i0 != 2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $r5 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs>
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $r5 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r2 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(0)
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r2 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(0) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $r6 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs>
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $r6 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r3 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>(1)
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r3 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>(1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : if r2 == null
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : if r2 == null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : if r2 == r3
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : if r2 == r3 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : if r3 != null
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : if r3 != null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r1 = r2
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r1 = r2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : goto [?= (branch)]
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : goto [?= (branch)] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object iFormatter> = r1
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object iFormatter> = r1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : return r1
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : return r1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r2 = null
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r2 = null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : $z0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isPrinter(java.lang.Object)>(r1)
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : $z0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isPrinter(java.lang.Object)>(r1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isPrinter : $z0 = r1 instanceof org.joda.time.format.DateTimePrinter
org.joda.time.format.DateTimeFormatterBuilder.isPrinter : $z0 = r1 instanceof org.joda.time.format.DateTimePrinter >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isPrinter : if $z0 == 0
org.joda.time.format.DateTimeFormatterBuilder.isPrinter : if $z0 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isPrinter : $z1 = r1 instanceof org.joda.time.format.DateTimeFormatterBuilder$Composite
org.joda.time.format.DateTimeFormatterBuilder.isPrinter : $z1 = r1 instanceof org.joda.time.format.DateTimeFormatterBuilder$Composite >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isPrinter : if $z1 == 0
org.joda.time.format.DateTimeFormatterBuilder.isPrinter : if $z1 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isPrinter : return 1
org.joda.time.format.DateTimeFormatterBuilder.isPrinter : return 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : if $z0 == 0
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : if $z0 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r2 = (org.joda.time.format.DateTimePrinter) r1
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r2 = (org.joda.time.format.DateTimePrinter) r1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r3 = null
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r3 = null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : $z1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isParser(java.lang.Object)>(r1)
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : $z1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isParser(java.lang.Object)>(r1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isParser : $z0 = r1 instanceof org.joda.time.format.DateTimeParser
org.joda.time.format.DateTimeFormatterBuilder.isParser : $z0 = r1 instanceof org.joda.time.format.DateTimeParser >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isParser : if $z0 == 0
org.joda.time.format.DateTimeFormatterBuilder.isParser : if $z0 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isParser : $z1 = r1 instanceof org.joda.time.format.DateTimeFormatterBuilder$Composite
org.joda.time.format.DateTimeFormatterBuilder.isParser : $z1 = r1 instanceof org.joda.time.format.DateTimeFormatterBuilder$Composite >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isParser : if $z1 == 0
org.joda.time.format.DateTimeFormatterBuilder.isParser : if $z1 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isParser : return 1
org.joda.time.format.DateTimeFormatterBuilder.isParser : return 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : if $z1 == 0
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : if $z1 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r3 = (org.joda.time.format.DateTimeParser) r1
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r3 = (org.joda.time.format.DateTimeParser) r1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : if r2 != null
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : if r2 != null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : $r4 = new org.joda.time.format.DateTimeFormatter
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : $r4 = new org.joda.time.format.DateTimeFormatter >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : specialinvoke $r4.<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser)>(r2, r3)
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : specialinvoke $r4.<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser)>(r2, r3) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : return $r4
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : return $r4 >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : $r10 = <org.joda.time.format.DateTimeFormat: java.util.Map cPatternedCache>
org.joda.time.format.DateTimeFormat.createFormatterForPattern : $r10 = <org.joda.time.format.DateTimeFormat: java.util.Map cPatternedCache> >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r8)
org.joda.time.format.DateTimeFormat.createFormatterForPattern : interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r8) >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : exitmonitor r1
org.joda.time.format.DateTimeFormat.createFormatterForPattern : exitmonitor r1 >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : goto [?= return r8]
org.joda.time.format.DateTimeFormat.createFormatterForPattern : goto [?= return r8] >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForPattern : return r8
org.joda.time.format.DateTimeFormat.createFormatterForPattern : return r8 >>>>>>>> org.joda.time.format.DateTimeFormat.forPattern : return $r1
org.joda.time.format.DateTimeFormat.forPattern : return $r1 >>>>>>>> org.joda.time.format.DateTimeFormatter.withLocale : $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale getLocale()>()
org.joda.time.format.DateTimeFormatter.withLocale : $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale getLocale()>() >>>>>>>> org.joda.time.format.DateTimeFormatter.getLocale : $r1 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>
org.joda.time.format.DateTimeFormatter.getLocale : $r1 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale> >>>>>>>> org.joda.time.format.DateTimeFormatter.getLocale : return $r1
org.joda.time.format.DateTimeFormatter.getLocale : return $r1 >>>>>>>> org.joda.time.format.DateTimeFormatter.withLocale : if r1 == $r2
org.joda.time.format.DateTimeFormatter.withLocale : if r1 == $r2 >>>>>>>> org.joda.time.format.DateTimeFormatter.withLocale : if r1 == null
org.joda.time.format.DateTimeFormatter.withLocale : if r1 == null >>>>>>>> org.joda.time.format.DateTimeFormatter.withLocale : $r3 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale getLocale()>()
org.joda.time.format.DateTimeFormatter.withLocale : $r3 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale getLocale()>() >>>>>>>> org.joda.time.format.DateTimeFormatter.withLocale : $z0 = virtualinvoke r1.<java.util.Locale: boolean equals(java.lang.Object)>($r3)
org.joda.time.format.DateTimeFormatter.withLocale : $z0 = virtualinvoke r1.<java.util.Locale: boolean equals(java.lang.Object)>($r3) >>>>>>>> org.joda.time.format.DateTimeFormatter.withLocale : if $z0 == 0
org.joda.time.format.DateTimeFormatter.withLocale : if $z0 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatter.withLocale : $r4 = new org.joda.time.format.DateTimeFormatter
org.joda.time.format.DateTimeFormatter.withLocale : $r4 = new org.joda.time.format.DateTimeFormatter >>>>>>>> org.joda.time.format.DateTimeFormatter.withLocale : $r5 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter iPrinter>
org.joda.time.format.DateTimeFormatter.withLocale : $r5 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter iPrinter> >>>>>>>> org.joda.time.format.DateTimeFormatter.withLocale : $r6 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser iParser>
org.joda.time.format.DateTimeFormatter.withLocale : $r6 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser iParser> >>>>>>>> org.joda.time.format.DateTimeFormatter.withLocale : $z1 = r0.<org.joda.time.format.DateTimeFormatter: boolean iOffsetParsed>
org.joda.time.format.DateTimeFormatter.withLocale : $z1 = r0.<org.joda.time.format.DateTimeFormatter: boolean iOffsetParsed> >>>>>>>> org.joda.time.format.DateTimeFormatter.withLocale : $r7 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>
org.joda.time.format.DateTimeFormatter.withLocale : $r7 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono> >>>>>>>> org.joda.time.format.DateTimeFormatter.withLocale : $r8 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>
org.joda.time.format.DateTimeFormatter.withLocale : $r8 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.format.DateTimeFormatter.withLocale : $r9 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear>
org.joda.time.format.DateTimeFormatter.withLocale : $r9 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear> >>>>>>>> org.joda.time.format.DateTimeFormatter.withLocale : $i0 = r0.<org.joda.time.format.DateTimeFormatter: int iDefaultYear>
org.joda.time.format.DateTimeFormatter.withLocale : $i0 = r0.<org.joda.time.format.DateTimeFormatter: int iDefaultYear> >>>>>>>> org.joda.time.format.DateTimeFormatter.withLocale : specialinvoke $r4.<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser,java.util.Locale,boolean,org.joda.time.Chronology,org.joda.time.DateTimeZone,java.lang.Integer,int)>($r5, $r6, r1, $z1, $r7, $r8, $r9, $i0)
org.joda.time.format.DateTimeFormatter.withLocale : specialinvoke $r4.<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser,java.util.Locale,boolean,org.joda.time.Chronology,org.joda.time.DateTimeZone,java.lang.Integer,int)>($r5, $r6, r1, $z1, $r7, $r8, $r9, $i0) >>>>>>>> org.joda.time.format.DateTimeFormatter.withLocale : return $r4
org.joda.time.format.DateTimeFormatter.withLocale : return $r4 >>>>>>>> org.joda.time.base.AbstractInstant.toString : $r1 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTime()>()
org.joda.time.base.AbstractInstant.toString : $r1 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTime()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.dateTime : $r0 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dt>
org.joda.time.format.ISODateTimeFormat.dateTime : $r0 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dt> >>>>>>>> org.joda.time.format.ISODateTimeFormat.dateTime : if $r0 != null
org.joda.time.format.ISODateTimeFormat.dateTime : if $r0 != null >>>>>>>> org.joda.time.format.ISODateTimeFormat.dateTime : $r7 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dt>
org.joda.time.format.ISODateTimeFormat.dateTime : $r7 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dt> >>>>>>>> org.joda.time.format.ISODateTimeFormat.dateTime : return $r7
org.joda.time.format.ISODateTimeFormat.dateTime : return $r7 >>>>>>>> org.joda.time.base.AbstractInstant.toString : $r2 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>(r0)
org.joda.time.base.AbstractInstant.toString : $r2 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>(r0) >>>>>>>> org.joda.time.format.DateTimeFormatter.print : $r2 = new java.lang.StringBuffer
org.joda.time.format.DateTimeFormatter.print : $r2 = new java.lang.StringBuffer >>>>>>>> org.joda.time.format.DateTimeFormatter.print : $r4 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter requirePrinter()>()
org.joda.time.format.DateTimeFormatter.print : $r4 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter requirePrinter()>() >>>>>>>> org.joda.time.format.DateTimeFormatter.requirePrinter : r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter iPrinter>
org.joda.time.format.DateTimeFormatter.requirePrinter : r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter iPrinter> >>>>>>>> org.joda.time.format.DateTimeFormatter.requirePrinter : if r1 != null
org.joda.time.format.DateTimeFormatter.requirePrinter : if r1 != null >>>>>>>> org.joda.time.format.DateTimeFormatter.requirePrinter : return r1
org.joda.time.format.DateTimeFormatter.requirePrinter : return r1 >>>>>>>> org.joda.time.format.DateTimeFormatter.print : $i0 = interfaceinvoke $r4.<org.joda.time.format.DateTimePrinter: int estimatePrintedLength()>()
org.joda.time.format.DateTimeFormatter.print : $i0 = interfaceinvoke $r4.<org.joda.time.format.DateTimePrinter: int estimatePrintedLength()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.estimatePrintedLength : $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: int iPrintedLengthEstimate>
org.joda.time.format.DateTimeFormatterBuilder$Composite.estimatePrintedLength : $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: int iPrintedLengthEstimate> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.estimatePrintedLength : return $i0
org.joda.time.format.DateTimeFormatterBuilder$Composite.estimatePrintedLength : return $i0 >>>>>>>> org.joda.time.format.DateTimeFormatter.print : specialinvoke $r2.<java.lang.StringBuffer: void <init>(int)>($i0)
org.joda.time.format.DateTimeFormatter.print : specialinvoke $r2.<java.lang.StringBuffer: void <init>(int)>($i0) >>>>>>>> org.joda.time.format.DateTimeFormatter.print : r3 = $r2
org.joda.time.format.DateTimeFormatter.print : r3 = $r2 >>>>>>>> org.joda.time.format.DateTimeFormatter.print : virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadableInstant)>(r3, r1)
org.joda.time.format.DateTimeFormatter.print : virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadableInstant)>(r3, r1) >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>(r2)
org.joda.time.format.DateTimeFormatter.printTo : l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>(r2) >>>>>>>> org.joda.time.DateTimeUtils.getInstantMillis : if r0 != null
org.joda.time.DateTimeUtils.getInstantMillis : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getInstantMillis : $l1 = interfaceinvoke r0.<org.joda.time.ReadableInstant: long getMillis()>()
org.joda.time.DateTimeUtils.getInstantMillis : $l1 = interfaceinvoke r0.<org.joda.time.ReadableInstant: long getMillis()>() >>>>>>>> org.joda.time.base.BaseDateTime.getMillis : $l0 = r0.<org.joda.time.base.BaseDateTime: long iMillis>
org.joda.time.base.BaseDateTime.getMillis : $l0 = r0.<org.joda.time.base.BaseDateTime: long iMillis> >>>>>>>> org.joda.time.base.BaseDateTime.getMillis : return $l0
org.joda.time.base.BaseDateTime.getMillis : return $l0 >>>>>>>> org.joda.time.DateTimeUtils.getInstantMillis : return $l1
org.joda.time.DateTimeUtils.getInstantMillis : return $l1 >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>(r2)
org.joda.time.format.DateTimeFormatter.printTo : r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>(r2) >>>>>>>> org.joda.time.DateTimeUtils.getInstantChronology : if r0 != null
org.joda.time.DateTimeUtils.getInstantChronology : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getInstantChronology : r1 = interfaceinvoke r0.<org.joda.time.ReadableInstant: org.joda.time.Chronology getChronology()>()
org.joda.time.DateTimeUtils.getInstantChronology : r1 = interfaceinvoke r0.<org.joda.time.ReadableInstant: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.base.BaseDateTime.getChronology : $r1 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology>
org.joda.time.base.BaseDateTime.getChronology : $r1 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology> >>>>>>>> org.joda.time.base.BaseDateTime.getChronology : return $r1
org.joda.time.base.BaseDateTime.getChronology : return $r1 >>>>>>>> org.joda.time.DateTimeUtils.getInstantChronology : if r1 != null
org.joda.time.DateTimeUtils.getInstantChronology : if r1 != null >>>>>>>> org.joda.time.DateTimeUtils.getInstantChronology : return r1
org.joda.time.DateTimeUtils.getInstantChronology : return r1 >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : specialinvoke r0.<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology)>(r1, l0, r3)
org.joda.time.format.DateTimeFormatter.printTo : specialinvoke r0.<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology)>(r1, l0, r3) >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : r3 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter requirePrinter()>()
org.joda.time.format.DateTimeFormatter.printTo : r3 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter requirePrinter()>() >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : r5 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>(r2)
org.joda.time.format.DateTimeFormatter.printTo : r5 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>(r2) >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.format.DateTimeFormatter.selectChronology : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : $r3 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>
org.joda.time.format.DateTimeFormatter.selectChronology : $r3 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono> >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : if $r3 == null
org.joda.time.format.DateTimeFormatter.selectChronology : if $r3 == null >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : $r4 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>
org.joda.time.format.DateTimeFormatter.selectChronology : $r4 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : if $r4 == null
org.joda.time.format.DateTimeFormatter.selectChronology : if $r4 == null >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : return r2
org.joda.time.format.DateTimeFormatter.selectChronology : return r2 >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : r4 = virtualinvoke r5.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.format.DateTimeFormatter.printTo : r4 = virtualinvoke r5.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : i1 = virtualinvoke r4.<org.joda.time.DateTimeZone: int getOffset(long)>(l0)
org.joda.time.format.DateTimeFormatter.printTo : i1 = virtualinvoke r4.<org.joda.time.DateTimeZone: int getOffset(long)>(l0) >>>>>>>> org.joda.time.tz.FixedDateTimeZone.getOffset : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset>
org.joda.time.tz.FixedDateTimeZone.getOffset : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset> >>>>>>>> org.joda.time.tz.FixedDateTimeZone.getOffset : return $i1
org.joda.time.tz.FixedDateTimeZone.getOffset : return $i1 >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : $l3 = (long) i1
org.joda.time.format.DateTimeFormatter.printTo : $l3 = (long) i1 >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : l2 = l0 + $l3
org.joda.time.format.DateTimeFormatter.printTo : l2 = l0 + $l3 >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : $l4 = l0 ^ l2
org.joda.time.format.DateTimeFormatter.printTo : $l4 = l0 ^ l2 >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : $b5 = $l4 cmp 0L
org.joda.time.format.DateTimeFormatter.printTo : $b5 = $l4 cmp 0L >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : if $b5 >= 0
org.joda.time.format.DateTimeFormatter.printTo : if $b5 >= 0 >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : $r6 = virtualinvoke r5.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>()
org.joda.time.format.DateTimeFormatter.printTo : $r6 = virtualinvoke r5.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>() >>>>>>>> org.joda.time.chrono.ISOChronology.withUTC : $r1 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC>
org.joda.time.chrono.ISOChronology.withUTC : $r1 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.ISOChronology.withUTC : return $r1
org.joda.time.chrono.ISOChronology.withUTC : return $r1 >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : $r7 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>
org.joda.time.format.DateTimeFormatter.printTo : $r7 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale> >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : interfaceinvoke r3.<org.joda.time.format.DateTimePrinter: void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>(r1, l2, $r6, i1, r4, $r7)
org.joda.time.format.DateTimeFormatter.printTo : interfaceinvoke r3.<org.joda.time.format.DateTimePrinter: void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>(r1, l2, $r6, i1, r4, $r7) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : r5 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: org.joda.time.format.DateTimePrinter[] iPrinters>
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : r5 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: org.joda.time.format.DateTimePrinter[] iPrinters> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : if r5 != null
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : if r5 != null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : if r4 != null
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : if r4 != null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : r4 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>()
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : r4 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : i2 = lengthof r5
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : i2 = lengthof r5 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : i3 = 0
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : i3 = 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : if i3 >= i2
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : if i3 >= i2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : $r7 = r5[i3]
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : $r7 = r5[i3] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : interfaceinvoke $r7.<org.joda.time.format.DateTimePrinter: void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>(r1, l0, r2, i1, r3, r4)
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : interfaceinvoke $r7.<org.joda.time.format.DateTimePrinter: void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>(r1, l0, r2, i1, r3, r4) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $r6 = r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: org.joda.time.DateTimeFieldType iFieldType>
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $r6 = r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: org.joda.time.DateTimeFieldType iFieldType> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : r5 = virtualinvoke $r6.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r2)
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : r5 = virtualinvoke $r6.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r2) >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $b0 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: byte iOrdinal>
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $b0 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: byte iOrdinal> >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : tableswitch($b0) {     case 1:
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : tableswitch($b0) {     case 1: >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r7 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r7 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.year : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear>
org.joda.time.chrono.AssembledChronology.year : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.year : return $r1
org.joda.time.chrono.AssembledChronology.year : return $r1 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r7
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r7 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $i2 = virtualinvoke r5.<org.joda.time.DateTimeField: int get(long)>(l0)
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $i2 = virtualinvoke r5.<org.joda.time.DateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicYearDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getAverageMillisPerYearDividedByTwo()>()
org.joda.time.chrono.BasicChronology.getYear : l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getAverageMillisPerYearDividedByTwo()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getAverageMillisPerYearDividedByTwo : return 15778476000L
org.joda.time.chrono.GregorianChronology.getAverageMillisPerYearDividedByTwo : return 15778476000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $l7 = l0 >> 1
org.joda.time.chrono.BasicChronology.getYear : $l7 = l0 >> 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $l8 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getApproxMillisAtEpochDividedByTwo()>()
org.joda.time.chrono.BasicChronology.getYear : $l8 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getApproxMillisAtEpochDividedByTwo()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getApproxMillisAtEpochDividedByTwo : return 31083597720000L
org.joda.time.chrono.GregorianChronology.getApproxMillisAtEpochDividedByTwo : return 31083597720000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l2 = $l7 + $l8
org.joda.time.chrono.BasicChronology.getYear : l2 = $l7 + $l8 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $b9 = l2 cmp 0L
org.joda.time.chrono.BasicChronology.getYear : $b9 = l2 cmp 0L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $b9 >= 0
org.joda.time.chrono.BasicChronology.getYear : if $b9 >= 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $l11 = l2 / l1
org.joda.time.chrono.BasicChronology.getYear : $l11 = l2 / l1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : i3 = (int) $l11
org.joda.time.chrono.BasicChronology.getYear : i3 = (int) $l11 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i3)
org.joda.time.chrono.BasicChronology.getYear : l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i3) >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l5 = l0 - l4
org.joda.time.chrono.BasicChronology.getYear : l5 = l0 - l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $b12 = l5 cmp 0L
org.joda.time.chrono.BasicChronology.getYear : $b12 = l5 cmp 0L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $b12 >= 0
org.joda.time.chrono.BasicChronology.getYear : if $b12 >= 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $b13 = l5 cmp 31536000000L
org.joda.time.chrono.BasicChronology.getYear : $b13 = l5 cmp 31536000000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $b13 < 0
org.joda.time.chrono.BasicChronology.getYear : if $b13 < 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : return i3
org.joda.time.chrono.BasicChronology.getYear : return i3 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.get : return $i1
org.joda.time.chrono.BasicYearDateTimeField.get : return $i1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $i3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: int iMinPrintedDigits>
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $i3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: int iMinPrintedDigits> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, $i2, $i3)
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, $i2, $i3) >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 0
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 0 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 10
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 10 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 100
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 100 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 1000
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 1000 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 10000
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 10000 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : i15 = 4
org.joda.time.format.FormatUtils.appendPaddedInteger : i15 = 4 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : goto [?= (branch)]
org.joda.time.format.FormatUtils.appendPaddedInteger : goto [?= (branch)] >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i1 <= i15
org.joda.time.format.FormatUtils.appendPaddedInteger : if i1 <= i15 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $r10 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0)
org.joda.time.format.FormatUtils.appendPaddedInteger : $r10 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0) >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10)
org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : goto [?= return]
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : goto [?= return] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : i3 = i3 + 1
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : i3 = i3 + 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : goto [?= (branch)]
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : goto [?= (branch)] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.printTo : $c2 = r0.<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: char iValue>
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.printTo : $c2 = r0.<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: char iValue> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2)
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2) >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r9 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r9 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.monthOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear>
org.joda.time.chrono.AssembledChronology.monthOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.monthOfYear : return $r1
org.joda.time.chrono.AssembledChronology.monthOfYear : return $r1 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r9
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r9 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long)>(l0)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getMonthOfYear : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicChronology.getMonthOfYear : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getMonthOfYear : $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, $i1)
org.joda.time.chrono.BasicChronology.getMonthOfYear : $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, $i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMillis(int)>(i1)
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMillis(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l4 = l0 - $l3
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l4 = l0 - $l3 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l5 = $l4 >> 10
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l5 = $l4 >> 10 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : i2 = (int) $l5
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : i2 = (int) $l5 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i1)
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if $z0 == 0
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 15356250
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 15356250 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 7678125
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 7678125 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 10209375
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 10209375 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 12825000
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 12825000 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 6
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 6 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : goto [?= return $b6]
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : goto [?= return $b6] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : return $b6
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : return $b6 >>>>>>>> org.joda.time.chrono.BasicChronology.getMonthOfYear : return $i2
org.joda.time.chrono.BasicChronology.getMonthOfYear : return $i2 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : return $i1
org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : return $i1 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i1 <= 1
org.joda.time.format.FormatUtils.appendPaddedInteger : if i1 <= 1 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48)
org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48) >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : i1 = i1 + -1
org.joda.time.format.FormatUtils.appendPaddedInteger : i1 = i1 + -1 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i3 = i0 + 48
org.joda.time.format.FormatUtils.appendPaddedInteger : $i3 = i0 + 48 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $c4 = (char) $i3
org.joda.time.format.FormatUtils.appendPaddedInteger : $c4 = (char) $i3 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4)
org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4) >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : goto [?= return]
org.joda.time.format.FormatUtils.appendPaddedInteger : goto [?= return] >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r10 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r10 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfMonth : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth>
org.joda.time.chrono.AssembledChronology.dayOfMonth : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth> >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfMonth : return $r1
org.joda.time.chrono.AssembledChronology.dayOfMonth : return $r1 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r10
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r10 >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long)>(l0)
org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicChronology.getDayOfMonth : i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i1)
org.joda.time.chrono.BasicChronology.getDayOfMonth : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i1) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l0, i1, i2)
org.joda.time.chrono.BasicChronology.getDayOfMonth : $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l0, i1, i2) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1)
org.joda.time.chrono.BasicChronology.getDayOfMonth : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i1, i2)
org.joda.time.chrono.BasicChronology.getDayOfMonth : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i1, i2) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : l5 = l3 + $l4
org.joda.time.chrono.BasicChronology.getDayOfMonth : l5 = l3 + $l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $l6 = l0 - l5
org.joda.time.chrono.BasicChronology.getDayOfMonth : $l6 = l0 - l5 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $l7 = $l6 / 86400000L
org.joda.time.chrono.BasicChronology.getDayOfMonth : $l7 = $l6 / 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $i8 = (int) $l7
org.joda.time.chrono.BasicChronology.getDayOfMonth : $i8 = (int) $l7 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $i9 = $i8 + 1
org.joda.time.chrono.BasicChronology.getDayOfMonth : $i9 = $i8 + 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : return $i9
org.joda.time.chrono.BasicChronology.getDayOfMonth : return $i9 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : return $i3
org.joda.time.chrono.BasicChronology.getDayOfMonth : return $i3 >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : return $i1
org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : return $i1 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r19 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r19 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.hourOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay>
org.joda.time.chrono.AssembledChronology.hourOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.hourOfDay : return $r1
org.joda.time.chrono.AssembledChronology.hourOfDay : return $r1 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r19
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r19 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $b1 = l0 cmp 0L
org.joda.time.field.PreciseDateTimeField.get : $b1 = l0 cmp 0L >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : if $b1 < 0
org.joda.time.field.PreciseDateTimeField.get : if $b1 < 0 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l2 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: long getUnitMillis()>()
org.joda.time.field.PreciseDateTimeField.get : $l2 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: long getUnitMillis()>() >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : return $l0
org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : return $l0 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l3 = l0 / $l2
org.joda.time.field.PreciseDateTimeField.get : $l3 = l0 / $l2 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $i4 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange>
org.joda.time.field.PreciseDateTimeField.get : $i4 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange> >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l5 = (long) $i4
org.joda.time.field.PreciseDateTimeField.get : $l5 = (long) $i4 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l6 = $l3 % $l5
org.joda.time.field.PreciseDateTimeField.get : $l6 = $l3 % $l5 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $i7 = (int) $l6
org.joda.time.field.PreciseDateTimeField.get : $i7 = (int) $l6 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : return $i7
org.joda.time.field.PreciseDateTimeField.get : return $i7 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i1 <= 2
org.joda.time.format.FormatUtils.appendPaddedInteger : if i1 <= 2 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i5 = i0 + 1
org.joda.time.format.FormatUtils.appendPaddedInteger : $i5 = i0 + 1 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i6 = $i5 * 13421772
org.joda.time.format.FormatUtils.appendPaddedInteger : $i6 = $i5 * 13421772 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : i2 = $i6 >> 27
org.joda.time.format.FormatUtils.appendPaddedInteger : i2 = $i6 >> 27 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i7 = i2 + 48
org.joda.time.format.FormatUtils.appendPaddedInteger : $i7 = i2 + 48 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $c8 = (char) $i7
org.joda.time.format.FormatUtils.appendPaddedInteger : $c8 = (char) $i7 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c8)
org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c8) >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i9 = i2 << 3
org.joda.time.format.FormatUtils.appendPaddedInteger : $i9 = i2 << 3 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i10 = i0 - $i9
org.joda.time.format.FormatUtils.appendPaddedInteger : $i10 = i0 - $i9 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i11 = i2 << 1
org.joda.time.format.FormatUtils.appendPaddedInteger : $i11 = i2 << 1 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i12 = $i10 - $i11
org.joda.time.format.FormatUtils.appendPaddedInteger : $i12 = $i10 - $i11 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i13 = $i12 + 48
org.joda.time.format.FormatUtils.appendPaddedInteger : $i13 = $i12 + 48 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $c14 = (char) $i13
org.joda.time.format.FormatUtils.appendPaddedInteger : $c14 = (char) $i13 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c14)
org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c14) >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r21 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r21 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.minuteOfHour : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfHour>
org.joda.time.chrono.AssembledChronology.minuteOfHour : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfHour> >>>>>>>> org.joda.time.chrono.AssembledChronology.minuteOfHour : return $r1
org.joda.time.chrono.AssembledChronology.minuteOfHour : return $r1 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r21
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r21 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r23 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r23 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.secondOfMinute : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfMinute>
org.joda.time.chrono.AssembledChronology.secondOfMinute : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfMinute> >>>>>>>> org.joda.time.chrono.AssembledChronology.secondOfMinute : return $r1
org.joda.time.chrono.AssembledChronology.secondOfMinute : return $r1 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r23
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r23 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.StringBuffer,java.io.Writer,long,org.joda.time.Chronology)>(r1, null, l0, r2)
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.StringBuffer,java.io.Writer,long,org.joda.time.Chronology)>(r1, null, l0, r2) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $r7 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: org.joda.time.DateTimeFieldType iFieldType>
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $r7 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: org.joda.time.DateTimeFieldType iFieldType> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : r4 = virtualinvoke $r7.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r3)
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : r4 = virtualinvoke $r7.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r3) >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r22 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfDay()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r22 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfDay()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.secondOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfDay>
org.joda.time.chrono.AssembledChronology.secondOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.secondOfDay : return $r1
org.joda.time.chrono.AssembledChronology.secondOfDay : return $r1 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r22
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r22 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : i1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int iMinDigits>
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : i1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int iMinDigits> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : l2 = virtualinvoke r4.<org.joda.time.DateTimeField: long remainder(long)>(l0)
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : l2 = virtualinvoke r4.<org.joda.time.DateTimeField: long remainder(long)>(l0) >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.remainder : $b1 = l0 cmp 0L
org.joda.time.field.PreciseDurationDateTimeField.remainder : $b1 = l0 cmp 0L >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.remainder : if $b1 < 0
org.joda.time.field.PreciseDurationDateTimeField.remainder : if $b1 < 0 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.remainder : $l2 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDurationDateTimeField.remainder : $l2 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.remainder : $l3 = l0 % $l2
org.joda.time.field.PreciseDurationDateTimeField.remainder : $l3 = l0 % $l2 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.remainder : return $l3
org.joda.time.field.PreciseDurationDateTimeField.remainder : return $l3 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : goto [?= $b8 = l2 cmp 0L]
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : goto [?= $b8 = l2 cmp 0L] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $b8 = l2 cmp 0L
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $b8 = l2 cmp 0L >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : if $b8 != 0
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : if $b8 != 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : r6 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>(l2, r4)
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : r6 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: long[] getFractionData(long,org.joda.time.DateTimeField)>(l2, r4) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : $r2 = virtualinvoke r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>()
org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : $r2 = virtualinvoke r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>() >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getDurationField : $r1 = r0.<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField iUnitField>
org.joda.time.field.PreciseDurationDateTimeField.getDurationField : $r1 = r0.<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField iUnitField> >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getDurationField : return $r1
org.joda.time.field.PreciseDurationDateTimeField.getDurationField : return $r1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : l1 = virtualinvoke $r2.<org.joda.time.DurationField: long getUnitMillis()>()
org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : l1 = virtualinvoke $r2.<org.joda.time.DurationField: long getUnitMillis()>() >>>>>>>> org.joda.time.field.PreciseDurationField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis>
org.joda.time.field.PreciseDurationField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationField.getUnitMillis : return $l0
org.joda.time.field.PreciseDurationField.getUnitMillis : return $l0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : i2 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int iMaxDigits>
org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : i2 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int iMaxDigits> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : tableswitch(i2) {     case 1:
org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : tableswitch(i2) {     case 1: >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : l3 = 1000000000L
org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : l3 = 1000000000L >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : goto [?= $l4 = l1 * l3]
org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : goto [?= $l4 = l1 * l3] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : $l4 = l1 * l3
org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : $l4 = l1 * l3 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : $l5 = $l4 / l3
org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : $l5 = $l4 / l3 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : $b6 = $l5 cmp l1
org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : $b6 = $l5 cmp l1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : if $b6 != 0
org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : if $b6 != 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : goto [?= $r3 = newarray (long)[2]]
org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : goto [?= $r3 = newarray (long)[2]] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : $r3 = newarray (long)[2]
org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : $r3 = newarray (long)[2] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : $l7 = l0 * l3
org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : $l7 = l0 * l3 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : $l8 = $l7 / l1
org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : $l8 = $l7 / l1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : $r3[0] = $l8
org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : $r3[0] = $l8 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : $l9 = (long) i2
org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : $l9 = (long) i2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : $r3[1] = $l9
org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : $r3[1] = $l9 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : return $r3
org.joda.time.format.DateTimeFormatterBuilder$Fraction.getFractionData : return $r3 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : l3 = r6[0]
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : l3 = r6[0] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $l9 = r6[1]
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $l9 = r6[1] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : i4 = (int) $l9
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : i4 = (int) $l9 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $l10 = l3 & 2147483647L
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $l10 = l3 & 2147483647L >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $b11 = $l10 cmp l3
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $b11 = $l10 cmp l3 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : if $b11 != 0
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : if $b11 != 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $i12 = (int) l3
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $i12 = (int) l3 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : r10 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i12)
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : r10 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i12) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : goto [?= i5 = virtualinvoke r10.<java.lang.String: int length()>()]
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : goto [?= i5 = virtualinvoke r10.<java.lang.String: int length()>()] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : i5 = virtualinvoke r10.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : i5 = virtualinvoke r10.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : i6 = i4
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : i6 = i4 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : if i5 >= i6
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : if i5 >= i6 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : if r1 == null
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : if r1 == null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48)
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : goto [?= i1 = i1 + -1]
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : goto [?= i1 = i1 + -1] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : i1 = i1 + -1
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : i1 = i1 + -1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : i6 = i6 + -1
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : i6 = i6 + -1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : goto [?= (branch)]
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : goto [?= (branch)] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : if i1 >= i6
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : if i1 >= i6 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : if i5 <= 1
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : if i5 <= 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $i13 = i5 - 1
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $i13 = i5 - 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $c14 = virtualinvoke r10.<java.lang.String: char charAt(int)>($i13)
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $c14 = virtualinvoke r10.<java.lang.String: char charAt(int)>($i13) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : if $c14 == 48
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : if $c14 == 48 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : i5 = i5 + -1
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : i5 = i5 + -1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $i15 = virtualinvoke r10.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $i15 = virtualinvoke r10.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : if i5 >= $i15
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : if i5 >= $i15 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : i7 = 0
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : i7 = 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : if i7 >= i5
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : if i7 >= i5 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $c16 = virtualinvoke r10.<java.lang.String: char charAt(int)>(i7)
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $c16 = virtualinvoke r10.<java.lang.String: char charAt(int)>(i7) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c16)
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c16) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : i7 = i7 + 1
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : i7 = i7 + 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : goto [?= return]
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : goto [?= return] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : if r3 != null
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : if r3 != null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : if i1 != 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : if i1 != 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : $r5 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetPrintText>
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : $r5 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetPrintText> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : if $r5 == null
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : if $r5 == null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : $r6 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetPrintText>
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : $r6 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetPrintText> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6) >>>>>>>> org.joda.time.format.DateTimeFormatter.print : $r5 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>()
org.joda.time.format.DateTimeFormatter.print : $r5 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> org.joda.time.format.DateTimeFormatter.print : return $r5
org.joda.time.format.DateTimeFormatter.print : return $r5 >>>>>>>> org.joda.time.base.AbstractInstant.toString : return $r2
org.joda.time.base.AbstractInstant.toString : return $r2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName.estimatePrintedLength : $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int iType>
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName.estimatePrintedLength : $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int iType> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName.estimatePrintedLength : if $i0 != 1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName.estimatePrintedLength : if $i0 != 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName.estimatePrintedLength : $b1 = 4
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName.estimatePrintedLength : $b1 = 4 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName.estimatePrintedLength : goto [?= return $b1]
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName.estimatePrintedLength : goto [?= return $b1] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName.estimatePrintedLength : return $b1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName.estimatePrintedLength : return $b1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName.printTo : $l2 = (long) i1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName.printTo : $l2 = (long) i1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName.printTo : $l3 = l0 - $l2
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName.printTo : $l3 = l0 - $l2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName.printTo : $r5 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: java.lang.String print(long,org.joda.time.DateTimeZone,java.util.Locale)>($l3, r3, r4)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName.printTo : $r5 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: java.lang.String print(long,org.joda.time.DateTimeZone,java.util.Locale)>($l3, r3, r4) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName.print : if r1 != null
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName.print : if r1 != null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName.print : $i1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int iType>
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName.print : $i1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName: int iType> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName.print : lookupswitch($i1) {     case 0:
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName.print : lookupswitch($i1) {     case 0: >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName.print : $r4 = virtualinvoke r1.<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>(l0, r2)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName.print : $r4 = virtualinvoke r1.<org.joda.time.DateTimeZone: java.lang.String getShortName(long,java.util.Locale)>(l0, r2) >>>>>>>> org.joda.time.DateTimeZone.getShortName : if r1 != null
org.joda.time.DateTimeZone.getShortName : if r1 != null >>>>>>>> org.joda.time.DateTimeZone.getShortName : r2 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getNameKey(long)>(l0)
org.joda.time.DateTimeZone.getShortName : r2 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getNameKey(long)>(l0) >>>>>>>> org.joda.time.tz.FixedDateTimeZone.getNameKey : $r1 = r0.<org.joda.time.tz.FixedDateTimeZone: java.lang.String iNameKey>
org.joda.time.tz.FixedDateTimeZone.getNameKey : $r1 = r0.<org.joda.time.tz.FixedDateTimeZone: java.lang.String iNameKey> >>>>>>>> org.joda.time.tz.FixedDateTimeZone.getNameKey : return $r1
org.joda.time.tz.FixedDateTimeZone.getNameKey : return $r1 >>>>>>>> org.joda.time.DateTimeZone.getShortName : if r2 != null
org.joda.time.DateTimeZone.getShortName : if r2 != null >>>>>>>> org.joda.time.DateTimeZone.getShortName : $r5 = <org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider cNameProvider>
org.joda.time.DateTimeZone.getShortName : $r5 = <org.joda.time.DateTimeZone: org.joda.time.tz.NameProvider cNameProvider> >>>>>>>> org.joda.time.DateTimeZone.getShortName : $r6 = r0.<org.joda.time.DateTimeZone: java.lang.String iID>
org.joda.time.DateTimeZone.getShortName : $r6 = r0.<org.joda.time.DateTimeZone: java.lang.String iID> >>>>>>>> org.joda.time.DateTimeZone.getShortName : r3 = interfaceinvoke $r5.<org.joda.time.tz.NameProvider: java.lang.String getShortName(java.util.Locale,java.lang.String,java.lang.String)>(r1, $r6, r2)
org.joda.time.DateTimeZone.getShortName : r3 = interfaceinvoke $r5.<org.joda.time.tz.NameProvider: java.lang.String getShortName(java.util.Locale,java.lang.String,java.lang.String)>(r1, $r6, r2) >>>>>>>> org.joda.time.tz.DefaultNameProvider.getShortName : r4 = specialinvoke r0.<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>(r1, r2, r3)
org.joda.time.tz.DefaultNameProvider.getShortName : r4 = specialinvoke r0.<org.joda.time.tz.DefaultNameProvider: java.lang.String[] getNameSet(java.util.Locale,java.lang.String,java.lang.String)>(r1, r2, r3) >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : if r1 == null
org.joda.time.tz.DefaultNameProvider.getNameSet : if r1 == null >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : if r2 == null
org.joda.time.tz.DefaultNameProvider.getNameSet : if r2 == null >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : if r3 != null
org.joda.time.tz.DefaultNameProvider.getNameSet : if r3 != null >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : $r11 = r0.<org.joda.time.tz.DefaultNameProvider: java.util.HashMap iByLocaleCache>
org.joda.time.tz.DefaultNameProvider.getNameSet : $r11 = r0.<org.joda.time.tz.DefaultNameProvider: java.util.HashMap iByLocaleCache> >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : $r12 = virtualinvoke $r11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1)
org.joda.time.tz.DefaultNameProvider.getNameSet : $r12 = virtualinvoke $r11.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : r4 = (java.util.Map) $r12
org.joda.time.tz.DefaultNameProvider.getNameSet : r4 = (java.util.Map) $r12 >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : if r4 != null
org.joda.time.tz.DefaultNameProvider.getNameSet : if r4 != null >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : $r16 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2)
org.joda.time.tz.DefaultNameProvider.getNameSet : $r16 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : r5 = (java.util.Map) $r16
org.joda.time.tz.DefaultNameProvider.getNameSet : r5 = (java.util.Map) $r16 >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : if r5 != null
org.joda.time.tz.DefaultNameProvider.getNameSet : if r5 != null >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : $r17 = specialinvoke r0.<org.joda.time.tz.DefaultNameProvider: java.util.HashMap createCache()>()
org.joda.time.tz.DefaultNameProvider.getNameSet : $r17 = specialinvoke r0.<org.joda.time.tz.DefaultNameProvider: java.util.HashMap createCache()>() >>>>>>>> org.joda.time.tz.DefaultNameProvider.createCache : $r1 = new java.util.HashMap
org.joda.time.tz.DefaultNameProvider.createCache : $r1 = new java.util.HashMap >>>>>>>> org.joda.time.tz.DefaultNameProvider.createCache : specialinvoke $r1.<java.util.HashMap: void <init>(int)>(7)
org.joda.time.tz.DefaultNameProvider.createCache : specialinvoke $r1.<java.util.HashMap: void <init>(int)>(7) >>>>>>>> org.joda.time.tz.DefaultNameProvider.createCache : return $r1
org.joda.time.tz.DefaultNameProvider.createCache : return $r1 >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : r5 = $r17
org.joda.time.tz.DefaultNameProvider.getNameSet : r5 = $r17 >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r17)
org.joda.time.tz.DefaultNameProvider.getNameSet : interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r17) >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : $r19 = <java.util.Locale: java.util.Locale ENGLISH>
org.joda.time.tz.DefaultNameProvider.getNameSet : $r19 = <java.util.Locale: java.util.Locale ENGLISH> >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : $r20 = staticinvoke <org.joda.time.DateTimeUtils: java.text.DateFormatSymbols getDateFormatSymbols(java.util.Locale)>($r19)
org.joda.time.tz.DefaultNameProvider.getNameSet : $r20 = staticinvoke <org.joda.time.DateTimeUtils: java.text.DateFormatSymbols getDateFormatSymbols(java.util.Locale)>($r19) >>>>>>>> org.joda.time.DateTimeUtils.getDateFormatSymbols : $r1 = class "java/text/DateFormatSymbols"
org.joda.time.DateTimeUtils.getDateFormatSymbols : $r1 = class "java/text/DateFormatSymbols" >>>>>>>> org.joda.time.DateTimeUtils.getDateFormatSymbols : $r3 = newarray (java.lang.Class)[1]
org.joda.time.DateTimeUtils.getDateFormatSymbols : $r3 = newarray (java.lang.Class)[1] >>>>>>>> org.joda.time.DateTimeUtils.getDateFormatSymbols : $r3[0] = class "java/util/Locale"
org.joda.time.DateTimeUtils.getDateFormatSymbols : $r3[0] = class "java/util/Locale" >>>>>>>> org.joda.time.DateTimeUtils.getDateFormatSymbols : r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getInstance", $r3)
org.joda.time.DateTimeUtils.getDateFormatSymbols : r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getInstance", $r3) >>>>>>>> org.joda.time.DateTimeUtils.getDateFormatSymbols : $r4 = newarray (java.lang.Object)[1]
org.joda.time.DateTimeUtils.getDateFormatSymbols : $r4 = newarray (java.lang.Object)[1] >>>>>>>> org.joda.time.DateTimeUtils.getDateFormatSymbols : $r4[0] = r0
org.joda.time.DateTimeUtils.getDateFormatSymbols : $r4[0] = r0 >>>>>>>> org.joda.time.DateTimeUtils.getDateFormatSymbols : $r5 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r4)
org.joda.time.DateTimeUtils.getDateFormatSymbols : $r5 = virtualinvoke r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r4) >>>>>>>> org.joda.time.DateTimeUtils.getDateFormatSymbols : $r6 = (java.text.DateFormatSymbols) $r5
org.joda.time.DateTimeUtils.getDateFormatSymbols : $r6 = (java.text.DateFormatSymbols) $r5 >>>>>>>> org.joda.time.DateTimeUtils.getDateFormatSymbols : return $r6
org.joda.time.DateTimeUtils.getDateFormatSymbols : return $r6 >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : r6 = virtualinvoke $r20.<java.text.DateFormatSymbols: java.lang.String[][] getZoneStrings()>()
org.joda.time.tz.DefaultNameProvider.getNameSet : r6 = virtualinvoke $r20.<java.text.DateFormatSymbols: java.lang.String[][] getZoneStrings()>() >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : r7 = null
org.joda.time.tz.DefaultNameProvider.getNameSet : r7 = null >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : r8 = r6
org.joda.time.tz.DefaultNameProvider.getNameSet : r8 = r6 >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : i0 = lengthof r8
org.joda.time.tz.DefaultNameProvider.getNameSet : i0 = lengthof r8 >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : i1 = 0
org.joda.time.tz.DefaultNameProvider.getNameSet : i1 = 0 >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : if i1 >= i0
org.joda.time.tz.DefaultNameProvider.getNameSet : if i1 >= i0 >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : r9 = r8[i1]
org.joda.time.tz.DefaultNameProvider.getNameSet : r9 = r8[i1] >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : if r9 == null
org.joda.time.tz.DefaultNameProvider.getNameSet : if r9 == null >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : $i3 = lengthof r9
org.joda.time.tz.DefaultNameProvider.getNameSet : $i3 = lengthof r9 >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : if $i3 != 5
org.joda.time.tz.DefaultNameProvider.getNameSet : if $i3 != 5 >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : $r21 = r9[0]
org.joda.time.tz.DefaultNameProvider.getNameSet : $r21 = r9[0] >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r21)
org.joda.time.tz.DefaultNameProvider.getNameSet : $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r21) >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : if $z0 == 0
org.joda.time.tz.DefaultNameProvider.getNameSet : if $z0 == 0 >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : i1 = i1 + 1
org.joda.time.tz.DefaultNameProvider.getNameSet : i1 = i1 + 1 >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : goto [?= (branch)]
org.joda.time.tz.DefaultNameProvider.getNameSet : goto [?= (branch)] >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : r7 = r9
org.joda.time.tz.DefaultNameProvider.getNameSet : r7 = r9 >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : goto [?= $r22 = staticinvoke <org.joda.time.DateTimeUtils: java.text.DateFormatSymbols getDateFormatSymbols(java.util.Locale)>(r1)]
org.joda.time.tz.DefaultNameProvider.getNameSet : goto [?= $r22 = staticinvoke <org.joda.time.DateTimeUtils: java.text.DateFormatSymbols getDateFormatSymbols(java.util.Locale)>(r1)] >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : $r22 = staticinvoke <org.joda.time.DateTimeUtils: java.text.DateFormatSymbols getDateFormatSymbols(java.util.Locale)>(r1)
org.joda.time.tz.DefaultNameProvider.getNameSet : $r22 = staticinvoke <org.joda.time.DateTimeUtils: java.text.DateFormatSymbols getDateFormatSymbols(java.util.Locale)>(r1) >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : r23 = virtualinvoke $r22.<java.text.DateFormatSymbols: java.lang.String[][] getZoneStrings()>()
org.joda.time.tz.DefaultNameProvider.getNameSet : r23 = virtualinvoke $r22.<java.text.DateFormatSymbols: java.lang.String[][] getZoneStrings()>() >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : r24 = null
org.joda.time.tz.DefaultNameProvider.getNameSet : r24 = null >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : r25 = r23
org.joda.time.tz.DefaultNameProvider.getNameSet : r25 = r23 >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : i4 = lengthof r25
org.joda.time.tz.DefaultNameProvider.getNameSet : i4 = lengthof r25 >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : i2 = 0
org.joda.time.tz.DefaultNameProvider.getNameSet : i2 = 0 >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : if i2 >= i4
org.joda.time.tz.DefaultNameProvider.getNameSet : if i2 >= i4 >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : r10 = r25[i2]
org.joda.time.tz.DefaultNameProvider.getNameSet : r10 = r25[i2] >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : if r10 == null
org.joda.time.tz.DefaultNameProvider.getNameSet : if r10 == null >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : $i5 = lengthof r10
org.joda.time.tz.DefaultNameProvider.getNameSet : $i5 = lengthof r10 >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : if $i5 != 5
org.joda.time.tz.DefaultNameProvider.getNameSet : if $i5 != 5 >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : $r26 = r10[0]
org.joda.time.tz.DefaultNameProvider.getNameSet : $r26 = r10[0] >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r26)
org.joda.time.tz.DefaultNameProvider.getNameSet : $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r26) >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : if $z1 == 0
org.joda.time.tz.DefaultNameProvider.getNameSet : if $z1 == 0 >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : i2 = i2 + 1
org.joda.time.tz.DefaultNameProvider.getNameSet : i2 = i2 + 1 >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : r24 = r10
org.joda.time.tz.DefaultNameProvider.getNameSet : r24 = r10 >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : if r7 == null
org.joda.time.tz.DefaultNameProvider.getNameSet : if r7 == null >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : if r24 == null
org.joda.time.tz.DefaultNameProvider.getNameSet : if r24 == null >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : $r27 = r7[2]
org.joda.time.tz.DefaultNameProvider.getNameSet : $r27 = r7[2] >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : $r28 = newarray (java.lang.String)[2]
org.joda.time.tz.DefaultNameProvider.getNameSet : $r28 = newarray (java.lang.String)[2] >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : $r29 = r24[2]
org.joda.time.tz.DefaultNameProvider.getNameSet : $r29 = r24[2] >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : $r28[0] = $r29
org.joda.time.tz.DefaultNameProvider.getNameSet : $r28[0] = $r29 >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : $r30 = r24[1]
org.joda.time.tz.DefaultNameProvider.getNameSet : $r30 = r24[1] >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : $r28[1] = $r30
org.joda.time.tz.DefaultNameProvider.getNameSet : $r28[1] = $r30 >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : interfaceinvoke r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r27, $r28)
org.joda.time.tz.DefaultNameProvider.getNameSet : interfaceinvoke r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r27, $r28) >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : $r32 = r7[2]
org.joda.time.tz.DefaultNameProvider.getNameSet : $r32 = r7[2] >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : $r33 = r7[4]
org.joda.time.tz.DefaultNameProvider.getNameSet : $r33 = r7[4] >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : $z2 = virtualinvoke $r32.<java.lang.String: boolean equals(java.lang.Object)>($r33)
org.joda.time.tz.DefaultNameProvider.getNameSet : $z2 = virtualinvoke $r32.<java.lang.String: boolean equals(java.lang.Object)>($r33) >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : if $z2 == 0
org.joda.time.tz.DefaultNameProvider.getNameSet : if $z2 == 0 >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : $r34 = new java.lang.StringBuilder
org.joda.time.tz.DefaultNameProvider.getNameSet : $r34 = new java.lang.StringBuilder >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : specialinvoke $r34.<java.lang.StringBuilder: void <init>()>()
org.joda.time.tz.DefaultNameProvider.getNameSet : specialinvoke $r34.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : $r35 = r7[4]
org.joda.time.tz.DefaultNameProvider.getNameSet : $r35 = r7[4] >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35)
org.joda.time.tz.DefaultNameProvider.getNameSet : $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35) >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-Summer")
org.joda.time.tz.DefaultNameProvider.getNameSet : $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-Summer") >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>()
org.joda.time.tz.DefaultNameProvider.getNameSet : $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : $r39 = newarray (java.lang.String)[2]
org.joda.time.tz.DefaultNameProvider.getNameSet : $r39 = newarray (java.lang.String)[2] >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : $r40 = r24[4]
org.joda.time.tz.DefaultNameProvider.getNameSet : $r40 = r24[4] >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : $r39[0] = $r40
org.joda.time.tz.DefaultNameProvider.getNameSet : $r39[0] = $r40 >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : $r41 = r24[3]
org.joda.time.tz.DefaultNameProvider.getNameSet : $r41 = r24[3] >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : $r39[1] = $r41
org.joda.time.tz.DefaultNameProvider.getNameSet : $r39[1] = $r41 >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : interfaceinvoke r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r38, $r39)
org.joda.time.tz.DefaultNameProvider.getNameSet : interfaceinvoke r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r38, $r39) >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : goto [?= $r48 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3)]
org.joda.time.tz.DefaultNameProvider.getNameSet : goto [?= $r48 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3)] >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : $r48 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3)
org.joda.time.tz.DefaultNameProvider.getNameSet : $r48 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3) >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : $r49 = (java.lang.String[]) $r48
org.joda.time.tz.DefaultNameProvider.getNameSet : $r49 = (java.lang.String[]) $r48 >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : $r50 = (java.lang.String[]) $r49
org.joda.time.tz.DefaultNameProvider.getNameSet : $r50 = (java.lang.String[]) $r49 >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : return $r50
org.joda.time.tz.DefaultNameProvider.getNameSet : return $r50 >>>>>>>> org.joda.time.tz.DefaultNameProvider.getShortName : if r4 != null
org.joda.time.tz.DefaultNameProvider.getShortName : if r4 != null >>>>>>>> org.joda.time.tz.DefaultNameProvider.getShortName : $r5 = r4[0]
org.joda.time.tz.DefaultNameProvider.getShortName : $r5 = r4[0] >>>>>>>> org.joda.time.tz.DefaultNameProvider.getShortName : return $r5
org.joda.time.tz.DefaultNameProvider.getShortName : return $r5 >>>>>>>> org.joda.time.DateTimeZone.getShortName : if r3 == null
org.joda.time.DateTimeZone.getShortName : if r3 == null >>>>>>>> org.joda.time.DateTimeZone.getShortName : return r3
org.joda.time.DateTimeZone.getShortName : return r3 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName.print : return $r4
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName.print : return $r4 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneName.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5) >>>>>>>> org.joda.time.DateTime.withZone : $r2 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>()
org.joda.time.DateTime.withZone : $r2 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.DateTime.withZone : $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>(r1)
org.joda.time.DateTime.withZone : $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>(r1) >>>>>>>> org.joda.time.chrono.ISOChronology.withZone : if r1 != null
org.joda.time.chrono.ISOChronology.withZone : if r1 != null >>>>>>>> org.joda.time.chrono.ISOChronology.withZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.ISOChronology.withZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.ISOChronology.withZone : if r1 != $r2
org.joda.time.chrono.ISOChronology.withZone : if r1 != $r2 >>>>>>>> org.joda.time.chrono.ISOChronology.withZone : $r3 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>(r1)
org.joda.time.chrono.ISOChronology.withZone : $r3 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>(r1) >>>>>>>> org.joda.time.chrono.ZonedChronology.getZone : $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: java.lang.Object getParam()>()
org.joda.time.chrono.ZonedChronology.getZone : $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: java.lang.Object getParam()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getParam : $r1 = r0.<org.joda.time.chrono.AssembledChronology: java.lang.Object iParam>
org.joda.time.chrono.AssembledChronology.getParam : $r1 = r0.<org.joda.time.chrono.AssembledChronology: java.lang.Object iParam> >>>>>>>> org.joda.time.chrono.AssembledChronology.getParam : return $r1
org.joda.time.chrono.AssembledChronology.getParam : return $r1 >>>>>>>> org.joda.time.chrono.ZonedChronology.getZone : $r2 = (org.joda.time.DateTimeZone) $r1
org.joda.time.chrono.ZonedChronology.getZone : $r2 = (org.joda.time.DateTimeZone) $r1 >>>>>>>> org.joda.time.chrono.ZonedChronology.getZone : return $r2
org.joda.time.chrono.ZonedChronology.getZone : return $r2 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r7 = <org.joda.time.chrono.ISOChronology: java.util.Map cCache>
org.joda.time.chrono.ISOChronology.getInstance : $r7 = <org.joda.time.chrono.ISOChronology: java.util.Map cCache> >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : r2 = $r7
org.joda.time.chrono.ISOChronology.getInstance : r2 = $r7 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : entermonitor $r7
org.joda.time.chrono.ISOChronology.getInstance : entermonitor $r7 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r8 = <org.joda.time.chrono.ISOChronology: java.util.Map cCache>
org.joda.time.chrono.ISOChronology.getInstance : $r8 = <org.joda.time.chrono.ISOChronology: java.util.Map cCache> >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0)
org.joda.time.chrono.ISOChronology.getInstance : $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> org.joda.time.tz.CachedDateTimeZone.hashCode : $r1 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone>
org.joda.time.tz.CachedDateTimeZone.hashCode : $r1 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.tz.CachedDateTimeZone.hashCode : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeZone: int hashCode()>()
org.joda.time.tz.CachedDateTimeZone.hashCode : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeZone: int hashCode()>() >>>>>>>> org.joda.time.DateTimeZone.hashCode : $r1 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getID()>()
org.joda.time.DateTimeZone.hashCode : $r1 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getID()>() >>>>>>>> org.joda.time.DateTimeZone.getID : $r1 = r0.<org.joda.time.DateTimeZone: java.lang.String iID>
org.joda.time.DateTimeZone.getID : $r1 = r0.<org.joda.time.DateTimeZone: java.lang.String iID> >>>>>>>> org.joda.time.DateTimeZone.getID : return $r1
org.joda.time.DateTimeZone.getID : return $r1 >>>>>>>> org.joda.time.DateTimeZone.hashCode : $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>()
org.joda.time.DateTimeZone.hashCode : $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>() >>>>>>>> org.joda.time.DateTimeZone.hashCode : $i1 = 57 + $i0
org.joda.time.DateTimeZone.hashCode : $i1 = 57 + $i0 >>>>>>>> org.joda.time.DateTimeZone.hashCode : return $i1
org.joda.time.DateTimeZone.hashCode : return $i1 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.hashCode : return $i0
org.joda.time.tz.CachedDateTimeZone.hashCode : return $i0 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.equals : if r0 != r1
org.joda.time.tz.CachedDateTimeZone.equals : if r0 != r1 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.equals : $z0 = r1 instanceof org.joda.time.tz.CachedDateTimeZone
org.joda.time.tz.CachedDateTimeZone.equals : $z0 = r1 instanceof org.joda.time.tz.CachedDateTimeZone >>>>>>>> org.joda.time.tz.CachedDateTimeZone.equals : if $z0 == 0
org.joda.time.tz.CachedDateTimeZone.equals : if $z0 == 0 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.equals : $r2 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone>
org.joda.time.tz.CachedDateTimeZone.equals : $r2 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.tz.CachedDateTimeZone.equals : $r3 = (org.joda.time.tz.CachedDateTimeZone) r1
org.joda.time.tz.CachedDateTimeZone.equals : $r3 = (org.joda.time.tz.CachedDateTimeZone) r1 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.equals : $r4 = $r3.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone>
org.joda.time.tz.CachedDateTimeZone.equals : $r4 = $r3.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.tz.CachedDateTimeZone.equals : $z1 = virtualinvoke $r2.<org.joda.time.DateTimeZone: boolean equals(java.lang.Object)>($r4)
org.joda.time.tz.CachedDateTimeZone.equals : $z1 = virtualinvoke $r2.<org.joda.time.DateTimeZone: boolean equals(java.lang.Object)>($r4) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if r0 != r1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if r0 != r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z0 = r1 instanceof org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z0 = r1 instanceof org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if $z0 == 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if $z0 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : r2 = (org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone) r1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : r2 = (org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone) r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r3 = virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getID()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r3 = virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getID()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r4 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getID()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r4 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getID()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if $z1 == 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if $z1 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r6 = r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r6 = r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z2 = staticinvoke <java.util.Arrays: boolean equals(long[],long[])>($r5, $r6)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z2 = staticinvoke <java.util.Arrays: boolean equals(long[],long[])>($r5, $r6) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if $z2 == 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if $z2 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r7 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String[] iNameKeys>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r7 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String[] iNameKeys> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r8 = r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String[] iNameKeys>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r8 = r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String[] iNameKeys> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z3 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r7, $r8)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z3 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r7, $r8) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if $z3 == 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if $z3 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r9 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iWallOffsets>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r9 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iWallOffsets> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r10 = r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iWallOffsets>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r10 = r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iWallOffsets> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z4 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r9, $r10)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z4 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r9, $r10) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if $z4 == 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if $z4 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r11 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iStandardOffsets>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r11 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iStandardOffsets> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r12 = r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iStandardOffsets>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r12 = r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iStandardOffsets> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z5 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r11, $r12)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z5 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r11, $r12) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if $z5 == 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if $z5 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r13 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r13 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if $r13 != null
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if $r13 != null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r15 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r15 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r16 = r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r16 = r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z6 = virtualinvoke $r15.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)>($r16)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z6 = virtualinvoke $r15.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)>($r16) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : if r0 != r1
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : if r0 != r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $z0 = r1 instanceof org.joda.time.tz.DateTimeZoneBuilder$DSTZone
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $z0 = r1 instanceof org.joda.time.tz.DateTimeZoneBuilder$DSTZone >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : if $z0 == 0
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : if $z0 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : r2 = (org.joda.time.tz.DateTimeZoneBuilder$DSTZone) r1
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : r2 = (org.joda.time.tz.DateTimeZoneBuilder$DSTZone) r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $r3 = virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getID()>()
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $r3 = virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getID()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $r4 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getID()>()
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $r4 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getID()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4)
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : if $z1 == 0
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : if $z1 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset>
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $i1 = r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset>
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $i1 = r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : if $i0 != $i1
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : if $i0 != $i1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $r5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence>
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $r5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $r6 = r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence>
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $r6 = r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $z2 = virtualinvoke $r5.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: boolean equals(java.lang.Object)>($r6)
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $z2 = virtualinvoke $r5.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: boolean equals(java.lang.Object)>($r6) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : if r0 != r1
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : if r0 != r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $z0 = r1 instanceof org.joda.time.tz.DateTimeZoneBuilder$Recurrence
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $z0 = r1 instanceof org.joda.time.tz.DateTimeZoneBuilder$Recurrence >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : if $z0 == 0
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : if $z0 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : r2 = (org.joda.time.tz.DateTimeZoneBuilder$Recurrence) r1
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : r2 = (org.joda.time.tz.DateTimeZoneBuilder$Recurrence) r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int iSaveMillis>
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int iSaveMillis> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $i1 = r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int iSaveMillis>
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $i1 = r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int iSaveMillis> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : if $i0 != $i1
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : if $i0 != $i1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String iNameKey>
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String iNameKey> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $r4 = r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String iNameKey>
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $r4 = r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String iNameKey> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4)
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : if $z1 == 0
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : if $z1 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $r5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$OfYear iOfYear>
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $r5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$OfYear iOfYear> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $r6 = r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$OfYear iOfYear>
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $r6 = r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$OfYear iOfYear> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $z2 = virtualinvoke $r5.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: boolean equals(java.lang.Object)>($r6)
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $z2 = virtualinvoke $r5.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: boolean equals(java.lang.Object)>($r6) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : if r0 != r1
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : if r0 != r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $z0 = r1 instanceof org.joda.time.tz.DateTimeZoneBuilder$OfYear
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $z0 = r1 instanceof org.joda.time.tz.DateTimeZoneBuilder$OfYear >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : if $z0 == 0
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : if $z0 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : r2 = (org.joda.time.tz.DateTimeZoneBuilder$OfYear) r1
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : r2 = (org.joda.time.tz.DateTimeZoneBuilder$OfYear) r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $c0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $c0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $c1 = r2.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $c1 = r2.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : if $c0 != $c1
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : if $c0 != $c1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $i2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMonthOfYear>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $i2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMonthOfYear> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $i3 = r2.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMonthOfYear>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $i3 = r2.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMonthOfYear> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : if $i2 != $i3
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : if $i2 != $i3 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $i4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfMonth>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $i4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfMonth> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $i5 = r2.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfMonth>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $i5 = r2.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfMonth> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : if $i4 != $i5
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : if $i4 != $i5 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $i6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfWeek>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $i6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfWeek> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $i7 = r2.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfWeek>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $i7 = r2.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfWeek> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : if $i6 != $i7
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : if $i6 != $i7 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $z1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: boolean iAdvance>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $z1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: boolean iAdvance> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $z2 = r2.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: boolean iAdvance>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $z2 = r2.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: boolean iAdvance> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : if $z1 != $z2
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : if $z1 != $z2 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $i8 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMillisOfDay>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $i8 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMillisOfDay> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $i9 = r2.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMillisOfDay>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $i9 = r2.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMillisOfDay> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : if $i8 != $i9
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : if $i8 != $i9 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $z3 = 1
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $z3 = 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : goto [?= return $z3]
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : goto [?= return $z3] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : return $z3
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : return $z3 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : if $z2 == 0
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : if $z2 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $z3 = 1
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $z3 = 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : goto [?= return $z3]
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : goto [?= return $z3] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : return $z3
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : return $z3 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : if $z2 == 0
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : if $z2 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $r7 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence>
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $r7 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $r8 = r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence>
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $r8 = r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $z3 = virtualinvoke $r7.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: boolean equals(java.lang.Object)>($r8)
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $z3 = virtualinvoke $r7.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: boolean equals(java.lang.Object)>($r8) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : if $z3 == 0
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : if $z3 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $z4 = 1
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $z4 = 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : goto [?= return $z4]
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : goto [?= return $z4] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : return $z4
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : return $z4 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if $z6 == 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if $z6 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z7 = 1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z7 = 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : goto [?= return $z7]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : goto [?= return $z7] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : return $z7
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : return $z7 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.equals : return $z1
org.joda.time.tz.CachedDateTimeZone.equals : return $z1 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : r10 = (org.joda.time.chrono.ISOChronology) $r9
org.joda.time.chrono.ISOChronology.getInstance : r10 = (org.joda.time.chrono.ISOChronology) $r9 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if r10 != null
org.joda.time.chrono.ISOChronology.getInstance : if r10 != null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : exitmonitor r2
org.joda.time.chrono.ISOChronology.getInstance : exitmonitor r2 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : goto [?= $r16 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache>]
org.joda.time.chrono.ISOChronology.getInstance : goto [?= $r16 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache>] >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r16 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache>
org.joda.time.chrono.ISOChronology.getInstance : $r16 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache> >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r16[i0] = r10
org.joda.time.chrono.ISOChronology.getInstance : $r16[i0] = r10 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : return r10
org.joda.time.chrono.ISOChronology.getInstance : return r10 >>>>>>>> org.joda.time.chrono.ISOChronology.withZone : return $r3
org.joda.time.chrono.ISOChronology.withZone : return $r3 >>>>>>>> org.joda.time.DateTime.withZone : $r4 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withChronology(org.joda.time.Chronology)>($r3)
org.joda.time.DateTime.withZone : $r4 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withChronology(org.joda.time.Chronology)>($r3) >>>>>>>> org.joda.time.DateTime.withChronology : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.DateTime.withChronology : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DateTime.withChronology : $r3 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>()
org.joda.time.DateTime.withChronology : $r3 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.DateTime.withChronology : if r2 != $r3
org.joda.time.DateTime.withChronology : if r2 != $r3 >>>>>>>> org.joda.time.DateTime.withChronology : $r4 = new org.joda.time.DateTime
org.joda.time.DateTime.withChronology : $r4 = new org.joda.time.DateTime >>>>>>>> org.joda.time.DateTime.withChronology : $l0 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>()
org.joda.time.DateTime.withChronology : $l0 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>() >>>>>>>> org.joda.time.DateTime.withChronology : specialinvoke $r4.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>($l0, r2)
org.joda.time.DateTime.withChronology : specialinvoke $r4.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>($l0, r2) >>>>>>>> org.joda.time.DateTime.withChronology : return $r4
org.joda.time.DateTime.withChronology : return $r4 >>>>>>>> org.joda.time.DateTime.withZone : return $r4
org.joda.time.DateTime.withZone : return $r4 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getOffset : $r1 = specialinvoke r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info getInfo(long)>(l0)
org.joda.time.tz.CachedDateTimeZone.getOffset : $r1 = specialinvoke r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info getInfo(long)>(l0) >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getInfo : $l4 = l0 >> 32
org.joda.time.tz.CachedDateTimeZone.getInfo : $l4 = l0 >> 32 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getInfo : i1 = (int) $l4
org.joda.time.tz.CachedDateTimeZone.getInfo : i1 = (int) $l4 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getInfo : r1 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info[] iInfoCache>
org.joda.time.tz.CachedDateTimeZone.getInfo : r1 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info[] iInfoCache> >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getInfo : $i2 = <org.joda.time.tz.CachedDateTimeZone: int cInfoCacheMask>
org.joda.time.tz.CachedDateTimeZone.getInfo : $i2 = <org.joda.time.tz.CachedDateTimeZone: int cInfoCacheMask> >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getInfo : i3 = i1 & $i2
org.joda.time.tz.CachedDateTimeZone.getInfo : i3 = i1 & $i2 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getInfo : r2 = r1[i3]
org.joda.time.tz.CachedDateTimeZone.getInfo : r2 = r1[i3] >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getInfo : if r2 == null
org.joda.time.tz.CachedDateTimeZone.getInfo : if r2 == null >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getInfo : $l5 = r2.<org.joda.time.tz.CachedDateTimeZone$Info: long iPeriodStart>
org.joda.time.tz.CachedDateTimeZone.getInfo : $l5 = r2.<org.joda.time.tz.CachedDateTimeZone$Info: long iPeriodStart> >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getInfo : $l6 = $l5 >> 32
org.joda.time.tz.CachedDateTimeZone.getInfo : $l6 = $l5 >> 32 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getInfo : $i7 = (int) $l6
org.joda.time.tz.CachedDateTimeZone.getInfo : $i7 = (int) $l6 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getInfo : if $i7 == i1
org.joda.time.tz.CachedDateTimeZone.getInfo : if $i7 == i1 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getInfo : return r2
org.joda.time.tz.CachedDateTimeZone.getInfo : return r2 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getOffset : $i1 = virtualinvoke $r1.<org.joda.time.tz.CachedDateTimeZone$Info: int getOffset(long)>(l0)
org.joda.time.tz.CachedDateTimeZone.getOffset : $i1 = virtualinvoke $r1.<org.joda.time.tz.CachedDateTimeZone$Info: int getOffset(long)>(l0) >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getOffset : $r1 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: org.joda.time.tz.CachedDateTimeZone$Info iNextInfo>
org.joda.time.tz.CachedDateTimeZone$Info.getOffset : $r1 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: org.joda.time.tz.CachedDateTimeZone$Info iNextInfo> >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getOffset : if $r1 == null
org.joda.time.tz.CachedDateTimeZone$Info.getOffset : if $r1 == null >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getOffset : $i3 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: int iOffset>
org.joda.time.tz.CachedDateTimeZone$Info.getOffset : $i3 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: int iOffset> >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getOffset : if $i3 != -2147483648
org.joda.time.tz.CachedDateTimeZone$Info.getOffset : if $i3 != -2147483648 >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getOffset : $i6 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: int iOffset>
org.joda.time.tz.CachedDateTimeZone$Info.getOffset : $i6 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: int iOffset> >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getOffset : return $i6
org.joda.time.tz.CachedDateTimeZone$Info.getOffset : return $i6 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getOffset : return $i1
org.joda.time.tz.CachedDateTimeZone.getOffset : return $i1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : if i1 < 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : if i1 < 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : i1 = neg i1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : i1 = neg i1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : i2 = i1 / 3600000
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : i2 = i1 / 3600000 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, i2, 2)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, i2, 2) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : $i5 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMaxFields>
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : $i5 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMaxFields> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : if $i5 != 1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : if $i5 != 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : $i6 = i2 * 3600000
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : $i6 = i2 * 3600000 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : i7 = i1 - $i6
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : i7 = i1 - $i6 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : if i7 != 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : if i7 != 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : $i8 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMinFields>
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : $i8 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMinFields> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : if $i8 > 1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : if $i8 > 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : i3 = i7 / 60000
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : i3 = i7 / 60000 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : $z0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: boolean iShowSeparators>
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : $z0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: boolean iShowSeparators> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : if $z0 == 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : if $z0 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, i3, 2)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, i3, 2) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : $i9 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMaxFields>
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : $i9 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMaxFields> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : if $i9 != 2
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : if $i9 != 2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : $i10 = i3 * 60000
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : $i10 = i3 * 60000 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : i11 = i7 - $i10
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : i11 = i7 - $i10 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : if i11 != 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : if i11 != 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : $i12 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMinFields>
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : $i12 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMinFields> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : if $i12 > 2
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : if $i12 > 2 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getNameKey : $r1 = specialinvoke r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info getInfo(long)>(l0)
org.joda.time.tz.CachedDateTimeZone.getNameKey : $r1 = specialinvoke r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info getInfo(long)>(l0) >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getNameKey : $r2 = virtualinvoke $r1.<org.joda.time.tz.CachedDateTimeZone$Info: java.lang.String getNameKey(long)>(l0)
org.joda.time.tz.CachedDateTimeZone.getNameKey : $r2 = virtualinvoke $r1.<org.joda.time.tz.CachedDateTimeZone$Info: java.lang.String getNameKey(long)>(l0) >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : $r1 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: org.joda.time.tz.CachedDateTimeZone$Info iNextInfo>
org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : $r1 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: org.joda.time.tz.CachedDateTimeZone$Info iNextInfo> >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : if $r1 == null
org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : if $r1 == null >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : $r3 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: java.lang.String iNameKey>
org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : $r3 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: java.lang.String iNameKey> >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : if $r3 != null
org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : if $r3 != null >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : $r4 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: org.joda.time.DateTimeZone iZoneRef>
org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : $r4 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: org.joda.time.DateTimeZone iZoneRef> >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : $l3 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: long iPeriodStart>
org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : $l3 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: long iPeriodStart> >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : $r5 = virtualinvoke $r4.<org.joda.time.DateTimeZone: java.lang.String getNameKey(long)>($l3)
org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : $r5 = virtualinvoke $r4.<org.joda.time.DateTimeZone: java.lang.String getNameKey(long)>($l3) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : i1 = staticinvoke <java.util.Arrays: int binarySearch(long[],long)>(r1, l0)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : i1 = staticinvoke <java.util.Arrays: int binarySearch(long[],long)>(r1, l0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : if i1 < 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : if i1 < 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : i2 = i1 ^ -1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : i2 = i1 ^ -1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : $i3 = lengthof r1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : $i3 = lengthof r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : if i2 >= $i3
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : if i2 >= $i3 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : if i2 <= 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : if i2 <= 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : $r4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String[] iNameKeys>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : $r4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String[] iNameKeys> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : $i4 = i2 - 1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : $i4 = i2 - 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : $r5 = $r4[$i4]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : $r5 = $r4[$i4] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : return $r5
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : return $r5 >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : r0.<org.joda.time.tz.CachedDateTimeZone$Info: java.lang.String iNameKey> = $r5
org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : r0.<org.joda.time.tz.CachedDateTimeZone$Info: java.lang.String iNameKey> = $r5 >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : $r6 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: java.lang.String iNameKey>
org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : $r6 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: java.lang.String iNameKey> >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : return $r6
org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : return $r6 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getNameKey : return $r2
org.joda.time.tz.CachedDateTimeZone.getNameKey : return $r2 >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : $r43 = r7[4]
org.joda.time.tz.DefaultNameProvider.getNameSet : $r43 = r7[4] >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : $r44 = newarray (java.lang.String)[2]
org.joda.time.tz.DefaultNameProvider.getNameSet : $r44 = newarray (java.lang.String)[2] >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : $r45 = r24[4]
org.joda.time.tz.DefaultNameProvider.getNameSet : $r45 = r24[4] >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : $r44[0] = $r45
org.joda.time.tz.DefaultNameProvider.getNameSet : $r44[0] = $r45 >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : $r46 = r24[3]
org.joda.time.tz.DefaultNameProvider.getNameSet : $r46 = r24[3] >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : $r44[1] = $r46
org.joda.time.tz.DefaultNameProvider.getNameSet : $r44[1] = $r46 >>>>>>>> org.joda.time.tz.DefaultNameProvider.getNameSet : interfaceinvoke r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r43, $r44)
org.joda.time.tz.DefaultNameProvider.getNameSet : interfaceinvoke r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r43, $r44) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(43)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(43) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : goto [?= i2 = i1 / 3600000]
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : goto [?= i2 = i1 / 3600000] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : $r6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : $r6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : if $r6 != null
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : if $r6 != null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : $r7 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String[] iNameKeys>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : $r7 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String[] iNameKeys> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : $i5 = i2 - 1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : $i5 = i2 - 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : $r8 = $r7[$i5]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : $r8 = $r7[$i5] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : return $r8
