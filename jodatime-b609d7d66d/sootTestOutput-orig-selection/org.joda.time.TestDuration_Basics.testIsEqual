org.joda.time.DateTimeUtils.setCurrentMillisSystem : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>() >>>>>>>> org.joda.time.DateTimeUtils.checkPermission : r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>()
org.joda.time.DateTimeUtils.checkPermission : r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>() >>>>>>>> org.joda.time.DateTimeUtils.checkPermission : if r0 == null
org.joda.time.DateTimeUtils.checkPermission : if r0 == null >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisSystem : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$SystemMillisProvider SYSTEM_MILLIS_PROVIDER>
org.joda.time.DateTimeUtils.setCurrentMillisSystem : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$SystemMillisProvider SYSTEM_MILLIS_PROVIDER> >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisSystem : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0
org.joda.time.DateTimeUtils.setCurrentMillisSystem : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0 >>>>>>>> org.joda.time.DateTimeZone.setDefault : r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>()
org.joda.time.DateTimeZone.setDefault : r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>() >>>>>>>> org.joda.time.DateTimeZone.setDefault : if r1 == null
org.joda.time.DateTimeZone.setDefault : if r1 == null >>>>>>>> org.joda.time.DateTimeZone.setDefault : if r0 != null
org.joda.time.DateTimeZone.setDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.setDefault : $r6 = class "org/joda/time/DateTimeZone"
org.joda.time.DateTimeZone.setDefault : $r6 = class "org/joda/time/DateTimeZone" >>>>>>>> org.joda.time.DateTimeZone.setDefault : r3 = $r6
org.joda.time.DateTimeZone.setDefault : r3 = $r6 >>>>>>>> org.joda.time.DateTimeZone.setDefault : entermonitor $r6
org.joda.time.DateTimeZone.setDefault : entermonitor $r6 >>>>>>>> org.joda.time.DateTimeZone.setDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r0
org.joda.time.DateTimeZone.setDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r0 >>>>>>>> org.joda.time.DateTimeZone.setDefault : exitmonitor r3
org.joda.time.DateTimeZone.setDefault : exitmonitor r3 >>>>>>>> org.joda.time.DateTimeZone.setDefault : goto [?= return]
org.joda.time.DateTimeZone.setDefault : goto [?= return] >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>()
org.joda.time.DateTimeUtils.setCurrentMillisFixed : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>() >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : $r0 = new org.joda.time.DateTimeUtils$FixedMillisProvider
org.joda.time.DateTimeUtils.setCurrentMillisFixed : $r0 = new org.joda.time.DateTimeUtils$FixedMillisProvider >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : specialinvoke $r0.<org.joda.time.DateTimeUtils$FixedMillisProvider: void <init>(long)>(l0)
org.joda.time.DateTimeUtils.setCurrentMillisFixed : specialinvoke $r0.<org.joda.time.DateTimeUtils$FixedMillisProvider: void <init>(long)>(l0) >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0
org.joda.time.DateTimeUtils.setCurrentMillisFixed : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0 >>>>>>>> org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> >>>>>>>> org.joda.time.DateTimeZone.getDefault : if r0 != null
org.joda.time.DateTimeZone.getDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.DateTimeZone.getDefault : return r0 >>>>>>>> org.joda.time.base.AbstractDuration.isEqual : if r1 != null
org.joda.time.base.AbstractDuration.isEqual : if r1 != null >>>>>>>> org.joda.time.base.AbstractDuration.isEqual : $i0 = virtualinvoke r0.<org.joda.time.base.AbstractDuration: int compareTo(org.joda.time.ReadableDuration)>(r1)
org.joda.time.base.AbstractDuration.isEqual : $i0 = virtualinvoke r0.<org.joda.time.base.AbstractDuration: int compareTo(org.joda.time.ReadableDuration)>(r1) >>>>>>>> org.joda.time.base.AbstractDuration.compareTo : l0 = virtualinvoke r0.<org.joda.time.base.AbstractDuration: long getMillis()>()
org.joda.time.base.AbstractDuration.compareTo : l0 = virtualinvoke r0.<org.joda.time.base.AbstractDuration: long getMillis()>() >>>>>>>> org.joda.time.base.BaseDuration.getMillis : $l0 = r0.<org.joda.time.base.BaseDuration: long iMillis>
org.joda.time.base.BaseDuration.getMillis : $l0 = r0.<org.joda.time.base.BaseDuration: long iMillis> >>>>>>>> org.joda.time.base.BaseDuration.getMillis : return $l0
org.joda.time.base.BaseDuration.getMillis : return $l0 >>>>>>>> org.joda.time.base.AbstractDuration.compareTo : l1 = interfaceinvoke r1.<org.joda.time.ReadableDuration: long getMillis()>()
org.joda.time.base.AbstractDuration.compareTo : l1 = interfaceinvoke r1.<org.joda.time.ReadableDuration: long getMillis()>() >>>>>>>> org.joda.time.base.AbstractDuration.compareTo : $b2 = l0 cmp l1
org.joda.time.base.AbstractDuration.compareTo : $b2 = l0 cmp l1 >>>>>>>> org.joda.time.base.AbstractDuration.compareTo : if $b2 >= 0
org.joda.time.base.AbstractDuration.compareTo : if $b2 >= 0 >>>>>>>> org.joda.time.base.AbstractDuration.compareTo : $b3 = l0 cmp l1
org.joda.time.base.AbstractDuration.compareTo : $b3 = l0 cmp l1 >>>>>>>> org.joda.time.base.AbstractDuration.compareTo : if $b3 <= 0
org.joda.time.base.AbstractDuration.compareTo : if $b3 <= 0 >>>>>>>> org.joda.time.base.AbstractDuration.compareTo : return 0
org.joda.time.base.AbstractDuration.compareTo : return 0 >>>>>>>> org.joda.time.base.AbstractDuration.isEqual : if $i0 != 0
org.joda.time.base.AbstractDuration.isEqual : if $i0 != 0 >>>>>>>> org.joda.time.base.AbstractDuration.isEqual : $z0 = 1
org.joda.time.base.AbstractDuration.isEqual : $z0 = 1 >>>>>>>> org.joda.time.base.AbstractDuration.isEqual : goto [?= return $z0]
org.joda.time.base.AbstractDuration.isEqual : goto [?= return $z0] >>>>>>>> org.joda.time.base.AbstractDuration.isEqual : return $z0
org.joda.time.base.AbstractDuration.isEqual : return $z0 >>>>>>>> org.joda.time.base.AbstractDuration.compareTo : return -1
org.joda.time.base.AbstractDuration.compareTo : return -1 >>>>>>>> org.joda.time.base.AbstractDuration.isEqual : $z0 = 0
org.joda.time.base.AbstractDuration.isEqual : $z0 = 0 >>>>>>>> org.joda.time.base.AbstractDuration.compareTo : return 1
org.joda.time.base.AbstractDuration.compareTo : return 1 >>>>>>>> org.joda.time.TestDuration_Basics$MockDuration.getMillis : $l0 = r0.<org.joda.time.TestDuration_Basics$MockDuration: long iValue>
org.joda.time.TestDuration_Basics$MockDuration.getMillis : $l0 = r0.<org.joda.time.TestDuration_Basics$MockDuration: long iValue> >>>>>>>> org.joda.time.TestDuration_Basics$MockDuration.getMillis : return $l0
org.joda.time.TestDuration_Basics$MockDuration.getMillis : return $l0 >>>>>>>> org.joda.time.base.AbstractDuration.isEqual : r1 = <org.joda.time.Duration: org.joda.time.Duration ZERO>
