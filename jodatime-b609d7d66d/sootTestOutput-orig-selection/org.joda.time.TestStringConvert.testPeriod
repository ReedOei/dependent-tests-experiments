org.joda.time.DateTimeUtils.setCurrentMillisSystem : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>() >>>>>>>> org.joda.time.DateTimeUtils.checkPermission : r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>()
org.joda.time.DateTimeUtils.checkPermission : r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>() >>>>>>>> org.joda.time.DateTimeUtils.checkPermission : if r0 == null
org.joda.time.DateTimeUtils.checkPermission : if r0 == null >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisSystem : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$SystemMillisProvider SYSTEM_MILLIS_PROVIDER>
org.joda.time.DateTimeUtils.setCurrentMillisSystem : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$SystemMillisProvider SYSTEM_MILLIS_PROVIDER> >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisSystem : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0
org.joda.time.DateTimeUtils.setCurrentMillisSystem : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0 >>>>>>>> org.joda.time.DateTimeZone.setDefault : r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>()
org.joda.time.DateTimeZone.setDefault : r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>() >>>>>>>> org.joda.time.DateTimeZone.setDefault : if r1 == null
org.joda.time.DateTimeZone.setDefault : if r1 == null >>>>>>>> org.joda.time.DateTimeZone.setDefault : if r0 != null
org.joda.time.DateTimeZone.setDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.setDefault : $r6 = class "org/joda/time/DateTimeZone"
org.joda.time.DateTimeZone.setDefault : $r6 = class "org/joda/time/DateTimeZone" >>>>>>>> org.joda.time.DateTimeZone.setDefault : r3 = $r6
org.joda.time.DateTimeZone.setDefault : r3 = $r6 >>>>>>>> org.joda.time.DateTimeZone.setDefault : entermonitor $r6
org.joda.time.DateTimeZone.setDefault : entermonitor $r6 >>>>>>>> org.joda.time.DateTimeZone.setDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r0
org.joda.time.DateTimeZone.setDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r0 >>>>>>>> org.joda.time.DateTimeZone.setDefault : exitmonitor r3
org.joda.time.DateTimeZone.setDefault : exitmonitor r3 >>>>>>>> org.joda.time.DateTimeZone.setDefault : goto [?= return]
org.joda.time.DateTimeZone.setDefault : goto [?= return] >>>>>>>> org.joda.time.DateTimeZone.forID : if r0 != null
org.joda.time.DateTimeZone.forID : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.forID : $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("UTC")
org.joda.time.DateTimeZone.forID : $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("UTC") >>>>>>>> org.joda.time.DateTimeZone.forID : if $z0 == 0
org.joda.time.DateTimeZone.forID : if $z0 == 0 >>>>>>>> org.joda.time.DateTimeZone.forID : $r4 = <org.joda.time.DateTimeZone: org.joda.time.tz.Provider cProvider>
org.joda.time.DateTimeZone.forID : $r4 = <org.joda.time.DateTimeZone: org.joda.time.tz.Provider cProvider> >>>>>>>> org.joda.time.DateTimeZone.forID : r1 = interfaceinvoke $r4.<org.joda.time.tz.Provider: org.joda.time.DateTimeZone getZone(java.lang.String)>(r0)
org.joda.time.DateTimeZone.forID : r1 = interfaceinvoke $r4.<org.joda.time.tz.Provider: org.joda.time.DateTimeZone getZone(java.lang.String)>(r0) >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : if r1 != null
org.joda.time.tz.ZoneInfoProvider.getZone : if r1 != null >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : $r5 = r0.<org.joda.time.tz.ZoneInfoProvider: java.util.Map iZoneInfoMap>
org.joda.time.tz.ZoneInfoProvider.getZone : $r5 = r0.<org.joda.time.tz.ZoneInfoProvider: java.util.Map iZoneInfoMap> >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : r2 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.joda.time.tz.ZoneInfoProvider.getZone : r2 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : if r2 != null
org.joda.time.tz.ZoneInfoProvider.getZone : if r2 != null >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : return null
org.joda.time.tz.ZoneInfoProvider.getZone : return null >>>>>>>> org.joda.time.DateTimeZone.forID : if r1 == null
org.joda.time.DateTimeZone.forID : if r1 == null >>>>>>>> org.joda.time.DateTimeZone.forID : $z1 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("+")
org.joda.time.DateTimeZone.forID : $z1 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("+") >>>>>>>> org.joda.time.DateTimeZone.forID : if $z1 != 0
org.joda.time.DateTimeZone.forID : if $z1 != 0 >>>>>>>> org.joda.time.DateTimeZone.forID : i0 = staticinvoke <org.joda.time.DateTimeZone: int parseOffset(java.lang.String)>(r0)
org.joda.time.DateTimeZone.forID : i0 = staticinvoke <org.joda.time.DateTimeZone: int parseOffset(java.lang.String)>(r0) >>>>>>>> org.joda.time.DateTimeZone.parseOffset : $r1 = new org.joda.time.DateTimeZone$1
org.joda.time.DateTimeZone.parseOffset : $r1 = new org.joda.time.DateTimeZone$1 >>>>>>>> org.joda.time.DateTimeZone.parseOffset : specialinvoke $r1.<org.joda.time.DateTimeZone$1: void <init>()>()
org.joda.time.DateTimeZone.parseOffset : specialinvoke $r1.<org.joda.time.DateTimeZone$1: void <init>()>() >>>>>>>> org.joda.time.DateTimeZone.parseOffset : r2 = $r1
org.joda.time.DateTimeZone.parseOffset : r2 = $r1 >>>>>>>> org.joda.time.DateTimeZone.parseOffset : $r3 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.format.DateTimeFormatter offsetFormatter()>()
org.joda.time.DateTimeZone.parseOffset : $r3 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.format.DateTimeFormatter offsetFormatter()>() >>>>>>>> org.joda.time.DateTimeZone.offsetFormatter : $r0 = <org.joda.time.DateTimeZone: org.joda.time.format.DateTimeFormatter cOffsetFormatter>
org.joda.time.DateTimeZone.offsetFormatter : $r0 = <org.joda.time.DateTimeZone: org.joda.time.format.DateTimeFormatter cOffsetFormatter> >>>>>>>> org.joda.time.DateTimeZone.offsetFormatter : if $r0 != null
org.joda.time.DateTimeZone.offsetFormatter : if $r0 != null >>>>>>>> org.joda.time.DateTimeZone.offsetFormatter : $r4 = <org.joda.time.DateTimeZone: org.joda.time.format.DateTimeFormatter cOffsetFormatter>
org.joda.time.DateTimeZone.offsetFormatter : $r4 = <org.joda.time.DateTimeZone: org.joda.time.format.DateTimeFormatter cOffsetFormatter> >>>>>>>> org.joda.time.DateTimeZone.offsetFormatter : return $r4
org.joda.time.DateTimeZone.offsetFormatter : return $r4 >>>>>>>> org.joda.time.DateTimeZone.parseOffset : $r4 = virtualinvoke $r3.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)>(r2)
org.joda.time.DateTimeZone.parseOffset : $r4 = virtualinvoke $r3.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)>(r2) >>>>>>>> org.joda.time.format.DateTimeFormatter.withChronology : $r2 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>
org.joda.time.format.DateTimeFormatter.withChronology : $r2 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono> >>>>>>>> org.joda.time.format.DateTimeFormatter.withChronology : if $r2 != r1
org.joda.time.format.DateTimeFormatter.withChronology : if $r2 != r1 >>>>>>>> org.joda.time.format.DateTimeFormatter.withChronology : $r3 = new org.joda.time.format.DateTimeFormatter
org.joda.time.format.DateTimeFormatter.withChronology : $r3 = new org.joda.time.format.DateTimeFormatter >>>>>>>> org.joda.time.format.DateTimeFormatter.withChronology : $r4 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter iPrinter>
org.joda.time.format.DateTimeFormatter.withChronology : $r4 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter iPrinter> >>>>>>>> org.joda.time.format.DateTimeFormatter.withChronology : $r5 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser iParser>
org.joda.time.format.DateTimeFormatter.withChronology : $r5 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser iParser> >>>>>>>> org.joda.time.format.DateTimeFormatter.withChronology : $r6 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>
org.joda.time.format.DateTimeFormatter.withChronology : $r6 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale> >>>>>>>> org.joda.time.format.DateTimeFormatter.withChronology : $z0 = r0.<org.joda.time.format.DateTimeFormatter: boolean iOffsetParsed>
org.joda.time.format.DateTimeFormatter.withChronology : $z0 = r0.<org.joda.time.format.DateTimeFormatter: boolean iOffsetParsed> >>>>>>>> org.joda.time.format.DateTimeFormatter.withChronology : $r7 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>
org.joda.time.format.DateTimeFormatter.withChronology : $r7 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.format.DateTimeFormatter.withChronology : $r8 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear>
org.joda.time.format.DateTimeFormatter.withChronology : $r8 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear> >>>>>>>> org.joda.time.format.DateTimeFormatter.withChronology : $i0 = r0.<org.joda.time.format.DateTimeFormatter: int iDefaultYear>
org.joda.time.format.DateTimeFormatter.withChronology : $i0 = r0.<org.joda.time.format.DateTimeFormatter: int iDefaultYear> >>>>>>>> org.joda.time.format.DateTimeFormatter.withChronology : specialinvoke $r3.<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser,java.util.Locale,boolean,org.joda.time.Chronology,org.joda.time.DateTimeZone,java.lang.Integer,int)>($r4, $r5, $r6, $z0, r1, $r7, $r8, $i0)
org.joda.time.format.DateTimeFormatter.withChronology : specialinvoke $r3.<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser,java.util.Locale,boolean,org.joda.time.Chronology,org.joda.time.DateTimeZone,java.lang.Integer,int)>($r4, $r5, $r6, $z0, r1, $r7, $r8, $i0) >>>>>>>> org.joda.time.format.DateTimeFormatter.withChronology : return $r3
org.joda.time.format.DateTimeFormatter.withChronology : return $r3 >>>>>>>> org.joda.time.DateTimeZone.parseOffset : $l0 = virtualinvoke $r4.<org.joda.time.format.DateTimeFormatter: long parseMillis(java.lang.String)>(r0)
org.joda.time.DateTimeZone.parseOffset : $l0 = virtualinvoke $r4.<org.joda.time.format.DateTimeFormatter: long parseMillis(java.lang.String)>(r0) >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : r2 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser requireParser()>()
org.joda.time.format.DateTimeFormatter.parseMillis : r2 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser requireParser()>() >>>>>>>> org.joda.time.format.DateTimeFormatter.requireParser : r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser iParser>
org.joda.time.format.DateTimeFormatter.requireParser : r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser iParser> >>>>>>>> org.joda.time.format.DateTimeFormatter.requireParser : if r1 != null
org.joda.time.format.DateTimeFormatter.requireParser : if r1 != null >>>>>>>> org.joda.time.format.DateTimeFormatter.requireParser : return r1
org.joda.time.format.DateTimeFormatter.requireParser : return r1 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : $r5 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>
org.joda.time.format.DateTimeFormatter.parseMillis : $r5 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono> >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : r3 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>($r5)
org.joda.time.format.DateTimeFormatter.parseMillis : r3 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>($r5) >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.format.DateTimeFormatter.selectChronology : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DateTimeUtils.getChronology : if r0 != null
org.joda.time.DateTimeUtils.getChronology : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getChronology : return r0
org.joda.time.DateTimeUtils.getChronology : return r0 >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : $r3 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>
org.joda.time.format.DateTimeFormatter.selectChronology : $r3 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono> >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : if $r3 == null
org.joda.time.format.DateTimeFormatter.selectChronology : if $r3 == null >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : r2 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>
org.joda.time.format.DateTimeFormatter.selectChronology : r2 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono> >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : $r4 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>
org.joda.time.format.DateTimeFormatter.selectChronology : $r4 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : if $r4 == null
org.joda.time.format.DateTimeFormatter.selectChronology : if $r4 == null >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : return r2
org.joda.time.format.DateTimeFormatter.selectChronology : return r2 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : $r6 = new org.joda.time.format.DateTimeParserBucket
org.joda.time.format.DateTimeFormatter.parseMillis : $r6 = new org.joda.time.format.DateTimeParserBucket >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : $r7 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>
org.joda.time.format.DateTimeFormatter.parseMillis : $r7 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale> >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : $r8 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear>
org.joda.time.format.DateTimeFormatter.parseMillis : $r8 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear> >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : $i1 = r0.<org.joda.time.format.DateTimeFormatter: int iDefaultYear>
org.joda.time.format.DateTimeFormatter.parseMillis : $i1 = r0.<org.joda.time.format.DateTimeFormatter: int iDefaultYear> >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : specialinvoke $r6.<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>(0L, r3, $r7, $r8, $i1)
org.joda.time.format.DateTimeFormatter.parseMillis : specialinvoke $r6.<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>(0L, r3, $r7, $r8, $i1) >>>>>>>> org.joda.time.DateTimeZone$1.getZone : return null
org.joda.time.DateTimeZone$1.getZone : return null >>>>>>>> org.joda.time.DateTimeZone$1.withUTC : return r0
org.joda.time.DateTimeZone$1.withUTC : return r0 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : r4 = $r6
org.joda.time.format.DateTimeFormatter.parseMillis : r4 = $r6 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : i0 = interfaceinvoke r2.<org.joda.time.format.DateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>(r4, r1, 0)
org.joda.time.format.DateTimeFormatter.parseMillis : i0 = interfaceinvoke r2.<org.joda.time.format.DateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>(r4, r1, 0) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i9 = virtualinvoke r2.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i9 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i1 = $i9 - i0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i1 = $i9 - i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetParseText>
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetParseText> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if $r3 == null
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if $r3 == null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i1 > 1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i1 > 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : c3 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i0)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : c3 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i0) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if c3 != 45
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if c3 != 45 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if c3 != 43
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if c3 != 43 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : z2 = 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : z2 = 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : goto [?= i16 = i1 + -1]
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : goto [?= i16 = i1 + -1] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i16 = i1 + -1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i16 = i1 + -1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i17 = i0 + 1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i17 = i0 + 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i18 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.String,int,int)>(r2, i17, 2)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i18 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.String,int,int)>(r2, i17, 2) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : $i4 = virtualinvoke r1.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : $i4 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : $i5 = $i4 - i0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : $i5 = $i4 - i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : i2 = staticinvoke <java.lang.Math: int min(int,int)>($i5, i1)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : i2 = staticinvoke <java.lang.Math: int min(int,int)>($i5, i1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : i6 = 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : i6 = 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : if i2 <= 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : if i2 <= 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : $i7 = i0 + i6
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : $i7 = i0 + i6 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i7)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i7) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : if c3 < 48
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : if c3 < 48 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : if c3 <= 57
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : if c3 <= 57 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : i6 = i6 + 1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : i6 = i6 + 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : i2 = i2 + -1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : i2 = i2 + -1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : goto [?= (branch)]
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : goto [?= (branch)] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : return i6
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : return i6 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if $i18 >= 2
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if $i18 >= 2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i4 = staticinvoke <org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.String,int)>(r2, i17)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i4 = staticinvoke <org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.String,int)>(r2, i17) >>>>>>>> org.joda.time.format.FormatUtils.parseTwoDigits : $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0)
org.joda.time.format.FormatUtils.parseTwoDigits : $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0) >>>>>>>> org.joda.time.format.FormatUtils.parseTwoDigits : i1 = $c2 - 48
org.joda.time.format.FormatUtils.parseTwoDigits : i1 = $c2 - 48 >>>>>>>> org.joda.time.format.FormatUtils.parseTwoDigits : $i3 = i1 << 3
org.joda.time.format.FormatUtils.parseTwoDigits : $i3 = i1 << 3 >>>>>>>> org.joda.time.format.FormatUtils.parseTwoDigits : $i4 = i1 << 1
org.joda.time.format.FormatUtils.parseTwoDigits : $i4 = i1 << 1 >>>>>>>> org.joda.time.format.FormatUtils.parseTwoDigits : $i5 = $i3 + $i4
org.joda.time.format.FormatUtils.parseTwoDigits : $i5 = $i3 + $i4 >>>>>>>> org.joda.time.format.FormatUtils.parseTwoDigits : $i6 = i0 + 1
org.joda.time.format.FormatUtils.parseTwoDigits : $i6 = i0 + 1 >>>>>>>> org.joda.time.format.FormatUtils.parseTwoDigits : $c7 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i6)
org.joda.time.format.FormatUtils.parseTwoDigits : $c7 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i6) >>>>>>>> org.joda.time.format.FormatUtils.parseTwoDigits : $i8 = $i5 + $c7
org.joda.time.format.FormatUtils.parseTwoDigits : $i8 = $i5 + $c7 >>>>>>>> org.joda.time.format.FormatUtils.parseTwoDigits : $i9 = $i8 - 48
org.joda.time.format.FormatUtils.parseTwoDigits : $i9 = $i8 - 48 >>>>>>>> org.joda.time.format.FormatUtils.parseTwoDigits : return $i9
org.joda.time.format.FormatUtils.parseTwoDigits : return $i9 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i4 <= 23
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i4 <= 23 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i5 = i4 * 3600000
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i5 = i4 * 3600000 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i21 = i16 + -2
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i21 = i16 + -2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i22 = i17 + 2
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i22 = i17 + 2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i21 > 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i21 > 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : c23 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i22)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : c23 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i22) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if c23 != 58
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if c23 != 58 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : z0 = 1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : z0 = 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i21 = i21 + -1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i21 = i21 + -1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i22 = i22 + 1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i22 = i22 + 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : goto [?= i6 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.String,int,int)>(r2, i22, 2)]
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : goto [?= i6 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.String,int,int)>(r2, i22, 2)] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i6 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.String,int,int)>(r2, i22, 2)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i6 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.String,int,int)>(r2, i22, 2) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i6 != 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i6 != 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i6 >= 2
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i6 >= 2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i7 = staticinvoke <org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.String,int)>(r2, i22)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i7 = staticinvoke <org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.String,int)>(r2, i22) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i7 <= 59
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i7 <= 59 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i26 = i7 * 60000
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i26 = i7 * 60000 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i5 = i5 + $i26
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i5 = i5 + $i26 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i27 = i21 + -2
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i27 = i21 + -2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i22 = i22 + 2
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i22 = i22 + 2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i27 > 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i27 > 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : goto [?= (branch)]
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : goto [?= (branch)] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if z2 == 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if z2 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i50 = i5
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i50 = i5 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i50)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i50) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: void setOffset(java.lang.Integer)>($r11)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: void setOffset(java.lang.Integer)>($r11) >>>>>>>> org.joda.time.format.DateTimeParserBucket.setOffset : r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState> = null
org.joda.time.format.DateTimeParserBucket.setOffset : r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState> = null >>>>>>>> org.joda.time.format.DateTimeParserBucket.setOffset : r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset> = r1
org.joda.time.format.DateTimeParserBucket.setOffset : r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset> = r1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : return i22
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : return i22 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : if i0 < 0
org.joda.time.format.DateTimeFormatter.parseMillis : if i0 < 0 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : $i2 = virtualinvoke r1.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatter.parseMillis : $i2 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : if i0 < $i2
org.joda.time.format.DateTimeFormatter.parseMillis : if i0 < $i2 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : $l3 = virtualinvoke r4.<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.String)>(1, r1)
org.joda.time.format.DateTimeFormatter.parseMillis : $l3 = virtualinvoke r4.<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.String)>(1, r1) >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : r2 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields>
org.joda.time.format.DateTimeParserBucket.computeMillis : r2 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields> >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : i0 = r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount>
org.joda.time.format.DateTimeParserBucket.computeMillis : i0 = r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount> >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $z1 = r0.<org.joda.time.format.DateTimeParserBucket: boolean iSavedFieldsShared>
org.joda.time.format.DateTimeParserBucket.computeMillis : $z1 = r0.<org.joda.time.format.DateTimeParserBucket: boolean iSavedFieldsShared> >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : if $z1 == 0
org.joda.time.format.DateTimeParserBucket.computeMillis : if $z1 == 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : staticinvoke <org.joda.time.format.DateTimeParserBucket: void sort(org.joda.time.format.DateTimeParserBucket$SavedField[],int)>(r2, i0)
org.joda.time.format.DateTimeParserBucket.computeMillis : staticinvoke <org.joda.time.format.DateTimeParserBucket: void sort(org.joda.time.format.DateTimeParserBucket$SavedField[],int)>(r2, i0) >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : if i0 <= 10
org.joda.time.format.DateTimeParserBucket.sort : if i0 <= 10 >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : i1 = 0
org.joda.time.format.DateTimeParserBucket.sort : i1 = 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : if i1 >= i0
org.joda.time.format.DateTimeParserBucket.sort : if i1 >= i0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : if i0 <= 0
org.joda.time.format.DateTimeParserBucket.computeMillis : if i0 <= 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : l5 = r0.<org.joda.time.format.DateTimeParserBucket: long iMillis>
org.joda.time.format.DateTimeParserBucket.computeMillis : l5 = r0.<org.joda.time.format.DateTimeParserBucket: long iMillis> >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : i6 = 0
org.joda.time.format.DateTimeParserBucket.computeMillis : i6 = 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : if i6 >= i0
org.joda.time.format.DateTimeParserBucket.computeMillis : if i6 >= i0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : if z0 == 0
org.joda.time.format.DateTimeParserBucket.computeMillis : if z0 == 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : i7 = 0
org.joda.time.format.DateTimeParserBucket.computeMillis : i7 = 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : if i7 >= i0
org.joda.time.format.DateTimeParserBucket.computeMillis : if i7 >= i0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : goto [?= $r27 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset>]
org.joda.time.format.DateTimeParserBucket.computeMillis : goto [?= $r27 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset>] >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $r27 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset>
org.joda.time.format.DateTimeParserBucket.computeMillis : $r27 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset> >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : if $r27 == null
org.joda.time.format.DateTimeParserBucket.computeMillis : if $r27 == null >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $r28 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset>
org.joda.time.format.DateTimeParserBucket.computeMillis : $r28 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset> >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $i10 = virtualinvoke $r28.<java.lang.Integer: int intValue()>()
org.joda.time.format.DateTimeParserBucket.computeMillis : $i10 = virtualinvoke $r28.<java.lang.Integer: int intValue()>() >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $l11 = (long) $i10
org.joda.time.format.DateTimeParserBucket.computeMillis : $l11 = (long) $i10 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : l5 = l5 - $l11
org.joda.time.format.DateTimeParserBucket.computeMillis : l5 = l5 - $l11 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : goto [?= return l5]
org.joda.time.format.DateTimeParserBucket.computeMillis : goto [?= return l5] >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : return l5
org.joda.time.format.DateTimeParserBucket.computeMillis : return l5 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : return $l3
org.joda.time.format.DateTimeFormatter.parseMillis : return $l3 >>>>>>>> org.joda.time.DateTimeZone.parseOffset : $i1 = (int) $l0
org.joda.time.DateTimeZone.parseOffset : $i1 = (int) $l0 >>>>>>>> org.joda.time.DateTimeZone.parseOffset : $i2 = neg $i1
org.joda.time.DateTimeZone.parseOffset : $i2 = neg $i1 >>>>>>>> org.joda.time.DateTimeZone.parseOffset : return $i2
org.joda.time.DateTimeZone.parseOffset : return $i2 >>>>>>>> org.joda.time.DateTimeZone.forID : $l1 = (long) i0
org.joda.time.DateTimeZone.forID : $l1 = (long) i0 >>>>>>>> org.joda.time.DateTimeZone.forID : $b2 = $l1 cmp 0L
org.joda.time.DateTimeZone.forID : $b2 = $l1 cmp 0L >>>>>>>> org.joda.time.DateTimeZone.forID : if $b2 != 0
org.joda.time.DateTimeZone.forID : if $b2 != 0 >>>>>>>> org.joda.time.DateTimeZone.forID : r6 = staticinvoke <org.joda.time.DateTimeZone: java.lang.String printOffset(int)>(i0)
org.joda.time.DateTimeZone.forID : r6 = staticinvoke <org.joda.time.DateTimeZone: java.lang.String printOffset(int)>(i0) >>>>>>>> org.joda.time.DateTimeZone.printOffset : $r0 = new java.lang.StringBuffer
org.joda.time.DateTimeZone.printOffset : $r0 = new java.lang.StringBuffer >>>>>>>> org.joda.time.DateTimeZone.printOffset : specialinvoke $r0.<java.lang.StringBuffer: void <init>()>()
org.joda.time.DateTimeZone.printOffset : specialinvoke $r0.<java.lang.StringBuffer: void <init>()>() >>>>>>>> org.joda.time.DateTimeZone.printOffset : r1 = $r0
org.joda.time.DateTimeZone.printOffset : r1 = $r0 >>>>>>>> org.joda.time.DateTimeZone.printOffset : if i0 < 0
org.joda.time.DateTimeZone.printOffset : if i0 < 0 >>>>>>>> org.joda.time.DateTimeZone.printOffset : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(43)
org.joda.time.DateTimeZone.printOffset : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(43) >>>>>>>> org.joda.time.DateTimeZone.printOffset : goto [?= i1 = i0 / 3600000]
org.joda.time.DateTimeZone.printOffset : goto [?= i1 = i0 / 3600000] >>>>>>>> org.joda.time.DateTimeZone.printOffset : i1 = i0 / 3600000
org.joda.time.DateTimeZone.printOffset : i1 = i0 / 3600000 >>>>>>>> org.joda.time.DateTimeZone.printOffset : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, i1, 2)
org.joda.time.DateTimeZone.printOffset : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, i1, 2) >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 0
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 0 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 10
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 10 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i1 <= 1
org.joda.time.format.FormatUtils.appendPaddedInteger : if i1 <= 1 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48)
org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48) >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : i1 = i1 + -1
org.joda.time.format.FormatUtils.appendPaddedInteger : i1 = i1 + -1 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : goto [?= (branch)]
org.joda.time.format.FormatUtils.appendPaddedInteger : goto [?= (branch)] >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i3 = i0 + 48
org.joda.time.format.FormatUtils.appendPaddedInteger : $i3 = i0 + 48 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $c4 = (char) $i3
org.joda.time.format.FormatUtils.appendPaddedInteger : $c4 = (char) $i3 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4)
org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4) >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : goto [?= return]
org.joda.time.format.FormatUtils.appendPaddedInteger : goto [?= return] >>>>>>>> org.joda.time.DateTimeZone.printOffset : $i4 = i1 * 3600000
org.joda.time.DateTimeZone.printOffset : $i4 = i1 * 3600000 >>>>>>>> org.joda.time.DateTimeZone.printOffset : i5 = i0 - $i4
org.joda.time.DateTimeZone.printOffset : i5 = i0 - $i4 >>>>>>>> org.joda.time.DateTimeZone.printOffset : i2 = i5 / 60000
org.joda.time.DateTimeZone.printOffset : i2 = i5 / 60000 >>>>>>>> org.joda.time.DateTimeZone.printOffset : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58)
org.joda.time.DateTimeZone.printOffset : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58) >>>>>>>> org.joda.time.DateTimeZone.printOffset : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, i2, 2)
org.joda.time.DateTimeZone.printOffset : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, i2, 2) >>>>>>>> org.joda.time.DateTimeZone.printOffset : $i6 = i2 * 60000
org.joda.time.DateTimeZone.printOffset : $i6 = i2 * 60000 >>>>>>>> org.joda.time.DateTimeZone.printOffset : i7 = i5 - $i6
org.joda.time.DateTimeZone.printOffset : i7 = i5 - $i6 >>>>>>>> org.joda.time.DateTimeZone.printOffset : if i7 != 0
org.joda.time.DateTimeZone.printOffset : if i7 != 0 >>>>>>>> org.joda.time.DateTimeZone.printOffset : $r5 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>()
org.joda.time.DateTimeZone.printOffset : $r5 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> org.joda.time.DateTimeZone.printOffset : return $r5
org.joda.time.DateTimeZone.printOffset : return $r5 >>>>>>>> org.joda.time.DateTimeZone.forID : $r7 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone fixedOffsetZone(java.lang.String,int)>(r6, i0)
org.joda.time.DateTimeZone.forID : $r7 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone fixedOffsetZone(java.lang.String,int)>(r6, i0) >>>>>>>> org.joda.time.DateTimeZone.fixedOffsetZone : if i0 != 0
org.joda.time.DateTimeZone.fixedOffsetZone : if i0 != 0 >>>>>>>> org.joda.time.DateTimeZone.fixedOffsetZone : $r4 = <org.joda.time.DateTimeZone: java.util.Map iFixedOffsetCache>
org.joda.time.DateTimeZone.fixedOffsetZone : $r4 = <org.joda.time.DateTimeZone: java.util.Map iFixedOffsetCache> >>>>>>>> org.joda.time.DateTimeZone.fixedOffsetZone : if $r4 != null
org.joda.time.DateTimeZone.fixedOffsetZone : if $r4 != null >>>>>>>> org.joda.time.DateTimeZone.fixedOffsetZone : $r6 = <org.joda.time.DateTimeZone: java.util.Map iFixedOffsetCache>
org.joda.time.DateTimeZone.fixedOffsetZone : $r6 = <org.joda.time.DateTimeZone: java.util.Map iFixedOffsetCache> >>>>>>>> org.joda.time.DateTimeZone.fixedOffsetZone : $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0)
org.joda.time.DateTimeZone.fixedOffsetZone : $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> org.joda.time.DateTimeZone.fixedOffsetZone : r1 = (java.lang.ref.Reference) $r7
org.joda.time.DateTimeZone.fixedOffsetZone : r1 = (java.lang.ref.Reference) $r7 >>>>>>>> org.joda.time.DateTimeZone.fixedOffsetZone : if r1 == null
org.joda.time.DateTimeZone.fixedOffsetZone : if r1 == null >>>>>>>> org.joda.time.DateTimeZone.fixedOffsetZone : $r8 = virtualinvoke r1.<java.lang.ref.Reference: java.lang.Object get()>()
org.joda.time.DateTimeZone.fixedOffsetZone : $r8 = virtualinvoke r1.<java.lang.ref.Reference: java.lang.Object get()>() >>>>>>>> org.joda.time.DateTimeZone.fixedOffsetZone : r2 = (org.joda.time.DateTimeZone) $r8
org.joda.time.DateTimeZone.fixedOffsetZone : r2 = (org.joda.time.DateTimeZone) $r8 >>>>>>>> org.joda.time.DateTimeZone.fixedOffsetZone : if r2 == null
org.joda.time.DateTimeZone.fixedOffsetZone : if r2 == null >>>>>>>> org.joda.time.DateTimeZone.fixedOffsetZone : return r2
org.joda.time.DateTimeZone.fixedOffsetZone : return r2 >>>>>>>> org.joda.time.DateTimeZone.forID : return $r7
org.joda.time.DateTimeZone.forID : return $r7 >>>>>>>> org.joda.time.PeriodType.standard : r0 = <org.joda.time.PeriodType: org.joda.time.PeriodType cStandard>
org.joda.time.PeriodType.standard : r0 = <org.joda.time.PeriodType: org.joda.time.PeriodType cStandard> >>>>>>>> org.joda.time.PeriodType.standard : if r0 != null
org.joda.time.PeriodType.standard : if r0 != null >>>>>>>> org.joda.time.PeriodType.standard : return r0
org.joda.time.PeriodType.standard : return r0 >>>>>>>> org.joda.time.base.BasePeriod.checkPeriodType : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>(r1)
org.joda.time.base.BasePeriod.checkPeriodType : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>(r1) >>>>>>>> org.joda.time.DateTimeUtils.getPeriodType : if r0 != null
org.joda.time.DateTimeUtils.getPeriodType : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getPeriodType : return r0
org.joda.time.DateTimeUtils.getPeriodType : return r0 >>>>>>>> org.joda.time.base.BasePeriod.checkPeriodType : return $r2
org.joda.time.base.BasePeriod.checkPeriodType : return $r2 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $i8 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int size()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $i8 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int size()>() >>>>>>>> org.joda.time.base.AbstractPeriod.size : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.base.AbstractPeriod.size : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.base.BasePeriod.getPeriodType : $r1 = r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType>
org.joda.time.base.BasePeriod.getPeriodType : $r1 = r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType> >>>>>>>> org.joda.time.base.BasePeriod.getPeriodType : return $r1
org.joda.time.base.BasePeriod.getPeriodType : return $r1 >>>>>>>> org.joda.time.base.AbstractPeriod.size : $i0 = virtualinvoke $r1.<org.joda.time.PeriodType: int size()>()
org.joda.time.base.AbstractPeriod.size : $i0 = virtualinvoke $r1.<org.joda.time.PeriodType: int size()>() >>>>>>>> org.joda.time.PeriodType.size : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.PeriodType.size : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes> >>>>>>>> org.joda.time.PeriodType.size : $i0 = lengthof $r1
org.joda.time.PeriodType.size : $i0 = lengthof $r1 >>>>>>>> org.joda.time.PeriodType.size : return $i0
org.joda.time.PeriodType.size : return $i0 >>>>>>>> org.joda.time.base.AbstractPeriod.size : return $i0
org.joda.time.base.AbstractPeriod.size : return $i0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : r1 = newarray (int)[$i8]
org.joda.time.base.BasePeriod.setPeriodInternal : r1 = newarray (int)[$i8] >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>() >>>>>>>> org.joda.time.DurationFieldType.years : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType YEARS_TYPE>
org.joda.time.DurationFieldType.years : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType YEARS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.years : return $r0
org.joda.time.DurationFieldType.years : return $r0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r2, r1, i0)
org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r2, r1, i0) >>>>>>>> org.joda.time.base.BasePeriod.checkAndUpdate : i1 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int indexOf(org.joda.time.DurationFieldType)>(r1)
org.joda.time.base.BasePeriod.checkAndUpdate : i1 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int indexOf(org.joda.time.DurationFieldType)>(r1) >>>>>>>> org.joda.time.base.AbstractPeriod.indexOf : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.base.AbstractPeriod.indexOf : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.base.AbstractPeriod.indexOf : $i0 = virtualinvoke $r2.<org.joda.time.PeriodType: int indexOf(org.joda.time.DurationFieldType)>(r1)
org.joda.time.base.AbstractPeriod.indexOf : $i0 = virtualinvoke $r2.<org.joda.time.PeriodType: int indexOf(org.joda.time.DurationFieldType)>(r1) >>>>>>>> org.joda.time.PeriodType.indexOf : i0 = 0
org.joda.time.PeriodType.indexOf : i0 = 0 >>>>>>>> org.joda.time.PeriodType.indexOf : i1 = virtualinvoke r0.<org.joda.time.PeriodType: int size()>()
org.joda.time.PeriodType.indexOf : i1 = virtualinvoke r0.<org.joda.time.PeriodType: int size()>() >>>>>>>> org.joda.time.PeriodType.indexOf : if i0 >= i1
org.joda.time.PeriodType.indexOf : if i0 >= i1 >>>>>>>> org.joda.time.PeriodType.indexOf : $r2 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.PeriodType.indexOf : $r2 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes> >>>>>>>> org.joda.time.PeriodType.indexOf : $r3 = $r2[i0]
org.joda.time.PeriodType.indexOf : $r3 = $r2[i0] >>>>>>>> org.joda.time.PeriodType.indexOf : if $r3 != r1
org.joda.time.PeriodType.indexOf : if $r3 != r1 >>>>>>>> org.joda.time.PeriodType.indexOf : return i0
org.joda.time.PeriodType.indexOf : return i0 >>>>>>>> org.joda.time.base.AbstractPeriod.indexOf : return $i0
org.joda.time.base.AbstractPeriod.indexOf : return $i0 >>>>>>>> org.joda.time.base.BasePeriod.checkAndUpdate : if i1 != -1
org.joda.time.base.BasePeriod.checkAndUpdate : if i1 != -1 >>>>>>>> org.joda.time.base.BasePeriod.checkAndUpdate : r2[i1] = i0
org.joda.time.base.BasePeriod.checkAndUpdate : r2[i1] = i0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $r3 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r3 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>() >>>>>>>> org.joda.time.DurationFieldType.months : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MONTHS_TYPE>
org.joda.time.DurationFieldType.months : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MONTHS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.months : return $r0
org.joda.time.DurationFieldType.months : return $r0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r3, r1, i1)
org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r3, r1, i1) >>>>>>>> org.joda.time.PeriodType.indexOf : i0 = i0 + 1
org.joda.time.PeriodType.indexOf : i0 = i0 + 1 >>>>>>>> org.joda.time.PeriodType.indexOf : goto [?= (branch)]
org.joda.time.PeriodType.indexOf : goto [?= (branch)] >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $r4 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r4 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>() >>>>>>>> org.joda.time.DurationFieldType.weeks : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType WEEKS_TYPE>
org.joda.time.DurationFieldType.weeks : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType WEEKS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.weeks : return $r0
org.joda.time.DurationFieldType.weeks : return $r0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r4, r1, i2)
org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r4, r1, i2) >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $r5 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r5 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>() >>>>>>>> org.joda.time.DurationFieldType.days : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType DAYS_TYPE>
org.joda.time.DurationFieldType.days : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType DAYS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.days : return $r0
org.joda.time.DurationFieldType.days : return $r0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r5, r1, i3)
org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r5, r1, i3) >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $r6 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r6 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>() >>>>>>>> org.joda.time.DurationFieldType.hours : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType HOURS_TYPE>
org.joda.time.DurationFieldType.hours : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType HOURS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.hours : return $r0
org.joda.time.DurationFieldType.hours : return $r0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r6, r1, i4)
org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r6, r1, i4) >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $r7 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r7 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>() >>>>>>>> org.joda.time.DurationFieldType.minutes : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MINUTES_TYPE>
org.joda.time.DurationFieldType.minutes : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MINUTES_TYPE> >>>>>>>> org.joda.time.DurationFieldType.minutes : return $r0
org.joda.time.DurationFieldType.minutes : return $r0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r7, r1, i5)
org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r7, r1, i5) >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $r8 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r8 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>() >>>>>>>> org.joda.time.DurationFieldType.seconds : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType SECONDS_TYPE>
org.joda.time.DurationFieldType.seconds : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType SECONDS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.seconds : return $r0
org.joda.time.DurationFieldType.seconds : return $r0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r8, r1, i6)
org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r8, r1, i6) >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $r9 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r9 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>() >>>>>>>> org.joda.time.DurationFieldType.millis : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MILLIS_TYPE>
org.joda.time.DurationFieldType.millis : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MILLIS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.millis : return $r0
org.joda.time.DurationFieldType.millis : return $r0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r9, r1, i7)
org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r9, r1, i7) >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : return r1
org.joda.time.base.BasePeriod.setPeriodInternal : return r1 >>>>>>>> org.joda.time.base.AbstractPeriod.toString : $r1 = staticinvoke <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>()
org.joda.time.base.AbstractPeriod.toString : $r1 = staticinvoke <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>() >>>>>>>> org.joda.time.format.ISOPeriodFormat.standard : $r0 = <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter cStandard>
org.joda.time.format.ISOPeriodFormat.standard : $r0 = <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter cStandard> >>>>>>>> org.joda.time.format.ISOPeriodFormat.standard : if $r0 != null
org.joda.time.format.ISOPeriodFormat.standard : if $r0 != null >>>>>>>> org.joda.time.format.ISOPeriodFormat.standard : $r19 = <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter cStandard>
org.joda.time.format.ISOPeriodFormat.standard : $r19 = <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter cStandard> >>>>>>>> org.joda.time.format.ISOPeriodFormat.standard : return $r19
org.joda.time.format.ISOPeriodFormat.standard : return $r19 >>>>>>>> org.joda.time.base.AbstractPeriod.toString : $r2 = virtualinvoke $r1.<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>(r0)
org.joda.time.base.AbstractPeriod.toString : $r2 = virtualinvoke $r1.<org.joda.time.format.PeriodFormatter: java.lang.String print(org.joda.time.ReadablePeriod)>(r0) >>>>>>>> org.joda.time.format.PeriodFormatter.print : specialinvoke r0.<org.joda.time.format.PeriodFormatter: void checkPrinter()>()
org.joda.time.format.PeriodFormatter.print : specialinvoke r0.<org.joda.time.format.PeriodFormatter: void checkPrinter()>() >>>>>>>> org.joda.time.format.PeriodFormatter.checkPrinter : $r1 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter iPrinter>
org.joda.time.format.PeriodFormatter.checkPrinter : $r1 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter iPrinter> >>>>>>>> org.joda.time.format.PeriodFormatter.checkPrinter : if $r1 != null
org.joda.time.format.PeriodFormatter.checkPrinter : if $r1 != null >>>>>>>> org.joda.time.format.PeriodFormatter.print : specialinvoke r0.<org.joda.time.format.PeriodFormatter: void checkPeriod(org.joda.time.ReadablePeriod)>(r1)
org.joda.time.format.PeriodFormatter.print : specialinvoke r0.<org.joda.time.format.PeriodFormatter: void checkPeriod(org.joda.time.ReadablePeriod)>(r1) >>>>>>>> org.joda.time.format.PeriodFormatter.checkPeriod : if r1 != null
org.joda.time.format.PeriodFormatter.checkPeriod : if r1 != null >>>>>>>> org.joda.time.format.PeriodFormatter.print : r2 = virtualinvoke r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter getPrinter()>()
org.joda.time.format.PeriodFormatter.print : r2 = virtualinvoke r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter getPrinter()>() >>>>>>>> org.joda.time.format.PeriodFormatter.getPrinter : $r1 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter iPrinter>
org.joda.time.format.PeriodFormatter.getPrinter : $r1 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter iPrinter> >>>>>>>> org.joda.time.format.PeriodFormatter.getPrinter : return $r1
org.joda.time.format.PeriodFormatter.getPrinter : return $r1 >>>>>>>> org.joda.time.format.PeriodFormatter.print : $r4 = new java.lang.StringBuffer
org.joda.time.format.PeriodFormatter.print : $r4 = new java.lang.StringBuffer >>>>>>>> org.joda.time.format.PeriodFormatter.print : $r5 = r0.<org.joda.time.format.PeriodFormatter: java.util.Locale iLocale>
org.joda.time.format.PeriodFormatter.print : $r5 = r0.<org.joda.time.format.PeriodFormatter: java.util.Locale iLocale> >>>>>>>> org.joda.time.format.PeriodFormatter.print : $i0 = interfaceinvoke r2.<org.joda.time.format.PeriodPrinter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>(r1, $r5)
org.joda.time.format.PeriodFormatter.print : $i0 = interfaceinvoke r2.<org.joda.time.format.PeriodPrinter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>(r1, $r5) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : r3 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodPrinter iBeforePrinter>
org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : r3 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodPrinter iBeforePrinter> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodPrinter iAfterPrinter>
org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodPrinter iAfterPrinter> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : $i2 = interfaceinvoke r3.<org.joda.time.format.PeriodPrinter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>(r1, r2)
org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : $i2 = interfaceinvoke r3.<org.joda.time.format.PeriodPrinter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>(r1, r2) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : i0 = 0
org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : i0 = 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : r3 = r0.<org.joda.time.format.PeriodFormatterBuilder$Composite: org.joda.time.format.PeriodPrinter[] iPrinters>
org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : r3 = r0.<org.joda.time.format.PeriodFormatterBuilder$Composite: org.joda.time.format.PeriodPrinter[] iPrinters> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : i1 = lengthof r3
org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : i1 = lengthof r3 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : i1 = i1 + -1
org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : i1 = i1 + -1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : if i1 < 0
org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : if i1 < 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : $r4 = r3[i1]
org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : $r4 = r3[i1] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : $i2 = interfaceinvoke $r4.<org.joda.time.format.PeriodPrinter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>(r1, r2)
org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : $i2 = interfaceinvoke $r4.<org.joda.time.format.PeriodPrinter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>(r1, r2) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : l0 = virtualinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>(r1)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : l0 = virtualinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>(r1) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i3 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iPrintZeroSetting>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i3 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iPrintZeroSetting> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : if $i3 != 4
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : if $i3 != 4 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : r2 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : r2 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : if r2 == null
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : if r2 == null >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i4 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i4 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $z0 = virtualinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>(r2, $i4)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $z0 = virtualinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: boolean isSupported(org.joda.time.PeriodType,int)>(r2, $i4) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : tableswitch(i0) {     case 0:
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : tableswitch(i0) {     case 0: >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $r5 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $r5 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $z3 = virtualinvoke r1.<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>($r5)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $z3 = virtualinvoke r1.<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>($r5) >>>>>>>> org.joda.time.PeriodType.isSupported : $i0 = virtualinvoke r0.<org.joda.time.PeriodType: int indexOf(org.joda.time.DurationFieldType)>(r1)
org.joda.time.PeriodType.isSupported : $i0 = virtualinvoke r0.<org.joda.time.PeriodType: int indexOf(org.joda.time.DurationFieldType)>(r1) >>>>>>>> org.joda.time.PeriodType.isSupported : if $i0 < 0
org.joda.time.PeriodType.isSupported : if $i0 < 0 >>>>>>>> org.joda.time.PeriodType.isSupported : $z0 = 1
org.joda.time.PeriodType.isSupported : $z0 = 1 >>>>>>>> org.joda.time.PeriodType.isSupported : goto [?= return $z0]
org.joda.time.PeriodType.isSupported : goto [?= return $z0] >>>>>>>> org.joda.time.PeriodType.isSupported : return $z0
org.joda.time.PeriodType.isSupported : return $z0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : return $z3
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : return $z3 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : if $z0 != 0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : if $z0 != 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i5 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i5 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : tableswitch($i5) {     case 0:
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : tableswitch($i5) {     case 0: >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r6 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r6 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i9 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r6)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i9 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r6) >>>>>>>> org.joda.time.base.AbstractPeriod.get : i0 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int indexOf(org.joda.time.DurationFieldType)>(r1)
org.joda.time.base.AbstractPeriod.get : i0 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int indexOf(org.joda.time.DurationFieldType)>(r1) >>>>>>>> org.joda.time.base.AbstractPeriod.get : if i0 != -1
org.joda.time.base.AbstractPeriod.get : if i0 != -1 >>>>>>>> org.joda.time.base.AbstractPeriod.get : $i1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int getValue(int)>(i0)
org.joda.time.base.AbstractPeriod.get : $i1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int getValue(int)>(i0) >>>>>>>> org.joda.time.base.BasePeriod.getValue : $r1 = r0.<org.joda.time.base.BasePeriod: int[] iValues>
org.joda.time.base.BasePeriod.getValue : $r1 = r0.<org.joda.time.base.BasePeriod: int[] iValues> >>>>>>>> org.joda.time.base.BasePeriod.getValue : $i1 = $r1[i0]
org.joda.time.base.BasePeriod.getValue : $i1 = $r1[i0] >>>>>>>> org.joda.time.base.BasePeriod.getValue : return $i1
org.joda.time.base.BasePeriod.getValue : return $i1 >>>>>>>> org.joda.time.base.AbstractPeriod.get : return $i1
org.joda.time.base.AbstractPeriod.get : return $i1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : l0 = (long) $i9
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : l0 = (long) $i9 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : goto [?= $b17 = l0 cmp 0L]
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : goto [?= $b17 = l0 cmp 0L] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $b17 = l0 cmp 0L
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $b17 = l0 cmp 0L >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : if $b17 != 0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : if $b17 != 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : return l0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : return l0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $b3 = l0 cmp 9223372036854775807L
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $b3 = l0 cmp 9223372036854775807L >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : if $b3 != 0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : if $b3 != 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $i4 = staticinvoke <org.joda.time.format.FormatUtils: int calculateDigitCount(long)>(l0)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $i4 = staticinvoke <org.joda.time.format.FormatUtils: int calculateDigitCount(long)>(l0) >>>>>>>> org.joda.time.format.FormatUtils.calculateDigitCount : $b1 = l0 cmp 0L
org.joda.time.format.FormatUtils.calculateDigitCount : $b1 = l0 cmp 0L >>>>>>>> org.joda.time.format.FormatUtils.calculateDigitCount : if $b1 >= 0
org.joda.time.format.FormatUtils.calculateDigitCount : if $b1 >= 0 >>>>>>>> org.joda.time.format.FormatUtils.calculateDigitCount : $b6 = l0 cmp 10L
org.joda.time.format.FormatUtils.calculateDigitCount : $b6 = l0 cmp 10L >>>>>>>> org.joda.time.format.FormatUtils.calculateDigitCount : if $b6 >= 0
org.joda.time.format.FormatUtils.calculateDigitCount : if $b6 >= 0 >>>>>>>> org.joda.time.format.FormatUtils.calculateDigitCount : $i7 = 1
org.joda.time.format.FormatUtils.calculateDigitCount : $i7 = 1 >>>>>>>> org.joda.time.format.FormatUtils.calculateDigitCount : goto [?= return $i7]
org.joda.time.format.FormatUtils.calculateDigitCount : goto [?= return $i7] >>>>>>>> org.joda.time.format.FormatUtils.calculateDigitCount : return $i7
org.joda.time.format.FormatUtils.calculateDigitCount : return $i7 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $i5 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iMinPrintedDigits>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $i5 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iMinPrintedDigits> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : i1 = staticinvoke <java.lang.Math: int max(int,int)>($i4, $i5)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : i1 = staticinvoke <java.lang.Math: int max(int,int)>($i4, $i5) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $i6 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $i6 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : if $i6 < 8
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : if $i6 < 8 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : i2 = (int) l0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : i2 = (int) l0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $r3 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iPrefix>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $r3 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iPrefix> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : if $r3 == null
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : if $r3 == null >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $r5 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iSuffix>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $r5 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iSuffix> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : if $r5 == null
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : if $r5 == null >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $r6 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iSuffix>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $r6 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iSuffix> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $i13 = interfaceinvoke $r6.<org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix: int calculatePrintedLength(int)>(i2)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $i13 = interfaceinvoke $r6.<org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix: int calculatePrintedLength(int)>(i2) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.calculatePrintedLength : $r1 = r0.<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: java.lang.String iText>
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.calculatePrintedLength : $r1 = r0.<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: java.lang.String iText> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.calculatePrintedLength : $i1 = virtualinvoke $r1.<java.lang.String: int length()>()
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.calculatePrintedLength : $i1 = virtualinvoke $r1.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.calculatePrintedLength : return $i1
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.calculatePrintedLength : return $i1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : i1 = i1 + $i13
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : i1 = i1 + $i13 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : return i1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : return i1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : i0 = i0 + $i2
org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : i0 = i0 + $i2 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : goto [?= i1 = i1 + -1]
org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : goto [?= i1 = i1 + -1] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $r4 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $r4 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $z2 = virtualinvoke r1.<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>($r4)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $z2 = virtualinvoke r1.<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>($r4) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : return $z2
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : return $z2 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r5 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r5 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i8 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r5)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i8 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r5) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : l0 = (long) $i8
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : l0 = (long) $i8 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $r3 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $r3 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $z1 = virtualinvoke r1.<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>($r3)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $z1 = virtualinvoke r1.<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>($r3) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : return $z1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : return $z1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r4 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r4 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i7 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r4)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i7 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r4) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : l0 = (long) $i7
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : l0 = (long) $i7 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $z0 = virtualinvoke r1.<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>($r2)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $z0 = virtualinvoke r1.<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>($r2) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : return $z0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : return $z0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r3 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r3 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i6 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r3)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i6 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r3) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : l0 = (long) $i6
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : l0 = (long) $i6 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Literal.calculatePrintedLength : $r3 = r0.<org.joda.time.format.PeriodFormatterBuilder$Literal: java.lang.String iText>
org.joda.time.format.PeriodFormatterBuilder$Literal.calculatePrintedLength : $r3 = r0.<org.joda.time.format.PeriodFormatterBuilder$Literal: java.lang.String iText> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Literal.calculatePrintedLength : $i0 = virtualinvoke $r3.<java.lang.String: int length()>()
org.joda.time.format.PeriodFormatterBuilder$Literal.calculatePrintedLength : $i0 = virtualinvoke $r3.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Literal.calculatePrintedLength : return $i0
org.joda.time.format.PeriodFormatterBuilder$Literal.calculatePrintedLength : return $i0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : return i0
org.joda.time.format.PeriodFormatterBuilder$Composite.calculatePrintedLength : return i0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : $i3 = interfaceinvoke r4.<org.joda.time.format.PeriodPrinter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>(r1, r2)
org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : $i3 = interfaceinvoke r4.<org.joda.time.format.PeriodPrinter: int calculatePrintedLength(org.joda.time.ReadablePeriod,java.util.Locale)>(r1, r2) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $r10 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $r10 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $z8 = virtualinvoke r1.<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>($r10)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $z8 = virtualinvoke r1.<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>($r10) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : if $z8 != 0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : if $z8 != 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $z10 = 1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $z10 = 1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : goto [?= return $z10]
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : goto [?= return $z10] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : return $z10
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : return $z10 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r11 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r11 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : i1 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r11)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : i1 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r11) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r12 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r12 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : i2 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r12)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : i2 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r12) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $l14 = (long) i1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $l14 = (long) i1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $l15 = $l14 * 1000L
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $l15 = $l14 * 1000L >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $l16 = (long) i2
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $l16 = (long) i2 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : l0 = $l15 + $l16
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : l0 = $l15 + $l16 >>>>>>>> org.joda.time.format.FormatUtils.calculateDigitCount : $b8 = l0 cmp 100L
org.joda.time.format.FormatUtils.calculateDigitCount : $b8 = l0 cmp 100L >>>>>>>> org.joda.time.format.FormatUtils.calculateDigitCount : if $b8 >= 0
org.joda.time.format.FormatUtils.calculateDigitCount : if $b8 >= 0 >>>>>>>> org.joda.time.format.FormatUtils.calculateDigitCount : $b9 = l0 cmp 1000L
org.joda.time.format.FormatUtils.calculateDigitCount : $b9 = l0 cmp 1000L >>>>>>>> org.joda.time.format.FormatUtils.calculateDigitCount : if $b9 >= 0
org.joda.time.format.FormatUtils.calculateDigitCount : if $b9 >= 0 >>>>>>>> org.joda.time.format.FormatUtils.calculateDigitCount : $b10 = l0 cmp 10000L
org.joda.time.format.FormatUtils.calculateDigitCount : $b10 = l0 cmp 10000L >>>>>>>> org.joda.time.format.FormatUtils.calculateDigitCount : if $b10 >= 0
org.joda.time.format.FormatUtils.calculateDigitCount : if $b10 >= 0 >>>>>>>> org.joda.time.format.FormatUtils.calculateDigitCount : $i7 = 4
org.joda.time.format.FormatUtils.calculateDigitCount : $i7 = 4 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : i7 = staticinvoke <java.lang.Math: int max(int,int)>(i1, 4)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : i7 = staticinvoke <java.lang.Math: int max(int,int)>(i1, 4) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : i1 = i7 + 1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : i1 = i7 + 1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $i8 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $i8 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : if $i8 != 9
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : if $i8 != 9 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $l9 = staticinvoke <java.lang.Math: long abs(long)>(l0)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $l9 = staticinvoke <java.lang.Math: long abs(long)>(l0) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $l10 = $l9 % 1000L
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $l10 = $l9 % 1000L >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $b11 = $l10 cmp 0L
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : $b11 = $l10 cmp 0L >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : if $b11 != 0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : if $b11 != 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : l0 = l0 / 1000L
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.calculatePrintedLength : l0 = l0 / 1000L >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $r7 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $r7 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $z5 = virtualinvoke r1.<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>($r7)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $z5 = virtualinvoke r1.<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>($r7) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : return $z5
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : return $z5 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r8 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r8 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i11 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r8)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i11 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r8) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : l0 = (long) $i11
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : l0 = (long) $i11 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $r6 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $r6 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $z4 = virtualinvoke r1.<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>($r6)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : $z4 = virtualinvoke r1.<org.joda.time.PeriodType: boolean isSupported(org.joda.time.DurationFieldType)>($r6) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : return $z4
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.isSupported : return $z4 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r7 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $r7 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i10 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r7)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : $i10 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r7) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : l0 = (long) $i10
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.getFieldValue : l0 = (long) $i10 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : i0 = $i2 + $i3
org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : i0 = $i2 + $i3 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : $z0 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: boolean iUseBefore>
org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : $z0 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: boolean iUseBefore> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : if $z0 == 0
org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : if $z0 == 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : $z2 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: boolean iUseAfter>
org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : $z2 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: boolean iUseAfter> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : if $z2 == 0
org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : if $z2 == 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : $i8 = interfaceinvoke r4.<org.joda.time.format.PeriodPrinter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>(r1, 1, r2)
org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : $i8 = interfaceinvoke r4.<org.joda.time.format.PeriodPrinter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>(r1, 1, r2) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : i1 = 0
org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : i1 = 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : r3 = r0.<org.joda.time.format.PeriodFormatterBuilder$Composite: org.joda.time.format.PeriodPrinter[] iPrinters>
org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : r3 = r0.<org.joda.time.format.PeriodFormatterBuilder$Composite: org.joda.time.format.PeriodPrinter[] iPrinters> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : i2 = lengthof r3
org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : i2 = lengthof r3 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : if i1 >= i0
org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : if i1 >= i0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : i2 = i2 + -1
org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : i2 = i2 + -1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : if i2 < 0
org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : if i2 < 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : $r4 = r3[i2]
org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : $r4 = r3[i2] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : $i3 = interfaceinvoke $r4.<org.joda.time.format.PeriodPrinter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>(r1, 2147483647, r2)
org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : $i3 = interfaceinvoke $r4.<org.joda.time.format.PeriodPrinter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>(r1, 2147483647, r2) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.countFieldsToPrint : if i0 > 0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.countFieldsToPrint : if i0 > 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.countFieldsToPrint : $i1 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iPrintZeroSetting>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.countFieldsToPrint : $i1 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iPrintZeroSetting> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.countFieldsToPrint : if $i1 == 4
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.countFieldsToPrint : if $i1 == 4 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.countFieldsToPrint : $l2 = virtualinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>(r1)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.countFieldsToPrint : $l2 = virtualinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>(r1) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.countFieldsToPrint : $b3 = $l2 cmp 9223372036854775807L
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.countFieldsToPrint : $b3 = $l2 cmp 9223372036854775807L >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.countFieldsToPrint : if $b3 == 0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.countFieldsToPrint : if $b3 == 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.countFieldsToPrint : return 1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.countFieldsToPrint : return 1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : i1 = i1 + $i3
org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : i1 = i1 + $i3 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : goto [?= (branch)]
org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : goto [?= (branch)] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : return i1
org.joda.time.format.PeriodFormatterBuilder$Composite.countFieldsToPrint : return i1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : if $i8 <= 0
org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : if $i8 <= 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : $r7 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: java.lang.String iText>
org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : $r7 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: java.lang.String iText> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : $i9 = virtualinvoke $r7.<java.lang.String: int length()>()
org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : $i9 = virtualinvoke $r7.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : i0 = i0 + $i9
org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : i0 = i0 + $i9 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : return i0
org.joda.time.format.PeriodFormatterBuilder$Separator.calculatePrintedLength : return i0 >>>>>>>> org.joda.time.format.PeriodFormatter.print : specialinvoke $r4.<java.lang.StringBuffer: void <init>(int)>($i0)
org.joda.time.format.PeriodFormatter.print : specialinvoke $r4.<java.lang.StringBuffer: void <init>(int)>($i0) >>>>>>>> org.joda.time.format.PeriodFormatter.print : r3 = $r4
org.joda.time.format.PeriodFormatter.print : r3 = $r4 >>>>>>>> org.joda.time.format.PeriodFormatter.print : $r6 = r0.<org.joda.time.format.PeriodFormatter: java.util.Locale iLocale>
org.joda.time.format.PeriodFormatter.print : $r6 = r0.<org.joda.time.format.PeriodFormatter: java.util.Locale iLocale> >>>>>>>> org.joda.time.format.PeriodFormatter.print : interfaceinvoke r2.<org.joda.time.format.PeriodPrinter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>(r3, r1, $r6)
org.joda.time.format.PeriodFormatter.print : interfaceinvoke r2.<org.joda.time.format.PeriodPrinter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>(r3, r1, $r6) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodPrinter iBeforePrinter>
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodPrinter iBeforePrinter> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : r5 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodPrinter iAfterPrinter>
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : r5 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodPrinter iAfterPrinter> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : interfaceinvoke r4.<org.joda.time.format.PeriodPrinter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>(r1, r2, r3)
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : interfaceinvoke r4.<org.joda.time.format.PeriodPrinter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>(r1, r2, r3) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$Composite: org.joda.time.format.PeriodPrinter[] iPrinters>
org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$Composite: org.joda.time.format.PeriodPrinter[] iPrinters> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : i0 = lengthof r4
org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : i0 = lengthof r4 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : i1 = 0
org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : i1 = 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : if i1 >= i0
org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : if i1 >= i0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : $r5 = r4[i1]
org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : $r5 = r4[i1] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : interfaceinvoke $r5.<org.joda.time.format.PeriodPrinter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>(r1, r2, r3)
org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : interfaceinvoke $r5.<org.joda.time.format.PeriodPrinter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>(r1, r2, r3) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Literal.printTo : $r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$Literal: java.lang.String iText>
org.joda.time.format.PeriodFormatterBuilder$Literal.printTo : $r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$Literal: java.lang.String iText> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Literal.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4)
org.joda.time.format.PeriodFormatterBuilder$Literal.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : i1 = i1 + 1
org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : i1 = i1 + 1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : goto [?= (branch)]
org.joda.time.format.PeriodFormatterBuilder$Composite.printTo : goto [?= (branch)] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : l0 = virtualinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>(r2)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : l0 = virtualinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: long getFieldValue(org.joda.time.ReadablePeriod)>(r2) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $b4 = l0 cmp 9223372036854775807L
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $b4 = l0 cmp 9223372036854775807L >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : if $b4 != 0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : if $b4 != 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : i1 = (int) l0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : i1 = (int) l0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $i5 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $i5 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : if $i5 < 8
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : if $i5 < 8 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iPrefix>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iPrefix> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : if $r4 == null
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : if $r4 == null >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : i2 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iMinPrintedDigits>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : i2 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iMinPrintedDigits> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : if i2 > 1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : if i2 > 1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : staticinvoke <org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.StringBuffer,int)>(r1, i1)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : staticinvoke <org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.StringBuffer,int)>(r1, i1) >>>>>>>> org.joda.time.format.FormatUtils.appendUnpaddedInteger : if i0 >= 0
org.joda.time.format.FormatUtils.appendUnpaddedInteger : if i0 >= 0 >>>>>>>> org.joda.time.format.FormatUtils.appendUnpaddedInteger : if i0 >= 10
org.joda.time.format.FormatUtils.appendUnpaddedInteger : if i0 >= 10 >>>>>>>> org.joda.time.format.FormatUtils.appendUnpaddedInteger : $i2 = i0 + 48
org.joda.time.format.FormatUtils.appendUnpaddedInteger : $i2 = i0 + 48 >>>>>>>> org.joda.time.format.FormatUtils.appendUnpaddedInteger : $c3 = (char) $i2
org.joda.time.format.FormatUtils.appendUnpaddedInteger : $c3 = (char) $i2 >>>>>>>> org.joda.time.format.FormatUtils.appendUnpaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c3)
org.joda.time.format.FormatUtils.appendUnpaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c3) >>>>>>>> org.joda.time.format.FormatUtils.appendUnpaddedInteger : goto [?= return]
org.joda.time.format.FormatUtils.appendUnpaddedInteger : goto [?= return] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : goto [?= $i7 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType>]
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : goto [?= $i7 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType>] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $i7 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $i7 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : if $i7 < 8
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : if $i7 < 8 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $r7 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iSuffix>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $r7 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iSuffix> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : if $r7 == null
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : if $r7 == null >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $r8 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iSuffix>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $r8 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iSuffix> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : interfaceinvoke $r8.<org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix: void printTo(java.lang.StringBuffer,int)>(r1, i1)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : interfaceinvoke $r8.<org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix: void printTo(java.lang.StringBuffer,int)>(r1, i1) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.printTo : $r2 = r0.<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: java.lang.String iText>
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.printTo : $r2 = r0.<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: java.lang.String iText> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2)
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : $z0 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: boolean iUseBefore>
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : $z0 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: boolean iUseBefore> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : if $z0 == 0
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : if $z0 == 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : $z2 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: boolean iUseAfter>
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : $z2 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: boolean iUseAfter> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : if $z2 == 0
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : if $z2 == 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : $i2 = interfaceinvoke r5.<org.joda.time.format.PeriodPrinter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>(r2, 1, r3)
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : $i2 = interfaceinvoke r5.<org.joda.time.format.PeriodPrinter: int countFieldsToPrint(org.joda.time.ReadablePeriod,int,java.util.Locale)>(r2, 1, r3) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : if $i2 <= 0
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : if $i2 <= 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : $r11 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: java.lang.String iText>
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : $r11 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: java.lang.String iText> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11)
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : interfaceinvoke r5.<org.joda.time.format.PeriodPrinter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>(r1, r2, r3)
org.joda.time.format.PeriodFormatterBuilder$Separator.printTo : interfaceinvoke r5.<org.joda.time.format.PeriodPrinter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePeriod,java.util.Locale)>(r1, r2, r3) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $l6 = l0 / 1000L
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $l6 = l0 / 1000L >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : i1 = (int) $l6
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : i1 = (int) $l6 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $l8 = staticinvoke <java.lang.Math: long abs(long)>(l0)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $l8 = staticinvoke <java.lang.Math: long abs(long)>(l0) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $l9 = $l8 % 1000L
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $l9 = $l8 % 1000L >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : i3 = (int) $l9
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : i3 = (int) $l9 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $i10 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : $i10 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : if $i10 == 8
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : if $i10 == 8 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : if i3 <= 0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : if i3 <= 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, i3, 3)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.printTo : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, i3, 3) >>>>>>>> org.joda.time.format.PeriodFormatter.print : $r7 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>()
org.joda.time.format.PeriodFormatter.print : $r7 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> org.joda.time.format.PeriodFormatter.print : return $r7
org.joda.time.format.PeriodFormatter.print : return $r7 >>>>>>>> org.joda.time.base.AbstractPeriod.toString : return $r2
org.joda.time.base.AbstractPeriod.toString : return $r2 >>>>>>>> org.joda.time.Period.parse : $r1 = staticinvoke <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>()
org.joda.time.Period.parse : $r1 = staticinvoke <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>() >>>>>>>> org.joda.time.Period.parse : $r2 = staticinvoke <org.joda.time.Period: org.joda.time.Period parse(java.lang.String,org.joda.time.format.PeriodFormatter)>(r0, $r1)
org.joda.time.Period.parse : $r2 = staticinvoke <org.joda.time.Period: org.joda.time.Period parse(java.lang.String,org.joda.time.format.PeriodFormatter)>(r0, $r1) >>>>>>>> org.joda.time.Period.parse : $r2 = virtualinvoke r1.<org.joda.time.format.PeriodFormatter: org.joda.time.Period parsePeriod(java.lang.String)>(r0)
org.joda.time.Period.parse : $r2 = virtualinvoke r1.<org.joda.time.format.PeriodFormatter: org.joda.time.Period parsePeriod(java.lang.String)>(r0) >>>>>>>> org.joda.time.format.PeriodFormatter.parsePeriod : specialinvoke r0.<org.joda.time.format.PeriodFormatter: void checkParser()>()
org.joda.time.format.PeriodFormatter.parsePeriod : specialinvoke r0.<org.joda.time.format.PeriodFormatter: void checkParser()>() >>>>>>>> org.joda.time.format.PeriodFormatter.checkParser : $r1 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodParser iParser>
org.joda.time.format.PeriodFormatter.checkParser : $r1 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodParser iParser> >>>>>>>> org.joda.time.format.PeriodFormatter.checkParser : if $r1 != null
org.joda.time.format.PeriodFormatter.checkParser : if $r1 != null >>>>>>>> org.joda.time.format.PeriodFormatter.parsePeriod : $r2 = virtualinvoke r0.<org.joda.time.format.PeriodFormatter: org.joda.time.MutablePeriod parseMutablePeriod(java.lang.String)>(r1)
org.joda.time.format.PeriodFormatter.parsePeriod : $r2 = virtualinvoke r0.<org.joda.time.format.PeriodFormatter: org.joda.time.MutablePeriod parseMutablePeriod(java.lang.String)>(r1) >>>>>>>> org.joda.time.format.PeriodFormatter.parseMutablePeriod : specialinvoke r0.<org.joda.time.format.PeriodFormatter: void checkParser()>()
org.joda.time.format.PeriodFormatter.parseMutablePeriod : specialinvoke r0.<org.joda.time.format.PeriodFormatter: void checkParser()>() >>>>>>>> org.joda.time.format.PeriodFormatter.parseMutablePeriod : $r3 = new org.joda.time.MutablePeriod
org.joda.time.format.PeriodFormatter.parseMutablePeriod : $r3 = new org.joda.time.MutablePeriod >>>>>>>> org.joda.time.format.PeriodFormatter.parseMutablePeriod : $r4 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.PeriodType iParseType>
org.joda.time.format.PeriodFormatter.parseMutablePeriod : $r4 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.PeriodType iParseType> >>>>>>>> org.joda.time.format.PeriodFormatter.parseMutablePeriod : specialinvoke $r3.<org.joda.time.MutablePeriod: void <init>(long,org.joda.time.PeriodType)>(0L, $r4)
org.joda.time.format.PeriodFormatter.parseMutablePeriod : specialinvoke $r3.<org.joda.time.MutablePeriod: void <init>(long,org.joda.time.PeriodType)>(0L, $r4) >>>>>>>> org.joda.time.DateTimeUtils.getPeriodType : $r1 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType standard()>()
org.joda.time.DateTimeUtils.getPeriodType : $r1 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType standard()>() >>>>>>>> org.joda.time.DateTimeUtils.getPeriodType : return $r1
org.joda.time.DateTimeUtils.getPeriodType : return $r1 >>>>>>>> org.joda.time.DateTimeUtils.getChronology : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>()
org.joda.time.DateTimeUtils.getChronology : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>() >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>()
org.joda.time.chrono.ISOChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>() >>>>>>>> org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> >>>>>>>> org.joda.time.DateTimeZone.getDefault : if r0 != null
org.joda.time.DateTimeZone.getDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.DateTimeZone.getDefault : return r0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r0)
org.joda.time.chrono.ISOChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r0) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if r0 != null
org.joda.time.chrono.ISOChronology.getInstance : if r0 != null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0)
org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : i0 = $i1 & 63
org.joda.time.chrono.ISOChronology.getInstance : i0 = $i1 & 63 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache>
org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache> >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : r1 = $r5[i0]
org.joda.time.chrono.ISOChronology.getInstance : r1 = $r5[i0] >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if r1 == null
org.joda.time.chrono.ISOChronology.getInstance : if r1 == null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r6 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.ISOChronology.getInstance : $r6 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2
org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null
org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.ZonedChronology.getZone : $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: java.lang.Object getParam()>()
org.joda.time.chrono.ZonedChronology.getZone : $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: java.lang.Object getParam()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getParam : $r1 = r0.<org.joda.time.chrono.AssembledChronology: java.lang.Object iParam>
org.joda.time.chrono.AssembledChronology.getParam : $r1 = r0.<org.joda.time.chrono.AssembledChronology: java.lang.Object iParam> >>>>>>>> org.joda.time.chrono.AssembledChronology.getParam : return $r1
org.joda.time.chrono.AssembledChronology.getParam : return $r1 >>>>>>>> org.joda.time.chrono.ZonedChronology.getZone : $r2 = (org.joda.time.DateTimeZone) $r1
org.joda.time.chrono.ZonedChronology.getZone : $r2 = (org.joda.time.DateTimeZone) $r1 >>>>>>>> org.joda.time.chrono.ZonedChronology.getZone : return $r2
org.joda.time.chrono.ZonedChronology.getZone : return $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : return $r3
org.joda.time.chrono.AssembledChronology.getZone : return $r3 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0
org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : return r1
org.joda.time.chrono.ISOChronology.getInstance : return r1 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : return $r1
org.joda.time.chrono.ISOChronology.getInstance : return $r1 >>>>>>>> org.joda.time.DateTimeUtils.getChronology : return $r1
org.joda.time.DateTimeUtils.getChronology : return $r1 >>>>>>>> org.joda.time.chrono.BaseChronology.get : i1 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int size()>()
org.joda.time.chrono.BaseChronology.get : i1 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int size()>() >>>>>>>> org.joda.time.chrono.BaseChronology.get : r2 = newarray (int)[i1]
org.joda.time.chrono.BaseChronology.get : r2 = newarray (int)[i1] >>>>>>>> org.joda.time.chrono.BaseChronology.get : $b5 = l0 cmp 0L
org.joda.time.chrono.BaseChronology.get : $b5 = l0 cmp 0L >>>>>>>> org.joda.time.chrono.BaseChronology.get : if $b5 == 0
org.joda.time.chrono.BaseChronology.get : if $b5 == 0 >>>>>>>> org.joda.time.chrono.BaseChronology.get : return r2
org.joda.time.chrono.BaseChronology.get : return r2 >>>>>>>> org.joda.time.format.PeriodFormatter.parseMutablePeriod : r2 = $r3
org.joda.time.format.PeriodFormatter.parseMutablePeriod : r2 = $r3 >>>>>>>> org.joda.time.format.PeriodFormatter.parseMutablePeriod : $r5 = virtualinvoke r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodParser getParser()>()
org.joda.time.format.PeriodFormatter.parseMutablePeriod : $r5 = virtualinvoke r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodParser getParser()>() >>>>>>>> org.joda.time.format.PeriodFormatter.getParser : $r1 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodParser iParser>
org.joda.time.format.PeriodFormatter.getParser : $r1 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodParser iParser> >>>>>>>> org.joda.time.format.PeriodFormatter.getParser : return $r1
org.joda.time.format.PeriodFormatter.getParser : return $r1 >>>>>>>> org.joda.time.format.PeriodFormatter.parseMutablePeriod : $r6 = r0.<org.joda.time.format.PeriodFormatter: java.util.Locale iLocale>
org.joda.time.format.PeriodFormatter.parseMutablePeriod : $r6 = r0.<org.joda.time.format.PeriodFormatter: java.util.Locale iLocale> >>>>>>>> org.joda.time.format.PeriodFormatter.parseMutablePeriod : i0 = interfaceinvoke $r5.<org.joda.time.format.PeriodParser: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>(r2, r1, 0, $r6)
org.joda.time.format.PeriodFormatter.parseMutablePeriod : i0 = interfaceinvoke $r5.<org.joda.time.format.PeriodParser: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>(r2, r1, 0, $r6) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : i1 = i0
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : i1 = i0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : $r6 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodParser iBeforeParser>
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : $r6 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodParser iBeforeParser> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : i4 = interfaceinvoke $r6.<org.joda.time.format.PeriodParser: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>(r1, r2, i0, r3)
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : i4 = interfaceinvoke $r6.<org.joda.time.format.PeriodParser: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>(r1, r2, i0, r3) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$Composite: org.joda.time.format.PeriodParser[] iParsers>
org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$Composite: org.joda.time.format.PeriodParser[] iParsers> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : if r4 != null
org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : if r4 != null >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : i1 = lengthof r4
org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : i1 = lengthof r4 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : i2 = 0
org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : i2 = 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : if i2 >= i1
org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : if i2 >= i1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : if i0 < 0
org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : if i0 < 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : $r6 = r4[i2]
org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : $r6 = r4[i2] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : i0 = interfaceinvoke $r6.<org.joda.time.format.PeriodParser: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>(r1, r2, i0, r3)
org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : i0 = interfaceinvoke $r6.<org.joda.time.format.PeriodParser: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>(r1, r2, i0, r3) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Literal.parseInto : $r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$Literal: java.lang.String iText>
org.joda.time.format.PeriodFormatterBuilder$Literal.parseInto : $r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$Literal: java.lang.String iText> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Literal.parseInto : $r5 = r0.<org.joda.time.format.PeriodFormatterBuilder$Literal: java.lang.String iText>
org.joda.time.format.PeriodFormatterBuilder$Literal.parseInto : $r5 = r0.<org.joda.time.format.PeriodFormatterBuilder$Literal: java.lang.String iText> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Literal.parseInto : $i1 = virtualinvoke $r5.<java.lang.String: int length()>()
org.joda.time.format.PeriodFormatterBuilder$Literal.parseInto : $i1 = virtualinvoke $r5.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Literal.parseInto : $z0 = virtualinvoke r2.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, i0, $r4, 0, $i1)
org.joda.time.format.PeriodFormatterBuilder$Literal.parseInto : $z0 = virtualinvoke r2.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, i0, $r4, 0, $i1) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Literal.parseInto : if $z0 == 0
org.joda.time.format.PeriodFormatterBuilder$Literal.parseInto : if $z0 == 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Literal.parseInto : $r6 = r0.<org.joda.time.format.PeriodFormatterBuilder$Literal: java.lang.String iText>
org.joda.time.format.PeriodFormatterBuilder$Literal.parseInto : $r6 = r0.<org.joda.time.format.PeriodFormatterBuilder$Literal: java.lang.String iText> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Literal.parseInto : $i2 = virtualinvoke $r6.<java.lang.String: int length()>()
org.joda.time.format.PeriodFormatterBuilder$Literal.parseInto : $i2 = virtualinvoke $r6.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Literal.parseInto : $i3 = i0 + $i2
org.joda.time.format.PeriodFormatterBuilder$Literal.parseInto : $i3 = i0 + $i2 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Literal.parseInto : return $i3
org.joda.time.format.PeriodFormatterBuilder$Literal.parseInto : return $i3 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : i2 = i2 + 1
org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : i2 = i2 + 1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : goto [?= (branch)]
org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : goto [?= (branch)] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i7 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iPrintZeroSetting>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i7 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iPrintZeroSetting> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if $i7 != 4
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if $i7 != 4 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $z3 = 0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $z3 = 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : z0 = $z3
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : z0 = $z3 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i8 = virtualinvoke r2.<java.lang.String: int length()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i8 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if i0 < $i8
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if i0 < $i8 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iPrefix>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iPrefix> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if $r4 == null
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if $r4 == null >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : i1 = -1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : i1 = -1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $r6 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iSuffix>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $r6 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iSuffix> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if $r6 == null
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if $r6 == null >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if z0 != 0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if z0 != 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $r7 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iSuffix>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $r7 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iSuffix> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : i1 = interfaceinvoke $r7.<org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix: int scan(java.lang.String,int)>(r2, i0)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : i1 = interfaceinvoke $r7.<org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix: int scan(java.lang.String,int)>(r2, i0) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : r2 = r0.<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: java.lang.String iText>
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : r2 = r0.<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: java.lang.String iText> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : i1 = virtualinvoke r2.<java.lang.String: int length()>()
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : i1 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : i2 = virtualinvoke r1.<java.lang.String: int length()>()
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : i2 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : i3 = i0
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : i3 = i0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : if i3 >= i2
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : if i3 >= i2 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : $z0 = virtualinvoke r1.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, i3, r2, 0, i1)
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : $z0 = virtualinvoke r1.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, i3, r2, 0, i1) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : if $z0 == 0
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : if $z0 == 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : $c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i3)
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : $c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i3) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : tableswitch($c4) {     case 43:
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : tableswitch($c4) {     case 43: >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : goto [?= i3 = i3 + 1]
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : goto [?= i3 = i3 + 1] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : i3 = i3 + 1
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : i3 = i3 + 1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : goto [?= (branch)]
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : goto [?= (branch)] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : return i3
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.scan : return i3 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if i1 < 0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if i1 < 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : z0 = 1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : z0 = 1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : goto [?= (branch)]
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : goto [?= (branch)] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if i1 <= 0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if i1 <= 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i13 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iMaxParsedDigits>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i13 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iMaxParsedDigits> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i14 = i1 - i0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i14 = i1 - i0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : i2 = staticinvoke <java.lang.Math: int min(int,int)>($i13, $i14)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : i2 = staticinvoke <java.lang.Math: int min(int,int)>($i13, $i14) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : goto [?= i3 = 0]
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : goto [?= i3 = 0] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : i3 = 0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : i3 = 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : i4 = -1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : i4 = -1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : z1 = 0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : z1 = 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if i3 >= i2
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if i3 >= i2 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i18 = i0 + i3
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i18 = i0 + i3 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : c5 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i18)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : c5 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i18) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if i3 != 0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if i3 != 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if c5 == 45
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if c5 == 45 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if c5 != 43
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if c5 != 43 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if c5 < 48
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if c5 < 48 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if c5 > 57
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if c5 > 57 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : z1 = 1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : z1 = 1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : goto [?= i3 = i3 + 1]
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : goto [?= i3 = i3 + 1] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : i3 = i3 + 1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : i3 = i3 + 1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if z1 != 0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if z1 != 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i34 = i0 + i3
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i34 = i0 + i3 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if $i34 == i1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if $i34 == i1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i35 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i35 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if $i35 == 8
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if $i35 == 8 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i36 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i36 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if $i36 == 9
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if $i36 == 9 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i37 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i37 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i38 = specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInt(java.lang.String,int,int)>(r2, i0, i3)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i38 = specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInt(java.lang.String,int,int)>(r2, i0, i3) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : if i1 < 10
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : if i1 < 10 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : if i1 > 0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : if i1 > 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : i5 = i0 + 1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : i5 = i0 + 1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i0)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i0) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : i6 = i1 + -1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : i6 = i1 + -1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : if c2 != 45
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : if c2 != 45 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : z0 = 0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : z0 = 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : i8 = c2 + -48
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : i8 = c2 + -48 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : $i9 = i6
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : $i9 = i6 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : i6 = i6 + -1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : i6 = i6 + -1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : if $i9 <= 0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : if $i9 <= 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : if z0 == 0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : if z0 == 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : $i16 = i8
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : $i16 = i8 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : return $i16
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : return $i16 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : virtualinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void setFieldValue(org.joda.time.ReadWritablePeriod,int,int)>(r1, $i37, $i38)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : virtualinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void setFieldValue(org.joda.time.ReadWritablePeriod,int,int)>(r1, $i37, $i38) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.setFieldValue : tableswitch(i0) {     case 0:
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.setFieldValue : tableswitch(i0) {     case 0: >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.setFieldValue : interfaceinvoke r1.<org.joda.time.ReadWritablePeriod: void setYears(int)>(i1)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.setFieldValue : interfaceinvoke r1.<org.joda.time.ReadWritablePeriod: void setYears(int)>(i1) >>>>>>>> org.joda.time.MutablePeriod.setYears : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>()
org.joda.time.MutablePeriod.setYears : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>() >>>>>>>> org.joda.time.MutablePeriod.setYears : specialinvoke r0.<org.joda.time.base.BasePeriod: void setField(org.joda.time.DurationFieldType,int)>($r1, i0)
org.joda.time.MutablePeriod.setYears : specialinvoke r0.<org.joda.time.base.BasePeriod: void setField(org.joda.time.DurationFieldType,int)>($r1, i0) >>>>>>>> org.joda.time.base.BasePeriod.setField : $r2 = r0.<org.joda.time.base.BasePeriod: int[] iValues>
org.joda.time.base.BasePeriod.setField : $r2 = r0.<org.joda.time.base.BasePeriod: int[] iValues> >>>>>>>> org.joda.time.base.BasePeriod.setField : virtualinvoke r0.<org.joda.time.base.BasePeriod: void setFieldInto(int[],org.joda.time.DurationFieldType,int)>($r2, r1, i0)
org.joda.time.base.BasePeriod.setField : virtualinvoke r0.<org.joda.time.base.BasePeriod: void setFieldInto(int[],org.joda.time.DurationFieldType,int)>($r2, r1, i0) >>>>>>>> org.joda.time.base.BasePeriod.setFieldInto : i1 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int indexOf(org.joda.time.DurationFieldType)>(r2)
org.joda.time.base.BasePeriod.setFieldInto : i1 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int indexOf(org.joda.time.DurationFieldType)>(r2) >>>>>>>> org.joda.time.base.BasePeriod.setFieldInto : if i1 != -1
org.joda.time.base.BasePeriod.setFieldInto : if i1 != -1 >>>>>>>> org.joda.time.base.BasePeriod.setFieldInto : r1[i1] = i0
org.joda.time.base.BasePeriod.setFieldInto : r1[i1] = i0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.setFieldValue : goto [?= return]
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.setFieldValue : goto [?= return] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : goto [?= i46 = i0 + i3]
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : goto [?= i46 = i0 + i3] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : i46 = i0 + i3
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : i46 = i0 + i3 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if i46 < 0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if i46 < 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $r9 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iSuffix>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $r9 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iSuffix> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if $r9 == null
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if $r9 == null >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $r10 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iSuffix>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $r10 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix iSuffix> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : i46 = interfaceinvoke $r10.<org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix: int parse(java.lang.String,int)>(r2, i46)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : i46 = interfaceinvoke $r10.<org.joda.time.format.PeriodFormatterBuilder$PeriodFieldAffix: int parse(java.lang.String,int)>(r2, i46) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.parse : r2 = r0.<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: java.lang.String iText>
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.parse : r2 = r0.<org.joda.time.format.PeriodFormatterBuilder$SimpleAffix: java.lang.String iText> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.parse : i1 = virtualinvoke r2.<java.lang.String: int length()>()
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.parse : i1 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.parse : $z0 = virtualinvoke r1.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, i0, r2, 0, i1)
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.parse : $z0 = virtualinvoke r1.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, i0, r2, 0, i1) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.parse : if $z0 == 0
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.parse : if $z0 == 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.parse : $i2 = i0 + i1
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.parse : $i2 = i0 + i1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.parse : return $i2
org.joda.time.format.PeriodFormatterBuilder$SimpleAffix.parse : return $i2 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : return i46
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : return i46 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.setFieldValue : interfaceinvoke r1.<org.joda.time.ReadWritablePeriod: void setMonths(int)>(i1)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.setFieldValue : interfaceinvoke r1.<org.joda.time.ReadWritablePeriod: void setMonths(int)>(i1) >>>>>>>> org.joda.time.MutablePeriod.setMonths : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>()
org.joda.time.MutablePeriod.setMonths : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>() >>>>>>>> org.joda.time.MutablePeriod.setMonths : specialinvoke r0.<org.joda.time.base.BasePeriod: void setField(org.joda.time.DurationFieldType,int)>($r1, i0)
org.joda.time.MutablePeriod.setMonths : specialinvoke r0.<org.joda.time.base.BasePeriod: void setField(org.joda.time.DurationFieldType,int)>($r1, i0) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.setFieldValue : interfaceinvoke r1.<org.joda.time.ReadWritablePeriod: void setWeeks(int)>(i1)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.setFieldValue : interfaceinvoke r1.<org.joda.time.ReadWritablePeriod: void setWeeks(int)>(i1) >>>>>>>> org.joda.time.MutablePeriod.setWeeks : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>()
org.joda.time.MutablePeriod.setWeeks : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>() >>>>>>>> org.joda.time.MutablePeriod.setWeeks : specialinvoke r0.<org.joda.time.base.BasePeriod: void setField(org.joda.time.DurationFieldType,int)>($r1, i0)
org.joda.time.MutablePeriod.setWeeks : specialinvoke r0.<org.joda.time.base.BasePeriod: void setField(org.joda.time.DurationFieldType,int)>($r1, i0) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.setFieldValue : interfaceinvoke r1.<org.joda.time.ReadWritablePeriod: void setDays(int)>(i1)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.setFieldValue : interfaceinvoke r1.<org.joda.time.ReadWritablePeriod: void setDays(int)>(i1) >>>>>>>> org.joda.time.MutablePeriod.setDays : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>()
org.joda.time.MutablePeriod.setDays : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>() >>>>>>>> org.joda.time.MutablePeriod.setDays : specialinvoke r0.<org.joda.time.base.BasePeriod: void setField(org.joda.time.DurationFieldType,int)>($r1, i0)
org.joda.time.MutablePeriod.setDays : specialinvoke r0.<org.joda.time.base.BasePeriod: void setField(org.joda.time.DurationFieldType,int)>($r1, i0) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : return i0
org.joda.time.format.PeriodFormatterBuilder$Composite.parseInto : return i0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : if i4 >= 0
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : if i4 >= 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : z0 = 0
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : z0 = 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : if i4 <= i1
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : if i4 <= i1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: java.lang.String[] iParsedForms>
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : r4 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: java.lang.String[] iParsedForms> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : i2 = lengthof r4
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : i2 = lengthof r4 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : i3 = 0
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : i3 = 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : if i3 >= i2
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : if i3 >= i2 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : r5 = r4[i3]
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : r5 = r4[i3] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : if r5 == null
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : if r5 == null >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : $i5 = virtualinvoke r5.<java.lang.String: int length()>()
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : $i5 = virtualinvoke r5.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : if $i5 == 0
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : if $i5 == 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : $i6 = virtualinvoke r5.<java.lang.String: int length()>()
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : $i6 = virtualinvoke r5.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : $z1 = virtualinvoke r2.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, i4, r5, 0, $i6)
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : $z1 = virtualinvoke r2.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, i4, r5, 0, $i6) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : if $z1 == 0
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : if $z1 == 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : $i7 = i4
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : $i7 = i4 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : if r5 != null
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : if r5 != null >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : $i8 = virtualinvoke r5.<java.lang.String: int length()>()
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : $i8 = virtualinvoke r5.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : i4 = $i7 + $i8
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : i4 = $i7 + $i8 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : z0 = 1
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : z0 = 1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : goto [?= i9 = i4]
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : goto [?= i9 = i4] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : i9 = i4
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : i9 = i4 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : $r7 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodParser iAfterParser>
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : $r7 = r0.<org.joda.time.format.PeriodFormatterBuilder$Separator: org.joda.time.format.PeriodParser iAfterParser> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : i10 = interfaceinvoke $r7.<org.joda.time.format.PeriodParser: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>(r1, r2, i4, r3)
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : i10 = interfaceinvoke $r7.<org.joda.time.format.PeriodParser: int parseInto(org.joda.time.ReadWritablePeriod,java.lang.String,int,java.util.Locale)>(r1, r2, i4, r3) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.setFieldValue : interfaceinvoke r1.<org.joda.time.ReadWritablePeriod: void setHours(int)>(i1)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.setFieldValue : interfaceinvoke r1.<org.joda.time.ReadWritablePeriod: void setHours(int)>(i1) >>>>>>>> org.joda.time.MutablePeriod.setHours : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>()
org.joda.time.MutablePeriod.setHours : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>() >>>>>>>> org.joda.time.MutablePeriod.setHours : specialinvoke r0.<org.joda.time.base.BasePeriod: void setField(org.joda.time.DurationFieldType,int)>($r1, i0)
org.joda.time.MutablePeriod.setHours : specialinvoke r0.<org.joda.time.base.BasePeriod: void setField(org.joda.time.DurationFieldType,int)>($r1, i0) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.setFieldValue : interfaceinvoke r1.<org.joda.time.ReadWritablePeriod: void setMinutes(int)>(i1)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.setFieldValue : interfaceinvoke r1.<org.joda.time.ReadWritablePeriod: void setMinutes(int)>(i1) >>>>>>>> org.joda.time.MutablePeriod.setMinutes : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>()
org.joda.time.MutablePeriod.setMinutes : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>() >>>>>>>> org.joda.time.MutablePeriod.setMinutes : specialinvoke r0.<org.joda.time.base.BasePeriod: void setField(org.joda.time.DurationFieldType,int)>($r1, i0)
org.joda.time.MutablePeriod.setMinutes : specialinvoke r0.<org.joda.time.base.BasePeriod: void setField(org.joda.time.DurationFieldType,int)>($r1, i0) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if c5 == 46
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if c5 == 46 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i27 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i27 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if $i27 == 8
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if $i27 == 8 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i28 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType>
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i28 = r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int iFieldType> >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if $i28 != 9
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if $i28 != 9 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if i4 < 0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if i4 < 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i29 = i0 + i3
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i29 = i0 + i3 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : i4 = $i29 + 1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : i4 = $i29 + 1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i30 = i2 + 1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i30 = i2 + 1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i31 = virtualinvoke r2.<java.lang.String: int length()>()
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i31 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i32 = $i31 - i0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i32 = $i31 - i0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : i2 = staticinvoke <java.lang.Math: int min(int,int)>($i30, $i32)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : i2 = staticinvoke <java.lang.Math: int min(int,int)>($i30, $i32) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if c5 != 44
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if c5 != 44 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if i4 >= 0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if i4 >= 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i40 = i4 - i0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i40 = i4 - i0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i41 = $i40 - 1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i41 = $i40 - 1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : i42 = specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInt(java.lang.String,int,int)>(r2, i0, $i41)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : i42 = specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInt(java.lang.String,int,int)>(r2, i0, $i41) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : virtualinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void setFieldValue(org.joda.time.ReadWritablePeriod,int,int)>(r1, 6, i42)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : virtualinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void setFieldValue(org.joda.time.ReadWritablePeriod,int,int)>(r1, 6, i42) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.setFieldValue : interfaceinvoke r1.<org.joda.time.ReadWritablePeriod: void setSeconds(int)>(i1)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.setFieldValue : interfaceinvoke r1.<org.joda.time.ReadWritablePeriod: void setSeconds(int)>(i1) >>>>>>>> org.joda.time.MutablePeriod.setSeconds : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>()
org.joda.time.MutablePeriod.setSeconds : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>() >>>>>>>> org.joda.time.MutablePeriod.setSeconds : specialinvoke r0.<org.joda.time.base.BasePeriod: void setField(org.joda.time.DurationFieldType,int)>($r1, i0)
org.joda.time.MutablePeriod.setSeconds : specialinvoke r0.<org.joda.time.base.BasePeriod: void setField(org.joda.time.DurationFieldType,int)>($r1, i0) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i43 = i0 + i3
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : $i43 = i0 + i3 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : i44 = $i43 - i4
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : i44 = $i43 - i4 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if i44 > 0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if i44 > 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if i44 < 3
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if i44 < 3 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : i6 = specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInt(java.lang.String,int,int)>(r2, i4, 3)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : i6 = specialinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: int parseInt(java.lang.String,int,int)>(r2, i4, 3) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : $i10 = i8 << 3
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : $i10 = i8 << 3 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : $i11 = i8 << 1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : $i11 = i8 << 1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : $i12 = $i10 + $i11
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : $i12 = $i10 + $i11 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : $i13 = i5
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : $i13 = i5 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : i5 = i5 + 1
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : i5 = i5 + 1 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : $c14 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i13)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : $c14 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i13) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : $i15 = $i12 + $c14
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : $i15 = $i12 + $c14 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : i8 = $i15 - 48
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : i8 = $i15 - 48 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : goto [?= $i9 = i6]
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInt : goto [?= $i9 = i6] >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if i42 >= 0
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : if i42 >= 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : virtualinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void setFieldValue(org.joda.time.ReadWritablePeriod,int,int)>(r1, 7, i6)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.parseInto : virtualinvoke r0.<org.joda.time.format.PeriodFormatterBuilder$FieldFormatter: void setFieldValue(org.joda.time.ReadWritablePeriod,int,int)>(r1, 7, i6) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.setFieldValue : interfaceinvoke r1.<org.joda.time.ReadWritablePeriod: void setMillis(int)>(i1)
org.joda.time.format.PeriodFormatterBuilder$FieldFormatter.setFieldValue : interfaceinvoke r1.<org.joda.time.ReadWritablePeriod: void setMillis(int)>(i1) >>>>>>>> org.joda.time.MutablePeriod.setMillis : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>()
org.joda.time.MutablePeriod.setMillis : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>() >>>>>>>> org.joda.time.MutablePeriod.setMillis : specialinvoke r0.<org.joda.time.base.BasePeriod: void setField(org.joda.time.DurationFieldType,int)>($r1, i0)
org.joda.time.MutablePeriod.setMillis : specialinvoke r0.<org.joda.time.base.BasePeriod: void setField(org.joda.time.DurationFieldType,int)>($r1, i0) >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : if i10 >= 0
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : if i10 >= 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : if z0 == 0
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : if z0 == 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : if i10 != i9
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : if i10 != i9 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : if i10 <= i9
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : if i10 <= i9 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : if z0 != 0
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : if z0 != 0 >>>>>>>> org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : return i10
org.joda.time.format.PeriodFormatterBuilder$Separator.parseInto : return i10 >>>>>>>> org.joda.time.format.PeriodFormatter.parseMutablePeriod : if i0 < 0
org.joda.time.format.PeriodFormatter.parseMutablePeriod : if i0 < 0 >>>>>>>> org.joda.time.format.PeriodFormatter.parseMutablePeriod : $i1 = virtualinvoke r1.<java.lang.String: int length()>()
org.joda.time.format.PeriodFormatter.parseMutablePeriod : $i1 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.PeriodFormatter.parseMutablePeriod : if i0 < $i1
org.joda.time.format.PeriodFormatter.parseMutablePeriod : if i0 < $i1 >>>>>>>> org.joda.time.format.PeriodFormatter.parseMutablePeriod : return r2
org.joda.time.format.PeriodFormatter.parseMutablePeriod : return r2 >>>>>>>> org.joda.time.format.PeriodFormatter.parsePeriod : $r3 = virtualinvoke $r2.<org.joda.time.MutablePeriod: org.joda.time.Period toPeriod()>()
org.joda.time.format.PeriodFormatter.parsePeriod : $r3 = virtualinvoke $r2.<org.joda.time.MutablePeriod: org.joda.time.Period toPeriod()>() >>>>>>>> org.joda.time.base.AbstractPeriod.toPeriod : $r1 = new org.joda.time.Period
org.joda.time.base.AbstractPeriod.toPeriod : $r1 = new org.joda.time.Period >>>>>>>> org.joda.time.base.AbstractPeriod.toPeriod : specialinvoke $r1.<org.joda.time.Period: void <init>(java.lang.Object)>(r0)
org.joda.time.base.AbstractPeriod.toPeriod : specialinvoke $r1.<org.joda.time.Period: void <init>(java.lang.Object)>(r0) >>>>>>>> org.joda.time.convert.ConverterManager.getInstance : $r0 = <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager INSTANCE>
org.joda.time.convert.ConverterManager.getInstance : $r0 = <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager INSTANCE> >>>>>>>> org.joda.time.convert.ConverterManager.getInstance : if $r0 != null
org.joda.time.convert.ConverterManager.getInstance : if $r0 != null >>>>>>>> org.joda.time.convert.ConverterManager.getInstance : $r2 = <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager INSTANCE>
org.joda.time.convert.ConverterManager.getInstance : $r2 = <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager INSTANCE> >>>>>>>> org.joda.time.convert.ConverterManager.getInstance : return $r2
org.joda.time.convert.ConverterManager.getInstance : return $r2 >>>>>>>> org.joda.time.convert.ConverterManager.getPeriodConverter : $r4 = r0.<org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterSet iPeriodConverters>
org.joda.time.convert.ConverterManager.getPeriodConverter : $r4 = r0.<org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterSet iPeriodConverters> >>>>>>>> org.joda.time.convert.ConverterManager.getPeriodConverter : if r1 != null
org.joda.time.convert.ConverterManager.getPeriodConverter : if r1 != null >>>>>>>> org.joda.time.convert.ConverterManager.getPeriodConverter : $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>()
org.joda.time.convert.ConverterManager.getPeriodConverter : $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> org.joda.time.convert.ConverterManager.getPeriodConverter : $r6 = virtualinvoke $r4.<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>($r5)
org.joda.time.convert.ConverterManager.getPeriodConverter : $r6 = virtualinvoke $r4.<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>($r5) >>>>>>>> org.joda.time.convert.ConverterSet.select : r2 = r0.<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet$Entry[] iSelectEntries>
org.joda.time.convert.ConverterSet.select : r2 = r0.<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet$Entry[] iSelectEntries> >>>>>>>> org.joda.time.convert.ConverterSet.select : i0 = lengthof r2
org.joda.time.convert.ConverterSet.select : i0 = lengthof r2 >>>>>>>> org.joda.time.convert.ConverterSet.select : if r1 != null
org.joda.time.convert.ConverterSet.select : if r1 != null >>>>>>>> org.joda.time.convert.ConverterSet.select : $i5 = virtualinvoke r1.<java.lang.Object: int hashCode()>()
org.joda.time.convert.ConverterSet.select : $i5 = virtualinvoke r1.<java.lang.Object: int hashCode()>() >>>>>>>> org.joda.time.convert.ConverterSet.select : $i6 = i0 - 1
org.joda.time.convert.ConverterSet.select : $i6 = i0 - 1 >>>>>>>> org.joda.time.convert.ConverterSet.select : $i4 = $i5 & $i6
org.joda.time.convert.ConverterSet.select : $i4 = $i5 & $i6 >>>>>>>> org.joda.time.convert.ConverterSet.select : i1 = $i4
org.joda.time.convert.ConverterSet.select : i1 = $i4 >>>>>>>> org.joda.time.convert.ConverterSet.select : $r6 = r2[i1]
org.joda.time.convert.ConverterSet.select : $r6 = r2[i1] >>>>>>>> org.joda.time.convert.ConverterSet.select : r3 = $r6
org.joda.time.convert.ConverterSet.select : r3 = $r6 >>>>>>>> org.joda.time.convert.ConverterSet.select : if $r6 == null
org.joda.time.convert.ConverterSet.select : if $r6 == null >>>>>>>> org.joda.time.convert.ConverterSet.select : $r7 = r3.<org.joda.time.convert.ConverterSet$Entry: java.lang.Class iType>
org.joda.time.convert.ConverterSet.select : $r7 = r3.<org.joda.time.convert.ConverterSet$Entry: java.lang.Class iType> >>>>>>>> org.joda.time.convert.ConverterSet.select : if $r7 != r1
org.joda.time.convert.ConverterSet.select : if $r7 != r1 >>>>>>>> org.joda.time.convert.ConverterSet.select : $r8 = r3.<org.joda.time.convert.ConverterSet$Entry: org.joda.time.convert.Converter iConverter>
org.joda.time.convert.ConverterSet.select : $r8 = r3.<org.joda.time.convert.ConverterSet$Entry: org.joda.time.convert.Converter iConverter> >>>>>>>> org.joda.time.convert.ConverterSet.select : return $r8
org.joda.time.convert.ConverterSet.select : return $r8 >>>>>>>> org.joda.time.convert.ConverterManager.getPeriodConverter : r2 = (org.joda.time.convert.PeriodConverter) $r6
org.joda.time.convert.ConverterManager.getPeriodConverter : r2 = (org.joda.time.convert.PeriodConverter) $r6 >>>>>>>> org.joda.time.convert.ConverterManager.getPeriodConverter : if r2 == null
org.joda.time.convert.ConverterManager.getPeriodConverter : if r2 == null >>>>>>>> org.joda.time.convert.ConverterManager.getPeriodConverter : return r2
org.joda.time.convert.ConverterManager.getPeriodConverter : return r2 >>>>>>>> org.joda.time.convert.ReadablePeriodConverter.getPeriodType : r2 = (org.joda.time.ReadablePeriod) r1
org.joda.time.convert.ReadablePeriodConverter.getPeriodType : r2 = (org.joda.time.ReadablePeriod) r1 >>>>>>>> org.joda.time.convert.ReadablePeriodConverter.getPeriodType : $r3 = interfaceinvoke r2.<org.joda.time.ReadablePeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.convert.ReadablePeriodConverter.getPeriodType : $r3 = interfaceinvoke r2.<org.joda.time.ReadablePeriod: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.convert.ReadablePeriodConverter.getPeriodType : return $r3
org.joda.time.convert.ReadablePeriodConverter.getPeriodType : return $r3 >>>>>>>> org.joda.time.convert.ReadablePeriodConverter.setInto : $r4 = (org.joda.time.ReadablePeriod) r2
org.joda.time.convert.ReadablePeriodConverter.setInto : $r4 = (org.joda.time.ReadablePeriod) r2 >>>>>>>> org.joda.time.convert.ReadablePeriodConverter.setInto : interfaceinvoke r1.<org.joda.time.ReadWritablePeriod: void setPeriod(org.joda.time.ReadablePeriod)>($r4)
org.joda.time.convert.ReadablePeriodConverter.setInto : interfaceinvoke r1.<org.joda.time.ReadWritablePeriod: void setPeriod(org.joda.time.ReadablePeriod)>($r4) >>>>>>>> org.joda.time.MutablePeriod.setPeriod : specialinvoke r0.<org.joda.time.base.BasePeriod: void setPeriod(org.joda.time.ReadablePeriod)>(r1)
org.joda.time.MutablePeriod.setPeriod : specialinvoke r0.<org.joda.time.base.BasePeriod: void setPeriod(org.joda.time.ReadablePeriod)>(r1) >>>>>>>> org.joda.time.base.BasePeriod.setPeriod : if r1 != null
org.joda.time.base.BasePeriod.setPeriod : if r1 != null >>>>>>>> org.joda.time.base.BasePeriod.setPeriod : specialinvoke r0.<org.joda.time.base.BasePeriod: void setPeriodInternal(org.joda.time.ReadablePeriod)>(r1)
org.joda.time.base.BasePeriod.setPeriod : specialinvoke r0.<org.joda.time.base.BasePeriod: void setPeriodInternal(org.joda.time.ReadablePeriod)>(r1) >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $i3 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int size()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $i3 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int size()>() >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : r2 = newarray (int)[$i3]
org.joda.time.base.BasePeriod.setPeriodInternal : r2 = newarray (int)[$i3] >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : i0 = 0
org.joda.time.base.BasePeriod.setPeriodInternal : i0 = 0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : i1 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int size()>()
org.joda.time.base.BasePeriod.setPeriodInternal : i1 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int size()>() >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : if i0 >= i1
org.joda.time.base.BasePeriod.setPeriodInternal : if i0 >= i1 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : r3 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>(i0)
org.joda.time.base.BasePeriod.setPeriodInternal : r3 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>(i0) >>>>>>>> org.joda.time.base.AbstractPeriod.getFieldType : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.base.AbstractPeriod.getFieldType : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.base.AbstractPeriod.getFieldType : $r2 = virtualinvoke $r1.<org.joda.time.PeriodType: org.joda.time.DurationFieldType getFieldType(int)>(i0)
org.joda.time.base.AbstractPeriod.getFieldType : $r2 = virtualinvoke $r1.<org.joda.time.PeriodType: org.joda.time.DurationFieldType getFieldType(int)>(i0) >>>>>>>> org.joda.time.PeriodType.getFieldType : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.PeriodType.getFieldType : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes> >>>>>>>> org.joda.time.PeriodType.getFieldType : $r2 = $r1[i0]
org.joda.time.PeriodType.getFieldType : $r2 = $r1[i0] >>>>>>>> org.joda.time.PeriodType.getFieldType : return $r2
org.joda.time.PeriodType.getFieldType : return $r2 >>>>>>>> org.joda.time.base.AbstractPeriod.getFieldType : return $r2
org.joda.time.base.AbstractPeriod.getFieldType : return $r2 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : i2 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int getValue(int)>(i0)
org.joda.time.base.BasePeriod.setPeriodInternal : i2 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int getValue(int)>(i0) >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>(r3, r2, i2)
org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>(r3, r2, i2) >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : i0 = i0 + 1
org.joda.time.base.BasePeriod.setPeriodInternal : i0 = i0 + 1 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : goto [?= (branch)]
org.joda.time.base.BasePeriod.setPeriodInternal : goto [?= (branch)] >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : virtualinvoke r0.<org.joda.time.base.BasePeriod: void setValues(int[])>(r2)
org.joda.time.base.BasePeriod.setPeriodInternal : virtualinvoke r0.<org.joda.time.base.BasePeriod: void setValues(int[])>(r2) >>>>>>>> org.joda.time.base.BasePeriod.setValues : $r2 = r0.<org.joda.time.base.BasePeriod: int[] iValues>
org.joda.time.base.BasePeriod.setValues : $r2 = r0.<org.joda.time.base.BasePeriod: int[] iValues> >>>>>>>> org.joda.time.base.BasePeriod.setValues : $r3 = r0.<org.joda.time.base.BasePeriod: int[] iValues>
org.joda.time.base.BasePeriod.setValues : $r3 = r0.<org.joda.time.base.BasePeriod: int[] iValues> >>>>>>>> org.joda.time.base.BasePeriod.setValues : $i0 = lengthof $r3
org.joda.time.base.BasePeriod.setValues : $i0 = lengthof $r3 >>>>>>>> org.joda.time.base.BasePeriod.setValues : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r2, 0, $i0)
org.joda.time.base.BasePeriod.setValues : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r2, 0, $i0) >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : $i1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int size()>()
org.joda.time.base.AbstractPeriod.getValues : $i1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int size()>() >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : r1 = newarray (int)[$i1]
org.joda.time.base.AbstractPeriod.getValues : r1 = newarray (int)[$i1] >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : i0 = 0
org.joda.time.base.AbstractPeriod.getValues : i0 = 0 >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : $i2 = lengthof r1
org.joda.time.base.AbstractPeriod.getValues : $i2 = lengthof r1 >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : if i0 >= $i2
org.joda.time.base.AbstractPeriod.getValues : if i0 >= $i2 >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : $i3 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int getValue(int)>(i0)
org.joda.time.base.AbstractPeriod.getValues : $i3 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int getValue(int)>(i0) >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : r1[i0] = $i3
org.joda.time.base.AbstractPeriod.getValues : r1[i0] = $i3 >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : i0 = i0 + 1
org.joda.time.base.AbstractPeriod.getValues : i0 = i0 + 1 >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : goto [?= $i2 = lengthof r1]
org.joda.time.base.AbstractPeriod.getValues : goto [?= $i2 = lengthof r1] >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : return r1
org.joda.time.base.AbstractPeriod.getValues : return r1 >>>>>>>> org.joda.time.base.AbstractPeriod.toPeriod : return $r1
org.joda.time.base.AbstractPeriod.toPeriod : return $r1 >>>>>>>> org.joda.time.format.PeriodFormatter.parsePeriod : return $r3
org.joda.time.format.PeriodFormatter.parsePeriod : return $r3 >>>>>>>> org.joda.time.Period.parse : return $r2
org.joda.time.Period.parse : return $r2 >>>>>>>> org.joda.time.base.AbstractPeriod.equals : if r0 != r1
org.joda.time.base.AbstractPeriod.equals : if r0 != r1 >>>>>>>> org.joda.time.base.AbstractPeriod.equals : $z0 = r1 instanceof org.joda.time.ReadablePeriod
org.joda.time.base.AbstractPeriod.equals : $z0 = r1 instanceof org.joda.time.ReadablePeriod >>>>>>>> org.joda.time.base.AbstractPeriod.equals : if $z0 != 0
org.joda.time.base.AbstractPeriod.equals : if $z0 != 0 >>>>>>>> org.joda.time.base.AbstractPeriod.equals : r2 = (org.joda.time.ReadablePeriod) r1
org.joda.time.base.AbstractPeriod.equals : r2 = (org.joda.time.ReadablePeriod) r1 >>>>>>>> org.joda.time.base.AbstractPeriod.equals : $i2 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int size()>()
org.joda.time.base.AbstractPeriod.equals : $i2 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int size()>() >>>>>>>> org.joda.time.base.AbstractPeriod.equals : $i3 = interfaceinvoke r2.<org.joda.time.ReadablePeriod: int size()>()
org.joda.time.base.AbstractPeriod.equals : $i3 = interfaceinvoke r2.<org.joda.time.ReadablePeriod: int size()>() >>>>>>>> org.joda.time.base.AbstractPeriod.equals : if $i2 == $i3
org.joda.time.base.AbstractPeriod.equals : if $i2 == $i3 >>>>>>>> org.joda.time.base.AbstractPeriod.equals : i0 = 0
org.joda.time.base.AbstractPeriod.equals : i0 = 0 >>>>>>>> org.joda.time.base.AbstractPeriod.equals : i1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int size()>()
org.joda.time.base.AbstractPeriod.equals : i1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int size()>() >>>>>>>> org.joda.time.base.AbstractPeriod.equals : if i0 >= i1
org.joda.time.base.AbstractPeriod.equals : if i0 >= i1 >>>>>>>> org.joda.time.base.AbstractPeriod.equals : $i4 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int getValue(int)>(i0)
org.joda.time.base.AbstractPeriod.equals : $i4 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int getValue(int)>(i0) >>>>>>>> org.joda.time.base.AbstractPeriod.equals : $i5 = interfaceinvoke r2.<org.joda.time.ReadablePeriod: int getValue(int)>(i0)
org.joda.time.base.AbstractPeriod.equals : $i5 = interfaceinvoke r2.<org.joda.time.ReadablePeriod: int getValue(int)>(i0) >>>>>>>> org.joda.time.base.AbstractPeriod.equals : if $i4 != $i5
org.joda.time.base.AbstractPeriod.equals : if $i4 != $i5 >>>>>>>> org.joda.time.base.AbstractPeriod.equals : $r3 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.DurationFieldType getFieldType(int)>(i0)
org.joda.time.base.AbstractPeriod.equals : $r3 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.DurationFieldType getFieldType(int)>(i0) >>>>>>>> org.joda.time.base.AbstractPeriod.equals : $r4 = interfaceinvoke r2.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>(i0)
org.joda.time.base.AbstractPeriod.equals : $r4 = interfaceinvoke r2.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>(i0) >>>>>>>> org.joda.time.base.AbstractPeriod.equals : if $r3 == $r4
org.joda.time.base.AbstractPeriod.equals : if $r3 == $r4 >>>>>>>> org.joda.time.base.AbstractPeriod.equals : i0 = i0 + 1
org.joda.time.base.AbstractPeriod.equals : i0 = i0 + 1 >>>>>>>> org.joda.time.base.AbstractPeriod.equals : goto [?= (branch)]
org.joda.time.base.AbstractPeriod.equals : goto [?= (branch)] >>>>>>>> org.joda.time.base.AbstractPeriod.equals : return 1
