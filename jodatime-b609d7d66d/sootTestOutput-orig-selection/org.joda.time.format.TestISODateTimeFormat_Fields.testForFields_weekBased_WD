org.joda.time.DateTimeFieldType.weekOfWeekyear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType WEEK_OF_WEEKYEAR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.weekOfWeekyear : return $r0
org.joda.time.DateTimeFieldType.weekOfWeekyear : return $r0 >>>>>>>> org.joda.time.DateTimeFieldType.dayOfWeek : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType DAY_OF_WEEK_TYPE>
org.joda.time.DateTimeFieldType.dayOfWeek : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType DAY_OF_WEEK_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.dayOfWeek : return $r0
org.joda.time.DateTimeFieldType.dayOfWeek : return $r0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : if r0 == null
org.joda.time.format.ISODateTimeFormat.forFields : if r0 == null >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $i1 = interfaceinvoke r0.<java.util.Collection: int size()>()
org.joda.time.format.ISODateTimeFormat.forFields : $i1 = interfaceinvoke r0.<java.util.Collection: int size()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : if $i1 != 0
org.joda.time.format.ISODateTimeFormat.forFields : if $i1 != 0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $r5 = new java.util.HashSet
org.joda.time.format.ISODateTimeFormat.forFields : $r5 = new java.util.HashSet >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : specialinvoke $r5.<java.util.HashSet: void <init>(java.util.Collection)>(r0)
org.joda.time.format.ISODateTimeFormat.forFields : specialinvoke $r5.<java.util.HashSet: void <init>(java.util.Collection)>(r0) >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.hashCode : $b0 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: byte iOrdinal>
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.hashCode : $b0 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: byte iOrdinal> >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.hashCode : return $b0
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.hashCode : return $b0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : r1 = $r5
org.joda.time.format.ISODateTimeFormat.forFields : r1 = $r5 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : i0 = interfaceinvoke r1.<java.util.Set: int size()>()
org.joda.time.format.ISODateTimeFormat.forFields : i0 = interfaceinvoke r1.<java.util.Set: int size()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : z2 = 0
org.joda.time.format.ISODateTimeFormat.forFields : z2 = 0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $r6 = new org.joda.time.format.DateTimeFormatterBuilder
org.joda.time.format.ISODateTimeFormat.forFields : $r6 = new org.joda.time.format.DateTimeFormatterBuilder >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : specialinvoke $r6.<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>()
org.joda.time.format.ISODateTimeFormat.forFields : specialinvoke $r6.<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : r2 = $r6
org.joda.time.format.ISODateTimeFormat.forFields : r2 = $r6 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $r7 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>()
org.joda.time.format.ISODateTimeFormat.forFields : $r7 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>() >>>>>>>> org.joda.time.DateTimeFieldType.monthOfYear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MONTH_OF_YEAR_TYPE>
org.joda.time.DateTimeFieldType.monthOfYear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MONTH_OF_YEAR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.monthOfYear : return $r0
org.joda.time.DateTimeFieldType.monthOfYear : return $r0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $z4 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>($r7)
org.joda.time.format.ISODateTimeFormat.forFields : $z4 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>($r7) >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : if $z4 == 0
org.joda.time.format.ISODateTimeFormat.forFields : if $z4 == 0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $r8 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>()
org.joda.time.format.ISODateTimeFormat.forFields : $r8 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>() >>>>>>>> org.joda.time.DateTimeFieldType.dayOfYear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType DAY_OF_YEAR_TYPE>
org.joda.time.DateTimeFieldType.dayOfYear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType DAY_OF_YEAR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.dayOfYear : return $r0
org.joda.time.DateTimeFieldType.dayOfYear : return $r0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $z5 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>($r8)
org.joda.time.format.ISODateTimeFormat.forFields : $z5 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>($r8) >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : if $z5 == 0
org.joda.time.format.ISODateTimeFormat.forFields : if $z5 == 0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $r9 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekOfWeekyear()>()
org.joda.time.format.ISODateTimeFormat.forFields : $r9 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekOfWeekyear()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $z6 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>($r9)
org.joda.time.format.ISODateTimeFormat.forFields : $z6 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>($r9) >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : if $z6 == 0
org.joda.time.format.ISODateTimeFormat.forFields : if $z6 == 0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : z2 = staticinvoke <org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>(r2, r1, z0, z1)
org.joda.time.format.ISODateTimeFormat.forFields : z2 = staticinvoke <org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>(r2, r1, z0, z1) >>>>>>>> org.joda.time.format.ISODateTimeFormat.dateByWeek : z2 = 0
org.joda.time.format.ISODateTimeFormat.dateByWeek : z2 = 0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.dateByWeek : $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>()
org.joda.time.format.ISODateTimeFormat.dateByWeek : $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>() >>>>>>>> org.joda.time.DateTimeFieldType.weekyear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType WEEKYEAR_TYPE>
org.joda.time.DateTimeFieldType.weekyear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType WEEKYEAR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.weekyear : return $r0
org.joda.time.DateTimeFieldType.weekyear : return $r0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.dateByWeek : $z3 = interfaceinvoke r1.<java.util.Collection: boolean remove(java.lang.Object)>($r2)
org.joda.time.format.ISODateTimeFormat.dateByWeek : $z3 = interfaceinvoke r1.<java.util.Collection: boolean remove(java.lang.Object)>($r2) >>>>>>>> org.joda.time.format.ISODateTimeFormat.dateByWeek : if $z3 == 0
org.joda.time.format.ISODateTimeFormat.dateByWeek : if $z3 == 0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.dateByWeek : $r14 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekOfWeekyear()>()
org.joda.time.format.ISODateTimeFormat.dateByWeek : $r14 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekOfWeekyear()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.dateByWeek : $z7 = interfaceinvoke r1.<java.util.Collection: boolean remove(java.lang.Object)>($r14)
org.joda.time.format.ISODateTimeFormat.dateByWeek : $z7 = interfaceinvoke r1.<java.util.Collection: boolean remove(java.lang.Object)>($r14) >>>>>>>> org.joda.time.format.ISODateTimeFormat.dateByWeek : if $z7 == 0
org.joda.time.format.ISODateTimeFormat.dateByWeek : if $z7 == 0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.dateByWeek : virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>(45)
org.joda.time.format.ISODateTimeFormat.dateByWeek : virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>(45) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendLiteral : $r1 = new org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral
org.joda.time.format.DateTimeFormatterBuilder.appendLiteral : $r1 = new org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendLiteral : specialinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void <init>(char)>(c0)
org.joda.time.format.DateTimeFormatterBuilder.appendLiteral : specialinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void <init>(char)>(c0) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendLiteral : $r2 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r1)
org.joda.time.format.DateTimeFormatterBuilder.appendLiteral : $r2 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.append0 : r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object iFormatter> = null
org.joda.time.format.DateTimeFormatterBuilder.append0 : r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object iFormatter> = null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.append0 : $r2 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs>
org.joda.time.format.DateTimeFormatterBuilder.append0 : $r2 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.append0 : virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1)
org.joda.time.format.DateTimeFormatterBuilder.append0 : virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.append0 : $r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs>
org.joda.time.format.DateTimeFormatterBuilder.append0 : $r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.append0 : virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r1)
org.joda.time.format.DateTimeFormatterBuilder.append0 : virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.append0 : return r0
org.joda.time.format.DateTimeFormatterBuilder.append0 : return r0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendLiteral : return $r2
org.joda.time.format.DateTimeFormatterBuilder.appendLiteral : return $r2 >>>>>>>> org.joda.time.format.ISODateTimeFormat.dateByWeek : virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>(87)
org.joda.time.format.ISODateTimeFormat.dateByWeek : virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>(87) >>>>>>>> org.joda.time.format.ISODateTimeFormat.dateByWeek : virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekOfWeekyear(int)>(2)
org.joda.time.format.ISODateTimeFormat.dateByWeek : virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendWeekOfWeekyear(int)>(2) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendWeekOfWeekyear : $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekOfWeekyear()>()
org.joda.time.format.DateTimeFormatterBuilder.appendWeekOfWeekyear : $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekOfWeekyear()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendWeekOfWeekyear : $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, i0, 2)
org.joda.time.format.DateTimeFormatterBuilder.appendWeekOfWeekyear : $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, i0, 2) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : if r1 != null
org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : if r1 != null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : if i1 >= i0
org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : if i1 >= i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : if i0 < 0
org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : if i0 < 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : if i1 > 0
org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : if i1 > 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : if i0 > 1
org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : if i0 > 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : $r6 = new org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber
org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : $r6 = new org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : specialinvoke $r6.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean,int)>(r1, i1, 0, i0)
org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : specialinvoke $r6.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean,int)>(r1, i1, 0, i0) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : $r7 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r6)
org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : $r7 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r6) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : return $r7
org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : return $r7 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendWeekOfWeekyear : return $r2
org.joda.time.format.DateTimeFormatterBuilder.appendWeekOfWeekyear : return $r2 >>>>>>>> org.joda.time.format.ISODateTimeFormat.dateByWeek : $r18 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>()
org.joda.time.format.ISODateTimeFormat.dateByWeek : $r18 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.dateByWeek : $z8 = interfaceinvoke r1.<java.util.Collection: boolean remove(java.lang.Object)>($r18)
org.joda.time.format.ISODateTimeFormat.dateByWeek : $z8 = interfaceinvoke r1.<java.util.Collection: boolean remove(java.lang.Object)>($r18) >>>>>>>> org.joda.time.format.ISODateTimeFormat.dateByWeek : if $z8 == 0
org.joda.time.format.ISODateTimeFormat.dateByWeek : if $z8 == 0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.dateByWeek : staticinvoke <org.joda.time.format.ISODateTimeFormat: void appendSeparator(org.joda.time.format.DateTimeFormatterBuilder,boolean)>(r0, z0)
org.joda.time.format.ISODateTimeFormat.dateByWeek : staticinvoke <org.joda.time.format.ISODateTimeFormat: void appendSeparator(org.joda.time.format.DateTimeFormatterBuilder,boolean)>(r0, z0) >>>>>>>> org.joda.time.format.ISODateTimeFormat.appendSeparator : if z0 == 0
org.joda.time.format.ISODateTimeFormat.appendSeparator : if z0 == 0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.appendSeparator : virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>(45)
org.joda.time.format.ISODateTimeFormat.appendSeparator : virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>(45) >>>>>>>> org.joda.time.format.ISODateTimeFormat.dateByWeek : virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeek(int)>(1)
org.joda.time.format.ISODateTimeFormat.dateByWeek : virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfWeek(int)>(1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendDayOfWeek : $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>()
org.joda.time.format.DateTimeFormatterBuilder.appendDayOfWeek : $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendDayOfWeek : $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, i0, 1)
org.joda.time.format.DateTimeFormatterBuilder.appendDayOfWeek : $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, i0, 1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : $r4 = new org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber
org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : $r4 = new org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : specialinvoke $r4.<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>(r1, i1, 0)
org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : specialinvoke $r4.<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean)>(r1, i1, 0) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : $r5 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r4)
org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : $r5 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r4) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : return $r5
org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : return $r5 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendDayOfWeek : return $r2
org.joda.time.format.DateTimeFormatterBuilder.appendDayOfWeek : return $r2 >>>>>>>> org.joda.time.format.ISODateTimeFormat.dateByWeek : goto [?= return z2]
org.joda.time.format.ISODateTimeFormat.dateByWeek : goto [?= return z2] >>>>>>>> org.joda.time.format.ISODateTimeFormat.dateByWeek : return z2
org.joda.time.format.ISODateTimeFormat.dateByWeek : return z2 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : goto [?= $i2 = interfaceinvoke r1.<java.util.Set: int size()>()]
org.joda.time.format.ISODateTimeFormat.forFields : goto [?= $i2 = interfaceinvoke r1.<java.util.Set: int size()>()] >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $i2 = interfaceinvoke r1.<java.util.Set: int size()>()
org.joda.time.format.ISODateTimeFormat.forFields : $i2 = interfaceinvoke r1.<java.util.Set: int size()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : if $i2 >= i0
org.joda.time.format.ISODateTimeFormat.forFields : if $i2 >= i0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $z11 = 1
org.joda.time.format.ISODateTimeFormat.forFields : $z11 = 1 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : goto [?= z3 = $z11]
org.joda.time.format.ISODateTimeFormat.forFields : goto [?= z3 = $z11] >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : z3 = $z11
org.joda.time.format.ISODateTimeFormat.forFields : z3 = $z11 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : staticinvoke <org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>(r2, r1, z0, z1, z2, z3)
org.joda.time.format.ISODateTimeFormat.forFields : staticinvoke <org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>(r2, r1, z0, z1, z2, z3) >>>>>>>> org.joda.time.format.ISODateTimeFormat.time : $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>()
org.joda.time.format.ISODateTimeFormat.time : $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>() >>>>>>>> org.joda.time.DateTimeFieldType.hourOfDay : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType HOUR_OF_DAY_TYPE>
org.joda.time.DateTimeFieldType.hourOfDay : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType HOUR_OF_DAY_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.hourOfDay : return $r0
org.joda.time.DateTimeFieldType.hourOfDay : return $r0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.time : z4 = interfaceinvoke r1.<java.util.Collection: boolean remove(java.lang.Object)>($r2)
org.joda.time.format.ISODateTimeFormat.time : z4 = interfaceinvoke r1.<java.util.Collection: boolean remove(java.lang.Object)>($r2) >>>>>>>> org.joda.time.format.ISODateTimeFormat.time : $r4 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>()
org.joda.time.format.ISODateTimeFormat.time : $r4 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>() >>>>>>>> org.joda.time.DateTimeFieldType.minuteOfHour : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MINUTE_OF_HOUR_TYPE>
org.joda.time.DateTimeFieldType.minuteOfHour : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MINUTE_OF_HOUR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.minuteOfHour : return $r0
org.joda.time.DateTimeFieldType.minuteOfHour : return $r0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.time : z5 = interfaceinvoke r1.<java.util.Collection: boolean remove(java.lang.Object)>($r4)
org.joda.time.format.ISODateTimeFormat.time : z5 = interfaceinvoke r1.<java.util.Collection: boolean remove(java.lang.Object)>($r4) >>>>>>>> org.joda.time.format.ISODateTimeFormat.time : $r5 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>()
org.joda.time.format.ISODateTimeFormat.time : $r5 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>() >>>>>>>> org.joda.time.DateTimeFieldType.secondOfMinute : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType SECOND_OF_MINUTE_TYPE>
org.joda.time.DateTimeFieldType.secondOfMinute : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType SECOND_OF_MINUTE_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.secondOfMinute : return $r0
org.joda.time.DateTimeFieldType.secondOfMinute : return $r0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.time : z6 = interfaceinvoke r1.<java.util.Collection: boolean remove(java.lang.Object)>($r5)
org.joda.time.format.ISODateTimeFormat.time : z6 = interfaceinvoke r1.<java.util.Collection: boolean remove(java.lang.Object)>($r5) >>>>>>>> org.joda.time.format.ISODateTimeFormat.time : $r6 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>()
org.joda.time.format.ISODateTimeFormat.time : $r6 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>() >>>>>>>> org.joda.time.DateTimeFieldType.millisOfSecond : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MILLIS_OF_SECOND_TYPE>
org.joda.time.DateTimeFieldType.millisOfSecond : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MILLIS_OF_SECOND_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.millisOfSecond : return $r0
org.joda.time.DateTimeFieldType.millisOfSecond : return $r0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.time : z7 = interfaceinvoke r1.<java.util.Collection: boolean remove(java.lang.Object)>($r6)
org.joda.time.format.ISODateTimeFormat.time : z7 = interfaceinvoke r1.<java.util.Collection: boolean remove(java.lang.Object)>($r6) >>>>>>>> org.joda.time.format.ISODateTimeFormat.time : if z4 != 0
org.joda.time.format.ISODateTimeFormat.time : if z4 != 0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.time : if z5 != 0
org.joda.time.format.ISODateTimeFormat.time : if z5 != 0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.time : if z6 != 0
org.joda.time.format.ISODateTimeFormat.time : if z6 != 0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.time : if z7 != 0
org.joda.time.format.ISODateTimeFormat.time : if z7 != 0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $z12 = virtualinvoke r2.<org.joda.time.format.DateTimeFormatterBuilder: boolean canBuildFormatter()>()
org.joda.time.format.ISODateTimeFormat.forFields : $z12 = virtualinvoke r2.<org.joda.time.format.DateTimeFormatterBuilder: boolean canBuildFormatter()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.canBuildFormatter : $r1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>()
org.joda.time.format.DateTimeFormatterBuilder.canBuildFormatter : $r1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r1 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object iFormatter>
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r1 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object iFormatter> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : if r1 != null
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : if r1 != null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $r4 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs>
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $r4 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>()
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : if $i0 != 2
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : if $i0 != 2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $r7 = new org.joda.time.format.DateTimeFormatterBuilder$Composite
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $r7 = new org.joda.time.format.DateTimeFormatterBuilder$Composite >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $r8 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs>
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $r8 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : specialinvoke $r7.<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>($r8)
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : specialinvoke $r7.<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>($r8) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : i0 = interfaceinvoke r1.<java.util.List: int size()>()
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : i0 = interfaceinvoke r1.<java.util.List: int size()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : i1 = 0
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : i1 = 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : if i1 >= i0
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : if i1 >= i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1)
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : $z0 = r4 instanceof org.joda.time.format.DateTimePrinter
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : $z0 = r4 instanceof org.joda.time.format.DateTimePrinter >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : if $z0 == 0
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : if $z0 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : $z1 = r4 instanceof org.joda.time.format.DateTimeFormatterBuilder$Composite
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : $z1 = r4 instanceof org.joda.time.format.DateTimeFormatterBuilder$Composite >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : if $z1 == 0
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : if $z1 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r4)
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r4) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : $i2 = i1 + 1
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : $i2 = i1 + 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : r7 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i2)
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : r7 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i2) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : $z3 = r7 instanceof org.joda.time.format.DateTimeParser
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : $z3 = r7 instanceof org.joda.time.format.DateTimeParser >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : if $z3 == 0
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : if $z3 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : $z4 = r7 instanceof org.joda.time.format.DateTimeFormatterBuilder$Composite
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : $z4 = r7 instanceof org.joda.time.format.DateTimeFormatterBuilder$Composite >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : if $z4 == 0
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : if $z4 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r7)
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r7) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : i1 = i1 + 2
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : i1 = i1 + 2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : goto [?= (branch)]
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : goto [?= (branch)] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.estimatePrintedLength : return 1
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.estimatePrintedLength : return 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.estimatePrintedLength : $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: int iMaxParsedDigits>
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.estimatePrintedLength : $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: int iMaxParsedDigits> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.estimatePrintedLength : return $i0
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.estimatePrintedLength : return $i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber.estimatePrintedLength : $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: int iMaxParsedDigits>
org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber.estimatePrintedLength : $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: int iMaxParsedDigits> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber.estimatePrintedLength : return $i0
org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber.estimatePrintedLength : return $i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.estimateParsedLength : return 1
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.estimateParsedLength : return 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.estimateParsedLength : $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int iMaxParsedDigits>
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.estimateParsedLength : $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int iMaxParsedDigits> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.estimateParsedLength : return $i0
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.estimateParsedLength : return $i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r1 = $r7
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r1 = $r7 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object iFormatter> = r1
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object iFormatter> = r1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : return r1
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : return r1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.canBuildFormatter : $z0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isFormatter(java.lang.Object)>($r1)
org.joda.time.format.DateTimeFormatterBuilder.canBuildFormatter : $z0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isFormatter(java.lang.Object)>($r1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isFormatter : $z0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isPrinter(java.lang.Object)>(r1)
org.joda.time.format.DateTimeFormatterBuilder.isFormatter : $z0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isPrinter(java.lang.Object)>(r1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isPrinter : $z0 = r1 instanceof org.joda.time.format.DateTimePrinter
org.joda.time.format.DateTimeFormatterBuilder.isPrinter : $z0 = r1 instanceof org.joda.time.format.DateTimePrinter >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isPrinter : if $z0 == 0
org.joda.time.format.DateTimeFormatterBuilder.isPrinter : if $z0 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isPrinter : $z1 = r1 instanceof org.joda.time.format.DateTimeFormatterBuilder$Composite
org.joda.time.format.DateTimeFormatterBuilder.isPrinter : $z1 = r1 instanceof org.joda.time.format.DateTimeFormatterBuilder$Composite >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isPrinter : if $z1 == 0
org.joda.time.format.DateTimeFormatterBuilder.isPrinter : if $z1 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isPrinter : $r2 = (org.joda.time.format.DateTimeFormatterBuilder$Composite) r1
org.joda.time.format.DateTimeFormatterBuilder.isPrinter : $r2 = (org.joda.time.format.DateTimeFormatterBuilder$Composite) r1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isPrinter : $z2 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder$Composite: boolean isPrinter()>()
org.joda.time.format.DateTimeFormatterBuilder.isPrinter : $z2 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder$Composite: boolean isPrinter()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.isPrinter : $r1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: org.joda.time.format.DateTimePrinter[] iPrinters>
org.joda.time.format.DateTimeFormatterBuilder$Composite.isPrinter : $r1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: org.joda.time.format.DateTimePrinter[] iPrinters> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.isPrinter : if $r1 == null
org.joda.time.format.DateTimeFormatterBuilder$Composite.isPrinter : if $r1 == null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.isPrinter : $z0 = 1
org.joda.time.format.DateTimeFormatterBuilder$Composite.isPrinter : $z0 = 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.isPrinter : goto [?= return $z0]
org.joda.time.format.DateTimeFormatterBuilder$Composite.isPrinter : goto [?= return $z0] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.isPrinter : return $z0
org.joda.time.format.DateTimeFormatterBuilder$Composite.isPrinter : return $z0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isPrinter : return $z2
org.joda.time.format.DateTimeFormatterBuilder.isPrinter : return $z2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isFormatter : if $z0 != 0
org.joda.time.format.DateTimeFormatterBuilder.isFormatter : if $z0 != 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isFormatter : $z2 = 1
org.joda.time.format.DateTimeFormatterBuilder.isFormatter : $z2 = 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isFormatter : goto [?= return $z2]
org.joda.time.format.DateTimeFormatterBuilder.isFormatter : goto [?= return $z2] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isFormatter : return $z2
org.joda.time.format.DateTimeFormatterBuilder.isFormatter : return $z2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.canBuildFormatter : return $z0
org.joda.time.format.DateTimeFormatterBuilder.canBuildFormatter : return $z0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : if $z12 != 0
org.joda.time.format.ISODateTimeFormat.forFields : if $z12 != 0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : interfaceinvoke r0.<java.util.Collection: boolean retainAll(java.util.Collection)>(r1)
org.joda.time.format.ISODateTimeFormat.forFields : interfaceinvoke r0.<java.util.Collection: boolean retainAll(java.util.Collection)>(r1) >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : goto [?= $r24 = virtualinvoke r2.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>()]
org.joda.time.format.ISODateTimeFormat.forFields : goto [?= $r24 = virtualinvoke r2.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>()] >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $r24 = virtualinvoke r2.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>()
org.joda.time.format.ISODateTimeFormat.forFields : $r24 = virtualinvoke r2.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>()
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r2 = null
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r2 = null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : $z0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isPrinter(java.lang.Object)>(r1)
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : $z0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isPrinter(java.lang.Object)>(r1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : if $z0 == 0
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : if $z0 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r2 = (org.joda.time.format.DateTimePrinter) r1
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r2 = (org.joda.time.format.DateTimePrinter) r1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r3 = null
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r3 = null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : $z1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isParser(java.lang.Object)>(r1)
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : $z1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isParser(java.lang.Object)>(r1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isParser : $z0 = r1 instanceof org.joda.time.format.DateTimeParser
org.joda.time.format.DateTimeFormatterBuilder.isParser : $z0 = r1 instanceof org.joda.time.format.DateTimeParser >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isParser : if $z0 == 0
org.joda.time.format.DateTimeFormatterBuilder.isParser : if $z0 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isParser : $z1 = r1 instanceof org.joda.time.format.DateTimeFormatterBuilder$Composite
org.joda.time.format.DateTimeFormatterBuilder.isParser : $z1 = r1 instanceof org.joda.time.format.DateTimeFormatterBuilder$Composite >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isParser : if $z1 == 0
org.joda.time.format.DateTimeFormatterBuilder.isParser : if $z1 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isParser : $r2 = (org.joda.time.format.DateTimeFormatterBuilder$Composite) r1
org.joda.time.format.DateTimeFormatterBuilder.isParser : $r2 = (org.joda.time.format.DateTimeFormatterBuilder$Composite) r1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isParser : $z2 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder$Composite: boolean isParser()>()
org.joda.time.format.DateTimeFormatterBuilder.isParser : $z2 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder$Composite: boolean isParser()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.isParser : $r1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: org.joda.time.format.DateTimeParser[] iParsers>
org.joda.time.format.DateTimeFormatterBuilder$Composite.isParser : $r1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: org.joda.time.format.DateTimeParser[] iParsers> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.isParser : if $r1 == null
org.joda.time.format.DateTimeFormatterBuilder$Composite.isParser : if $r1 == null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.isParser : $z0 = 1
org.joda.time.format.DateTimeFormatterBuilder$Composite.isParser : $z0 = 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.isParser : goto [?= return $z0]
org.joda.time.format.DateTimeFormatterBuilder$Composite.isParser : goto [?= return $z0] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.isParser : return $z0
org.joda.time.format.DateTimeFormatterBuilder$Composite.isParser : return $z0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isParser : return $z2
org.joda.time.format.DateTimeFormatterBuilder.isParser : return $z2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : if $z1 == 0
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : if $z1 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r3 = (org.joda.time.format.DateTimeParser) r1
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r3 = (org.joda.time.format.DateTimeParser) r1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : if r2 != null
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : if r2 != null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : $r4 = new org.joda.time.format.DateTimeFormatter
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : $r4 = new org.joda.time.format.DateTimeFormatter >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : specialinvoke $r4.<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser)>(r2, r3)
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : specialinvoke $r4.<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser)>(r2, r3) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : return $r4
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : return $r4 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : return $r24
org.joda.time.format.ISODateTimeFormat.forFields : return $r24 >>>>>>>> org.joda.time.DateTimeUtils.getChronology : if r0 != null
org.joda.time.DateTimeUtils.getChronology : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getChronology : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>()
org.joda.time.DateTimeUtils.getChronology : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>() >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>()
org.joda.time.chrono.ISOChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>() >>>>>>>> org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> >>>>>>>> org.joda.time.DateTimeZone.getDefault : if r0 != null
org.joda.time.DateTimeZone.getDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.DateTimeZone.getDefault : return r0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r0)
org.joda.time.chrono.ISOChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r0) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if r0 != null
org.joda.time.chrono.ISOChronology.getInstance : if r0 != null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0)
org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : i0 = $i1 & 63
org.joda.time.chrono.ISOChronology.getInstance : i0 = $i1 & 63 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache>
org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache> >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : r1 = $r5[i0]
org.joda.time.chrono.ISOChronology.getInstance : r1 = $r5[i0] >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if r1 == null
org.joda.time.chrono.ISOChronology.getInstance : if r1 == null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r6 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.ISOChronology.getInstance : $r6 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2
org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null
org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.ZonedChronology.getZone : $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: java.lang.Object getParam()>()
org.joda.time.chrono.ZonedChronology.getZone : $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: java.lang.Object getParam()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getParam : $r1 = r0.<org.joda.time.chrono.AssembledChronology: java.lang.Object iParam>
org.joda.time.chrono.AssembledChronology.getParam : $r1 = r0.<org.joda.time.chrono.AssembledChronology: java.lang.Object iParam> >>>>>>>> org.joda.time.chrono.AssembledChronology.getParam : return $r1
org.joda.time.chrono.AssembledChronology.getParam : return $r1 >>>>>>>> org.joda.time.chrono.ZonedChronology.getZone : $r2 = (org.joda.time.DateTimeZone) $r1
org.joda.time.chrono.ZonedChronology.getZone : $r2 = (org.joda.time.DateTimeZone) $r1 >>>>>>>> org.joda.time.chrono.ZonedChronology.getZone : return $r2
org.joda.time.chrono.ZonedChronology.getZone : return $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : return $r3
org.joda.time.chrono.AssembledChronology.getZone : return $r3 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0
org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : return r1
org.joda.time.chrono.ISOChronology.getInstance : return r1 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : return $r1
org.joda.time.chrono.ISOChronology.getInstance : return $r1 >>>>>>>> org.joda.time.DateTimeUtils.getChronology : return $r1
org.joda.time.DateTimeUtils.getChronology : return $r1 >>>>>>>> org.joda.time.chrono.ISOChronology.withUTC : $r1 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC>
org.joda.time.chrono.ISOChronology.withUTC : $r1 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.ISOChronology.withUTC : return $r1
org.joda.time.chrono.ISOChronology.withUTC : return $r1 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getDurationType : $r1 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DurationFieldType iUnitType>
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getDurationType : $r1 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DurationFieldType iUnitType> >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getDurationType : return $r1
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getDurationType : return $r1 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DateTimeUtils.getChronology : return r0
org.joda.time.DateTimeUtils.getChronology : return r0 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal>
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal> >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : tableswitch($b0) {     case 1:
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : tableswitch($b0) {     case 1: >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r8 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField weeks()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r8 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField weeks()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.weeks : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeeks>
org.joda.time.chrono.AssembledChronology.weeks : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeeks> >>>>>>>> org.joda.time.chrono.AssembledChronology.weeks : return $r1
org.joda.time.chrono.AssembledChronology.weeks : return $r1 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r8
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r8 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r9 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField days()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r9 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField days()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.days : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays>
org.joda.time.chrono.AssembledChronology.days : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays> >>>>>>>> org.joda.time.chrono.AssembledChronology.days : return $r1
org.joda.time.chrono.AssembledChronology.days : return $r1 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r9
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r9 >>>>>>>> org.joda.time.field.BaseDurationField.compareTo : $r2 = (org.joda.time.DurationField) r1
org.joda.time.field.BaseDurationField.compareTo : $r2 = (org.joda.time.DurationField) r1 >>>>>>>> org.joda.time.field.BaseDurationField.compareTo : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDurationField: int compareTo(org.joda.time.DurationField)>($r2)
org.joda.time.field.BaseDurationField.compareTo : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDurationField: int compareTo(org.joda.time.DurationField)>($r2) >>>>>>>> org.joda.time.field.BaseDurationField.compareTo : l0 = virtualinvoke r1.<org.joda.time.DurationField: long getUnitMillis()>()
org.joda.time.field.BaseDurationField.compareTo : l0 = virtualinvoke r1.<org.joda.time.DurationField: long getUnitMillis()>() >>>>>>>> org.joda.time.field.PreciseDurationField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis>
org.joda.time.field.PreciseDurationField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationField.getUnitMillis : return $l0
org.joda.time.field.PreciseDurationField.getUnitMillis : return $l0 >>>>>>>> org.joda.time.field.BaseDurationField.compareTo : l1 = virtualinvoke r0.<org.joda.time.field.BaseDurationField: long getUnitMillis()>()
org.joda.time.field.BaseDurationField.compareTo : l1 = virtualinvoke r0.<org.joda.time.field.BaseDurationField: long getUnitMillis()>() >>>>>>>> org.joda.time.field.BaseDurationField.compareTo : $b2 = l1 cmp l0
org.joda.time.field.BaseDurationField.compareTo : $b2 = l1 cmp l0 >>>>>>>> org.joda.time.field.BaseDurationField.compareTo : if $b2 != 0
org.joda.time.field.BaseDurationField.compareTo : if $b2 != 0 >>>>>>>> org.joda.time.field.BaseDurationField.compareTo : $b3 = l1 cmp l0
org.joda.time.field.BaseDurationField.compareTo : $b3 = l1 cmp l0 >>>>>>>> org.joda.time.field.BaseDurationField.compareTo : if $b3 >= 0
org.joda.time.field.BaseDurationField.compareTo : if $b3 >= 0 >>>>>>>> org.joda.time.field.BaseDurationField.compareTo : return 1
org.joda.time.field.BaseDurationField.compareTo : return 1 >>>>>>>> org.joda.time.field.BaseDurationField.compareTo : return $i0
org.joda.time.field.BaseDurationField.compareTo : return $i0 >>>>>>>> org.joda.time.field.BaseDurationField.isSupported : return 1
org.joda.time.field.BaseDurationField.isSupported : return 1 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i0 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>()
org.joda.time.chrono.BaseChronology.validate : i0 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>() >>>>>>>> org.joda.time.Partial.size : $r1 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>
org.joda.time.Partial.size : $r1 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes> >>>>>>>> org.joda.time.Partial.size : $i0 = lengthof $r1
org.joda.time.Partial.size : $i0 = lengthof $r1 >>>>>>>> org.joda.time.Partial.size : return $i0
org.joda.time.Partial.size : return $i0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i1 = 0
org.joda.time.chrono.BaseChronology.validate : i1 = 0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : if i1 >= i0
org.joda.time.chrono.BaseChronology.validate : if i1 >= i0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i2 = r2[i1]
org.joda.time.chrono.BaseChronology.validate : i2 = r2[i1] >>>>>>>> org.joda.time.chrono.BaseChronology.validate : r3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>(i1)
org.joda.time.chrono.BaseChronology.validate : r3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>(i1) >>>>>>>> org.joda.time.base.AbstractPartial.getField : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.Chronology getChronology()>()
org.joda.time.base.AbstractPartial.getField : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.Partial.getChronology : $r1 = r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology>
org.joda.time.Partial.getChronology : $r1 = r0.<org.joda.time.Partial: org.joda.time.Chronology iChronology> >>>>>>>> org.joda.time.Partial.getChronology : return $r1
org.joda.time.Partial.getChronology : return $r1 >>>>>>>> org.joda.time.base.AbstractPartial.getField : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>(i0, $r1)
org.joda.time.base.AbstractPartial.getField : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>(i0, $r1) >>>>>>>> org.joda.time.Partial.getField : $r2 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>
org.joda.time.Partial.getField : $r2 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes> >>>>>>>> org.joda.time.Partial.getField : $r3 = $r2[i0]
org.joda.time.Partial.getField : $r3 = $r2[i0] >>>>>>>> org.joda.time.Partial.getField : $r4 = virtualinvoke $r3.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r1)
org.joda.time.Partial.getField : $r4 = virtualinvoke $r3.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $b0 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: byte iOrdinal>
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $b0 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: byte iOrdinal> >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : tableswitch($b0) {     case 1:
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : tableswitch($b0) {     case 1: >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r13 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField weekOfWeekyear()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r13 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField weekOfWeekyear()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.weekOfWeekyear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekOfWeekyear>
org.joda.time.chrono.AssembledChronology.weekOfWeekyear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekOfWeekyear> >>>>>>>> org.joda.time.chrono.AssembledChronology.weekOfWeekyear : return $r1
org.joda.time.chrono.AssembledChronology.weekOfWeekyear : return $r1 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r13
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r13 >>>>>>>> org.joda.time.Partial.getField : return $r4
org.joda.time.Partial.getField : return $r4 >>>>>>>> org.joda.time.base.AbstractPartial.getField : return $r2
org.joda.time.base.AbstractPartial.getField : return $r2 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : $i3 = virtualinvoke r3.<org.joda.time.DateTimeField: int getMinimumValue()>()
org.joda.time.chrono.BaseChronology.validate : $i3 = virtualinvoke r3.<org.joda.time.DateTimeField: int getMinimumValue()>() >>>>>>>> org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getMinimumValue : return 1
org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getMinimumValue : return 1 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : if i2 >= $i3
org.joda.time.chrono.BaseChronology.validate : if i2 >= $i3 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : $i5 = virtualinvoke r3.<org.joda.time.DateTimeField: int getMaximumValue()>()
org.joda.time.chrono.BaseChronology.validate : $i5 = virtualinvoke r3.<org.joda.time.DateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getMaximumValue : return 53
org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getMaximumValue : return 53 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : if i2 <= $i5
org.joda.time.chrono.BaseChronology.validate : if i2 <= $i5 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i1 = i1 + 1
org.joda.time.chrono.BaseChronology.validate : i1 = i1 + 1 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : goto [?= (branch)]
org.joda.time.chrono.BaseChronology.validate : goto [?= (branch)] >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r14 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r14 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfWeek : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfWeek>
org.joda.time.chrono.AssembledChronology.dayOfWeek : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfWeek> >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfWeek : return $r1
org.joda.time.chrono.AssembledChronology.dayOfWeek : return $r1 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r14
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r14 >>>>>>>> org.joda.time.chrono.GJDayOfWeekDateTimeField.getMinimumValue : return 1
org.joda.time.chrono.GJDayOfWeekDateTimeField.getMinimumValue : return 1 >>>>>>>> org.joda.time.chrono.GJDayOfWeekDateTimeField.getMaximumValue : return 7
org.joda.time.chrono.GJDayOfWeekDateTimeField.getMaximumValue : return 7 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i7 = 0
org.joda.time.chrono.BaseChronology.validate : i7 = 0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : if i7 >= i0
org.joda.time.chrono.BaseChronology.validate : if i7 >= i0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i8 = r2[i7]
org.joda.time.chrono.BaseChronology.validate : i8 = r2[i7] >>>>>>>> org.joda.time.chrono.BaseChronology.validate : r12 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>(i7)
org.joda.time.chrono.BaseChronology.validate : r12 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>(i7) >>>>>>>> org.joda.time.chrono.BaseChronology.validate : $i9 = virtualinvoke r12.<org.joda.time.DateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r2)
org.joda.time.chrono.BaseChronology.validate : $i9 = virtualinvoke r12.<org.joda.time.DateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r2) >>>>>>>> org.joda.time.field.BaseDateTimeField.getMinimumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>(r1)
org.joda.time.field.BaseDateTimeField.getMinimumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>(r1) >>>>>>>> org.joda.time.field.BaseDateTimeField.getMinimumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue()>()
org.joda.time.field.BaseDateTimeField.getMinimumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue()>() >>>>>>>> org.joda.time.field.BaseDateTimeField.getMinimumValue : return $i0
org.joda.time.field.BaseDateTimeField.getMinimumValue : return $i0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : if i8 >= $i9
org.joda.time.chrono.BaseChronology.validate : if i8 >= $i9 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : $i11 = virtualinvoke r12.<org.joda.time.DateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r2)
org.joda.time.chrono.BaseChronology.validate : $i11 = virtualinvoke r12.<org.joda.time.DateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r2) >>>>>>>> org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getMaximumValue : i0 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>()
org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getMaximumValue : i0 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>() >>>>>>>> org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getMaximumValue : i1 = 0
org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getMaximumValue : i1 = 0 >>>>>>>> org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getMaximumValue : if i1 >= i0
org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getMaximumValue : if i1 >= i0 >>>>>>>> org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getMaximumValue : $r3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i1)
org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getMaximumValue : $r3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i1) >>>>>>>> org.joda.time.Partial.getFieldType : $r1 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes>
org.joda.time.Partial.getFieldType : $r1 = r0.<org.joda.time.Partial: org.joda.time.DateTimeFieldType[] iTypes> >>>>>>>> org.joda.time.Partial.getFieldType : $r2 = $r1[i0]
org.joda.time.Partial.getFieldType : $r2 = $r1[i0] >>>>>>>> org.joda.time.Partial.getFieldType : return $r2
org.joda.time.Partial.getFieldType : return $r2 >>>>>>>> org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getMaximumValue : $r4 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>()
org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getMaximumValue : $r4 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>() >>>>>>>> org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getMaximumValue : if $r3 != $r4
org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getMaximumValue : if $r3 != $r4 >>>>>>>> org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getMaximumValue : i1 = i1 + 1
org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getMaximumValue : i1 = i1 + 1 >>>>>>>> org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getMaximumValue : goto [?= (branch)]
org.joda.time.chrono.BasicWeekOfWeekyearDateTimeField.getMaximumValue : goto [?= (branch)] >>>>>>>> org.joda.time.chrono.BaseChronology.validate : if i8 <= $i11
org.joda.time.chrono.BaseChronology.validate : if i8 <= $i11 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i7 = i7 + 1
org.joda.time.chrono.BaseChronology.validate : i7 = i7 + 1 >>>>>>>> org.joda.time.field.BaseDateTimeField.getMaximumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>(r1)
org.joda.time.field.BaseDateTimeField.getMaximumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>(r1) >>>>>>>> org.joda.time.field.BaseDateTimeField.getMaximumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue()>()
org.joda.time.field.BaseDateTimeField.getMaximumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.field.BaseDateTimeField.getMaximumValue : return $i0
org.joda.time.field.BaseDateTimeField.getMaximumValue : return $i0 >>>>>>>> org.joda.time.format.DateTimeFormatter.print : $r2 = new java.lang.StringBuffer
org.joda.time.format.DateTimeFormatter.print : $r2 = new java.lang.StringBuffer >>>>>>>> org.joda.time.format.DateTimeFormatter.print : $r4 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter requirePrinter()>()
org.joda.time.format.DateTimeFormatter.print : $r4 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter requirePrinter()>() >>>>>>>> org.joda.time.format.DateTimeFormatter.requirePrinter : r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter iPrinter>
org.joda.time.format.DateTimeFormatter.requirePrinter : r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter iPrinter> >>>>>>>> org.joda.time.format.DateTimeFormatter.requirePrinter : if r1 != null
org.joda.time.format.DateTimeFormatter.requirePrinter : if r1 != null >>>>>>>> org.joda.time.format.DateTimeFormatter.requirePrinter : return r1
org.joda.time.format.DateTimeFormatter.requirePrinter : return r1 >>>>>>>> org.joda.time.format.DateTimeFormatter.print : $i0 = interfaceinvoke $r4.<org.joda.time.format.DateTimePrinter: int estimatePrintedLength()>()
org.joda.time.format.DateTimeFormatter.print : $i0 = interfaceinvoke $r4.<org.joda.time.format.DateTimePrinter: int estimatePrintedLength()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.estimatePrintedLength : $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: int iPrintedLengthEstimate>
org.joda.time.format.DateTimeFormatterBuilder$Composite.estimatePrintedLength : $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: int iPrintedLengthEstimate> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.estimatePrintedLength : return $i0
org.joda.time.format.DateTimeFormatterBuilder$Composite.estimatePrintedLength : return $i0 >>>>>>>> org.joda.time.format.DateTimeFormatter.print : specialinvoke $r2.<java.lang.StringBuffer: void <init>(int)>($i0)
org.joda.time.format.DateTimeFormatter.print : specialinvoke $r2.<java.lang.StringBuffer: void <init>(int)>($i0) >>>>>>>> org.joda.time.format.DateTimeFormatter.print : r3 = $r2
org.joda.time.format.DateTimeFormatter.print : r3 = $r2 >>>>>>>> org.joda.time.format.DateTimeFormatter.print : virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial)>(r3, r1)
org.joda.time.format.DateTimeFormatter.print : virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial)>(r3, r1) >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : r3 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter requirePrinter()>()
org.joda.time.format.DateTimeFormatter.printTo : r3 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter requirePrinter()>() >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : if r2 != null
org.joda.time.format.DateTimeFormatter.printTo : if r2 != null >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : $r5 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>
org.joda.time.format.DateTimeFormatter.printTo : $r5 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale> >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : interfaceinvoke r3.<org.joda.time.format.DateTimePrinter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale)>(r1, r2, $r5)
org.joda.time.format.DateTimeFormatter.printTo : interfaceinvoke r3.<org.joda.time.format.DateTimePrinter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale)>(r1, r2, $r5) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : r4 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: org.joda.time.format.DateTimePrinter[] iPrinters>
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : r4 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: org.joda.time.format.DateTimePrinter[] iPrinters> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : if r4 != null
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : if r4 != null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : if r3 != null
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : if r3 != null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : r3 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>()
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : r3 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : i0 = lengthof r4
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : i0 = lengthof r4 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : i1 = 0
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : i1 = 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : if i1 >= i0
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : if i1 >= i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : $r6 = r4[i1]
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : $r6 = r4[i1] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : interfaceinvoke $r6.<org.joda.time.format.DateTimePrinter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale)>(r1, r2, r3)
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : interfaceinvoke $r6.<org.joda.time.format.DateTimePrinter: void printTo(java.lang.StringBuffer,org.joda.time.ReadablePartial,java.util.Locale)>(r1, r2, r3) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.printTo : $c0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: char iValue>
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.printTo : $c0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: char iValue> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c0)
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c0) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : i1 = i1 + 1
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : i1 = i1 + 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : goto [?= (branch)]
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : goto [?= (branch)] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $r5 = r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: org.joda.time.DateTimeFieldType iFieldType>
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $r5 = r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: org.joda.time.DateTimeFieldType iFieldType> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $z0 = interfaceinvoke r2.<org.joda.time.ReadablePartial: boolean isSupported(org.joda.time.DateTimeFieldType)>($r5)
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $z0 = interfaceinvoke r2.<org.joda.time.ReadablePartial: boolean isSupported(org.joda.time.DateTimeFieldType)>($r5) >>>>>>>> org.joda.time.base.AbstractPartial.isSupported : $i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DateTimeFieldType)>(r1)
org.joda.time.base.AbstractPartial.isSupported : $i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DateTimeFieldType)>(r1) >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : i0 = 0
org.joda.time.base.AbstractPartial.indexOf : i0 = 0 >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : i1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int size()>()
org.joda.time.base.AbstractPartial.indexOf : i1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int size()>() >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : if i0 >= i1
org.joda.time.base.AbstractPartial.indexOf : if i0 >= i1 >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i0)
org.joda.time.base.AbstractPartial.indexOf : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i0) >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : if $r2 != r1
org.joda.time.base.AbstractPartial.indexOf : if $r2 != r1 >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : return i0
org.joda.time.base.AbstractPartial.indexOf : return i0 >>>>>>>> org.joda.time.base.AbstractPartial.isSupported : if $i0 == -1
org.joda.time.base.AbstractPartial.isSupported : if $i0 == -1 >>>>>>>> org.joda.time.base.AbstractPartial.isSupported : $z0 = 1
org.joda.time.base.AbstractPartial.isSupported : $z0 = 1 >>>>>>>> org.joda.time.base.AbstractPartial.isSupported : goto [?= return $z0]
org.joda.time.base.AbstractPartial.isSupported : goto [?= return $z0] >>>>>>>> org.joda.time.base.AbstractPartial.isSupported : return $z0
org.joda.time.base.AbstractPartial.isSupported : return $z0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : if $z0 == 0
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : if $z0 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $r6 = r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: org.joda.time.DateTimeFieldType iFieldType>
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $r6 = r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: org.joda.time.DateTimeFieldType iFieldType> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $i0 = interfaceinvoke r2.<org.joda.time.ReadablePartial: int get(org.joda.time.DateTimeFieldType)>($r6)
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $i0 = interfaceinvoke r2.<org.joda.time.ReadablePartial: int get(org.joda.time.DateTimeFieldType)>($r6) >>>>>>>> org.joda.time.base.AbstractPartial.get : $i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int indexOfSupported(org.joda.time.DateTimeFieldType)>(r1)
org.joda.time.base.AbstractPartial.get : $i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int indexOfSupported(org.joda.time.DateTimeFieldType)>(r1) >>>>>>>> org.joda.time.base.AbstractPartial.indexOfSupported : i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DateTimeFieldType)>(r1)
org.joda.time.base.AbstractPartial.indexOfSupported : i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DateTimeFieldType)>(r1) >>>>>>>> org.joda.time.base.AbstractPartial.indexOfSupported : if i0 != -1
org.joda.time.base.AbstractPartial.indexOfSupported : if i0 != -1 >>>>>>>> org.joda.time.base.AbstractPartial.indexOfSupported : return i0
org.joda.time.base.AbstractPartial.indexOfSupported : return i0 >>>>>>>> org.joda.time.base.AbstractPartial.get : $i1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int getValue(int)>($i0)
org.joda.time.base.AbstractPartial.get : $i1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int getValue(int)>($i0) >>>>>>>> org.joda.time.Partial.getValue : $r1 = r0.<org.joda.time.Partial: int[] iValues>
org.joda.time.Partial.getValue : $r1 = r0.<org.joda.time.Partial: int[] iValues> >>>>>>>> org.joda.time.Partial.getValue : $i1 = $r1[i0]
org.joda.time.Partial.getValue : $i1 = $r1[i0] >>>>>>>> org.joda.time.Partial.getValue : return $i1
org.joda.time.Partial.getValue : return $i1 >>>>>>>> org.joda.time.base.AbstractPartial.get : return $i1
org.joda.time.base.AbstractPartial.get : return $i1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $i1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: int iMinPrintedDigits>
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $i1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: int iMinPrintedDigits> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, $i0, $i1)
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, $i0, $i1) >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 0
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 0 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 10
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 10 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i1 <= 1
org.joda.time.format.FormatUtils.appendPaddedInteger : if i1 <= 1 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48)
org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48) >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : i1 = i1 + -1
org.joda.time.format.FormatUtils.appendPaddedInteger : i1 = i1 + -1 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : goto [?= (branch)]
org.joda.time.format.FormatUtils.appendPaddedInteger : goto [?= (branch)] >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i3 = i0 + 48
org.joda.time.format.FormatUtils.appendPaddedInteger : $i3 = i0 + 48 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $c4 = (char) $i3
org.joda.time.format.FormatUtils.appendPaddedInteger : $c4 = (char) $i3 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4)
org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4) >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : goto [?= return]
org.joda.time.format.FormatUtils.appendPaddedInteger : goto [?= return] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : goto [?= return]
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : goto [?= return] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber.printTo : $r5 = r0.<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: org.joda.time.DateTimeFieldType iFieldType>
org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber.printTo : $r5 = r0.<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: org.joda.time.DateTimeFieldType iFieldType> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber.printTo : $z0 = interfaceinvoke r2.<org.joda.time.ReadablePartial: boolean isSupported(org.joda.time.DateTimeFieldType)>($r5)
org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber.printTo : $z0 = interfaceinvoke r2.<org.joda.time.ReadablePartial: boolean isSupported(org.joda.time.DateTimeFieldType)>($r5) >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : i0 = i0 + 1
org.joda.time.base.AbstractPartial.indexOf : i0 = i0 + 1 >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : goto [?= (branch)]
org.joda.time.base.AbstractPartial.indexOf : goto [?= (branch)] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber.printTo : if $z0 == 0
org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber.printTo : if $z0 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber.printTo : $r6 = r0.<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: org.joda.time.DateTimeFieldType iFieldType>
org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber.printTo : $r6 = r0.<org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber: org.joda.time.DateTimeFieldType iFieldType> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber.printTo : $i0 = interfaceinvoke r2.<org.joda.time.ReadablePartial: int get(org.joda.time.DateTimeFieldType)>($r6)
org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber.printTo : $i0 = interfaceinvoke r2.<org.joda.time.ReadablePartial: int get(org.joda.time.DateTimeFieldType)>($r6) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber.printTo : staticinvoke <org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.StringBuffer,int)>(r1, $i0)
org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber.printTo : staticinvoke <org.joda.time.format.FormatUtils: void appendUnpaddedInteger(java.lang.StringBuffer,int)>(r1, $i0) >>>>>>>> org.joda.time.format.FormatUtils.appendUnpaddedInteger : if i0 >= 0
org.joda.time.format.FormatUtils.appendUnpaddedInteger : if i0 >= 0 >>>>>>>> org.joda.time.format.FormatUtils.appendUnpaddedInteger : if i0 >= 10
org.joda.time.format.FormatUtils.appendUnpaddedInteger : if i0 >= 10 >>>>>>>> org.joda.time.format.FormatUtils.appendUnpaddedInteger : $i2 = i0 + 48
org.joda.time.format.FormatUtils.appendUnpaddedInteger : $i2 = i0 + 48 >>>>>>>> org.joda.time.format.FormatUtils.appendUnpaddedInteger : $c3 = (char) $i2
org.joda.time.format.FormatUtils.appendUnpaddedInteger : $c3 = (char) $i2 >>>>>>>> org.joda.time.format.FormatUtils.appendUnpaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c3)
org.joda.time.format.FormatUtils.appendUnpaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c3) >>>>>>>> org.joda.time.format.FormatUtils.appendUnpaddedInteger : goto [?= return]
org.joda.time.format.FormatUtils.appendUnpaddedInteger : goto [?= return] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber.printTo : goto [?= return]
org.joda.time.format.DateTimeFormatterBuilder$UnpaddedNumber.printTo : goto [?= return] >>>>>>>> org.joda.time.format.DateTimeFormatter.print : $r5 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>()
org.joda.time.format.DateTimeFormatter.print : $r5 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> org.joda.time.format.DateTimeFormatter.print : return $r5
