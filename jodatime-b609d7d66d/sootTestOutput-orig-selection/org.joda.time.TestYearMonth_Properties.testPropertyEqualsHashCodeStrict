org.joda.time.DateTimeUtils.setCurrentMillisSystem : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>() >>>>>>>> org.joda.time.DateTimeUtils.checkPermission : r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>()
org.joda.time.DateTimeUtils.checkPermission : r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>() >>>>>>>> org.joda.time.DateTimeUtils.checkPermission : if r0 == null
org.joda.time.DateTimeUtils.checkPermission : if r0 == null >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisSystem : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$SystemMillisProvider SYSTEM_MILLIS_PROVIDER>
org.joda.time.DateTimeUtils.setCurrentMillisSystem : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$SystemMillisProvider SYSTEM_MILLIS_PROVIDER> >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisSystem : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0
org.joda.time.DateTimeUtils.setCurrentMillisSystem : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0 >>>>>>>> org.joda.time.DateTimeZone.setDefault : r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>()
org.joda.time.DateTimeZone.setDefault : r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>() >>>>>>>> org.joda.time.DateTimeZone.setDefault : if r1 == null
org.joda.time.DateTimeZone.setDefault : if r1 == null >>>>>>>> org.joda.time.DateTimeZone.setDefault : if r0 != null
org.joda.time.DateTimeZone.setDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.setDefault : $r6 = class "org/joda/time/DateTimeZone"
org.joda.time.DateTimeZone.setDefault : $r6 = class "org/joda/time/DateTimeZone" >>>>>>>> org.joda.time.DateTimeZone.setDefault : r3 = $r6
org.joda.time.DateTimeZone.setDefault : r3 = $r6 >>>>>>>> org.joda.time.DateTimeZone.setDefault : entermonitor $r6
org.joda.time.DateTimeZone.setDefault : entermonitor $r6 >>>>>>>> org.joda.time.DateTimeZone.setDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r0
org.joda.time.DateTimeZone.setDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r0 >>>>>>>> org.joda.time.DateTimeZone.setDefault : exitmonitor r3
org.joda.time.DateTimeZone.setDefault : exitmonitor r3 >>>>>>>> org.joda.time.DateTimeZone.setDefault : goto [?= return]
org.joda.time.DateTimeZone.setDefault : goto [?= return] >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>()
org.joda.time.DateTimeUtils.setCurrentMillisFixed : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>() >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : $r0 = new org.joda.time.DateTimeUtils$FixedMillisProvider
org.joda.time.DateTimeUtils.setCurrentMillisFixed : $r0 = new org.joda.time.DateTimeUtils$FixedMillisProvider >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : specialinvoke $r0.<org.joda.time.DateTimeUtils$FixedMillisProvider: void <init>(long)>(l0)
org.joda.time.DateTimeUtils.setCurrentMillisFixed : specialinvoke $r0.<org.joda.time.DateTimeUtils$FixedMillisProvider: void <init>(long)>(l0) >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0
org.joda.time.DateTimeUtils.setCurrentMillisFixed : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0 >>>>>>>> org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> >>>>>>>> org.joda.time.DateTimeZone.getDefault : if r0 != null
org.joda.time.DateTimeZone.getDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.DateTimeZone.getDefault : return r0 >>>>>>>> org.joda.time.chrono.StrictChronology.getInstance : if r0 != null
org.joda.time.chrono.StrictChronology.getInstance : if r0 != null >>>>>>>> org.joda.time.chrono.StrictChronology.getInstance : $r2 = new org.joda.time.chrono.StrictChronology
org.joda.time.chrono.StrictChronology.getInstance : $r2 = new org.joda.time.chrono.StrictChronology >>>>>>>> org.joda.time.chrono.StrictChronology.getInstance : specialinvoke $r2.<org.joda.time.chrono.StrictChronology: void <init>(org.joda.time.Chronology)>(r0)
org.joda.time.chrono.StrictChronology.getInstance : specialinvoke $r2.<org.joda.time.chrono.StrictChronology: void <init>(org.joda.time.Chronology)>(r0) >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r1 = new org.joda.time.chrono.AssembledChronology$Fields
org.joda.time.chrono.AssembledChronology.setFields : $r1 = new org.joda.time.chrono.AssembledChronology$Fields >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : specialinvoke $r1.<org.joda.time.chrono.AssembledChronology$Fields: void <init>()>()
org.joda.time.chrono.AssembledChronology.setFields : specialinvoke $r1.<org.joda.time.chrono.AssembledChronology$Fields: void <init>()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r2 = $r1
org.joda.time.chrono.AssembledChronology.setFields : r2 = $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r4 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.setFields : $r4 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r4 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r4 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r5 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.setFields : $r5 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : virtualinvoke r2.<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>($r5)
org.joda.time.chrono.AssembledChronology.setFields : virtualinvoke r2.<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>($r5) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField millis()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField millis()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.millis : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMillis>
org.joda.time.chrono.AssembledChronology.millis : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMillis> >>>>>>>> org.joda.time.chrono.AssembledChronology.millis : return $r1
org.joda.time.chrono.AssembledChronology.millis : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r2 = $r3
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r2 = $r3 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z0 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r3)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z0 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r3) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.isSupported : if r0 != null
org.joda.time.chrono.AssembledChronology$Fields.isSupported : if r0 != null >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.isSupported : $z0 = virtualinvoke r0.<org.joda.time.DurationField: boolean isSupported()>()
org.joda.time.chrono.AssembledChronology$Fields.isSupported : $z0 = virtualinvoke r0.<org.joda.time.DurationField: boolean isSupported()>() >>>>>>>> org.joda.time.field.BaseDurationField.isSupported : return 1
org.joda.time.field.BaseDurationField.isSupported : return 1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.isSupported : return $z0
org.joda.time.chrono.AssembledChronology$Fields.isSupported : return $z0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z0 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z0 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField millis> = r2
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField millis> = r2 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField seconds()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField seconds()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.seconds : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iSeconds>
org.joda.time.chrono.AssembledChronology.seconds : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iSeconds> >>>>>>>> org.joda.time.chrono.AssembledChronology.seconds : return $r1
org.joda.time.chrono.AssembledChronology.seconds : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r5 = $r4
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r5 = $r4 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z1 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r4)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z1 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r4) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z1 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z1 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField seconds> = r5
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField seconds> = r5 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r6 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField minutes()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r6 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField minutes()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.minutes : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMinutes>
org.joda.time.chrono.AssembledChronology.minutes : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMinutes> >>>>>>>> org.joda.time.chrono.AssembledChronology.minutes : return $r1
org.joda.time.chrono.AssembledChronology.minutes : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r7 = $r6
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r7 = $r6 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z2 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r6)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z2 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r6) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z2 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z2 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField minutes> = r7
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField minutes> = r7 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r8 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField hours()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r8 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField hours()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.hours : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHours>
org.joda.time.chrono.AssembledChronology.hours : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHours> >>>>>>>> org.joda.time.chrono.AssembledChronology.hours : return $r1
org.joda.time.chrono.AssembledChronology.hours : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r9 = $r8
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r9 = $r8 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z3 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r8)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z3 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r8) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z3 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z3 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField hours> = r9
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField hours> = r9 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r10 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField halfdays()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r10 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField halfdays()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.halfdays : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHalfdays>
org.joda.time.chrono.AssembledChronology.halfdays : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHalfdays> >>>>>>>> org.joda.time.chrono.AssembledChronology.halfdays : return $r1
org.joda.time.chrono.AssembledChronology.halfdays : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r11 = $r10
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r11 = $r10 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z4 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r10)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z4 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r10) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z4 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z4 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField halfdays> = r11
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField halfdays> = r11 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r12 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField days()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r12 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField days()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.days : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays>
org.joda.time.chrono.AssembledChronology.days : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays> >>>>>>>> org.joda.time.chrono.AssembledChronology.days : return $r1
org.joda.time.chrono.AssembledChronology.days : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r13 = $r12
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r13 = $r12 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z5 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r12)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z5 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r12) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z5 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z5 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days> = r13
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days> = r13 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r14 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField weeks()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r14 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField weeks()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.weeks : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeeks>
org.joda.time.chrono.AssembledChronology.weeks : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeeks> >>>>>>>> org.joda.time.chrono.AssembledChronology.weeks : return $r1
org.joda.time.chrono.AssembledChronology.weeks : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r15 = $r14
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r15 = $r14 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z6 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r14)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z6 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r14) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z6 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z6 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weeks> = r15
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weeks> = r15 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r16 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField weekyears()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r16 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField weekyears()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.weekyears : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeekyears>
org.joda.time.chrono.AssembledChronology.weekyears : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeekyears> >>>>>>>> org.joda.time.chrono.AssembledChronology.weekyears : return $r1
org.joda.time.chrono.AssembledChronology.weekyears : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r17 = $r16
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r17 = $r16 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z7 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r16)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z7 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r16) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z7 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z7 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears> = r17
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears> = r17 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r18 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField months()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r18 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField months()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.months : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMonths>
org.joda.time.chrono.AssembledChronology.months : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMonths> >>>>>>>> org.joda.time.chrono.AssembledChronology.months : return $r1
org.joda.time.chrono.AssembledChronology.months : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r19 = $r18
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r19 = $r18 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z8 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r18)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z8 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r18) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z8 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z8 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months> = r19
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months> = r19 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r20 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField years()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r20 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField years()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.years : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iYears>
org.joda.time.chrono.AssembledChronology.years : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iYears> >>>>>>>> org.joda.time.chrono.AssembledChronology.years : return $r1
org.joda.time.chrono.AssembledChronology.years : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r21 = $r20
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r21 = $r20 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z9 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r20)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z9 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r20) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z9 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z9 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years> = r21
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years> = r21 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r22 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField centuries()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r22 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField centuries()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.centuries : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iCenturies>
org.joda.time.chrono.AssembledChronology.centuries : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iCenturies> >>>>>>>> org.joda.time.chrono.AssembledChronology.centuries : return $r1
org.joda.time.chrono.AssembledChronology.centuries : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r23 = $r22
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r23 = $r22 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z10 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r22)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z10 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r22) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z10 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z10 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries> = r23
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries> = r23 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r24 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField eras()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r24 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField eras()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.eras : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iEras>
org.joda.time.chrono.AssembledChronology.eras : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iEras> >>>>>>>> org.joda.time.chrono.AssembledChronology.eras : return $r1
org.joda.time.chrono.AssembledChronology.eras : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r25 = $r24
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r25 = $r24 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z11 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r24)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z11 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r24) >>>>>>>> org.joda.time.field.UnsupportedDurationField.isSupported : return 0
org.joda.time.field.UnsupportedDurationField.isSupported : return 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z11 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z11 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r26 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r26 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.millisOfSecond : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfSecond>
org.joda.time.chrono.AssembledChronology.millisOfSecond : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfSecond> >>>>>>>> org.joda.time.chrono.AssembledChronology.millisOfSecond : return $r1
org.joda.time.chrono.AssembledChronology.millisOfSecond : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r27 = $r26
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r27 = $r26 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z12 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r26)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z12 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r26) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.isSupported : $z0 = virtualinvoke r0.<org.joda.time.DateTimeField: boolean isSupported()>()
org.joda.time.chrono.AssembledChronology$Fields.isSupported : $z0 = virtualinvoke r0.<org.joda.time.DateTimeField: boolean isSupported()>() >>>>>>>> org.joda.time.field.BaseDateTimeField.isSupported : return 1
org.joda.time.field.BaseDateTimeField.isSupported : return 1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z12 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z12 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond> = r27
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond> = r27 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r28 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r28 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.millisOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay>
org.joda.time.chrono.AssembledChronology.millisOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.millisOfDay : return $r1
org.joda.time.chrono.AssembledChronology.millisOfDay : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r29 = $r28
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r29 = $r28 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z13 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r28)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z13 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r28) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z13 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z13 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay> = r29
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay> = r29 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r30 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r30 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.secondOfMinute : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfMinute>
org.joda.time.chrono.AssembledChronology.secondOfMinute : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfMinute> >>>>>>>> org.joda.time.chrono.AssembledChronology.secondOfMinute : return $r1
org.joda.time.chrono.AssembledChronology.secondOfMinute : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r31 = $r30
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r31 = $r30 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z14 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r30)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z14 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r30) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z14 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z14 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute> = r31
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute> = r31 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r32 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfDay()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r32 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfDay()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.secondOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfDay>
org.joda.time.chrono.AssembledChronology.secondOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.secondOfDay : return $r1
org.joda.time.chrono.AssembledChronology.secondOfDay : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r33 = $r32
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r33 = $r32 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z15 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r32)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z15 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r32) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z15 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z15 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay> = r33
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay> = r33 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r34 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r34 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.minuteOfHour : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfHour>
org.joda.time.chrono.AssembledChronology.minuteOfHour : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfHour> >>>>>>>> org.joda.time.chrono.AssembledChronology.minuteOfHour : return $r1
org.joda.time.chrono.AssembledChronology.minuteOfHour : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r35 = $r34
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r35 = $r34 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z16 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r34)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z16 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r34) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z16 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z16 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour> = r35
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour> = r35 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r36 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfDay()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r36 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfDay()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.minuteOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfDay>
org.joda.time.chrono.AssembledChronology.minuteOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.minuteOfDay : return $r1
org.joda.time.chrono.AssembledChronology.minuteOfDay : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r37 = $r36
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r37 = $r36 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z17 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r36)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z17 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r36) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z17 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z17 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay> = r37
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay> = r37 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r38 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r38 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.hourOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay>
org.joda.time.chrono.AssembledChronology.hourOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.hourOfDay : return $r1
org.joda.time.chrono.AssembledChronology.hourOfDay : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r39 = $r38
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r39 = $r38 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z18 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r38)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z18 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r38) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z18 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z18 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay> = r39
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay> = r39 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r40 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField clockhourOfDay()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r40 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField clockhourOfDay()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.clockhourOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfDay>
org.joda.time.chrono.AssembledChronology.clockhourOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.clockhourOfDay : return $r1
org.joda.time.chrono.AssembledChronology.clockhourOfDay : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r41 = $r40
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r41 = $r40 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z19 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r40)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z19 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r40) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z19 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z19 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay> = r41
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay> = r41 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r42 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfHalfday()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r42 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfHalfday()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.hourOfHalfday : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfHalfday>
org.joda.time.chrono.AssembledChronology.hourOfHalfday : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfHalfday> >>>>>>>> org.joda.time.chrono.AssembledChronology.hourOfHalfday : return $r1
org.joda.time.chrono.AssembledChronology.hourOfHalfday : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r43 = $r42
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r43 = $r42 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z20 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r42)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z20 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r42) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z20 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z20 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday> = r43
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday> = r43 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r44 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField clockhourOfHalfday()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r44 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField clockhourOfHalfday()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.clockhourOfHalfday : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfHalfday>
org.joda.time.chrono.AssembledChronology.clockhourOfHalfday : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfHalfday> >>>>>>>> org.joda.time.chrono.AssembledChronology.clockhourOfHalfday : return $r1
org.joda.time.chrono.AssembledChronology.clockhourOfHalfday : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r45 = $r44
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r45 = $r44 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z21 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r44)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z21 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r44) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z21 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z21 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday> = r45
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday> = r45 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r46 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField halfdayOfDay()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r46 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField halfdayOfDay()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.halfdayOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHalfdayOfDay>
org.joda.time.chrono.AssembledChronology.halfdayOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHalfdayOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.halfdayOfDay : return $r1
org.joda.time.chrono.AssembledChronology.halfdayOfDay : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r47 = $r46
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r47 = $r46 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z22 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r46)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z22 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r46) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z22 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z22 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay> = r47
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay> = r47 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r48 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r48 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfWeek : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfWeek>
org.joda.time.chrono.AssembledChronology.dayOfWeek : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfWeek> >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfWeek : return $r1
org.joda.time.chrono.AssembledChronology.dayOfWeek : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r49 = $r48
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r49 = $r48 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z23 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r48)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z23 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r48) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z23 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z23 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek> = r49
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek> = r49 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r50 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r50 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfMonth : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth>
org.joda.time.chrono.AssembledChronology.dayOfMonth : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth> >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfMonth : return $r1
org.joda.time.chrono.AssembledChronology.dayOfMonth : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r51 = $r50
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r51 = $r50 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z24 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r50)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z24 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r50) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z24 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z24 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth> = r51
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth> = r51 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r52 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfYear()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r52 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfYear()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfYear>
org.joda.time.chrono.AssembledChronology.dayOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfYear : return $r1
org.joda.time.chrono.AssembledChronology.dayOfYear : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r53 = $r52
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r53 = $r52 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z25 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r52)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z25 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r52) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z25 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z25 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear> = r53
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear> = r53 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r54 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekOfWeekyear()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r54 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekOfWeekyear()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.weekOfWeekyear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekOfWeekyear>
org.joda.time.chrono.AssembledChronology.weekOfWeekyear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekOfWeekyear> >>>>>>>> org.joda.time.chrono.AssembledChronology.weekOfWeekyear : return $r1
org.joda.time.chrono.AssembledChronology.weekOfWeekyear : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r55 = $r54
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r55 = $r54 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z26 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r54)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z26 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r54) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z26 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z26 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear> = r55
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear> = r55 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r56 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekyear()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r56 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekyear()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.weekyear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyear>
org.joda.time.chrono.AssembledChronology.weekyear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyear> >>>>>>>> org.joda.time.chrono.AssembledChronology.weekyear : return $r1
org.joda.time.chrono.AssembledChronology.weekyear : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r57 = $r56
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r57 = $r56 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z27 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r56)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z27 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r56) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z27 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z27 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> = r57
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> = r57 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r58 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekyearOfCentury()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r58 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekyearOfCentury()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.weekyearOfCentury : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyearOfCentury>
org.joda.time.chrono.AssembledChronology.weekyearOfCentury : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyearOfCentury> >>>>>>>> org.joda.time.chrono.AssembledChronology.weekyearOfCentury : return $r1
org.joda.time.chrono.AssembledChronology.weekyearOfCentury : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r59 = $r58
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r59 = $r58 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z28 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r58)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z28 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r58) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z28 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z28 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> = r59
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> = r59 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r60 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r60 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.monthOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear>
org.joda.time.chrono.AssembledChronology.monthOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.monthOfYear : return $r1
org.joda.time.chrono.AssembledChronology.monthOfYear : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r61 = $r60
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r61 = $r60 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z29 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r60)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z29 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r60) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z29 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z29 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> = r61
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> = r61 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r62 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r62 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.year : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear>
org.joda.time.chrono.AssembledChronology.year : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.year : return $r1
org.joda.time.chrono.AssembledChronology.year : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r63 = $r62
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r63 = $r62 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z30 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r62)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z30 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r62) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z30 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z30 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> = r63
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> = r63 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r64 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField yearOfEra()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r64 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField yearOfEra()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.yearOfEra : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfEra>
org.joda.time.chrono.AssembledChronology.yearOfEra : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfEra> >>>>>>>> org.joda.time.chrono.AssembledChronology.yearOfEra : return $r1
org.joda.time.chrono.AssembledChronology.yearOfEra : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r65 = $r64
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r65 = $r64 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z31 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r64)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z31 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r64) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z31 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z31 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> = r65
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> = r65 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r66 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField yearOfCentury()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r66 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField yearOfCentury()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.yearOfCentury : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfCentury>
org.joda.time.chrono.AssembledChronology.yearOfCentury : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfCentury> >>>>>>>> org.joda.time.chrono.AssembledChronology.yearOfCentury : return $r1
org.joda.time.chrono.AssembledChronology.yearOfCentury : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r67 = $r66
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r67 = $r66 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z32 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r66)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z32 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r66) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z32 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z32 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> = r67
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> = r67 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r68 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField centuryOfEra()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r68 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField centuryOfEra()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.centuryOfEra : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iCenturyOfEra>
org.joda.time.chrono.AssembledChronology.centuryOfEra : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iCenturyOfEra> >>>>>>>> org.joda.time.chrono.AssembledChronology.centuryOfEra : return $r1
org.joda.time.chrono.AssembledChronology.centuryOfEra : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r69 = $r68
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r69 = $r68 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z33 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r68)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z33 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r68) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z33 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z33 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> = r69
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> = r69 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r70 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField era()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r70 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField era()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.era : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iEra>
org.joda.time.chrono.AssembledChronology.era : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iEra> >>>>>>>> org.joda.time.chrono.AssembledChronology.era : return $r1
org.joda.time.chrono.AssembledChronology.era : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r71 = $r70
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r71 = $r70 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z34 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r70)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z34 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r70) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z34 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z34 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> = r71
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> = r71 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : virtualinvoke r0.<org.joda.time.chrono.AssembledChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>(r2)
org.joda.time.chrono.AssembledChronology.setFields : virtualinvoke r0.<org.joda.time.chrono.AssembledChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>(r2) >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : $r2 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year>
org.joda.time.chrono.StrictChronology.assemble : $r2 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : $r3 = staticinvoke <org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r2)
org.joda.time.chrono.StrictChronology.assemble : $r3 = staticinvoke <org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r2) >>>>>>>> org.joda.time.chrono.StrictChronology.convertField : $r1 = staticinvoke <org.joda.time.field.StrictDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField)>(r0)
org.joda.time.chrono.StrictChronology.convertField : $r1 = staticinvoke <org.joda.time.field.StrictDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField)>(r0) >>>>>>>> org.joda.time.field.StrictDateTimeField.getInstance : if r0 != null
org.joda.time.field.StrictDateTimeField.getInstance : if r0 != null >>>>>>>> org.joda.time.field.StrictDateTimeField.getInstance : $z0 = r0 instanceof org.joda.time.field.LenientDateTimeField
org.joda.time.field.StrictDateTimeField.getInstance : $z0 = r0 instanceof org.joda.time.field.LenientDateTimeField >>>>>>>> org.joda.time.field.StrictDateTimeField.getInstance : if $z0 == 0
org.joda.time.field.StrictDateTimeField.getInstance : if $z0 == 0 >>>>>>>> org.joda.time.field.StrictDateTimeField.getInstance : $z1 = virtualinvoke r0.<org.joda.time.DateTimeField: boolean isLenient()>()
org.joda.time.field.StrictDateTimeField.getInstance : $z1 = virtualinvoke r0.<org.joda.time.DateTimeField: boolean isLenient()>() >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.isLenient : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.isLenient : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.isLenient : $z0 = virtualinvoke $r1.<org.joda.time.DateTimeField: boolean isLenient()>()
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.isLenient : $z0 = virtualinvoke $r1.<org.joda.time.DateTimeField: boolean isLenient()>() >>>>>>>> org.joda.time.field.DecoratedDateTimeField.isLenient : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DecoratedDateTimeField.isLenient : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.field.DecoratedDateTimeField.isLenient : $z0 = virtualinvoke $r1.<org.joda.time.DateTimeField: boolean isLenient()>()
org.joda.time.field.DecoratedDateTimeField.isLenient : $z0 = virtualinvoke $r1.<org.joda.time.DateTimeField: boolean isLenient()>() >>>>>>>> org.joda.time.field.DelegatedDateTimeField.isLenient : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DelegatedDateTimeField.isLenient : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.field.DelegatedDateTimeField.isLenient : $z0 = virtualinvoke $r1.<org.joda.time.DateTimeField: boolean isLenient()>()
org.joda.time.field.DelegatedDateTimeField.isLenient : $z0 = virtualinvoke $r1.<org.joda.time.DateTimeField: boolean isLenient()>() >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.isLenient : return 0
org.joda.time.chrono.BasicYearDateTimeField.isLenient : return 0 >>>>>>>> org.joda.time.field.DelegatedDateTimeField.isLenient : return $z0
org.joda.time.field.DelegatedDateTimeField.isLenient : return $z0 >>>>>>>> org.joda.time.field.DecoratedDateTimeField.isLenient : return $z0
org.joda.time.field.DecoratedDateTimeField.isLenient : return $z0 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.isLenient : return $z0
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.isLenient : return $z0 >>>>>>>> org.joda.time.field.StrictDateTimeField.getInstance : if $z1 != 0
org.joda.time.field.StrictDateTimeField.getInstance : if $z1 != 0 >>>>>>>> org.joda.time.field.StrictDateTimeField.getInstance : return r0
org.joda.time.field.StrictDateTimeField.getInstance : return r0 >>>>>>>> org.joda.time.chrono.StrictChronology.convertField : return $r1
org.joda.time.chrono.StrictChronology.convertField : return $r1 >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> = $r3
org.joda.time.chrono.StrictChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> = $r3 >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : $r4 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra>
org.joda.time.chrono.StrictChronology.assemble : $r4 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : $r5 = staticinvoke <org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r4)
org.joda.time.chrono.StrictChronology.assemble : $r5 = staticinvoke <org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r4) >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> = $r5
org.joda.time.chrono.StrictChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> = $r5 >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : $r6 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury>
org.joda.time.chrono.StrictChronology.assemble : $r6 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : $r7 = staticinvoke <org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r6)
org.joda.time.chrono.StrictChronology.assemble : $r7 = staticinvoke <org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r6) >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> = $r7
org.joda.time.chrono.StrictChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> = $r7 >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : $r8 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra>
org.joda.time.chrono.StrictChronology.assemble : $r8 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : $r9 = staticinvoke <org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r8)
org.joda.time.chrono.StrictChronology.assemble : $r9 = staticinvoke <org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r8) >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> = $r9
org.joda.time.chrono.StrictChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> = $r9 >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : $r10 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era>
org.joda.time.chrono.StrictChronology.assemble : $r10 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : $r11 = staticinvoke <org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r10)
org.joda.time.chrono.StrictChronology.assemble : $r11 = staticinvoke <org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r10) >>>>>>>> org.joda.time.chrono.BasicSingleEraDateTimeField.isLenient : return 0
org.joda.time.chrono.BasicSingleEraDateTimeField.isLenient : return 0 >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> = $r11
org.joda.time.chrono.StrictChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> = $r11 >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : $r12 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek>
org.joda.time.chrono.StrictChronology.assemble : $r12 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek> >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : $r13 = staticinvoke <org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r12)
org.joda.time.chrono.StrictChronology.assemble : $r13 = staticinvoke <org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r12) >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.isLenient : return 0
org.joda.time.field.PreciseDurationDateTimeField.isLenient : return 0 >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek> = $r13
org.joda.time.chrono.StrictChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek> = $r13 >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : $r14 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth>
org.joda.time.chrono.StrictChronology.assemble : $r14 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth> >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : $r15 = staticinvoke <org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r14)
org.joda.time.chrono.StrictChronology.assemble : $r15 = staticinvoke <org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r14) >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth> = $r15
org.joda.time.chrono.StrictChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth> = $r15 >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : $r16 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear>
org.joda.time.chrono.StrictChronology.assemble : $r16 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear> >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : $r17 = staticinvoke <org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r16)
org.joda.time.chrono.StrictChronology.assemble : $r17 = staticinvoke <org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r16) >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear> = $r17
org.joda.time.chrono.StrictChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear> = $r17 >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : $r18 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear>
org.joda.time.chrono.StrictChronology.assemble : $r18 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : $r19 = staticinvoke <org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r18)
org.joda.time.chrono.StrictChronology.assemble : $r19 = staticinvoke <org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r18) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.isLenient : return 0
org.joda.time.chrono.BasicMonthOfYearDateTimeField.isLenient : return 0 >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> = $r19
org.joda.time.chrono.StrictChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> = $r19 >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : $r20 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear>
org.joda.time.chrono.StrictChronology.assemble : $r20 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear> >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : $r21 = staticinvoke <org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r20)
org.joda.time.chrono.StrictChronology.assemble : $r21 = staticinvoke <org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r20) >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear> = $r21
org.joda.time.chrono.StrictChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear> = $r21 >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : $r22 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear>
org.joda.time.chrono.StrictChronology.assemble : $r22 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : $r23 = staticinvoke <org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r22)
org.joda.time.chrono.StrictChronology.assemble : $r23 = staticinvoke <org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r22) >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.isLenient : return 0
org.joda.time.chrono.BasicWeekyearDateTimeField.isLenient : return 0 >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> = $r23
org.joda.time.chrono.StrictChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> = $r23 >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : $r24 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury>
org.joda.time.chrono.StrictChronology.assemble : $r24 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : $r25 = staticinvoke <org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r24)
org.joda.time.chrono.StrictChronology.assemble : $r25 = staticinvoke <org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r24) >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> = $r25
org.joda.time.chrono.StrictChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> = $r25 >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : $r26 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond>
org.joda.time.chrono.StrictChronology.assemble : $r26 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond> >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : $r27 = staticinvoke <org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r26)
org.joda.time.chrono.StrictChronology.assemble : $r27 = staticinvoke <org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r26) >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond> = $r27
org.joda.time.chrono.StrictChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond> = $r27 >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : $r28 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay>
org.joda.time.chrono.StrictChronology.assemble : $r28 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay> >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : $r29 = staticinvoke <org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r28)
org.joda.time.chrono.StrictChronology.assemble : $r29 = staticinvoke <org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r28) >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay> = $r29
org.joda.time.chrono.StrictChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay> = $r29 >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : $r30 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute>
org.joda.time.chrono.StrictChronology.assemble : $r30 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute> >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : $r31 = staticinvoke <org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r30)
org.joda.time.chrono.StrictChronology.assemble : $r31 = staticinvoke <org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r30) >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute> = $r31
org.joda.time.chrono.StrictChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute> = $r31 >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : $r32 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay>
org.joda.time.chrono.StrictChronology.assemble : $r32 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay> >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : $r33 = staticinvoke <org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r32)
org.joda.time.chrono.StrictChronology.assemble : $r33 = staticinvoke <org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r32) >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay> = $r33
org.joda.time.chrono.StrictChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay> = $r33 >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : $r34 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour>
org.joda.time.chrono.StrictChronology.assemble : $r34 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour> >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : $r35 = staticinvoke <org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r34)
org.joda.time.chrono.StrictChronology.assemble : $r35 = staticinvoke <org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r34) >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour> = $r35
org.joda.time.chrono.StrictChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour> = $r35 >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : $r36 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay>
org.joda.time.chrono.StrictChronology.assemble : $r36 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay> >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : $r37 = staticinvoke <org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r36)
org.joda.time.chrono.StrictChronology.assemble : $r37 = staticinvoke <org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r36) >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay> = $r37
org.joda.time.chrono.StrictChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay> = $r37 >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : $r38 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay>
org.joda.time.chrono.StrictChronology.assemble : $r38 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay> >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : $r39 = staticinvoke <org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r38)
org.joda.time.chrono.StrictChronology.assemble : $r39 = staticinvoke <org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r38) >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay> = $r39
org.joda.time.chrono.StrictChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay> = $r39 >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : $r40 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday>
org.joda.time.chrono.StrictChronology.assemble : $r40 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday> >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : $r41 = staticinvoke <org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r40)
org.joda.time.chrono.StrictChronology.assemble : $r41 = staticinvoke <org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r40) >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday> = $r41
org.joda.time.chrono.StrictChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday> = $r41 >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : $r42 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay>
org.joda.time.chrono.StrictChronology.assemble : $r42 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay> >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : $r43 = staticinvoke <org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r42)
org.joda.time.chrono.StrictChronology.assemble : $r43 = staticinvoke <org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r42) >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay> = $r43
org.joda.time.chrono.StrictChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay> = $r43 >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : $r44 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday>
org.joda.time.chrono.StrictChronology.assemble : $r44 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday> >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : $r45 = staticinvoke <org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r44)
org.joda.time.chrono.StrictChronology.assemble : $r45 = staticinvoke <org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r44) >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday> = $r45
org.joda.time.chrono.StrictChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday> = $r45 >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : $r46 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay>
org.joda.time.chrono.StrictChronology.assemble : $r46 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay> >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : $r47 = staticinvoke <org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r46)
org.joda.time.chrono.StrictChronology.assemble : $r47 = staticinvoke <org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r46) >>>>>>>> org.joda.time.chrono.StrictChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay> = $r47
org.joda.time.chrono.StrictChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay> = $r47 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r7 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField millis>
org.joda.time.chrono.AssembledChronology.setFields : $r7 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField millis> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r3 = $r7
org.joda.time.chrono.AssembledChronology.setFields : r3 = $r7 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r7 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r7 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r8 = r3
org.joda.time.chrono.AssembledChronology.setFields : $r8 = r3 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMillis> = $r8]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMillis> = $r8] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMillis> = $r8
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMillis> = $r8 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r10 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField seconds>
org.joda.time.chrono.AssembledChronology.setFields : $r10 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField seconds> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r11 = $r10
org.joda.time.chrono.AssembledChronology.setFields : r11 = $r10 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r10 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r10 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r12 = r11
org.joda.time.chrono.AssembledChronology.setFields : $r12 = r11 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iSeconds> = $r12]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iSeconds> = $r12] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iSeconds> = $r12
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iSeconds> = $r12 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r14 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField minutes>
org.joda.time.chrono.AssembledChronology.setFields : $r14 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField minutes> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r15 = $r14
org.joda.time.chrono.AssembledChronology.setFields : r15 = $r14 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r14 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r14 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r16 = r15
org.joda.time.chrono.AssembledChronology.setFields : $r16 = r15 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMinutes> = $r16]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMinutes> = $r16] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMinutes> = $r16
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMinutes> = $r16 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r18 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField hours>
org.joda.time.chrono.AssembledChronology.setFields : $r18 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField hours> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r19 = $r18
org.joda.time.chrono.AssembledChronology.setFields : r19 = $r18 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r18 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r18 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r20 = r19
org.joda.time.chrono.AssembledChronology.setFields : $r20 = r19 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHours> = $r20]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHours> = $r20] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHours> = $r20
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHours> = $r20 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r22 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField halfdays>
org.joda.time.chrono.AssembledChronology.setFields : $r22 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField halfdays> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r23 = $r22
org.joda.time.chrono.AssembledChronology.setFields : r23 = $r22 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r22 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r22 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r24 = r23
org.joda.time.chrono.AssembledChronology.setFields : $r24 = r23 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHalfdays> = $r24]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHalfdays> = $r24] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHalfdays> = $r24
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHalfdays> = $r24 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r26 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days>
org.joda.time.chrono.AssembledChronology.setFields : $r26 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r27 = $r26
org.joda.time.chrono.AssembledChronology.setFields : r27 = $r26 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r26 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r26 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r28 = r27
org.joda.time.chrono.AssembledChronology.setFields : $r28 = r27 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays> = $r28]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays> = $r28] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays> = $r28
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays> = $r28 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r30 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weeks>
org.joda.time.chrono.AssembledChronology.setFields : $r30 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weeks> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r31 = $r30
org.joda.time.chrono.AssembledChronology.setFields : r31 = $r30 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r30 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r30 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r32 = r31
org.joda.time.chrono.AssembledChronology.setFields : $r32 = r31 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeeks> = $r32]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeeks> = $r32] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeeks> = $r32
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeeks> = $r32 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r34 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears>
org.joda.time.chrono.AssembledChronology.setFields : $r34 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r35 = $r34
org.joda.time.chrono.AssembledChronology.setFields : r35 = $r34 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r34 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r34 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r36 = r35
org.joda.time.chrono.AssembledChronology.setFields : $r36 = r35 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeekyears> = $r36]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeekyears> = $r36] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeekyears> = $r36
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeekyears> = $r36 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r38 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months>
org.joda.time.chrono.AssembledChronology.setFields : $r38 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r39 = $r38
org.joda.time.chrono.AssembledChronology.setFields : r39 = $r38 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r38 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r38 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r40 = r39
org.joda.time.chrono.AssembledChronology.setFields : $r40 = r39 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMonths> = $r40]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMonths> = $r40] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMonths> = $r40
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMonths> = $r40 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r42 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years>
org.joda.time.chrono.AssembledChronology.setFields : $r42 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r43 = $r42
org.joda.time.chrono.AssembledChronology.setFields : r43 = $r42 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r42 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r42 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r44 = r43
org.joda.time.chrono.AssembledChronology.setFields : $r44 = r43 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iYears> = $r44]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iYears> = $r44] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iYears> = $r44
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iYears> = $r44 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r46 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries>
org.joda.time.chrono.AssembledChronology.setFields : $r46 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r47 = $r46
org.joda.time.chrono.AssembledChronology.setFields : r47 = $r46 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r46 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r46 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r48 = r47
org.joda.time.chrono.AssembledChronology.setFields : $r48 = r47 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iCenturies> = $r48]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iCenturies> = $r48] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iCenturies> = $r48
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iCenturies> = $r48 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r50 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField eras>
org.joda.time.chrono.AssembledChronology.setFields : $r50 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField eras> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r51 = $r50
org.joda.time.chrono.AssembledChronology.setFields : r51 = $r50 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r50 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r50 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r52 = specialinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField eras()>()
org.joda.time.chrono.AssembledChronology.setFields : $r52 = specialinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField eras()>() >>>>>>>> org.joda.time.chrono.BaseChronology.eras : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType eras()>()
org.joda.time.chrono.BaseChronology.eras : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType eras()>() >>>>>>>> org.joda.time.DurationFieldType.eras : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType ERAS_TYPE>
org.joda.time.DurationFieldType.eras : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType ERAS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.eras : return $r0
org.joda.time.DurationFieldType.eras : return $r0 >>>>>>>> org.joda.time.chrono.BaseChronology.eras : $r2 = staticinvoke <org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>($r1)
org.joda.time.chrono.BaseChronology.eras : $r2 = staticinvoke <org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>($r1) >>>>>>>> org.joda.time.field.UnsupportedDurationField.getInstance : $r1 = <org.joda.time.field.UnsupportedDurationField: java.util.HashMap cCache>
org.joda.time.field.UnsupportedDurationField.getInstance : $r1 = <org.joda.time.field.UnsupportedDurationField: java.util.HashMap cCache> >>>>>>>> org.joda.time.field.UnsupportedDurationField.getInstance : if $r1 != null
org.joda.time.field.UnsupportedDurationField.getInstance : if $r1 != null >>>>>>>> org.joda.time.field.UnsupportedDurationField.getInstance : $r4 = <org.joda.time.field.UnsupportedDurationField: java.util.HashMap cCache>
org.joda.time.field.UnsupportedDurationField.getInstance : $r4 = <org.joda.time.field.UnsupportedDurationField: java.util.HashMap cCache> >>>>>>>> org.joda.time.field.UnsupportedDurationField.getInstance : $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0)
org.joda.time.field.UnsupportedDurationField.getInstance : $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.hashCode : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal>
org.joda.time.DurationFieldType$StandardDurationFieldType.hashCode : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal> >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.hashCode : return $b0
org.joda.time.DurationFieldType$StandardDurationFieldType.hashCode : return $b0 >>>>>>>> org.joda.time.field.UnsupportedDurationField.getInstance : r2 = (org.joda.time.field.UnsupportedDurationField) $r5
org.joda.time.field.UnsupportedDurationField.getInstance : r2 = (org.joda.time.field.UnsupportedDurationField) $r5 >>>>>>>> org.joda.time.field.UnsupportedDurationField.getInstance : if r2 != null
org.joda.time.field.UnsupportedDurationField.getInstance : if r2 != null >>>>>>>> org.joda.time.field.UnsupportedDurationField.getInstance : return r2
org.joda.time.field.UnsupportedDurationField.getInstance : return r2 >>>>>>>> org.joda.time.chrono.BaseChronology.eras : return $r2
org.joda.time.chrono.BaseChronology.eras : return $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iEras> = $r52
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iEras> = $r52 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r54 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond>
org.joda.time.chrono.AssembledChronology.setFields : $r54 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r55 = $r54
org.joda.time.chrono.AssembledChronology.setFields : r55 = $r54 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r54 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r54 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r56 = r55
org.joda.time.chrono.AssembledChronology.setFields : $r56 = r55 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfSecond> = $r56]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfSecond> = $r56] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfSecond> = $r56
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfSecond> = $r56 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r58 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay>
org.joda.time.chrono.AssembledChronology.setFields : $r58 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r59 = $r58
org.joda.time.chrono.AssembledChronology.setFields : r59 = $r58 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r58 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r58 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r60 = r59
org.joda.time.chrono.AssembledChronology.setFields : $r60 = r59 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay> = $r60]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay> = $r60] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay> = $r60
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay> = $r60 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r62 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute>
org.joda.time.chrono.AssembledChronology.setFields : $r62 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r63 = $r62
org.joda.time.chrono.AssembledChronology.setFields : r63 = $r62 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r62 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r62 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r64 = r63
org.joda.time.chrono.AssembledChronology.setFields : $r64 = r63 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfMinute> = $r64]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfMinute> = $r64] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfMinute> = $r64
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfMinute> = $r64 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r66 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay>
org.joda.time.chrono.AssembledChronology.setFields : $r66 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r67 = $r66
org.joda.time.chrono.AssembledChronology.setFields : r67 = $r66 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r66 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r66 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r68 = r67
org.joda.time.chrono.AssembledChronology.setFields : $r68 = r67 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfDay> = $r68]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfDay> = $r68] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfDay> = $r68
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfDay> = $r68 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r70 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour>
org.joda.time.chrono.AssembledChronology.setFields : $r70 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r71 = $r70
org.joda.time.chrono.AssembledChronology.setFields : r71 = $r70 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r70 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r70 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r72 = r71
org.joda.time.chrono.AssembledChronology.setFields : $r72 = r71 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfHour> = $r72]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfHour> = $r72] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfHour> = $r72
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfHour> = $r72 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r74 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay>
org.joda.time.chrono.AssembledChronology.setFields : $r74 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r75 = $r74
org.joda.time.chrono.AssembledChronology.setFields : r75 = $r74 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r74 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r74 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r76 = r75
org.joda.time.chrono.AssembledChronology.setFields : $r76 = r75 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfDay> = $r76]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfDay> = $r76] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfDay> = $r76
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfDay> = $r76 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r78 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay>
org.joda.time.chrono.AssembledChronology.setFields : $r78 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r79 = $r78
org.joda.time.chrono.AssembledChronology.setFields : r79 = $r78 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r78 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r78 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r80 = r79
org.joda.time.chrono.AssembledChronology.setFields : $r80 = r79 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay> = $r80]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay> = $r80] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay> = $r80
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay> = $r80 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r82 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay>
org.joda.time.chrono.AssembledChronology.setFields : $r82 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r83 = $r82
org.joda.time.chrono.AssembledChronology.setFields : r83 = $r82 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r82 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r82 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r84 = r83
org.joda.time.chrono.AssembledChronology.setFields : $r84 = r83 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfDay> = $r84]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfDay> = $r84] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfDay> = $r84
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfDay> = $r84 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r86 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday>
org.joda.time.chrono.AssembledChronology.setFields : $r86 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r87 = $r86
org.joda.time.chrono.AssembledChronology.setFields : r87 = $r86 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r86 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r86 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r88 = r87
org.joda.time.chrono.AssembledChronology.setFields : $r88 = r87 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfHalfday> = $r88]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfHalfday> = $r88] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfHalfday> = $r88
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfHalfday> = $r88 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r90 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday>
org.joda.time.chrono.AssembledChronology.setFields : $r90 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r91 = $r90
org.joda.time.chrono.AssembledChronology.setFields : r91 = $r90 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r90 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r90 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r92 = r91
org.joda.time.chrono.AssembledChronology.setFields : $r92 = r91 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfHalfday> = $r92]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfHalfday> = $r92] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfHalfday> = $r92
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfHalfday> = $r92 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r94 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay>
org.joda.time.chrono.AssembledChronology.setFields : $r94 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r95 = $r94
org.joda.time.chrono.AssembledChronology.setFields : r95 = $r94 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r94 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r94 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r96 = r95
org.joda.time.chrono.AssembledChronology.setFields : $r96 = r95 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHalfdayOfDay> = $r96]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHalfdayOfDay> = $r96] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHalfdayOfDay> = $r96
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHalfdayOfDay> = $r96 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r98 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek>
org.joda.time.chrono.AssembledChronology.setFields : $r98 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r99 = $r98
org.joda.time.chrono.AssembledChronology.setFields : r99 = $r98 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r98 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r98 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r100 = r99
org.joda.time.chrono.AssembledChronology.setFields : $r100 = r99 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfWeek> = $r100]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfWeek> = $r100] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfWeek> = $r100
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfWeek> = $r100 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r102 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth>
org.joda.time.chrono.AssembledChronology.setFields : $r102 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r103 = $r102
org.joda.time.chrono.AssembledChronology.setFields : r103 = $r102 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r102 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r102 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r104 = r103
org.joda.time.chrono.AssembledChronology.setFields : $r104 = r103 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth> = $r104]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth> = $r104] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth> = $r104
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth> = $r104 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r106 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear>
org.joda.time.chrono.AssembledChronology.setFields : $r106 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r107 = $r106
org.joda.time.chrono.AssembledChronology.setFields : r107 = $r106 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r106 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r106 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r108 = r107
org.joda.time.chrono.AssembledChronology.setFields : $r108 = r107 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfYear> = $r108]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfYear> = $r108] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfYear> = $r108
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfYear> = $r108 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r110 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear>
org.joda.time.chrono.AssembledChronology.setFields : $r110 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r111 = $r110
org.joda.time.chrono.AssembledChronology.setFields : r111 = $r110 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r110 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r110 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r112 = r111
org.joda.time.chrono.AssembledChronology.setFields : $r112 = r111 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekOfWeekyear> = $r112]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekOfWeekyear> = $r112] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekOfWeekyear> = $r112
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekOfWeekyear> = $r112 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r114 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear>
org.joda.time.chrono.AssembledChronology.setFields : $r114 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r115 = $r114
org.joda.time.chrono.AssembledChronology.setFields : r115 = $r114 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r114 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r114 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r116 = r115
org.joda.time.chrono.AssembledChronology.setFields : $r116 = r115 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyear> = $r116]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyear> = $r116] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyear> = $r116
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyear> = $r116 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r118 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury>
org.joda.time.chrono.AssembledChronology.setFields : $r118 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r119 = $r118
org.joda.time.chrono.AssembledChronology.setFields : r119 = $r118 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r118 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r118 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r120 = r119
org.joda.time.chrono.AssembledChronology.setFields : $r120 = r119 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyearOfCentury> = $r120]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyearOfCentury> = $r120] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyearOfCentury> = $r120
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyearOfCentury> = $r120 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r122 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear>
org.joda.time.chrono.AssembledChronology.setFields : $r122 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r123 = $r122
org.joda.time.chrono.AssembledChronology.setFields : r123 = $r122 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r122 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r122 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r124 = r123
org.joda.time.chrono.AssembledChronology.setFields : $r124 = r123 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear> = $r124]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear> = $r124] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear> = $r124
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear> = $r124 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r126 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year>
org.joda.time.chrono.AssembledChronology.setFields : $r126 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r127 = $r126
org.joda.time.chrono.AssembledChronology.setFields : r127 = $r126 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r126 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r126 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r128 = r127
org.joda.time.chrono.AssembledChronology.setFields : $r128 = r127 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear> = $r128]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear> = $r128] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear> = $r128
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear> = $r128 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r130 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra>
org.joda.time.chrono.AssembledChronology.setFields : $r130 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r131 = $r130
org.joda.time.chrono.AssembledChronology.setFields : r131 = $r130 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r130 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r130 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r132 = r131
org.joda.time.chrono.AssembledChronology.setFields : $r132 = r131 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfEra> = $r132]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfEra> = $r132] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfEra> = $r132
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfEra> = $r132 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r134 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury>
org.joda.time.chrono.AssembledChronology.setFields : $r134 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r135 = $r134
org.joda.time.chrono.AssembledChronology.setFields : r135 = $r134 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r134 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r134 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r136 = r135
org.joda.time.chrono.AssembledChronology.setFields : $r136 = r135 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfCentury> = $r136]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfCentury> = $r136] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfCentury> = $r136
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfCentury> = $r136 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r138 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra>
org.joda.time.chrono.AssembledChronology.setFields : $r138 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r139 = $r138
org.joda.time.chrono.AssembledChronology.setFields : r139 = $r138 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r138 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r138 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r140 = r139
org.joda.time.chrono.AssembledChronology.setFields : $r140 = r139 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iCenturyOfEra> = $r140]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iCenturyOfEra> = $r140] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iCenturyOfEra> = $r140
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iCenturyOfEra> = $r140 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r142 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era>
org.joda.time.chrono.AssembledChronology.setFields : $r142 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r143 = $r142
org.joda.time.chrono.AssembledChronology.setFields : r143 = $r142 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r142 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r142 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r144 = r143
org.joda.time.chrono.AssembledChronology.setFields : $r144 = r143 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iEra> = $r144]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iEra> = $r144] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iEra> = $r144
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iEra> = $r144 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r145 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.setFields : $r145 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r145 != null
org.joda.time.chrono.AssembledChronology.setFields : if $r145 != null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r146 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay>
org.joda.time.chrono.AssembledChronology.setFields : $r146 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r147 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.setFields : $r147 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r148 = virtualinvoke $r147.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>()
org.joda.time.chrono.AssembledChronology.setFields : $r148 = virtualinvoke $r147.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r146 != $r148
org.joda.time.chrono.AssembledChronology.setFields : if $r146 != $r148 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r149 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfHour>
org.joda.time.chrono.AssembledChronology.setFields : $r149 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfHour> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r150 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.setFields : $r150 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r151 = virtualinvoke $r150.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>()
org.joda.time.chrono.AssembledChronology.setFields : $r151 = virtualinvoke $r150.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r149 != $r151
org.joda.time.chrono.AssembledChronology.setFields : if $r149 != $r151 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r152 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfMinute>
org.joda.time.chrono.AssembledChronology.setFields : $r152 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfMinute> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r153 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.setFields : $r153 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r154 = virtualinvoke $r153.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>()
org.joda.time.chrono.AssembledChronology.setFields : $r154 = virtualinvoke $r153.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r152 != $r154
org.joda.time.chrono.AssembledChronology.setFields : if $r152 != $r154 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r155 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfSecond>
org.joda.time.chrono.AssembledChronology.setFields : $r155 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfSecond> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r156 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.setFields : $r156 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r157 = virtualinvoke $r156.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>()
org.joda.time.chrono.AssembledChronology.setFields : $r157 = virtualinvoke $r156.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r155 != $r157
org.joda.time.chrono.AssembledChronology.setFields : if $r155 != $r157 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $b1 = 1
org.joda.time.chrono.AssembledChronology.setFields : $b1 = 1 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= $r158 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay>]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= $r158 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay>] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r158 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay>
org.joda.time.chrono.AssembledChronology.setFields : $r158 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r159 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.setFields : $r159 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r160 = virtualinvoke $r159.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>()
org.joda.time.chrono.AssembledChronology.setFields : $r160 = virtualinvoke $r159.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r158 != $r160
org.joda.time.chrono.AssembledChronology.setFields : if $r158 != $r160 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $b2 = 2
org.joda.time.chrono.AssembledChronology.setFields : $b2 = 2 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= $b3 = $b1 | $b2]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= $b3 = $b1 | $b2] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $b3 = $b1 | $b2
org.joda.time.chrono.AssembledChronology.setFields : $b3 = $b1 | $b2 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r161 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear>
org.joda.time.chrono.AssembledChronology.setFields : $r161 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r162 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.setFields : $r162 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r163 = virtualinvoke $r162.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.chrono.AssembledChronology.setFields : $r163 = virtualinvoke $r162.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r161 != $r163
org.joda.time.chrono.AssembledChronology.setFields : if $r161 != $r163 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r164 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear>
org.joda.time.chrono.AssembledChronology.setFields : $r164 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r165 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.setFields : $r165 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r166 = virtualinvoke $r165.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.chrono.AssembledChronology.setFields : $r166 = virtualinvoke $r165.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r164 != $r166
org.joda.time.chrono.AssembledChronology.setFields : if $r164 != $r166 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r167 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth>
org.joda.time.chrono.AssembledChronology.setFields : $r167 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r168 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.setFields : $r168 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r169 = virtualinvoke $r168.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.chrono.AssembledChronology.setFields : $r169 = virtualinvoke $r168.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r167 != $r169
org.joda.time.chrono.AssembledChronology.setFields : if $r167 != $r169 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $b4 = 4
org.joda.time.chrono.AssembledChronology.setFields : $b4 = 4 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= b0 = $b3 | $b4]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= b0 = $b3 | $b4] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : b0 = $b3 | $b4
org.joda.time.chrono.AssembledChronology.setFields : b0 = $b3 | $b4 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: int iBaseFlags> = b0
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: int iBaseFlags> = b0 >>>>>>>> org.joda.time.chrono.StrictChronology.getInstance : return $r2
org.joda.time.chrono.StrictChronology.getInstance : return $r2 >>>>>>>> org.joda.time.DateTimeUtils.getChronology : if r0 != null
org.joda.time.DateTimeUtils.getChronology : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getChronology : return r0
org.joda.time.DateTimeUtils.getChronology : return r0 >>>>>>>> org.joda.time.chrono.StrictChronology.withUTC : $r2 = r0.<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology iWithUTC>
org.joda.time.chrono.StrictChronology.withUTC : $r2 = r0.<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology iWithUTC> >>>>>>>> org.joda.time.chrono.StrictChronology.withUTC : if $r2 != null
org.joda.time.chrono.StrictChronology.withUTC : if $r2 != null >>>>>>>> org.joda.time.chrono.StrictChronology.withUTC : $r3 = virtualinvoke r0.<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.StrictChronology.withUTC : $r3 = virtualinvoke r0.<org.joda.time.chrono.StrictChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2
org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null
org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.CopticChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.CopticChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.BasicChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getBase : return $r1
org.joda.time.chrono.AssembledChronology.getBase : return $r1 >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : r1 = $r2
org.joda.time.chrono.BasicChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : if $r2 == null
org.joda.time.chrono.BasicChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.BasicChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.ZonedChronology.getZone : $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: java.lang.Object getParam()>()
org.joda.time.chrono.ZonedChronology.getZone : $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: java.lang.Object getParam()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getParam : $r1 = r0.<org.joda.time.chrono.AssembledChronology: java.lang.Object iParam>
org.joda.time.chrono.AssembledChronology.getParam : $r1 = r0.<org.joda.time.chrono.AssembledChronology: java.lang.Object iParam> >>>>>>>> org.joda.time.chrono.AssembledChronology.getParam : return $r1
org.joda.time.chrono.AssembledChronology.getParam : return $r1 >>>>>>>> org.joda.time.chrono.ZonedChronology.getZone : $r2 = (org.joda.time.DateTimeZone) $r1
org.joda.time.chrono.ZonedChronology.getZone : $r2 = (org.joda.time.DateTimeZone) $r1 >>>>>>>> org.joda.time.chrono.ZonedChronology.getZone : return $r2
org.joda.time.chrono.ZonedChronology.getZone : return $r2 >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : return $r3
org.joda.time.chrono.BasicChronology.getZone : return $r3 >>>>>>>> org.joda.time.chrono.CopticChronology.getZone : return $r1
org.joda.time.chrono.CopticChronology.getZone : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : return $r3
org.joda.time.chrono.AssembledChronology.getZone : return $r3 >>>>>>>> org.joda.time.chrono.StrictChronology.withUTC : $r1 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>
org.joda.time.chrono.StrictChronology.withUTC : $r1 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC> >>>>>>>> org.joda.time.chrono.StrictChronology.withUTC : if $r3 != $r1
org.joda.time.chrono.StrictChronology.withUTC : if $r3 != $r1 >>>>>>>> org.joda.time.chrono.StrictChronology.withUTC : $r4 = virtualinvoke r0.<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.StrictChronology.withUTC : $r4 = virtualinvoke r0.<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology getBase()>() >>>>>>>> org.joda.time.chrono.StrictChronology.withUTC : $r5 = virtualinvoke $r4.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>()
org.joda.time.chrono.StrictChronology.withUTC : $r5 = virtualinvoke $r4.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>() >>>>>>>> org.joda.time.chrono.CopticChronology.withUTC : $r1 = <org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology INSTANCE_UTC>
org.joda.time.chrono.CopticChronology.withUTC : $r1 = <org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.CopticChronology.withUTC : return $r1
org.joda.time.chrono.CopticChronology.withUTC : return $r1 >>>>>>>> org.joda.time.chrono.StrictChronology.withUTC : $r6 = staticinvoke <org.joda.time.chrono.StrictChronology: org.joda.time.chrono.StrictChronology getInstance(org.joda.time.Chronology)>($r5)
org.joda.time.chrono.StrictChronology.withUTC : $r6 = staticinvoke <org.joda.time.chrono.StrictChronology: org.joda.time.chrono.StrictChronology getInstance(org.joda.time.Chronology)>($r5) >>>>>>>> org.joda.time.chrono.StrictChronology.withUTC : r0.<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology iWithUTC> = $r6
org.joda.time.chrono.StrictChronology.withUTC : r0.<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology iWithUTC> = $r6 >>>>>>>> org.joda.time.chrono.StrictChronology.withUTC : $r7 = r0.<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology iWithUTC>
org.joda.time.chrono.StrictChronology.withUTC : $r7 = r0.<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology iWithUTC> >>>>>>>> org.joda.time.chrono.StrictChronology.withUTC : return $r7
org.joda.time.chrono.StrictChronology.withUTC : return $r7 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i0 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>()
org.joda.time.chrono.BaseChronology.validate : i0 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>() >>>>>>>> org.joda.time.YearMonth.size : return 2
org.joda.time.YearMonth.size : return 2 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i1 = 0
org.joda.time.chrono.BaseChronology.validate : i1 = 0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : if i1 >= i0
org.joda.time.chrono.BaseChronology.validate : if i1 >= i0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i2 = r2[i1]
org.joda.time.chrono.BaseChronology.validate : i2 = r2[i1] >>>>>>>> org.joda.time.chrono.BaseChronology.validate : r3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>(i1)
org.joda.time.chrono.BaseChronology.validate : r3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>(i1) >>>>>>>> org.joda.time.base.AbstractPartial.getField : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.Chronology getChronology()>()
org.joda.time.base.AbstractPartial.getField : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.base.BasePartial.getChronology : $r1 = r0.<org.joda.time.base.BasePartial: org.joda.time.Chronology iChronology>
org.joda.time.base.BasePartial.getChronology : $r1 = r0.<org.joda.time.base.BasePartial: org.joda.time.Chronology iChronology> >>>>>>>> org.joda.time.base.BasePartial.getChronology : return $r1
org.joda.time.base.BasePartial.getChronology : return $r1 >>>>>>>> org.joda.time.base.AbstractPartial.getField : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>(i0, $r1)
org.joda.time.base.AbstractPartial.getField : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>(i0, $r1) >>>>>>>> org.joda.time.YearMonth.getField : lookupswitch(i0) {     case 0:
org.joda.time.YearMonth.getField : lookupswitch(i0) {     case 0: >>>>>>>> org.joda.time.YearMonth.getField : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.YearMonth.getField : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.YearMonth.getField : return $r3
org.joda.time.YearMonth.getField : return $r3 >>>>>>>> org.joda.time.base.AbstractPartial.getField : return $r2
org.joda.time.base.AbstractPartial.getField : return $r2 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : $i3 = virtualinvoke r3.<org.joda.time.DateTimeField: int getMinimumValue()>()
org.joda.time.chrono.BaseChronology.validate : $i3 = virtualinvoke r3.<org.joda.time.DateTimeField: int getMinimumValue()>() >>>>>>>> org.joda.time.field.DecoratedDateTimeField.getMinimumValue : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DecoratedDateTimeField.getMinimumValue : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.field.DecoratedDateTimeField.getMinimumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMinimumValue()>()
org.joda.time.field.DecoratedDateTimeField.getMinimumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMinimumValue()>() >>>>>>>> org.joda.time.field.SkipDateTimeField.getMinimumValue : $i0 = r0.<org.joda.time.field.SkipDateTimeField: int iMinValue>
org.joda.time.field.SkipDateTimeField.getMinimumValue : $i0 = r0.<org.joda.time.field.SkipDateTimeField: int iMinValue> >>>>>>>> org.joda.time.field.SkipDateTimeField.getMinimumValue : return $i0
org.joda.time.field.SkipDateTimeField.getMinimumValue : return $i0 >>>>>>>> org.joda.time.field.DecoratedDateTimeField.getMinimumValue : return $i0
org.joda.time.field.DecoratedDateTimeField.getMinimumValue : return $i0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : if i2 >= $i3
org.joda.time.chrono.BaseChronology.validate : if i2 >= $i3 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : $i5 = virtualinvoke r3.<org.joda.time.DateTimeField: int getMaximumValue()>()
org.joda.time.chrono.BaseChronology.validate : $i5 = virtualinvoke r3.<org.joda.time.DateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.field.DecoratedDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DecoratedDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.field.DecoratedDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMaximumValue()>()
org.joda.time.field.DecoratedDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DelegatedDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMaximumValue()>()
org.joda.time.field.DelegatedDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMaxYear()>()
org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMaxYear()>() >>>>>>>> org.joda.time.chrono.CopticChronology.getMaxYear : return 292272708
org.joda.time.chrono.CopticChronology.getMaxYear : return 292272708 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : return $i0
org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : return $i0 >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getMaximumValue : return $i0
org.joda.time.field.DelegatedDateTimeField.getMaximumValue : return $i0 >>>>>>>> org.joda.time.field.DecoratedDateTimeField.getMaximumValue : return $i0
org.joda.time.field.DecoratedDateTimeField.getMaximumValue : return $i0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : if i2 <= $i5
org.joda.time.chrono.BaseChronology.validate : if i2 <= $i5 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i1 = i1 + 1
org.joda.time.chrono.BaseChronology.validate : i1 = i1 + 1 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : goto [?= (branch)]
org.joda.time.chrono.BaseChronology.validate : goto [?= (branch)] >>>>>>>> org.joda.time.YearMonth.getField : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.YearMonth.getField : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>() >>>>>>>> org.joda.time.YearMonth.getField : return $r4
org.joda.time.YearMonth.getField : return $r4 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getMinimumValue : return 1
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getMinimumValue : return 1 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getMaximumValue : $i0 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getMaximumValue : $i0 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getMaximumValue : return $i0
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getMaximumValue : return $i0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i7 = 0
org.joda.time.chrono.BaseChronology.validate : i7 = 0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : if i7 >= i0
org.joda.time.chrono.BaseChronology.validate : if i7 >= i0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i8 = r2[i7]
org.joda.time.chrono.BaseChronology.validate : i8 = r2[i7] >>>>>>>> org.joda.time.chrono.BaseChronology.validate : r12 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>(i7)
org.joda.time.chrono.BaseChronology.validate : r12 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>(i7) >>>>>>>> org.joda.time.chrono.BaseChronology.validate : $i9 = virtualinvoke r12.<org.joda.time.DateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r2)
org.joda.time.chrono.BaseChronology.validate : $i9 = virtualinvoke r12.<org.joda.time.DateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r2) >>>>>>>> org.joda.time.field.BaseDateTimeField.getMinimumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>(r1)
org.joda.time.field.BaseDateTimeField.getMinimumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>(r1) >>>>>>>> org.joda.time.field.BaseDateTimeField.getMinimumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue()>()
org.joda.time.field.BaseDateTimeField.getMinimumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue()>() >>>>>>>> org.joda.time.field.BaseDateTimeField.getMinimumValue : return $i0
org.joda.time.field.BaseDateTimeField.getMinimumValue : return $i0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : if i8 >= $i9
org.joda.time.chrono.BaseChronology.validate : if i8 >= $i9 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : $i11 = virtualinvoke r12.<org.joda.time.DateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r2)
org.joda.time.chrono.BaseChronology.validate : $i11 = virtualinvoke r12.<org.joda.time.DateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r2) >>>>>>>> org.joda.time.field.BaseDateTimeField.getMaximumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>(r1)
org.joda.time.field.BaseDateTimeField.getMaximumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>(r1) >>>>>>>> org.joda.time.field.BaseDateTimeField.getMaximumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue()>()
org.joda.time.field.BaseDateTimeField.getMaximumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.field.BaseDateTimeField.getMaximumValue : return $i0
org.joda.time.field.BaseDateTimeField.getMaximumValue : return $i0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : if i8 <= $i11
org.joda.time.chrono.BaseChronology.validate : if i8 <= $i11 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i7 = i7 + 1
org.joda.time.chrono.BaseChronology.validate : i7 = i7 + 1 >>>>>>>> org.joda.time.YearMonth.monthOfYear : $r1 = new org.joda.time.YearMonth$Property
org.joda.time.YearMonth.monthOfYear : $r1 = new org.joda.time.YearMonth$Property >>>>>>>> org.joda.time.YearMonth.monthOfYear : specialinvoke $r1.<org.joda.time.YearMonth$Property: void <init>(org.joda.time.YearMonth,int)>(r0, 1)
org.joda.time.YearMonth.monthOfYear : specialinvoke $r1.<org.joda.time.YearMonth$Property: void <init>(org.joda.time.YearMonth,int)>(r0, 1) >>>>>>>> org.joda.time.YearMonth.monthOfYear : return $r1
org.joda.time.YearMonth.monthOfYear : return $r1 >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.equals : if r0 != r1
org.joda.time.field.AbstractPartialFieldProperty.equals : if r0 != r1 >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.equals : $z0 = r1 instanceof org.joda.time.field.AbstractPartialFieldProperty
org.joda.time.field.AbstractPartialFieldProperty.equals : $z0 = r1 instanceof org.joda.time.field.AbstractPartialFieldProperty >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.equals : if $z0 != 0
org.joda.time.field.AbstractPartialFieldProperty.equals : if $z0 != 0 >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.equals : r2 = (org.joda.time.field.AbstractPartialFieldProperty) r1
org.joda.time.field.AbstractPartialFieldProperty.equals : r2 = (org.joda.time.field.AbstractPartialFieldProperty) r1 >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.equals : $i0 = virtualinvoke r0.<org.joda.time.field.AbstractPartialFieldProperty: int get()>()
org.joda.time.field.AbstractPartialFieldProperty.equals : $i0 = virtualinvoke r0.<org.joda.time.field.AbstractPartialFieldProperty: int get()>() >>>>>>>> org.joda.time.YearMonth$Property.get : $r1 = r0.<org.joda.time.YearMonth$Property: org.joda.time.YearMonth iBase>
org.joda.time.YearMonth$Property.get : $r1 = r0.<org.joda.time.YearMonth$Property: org.joda.time.YearMonth iBase> >>>>>>>> org.joda.time.YearMonth$Property.get : $i0 = r0.<org.joda.time.YearMonth$Property: int iFieldIndex>
org.joda.time.YearMonth$Property.get : $i0 = r0.<org.joda.time.YearMonth$Property: int iFieldIndex> >>>>>>>> org.joda.time.YearMonth$Property.get : $i1 = virtualinvoke $r1.<org.joda.time.YearMonth: int getValue(int)>($i0)
org.joda.time.YearMonth$Property.get : $i1 = virtualinvoke $r1.<org.joda.time.YearMonth: int getValue(int)>($i0) >>>>>>>> org.joda.time.base.BasePartial.getValue : $r1 = r0.<org.joda.time.base.BasePartial: int[] iValues>
org.joda.time.base.BasePartial.getValue : $r1 = r0.<org.joda.time.base.BasePartial: int[] iValues> >>>>>>>> org.joda.time.base.BasePartial.getValue : $i1 = $r1[i0]
org.joda.time.base.BasePartial.getValue : $i1 = $r1[i0] >>>>>>>> org.joda.time.base.BasePartial.getValue : return $i1
org.joda.time.base.BasePartial.getValue : return $i1 >>>>>>>> org.joda.time.YearMonth$Property.get : return $i1
org.joda.time.YearMonth$Property.get : return $i1 >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.equals : $i1 = virtualinvoke r2.<org.joda.time.field.AbstractPartialFieldProperty: int get()>()
org.joda.time.field.AbstractPartialFieldProperty.equals : $i1 = virtualinvoke r2.<org.joda.time.field.AbstractPartialFieldProperty: int get()>() >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.equals : if $i0 != $i1
org.joda.time.field.AbstractPartialFieldProperty.equals : if $i0 != $i1 >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.equals : $r3 = virtualinvoke r0.<org.joda.time.field.AbstractPartialFieldProperty: org.joda.time.DateTimeFieldType getFieldType()>()
org.joda.time.field.AbstractPartialFieldProperty.equals : $r3 = virtualinvoke r0.<org.joda.time.field.AbstractPartialFieldProperty: org.joda.time.DateTimeFieldType getFieldType()>() >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.getFieldType : $r1 = virtualinvoke r0.<org.joda.time.field.AbstractPartialFieldProperty: org.joda.time.DateTimeField getField()>()
org.joda.time.field.AbstractPartialFieldProperty.getFieldType : $r1 = virtualinvoke r0.<org.joda.time.field.AbstractPartialFieldProperty: org.joda.time.DateTimeField getField()>() >>>>>>>> org.joda.time.YearMonth$Property.getField : $r1 = r0.<org.joda.time.YearMonth$Property: org.joda.time.YearMonth iBase>
org.joda.time.YearMonth$Property.getField : $r1 = r0.<org.joda.time.YearMonth$Property: org.joda.time.YearMonth iBase> >>>>>>>> org.joda.time.YearMonth$Property.getField : $i0 = r0.<org.joda.time.YearMonth$Property: int iFieldIndex>
org.joda.time.YearMonth$Property.getField : $i0 = r0.<org.joda.time.YearMonth$Property: int iFieldIndex> >>>>>>>> org.joda.time.YearMonth$Property.getField : $r2 = virtualinvoke $r1.<org.joda.time.YearMonth: org.joda.time.DateTimeField getField(int)>($i0)
org.joda.time.YearMonth$Property.getField : $r2 = virtualinvoke $r1.<org.joda.time.YearMonth: org.joda.time.DateTimeField getField(int)>($i0) >>>>>>>> org.joda.time.YearMonth$Property.getField : return $r2
org.joda.time.YearMonth$Property.getField : return $r2 >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.getFieldType : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DateTimeFieldType getType()>()
org.joda.time.field.AbstractPartialFieldProperty.getFieldType : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DateTimeFieldType getType()>() >>>>>>>> org.joda.time.field.BaseDateTimeField.getType : $r1 = r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType iType>
org.joda.time.field.BaseDateTimeField.getType : $r1 = r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType iType> >>>>>>>> org.joda.time.field.BaseDateTimeField.getType : return $r1
org.joda.time.field.BaseDateTimeField.getType : return $r1 >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.getFieldType : return $r2
org.joda.time.field.AbstractPartialFieldProperty.getFieldType : return $r2 >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.equals : $r4 = virtualinvoke r2.<org.joda.time.field.AbstractPartialFieldProperty: org.joda.time.DateTimeFieldType getFieldType()>()
org.joda.time.field.AbstractPartialFieldProperty.equals : $r4 = virtualinvoke r2.<org.joda.time.field.AbstractPartialFieldProperty: org.joda.time.DateTimeFieldType getFieldType()>() >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.equals : if $r3 != $r4
org.joda.time.field.AbstractPartialFieldProperty.equals : if $r3 != $r4 >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.equals : $r5 = virtualinvoke r0.<org.joda.time.field.AbstractPartialFieldProperty: org.joda.time.ReadablePartial getReadablePartial()>()
org.joda.time.field.AbstractPartialFieldProperty.equals : $r5 = virtualinvoke r0.<org.joda.time.field.AbstractPartialFieldProperty: org.joda.time.ReadablePartial getReadablePartial()>() >>>>>>>> org.joda.time.YearMonth$Property.getReadablePartial : $r1 = r0.<org.joda.time.YearMonth$Property: org.joda.time.YearMonth iBase>
org.joda.time.YearMonth$Property.getReadablePartial : $r1 = r0.<org.joda.time.YearMonth$Property: org.joda.time.YearMonth iBase> >>>>>>>> org.joda.time.YearMonth$Property.getReadablePartial : return $r1
org.joda.time.YearMonth$Property.getReadablePartial : return $r1 >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.equals : $r6 = interfaceinvoke $r5.<org.joda.time.ReadablePartial: org.joda.time.Chronology getChronology()>()
org.joda.time.field.AbstractPartialFieldProperty.equals : $r6 = interfaceinvoke $r5.<org.joda.time.ReadablePartial: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.equals : $r7 = virtualinvoke r2.<org.joda.time.field.AbstractPartialFieldProperty: org.joda.time.ReadablePartial getReadablePartial()>()
org.joda.time.field.AbstractPartialFieldProperty.equals : $r7 = virtualinvoke r2.<org.joda.time.field.AbstractPartialFieldProperty: org.joda.time.ReadablePartial getReadablePartial()>() >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.equals : $r8 = interfaceinvoke $r7.<org.joda.time.ReadablePartial: org.joda.time.Chronology getChronology()>()
org.joda.time.field.AbstractPartialFieldProperty.equals : $r8 = interfaceinvoke $r7.<org.joda.time.ReadablePartial: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.equals : $z1 = staticinvoke <org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>($r6, $r8)
org.joda.time.field.AbstractPartialFieldProperty.equals : $z1 = staticinvoke <org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>($r6, $r8) >>>>>>>> org.joda.time.field.FieldUtils.equals : if r0 != r1
org.joda.time.field.FieldUtils.equals : if r0 != r1 >>>>>>>> org.joda.time.field.FieldUtils.equals : if r0 == null
org.joda.time.field.FieldUtils.equals : if r0 == null >>>>>>>> org.joda.time.field.FieldUtils.equals : if r1 != null
org.joda.time.field.FieldUtils.equals : if r1 != null >>>>>>>> org.joda.time.field.FieldUtils.equals : $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1)
org.joda.time.field.FieldUtils.equals : $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) >>>>>>>> org.joda.time.chrono.StrictChronology.equals : if r0 != r1
org.joda.time.chrono.StrictChronology.equals : if r0 != r1 >>>>>>>> org.joda.time.chrono.StrictChronology.equals : $z0 = r1 instanceof org.joda.time.chrono.StrictChronology
org.joda.time.chrono.StrictChronology.equals : $z0 = r1 instanceof org.joda.time.chrono.StrictChronology >>>>>>>> org.joda.time.chrono.StrictChronology.equals : if $z0 != 0
org.joda.time.chrono.StrictChronology.equals : if $z0 != 0 >>>>>>>> org.joda.time.chrono.StrictChronology.equals : r2 = (org.joda.time.chrono.StrictChronology) r1
org.joda.time.chrono.StrictChronology.equals : r2 = (org.joda.time.chrono.StrictChronology) r1 >>>>>>>> org.joda.time.chrono.StrictChronology.equals : $r3 = virtualinvoke r0.<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.StrictChronology.equals : $r3 = virtualinvoke r0.<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology getBase()>() >>>>>>>> org.joda.time.chrono.StrictChronology.equals : $r4 = virtualinvoke r2.<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.StrictChronology.equals : $r4 = virtualinvoke r2.<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology getBase()>() >>>>>>>> org.joda.time.chrono.StrictChronology.equals : $z1 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4)
org.joda.time.chrono.StrictChronology.equals : $z1 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4) >>>>>>>> org.joda.time.chrono.CopticChronology.equals : $z0 = specialinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: boolean equals(java.lang.Object)>(r1)
org.joda.time.chrono.CopticChronology.equals : $z0 = specialinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: boolean equals(java.lang.Object)>(r1) >>>>>>>> org.joda.time.chrono.BasicChronology.equals : $z0 = specialinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1)
org.joda.time.chrono.BasicChronology.equals : $z0 = specialinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) >>>>>>>> org.joda.time.chrono.BasicChronology.equals : return $z0
org.joda.time.chrono.BasicChronology.equals : return $z0 >>>>>>>> org.joda.time.chrono.CopticChronology.equals : return $z0
org.joda.time.chrono.CopticChronology.equals : return $z0 >>>>>>>> org.joda.time.chrono.StrictChronology.equals : return $z1
org.joda.time.chrono.StrictChronology.equals : return $z1 >>>>>>>> org.joda.time.field.FieldUtils.equals : return $z0
org.joda.time.field.FieldUtils.equals : return $z0 >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.equals : if $z1 == 0
org.joda.time.field.AbstractPartialFieldProperty.equals : if $z1 == 0 >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.equals : $z2 = 1
org.joda.time.field.AbstractPartialFieldProperty.equals : $z2 = 1 >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.equals : goto [?= return $z2]
org.joda.time.field.AbstractPartialFieldProperty.equals : goto [?= return $z2] >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.equals : return $z2
org.joda.time.field.AbstractPartialFieldProperty.equals : return $z2 >>>>>>>> org.joda.time.field.FieldUtils.equals : return 1
org.joda.time.field.FieldUtils.equals : return 1 >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.hashCode : b0 = 19
org.joda.time.field.AbstractPartialFieldProperty.hashCode : b0 = 19 >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.hashCode : $i1 = 13 * b0
org.joda.time.field.AbstractPartialFieldProperty.hashCode : $i1 = 13 * b0 >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.hashCode : $i2 = virtualinvoke r0.<org.joda.time.field.AbstractPartialFieldProperty: int get()>()
org.joda.time.field.AbstractPartialFieldProperty.hashCode : $i2 = virtualinvoke r0.<org.joda.time.field.AbstractPartialFieldProperty: int get()>() >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.hashCode : i3 = $i1 + $i2
org.joda.time.field.AbstractPartialFieldProperty.hashCode : i3 = $i1 + $i2 >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.hashCode : $i4 = 13 * i3
org.joda.time.field.AbstractPartialFieldProperty.hashCode : $i4 = 13 * i3 >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.hashCode : $r1 = virtualinvoke r0.<org.joda.time.field.AbstractPartialFieldProperty: org.joda.time.DateTimeFieldType getFieldType()>()
org.joda.time.field.AbstractPartialFieldProperty.hashCode : $r1 = virtualinvoke r0.<org.joda.time.field.AbstractPartialFieldProperty: org.joda.time.DateTimeFieldType getFieldType()>() >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.hashCode : $i5 = virtualinvoke $r1.<java.lang.Object: int hashCode()>()
org.joda.time.field.AbstractPartialFieldProperty.hashCode : $i5 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.hashCode : $b0 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: byte iOrdinal>
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.hashCode : $b0 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: byte iOrdinal> >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.hashCode : return $b0
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.hashCode : return $b0 >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.hashCode : i6 = $i4 + $i5
org.joda.time.field.AbstractPartialFieldProperty.hashCode : i6 = $i4 + $i5 >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.hashCode : $i7 = 13 * i6
org.joda.time.field.AbstractPartialFieldProperty.hashCode : $i7 = 13 * i6 >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.hashCode : $r2 = virtualinvoke r0.<org.joda.time.field.AbstractPartialFieldProperty: org.joda.time.ReadablePartial getReadablePartial()>()
org.joda.time.field.AbstractPartialFieldProperty.hashCode : $r2 = virtualinvoke r0.<org.joda.time.field.AbstractPartialFieldProperty: org.joda.time.ReadablePartial getReadablePartial()>() >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.hashCode : $r3 = interfaceinvoke $r2.<org.joda.time.ReadablePartial: org.joda.time.Chronology getChronology()>()
org.joda.time.field.AbstractPartialFieldProperty.hashCode : $r3 = interfaceinvoke $r2.<org.joda.time.ReadablePartial: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.hashCode : $i8 = virtualinvoke $r3.<java.lang.Object: int hashCode()>()
org.joda.time.field.AbstractPartialFieldProperty.hashCode : $i8 = virtualinvoke $r3.<java.lang.Object: int hashCode()>() >>>>>>>> org.joda.time.chrono.StrictChronology.hashCode : $r1 = virtualinvoke r0.<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.StrictChronology.hashCode : $r1 = virtualinvoke r0.<org.joda.time.chrono.StrictChronology: org.joda.time.Chronology getBase()>() >>>>>>>> org.joda.time.chrono.StrictChronology.hashCode : $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>()
org.joda.time.chrono.StrictChronology.hashCode : $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() >>>>>>>> org.joda.time.chrono.CopticChronology.hashCode : $i0 = specialinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: int hashCode()>()
org.joda.time.chrono.CopticChronology.hashCode : $i0 = specialinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: int hashCode()>() >>>>>>>> org.joda.time.chrono.BasicChronology.hashCode : $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>()
org.joda.time.chrono.BasicChronology.hashCode : $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> org.joda.time.chrono.BasicChronology.hashCode : $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>()
org.joda.time.chrono.BasicChronology.hashCode : $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>() >>>>>>>> org.joda.time.chrono.BasicChronology.hashCode : $i0 = virtualinvoke $r2.<java.lang.String: int hashCode()>()
org.joda.time.chrono.BasicChronology.hashCode : $i0 = virtualinvoke $r2.<java.lang.String: int hashCode()>() >>>>>>>> org.joda.time.chrono.BasicChronology.hashCode : $i1 = $i0 * 11
org.joda.time.chrono.BasicChronology.hashCode : $i1 = $i0 * 11 >>>>>>>> org.joda.time.chrono.BasicChronology.hashCode : $r3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.BasicChronology.hashCode : $r3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>
org.joda.time.chrono.BasicChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC> >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : return $r4
org.joda.time.chrono.BasicChronology.getZone : return $r4 >>>>>>>> org.joda.time.chrono.BasicChronology.hashCode : $i2 = virtualinvoke $r3.<org.joda.time.DateTimeZone: int hashCode()>()
org.joda.time.chrono.BasicChronology.hashCode : $i2 = virtualinvoke $r3.<org.joda.time.DateTimeZone: int hashCode()>() >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $r1 = virtualinvoke r0.<org.joda.time.tz.FixedDateTimeZone: java.lang.String getID()>()
org.joda.time.tz.FixedDateTimeZone.hashCode : $r1 = virtualinvoke r0.<org.joda.time.tz.FixedDateTimeZone: java.lang.String getID()>() >>>>>>>> org.joda.time.DateTimeZone.getID : $r1 = r0.<org.joda.time.DateTimeZone: java.lang.String iID>
org.joda.time.DateTimeZone.getID : $r1 = r0.<org.joda.time.DateTimeZone: java.lang.String iID> >>>>>>>> org.joda.time.DateTimeZone.getID : return $r1
org.joda.time.DateTimeZone.getID : return $r1 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>()
org.joda.time.tz.FixedDateTimeZone.hashCode : $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>() >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iStandardOffset>
org.joda.time.tz.FixedDateTimeZone.hashCode : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iStandardOffset> >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i2 = 37 * $i1
org.joda.time.tz.FixedDateTimeZone.hashCode : $i2 = 37 * $i1 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i3 = $i0 + $i2
org.joda.time.tz.FixedDateTimeZone.hashCode : $i3 = $i0 + $i2 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i4 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset>
org.joda.time.tz.FixedDateTimeZone.hashCode : $i4 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset> >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i5 = 31 * $i4
org.joda.time.tz.FixedDateTimeZone.hashCode : $i5 = 31 * $i4 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : $i6 = $i3 + $i5
org.joda.time.tz.FixedDateTimeZone.hashCode : $i6 = $i3 + $i5 >>>>>>>> org.joda.time.tz.FixedDateTimeZone.hashCode : return $i6
org.joda.time.tz.FixedDateTimeZone.hashCode : return $i6 >>>>>>>> org.joda.time.chrono.BasicChronology.hashCode : $i3 = $i1 + $i2
org.joda.time.chrono.BasicChronology.hashCode : $i3 = $i1 + $i2 >>>>>>>> org.joda.time.chrono.BasicChronology.hashCode : $i4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMinimumDaysInFirstWeek()>()
org.joda.time.chrono.BasicChronology.hashCode : $i4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMinimumDaysInFirstWeek()>() >>>>>>>> org.joda.time.chrono.CopticChronology.getMinimumDaysInFirstWeek : $i0 = specialinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: int getMinimumDaysInFirstWeek()>()
org.joda.time.chrono.CopticChronology.getMinimumDaysInFirstWeek : $i0 = specialinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: int getMinimumDaysInFirstWeek()>() >>>>>>>> org.joda.time.chrono.BasicChronology.getMinimumDaysInFirstWeek : $i0 = r0.<org.joda.time.chrono.BasicChronology: int iMinDaysInFirstWeek>
org.joda.time.chrono.BasicChronology.getMinimumDaysInFirstWeek : $i0 = r0.<org.joda.time.chrono.BasicChronology: int iMinDaysInFirstWeek> >>>>>>>> org.joda.time.chrono.BasicChronology.getMinimumDaysInFirstWeek : return $i0
org.joda.time.chrono.BasicChronology.getMinimumDaysInFirstWeek : return $i0 >>>>>>>> org.joda.time.chrono.CopticChronology.getMinimumDaysInFirstWeek : return $i0
org.joda.time.chrono.CopticChronology.getMinimumDaysInFirstWeek : return $i0 >>>>>>>> org.joda.time.chrono.BasicChronology.hashCode : $i5 = $i3 + $i4
org.joda.time.chrono.BasicChronology.hashCode : $i5 = $i3 + $i4 >>>>>>>> org.joda.time.chrono.BasicChronology.hashCode : return $i5
org.joda.time.chrono.BasicChronology.hashCode : return $i5 >>>>>>>> org.joda.time.chrono.CopticChronology.hashCode : return $i0
org.joda.time.chrono.CopticChronology.hashCode : return $i0 >>>>>>>> org.joda.time.chrono.StrictChronology.hashCode : $i1 = $i0 * 7
org.joda.time.chrono.StrictChronology.hashCode : $i1 = $i0 * 7 >>>>>>>> org.joda.time.chrono.StrictChronology.hashCode : $i2 = 352831696 + $i1
org.joda.time.chrono.StrictChronology.hashCode : $i2 = 352831696 + $i1 >>>>>>>> org.joda.time.chrono.StrictChronology.hashCode : return $i2
org.joda.time.chrono.StrictChronology.hashCode : return $i2 >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.hashCode : i9 = $i7 + $i8
org.joda.time.field.AbstractPartialFieldProperty.hashCode : i9 = $i7 + $i8 >>>>>>>> org.joda.time.field.AbstractPartialFieldProperty.hashCode : return i9
