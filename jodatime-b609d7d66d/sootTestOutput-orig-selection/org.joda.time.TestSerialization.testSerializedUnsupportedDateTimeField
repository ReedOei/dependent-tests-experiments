org.joda.time.DateTimeUtils.setCurrentMillisSystem : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>() >>>>>>>> org.joda.time.DateTimeUtils.checkPermission : r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>()
org.joda.time.DateTimeUtils.checkPermission : r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>() >>>>>>>> org.joda.time.DateTimeUtils.checkPermission : if r0 == null
org.joda.time.DateTimeUtils.checkPermission : if r0 == null >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisSystem : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$SystemMillisProvider SYSTEM_MILLIS_PROVIDER>
org.joda.time.DateTimeUtils.setCurrentMillisSystem : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$SystemMillisProvider SYSTEM_MILLIS_PROVIDER> >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisSystem : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0
org.joda.time.DateTimeUtils.setCurrentMillisSystem : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0 >>>>>>>> org.joda.time.DateTimeZone.setDefault : r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>()
org.joda.time.DateTimeZone.setDefault : r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>() >>>>>>>> org.joda.time.DateTimeZone.setDefault : if r1 == null
org.joda.time.DateTimeZone.setDefault : if r1 == null >>>>>>>> org.joda.time.DateTimeZone.setDefault : if r0 != null
org.joda.time.DateTimeZone.setDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.setDefault : $r6 = class "org/joda/time/DateTimeZone"
org.joda.time.DateTimeZone.setDefault : $r6 = class "org/joda/time/DateTimeZone" >>>>>>>> org.joda.time.DateTimeZone.setDefault : r3 = $r6
org.joda.time.DateTimeZone.setDefault : r3 = $r6 >>>>>>>> org.joda.time.DateTimeZone.setDefault : entermonitor $r6
org.joda.time.DateTimeZone.setDefault : entermonitor $r6 >>>>>>>> org.joda.time.DateTimeZone.setDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r0
org.joda.time.DateTimeZone.setDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r0 >>>>>>>> org.joda.time.DateTimeZone.setDefault : exitmonitor r3
org.joda.time.DateTimeZone.setDefault : exitmonitor r3 >>>>>>>> org.joda.time.DateTimeZone.setDefault : goto [?= return]
org.joda.time.DateTimeZone.setDefault : goto [?= return] >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>()
org.joda.time.DateTimeUtils.setCurrentMillisFixed : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>() >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : $r0 = new org.joda.time.DateTimeUtils$FixedMillisProvider
org.joda.time.DateTimeUtils.setCurrentMillisFixed : $r0 = new org.joda.time.DateTimeUtils$FixedMillisProvider >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : specialinvoke $r0.<org.joda.time.DateTimeUtils$FixedMillisProvider: void <init>(long)>(l0)
org.joda.time.DateTimeUtils.setCurrentMillisFixed : specialinvoke $r0.<org.joda.time.DateTimeUtils$FixedMillisProvider: void <init>(long)>(l0) >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0
org.joda.time.DateTimeUtils.setCurrentMillisFixed : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0 >>>>>>>> org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> >>>>>>>> org.joda.time.DateTimeZone.getDefault : if r0 != null
org.joda.time.DateTimeZone.getDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.DateTimeZone.getDefault : return r0 >>>>>>>> org.joda.time.DateTimeFieldType.year : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType YEAR_TYPE>
org.joda.time.DateTimeFieldType.year : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType YEAR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.year : return $r0
org.joda.time.DateTimeFieldType.year : return $r0 >>>>>>>> org.joda.time.DurationFieldType.years : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType YEARS_TYPE>
org.joda.time.DurationFieldType.years : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType YEARS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.years : return $r0
org.joda.time.DurationFieldType.years : return $r0 >>>>>>>> org.joda.time.field.UnsupportedDurationField.getInstance : $r1 = <org.joda.time.field.UnsupportedDurationField: java.util.HashMap cCache>
org.joda.time.field.UnsupportedDurationField.getInstance : $r1 = <org.joda.time.field.UnsupportedDurationField: java.util.HashMap cCache> >>>>>>>> org.joda.time.field.UnsupportedDurationField.getInstance : if $r1 != null
org.joda.time.field.UnsupportedDurationField.getInstance : if $r1 != null >>>>>>>> org.joda.time.field.UnsupportedDurationField.getInstance : $r4 = <org.joda.time.field.UnsupportedDurationField: java.util.HashMap cCache>
org.joda.time.field.UnsupportedDurationField.getInstance : $r4 = <org.joda.time.field.UnsupportedDurationField: java.util.HashMap cCache> >>>>>>>> org.joda.time.field.UnsupportedDurationField.getInstance : $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0)
org.joda.time.field.UnsupportedDurationField.getInstance : $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.hashCode : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal>
org.joda.time.DurationFieldType$StandardDurationFieldType.hashCode : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal> >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.hashCode : return $b0
org.joda.time.DurationFieldType$StandardDurationFieldType.hashCode : return $b0 >>>>>>>> org.joda.time.field.UnsupportedDurationField.getInstance : r2 = (org.joda.time.field.UnsupportedDurationField) $r5
org.joda.time.field.UnsupportedDurationField.getInstance : r2 = (org.joda.time.field.UnsupportedDurationField) $r5 >>>>>>>> org.joda.time.field.UnsupportedDurationField.getInstance : if r2 != null
org.joda.time.field.UnsupportedDurationField.getInstance : if r2 != null >>>>>>>> org.joda.time.field.UnsupportedDurationField.getInstance : $r6 = new org.joda.time.field.UnsupportedDurationField
org.joda.time.field.UnsupportedDurationField.getInstance : $r6 = new org.joda.time.field.UnsupportedDurationField >>>>>>>> org.joda.time.field.UnsupportedDurationField.getInstance : specialinvoke $r6.<org.joda.time.field.UnsupportedDurationField: void <init>(org.joda.time.DurationFieldType)>(r0)
org.joda.time.field.UnsupportedDurationField.getInstance : specialinvoke $r6.<org.joda.time.field.UnsupportedDurationField: void <init>(org.joda.time.DurationFieldType)>(r0) >>>>>>>> org.joda.time.field.UnsupportedDurationField.getInstance : r2 = $r6
org.joda.time.field.UnsupportedDurationField.getInstance : r2 = $r6 >>>>>>>> org.joda.time.field.UnsupportedDurationField.getInstance : $r7 = <org.joda.time.field.UnsupportedDurationField: java.util.HashMap cCache>
org.joda.time.field.UnsupportedDurationField.getInstance : $r7 = <org.joda.time.field.UnsupportedDurationField: java.util.HashMap cCache> >>>>>>>> org.joda.time.field.UnsupportedDurationField.getInstance : virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r2)
org.joda.time.field.UnsupportedDurationField.getInstance : virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r2) >>>>>>>> org.joda.time.field.UnsupportedDurationField.getInstance : return r2
org.joda.time.field.UnsupportedDurationField.getInstance : return r2 >>>>>>>> org.joda.time.field.UnsupportedDateTimeField.getInstance : $r2 = <org.joda.time.field.UnsupportedDateTimeField: java.util.HashMap cCache>
org.joda.time.field.UnsupportedDateTimeField.getInstance : $r2 = <org.joda.time.field.UnsupportedDateTimeField: java.util.HashMap cCache> >>>>>>>> org.joda.time.field.UnsupportedDateTimeField.getInstance : if $r2 != null
org.joda.time.field.UnsupportedDateTimeField.getInstance : if $r2 != null >>>>>>>> org.joda.time.field.UnsupportedDateTimeField.getInstance : $r5 = <org.joda.time.field.UnsupportedDateTimeField: java.util.HashMap cCache>
org.joda.time.field.UnsupportedDateTimeField.getInstance : $r5 = <org.joda.time.field.UnsupportedDateTimeField: java.util.HashMap cCache> >>>>>>>> org.joda.time.field.UnsupportedDateTimeField.getInstance : $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0)
org.joda.time.field.UnsupportedDateTimeField.getInstance : $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.hashCode : $b0 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: byte iOrdinal>
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.hashCode : $b0 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: byte iOrdinal> >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.hashCode : return $b0
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.hashCode : return $b0 >>>>>>>> org.joda.time.field.UnsupportedDateTimeField.getInstance : r3 = (org.joda.time.field.UnsupportedDateTimeField) $r6
org.joda.time.field.UnsupportedDateTimeField.getInstance : r3 = (org.joda.time.field.UnsupportedDateTimeField) $r6 >>>>>>>> org.joda.time.field.UnsupportedDateTimeField.getInstance : if r3 == null
org.joda.time.field.UnsupportedDateTimeField.getInstance : if r3 == null >>>>>>>> org.joda.time.field.UnsupportedDateTimeField.getInstance : if r3 != null
org.joda.time.field.UnsupportedDateTimeField.getInstance : if r3 != null >>>>>>>> org.joda.time.field.UnsupportedDateTimeField.getInstance : $r8 = new org.joda.time.field.UnsupportedDateTimeField
org.joda.time.field.UnsupportedDateTimeField.getInstance : $r8 = new org.joda.time.field.UnsupportedDateTimeField >>>>>>>> org.joda.time.field.UnsupportedDateTimeField.getInstance : specialinvoke $r8.<org.joda.time.field.UnsupportedDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>(r0, r1)
org.joda.time.field.UnsupportedDateTimeField.getInstance : specialinvoke $r8.<org.joda.time.field.UnsupportedDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>(r0, r1) >>>>>>>> org.joda.time.field.UnsupportedDateTimeField.getInstance : r3 = $r8
org.joda.time.field.UnsupportedDateTimeField.getInstance : r3 = $r8 >>>>>>>> org.joda.time.field.UnsupportedDateTimeField.getInstance : $r9 = <org.joda.time.field.UnsupportedDateTimeField: java.util.HashMap cCache>
org.joda.time.field.UnsupportedDateTimeField.getInstance : $r9 = <org.joda.time.field.UnsupportedDateTimeField: java.util.HashMap cCache> >>>>>>>> org.joda.time.field.UnsupportedDateTimeField.getInstance : virtualinvoke $r9.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r3)
org.joda.time.field.UnsupportedDateTimeField.getInstance : virtualinvoke $r9.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r3) >>>>>>>> org.joda.time.field.UnsupportedDateTimeField.getInstance : return r3
org.joda.time.field.UnsupportedDateTimeField.getInstance : return r3 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.readResolve : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal>
org.joda.time.DurationFieldType$StandardDurationFieldType.readResolve : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal> >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.readResolve : tableswitch($b0) {     case 1:
org.joda.time.DurationFieldType$StandardDurationFieldType.readResolve : tableswitch($b0) {     case 1: >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.readResolve : $r4 = <org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationFieldType YEARS_TYPE>
org.joda.time.DurationFieldType$StandardDurationFieldType.readResolve : $r4 = <org.joda.time.DurationFieldType$StandardDurationFieldType: org.joda.time.DurationFieldType YEARS_TYPE> >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.readResolve : return $r4
org.joda.time.DurationFieldType$StandardDurationFieldType.readResolve : return $r4 >>>>>>>> org.joda.time.field.UnsupportedDurationField.readResolve : $r1 = r0.<org.joda.time.field.UnsupportedDurationField: org.joda.time.DurationFieldType iType>
org.joda.time.field.UnsupportedDurationField.readResolve : $r1 = r0.<org.joda.time.field.UnsupportedDurationField: org.joda.time.DurationFieldType iType> >>>>>>>> org.joda.time.field.UnsupportedDurationField.readResolve : $r2 = staticinvoke <org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>($r1)
org.joda.time.field.UnsupportedDurationField.readResolve : $r2 = staticinvoke <org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>($r1) >>>>>>>> org.joda.time.field.UnsupportedDurationField.readResolve : return $r2
org.joda.time.field.UnsupportedDurationField.readResolve : return $r2 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.readResolve : $b0 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: byte iOrdinal>
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.readResolve : $b0 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: byte iOrdinal> >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.readResolve : tableswitch($b0) {     case 1:
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.readResolve : tableswitch($b0) {     case 1: >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.readResolve : $r5 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$400()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.readResolve : $r5 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$400()>() >>>>>>>> org.joda.time.DateTimeFieldType.access$400 : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType YEAR_TYPE>
org.joda.time.DateTimeFieldType.access$400 : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType YEAR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.access$400 : return $r0
org.joda.time.DateTimeFieldType.access$400 : return $r0 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.readResolve : return $r5
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.readResolve : return $r5 >>>>>>>> org.joda.time.field.UnsupportedDateTimeField.readResolve : $r1 = r0.<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DateTimeFieldType iType>
org.joda.time.field.UnsupportedDateTimeField.readResolve : $r1 = r0.<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DateTimeFieldType iType> >>>>>>>> org.joda.time.field.UnsupportedDateTimeField.readResolve : $r2 = r0.<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField iDurationField>
org.joda.time.field.UnsupportedDateTimeField.readResolve : $r2 = r0.<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField iDurationField> >>>>>>>> org.joda.time.field.UnsupportedDateTimeField.readResolve : $r3 = staticinvoke <org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>($r1, $r2)
org.joda.time.field.UnsupportedDateTimeField.readResolve : $r3 = staticinvoke <org.joda.time.field.UnsupportedDateTimeField: org.joda.time.field.UnsupportedDateTimeField getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DurationField)>($r1, $r2) >>>>>>>> org.joda.time.field.UnsupportedDateTimeField.getInstance : $r7 = virtualinvoke r3.<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>()
org.joda.time.field.UnsupportedDateTimeField.getInstance : $r7 = virtualinvoke r3.<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField getDurationField()>() >>>>>>>> org.joda.time.field.UnsupportedDateTimeField.getDurationField : $r1 = r0.<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField iDurationField>
org.joda.time.field.UnsupportedDateTimeField.getDurationField : $r1 = r0.<org.joda.time.field.UnsupportedDateTimeField: org.joda.time.DurationField iDurationField> >>>>>>>> org.joda.time.field.UnsupportedDateTimeField.getDurationField : return $r1
org.joda.time.field.UnsupportedDateTimeField.getDurationField : return $r1 >>>>>>>> org.joda.time.field.UnsupportedDateTimeField.getInstance : if $r7 == r1
org.joda.time.field.UnsupportedDateTimeField.getInstance : if $r7 == r1 >>>>>>>> org.joda.time.field.UnsupportedDateTimeField.readResolve : return $r3
