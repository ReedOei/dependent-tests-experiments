org.joda.time.chrono.ISOChronology.getInstanceUTC : $r0 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.ISOChronology.getInstanceUTC : return $r0
org.joda.time.chrono.ISOChronology.getInstanceUTC : return $r0 >>>>>>>> org.joda.time.chrono.AssembledChronology.year : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear>
org.joda.time.chrono.AssembledChronology.year : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.year : return $r1
org.joda.time.chrono.AssembledChronology.year : return $r1 >>>>>>>> org.joda.time.field.BaseDateTimeField.getType : $r1 = r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType iType>
org.joda.time.field.BaseDateTimeField.getType : $r1 = r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType iType> >>>>>>>> org.joda.time.field.BaseDateTimeField.getType : return $r1
org.joda.time.field.BaseDateTimeField.getType : return $r1 >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getMinimumValue : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DelegatedDateTimeField.getMinimumValue : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getMinimumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMinimumValue()>()
org.joda.time.field.DelegatedDateTimeField.getMinimumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMinimumValue()>() >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getMinimumValue : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.getMinimumValue : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getMinimumValue : $i0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMinYear()>()
org.joda.time.chrono.BasicYearDateTimeField.getMinimumValue : $i0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMinYear()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getMinYear : return -292275054
org.joda.time.chrono.GregorianChronology.getMinYear : return -292275054 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getMinimumValue : return $i0
org.joda.time.chrono.BasicYearDateTimeField.getMinimumValue : return $i0 >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getMinimumValue : return $i0
org.joda.time.field.DelegatedDateTimeField.getMinimumValue : return $i0 >>>>>>>> org.joda.time.field.SkipDateTimeField.set : $i2 = r0.<org.joda.time.field.SkipDateTimeField: int iMinValue>
org.joda.time.field.SkipDateTimeField.set : $i2 = r0.<org.joda.time.field.SkipDateTimeField: int iMinValue> >>>>>>>> org.joda.time.field.SkipDateTimeField.set : $i3 = virtualinvoke r0.<org.joda.time.field.SkipDateTimeField: int getMaximumValue()>()
org.joda.time.field.SkipDateTimeField.set : $i3 = virtualinvoke r0.<org.joda.time.field.SkipDateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DelegatedDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMaximumValue()>()
org.joda.time.field.DelegatedDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMaxYear()>()
org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMaxYear()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getMaxYear : return 292278993
org.joda.time.chrono.GregorianChronology.getMaxYear : return 292278993 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : return $i0
org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : return $i0 >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getMaximumValue : return $i0
org.joda.time.field.DelegatedDateTimeField.getMaximumValue : return $i0 >>>>>>>> org.joda.time.field.SkipDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i2, $i3)
org.joda.time.field.SkipDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i2, $i3) >>>>>>>> org.joda.time.field.FieldUtils.verifyValueBounds : if i0 < i1
org.joda.time.field.FieldUtils.verifyValueBounds : if i0 < i1 >>>>>>>> org.joda.time.field.FieldUtils.verifyValueBounds : if i0 <= i2
org.joda.time.field.FieldUtils.verifyValueBounds : if i0 <= i2 >>>>>>>> org.joda.time.field.SkipDateTimeField.set : $i4 = r0.<org.joda.time.field.SkipDateTimeField: int iSkip>
org.joda.time.field.SkipDateTimeField.set : $i4 = r0.<org.joda.time.field.SkipDateTimeField: int iSkip> >>>>>>>> org.joda.time.field.SkipDateTimeField.set : if i1 > $i4
org.joda.time.field.SkipDateTimeField.set : if i1 > $i4 >>>>>>>> org.joda.time.field.SkipDateTimeField.set : $i5 = r0.<org.joda.time.field.SkipDateTimeField: int iSkip>
org.joda.time.field.SkipDateTimeField.set : $i5 = r0.<org.joda.time.field.SkipDateTimeField: int iSkip> >>>>>>>> org.joda.time.field.SkipDateTimeField.set : if i1 != $i5
org.joda.time.field.SkipDateTimeField.set : if i1 != $i5 >>>>>>>> org.joda.time.field.SkipDateTimeField.set : $r1 = new org.joda.time.IllegalFieldValueException
org.joda.time.field.SkipDateTimeField.set : $r1 = new org.joda.time.IllegalFieldValueException >>>>>>>> org.joda.time.field.SkipDateTimeField.set : $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>()
org.joda.time.field.SkipDateTimeField.set : $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>() >>>>>>>> org.joda.time.DateTimeFieldType.year : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType YEAR_TYPE>
org.joda.time.DateTimeFieldType.year : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType YEAR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.year : return $r0
org.joda.time.DateTimeFieldType.year : return $r0 >>>>>>>> org.joda.time.field.SkipDateTimeField.set : $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1)
org.joda.time.field.SkipDateTimeField.set : $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1) >>>>>>>> org.joda.time.field.SkipDateTimeField.set : specialinvoke $r1.<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>($r2, $r3, null, null)
org.joda.time.field.SkipDateTimeField.set : specialinvoke $r1.<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>($r2, $r3, null, null) >>>>>>>> org.joda.time.DateTimeFieldType.getName : $r1 = r0.<org.joda.time.DateTimeFieldType: java.lang.String iName>
org.joda.time.DateTimeFieldType.getName : $r1 = r0.<org.joda.time.DateTimeFieldType: java.lang.String iName> >>>>>>>> org.joda.time.DateTimeFieldType.getName : return $r1
org.joda.time.DateTimeFieldType.getName : return $r1 >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : $r5 = new java.lang.StringBuffer
org.joda.time.IllegalFieldValueException.createMessage : $r5 = new java.lang.StringBuffer >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : specialinvoke $r5.<java.lang.StringBuffer: void <init>()>()
org.joda.time.IllegalFieldValueException.createMessage : specialinvoke $r5.<java.lang.StringBuffer: void <init>()>() >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Value ")
org.joda.time.IllegalFieldValueException.createMessage : $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Value ") >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1)
org.joda.time.IllegalFieldValueException.createMessage : $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1) >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" for ")
org.joda.time.IllegalFieldValueException.createMessage : $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" for ") >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0)
org.joda.time.IllegalFieldValueException.createMessage : $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0) >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : r6 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32)
org.joda.time.IllegalFieldValueException.createMessage : r6 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32) >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : if r2 != null
org.joda.time.IllegalFieldValueException.createMessage : if r2 != null >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : if r3 != null
org.joda.time.IllegalFieldValueException.createMessage : if r3 != null >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : virtualinvoke r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("is not supported")
org.joda.time.IllegalFieldValueException.createMessage : virtualinvoke r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("is not supported") >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : goto [?= (branch)]
org.joda.time.IllegalFieldValueException.createMessage : goto [?= (branch)] >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : if r4 == null
org.joda.time.IllegalFieldValueException.createMessage : if r4 == null >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : $r23 = virtualinvoke r6.<java.lang.StringBuffer: java.lang.String toString()>()
org.joda.time.IllegalFieldValueException.createMessage : $r23 = virtualinvoke r6.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : return $r23
org.joda.time.IllegalFieldValueException.createMessage : return $r23 >>>>>>>> org.joda.time.field.SkipDateTimeField.set : throw $r1
org.joda.time.field.SkipDateTimeField.set : throw $r1 >>>>>>>> org.joda.time.IllegalFieldValueException.getDateTimeFieldType : $r1 = r0.<org.joda.time.IllegalFieldValueException: org.joda.time.DateTimeFieldType iDateTimeFieldType>
org.joda.time.IllegalFieldValueException.getDateTimeFieldType : $r1 = r0.<org.joda.time.IllegalFieldValueException: org.joda.time.DateTimeFieldType iDateTimeFieldType> >>>>>>>> org.joda.time.IllegalFieldValueException.getDateTimeFieldType : return $r1
org.joda.time.IllegalFieldValueException.getDateTimeFieldType : return $r1 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.equals : if r0 != r1
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.equals : if r0 != r1 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.equals : return 1
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.equals : return 1 >>>>>>>> org.joda.time.IllegalFieldValueException.getDurationFieldType : $r1 = r0.<org.joda.time.IllegalFieldValueException: org.joda.time.DurationFieldType iDurationFieldType>
org.joda.time.IllegalFieldValueException.getDurationFieldType : $r1 = r0.<org.joda.time.IllegalFieldValueException: org.joda.time.DurationFieldType iDurationFieldType> >>>>>>>> org.joda.time.IllegalFieldValueException.getDurationFieldType : return $r1
org.joda.time.IllegalFieldValueException.getDurationFieldType : return $r1 >>>>>>>> org.joda.time.IllegalFieldValueException.getFieldName : $r1 = r0.<org.joda.time.IllegalFieldValueException: java.lang.String iFieldName>
org.joda.time.IllegalFieldValueException.getFieldName : $r1 = r0.<org.joda.time.IllegalFieldValueException: java.lang.String iFieldName> >>>>>>>> org.joda.time.IllegalFieldValueException.getFieldName : return $r1
org.joda.time.IllegalFieldValueException.getFieldName : return $r1 >>>>>>>> org.joda.time.IllegalFieldValueException.getIllegalNumberValue : $r1 = r0.<org.joda.time.IllegalFieldValueException: java.lang.Number iNumberValue>
org.joda.time.IllegalFieldValueException.getIllegalNumberValue : $r1 = r0.<org.joda.time.IllegalFieldValueException: java.lang.Number iNumberValue> >>>>>>>> org.joda.time.IllegalFieldValueException.getIllegalNumberValue : return $r1
org.joda.time.IllegalFieldValueException.getIllegalNumberValue : return $r1 >>>>>>>> org.joda.time.IllegalFieldValueException.getIllegalStringValue : $r1 = r0.<org.joda.time.IllegalFieldValueException: java.lang.String iStringValue>
org.joda.time.IllegalFieldValueException.getIllegalStringValue : $r1 = r0.<org.joda.time.IllegalFieldValueException: java.lang.String iStringValue> >>>>>>>> org.joda.time.IllegalFieldValueException.getIllegalStringValue : return $r1
org.joda.time.IllegalFieldValueException.getIllegalStringValue : return $r1 >>>>>>>> org.joda.time.IllegalFieldValueException.getIllegalValueAsString : r1 = r0.<org.joda.time.IllegalFieldValueException: java.lang.String iStringValue>
org.joda.time.IllegalFieldValueException.getIllegalValueAsString : r1 = r0.<org.joda.time.IllegalFieldValueException: java.lang.String iStringValue> >>>>>>>> org.joda.time.IllegalFieldValueException.getIllegalValueAsString : if r1 != null
org.joda.time.IllegalFieldValueException.getIllegalValueAsString : if r1 != null >>>>>>>> org.joda.time.IllegalFieldValueException.getIllegalValueAsString : $r2 = r0.<org.joda.time.IllegalFieldValueException: java.lang.Number iNumberValue>
org.joda.time.IllegalFieldValueException.getIllegalValueAsString : $r2 = r0.<org.joda.time.IllegalFieldValueException: java.lang.Number iNumberValue> >>>>>>>> org.joda.time.IllegalFieldValueException.getIllegalValueAsString : r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2)
org.joda.time.IllegalFieldValueException.getIllegalValueAsString : r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2) >>>>>>>> org.joda.time.IllegalFieldValueException.getIllegalValueAsString : return r1
org.joda.time.IllegalFieldValueException.getIllegalValueAsString : return r1 >>>>>>>> org.joda.time.IllegalFieldValueException.getLowerBound : $r1 = r0.<org.joda.time.IllegalFieldValueException: java.lang.Number iLowerBound>
org.joda.time.IllegalFieldValueException.getLowerBound : $r1 = r0.<org.joda.time.IllegalFieldValueException: java.lang.Number iLowerBound> >>>>>>>> org.joda.time.IllegalFieldValueException.getLowerBound : return $r1
org.joda.time.IllegalFieldValueException.getLowerBound : return $r1 >>>>>>>> org.joda.time.IllegalFieldValueException.getUpperBound : $r1 = r0.<org.joda.time.IllegalFieldValueException: java.lang.Number iUpperBound>
org.joda.time.IllegalFieldValueException.getUpperBound : $r1 = r0.<org.joda.time.IllegalFieldValueException: java.lang.Number iUpperBound> >>>>>>>> org.joda.time.IllegalFieldValueException.getUpperBound : return $r1
