org.joda.time.DateTimeZone.forID : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.forID : $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("UTC")
org.joda.time.DateTimeZone.forID : $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("UTC") >>>>>>>> org.joda.time.DateTimeZone.forID : if $z0 == 0
org.joda.time.DateTimeZone.forID : if $z0 == 0 >>>>>>>> org.joda.time.DateTimeZone.forID : $r4 = <org.joda.time.DateTimeZone: org.joda.time.tz.Provider cProvider>
org.joda.time.DateTimeZone.forID : $r4 = <org.joda.time.DateTimeZone: org.joda.time.tz.Provider cProvider> >>>>>>>> org.joda.time.DateTimeZone.forID : r1 = interfaceinvoke $r4.<org.joda.time.tz.Provider: org.joda.time.DateTimeZone getZone(java.lang.String)>(r0)
org.joda.time.DateTimeZone.forID : r1 = interfaceinvoke $r4.<org.joda.time.tz.Provider: org.joda.time.DateTimeZone getZone(java.lang.String)>(r0) >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : if r1 != null
org.joda.time.tz.ZoneInfoProvider.getZone : if r1 != null >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : $r5 = r0.<org.joda.time.tz.ZoneInfoProvider: java.util.Map iZoneInfoMap>
org.joda.time.tz.ZoneInfoProvider.getZone : $r5 = r0.<org.joda.time.tz.ZoneInfoProvider: java.util.Map iZoneInfoMap> >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : r2 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.joda.time.tz.ZoneInfoProvider.getZone : r2 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : if r2 != null
org.joda.time.tz.ZoneInfoProvider.getZone : if r2 != null >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r2)
org.joda.time.tz.ZoneInfoProvider.getZone : $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r2) >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : if $z0 == 0
org.joda.time.tz.ZoneInfoProvider.getZone : if $z0 == 0 >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : $z1 = r2 instanceof java.lang.ref.SoftReference
org.joda.time.tz.ZoneInfoProvider.getZone : $z1 = r2 instanceof java.lang.ref.SoftReference >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : if $z1 == 0
org.joda.time.tz.ZoneInfoProvider.getZone : if $z1 == 0 >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : r3 = (java.lang.ref.SoftReference) r2
org.joda.time.tz.ZoneInfoProvider.getZone : r3 = (java.lang.ref.SoftReference) r2 >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : $r7 = virtualinvoke r3.<java.lang.ref.SoftReference: java.lang.Object get()>()
org.joda.time.tz.ZoneInfoProvider.getZone : $r7 = virtualinvoke r3.<java.lang.ref.SoftReference: java.lang.Object get()>() >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : r4 = (org.joda.time.DateTimeZone) $r7
org.joda.time.tz.ZoneInfoProvider.getZone : r4 = (org.joda.time.DateTimeZone) $r7 >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : if r4 == null
org.joda.time.tz.ZoneInfoProvider.getZone : if r4 == null >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : return r4
org.joda.time.tz.ZoneInfoProvider.getZone : return r4 >>>>>>>> org.joda.time.DateTimeZone.forID : if r1 == null
org.joda.time.DateTimeZone.forID : if r1 == null >>>>>>>> org.joda.time.DateTimeZone.forID : return r1
org.joda.time.DateTimeZone.forID : return r1 >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>()
org.joda.time.DateTimeUtils.setCurrentMillisFixed : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>() >>>>>>>> org.joda.time.DateTimeUtils.checkPermission : r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>()
org.joda.time.DateTimeUtils.checkPermission : r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>() >>>>>>>> org.joda.time.DateTimeUtils.checkPermission : if r0 == null
org.joda.time.DateTimeUtils.checkPermission : if r0 == null >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : $r0 = new org.joda.time.DateTimeUtils$FixedMillisProvider
org.joda.time.DateTimeUtils.setCurrentMillisFixed : $r0 = new org.joda.time.DateTimeUtils$FixedMillisProvider >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : specialinvoke $r0.<org.joda.time.DateTimeUtils$FixedMillisProvider: void <init>(long)>(l0)
org.joda.time.DateTimeUtils.setCurrentMillisFixed : specialinvoke $r0.<org.joda.time.DateTimeUtils$FixedMillisProvider: void <init>(long)>(l0) >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0
org.joda.time.DateTimeUtils.setCurrentMillisFixed : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0 >>>>>>>> org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> >>>>>>>> org.joda.time.DateTimeZone.getDefault : if r0 != null
org.joda.time.DateTimeZone.getDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.DateTimeZone.getDefault : return r0 >>>>>>>> org.joda.time.DateTimeZone.setDefault : r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>()
org.joda.time.DateTimeZone.setDefault : r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>() >>>>>>>> org.joda.time.DateTimeZone.setDefault : if r1 == null
org.joda.time.DateTimeZone.setDefault : if r1 == null >>>>>>>> org.joda.time.DateTimeZone.setDefault : if r0 != null
org.joda.time.DateTimeZone.setDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.setDefault : $r6 = class "org/joda/time/DateTimeZone"
org.joda.time.DateTimeZone.setDefault : $r6 = class "org/joda/time/DateTimeZone" >>>>>>>> org.joda.time.DateTimeZone.setDefault : r3 = $r6
org.joda.time.DateTimeZone.setDefault : r3 = $r6 >>>>>>>> org.joda.time.DateTimeZone.setDefault : entermonitor $r6
org.joda.time.DateTimeZone.setDefault : entermonitor $r6 >>>>>>>> org.joda.time.DateTimeZone.setDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r0
org.joda.time.DateTimeZone.setDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r0 >>>>>>>> org.joda.time.DateTimeZone.setDefault : exitmonitor r3
org.joda.time.DateTimeZone.setDefault : exitmonitor r3 >>>>>>>> org.joda.time.DateTimeZone.setDefault : goto [?= return]
org.joda.time.DateTimeZone.setDefault : goto [?= return] >>>>>>>> org.joda.time.base.AbstractInstant.toString : $r1 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTime()>()
org.joda.time.base.AbstractInstant.toString : $r1 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTime()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.dateTime : $r0 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dt>
org.joda.time.format.ISODateTimeFormat.dateTime : $r0 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dt> >>>>>>>> org.joda.time.format.ISODateTimeFormat.dateTime : if $r0 != null
org.joda.time.format.ISODateTimeFormat.dateTime : if $r0 != null >>>>>>>> org.joda.time.format.ISODateTimeFormat.dateTime : $r1 = new org.joda.time.format.DateTimeFormatterBuilder
org.joda.time.format.ISODateTimeFormat.dateTime : $r1 = new org.joda.time.format.DateTimeFormatterBuilder >>>>>>>> org.joda.time.format.ISODateTimeFormat.dateTime : specialinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>()
org.joda.time.format.ISODateTimeFormat.dateTime : specialinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.dateTime : $r2 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter date()>()
org.joda.time.format.ISODateTimeFormat.dateTime : $r2 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter date()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.date : $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter yearMonthDay()>()
org.joda.time.format.ISODateTimeFormat.date : $r0 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter yearMonthDay()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.yearMonthDay : $r0 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter ymd>
org.joda.time.format.ISODateTimeFormat.yearMonthDay : $r0 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter ymd> >>>>>>>> org.joda.time.format.ISODateTimeFormat.yearMonthDay : if $r0 != null
org.joda.time.format.ISODateTimeFormat.yearMonthDay : if $r0 != null >>>>>>>> org.joda.time.format.ISODateTimeFormat.yearMonthDay : $r1 = new org.joda.time.format.DateTimeFormatterBuilder
org.joda.time.format.ISODateTimeFormat.yearMonthDay : $r1 = new org.joda.time.format.DateTimeFormatterBuilder >>>>>>>> org.joda.time.format.ISODateTimeFormat.yearMonthDay : specialinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>()
org.joda.time.format.ISODateTimeFormat.yearMonthDay : specialinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.yearMonthDay : $r2 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter yearElement()>()
org.joda.time.format.ISODateTimeFormat.yearMonthDay : $r2 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter yearElement()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.yearElement : $r0 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter ye>
org.joda.time.format.ISODateTimeFormat.yearElement : $r0 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter ye> >>>>>>>> org.joda.time.format.ISODateTimeFormat.yearElement : if $r0 != null
org.joda.time.format.ISODateTimeFormat.yearElement : if $r0 != null >>>>>>>> org.joda.time.format.ISODateTimeFormat.yearElement : $r1 = new org.joda.time.format.DateTimeFormatterBuilder
org.joda.time.format.ISODateTimeFormat.yearElement : $r1 = new org.joda.time.format.DateTimeFormatterBuilder >>>>>>>> org.joda.time.format.ISODateTimeFormat.yearElement : specialinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>()
org.joda.time.format.ISODateTimeFormat.yearElement : specialinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.yearElement : $r2 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYear(int,int)>(4, 9)
org.joda.time.format.ISODateTimeFormat.yearElement : $r2 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendYear(int,int)>(4, 9) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendYear : $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>()
org.joda.time.format.DateTimeFormatterBuilder.appendYear : $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>() >>>>>>>> org.joda.time.DateTimeFieldType.year : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType YEAR_TYPE>
org.joda.time.DateTimeFieldType.year : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType YEAR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.year : return $r0
org.joda.time.DateTimeFieldType.year : return $r0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendYear : $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, i0, i1)
org.joda.time.format.DateTimeFormatterBuilder.appendYear : $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSignedDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, i0, i1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : if r1 != null
org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : if r1 != null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : if i1 >= i0
org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : if i1 >= i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : if i0 < 0
org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : if i0 < 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : if i1 > 0
org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : if i1 > 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : if i0 > 1
org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : if i0 > 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : $r6 = new org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber
org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : $r6 = new org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : specialinvoke $r6.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean,int)>(r1, i1, 1, i0)
org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : specialinvoke $r6.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean,int)>(r1, i1, 1, i0) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : $r7 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r6)
org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : $r7 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r6) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.append0 : r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object iFormatter> = null
org.joda.time.format.DateTimeFormatterBuilder.append0 : r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object iFormatter> = null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.append0 : $r2 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs>
org.joda.time.format.DateTimeFormatterBuilder.append0 : $r2 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.append0 : virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1)
org.joda.time.format.DateTimeFormatterBuilder.append0 : virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.append0 : $r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs>
org.joda.time.format.DateTimeFormatterBuilder.append0 : $r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.append0 : virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r1)
org.joda.time.format.DateTimeFormatterBuilder.append0 : virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.append0 : return r0
org.joda.time.format.DateTimeFormatterBuilder.append0 : return r0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : return $r7
org.joda.time.format.DateTimeFormatterBuilder.appendSignedDecimal : return $r7 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendYear : return $r2
org.joda.time.format.DateTimeFormatterBuilder.appendYear : return $r2 >>>>>>>> org.joda.time.format.ISODateTimeFormat.yearElement : $r3 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>()
org.joda.time.format.ISODateTimeFormat.yearElement : $r3 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>()
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r1 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object iFormatter>
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r1 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object iFormatter> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : if r1 != null
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : if r1 != null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $r4 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs>
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $r4 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>()
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : if $i0 != 2
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : if $i0 != 2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $r5 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs>
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $r5 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r2 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(0)
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r2 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(0) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $r6 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs>
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $r6 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r3 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>(1)
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r3 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object get(int)>(1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : if r2 == null
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : if r2 == null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : if r2 == r3
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : if r2 == r3 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r1 = r2
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r1 = r2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : goto [?= (branch)]
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : goto [?= (branch)] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object iFormatter> = r1
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object iFormatter> = r1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : return r1
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : return r1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r2 = null
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r2 = null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : $z0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isPrinter(java.lang.Object)>(r1)
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : $z0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isPrinter(java.lang.Object)>(r1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isPrinter : $z0 = r1 instanceof org.joda.time.format.DateTimePrinter
org.joda.time.format.DateTimeFormatterBuilder.isPrinter : $z0 = r1 instanceof org.joda.time.format.DateTimePrinter >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isPrinter : if $z0 == 0
org.joda.time.format.DateTimeFormatterBuilder.isPrinter : if $z0 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isPrinter : $z1 = r1 instanceof org.joda.time.format.DateTimeFormatterBuilder$Composite
org.joda.time.format.DateTimeFormatterBuilder.isPrinter : $z1 = r1 instanceof org.joda.time.format.DateTimeFormatterBuilder$Composite >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isPrinter : if $z1 == 0
org.joda.time.format.DateTimeFormatterBuilder.isPrinter : if $z1 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isPrinter : return 1
org.joda.time.format.DateTimeFormatterBuilder.isPrinter : return 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : if $z0 == 0
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : if $z0 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r2 = (org.joda.time.format.DateTimePrinter) r1
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r2 = (org.joda.time.format.DateTimePrinter) r1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r3 = null
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r3 = null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : $z1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isParser(java.lang.Object)>(r1)
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : $z1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isParser(java.lang.Object)>(r1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isParser : $z0 = r1 instanceof org.joda.time.format.DateTimeParser
org.joda.time.format.DateTimeFormatterBuilder.isParser : $z0 = r1 instanceof org.joda.time.format.DateTimeParser >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isParser : if $z0 == 0
org.joda.time.format.DateTimeFormatterBuilder.isParser : if $z0 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isParser : $z1 = r1 instanceof org.joda.time.format.DateTimeFormatterBuilder$Composite
org.joda.time.format.DateTimeFormatterBuilder.isParser : $z1 = r1 instanceof org.joda.time.format.DateTimeFormatterBuilder$Composite >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isParser : if $z1 == 0
org.joda.time.format.DateTimeFormatterBuilder.isParser : if $z1 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isParser : return 1
org.joda.time.format.DateTimeFormatterBuilder.isParser : return 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : if $z1 == 0
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : if $z1 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r3 = (org.joda.time.format.DateTimeParser) r1
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : r3 = (org.joda.time.format.DateTimeParser) r1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : if r2 != null
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : if r2 != null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : $r4 = new org.joda.time.format.DateTimeFormatter
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : $r4 = new org.joda.time.format.DateTimeFormatter >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : specialinvoke $r4.<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser)>(r2, r3)
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : specialinvoke $r4.<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser)>(r2, r3) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toFormatter : return $r4
org.joda.time.format.DateTimeFormatterBuilder.toFormatter : return $r4 >>>>>>>> org.joda.time.format.ISODateTimeFormat.yearElement : <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter ye> = $r3
org.joda.time.format.ISODateTimeFormat.yearElement : <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter ye> = $r3 >>>>>>>> org.joda.time.format.ISODateTimeFormat.yearElement : $r4 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter ye>
org.joda.time.format.ISODateTimeFormat.yearElement : $r4 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter ye> >>>>>>>> org.joda.time.format.ISODateTimeFormat.yearElement : return $r4
org.joda.time.format.ISODateTimeFormat.yearElement : return $r4 >>>>>>>> org.joda.time.format.ISODateTimeFormat.yearMonthDay : $r3 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>($r2)
org.joda.time.format.ISODateTimeFormat.yearMonthDay : $r3 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>($r2) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.append : if r1 != null
org.joda.time.format.DateTimeFormatterBuilder.append : if r1 != null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.append : $r3 = virtualinvoke r1.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter getPrinter()>()
org.joda.time.format.DateTimeFormatterBuilder.append : $r3 = virtualinvoke r1.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter getPrinter()>() >>>>>>>> org.joda.time.format.DateTimeFormatter.getPrinter : $r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter iPrinter>
org.joda.time.format.DateTimeFormatter.getPrinter : $r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter iPrinter> >>>>>>>> org.joda.time.format.DateTimeFormatter.getPrinter : return $r1
org.joda.time.format.DateTimeFormatter.getPrinter : return $r1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.append : $r4 = virtualinvoke r1.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser getParser()>()
org.joda.time.format.DateTimeFormatterBuilder.append : $r4 = virtualinvoke r1.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser getParser()>() >>>>>>>> org.joda.time.format.DateTimeFormatter.getParser : $r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser iParser>
org.joda.time.format.DateTimeFormatter.getParser : $r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser iParser> >>>>>>>> org.joda.time.format.DateTimeFormatter.getParser : return $r1
org.joda.time.format.DateTimeFormatter.getParser : return $r1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.append : $r5 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser)>($r3, $r4)
org.joda.time.format.DateTimeFormatterBuilder.append : $r5 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser)>($r3, $r4) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.append0 : $r4 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs>
org.joda.time.format.DateTimeFormatterBuilder.append0 : $r4 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.append0 : virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r2)
org.joda.time.format.DateTimeFormatterBuilder.append0 : virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r2) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.append : return $r5
org.joda.time.format.DateTimeFormatterBuilder.append : return $r5 >>>>>>>> org.joda.time.format.ISODateTimeFormat.yearMonthDay : $r4 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter monthElement()>()
org.joda.time.format.ISODateTimeFormat.yearMonthDay : $r4 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter monthElement()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.monthElement : $r0 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter mye>
org.joda.time.format.ISODateTimeFormat.monthElement : $r0 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter mye> >>>>>>>> org.joda.time.format.ISODateTimeFormat.monthElement : if $r0 != null
org.joda.time.format.ISODateTimeFormat.monthElement : if $r0 != null >>>>>>>> org.joda.time.format.ISODateTimeFormat.monthElement : $r1 = new org.joda.time.format.DateTimeFormatterBuilder
org.joda.time.format.ISODateTimeFormat.monthElement : $r1 = new org.joda.time.format.DateTimeFormatterBuilder >>>>>>>> org.joda.time.format.ISODateTimeFormat.monthElement : specialinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>()
org.joda.time.format.ISODateTimeFormat.monthElement : specialinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.monthElement : $r2 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>(45)
org.joda.time.format.ISODateTimeFormat.monthElement : $r2 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>(45) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendLiteral : $r1 = new org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral
org.joda.time.format.DateTimeFormatterBuilder.appendLiteral : $r1 = new org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendLiteral : specialinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void <init>(char)>(c0)
org.joda.time.format.DateTimeFormatterBuilder.appendLiteral : specialinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: void <init>(char)>(c0) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendLiteral : $r2 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r1)
org.joda.time.format.DateTimeFormatterBuilder.appendLiteral : $r2 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendLiteral : return $r2
org.joda.time.format.DateTimeFormatterBuilder.appendLiteral : return $r2 >>>>>>>> org.joda.time.format.ISODateTimeFormat.monthElement : $r3 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYear(int)>(2)
org.joda.time.format.ISODateTimeFormat.monthElement : $r3 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMonthOfYear(int)>(2) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendMonthOfYear : $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>()
org.joda.time.format.DateTimeFormatterBuilder.appendMonthOfYear : $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>() >>>>>>>> org.joda.time.DateTimeFieldType.monthOfYear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MONTH_OF_YEAR_TYPE>
org.joda.time.DateTimeFieldType.monthOfYear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MONTH_OF_YEAR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.monthOfYear : return $r0
org.joda.time.DateTimeFieldType.monthOfYear : return $r0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendMonthOfYear : $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, i0, 2)
org.joda.time.format.DateTimeFormatterBuilder.appendMonthOfYear : $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, i0, 2) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : if r1 != null
org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : if r1 != null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : if i1 >= i0
org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : if i1 >= i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : if i0 < 0
org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : if i0 < 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : if i1 > 0
org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : if i1 > 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : if i0 > 1
org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : if i0 > 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : $r6 = new org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber
org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : $r6 = new org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : specialinvoke $r6.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean,int)>(r1, i1, 0, i0)
org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : specialinvoke $r6.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: void <init>(org.joda.time.DateTimeFieldType,int,boolean,int)>(r1, i1, 0, i0) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : $r7 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r6)
org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : $r7 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r6) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : return $r7
org.joda.time.format.DateTimeFormatterBuilder.appendDecimal : return $r7 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendMonthOfYear : return $r2
org.joda.time.format.DateTimeFormatterBuilder.appendMonthOfYear : return $r2 >>>>>>>> org.joda.time.format.ISODateTimeFormat.monthElement : $r4 = virtualinvoke $r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>()
org.joda.time.format.ISODateTimeFormat.monthElement : $r4 = virtualinvoke $r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $r7 = new org.joda.time.format.DateTimeFormatterBuilder$Composite
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $r7 = new org.joda.time.format.DateTimeFormatterBuilder$Composite >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $r8 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs>
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : $r8 = r0.<org.joda.time.format.DateTimeFormatterBuilder: java.util.ArrayList iElementPairs> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : specialinvoke $r7.<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>($r8)
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : specialinvoke $r7.<org.joda.time.format.DateTimeFormatterBuilder$Composite: void <init>(java.util.List)>($r8) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : i0 = interfaceinvoke r1.<java.util.List: int size()>()
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : i0 = interfaceinvoke r1.<java.util.List: int size()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : i1 = 0
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : i1 = 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : if i1 >= i0
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : if i1 >= i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1)
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : $z0 = r4 instanceof org.joda.time.format.DateTimePrinter
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : $z0 = r4 instanceof org.joda.time.format.DateTimePrinter >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : if $z0 == 0
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : if $z0 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : $z1 = r4 instanceof org.joda.time.format.DateTimeFormatterBuilder$Composite
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : $z1 = r4 instanceof org.joda.time.format.DateTimeFormatterBuilder$Composite >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : if $z1 == 0
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : if $z1 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r4)
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r4) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : $i2 = i1 + 1
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : $i2 = i1 + 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : r7 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i2)
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : r7 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i2) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : $z3 = r7 instanceof org.joda.time.format.DateTimeParser
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : $z3 = r7 instanceof org.joda.time.format.DateTimeParser >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : if $z3 == 0
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : if $z3 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : $z4 = r7 instanceof org.joda.time.format.DateTimeFormatterBuilder$Composite
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : $z4 = r7 instanceof org.joda.time.format.DateTimeFormatterBuilder$Composite >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : if $z4 == 0
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : if $z4 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r7)
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r7) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : i1 = i1 + 2
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : i1 = i1 + 2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : goto [?= (branch)]
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : goto [?= (branch)] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.estimatePrintedLength : return 1
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.estimatePrintedLength : return 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.estimatePrintedLength : $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: int iMaxParsedDigits>
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.estimatePrintedLength : $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: int iMaxParsedDigits> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.estimatePrintedLength : return $i0
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.estimatePrintedLength : return $i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.estimateParsedLength : return 1
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.estimateParsedLength : return 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.estimateParsedLength : $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int iMaxParsedDigits>
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.estimateParsedLength : $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int iMaxParsedDigits> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.estimateParsedLength : return $i0
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.estimateParsedLength : return $i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r1 = $r7
org.joda.time.format.DateTimeFormatterBuilder.getFormatter : r1 = $r7 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isPrinter : $r2 = (org.joda.time.format.DateTimeFormatterBuilder$Composite) r1
org.joda.time.format.DateTimeFormatterBuilder.isPrinter : $r2 = (org.joda.time.format.DateTimeFormatterBuilder$Composite) r1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isPrinter : $z2 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder$Composite: boolean isPrinter()>()
org.joda.time.format.DateTimeFormatterBuilder.isPrinter : $z2 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder$Composite: boolean isPrinter()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.isPrinter : $r1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: org.joda.time.format.DateTimePrinter[] iPrinters>
org.joda.time.format.DateTimeFormatterBuilder$Composite.isPrinter : $r1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: org.joda.time.format.DateTimePrinter[] iPrinters> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.isPrinter : if $r1 == null
org.joda.time.format.DateTimeFormatterBuilder$Composite.isPrinter : if $r1 == null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.isPrinter : $z0 = 1
org.joda.time.format.DateTimeFormatterBuilder$Composite.isPrinter : $z0 = 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.isPrinter : goto [?= return $z0]
org.joda.time.format.DateTimeFormatterBuilder$Composite.isPrinter : goto [?= return $z0] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.isPrinter : return $z0
org.joda.time.format.DateTimeFormatterBuilder$Composite.isPrinter : return $z0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isPrinter : return $z2
org.joda.time.format.DateTimeFormatterBuilder.isPrinter : return $z2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isParser : $r2 = (org.joda.time.format.DateTimeFormatterBuilder$Composite) r1
org.joda.time.format.DateTimeFormatterBuilder.isParser : $r2 = (org.joda.time.format.DateTimeFormatterBuilder$Composite) r1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isParser : $z2 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder$Composite: boolean isParser()>()
org.joda.time.format.DateTimeFormatterBuilder.isParser : $z2 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder$Composite: boolean isParser()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.isParser : $r1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: org.joda.time.format.DateTimeParser[] iParsers>
org.joda.time.format.DateTimeFormatterBuilder$Composite.isParser : $r1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: org.joda.time.format.DateTimeParser[] iParsers> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.isParser : if $r1 == null
org.joda.time.format.DateTimeFormatterBuilder$Composite.isParser : if $r1 == null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.isParser : $z0 = 1
org.joda.time.format.DateTimeFormatterBuilder$Composite.isParser : $z0 = 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.isParser : goto [?= return $z0]
org.joda.time.format.DateTimeFormatterBuilder$Composite.isParser : goto [?= return $z0] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.isParser : return $z0
org.joda.time.format.DateTimeFormatterBuilder$Composite.isParser : return $z0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.isParser : return $z2
org.joda.time.format.DateTimeFormatterBuilder.isParser : return $z2 >>>>>>>> org.joda.time.format.ISODateTimeFormat.monthElement : <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter mye> = $r4
org.joda.time.format.ISODateTimeFormat.monthElement : <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter mye> = $r4 >>>>>>>> org.joda.time.format.ISODateTimeFormat.monthElement : $r5 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter mye>
org.joda.time.format.ISODateTimeFormat.monthElement : $r5 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter mye> >>>>>>>> org.joda.time.format.ISODateTimeFormat.monthElement : return $r5
org.joda.time.format.ISODateTimeFormat.monthElement : return $r5 >>>>>>>> org.joda.time.format.ISODateTimeFormat.yearMonthDay : $r5 = virtualinvoke $r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>($r4)
org.joda.time.format.ISODateTimeFormat.yearMonthDay : $r5 = virtualinvoke $r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>($r4) >>>>>>>> org.joda.time.format.ISODateTimeFormat.yearMonthDay : $r6 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dayOfMonthElement()>()
org.joda.time.format.ISODateTimeFormat.yearMonthDay : $r6 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dayOfMonthElement()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.dayOfMonthElement : $r0 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dme>
org.joda.time.format.ISODateTimeFormat.dayOfMonthElement : $r0 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dme> >>>>>>>> org.joda.time.format.ISODateTimeFormat.dayOfMonthElement : if $r0 != null
org.joda.time.format.ISODateTimeFormat.dayOfMonthElement : if $r0 != null >>>>>>>> org.joda.time.format.ISODateTimeFormat.dayOfMonthElement : $r1 = new org.joda.time.format.DateTimeFormatterBuilder
org.joda.time.format.ISODateTimeFormat.dayOfMonthElement : $r1 = new org.joda.time.format.DateTimeFormatterBuilder >>>>>>>> org.joda.time.format.ISODateTimeFormat.dayOfMonthElement : specialinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>()
org.joda.time.format.ISODateTimeFormat.dayOfMonthElement : specialinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.dayOfMonthElement : $r2 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>(45)
org.joda.time.format.ISODateTimeFormat.dayOfMonthElement : $r2 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>(45) >>>>>>>> org.joda.time.format.ISODateTimeFormat.dayOfMonthElement : $r3 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfMonth(int)>(2)
org.joda.time.format.ISODateTimeFormat.dayOfMonthElement : $r3 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDayOfMonth(int)>(2) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendDayOfMonth : $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>()
org.joda.time.format.DateTimeFormatterBuilder.appendDayOfMonth : $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>() >>>>>>>> org.joda.time.DateTimeFieldType.dayOfMonth : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType DAY_OF_MONTH_TYPE>
org.joda.time.DateTimeFieldType.dayOfMonth : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType DAY_OF_MONTH_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.dayOfMonth : return $r0
org.joda.time.DateTimeFieldType.dayOfMonth : return $r0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendDayOfMonth : $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, i0, 2)
org.joda.time.format.DateTimeFormatterBuilder.appendDayOfMonth : $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, i0, 2) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendDayOfMonth : return $r2
org.joda.time.format.DateTimeFormatterBuilder.appendDayOfMonth : return $r2 >>>>>>>> org.joda.time.format.ISODateTimeFormat.dayOfMonthElement : $r4 = virtualinvoke $r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>()
org.joda.time.format.ISODateTimeFormat.dayOfMonthElement : $r4 = virtualinvoke $r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.dayOfMonthElement : <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dme> = $r4
org.joda.time.format.ISODateTimeFormat.dayOfMonthElement : <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dme> = $r4 >>>>>>>> org.joda.time.format.ISODateTimeFormat.dayOfMonthElement : $r5 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dme>
org.joda.time.format.ISODateTimeFormat.dayOfMonthElement : $r5 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dme> >>>>>>>> org.joda.time.format.ISODateTimeFormat.dayOfMonthElement : return $r5
org.joda.time.format.ISODateTimeFormat.dayOfMonthElement : return $r5 >>>>>>>> org.joda.time.format.ISODateTimeFormat.yearMonthDay : $r7 = virtualinvoke $r5.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>($r6)
org.joda.time.format.ISODateTimeFormat.yearMonthDay : $r7 = virtualinvoke $r5.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>($r6) >>>>>>>> org.joda.time.format.ISODateTimeFormat.yearMonthDay : $r8 = virtualinvoke $r7.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>()
org.joda.time.format.ISODateTimeFormat.yearMonthDay : $r8 = virtualinvoke $r7.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : $r5 = (org.joda.time.format.DateTimeFormatterBuilder$Composite) r4
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : $r5 = (org.joda.time.format.DateTimeFormatterBuilder$Composite) r4 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : $r6 = $r5.<org.joda.time.format.DateTimeFormatterBuilder$Composite: org.joda.time.format.DateTimePrinter[] iPrinters>
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : $r6 = $r5.<org.joda.time.format.DateTimeFormatterBuilder$Composite: org.joda.time.format.DateTimePrinter[] iPrinters> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: void addArrayToList(java.util.List,java.lang.Object[])>(r2, $r6)
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: void addArrayToList(java.util.List,java.lang.Object[])>(r2, $r6) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.addArrayToList : if r2 == null
org.joda.time.format.DateTimeFormatterBuilder$Composite.addArrayToList : if r2 == null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.addArrayToList : i0 = 0
org.joda.time.format.DateTimeFormatterBuilder$Composite.addArrayToList : i0 = 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.addArrayToList : $i1 = lengthof r2
org.joda.time.format.DateTimeFormatterBuilder$Composite.addArrayToList : $i1 = lengthof r2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.addArrayToList : if i0 >= $i1
org.joda.time.format.DateTimeFormatterBuilder$Composite.addArrayToList : if i0 >= $i1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.addArrayToList : $r3 = r2[i0]
org.joda.time.format.DateTimeFormatterBuilder$Composite.addArrayToList : $r3 = r2[i0] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.addArrayToList : interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r3)
org.joda.time.format.DateTimeFormatterBuilder$Composite.addArrayToList : interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r3) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.addArrayToList : i0 = i0 + 1
org.joda.time.format.DateTimeFormatterBuilder$Composite.addArrayToList : i0 = i0 + 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.addArrayToList : goto [?= $i1 = lengthof r2]
org.joda.time.format.DateTimeFormatterBuilder$Composite.addArrayToList : goto [?= $i1 = lengthof r2] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : goto [?= $i2 = i1 + 1]
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : goto [?= $i2 = i1 + 1] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : $r8 = (org.joda.time.format.DateTimeFormatterBuilder$Composite) r7
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : $r8 = (org.joda.time.format.DateTimeFormatterBuilder$Composite) r7 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : $r9 = $r8.<org.joda.time.format.DateTimeFormatterBuilder$Composite: org.joda.time.format.DateTimeParser[] iParsers>
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : $r9 = $r8.<org.joda.time.format.DateTimeFormatterBuilder$Composite: org.joda.time.format.DateTimeParser[] iParsers> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: void addArrayToList(java.util.List,java.lang.Object[])>(r3, $r9)
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: void addArrayToList(java.util.List,java.lang.Object[])>(r3, $r9) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : goto [?= i1 = i1 + 2]
org.joda.time.format.DateTimeFormatterBuilder$Composite.decompose : goto [?= i1 = i1 + 2] >>>>>>>> org.joda.time.format.ISODateTimeFormat.yearMonthDay : <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter ymd> = $r8
org.joda.time.format.ISODateTimeFormat.yearMonthDay : <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter ymd> = $r8 >>>>>>>> org.joda.time.format.ISODateTimeFormat.yearMonthDay : $r9 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter ymd>
org.joda.time.format.ISODateTimeFormat.yearMonthDay : $r9 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter ymd> >>>>>>>> org.joda.time.format.ISODateTimeFormat.yearMonthDay : return $r9
org.joda.time.format.ISODateTimeFormat.yearMonthDay : return $r9 >>>>>>>> org.joda.time.format.ISODateTimeFormat.date : return $r0
org.joda.time.format.ISODateTimeFormat.date : return $r0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.dateTime : $r3 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>($r2)
org.joda.time.format.ISODateTimeFormat.dateTime : $r3 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>($r2) >>>>>>>> org.joda.time.format.ISODateTimeFormat.dateTime : $r4 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter tTime()>()
org.joda.time.format.ISODateTimeFormat.dateTime : $r4 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter tTime()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.tTime : $r0 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter tt>
org.joda.time.format.ISODateTimeFormat.tTime : $r0 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter tt> >>>>>>>> org.joda.time.format.ISODateTimeFormat.tTime : if $r0 != null
org.joda.time.format.ISODateTimeFormat.tTime : if $r0 != null >>>>>>>> org.joda.time.format.ISODateTimeFormat.tTime : $r1 = new org.joda.time.format.DateTimeFormatterBuilder
org.joda.time.format.ISODateTimeFormat.tTime : $r1 = new org.joda.time.format.DateTimeFormatterBuilder >>>>>>>> org.joda.time.format.ISODateTimeFormat.tTime : specialinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>()
org.joda.time.format.ISODateTimeFormat.tTime : specialinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.tTime : $r2 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter literalTElement()>()
org.joda.time.format.ISODateTimeFormat.tTime : $r2 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter literalTElement()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.literalTElement : $r0 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter lte>
org.joda.time.format.ISODateTimeFormat.literalTElement : $r0 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter lte> >>>>>>>> org.joda.time.format.ISODateTimeFormat.literalTElement : if $r0 != null
org.joda.time.format.ISODateTimeFormat.literalTElement : if $r0 != null >>>>>>>> org.joda.time.format.ISODateTimeFormat.literalTElement : $r1 = new org.joda.time.format.DateTimeFormatterBuilder
org.joda.time.format.ISODateTimeFormat.literalTElement : $r1 = new org.joda.time.format.DateTimeFormatterBuilder >>>>>>>> org.joda.time.format.ISODateTimeFormat.literalTElement : specialinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>()
org.joda.time.format.ISODateTimeFormat.literalTElement : specialinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.literalTElement : $r2 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>(84)
org.joda.time.format.ISODateTimeFormat.literalTElement : $r2 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>(84) >>>>>>>> org.joda.time.format.ISODateTimeFormat.literalTElement : $r3 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>()
org.joda.time.format.ISODateTimeFormat.literalTElement : $r3 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.literalTElement : <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter lte> = $r3
org.joda.time.format.ISODateTimeFormat.literalTElement : <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter lte> = $r3 >>>>>>>> org.joda.time.format.ISODateTimeFormat.literalTElement : $r4 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter lte>
org.joda.time.format.ISODateTimeFormat.literalTElement : $r4 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter lte> >>>>>>>> org.joda.time.format.ISODateTimeFormat.literalTElement : return $r4
org.joda.time.format.ISODateTimeFormat.literalTElement : return $r4 >>>>>>>> org.joda.time.format.ISODateTimeFormat.tTime : $r3 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>($r2)
org.joda.time.format.ISODateTimeFormat.tTime : $r3 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>($r2) >>>>>>>> org.joda.time.format.ISODateTimeFormat.tTime : $r4 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter time()>()
org.joda.time.format.ISODateTimeFormat.tTime : $r4 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter time()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.time : $r0 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter t>
org.joda.time.format.ISODateTimeFormat.time : $r0 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter t> >>>>>>>> org.joda.time.format.ISODateTimeFormat.time : if $r0 != null
org.joda.time.format.ISODateTimeFormat.time : if $r0 != null >>>>>>>> org.joda.time.format.ISODateTimeFormat.time : $r1 = new org.joda.time.format.DateTimeFormatterBuilder
org.joda.time.format.ISODateTimeFormat.time : $r1 = new org.joda.time.format.DateTimeFormatterBuilder >>>>>>>> org.joda.time.format.ISODateTimeFormat.time : specialinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>()
org.joda.time.format.ISODateTimeFormat.time : specialinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.time : $r2 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>()
org.joda.time.format.ISODateTimeFormat.time : $r2 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.hourMinuteSecondFraction : $r0 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hmsf>
org.joda.time.format.ISODateTimeFormat.hourMinuteSecondFraction : $r0 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hmsf> >>>>>>>> org.joda.time.format.ISODateTimeFormat.hourMinuteSecondFraction : if $r0 != null
org.joda.time.format.ISODateTimeFormat.hourMinuteSecondFraction : if $r0 != null >>>>>>>> org.joda.time.format.ISODateTimeFormat.hourMinuteSecondFraction : $r1 = new org.joda.time.format.DateTimeFormatterBuilder
org.joda.time.format.ISODateTimeFormat.hourMinuteSecondFraction : $r1 = new org.joda.time.format.DateTimeFormatterBuilder >>>>>>>> org.joda.time.format.ISODateTimeFormat.hourMinuteSecondFraction : specialinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>()
org.joda.time.format.ISODateTimeFormat.hourMinuteSecondFraction : specialinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.hourMinuteSecondFraction : $r2 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hourElement()>()
org.joda.time.format.ISODateTimeFormat.hourMinuteSecondFraction : $r2 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hourElement()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.hourElement : $r0 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hde>
org.joda.time.format.ISODateTimeFormat.hourElement : $r0 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hde> >>>>>>>> org.joda.time.format.ISODateTimeFormat.hourElement : if $r0 != null
org.joda.time.format.ISODateTimeFormat.hourElement : if $r0 != null >>>>>>>> org.joda.time.format.ISODateTimeFormat.hourElement : $r1 = new org.joda.time.format.DateTimeFormatterBuilder
org.joda.time.format.ISODateTimeFormat.hourElement : $r1 = new org.joda.time.format.DateTimeFormatterBuilder >>>>>>>> org.joda.time.format.ISODateTimeFormat.hourElement : specialinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>()
org.joda.time.format.ISODateTimeFormat.hourElement : specialinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.hourElement : $r2 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHourOfDay(int)>(2)
org.joda.time.format.ISODateTimeFormat.hourElement : $r2 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendHourOfDay(int)>(2) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendHourOfDay : $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>()
org.joda.time.format.DateTimeFormatterBuilder.appendHourOfDay : $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>() >>>>>>>> org.joda.time.DateTimeFieldType.hourOfDay : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType HOUR_OF_DAY_TYPE>
org.joda.time.DateTimeFieldType.hourOfDay : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType HOUR_OF_DAY_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.hourOfDay : return $r0
org.joda.time.DateTimeFieldType.hourOfDay : return $r0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendHourOfDay : $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, i0, 2)
org.joda.time.format.DateTimeFormatterBuilder.appendHourOfDay : $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, i0, 2) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendHourOfDay : return $r2
org.joda.time.format.DateTimeFormatterBuilder.appendHourOfDay : return $r2 >>>>>>>> org.joda.time.format.ISODateTimeFormat.hourElement : $r3 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>()
org.joda.time.format.ISODateTimeFormat.hourElement : $r3 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.hourElement : <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hde> = $r3
org.joda.time.format.ISODateTimeFormat.hourElement : <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hde> = $r3 >>>>>>>> org.joda.time.format.ISODateTimeFormat.hourElement : $r4 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hde>
org.joda.time.format.ISODateTimeFormat.hourElement : $r4 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hde> >>>>>>>> org.joda.time.format.ISODateTimeFormat.hourElement : return $r4
org.joda.time.format.ISODateTimeFormat.hourElement : return $r4 >>>>>>>> org.joda.time.format.ISODateTimeFormat.hourMinuteSecondFraction : $r3 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>($r2)
org.joda.time.format.ISODateTimeFormat.hourMinuteSecondFraction : $r3 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>($r2) >>>>>>>> org.joda.time.format.ISODateTimeFormat.hourMinuteSecondFraction : $r4 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter minuteElement()>()
org.joda.time.format.ISODateTimeFormat.hourMinuteSecondFraction : $r4 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter minuteElement()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.minuteElement : $r0 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter mhe>
org.joda.time.format.ISODateTimeFormat.minuteElement : $r0 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter mhe> >>>>>>>> org.joda.time.format.ISODateTimeFormat.minuteElement : if $r0 != null
org.joda.time.format.ISODateTimeFormat.minuteElement : if $r0 != null >>>>>>>> org.joda.time.format.ISODateTimeFormat.minuteElement : $r1 = new org.joda.time.format.DateTimeFormatterBuilder
org.joda.time.format.ISODateTimeFormat.minuteElement : $r1 = new org.joda.time.format.DateTimeFormatterBuilder >>>>>>>> org.joda.time.format.ISODateTimeFormat.minuteElement : specialinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>()
org.joda.time.format.ISODateTimeFormat.minuteElement : specialinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.minuteElement : $r2 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>(58)
org.joda.time.format.ISODateTimeFormat.minuteElement : $r2 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>(58) >>>>>>>> org.joda.time.format.ISODateTimeFormat.minuteElement : $r3 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMinuteOfHour(int)>(2)
org.joda.time.format.ISODateTimeFormat.minuteElement : $r3 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendMinuteOfHour(int)>(2) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendMinuteOfHour : $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>()
org.joda.time.format.DateTimeFormatterBuilder.appendMinuteOfHour : $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>() >>>>>>>> org.joda.time.DateTimeFieldType.minuteOfHour : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MINUTE_OF_HOUR_TYPE>
org.joda.time.DateTimeFieldType.minuteOfHour : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MINUTE_OF_HOUR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.minuteOfHour : return $r0
org.joda.time.DateTimeFieldType.minuteOfHour : return $r0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendMinuteOfHour : $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, i0, 2)
org.joda.time.format.DateTimeFormatterBuilder.appendMinuteOfHour : $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, i0, 2) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendMinuteOfHour : return $r2
org.joda.time.format.DateTimeFormatterBuilder.appendMinuteOfHour : return $r2 >>>>>>>> org.joda.time.format.ISODateTimeFormat.minuteElement : $r4 = virtualinvoke $r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>()
org.joda.time.format.ISODateTimeFormat.minuteElement : $r4 = virtualinvoke $r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.minuteElement : <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter mhe> = $r4
org.joda.time.format.ISODateTimeFormat.minuteElement : <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter mhe> = $r4 >>>>>>>> org.joda.time.format.ISODateTimeFormat.minuteElement : $r5 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter mhe>
org.joda.time.format.ISODateTimeFormat.minuteElement : $r5 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter mhe> >>>>>>>> org.joda.time.format.ISODateTimeFormat.minuteElement : return $r5
org.joda.time.format.ISODateTimeFormat.minuteElement : return $r5 >>>>>>>> org.joda.time.format.ISODateTimeFormat.hourMinuteSecondFraction : $r5 = virtualinvoke $r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>($r4)
org.joda.time.format.ISODateTimeFormat.hourMinuteSecondFraction : $r5 = virtualinvoke $r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>($r4) >>>>>>>> org.joda.time.format.ISODateTimeFormat.hourMinuteSecondFraction : $r6 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter secondElement()>()
org.joda.time.format.ISODateTimeFormat.hourMinuteSecondFraction : $r6 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter secondElement()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.secondElement : $r0 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter sme>
org.joda.time.format.ISODateTimeFormat.secondElement : $r0 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter sme> >>>>>>>> org.joda.time.format.ISODateTimeFormat.secondElement : if $r0 != null
org.joda.time.format.ISODateTimeFormat.secondElement : if $r0 != null >>>>>>>> org.joda.time.format.ISODateTimeFormat.secondElement : $r1 = new org.joda.time.format.DateTimeFormatterBuilder
org.joda.time.format.ISODateTimeFormat.secondElement : $r1 = new org.joda.time.format.DateTimeFormatterBuilder >>>>>>>> org.joda.time.format.ISODateTimeFormat.secondElement : specialinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>()
org.joda.time.format.ISODateTimeFormat.secondElement : specialinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.secondElement : $r2 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>(58)
org.joda.time.format.ISODateTimeFormat.secondElement : $r2 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>(58) >>>>>>>> org.joda.time.format.ISODateTimeFormat.secondElement : $r3 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSecondOfMinute(int)>(2)
org.joda.time.format.ISODateTimeFormat.secondElement : $r3 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendSecondOfMinute(int)>(2) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendSecondOfMinute : $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>()
org.joda.time.format.DateTimeFormatterBuilder.appendSecondOfMinute : $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>() >>>>>>>> org.joda.time.DateTimeFieldType.secondOfMinute : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType SECOND_OF_MINUTE_TYPE>
org.joda.time.DateTimeFieldType.secondOfMinute : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType SECOND_OF_MINUTE_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.secondOfMinute : return $r0
org.joda.time.DateTimeFieldType.secondOfMinute : return $r0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendSecondOfMinute : $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, i0, 2)
org.joda.time.format.DateTimeFormatterBuilder.appendSecondOfMinute : $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendDecimal(org.joda.time.DateTimeFieldType,int,int)>($r1, i0, 2) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendSecondOfMinute : return $r2
org.joda.time.format.DateTimeFormatterBuilder.appendSecondOfMinute : return $r2 >>>>>>>> org.joda.time.format.ISODateTimeFormat.secondElement : $r4 = virtualinvoke $r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>()
org.joda.time.format.ISODateTimeFormat.secondElement : $r4 = virtualinvoke $r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.secondElement : <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter sme> = $r4
org.joda.time.format.ISODateTimeFormat.secondElement : <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter sme> = $r4 >>>>>>>> org.joda.time.format.ISODateTimeFormat.secondElement : $r5 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter sme>
org.joda.time.format.ISODateTimeFormat.secondElement : $r5 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter sme> >>>>>>>> org.joda.time.format.ISODateTimeFormat.secondElement : return $r5
org.joda.time.format.ISODateTimeFormat.secondElement : return $r5 >>>>>>>> org.joda.time.format.ISODateTimeFormat.hourMinuteSecondFraction : $r7 = virtualinvoke $r5.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>($r6)
org.joda.time.format.ISODateTimeFormat.hourMinuteSecondFraction : $r7 = virtualinvoke $r5.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>($r6) >>>>>>>> org.joda.time.format.ISODateTimeFormat.hourMinuteSecondFraction : $r8 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter fractionElement()>()
org.joda.time.format.ISODateTimeFormat.hourMinuteSecondFraction : $r8 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter fractionElement()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.fractionElement : $r0 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter fse>
org.joda.time.format.ISODateTimeFormat.fractionElement : $r0 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter fse> >>>>>>>> org.joda.time.format.ISODateTimeFormat.fractionElement : if $r0 != null
org.joda.time.format.ISODateTimeFormat.fractionElement : if $r0 != null >>>>>>>> org.joda.time.format.ISODateTimeFormat.fractionElement : $r1 = new org.joda.time.format.DateTimeFormatterBuilder
org.joda.time.format.ISODateTimeFormat.fractionElement : $r1 = new org.joda.time.format.DateTimeFormatterBuilder >>>>>>>> org.joda.time.format.ISODateTimeFormat.fractionElement : specialinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>()
org.joda.time.format.ISODateTimeFormat.fractionElement : specialinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.fractionElement : $r2 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>(46)
org.joda.time.format.ISODateTimeFormat.fractionElement : $r2 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendLiteral(char)>(46) >>>>>>>> org.joda.time.format.ISODateTimeFormat.fractionElement : $r3 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfSecond(int,int)>(3, 9)
org.joda.time.format.ISODateTimeFormat.fractionElement : $r3 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFractionOfSecond(int,int)>(3, 9) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendFractionOfSecond : $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfDay()>()
org.joda.time.format.DateTimeFormatterBuilder.appendFractionOfSecond : $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfDay()>() >>>>>>>> org.joda.time.DateTimeFieldType.secondOfDay : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType SECOND_OF_DAY_TYPE>
org.joda.time.DateTimeFieldType.secondOfDay : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType SECOND_OF_DAY_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.secondOfDay : return $r0
org.joda.time.DateTimeFieldType.secondOfDay : return $r0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendFractionOfSecond : $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFraction(org.joda.time.DateTimeFieldType,int,int)>($r1, i0, i1)
org.joda.time.format.DateTimeFormatterBuilder.appendFractionOfSecond : $r2 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendFraction(org.joda.time.DateTimeFieldType,int,int)>($r1, i0, i1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendFraction : if r1 != null
org.joda.time.format.DateTimeFormatterBuilder.appendFraction : if r1 != null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendFraction : if i1 >= i0
org.joda.time.format.DateTimeFormatterBuilder.appendFraction : if i1 >= i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendFraction : if i0 < 0
org.joda.time.format.DateTimeFormatterBuilder.appendFraction : if i0 < 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendFraction : if i1 > 0
org.joda.time.format.DateTimeFormatterBuilder.appendFraction : if i1 > 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendFraction : $r4 = new org.joda.time.format.DateTimeFormatterBuilder$Fraction
org.joda.time.format.DateTimeFormatterBuilder.appendFraction : $r4 = new org.joda.time.format.DateTimeFormatterBuilder$Fraction >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendFraction : specialinvoke $r4.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void <init>(org.joda.time.DateTimeFieldType,int,int)>(r1, i0, i1)
org.joda.time.format.DateTimeFormatterBuilder.appendFraction : specialinvoke $r4.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void <init>(org.joda.time.DateTimeFieldType,int,int)>(r1, i0, i1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendFraction : $r5 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r4)
org.joda.time.format.DateTimeFormatterBuilder.appendFraction : $r5 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r4) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendFraction : return $r5
org.joda.time.format.DateTimeFormatterBuilder.appendFraction : return $r5 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendFractionOfSecond : return $r2
org.joda.time.format.DateTimeFormatterBuilder.appendFractionOfSecond : return $r2 >>>>>>>> org.joda.time.format.ISODateTimeFormat.fractionElement : $r4 = virtualinvoke $r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>()
org.joda.time.format.ISODateTimeFormat.fractionElement : $r4 = virtualinvoke $r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.estimatePrintedLength : $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int iMaxDigits>
org.joda.time.format.DateTimeFormatterBuilder$Fraction.estimatePrintedLength : $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int iMaxDigits> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.estimatePrintedLength : return $i0
org.joda.time.format.DateTimeFormatterBuilder$Fraction.estimatePrintedLength : return $i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.estimateParsedLength : $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int iMaxDigits>
org.joda.time.format.DateTimeFormatterBuilder$Fraction.estimateParsedLength : $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int iMaxDigits> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.estimateParsedLength : return $i0
org.joda.time.format.DateTimeFormatterBuilder$Fraction.estimateParsedLength : return $i0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.fractionElement : <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter fse> = $r4
org.joda.time.format.ISODateTimeFormat.fractionElement : <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter fse> = $r4 >>>>>>>> org.joda.time.format.ISODateTimeFormat.fractionElement : $r5 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter fse>
org.joda.time.format.ISODateTimeFormat.fractionElement : $r5 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter fse> >>>>>>>> org.joda.time.format.ISODateTimeFormat.fractionElement : return $r5
org.joda.time.format.ISODateTimeFormat.fractionElement : return $r5 >>>>>>>> org.joda.time.format.ISODateTimeFormat.hourMinuteSecondFraction : $r9 = virtualinvoke $r7.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>($r8)
org.joda.time.format.ISODateTimeFormat.hourMinuteSecondFraction : $r9 = virtualinvoke $r7.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>($r8) >>>>>>>> org.joda.time.format.ISODateTimeFormat.hourMinuteSecondFraction : $r10 = virtualinvoke $r9.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>()
org.joda.time.format.ISODateTimeFormat.hourMinuteSecondFraction : $r10 = virtualinvoke $r9.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.hourMinuteSecondFraction : <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hmsf> = $r10
org.joda.time.format.ISODateTimeFormat.hourMinuteSecondFraction : <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hmsf> = $r10 >>>>>>>> org.joda.time.format.ISODateTimeFormat.hourMinuteSecondFraction : $r11 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hmsf>
org.joda.time.format.ISODateTimeFormat.hourMinuteSecondFraction : $r11 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hmsf> >>>>>>>> org.joda.time.format.ISODateTimeFormat.hourMinuteSecondFraction : return $r11
org.joda.time.format.ISODateTimeFormat.hourMinuteSecondFraction : return $r11 >>>>>>>> org.joda.time.format.ISODateTimeFormat.time : $r3 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>($r2)
org.joda.time.format.ISODateTimeFormat.time : $r3 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>($r2) >>>>>>>> org.joda.time.format.ISODateTimeFormat.time : $r4 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter offsetElement()>()
org.joda.time.format.ISODateTimeFormat.time : $r4 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter offsetElement()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.offsetElement : $r0 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter ze>
org.joda.time.format.ISODateTimeFormat.offsetElement : $r0 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter ze> >>>>>>>> org.joda.time.format.ISODateTimeFormat.offsetElement : if $r0 != null
org.joda.time.format.ISODateTimeFormat.offsetElement : if $r0 != null >>>>>>>> org.joda.time.format.ISODateTimeFormat.offsetElement : $r1 = new org.joda.time.format.DateTimeFormatterBuilder
org.joda.time.format.ISODateTimeFormat.offsetElement : $r1 = new org.joda.time.format.DateTimeFormatterBuilder >>>>>>>> org.joda.time.format.ISODateTimeFormat.offsetElement : specialinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>()
org.joda.time.format.ISODateTimeFormat.offsetElement : specialinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.offsetElement : $r2 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,boolean,int,int)>("Z", 1, 2, 4)
org.joda.time.format.ISODateTimeFormat.offsetElement : $r2 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder appendTimeZoneOffset(java.lang.String,boolean,int,int)>("Z", 1, 2, 4) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendTimeZoneOffset : $r2 = new org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset
org.joda.time.format.DateTimeFormatterBuilder.appendTimeZoneOffset : $r2 = new org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendTimeZoneOffset : specialinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void <init>(java.lang.String,java.lang.String,boolean,int,int)>(r1, r1, z0, i0, i1)
org.joda.time.format.DateTimeFormatterBuilder.appendTimeZoneOffset : specialinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: void <init>(java.lang.String,java.lang.String,boolean,int,int)>(r1, r1, z0, i0, i1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendTimeZoneOffset : $r3 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r2)
org.joda.time.format.DateTimeFormatterBuilder.appendTimeZoneOffset : $r3 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append0(java.lang.Object)>($r2) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.appendTimeZoneOffset : return $r3
org.joda.time.format.DateTimeFormatterBuilder.appendTimeZoneOffset : return $r3 >>>>>>>> org.joda.time.format.ISODateTimeFormat.offsetElement : $r3 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>()
org.joda.time.format.ISODateTimeFormat.offsetElement : $r3 = virtualinvoke $r2.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.offsetElement : <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter ze> = $r3
org.joda.time.format.ISODateTimeFormat.offsetElement : <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter ze> = $r3 >>>>>>>> org.joda.time.format.ISODateTimeFormat.offsetElement : $r4 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter ze>
org.joda.time.format.ISODateTimeFormat.offsetElement : $r4 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter ze> >>>>>>>> org.joda.time.format.ISODateTimeFormat.offsetElement : return $r4
org.joda.time.format.ISODateTimeFormat.offsetElement : return $r4 >>>>>>>> org.joda.time.format.ISODateTimeFormat.time : $r5 = virtualinvoke $r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>($r4)
org.joda.time.format.ISODateTimeFormat.time : $r5 = virtualinvoke $r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>($r4) >>>>>>>> org.joda.time.format.ISODateTimeFormat.time : $r6 = virtualinvoke $r5.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>()
org.joda.time.format.ISODateTimeFormat.time : $r6 = virtualinvoke $r5.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.estimatePrintedLength : $i1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMinFields>
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.estimatePrintedLength : $i1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMinFields> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.estimatePrintedLength : $i2 = 1 + $i1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.estimatePrintedLength : $i2 = 1 + $i1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.estimatePrintedLength : i0 = $i2 << 1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.estimatePrintedLength : i0 = $i2 << 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.estimatePrintedLength : $z0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: boolean iShowSeparators>
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.estimatePrintedLength : $z0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: boolean iShowSeparators> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.estimatePrintedLength : if $z0 == 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.estimatePrintedLength : if $z0 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.estimatePrintedLength : $i3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMinFields>
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.estimatePrintedLength : $i3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMinFields> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.estimatePrintedLength : $i4 = $i3 - 1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.estimatePrintedLength : $i4 = $i3 - 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.estimatePrintedLength : i0 = i0 + $i4
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.estimatePrintedLength : i0 = i0 + $i4 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.estimatePrintedLength : $r1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetPrintText>
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.estimatePrintedLength : $r1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetPrintText> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.estimatePrintedLength : if $r1 == null
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.estimatePrintedLength : if $r1 == null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.estimatePrintedLength : $r2 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetPrintText>
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.estimatePrintedLength : $r2 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetPrintText> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.estimatePrintedLength : $i5 = virtualinvoke $r2.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.estimatePrintedLength : $i5 = virtualinvoke $r2.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.estimatePrintedLength : if $i5 <= i0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.estimatePrintedLength : if $i5 <= i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.estimatePrintedLength : return i0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.estimatePrintedLength : return i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.estimateParsedLength : $i0 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int estimatePrintedLength()>()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.estimateParsedLength : $i0 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int estimatePrintedLength()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.estimateParsedLength : return $i0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.estimateParsedLength : return $i0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.time : <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter t> = $r6
org.joda.time.format.ISODateTimeFormat.time : <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter t> = $r6 >>>>>>>> org.joda.time.format.ISODateTimeFormat.time : $r7 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter t>
org.joda.time.format.ISODateTimeFormat.time : $r7 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter t> >>>>>>>> org.joda.time.format.ISODateTimeFormat.time : return $r7
org.joda.time.format.ISODateTimeFormat.time : return $r7 >>>>>>>> org.joda.time.format.ISODateTimeFormat.tTime : $r5 = virtualinvoke $r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>($r4)
org.joda.time.format.ISODateTimeFormat.tTime : $r5 = virtualinvoke $r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>($r4) >>>>>>>> org.joda.time.format.ISODateTimeFormat.tTime : $r6 = virtualinvoke $r5.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>()
org.joda.time.format.ISODateTimeFormat.tTime : $r6 = virtualinvoke $r5.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.tTime : <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter tt> = $r6
org.joda.time.format.ISODateTimeFormat.tTime : <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter tt> = $r6 >>>>>>>> org.joda.time.format.ISODateTimeFormat.tTime : $r7 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter tt>
org.joda.time.format.ISODateTimeFormat.tTime : $r7 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter tt> >>>>>>>> org.joda.time.format.ISODateTimeFormat.tTime : return $r7
org.joda.time.format.ISODateTimeFormat.tTime : return $r7 >>>>>>>> org.joda.time.format.ISODateTimeFormat.dateTime : $r5 = virtualinvoke $r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>($r4)
org.joda.time.format.ISODateTimeFormat.dateTime : $r5 = virtualinvoke $r3.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>($r4) >>>>>>>> org.joda.time.format.ISODateTimeFormat.dateTime : $r6 = virtualinvoke $r5.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>()
org.joda.time.format.ISODateTimeFormat.dateTime : $r6 = virtualinvoke $r5.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.dateTime : <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dt> = $r6
org.joda.time.format.ISODateTimeFormat.dateTime : <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dt> = $r6 >>>>>>>> org.joda.time.format.ISODateTimeFormat.dateTime : $r7 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dt>
org.joda.time.format.ISODateTimeFormat.dateTime : $r7 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dt> >>>>>>>> org.joda.time.format.ISODateTimeFormat.dateTime : return $r7
org.joda.time.format.ISODateTimeFormat.dateTime : return $r7 >>>>>>>> org.joda.time.base.AbstractInstant.toString : $r2 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>(r0)
org.joda.time.base.AbstractInstant.toString : $r2 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>(r0) >>>>>>>> org.joda.time.format.DateTimeFormatter.print : $r2 = new java.lang.StringBuffer
org.joda.time.format.DateTimeFormatter.print : $r2 = new java.lang.StringBuffer >>>>>>>> org.joda.time.format.DateTimeFormatter.print : $r4 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter requirePrinter()>()
org.joda.time.format.DateTimeFormatter.print : $r4 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter requirePrinter()>() >>>>>>>> org.joda.time.format.DateTimeFormatter.requirePrinter : r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter iPrinter>
org.joda.time.format.DateTimeFormatter.requirePrinter : r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter iPrinter> >>>>>>>> org.joda.time.format.DateTimeFormatter.requirePrinter : if r1 != null
org.joda.time.format.DateTimeFormatter.requirePrinter : if r1 != null >>>>>>>> org.joda.time.format.DateTimeFormatter.requirePrinter : return r1
org.joda.time.format.DateTimeFormatter.requirePrinter : return r1 >>>>>>>> org.joda.time.format.DateTimeFormatter.print : $i0 = interfaceinvoke $r4.<org.joda.time.format.DateTimePrinter: int estimatePrintedLength()>()
org.joda.time.format.DateTimeFormatter.print : $i0 = interfaceinvoke $r4.<org.joda.time.format.DateTimePrinter: int estimatePrintedLength()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.estimatePrintedLength : $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: int iPrintedLengthEstimate>
org.joda.time.format.DateTimeFormatterBuilder$Composite.estimatePrintedLength : $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: int iPrintedLengthEstimate> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.estimatePrintedLength : return $i0
org.joda.time.format.DateTimeFormatterBuilder$Composite.estimatePrintedLength : return $i0 >>>>>>>> org.joda.time.format.DateTimeFormatter.print : specialinvoke $r2.<java.lang.StringBuffer: void <init>(int)>($i0)
org.joda.time.format.DateTimeFormatter.print : specialinvoke $r2.<java.lang.StringBuffer: void <init>(int)>($i0) >>>>>>>> org.joda.time.format.DateTimeFormatter.print : r3 = $r2
org.joda.time.format.DateTimeFormatter.print : r3 = $r2 >>>>>>>> org.joda.time.format.DateTimeFormatter.print : virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadableInstant)>(r3, r1)
org.joda.time.format.DateTimeFormatter.print : virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadableInstant)>(r3, r1) >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>(r2)
org.joda.time.format.DateTimeFormatter.printTo : l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>(r2) >>>>>>>> org.joda.time.DateTimeUtils.getInstantMillis : if r0 != null
org.joda.time.DateTimeUtils.getInstantMillis : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getInstantMillis : $l1 = interfaceinvoke r0.<org.joda.time.ReadableInstant: long getMillis()>()
org.joda.time.DateTimeUtils.getInstantMillis : $l1 = interfaceinvoke r0.<org.joda.time.ReadableInstant: long getMillis()>() >>>>>>>> org.joda.time.Instant.getMillis : $l0 = r0.<org.joda.time.Instant: long iMillis>
org.joda.time.Instant.getMillis : $l0 = r0.<org.joda.time.Instant: long iMillis> >>>>>>>> org.joda.time.Instant.getMillis : return $l0
org.joda.time.Instant.getMillis : return $l0 >>>>>>>> org.joda.time.DateTimeUtils.getInstantMillis : return $l1
org.joda.time.DateTimeUtils.getInstantMillis : return $l1 >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>(r2)
org.joda.time.format.DateTimeFormatter.printTo : r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>(r2) >>>>>>>> org.joda.time.DateTimeUtils.getInstantChronology : if r0 != null
org.joda.time.DateTimeUtils.getInstantChronology : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getInstantChronology : r1 = interfaceinvoke r0.<org.joda.time.ReadableInstant: org.joda.time.Chronology getChronology()>()
org.joda.time.DateTimeUtils.getInstantChronology : r1 = interfaceinvoke r0.<org.joda.time.ReadableInstant: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.Instant.getChronology : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>()
org.joda.time.Instant.getChronology : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>() >>>>>>>> org.joda.time.chrono.ISOChronology.getInstanceUTC : $r0 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC>
org.joda.time.chrono.ISOChronology.getInstanceUTC : $r0 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.ISOChronology.getInstanceUTC : return $r0
org.joda.time.chrono.ISOChronology.getInstanceUTC : return $r0 >>>>>>>> org.joda.time.Instant.getChronology : return $r1
org.joda.time.Instant.getChronology : return $r1 >>>>>>>> org.joda.time.DateTimeUtils.getInstantChronology : if r1 != null
org.joda.time.DateTimeUtils.getInstantChronology : if r1 != null >>>>>>>> org.joda.time.DateTimeUtils.getInstantChronology : return r1
org.joda.time.DateTimeUtils.getInstantChronology : return r1 >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : specialinvoke r0.<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology)>(r1, l0, r3)
org.joda.time.format.DateTimeFormatter.printTo : specialinvoke r0.<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology)>(r1, l0, r3) >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : r3 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter requirePrinter()>()
org.joda.time.format.DateTimeFormatter.printTo : r3 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter requirePrinter()>() >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : r5 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>(r2)
org.joda.time.format.DateTimeFormatter.printTo : r5 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>(r2) >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.format.DateTimeFormatter.selectChronology : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DateTimeUtils.getChronology : if r0 != null
org.joda.time.DateTimeUtils.getChronology : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getChronology : return r0
org.joda.time.DateTimeUtils.getChronology : return r0 >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : $r3 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>
org.joda.time.format.DateTimeFormatter.selectChronology : $r3 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono> >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : if $r3 == null
org.joda.time.format.DateTimeFormatter.selectChronology : if $r3 == null >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : $r4 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>
org.joda.time.format.DateTimeFormatter.selectChronology : $r4 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : if $r4 == null
org.joda.time.format.DateTimeFormatter.selectChronology : if $r4 == null >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : return r2
org.joda.time.format.DateTimeFormatter.selectChronology : return r2 >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : r4 = virtualinvoke r5.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.format.DateTimeFormatter.printTo : r4 = virtualinvoke r5.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2
org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null
org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.GregorianChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.BasicChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getBase : return $r1
org.joda.time.chrono.AssembledChronology.getBase : return $r1 >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : r1 = $r2
org.joda.time.chrono.BasicChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : if $r2 == null
org.joda.time.chrono.BasicChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>
org.joda.time.chrono.BasicChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC> >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : return $r4
org.joda.time.chrono.BasicChronology.getZone : return $r4 >>>>>>>> org.joda.time.chrono.GregorianChronology.getZone : return $r1
org.joda.time.chrono.GregorianChronology.getZone : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : return $r3
org.joda.time.chrono.AssembledChronology.getZone : return $r3 >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : i1 = virtualinvoke r4.<org.joda.time.DateTimeZone: int getOffset(long)>(l0)
org.joda.time.format.DateTimeFormatter.printTo : i1 = virtualinvoke r4.<org.joda.time.DateTimeZone: int getOffset(long)>(l0) >>>>>>>> org.joda.time.tz.FixedDateTimeZone.getOffset : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset>
org.joda.time.tz.FixedDateTimeZone.getOffset : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset> >>>>>>>> org.joda.time.tz.FixedDateTimeZone.getOffset : return $i1
org.joda.time.tz.FixedDateTimeZone.getOffset : return $i1 >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : $l3 = (long) i1
org.joda.time.format.DateTimeFormatter.printTo : $l3 = (long) i1 >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : l2 = l0 + $l3
org.joda.time.format.DateTimeFormatter.printTo : l2 = l0 + $l3 >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : $l4 = l0 ^ l2
org.joda.time.format.DateTimeFormatter.printTo : $l4 = l0 ^ l2 >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : $b5 = $l4 cmp 0L
org.joda.time.format.DateTimeFormatter.printTo : $b5 = $l4 cmp 0L >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : if $b5 >= 0
org.joda.time.format.DateTimeFormatter.printTo : if $b5 >= 0 >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : $r6 = virtualinvoke r5.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>()
org.joda.time.format.DateTimeFormatter.printTo : $r6 = virtualinvoke r5.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>() >>>>>>>> org.joda.time.chrono.ISOChronology.withUTC : $r1 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC>
org.joda.time.chrono.ISOChronology.withUTC : $r1 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.ISOChronology.withUTC : return $r1
org.joda.time.chrono.ISOChronology.withUTC : return $r1 >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : $r7 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>
org.joda.time.format.DateTimeFormatter.printTo : $r7 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale> >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : interfaceinvoke r3.<org.joda.time.format.DateTimePrinter: void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>(r1, l2, $r6, i1, r4, $r7)
org.joda.time.format.DateTimeFormatter.printTo : interfaceinvoke r3.<org.joda.time.format.DateTimePrinter: void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>(r1, l2, $r6, i1, r4, $r7) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : r5 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: org.joda.time.format.DateTimePrinter[] iPrinters>
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : r5 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: org.joda.time.format.DateTimePrinter[] iPrinters> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : if r5 != null
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : if r5 != null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : if r4 != null
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : if r4 != null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : r4 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>()
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : r4 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : i2 = lengthof r5
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : i2 = lengthof r5 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : i3 = 0
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : i3 = 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : if i3 >= i2
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : if i3 >= i2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : $r7 = r5[i3]
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : $r7 = r5[i3] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : interfaceinvoke $r7.<org.joda.time.format.DateTimePrinter: void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>(r1, l0, r2, i1, r3, r4)
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : interfaceinvoke $r7.<org.joda.time.format.DateTimePrinter: void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>(r1, l0, r2, i1, r3, r4) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $r6 = r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: org.joda.time.DateTimeFieldType iFieldType>
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $r6 = r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: org.joda.time.DateTimeFieldType iFieldType> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : r5 = virtualinvoke $r6.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r2)
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : r5 = virtualinvoke $r6.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r2) >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $b0 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: byte iOrdinal>
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $b0 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: byte iOrdinal> >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : tableswitch($b0) {     case 1:
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : tableswitch($b0) {     case 1: >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r7 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r7 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.year : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear>
org.joda.time.chrono.AssembledChronology.year : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.year : return $r1
org.joda.time.chrono.AssembledChronology.year : return $r1 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r7
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r7 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $i2 = virtualinvoke r5.<org.joda.time.DateTimeField: int get(long)>(l0)
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $i2 = virtualinvoke r5.<org.joda.time.DateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicYearDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getAverageMillisPerYearDividedByTwo()>()
org.joda.time.chrono.BasicChronology.getYear : l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getAverageMillisPerYearDividedByTwo()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getAverageMillisPerYearDividedByTwo : return 15778476000L
org.joda.time.chrono.GregorianChronology.getAverageMillisPerYearDividedByTwo : return 15778476000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $l7 = l0 >> 1
org.joda.time.chrono.BasicChronology.getYear : $l7 = l0 >> 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $l8 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getApproxMillisAtEpochDividedByTwo()>()
org.joda.time.chrono.BasicChronology.getYear : $l8 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getApproxMillisAtEpochDividedByTwo()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getApproxMillisAtEpochDividedByTwo : return 31083597720000L
org.joda.time.chrono.GregorianChronology.getApproxMillisAtEpochDividedByTwo : return 31083597720000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l2 = $l7 + $l8
org.joda.time.chrono.BasicChronology.getYear : l2 = $l7 + $l8 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $b9 = l2 cmp 0L
org.joda.time.chrono.BasicChronology.getYear : $b9 = l2 cmp 0L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $b9 >= 0
org.joda.time.chrono.BasicChronology.getYear : if $b9 >= 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $l11 = l2 / l1
org.joda.time.chrono.BasicChronology.getYear : $l11 = l2 / l1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : i3 = (int) $l11
org.joda.time.chrono.BasicChronology.getYear : i3 = (int) $l11 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i3)
org.joda.time.chrono.BasicChronology.getYear : l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i3) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMillis : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>(i0)
org.joda.time.chrono.BasicChronology.getYearMillis : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $r2 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache>
org.joda.time.chrono.BasicChronology.getYearInfo : $r2 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $i1 = i0 & 1023
org.joda.time.chrono.BasicChronology.getYearInfo : $i1 = i0 & 1023 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : r1 = $r2[$i1]
org.joda.time.chrono.BasicChronology.getYearInfo : r1 = $r2[$i1] >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : if r1 == null
org.joda.time.chrono.BasicChronology.getYearInfo : if r1 == null >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $r3 = new org.joda.time.chrono.BasicChronology$YearInfo
org.joda.time.chrono.BasicChronology.getYearInfo : $r3 = new org.joda.time.chrono.BasicChronology$YearInfo >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long calculateFirstDayOfYearMillis(int)>(i0)
org.joda.time.chrono.BasicChronology.getYearInfo : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long calculateFirstDayOfYearMillis(int)>(i0) >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : i1 = i0 / 100
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : i1 = i0 / 100 >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : if i0 >= 0
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : if i0 >= 0 >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $i9 = i0 >> 2
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $i9 = i0 >> 2 >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $i10 = $i9 - i1
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $i10 = $i9 - i1 >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $i11 = i1 >> 2
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $i11 = i1 >> 2 >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : i8 = $i10 + $i11
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : i8 = $i10 + $i11 >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $z0 = virtualinvoke r0.<org.joda.time.chrono.GregorianChronology: boolean isLeapYear(int)>(i0)
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $z0 = virtualinvoke r0.<org.joda.time.chrono.GregorianChronology: boolean isLeapYear(int)>(i0) >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : $i1 = i0 & 3
org.joda.time.chrono.GregorianChronology.isLeapYear : $i1 = i0 & 3 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : if $i1 != 0
org.joda.time.chrono.GregorianChronology.isLeapYear : if $i1 != 0 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : $z0 = 0
org.joda.time.chrono.GregorianChronology.isLeapYear : $z0 = 0 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : return $z0
org.joda.time.chrono.GregorianChronology.isLeapYear : return $z0 >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : if $z0 == 0
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : if $z0 == 0 >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $l12 = (long) i0
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $l12 = (long) i0 >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $l13 = $l12 * 365L
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $l13 = $l12 * 365L >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $i14 = i8 - 719527
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $i14 = i8 - 719527 >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $l15 = (long) $i14
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $l15 = (long) $i14 >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $l16 = $l13 + $l15
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $l16 = $l13 + $l15 >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $l17 = $l16 * 86400000L
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $l17 = $l16 * 86400000L >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : return $l17
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : return $l17 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : specialinvoke $r3.<org.joda.time.chrono.BasicChronology$YearInfo: void <init>(int,long)>(i0, $l3)
org.joda.time.chrono.BasicChronology.getYearInfo : specialinvoke $r3.<org.joda.time.chrono.BasicChronology$YearInfo: void <init>(int,long)>(i0, $l3) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : r1 = $r3
org.joda.time.chrono.BasicChronology.getYearInfo : r1 = $r3 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $r4 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache>
org.joda.time.chrono.BasicChronology.getYearInfo : $r4 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $i4 = i0 & 1023
org.joda.time.chrono.BasicChronology.getYearInfo : $i4 = i0 & 1023 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $r4[$i4] = r1
org.joda.time.chrono.BasicChronology.getYearInfo : $r4[$i4] = r1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : return r1
org.joda.time.chrono.BasicChronology.getYearInfo : return r1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMillis : $l1 = $r1.<org.joda.time.chrono.BasicChronology$YearInfo: long iFirstDayMillis>
org.joda.time.chrono.BasicChronology.getYearMillis : $l1 = $r1.<org.joda.time.chrono.BasicChronology$YearInfo: long iFirstDayMillis> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMillis : return $l1
org.joda.time.chrono.BasicChronology.getYearMillis : return $l1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l5 = l0 - l4
org.joda.time.chrono.BasicChronology.getYear : l5 = l0 - l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $b12 = l5 cmp 0L
org.joda.time.chrono.BasicChronology.getYear : $b12 = l5 cmp 0L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $b12 >= 0
org.joda.time.chrono.BasicChronology.getYear : if $b12 >= 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $b13 = l5 cmp 31536000000L
org.joda.time.chrono.BasicChronology.getYear : $b13 = l5 cmp 31536000000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $b13 < 0
org.joda.time.chrono.BasicChronology.getYear : if $b13 < 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : return i3
org.joda.time.chrono.BasicChronology.getYear : return i3 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.get : return $i1
org.joda.time.chrono.BasicYearDateTimeField.get : return $i1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $i3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: int iMinPrintedDigits>
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $i3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: int iMinPrintedDigits> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, $i2, $i3)
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, $i2, $i3) >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 0
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 0 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 10
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 10 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 100
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 100 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 1000
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 1000 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 10000
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 10000 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : i15 = 4
org.joda.time.format.FormatUtils.appendPaddedInteger : i15 = 4 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : goto [?= (branch)]
org.joda.time.format.FormatUtils.appendPaddedInteger : goto [?= (branch)] >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i1 <= i15
org.joda.time.format.FormatUtils.appendPaddedInteger : if i1 <= i15 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $r10 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0)
org.joda.time.format.FormatUtils.appendPaddedInteger : $r10 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0) >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10)
org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : goto [?= return]
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : goto [?= return] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : i3 = i3 + 1
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : i3 = i3 + 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : goto [?= (branch)]
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : goto [?= (branch)] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.printTo : $c2 = r0.<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: char iValue>
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.printTo : $c2 = r0.<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: char iValue> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2)
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2) >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r9 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r9 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.monthOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear>
org.joda.time.chrono.AssembledChronology.monthOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.monthOfYear : return $r1
org.joda.time.chrono.AssembledChronology.monthOfYear : return $r1 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r9
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r9 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long)>(l0)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getMonthOfYear : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicChronology.getMonthOfYear : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $i2 = r1.<org.joda.time.chrono.BasicChronology$YearInfo: int iYear>
org.joda.time.chrono.BasicChronology.getYearInfo : $i2 = r1.<org.joda.time.chrono.BasicChronology$YearInfo: int iYear> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : if $i2 == i0
org.joda.time.chrono.BasicChronology.getYearInfo : if $i2 == i0 >>>>>>>> org.joda.time.chrono.BasicChronology.getMonthOfYear : $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, $i1)
org.joda.time.chrono.BasicChronology.getMonthOfYear : $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, $i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMillis(int)>(i1)
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMillis(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l4 = l0 - $l3
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l4 = l0 - $l3 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l5 = $l4 >> 10
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l5 = $l4 >> 10 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : i2 = (int) $l5
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : i2 = (int) $l5 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i1)
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if $z0 == 0
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 15271875
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 15271875 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 7593750
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 7593750 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 10125000
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 10125000 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 12740625
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 12740625 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 6
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 6 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : goto [?= return $b6]
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : goto [?= return $b6] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : return $b6
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : return $b6 >>>>>>>> org.joda.time.chrono.BasicChronology.getMonthOfYear : return $i2
org.joda.time.chrono.BasicChronology.getMonthOfYear : return $i2 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : return $i1
org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : return $i1 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i1 <= 1
org.joda.time.format.FormatUtils.appendPaddedInteger : if i1 <= 1 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48)
org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48) >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : i1 = i1 + -1
org.joda.time.format.FormatUtils.appendPaddedInteger : i1 = i1 + -1 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i3 = i0 + 48
org.joda.time.format.FormatUtils.appendPaddedInteger : $i3 = i0 + 48 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $c4 = (char) $i3
org.joda.time.format.FormatUtils.appendPaddedInteger : $c4 = (char) $i3 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4)
org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4) >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : goto [?= return]
org.joda.time.format.FormatUtils.appendPaddedInteger : goto [?= return] >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r10 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r10 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfMonth : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth>
org.joda.time.chrono.AssembledChronology.dayOfMonth : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth> >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfMonth : return $r1
org.joda.time.chrono.AssembledChronology.dayOfMonth : return $r1 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r10
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r10 >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long)>(l0)
org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicChronology.getDayOfMonth : i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i1)
org.joda.time.chrono.BasicChronology.getDayOfMonth : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i1) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l0, i1, i2)
org.joda.time.chrono.BasicChronology.getDayOfMonth : $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l0, i1, i2) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1)
org.joda.time.chrono.BasicChronology.getDayOfMonth : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i1, i2)
org.joda.time.chrono.BasicChronology.getDayOfMonth : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i1, i2) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0)
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : if $z0 == 0
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $r2 = <org.joda.time.chrono.BasicGJChronology: long[] MIN_TOTAL_MILLIS_BY_MONTH_ARRAY>
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $r2 = <org.joda.time.chrono.BasicGJChronology: long[] MIN_TOTAL_MILLIS_BY_MONTH_ARRAY> >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $i4 = i1 - 1
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $i4 = i1 - 1 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $l5 = $r2[$i4]
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $l5 = $r2[$i4] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : return $l5
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : return $l5 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : l5 = l3 + $l4
org.joda.time.chrono.BasicChronology.getDayOfMonth : l5 = l3 + $l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $l6 = l0 - l5
org.joda.time.chrono.BasicChronology.getDayOfMonth : $l6 = l0 - l5 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $l7 = $l6 / 86400000L
org.joda.time.chrono.BasicChronology.getDayOfMonth : $l7 = $l6 / 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $i8 = (int) $l7
org.joda.time.chrono.BasicChronology.getDayOfMonth : $i8 = (int) $l7 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $i9 = $i8 + 1
org.joda.time.chrono.BasicChronology.getDayOfMonth : $i9 = $i8 + 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : return $i9
org.joda.time.chrono.BasicChronology.getDayOfMonth : return $i9 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : return $i3
org.joda.time.chrono.BasicChronology.getDayOfMonth : return $i3 >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : return $i1
org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : return $i1 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r19 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r19 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.hourOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay>
org.joda.time.chrono.AssembledChronology.hourOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.hourOfDay : return $r1
org.joda.time.chrono.AssembledChronology.hourOfDay : return $r1 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r19
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r19 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $b1 = l0 cmp 0L
org.joda.time.field.PreciseDateTimeField.get : $b1 = l0 cmp 0L >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : if $b1 < 0
org.joda.time.field.PreciseDateTimeField.get : if $b1 < 0 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l2 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: long getUnitMillis()>()
org.joda.time.field.PreciseDateTimeField.get : $l2 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: long getUnitMillis()>() >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : return $l0
org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : return $l0 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l3 = l0 / $l2
org.joda.time.field.PreciseDateTimeField.get : $l3 = l0 / $l2 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $i4 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange>
org.joda.time.field.PreciseDateTimeField.get : $i4 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange> >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l5 = (long) $i4
org.joda.time.field.PreciseDateTimeField.get : $l5 = (long) $i4 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l6 = $l3 % $l5
org.joda.time.field.PreciseDateTimeField.get : $l6 = $l3 % $l5 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $i7 = (int) $l6
org.joda.time.field.PreciseDateTimeField.get : $i7 = (int) $l6 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : return $i7
org.joda.time.field.PreciseDateTimeField.get : return $i7 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r21 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r21 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.minuteOfHour : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfHour>
org.joda.time.chrono.AssembledChronology.minuteOfHour : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfHour> >>>>>>>> org.joda.time.chrono.AssembledChronology.minuteOfHour : return $r1
org.joda.time.chrono.AssembledChronology.minuteOfHour : return $r1 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r21
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r21 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r23 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r23 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.secondOfMinute : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfMinute>
org.joda.time.chrono.AssembledChronology.secondOfMinute : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfMinute> >>>>>>>> org.joda.time.chrono.AssembledChronology.secondOfMinute : return $r1
org.joda.time.chrono.AssembledChronology.secondOfMinute : return $r1 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r23
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r23 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.StringBuffer,java.io.Writer,long,org.joda.time.Chronology)>(r1, null, l0, r2)
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.StringBuffer,java.io.Writer,long,org.joda.time.Chronology)>(r1, null, l0, r2) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $r7 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: org.joda.time.DateTimeFieldType iFieldType>
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $r7 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: org.joda.time.DateTimeFieldType iFieldType> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : r4 = virtualinvoke $r7.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r3)
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : r4 = virtualinvoke $r7.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r3) >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r22 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfDay()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r22 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfDay()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.secondOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfDay>
org.joda.time.chrono.AssembledChronology.secondOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.secondOfDay : return $r1
org.joda.time.chrono.AssembledChronology.secondOfDay : return $r1 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r22
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r22 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : i1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int iMinDigits>
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : i1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int iMinDigits> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : l2 = virtualinvoke r4.<org.joda.time.DateTimeField: long remainder(long)>(l0)
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : l2 = virtualinvoke r4.<org.joda.time.DateTimeField: long remainder(long)>(l0) >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.remainder : $b1 = l0 cmp 0L
org.joda.time.field.PreciseDurationDateTimeField.remainder : $b1 = l0 cmp 0L >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.remainder : if $b1 < 0
org.joda.time.field.PreciseDurationDateTimeField.remainder : if $b1 < 0 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.remainder : $l2 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDurationDateTimeField.remainder : $l2 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.remainder : $l3 = l0 % $l2
org.joda.time.field.PreciseDurationDateTimeField.remainder : $l3 = l0 % $l2 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.remainder : return $l3
org.joda.time.field.PreciseDurationDateTimeField.remainder : return $l3 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : goto [?= $b8 = l2 cmp 0L]
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : goto [?= $b8 = l2 cmp 0L] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $b8 = l2 cmp 0L
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $b8 = l2 cmp 0L >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : if $b8 != 0
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : if $b8 != 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : if r1 == null
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : if r1 == null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : i1 = i1 + -1
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : i1 = i1 + -1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : if i1 < 0
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : if i1 < 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48)
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : goto [?= i1 = i1 + -1]
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : goto [?= i1 = i1 + -1] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : goto [?= return]
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : goto [?= return] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : if r3 != null
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : if r3 != null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : if i1 != 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : if i1 != 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : $r5 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetPrintText>
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : $r5 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetPrintText> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : if $r5 == null
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : if $r5 == null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : $r6 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetPrintText>
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : $r6 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetPrintText> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6) >>>>>>>> org.joda.time.format.DateTimeFormatter.print : $r5 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>()
org.joda.time.format.DateTimeFormatter.print : $r5 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> org.joda.time.format.DateTimeFormatter.print : return $r5
org.joda.time.format.DateTimeFormatter.print : return $r5 >>>>>>>> org.joda.time.base.AbstractInstant.toString : return $r2
org.joda.time.base.AbstractInstant.toString : return $r2 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 4
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 4 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i1 <= 2
org.joda.time.format.FormatUtils.appendPaddedInteger : if i1 <= 2 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i5 = i0 + 1
org.joda.time.format.FormatUtils.appendPaddedInteger : $i5 = i0 + 1 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i6 = $i5 * 13421772
org.joda.time.format.FormatUtils.appendPaddedInteger : $i6 = $i5 * 13421772 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : i2 = $i6 >> 27
org.joda.time.format.FormatUtils.appendPaddedInteger : i2 = $i6 >> 27 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i7 = i2 + 48
org.joda.time.format.FormatUtils.appendPaddedInteger : $i7 = i2 + 48 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $c8 = (char) $i7
org.joda.time.format.FormatUtils.appendPaddedInteger : $c8 = (char) $i7 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c8)
org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c8) >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i9 = i2 << 3
org.joda.time.format.FormatUtils.appendPaddedInteger : $i9 = i2 << 3 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i10 = i0 - $i9
org.joda.time.format.FormatUtils.appendPaddedInteger : $i10 = i0 - $i9 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i11 = i2 << 1
org.joda.time.format.FormatUtils.appendPaddedInteger : $i11 = i2 << 1 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i12 = $i10 - $i11
org.joda.time.format.FormatUtils.appendPaddedInteger : $i12 = $i10 - $i11 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i13 = $i12 + 48
org.joda.time.format.FormatUtils.appendPaddedInteger : $i13 = $i12 + 48 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $c14 = (char) $i13
org.joda.time.format.FormatUtils.appendPaddedInteger : $c14 = (char) $i13 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c14)
org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c14) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 5
