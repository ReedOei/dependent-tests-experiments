org.joda.time.DurationFieldType.minutes : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MINUTES_TYPE> >>>>>>>> org.joda.time.DurationFieldType.minutes : return $r0
org.joda.time.DurationFieldType.minutes : return $r0 >>>>>>>> org.joda.time.field.MillisDurationField.isSupported : return 1
org.joda.time.field.MillisDurationField.isSupported : return 1 >>>>>>>> org.joda.time.field.ScaledDurationField.equals : if r0 != r1
org.joda.time.field.ScaledDurationField.equals : if r0 != r1 >>>>>>>> org.joda.time.field.ScaledDurationField.equals : return 1
org.joda.time.field.ScaledDurationField.equals : return 1 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>()
org.joda.time.chrono.ISOChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>() >>>>>>>> org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> >>>>>>>> org.joda.time.DateTimeZone.getDefault : if r0 != null
org.joda.time.DateTimeZone.getDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.DateTimeZone.getDefault : return r0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r0)
org.joda.time.chrono.ISOChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r0) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if r0 != null
org.joda.time.chrono.ISOChronology.getInstance : if r0 != null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0)
org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : i0 = $i1 & 63
org.joda.time.chrono.ISOChronology.getInstance : i0 = $i1 & 63 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache>
org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache> >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : r1 = $r5[i0]
org.joda.time.chrono.ISOChronology.getInstance : r1 = $r5[i0] >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if r1 == null
org.joda.time.chrono.ISOChronology.getInstance : if r1 == null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r6 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.ISOChronology.getInstance : $r6 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2
org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null
org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.ZonedChronology.getZone : $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: java.lang.Object getParam()>()
org.joda.time.chrono.ZonedChronology.getZone : $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: java.lang.Object getParam()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getParam : $r1 = r0.<org.joda.time.chrono.AssembledChronology: java.lang.Object iParam>
org.joda.time.chrono.AssembledChronology.getParam : $r1 = r0.<org.joda.time.chrono.AssembledChronology: java.lang.Object iParam> >>>>>>>> org.joda.time.chrono.AssembledChronology.getParam : return $r1
org.joda.time.chrono.AssembledChronology.getParam : return $r1 >>>>>>>> org.joda.time.chrono.ZonedChronology.getZone : $r2 = (org.joda.time.DateTimeZone) $r1
org.joda.time.chrono.ZonedChronology.getZone : $r2 = (org.joda.time.DateTimeZone) $r1 >>>>>>>> org.joda.time.chrono.ZonedChronology.getZone : return $r2
org.joda.time.chrono.ZonedChronology.getZone : return $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : return $r3
org.joda.time.chrono.AssembledChronology.getZone : return $r3 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0
org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : return r1
org.joda.time.chrono.ISOChronology.getInstance : return r1 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : return $r1
org.joda.time.chrono.ISOChronology.getInstance : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology.minutes : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMinutes>
org.joda.time.chrono.AssembledChronology.minutes : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMinutes> >>>>>>>> org.joda.time.chrono.AssembledChronology.minutes : return $r1
org.joda.time.chrono.AssembledChronology.minutes : return $r1 >>>>>>>> org.joda.time.field.ScaledDurationField.equals : $z0 = r1 instanceof org.joda.time.field.ScaledDurationField
org.joda.time.field.ScaledDurationField.equals : $z0 = r1 instanceof org.joda.time.field.ScaledDurationField >>>>>>>> org.joda.time.field.ScaledDurationField.equals : if $z0 == 0
org.joda.time.field.ScaledDurationField.equals : if $z0 == 0 >>>>>>>> org.joda.time.field.ScaledDurationField.equals : return 0
org.joda.time.field.ScaledDurationField.equals : return 0 >>>>>>>> org.joda.time.field.ScaledDurationField.equals : r2 = (org.joda.time.field.ScaledDurationField) r1
org.joda.time.field.ScaledDurationField.equals : r2 = (org.joda.time.field.ScaledDurationField) r1 >>>>>>>> org.joda.time.field.ScaledDurationField.equals : $r3 = virtualinvoke r0.<org.joda.time.field.ScaledDurationField: org.joda.time.DurationField getWrappedField()>()
org.joda.time.field.ScaledDurationField.equals : $r3 = virtualinvoke r0.<org.joda.time.field.ScaledDurationField: org.joda.time.DurationField getWrappedField()>() >>>>>>>> org.joda.time.field.DecoratedDurationField.getWrappedField : $r1 = r0.<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField iField>
org.joda.time.field.DecoratedDurationField.getWrappedField : $r1 = r0.<org.joda.time.field.DecoratedDurationField: org.joda.time.DurationField iField> >>>>>>>> org.joda.time.field.DecoratedDurationField.getWrappedField : return $r1
org.joda.time.field.DecoratedDurationField.getWrappedField : return $r1 >>>>>>>> org.joda.time.field.ScaledDurationField.equals : $r4 = virtualinvoke r2.<org.joda.time.field.ScaledDurationField: org.joda.time.DurationField getWrappedField()>()
org.joda.time.field.ScaledDurationField.equals : $r4 = virtualinvoke r2.<org.joda.time.field.ScaledDurationField: org.joda.time.DurationField getWrappedField()>() >>>>>>>> org.joda.time.field.ScaledDurationField.equals : $z1 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4)
org.joda.time.field.ScaledDurationField.equals : $z1 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4) >>>>>>>> org.joda.time.field.MillisDurationField.equals : $z0 = r1 instanceof org.joda.time.field.MillisDurationField
org.joda.time.field.MillisDurationField.equals : $z0 = r1 instanceof org.joda.time.field.MillisDurationField >>>>>>>> org.joda.time.field.MillisDurationField.equals : if $z0 == 0
org.joda.time.field.MillisDurationField.equals : if $z0 == 0 >>>>>>>> org.joda.time.field.MillisDurationField.equals : $l0 = virtualinvoke r0.<org.joda.time.field.MillisDurationField: long getUnitMillis()>()
org.joda.time.field.MillisDurationField.equals : $l0 = virtualinvoke r0.<org.joda.time.field.MillisDurationField: long getUnitMillis()>() >>>>>>>> org.joda.time.field.MillisDurationField.getUnitMillis : return 1L
org.joda.time.field.MillisDurationField.getUnitMillis : return 1L >>>>>>>> org.joda.time.field.MillisDurationField.equals : $r2 = (org.joda.time.field.MillisDurationField) r1
org.joda.time.field.MillisDurationField.equals : $r2 = (org.joda.time.field.MillisDurationField) r1 >>>>>>>> org.joda.time.field.MillisDurationField.equals : $l1 = virtualinvoke $r2.<org.joda.time.field.MillisDurationField: long getUnitMillis()>()
org.joda.time.field.MillisDurationField.equals : $l1 = virtualinvoke $r2.<org.joda.time.field.MillisDurationField: long getUnitMillis()>() >>>>>>>> org.joda.time.field.MillisDurationField.equals : $b2 = $l0 cmp $l1
org.joda.time.field.MillisDurationField.equals : $b2 = $l0 cmp $l1 >>>>>>>> org.joda.time.field.MillisDurationField.equals : if $b2 != 0
org.joda.time.field.MillisDurationField.equals : if $b2 != 0 >>>>>>>> org.joda.time.field.MillisDurationField.equals : $z1 = 1
org.joda.time.field.MillisDurationField.equals : $z1 = 1 >>>>>>>> org.joda.time.field.MillisDurationField.equals : goto [?= return $z1]
org.joda.time.field.MillisDurationField.equals : goto [?= return $z1] >>>>>>>> org.joda.time.field.MillisDurationField.equals : return $z1
org.joda.time.field.MillisDurationField.equals : return $z1 >>>>>>>> org.joda.time.field.ScaledDurationField.equals : if $z1 == 0
org.joda.time.field.ScaledDurationField.equals : if $z1 == 0 >>>>>>>> org.joda.time.field.ScaledDurationField.equals : $r5 = virtualinvoke r0.<org.joda.time.field.ScaledDurationField: org.joda.time.DurationFieldType getType()>()
org.joda.time.field.ScaledDurationField.equals : $r5 = virtualinvoke r0.<org.joda.time.field.ScaledDurationField: org.joda.time.DurationFieldType getType()>() >>>>>>>> org.joda.time.field.BaseDurationField.getType : $r1 = r0.<org.joda.time.field.BaseDurationField: org.joda.time.DurationFieldType iType>
org.joda.time.field.BaseDurationField.getType : $r1 = r0.<org.joda.time.field.BaseDurationField: org.joda.time.DurationFieldType iType> >>>>>>>> org.joda.time.field.BaseDurationField.getType : return $r1
org.joda.time.field.BaseDurationField.getType : return $r1 >>>>>>>> org.joda.time.field.ScaledDurationField.equals : $r6 = virtualinvoke r2.<org.joda.time.field.ScaledDurationField: org.joda.time.DurationFieldType getType()>()
org.joda.time.field.ScaledDurationField.equals : $r6 = virtualinvoke r2.<org.joda.time.field.ScaledDurationField: org.joda.time.DurationFieldType getType()>() >>>>>>>> org.joda.time.field.ScaledDurationField.equals : if $r5 != $r6
org.joda.time.field.ScaledDurationField.equals : if $r5 != $r6 >>>>>>>> org.joda.time.field.ScaledDurationField.equals : $i0 = r0.<org.joda.time.field.ScaledDurationField: int iScalar>
org.joda.time.field.ScaledDurationField.equals : $i0 = r0.<org.joda.time.field.ScaledDurationField: int iScalar> >>>>>>>> org.joda.time.field.ScaledDurationField.equals : $i1 = r2.<org.joda.time.field.ScaledDurationField: int iScalar>
org.joda.time.field.ScaledDurationField.equals : $i1 = r2.<org.joda.time.field.ScaledDurationField: int iScalar> >>>>>>>> org.joda.time.field.ScaledDurationField.equals : if $i0 != $i1
org.joda.time.field.ScaledDurationField.equals : if $i0 != $i1 >>>>>>>> org.joda.time.field.ScaledDurationField.equals : $z2 = 0
org.joda.time.field.ScaledDurationField.equals : $z2 = 0 >>>>>>>> org.joda.time.field.ScaledDurationField.equals : return $z2
org.joda.time.field.ScaledDurationField.equals : return $z2 >>>>>>>> org.joda.time.field.ScaledDurationField.equals : $z2 = 1
org.joda.time.field.ScaledDurationField.equals : $z2 = 1 >>>>>>>> org.joda.time.field.ScaledDurationField.equals : goto [?= return $z2]
org.joda.time.field.ScaledDurationField.equals : goto [?= return $z2] >>>>>>>> org.joda.time.DurationFieldType.millis : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MILLIS_TYPE>
org.joda.time.DurationFieldType.millis : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MILLIS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.millis : return $r0
