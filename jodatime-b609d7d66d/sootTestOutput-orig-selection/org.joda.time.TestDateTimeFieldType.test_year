org.joda.time.DateTimeFieldType.year : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType YEAR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.year : return $r0
org.joda.time.DateTimeFieldType.year : return $r0 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.equals : if r0 != r1
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.equals : if r0 != r1 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.equals : return 1
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.equals : return 1 >>>>>>>> org.joda.time.DateTimeFieldType.getName : $r1 = r0.<org.joda.time.DateTimeFieldType: java.lang.String iName>
org.joda.time.DateTimeFieldType.getName : $r1 = r0.<org.joda.time.DateTimeFieldType: java.lang.String iName> >>>>>>>> org.joda.time.DateTimeFieldType.getName : return $r1
org.joda.time.DateTimeFieldType.getName : return $r1 >>>>>>>> org.joda.time.DurationFieldType.years : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType YEARS_TYPE>
org.joda.time.DurationFieldType.years : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType YEARS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.years : return $r0
org.joda.time.DurationFieldType.years : return $r0 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getDurationType : $r1 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DurationFieldType iUnitType>
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getDurationType : $r1 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DurationFieldType iUnitType> >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getDurationType : return $r1
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getDurationType : return $r1 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.equals : if r0 != r1
org.joda.time.DurationFieldType$StandardDurationFieldType.equals : if r0 != r1 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.equals : return 1
org.joda.time.DurationFieldType$StandardDurationFieldType.equals : return 1 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getRangeDurationType : $r1 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DurationFieldType iRangeType>
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getRangeDurationType : $r1 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DurationFieldType iRangeType> >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getRangeDurationType : return $r1
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getRangeDurationType : return $r1 >>>>>>>> org.joda.time.chrono.CopticChronology.getInstanceUTC : $r0 = <org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology INSTANCE_UTC>
org.joda.time.chrono.CopticChronology.getInstanceUTC : $r0 = <org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.CopticChronology.getInstanceUTC : return $r0
org.joda.time.chrono.CopticChronology.getInstanceUTC : return $r0 >>>>>>>> org.joda.time.chrono.AssembledChronology.year : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear>
org.joda.time.chrono.AssembledChronology.year : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.year : return $r1
org.joda.time.chrono.AssembledChronology.year : return $r1 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DateTimeUtils.getChronology : if r0 != null
org.joda.time.DateTimeUtils.getChronology : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getChronology : return r0
org.joda.time.DateTimeUtils.getChronology : return r0 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $b0 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: byte iOrdinal>
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $b0 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: byte iOrdinal> >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : tableswitch($b0) {     case 1:
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : tableswitch($b0) {     case 1: >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r7 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r7 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r7
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r7 >>>>>>>> org.joda.time.field.BaseDateTimeField.isSupported : return 1
org.joda.time.field.BaseDateTimeField.isSupported : return 1 >>>>>>>> org.joda.time.DateTimeFieldType.isSupported : $r2 = virtualinvoke r0.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r1)
org.joda.time.DateTimeFieldType.isSupported : $r2 = virtualinvoke r0.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DateTimeFieldType.isSupported : $z0 = virtualinvoke $r2.<org.joda.time.DateTimeField: boolean isSupported()>()
org.joda.time.DateTimeFieldType.isSupported : $z0 = virtualinvoke $r2.<org.joda.time.DateTimeField: boolean isSupported()>() >>>>>>>> org.joda.time.DateTimeFieldType.isSupported : return $z0
org.joda.time.DateTimeFieldType.isSupported : return $z0 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.readResolve : $b0 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: byte iOrdinal>
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.readResolve : $b0 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: byte iOrdinal> >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.readResolve : tableswitch($b0) {     case 1:
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.readResolve : tableswitch($b0) {     case 1: >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.readResolve : $r5 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$400()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.readResolve : $r5 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType access$400()>() >>>>>>>> org.joda.time.DateTimeFieldType.access$400 : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType YEAR_TYPE>
org.joda.time.DateTimeFieldType.access$400 : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType YEAR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.access$400 : return $r0
org.joda.time.DateTimeFieldType.access$400 : return $r0 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.readResolve : return $r5
