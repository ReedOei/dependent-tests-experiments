org.joda.time.DateTimeUtils.setCurrentMillisSystem : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>() >>>>>>>> org.joda.time.DateTimeUtils.checkPermission : r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>()
org.joda.time.DateTimeUtils.checkPermission : r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>() >>>>>>>> org.joda.time.DateTimeUtils.checkPermission : if r0 == null
org.joda.time.DateTimeUtils.checkPermission : if r0 == null >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisSystem : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$SystemMillisProvider SYSTEM_MILLIS_PROVIDER>
org.joda.time.DateTimeUtils.setCurrentMillisSystem : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$SystemMillisProvider SYSTEM_MILLIS_PROVIDER> >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisSystem : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0
org.joda.time.DateTimeUtils.setCurrentMillisSystem : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0 >>>>>>>> org.joda.time.DateTimeZone.setDefault : r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>()
org.joda.time.DateTimeZone.setDefault : r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>() >>>>>>>> org.joda.time.DateTimeZone.setDefault : if r1 == null
org.joda.time.DateTimeZone.setDefault : if r1 == null >>>>>>>> org.joda.time.DateTimeZone.setDefault : if r0 != null
org.joda.time.DateTimeZone.setDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.setDefault : $r6 = class "org/joda/time/DateTimeZone"
org.joda.time.DateTimeZone.setDefault : $r6 = class "org/joda/time/DateTimeZone" >>>>>>>> org.joda.time.DateTimeZone.setDefault : r3 = $r6
org.joda.time.DateTimeZone.setDefault : r3 = $r6 >>>>>>>> org.joda.time.DateTimeZone.setDefault : entermonitor $r6
org.joda.time.DateTimeZone.setDefault : entermonitor $r6 >>>>>>>> org.joda.time.DateTimeZone.setDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r0
org.joda.time.DateTimeZone.setDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r0 >>>>>>>> org.joda.time.DateTimeZone.setDefault : exitmonitor r3
org.joda.time.DateTimeZone.setDefault : exitmonitor r3 >>>>>>>> org.joda.time.DateTimeZone.setDefault : goto [?= return]
org.joda.time.DateTimeZone.setDefault : goto [?= return] >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>()
org.joda.time.DateTimeUtils.setCurrentMillisFixed : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>() >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : $r0 = new org.joda.time.DateTimeUtils$FixedMillisProvider
org.joda.time.DateTimeUtils.setCurrentMillisFixed : $r0 = new org.joda.time.DateTimeUtils$FixedMillisProvider >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : specialinvoke $r0.<org.joda.time.DateTimeUtils$FixedMillisProvider: void <init>(long)>(l0)
org.joda.time.DateTimeUtils.setCurrentMillisFixed : specialinvoke $r0.<org.joda.time.DateTimeUtils$FixedMillisProvider: void <init>(long)>(l0) >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0
org.joda.time.DateTimeUtils.setCurrentMillisFixed : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0 >>>>>>>> org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> >>>>>>>> org.joda.time.DateTimeZone.getDefault : if r0 != null
org.joda.time.DateTimeZone.getDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.DateTimeZone.getDefault : return r0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstanceUTC : $r0 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC>
org.joda.time.chrono.ISOChronology.getInstanceUTC : $r0 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.ISOChronology.getInstanceUTC : return $r0
org.joda.time.chrono.ISOChronology.getInstanceUTC : return $r0 >>>>>>>> org.joda.time.DateTimeUtils.getChronology : if r0 != null
org.joda.time.DateTimeUtils.getChronology : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getChronology : return r0
org.joda.time.DateTimeUtils.getChronology : return r0 >>>>>>>> org.joda.time.chrono.ISOChronology.withUTC : $r1 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC>
org.joda.time.chrono.ISOChronology.withUTC : $r1 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.ISOChronology.withUTC : return $r1
org.joda.time.chrono.ISOChronology.withUTC : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getDateTimeMillis : r1 = $r2
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : r1 = $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.getDateTimeMillis : if $r2 == null
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : if $r2 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $i7 = r0.<org.joda.time.chrono.AssembledChronology: int iBaseFlags>
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $i7 = r0.<org.joda.time.chrono.AssembledChronology: int iBaseFlags> >>>>>>>> org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $i8 = $i7 & 5
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $i8 = $i7 & 5 >>>>>>>> org.joda.time.chrono.AssembledChronology.getDateTimeMillis : if $i8 != 5
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : if $i8 != 5 >>>>>>>> org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $l9 = virtualinvoke r1.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5, i6)
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $l9 = virtualinvoke r1.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5, i6) >>>>>>>> org.joda.time.chrono.GregorianChronology.getDateTimeMillis : $l7 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5, i6)
org.joda.time.chrono.GregorianChronology.getDateTimeMillis : $l7 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5, i6) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getBase : return $r1
org.joda.time.chrono.AssembledChronology.getBase : return $r1 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : r1 = $r2
org.joda.time.chrono.BasicChronology.getDateTimeMillis : r1 = $r2 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : if $r2 == null
org.joda.time.chrono.BasicChronology.getDateTimeMillis : if $r2 == null >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r3 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>()
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r3 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType hourOfDay()>() >>>>>>>> org.joda.time.DateTimeFieldType.hourOfDay : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType HOUR_OF_DAY_TYPE>
org.joda.time.DateTimeFieldType.hourOfDay : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType HOUR_OF_DAY_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.hourOfDay : return $r0
org.joda.time.DateTimeFieldType.hourOfDay : return $r0 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r3, i3, 0, 23)
org.joda.time.chrono.BasicChronology.getDateTimeMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r3, i3, 0, 23) >>>>>>>> org.joda.time.field.FieldUtils.verifyValueBounds : if i0 < i1
org.joda.time.field.FieldUtils.verifyValueBounds : if i0 < i1 >>>>>>>> org.joda.time.field.FieldUtils.verifyValueBounds : if i0 <= i2
org.joda.time.field.FieldUtils.verifyValueBounds : if i0 <= i2 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r4 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>()
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r4 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType minuteOfHour()>() >>>>>>>> org.joda.time.DateTimeFieldType.minuteOfHour : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MINUTE_OF_HOUR_TYPE>
org.joda.time.DateTimeFieldType.minuteOfHour : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MINUTE_OF_HOUR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.minuteOfHour : return $r0
org.joda.time.DateTimeFieldType.minuteOfHour : return $r0 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r4, i4, 0, 59)
org.joda.time.chrono.BasicChronology.getDateTimeMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r4, i4, 0, 59) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r5 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>()
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r5 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType secondOfMinute()>() >>>>>>>> org.joda.time.DateTimeFieldType.secondOfMinute : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType SECOND_OF_MINUTE_TYPE>
org.joda.time.DateTimeFieldType.secondOfMinute : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType SECOND_OF_MINUTE_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.secondOfMinute : return $r0
org.joda.time.DateTimeFieldType.secondOfMinute : return $r0 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r5, i5, 0, 59)
org.joda.time.chrono.BasicChronology.getDateTimeMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r5, i5, 0, 59) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r6 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>()
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r6 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>() >>>>>>>> org.joda.time.DateTimeFieldType.millisOfSecond : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MILLIS_OF_SECOND_TYPE>
org.joda.time.DateTimeFieldType.millisOfSecond : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MILLIS_OF_SECOND_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.millisOfSecond : return $r0
org.joda.time.DateTimeFieldType.millisOfSecond : return $r0 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r6, i6, 0, 999)
org.joda.time.chrono.BasicChronology.getDateTimeMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r6, i6, 0, 999) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l8 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>(i0, i1, i2)
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l8 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>(i0, i1, i2) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>()
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>() >>>>>>>> org.joda.time.DateTimeFieldType.year : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType YEAR_TYPE>
org.joda.time.DateTimeFieldType.year : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType YEAR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.year : return $r0
org.joda.time.DateTimeFieldType.year : return $r0 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMinYear()>()
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMinYear()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getMinYear : return -292275054
org.joda.time.chrono.GregorianChronology.getMinYear : return -292275054 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMaxYear()>()
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMaxYear()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getMaxYear : return 292278993
org.joda.time.chrono.GregorianChronology.getMaxYear : return 292278993 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r1, i0, $i3, $i4)
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r1, i0, $i3, $i4) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>()
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>() >>>>>>>> org.joda.time.DateTimeFieldType.monthOfYear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MONTH_OF_YEAR_TYPE>
org.joda.time.DateTimeFieldType.monthOfYear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MONTH_OF_YEAR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.monthOfYear : return $r0
org.joda.time.DateTimeFieldType.monthOfYear : return $r0 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i5 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMaxMonth(int)>(i0)
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i5 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMaxMonth(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicChronology.getMaxMonth : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMaxMonth()>()
org.joda.time.chrono.BasicChronology.getMaxMonth : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMaxMonth()>() >>>>>>>> org.joda.time.chrono.BasicChronology.getMaxMonth : return 12
org.joda.time.chrono.BasicChronology.getMaxMonth : return 12 >>>>>>>> org.joda.time.chrono.BasicChronology.getMaxMonth : return $i1
org.joda.time.chrono.BasicChronology.getMaxMonth : return $i1 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r2, i1, 1, $i5)
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r2, i1, 1, $i5) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $r3 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>()
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $r3 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>() >>>>>>>> org.joda.time.DateTimeFieldType.dayOfMonth : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType DAY_OF_MONTH_TYPE>
org.joda.time.DateTimeFieldType.dayOfMonth : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType DAY_OF_MONTH_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.dayOfMonth : return $r0
org.joda.time.DateTimeFieldType.dayOfMonth : return $r0 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i6 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>(i0, i1)
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i6 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>(i0, i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0)
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0) >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : $i1 = i0 & 3
org.joda.time.chrono.GregorianChronology.isLeapYear : $i1 = i0 & 3 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : if $i1 != 0
org.joda.time.chrono.GregorianChronology.isLeapYear : if $i1 != 0 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : $z0 = 0
org.joda.time.chrono.GregorianChronology.isLeapYear : $z0 = 0 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : return $z0
org.joda.time.chrono.GregorianChronology.isLeapYear : return $z0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : if $z0 == 0
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $r2 = <org.joda.time.chrono.BasicGJChronology: int[] MIN_DAYS_PER_MONTH_ARRAY>
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $r2 = <org.joda.time.chrono.BasicGJChronology: int[] MIN_DAYS_PER_MONTH_ARRAY> >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i4 = i1 - 1
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i4 = i1 - 1 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i5 = $r2[$i4]
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i5 = $r2[$i4] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : return $i5
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : return $i5 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r3, i2, 1, $i6)
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r3, i2, 1, $i6) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $l7 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>(i0, i1, i2)
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $l7 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>(i0, i1, i2) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0)
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMillis : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>(i0)
org.joda.time.chrono.BasicChronology.getYearMillis : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $r2 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache>
org.joda.time.chrono.BasicChronology.getYearInfo : $r2 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $i1 = i0 & 1023
org.joda.time.chrono.BasicChronology.getYearInfo : $i1 = i0 & 1023 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : r1 = $r2[$i1]
org.joda.time.chrono.BasicChronology.getYearInfo : r1 = $r2[$i1] >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : if r1 == null
org.joda.time.chrono.BasicChronology.getYearInfo : if r1 == null >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $i2 = r1.<org.joda.time.chrono.BasicChronology$YearInfo: int iYear>
org.joda.time.chrono.BasicChronology.getYearInfo : $i2 = r1.<org.joda.time.chrono.BasicChronology$YearInfo: int iYear> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : if $i2 == i0
org.joda.time.chrono.BasicChronology.getYearInfo : if $i2 == i0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : return r1
org.joda.time.chrono.BasicChronology.getYearInfo : return r1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMillis : $l1 = $r1.<org.joda.time.chrono.BasicChronology$YearInfo: long iFirstDayMillis>
org.joda.time.chrono.BasicChronology.getYearMillis : $l1 = $r1.<org.joda.time.chrono.BasicChronology$YearInfo: long iFirstDayMillis> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMillis : return $l1
org.joda.time.chrono.BasicChronology.getYearMillis : return $l1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i0, i1)
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i0, i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0)
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : if $z0 == 0
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $r2 = <org.joda.time.chrono.BasicGJChronology: long[] MIN_TOTAL_MILLIS_BY_MONTH_ARRAY>
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $r2 = <org.joda.time.chrono.BasicGJChronology: long[] MIN_TOTAL_MILLIS_BY_MONTH_ARRAY> >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $i4 = i1 - 1
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $i4 = i1 - 1 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $l5 = $r2[$i4]
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $l5 = $r2[$i4] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : return $l5
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : return $l5 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l5 = l3 + $l4
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l5 = l3 + $l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $i6 = i2 - 1
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $i6 = i2 - 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l7 = (long) $i6
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l7 = (long) $i6 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l8 = $l7 * 86400000L
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l8 = $l7 * 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l9 = l5 + $l8
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l9 = l5 + $l8 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : return $l9
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : return $l9 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : return $l7
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : return $l7 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $i9 = i3 * 3600000
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $i9 = i3 * 3600000 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l10 = (long) $i9
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l10 = (long) $i9 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l11 = $l8 + $l10
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l11 = $l8 + $l10 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $i12 = i4 * 60000
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $i12 = i4 * 60000 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l13 = (long) $i12
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l13 = (long) $i12 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l14 = $l11 + $l13
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l14 = $l11 + $l13 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $i15 = i5 * 1000
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $i15 = i5 * 1000 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l16 = (long) $i15
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l16 = (long) $i15 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l17 = $l14 + $l16
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l17 = $l14 + $l16 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l18 = (long) i6
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l18 = (long) i6 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l19 = $l17 + $l18
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l19 = $l17 + $l18 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : return $l19
org.joda.time.chrono.BasicChronology.getDateTimeMillis : return $l19 >>>>>>>> org.joda.time.chrono.GregorianChronology.getDateTimeMillis : return $l7
org.joda.time.chrono.GregorianChronology.getDateTimeMillis : return $l7 >>>>>>>> org.joda.time.chrono.AssembledChronology.getDateTimeMillis : return $l9
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : return $l9 >>>>>>>> org.joda.time.LocalDateTime.getChronology : $r1 = r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology iChronology>
org.joda.time.LocalDateTime.getChronology : $r1 = r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology iChronology> >>>>>>>> org.joda.time.LocalDateTime.getChronology : return $r1
org.joda.time.LocalDateTime.getChronology : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology.hourOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay>
org.joda.time.chrono.AssembledChronology.hourOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.hourOfDay : return $r1
org.joda.time.chrono.AssembledChronology.hourOfDay : return $r1 >>>>>>>> org.joda.time.LocalDateTime.hourOfDay : $r1 = new org.joda.time.LocalDateTime$Property
org.joda.time.LocalDateTime.hourOfDay : $r1 = new org.joda.time.LocalDateTime$Property >>>>>>>> org.joda.time.LocalDateTime.hourOfDay : $r2 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>()
org.joda.time.LocalDateTime.hourOfDay : $r2 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.LocalDateTime.hourOfDay : $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>()
org.joda.time.LocalDateTime.hourOfDay : $r3 = virtualinvoke $r2.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>() >>>>>>>> org.joda.time.LocalDateTime.hourOfDay : specialinvoke $r1.<org.joda.time.LocalDateTime$Property: void <init>(org.joda.time.LocalDateTime,org.joda.time.DateTimeField)>(r0, $r3)
org.joda.time.LocalDateTime.hourOfDay : specialinvoke $r1.<org.joda.time.LocalDateTime$Property: void <init>(org.joda.time.LocalDateTime,org.joda.time.DateTimeField)>(r0, $r3) >>>>>>>> org.joda.time.LocalDateTime.hourOfDay : return $r1
org.joda.time.LocalDateTime.hourOfDay : return $r1 >>>>>>>> org.joda.time.LocalDateTime$Property.getField : $r1 = r0.<org.joda.time.LocalDateTime$Property: org.joda.time.DateTimeField iField>
org.joda.time.LocalDateTime$Property.getField : $r1 = r0.<org.joda.time.LocalDateTime$Property: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.LocalDateTime$Property.getField : return $r1
org.joda.time.LocalDateTime$Property.getField : return $r1 >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.getName : $r1 = virtualinvoke r0.<org.joda.time.field.AbstractReadableInstantFieldProperty: org.joda.time.DateTimeField getField()>()
org.joda.time.field.AbstractReadableInstantFieldProperty.getName : $r1 = virtualinvoke r0.<org.joda.time.field.AbstractReadableInstantFieldProperty: org.joda.time.DateTimeField getField()>() >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.getName : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: java.lang.String getName()>()
org.joda.time.field.AbstractReadableInstantFieldProperty.getName : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: java.lang.String getName()>() >>>>>>>> org.joda.time.field.BaseDateTimeField.getName : $r1 = r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType iType>
org.joda.time.field.BaseDateTimeField.getName : $r1 = r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType iType> >>>>>>>> org.joda.time.field.BaseDateTimeField.getName : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeFieldType: java.lang.String getName()>()
org.joda.time.field.BaseDateTimeField.getName : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeFieldType: java.lang.String getName()>() >>>>>>>> org.joda.time.DateTimeFieldType.getName : $r1 = r0.<org.joda.time.DateTimeFieldType: java.lang.String iName>
org.joda.time.DateTimeFieldType.getName : $r1 = r0.<org.joda.time.DateTimeFieldType: java.lang.String iName> >>>>>>>> org.joda.time.DateTimeFieldType.getName : return $r1
org.joda.time.DateTimeFieldType.getName : return $r1 >>>>>>>> org.joda.time.field.BaseDateTimeField.getName : return $r2
org.joda.time.field.BaseDateTimeField.getName : return $r2 >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.getName : return $r2
org.joda.time.field.AbstractReadableInstantFieldProperty.getName : return $r2 >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.toString : $r1 = new java.lang.StringBuilder
org.joda.time.field.AbstractReadableInstantFieldProperty.toString : $r1 = new java.lang.StringBuilder >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.toString : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()
org.joda.time.field.AbstractReadableInstantFieldProperty.toString : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.toString : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Property[")
org.joda.time.field.AbstractReadableInstantFieldProperty.toString : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Property[") >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.toString : $r3 = virtualinvoke r0.<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getName()>()
org.joda.time.field.AbstractReadableInstantFieldProperty.toString : $r3 = virtualinvoke r0.<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getName()>() >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.toString : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3)
org.joda.time.field.AbstractReadableInstantFieldProperty.toString : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.toString : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]")
org.joda.time.field.AbstractReadableInstantFieldProperty.toString : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]") >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.toString : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()
org.joda.time.field.AbstractReadableInstantFieldProperty.toString : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.toString : return $r6
org.joda.time.field.AbstractReadableInstantFieldProperty.toString : return $r6 >>>>>>>> org.joda.time.LocalDateTime$Property.getLocalDateTime : $r1 = r0.<org.joda.time.LocalDateTime$Property: org.joda.time.LocalDateTime iInstant>
org.joda.time.LocalDateTime$Property.getLocalDateTime : $r1 = r0.<org.joda.time.LocalDateTime$Property: org.joda.time.LocalDateTime iInstant> >>>>>>>> org.joda.time.LocalDateTime$Property.getLocalDateTime : return $r1
org.joda.time.LocalDateTime$Property.getLocalDateTime : return $r1 >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.get : $r1 = virtualinvoke r0.<org.joda.time.field.AbstractReadableInstantFieldProperty: org.joda.time.DateTimeField getField()>()
org.joda.time.field.AbstractReadableInstantFieldProperty.get : $r1 = virtualinvoke r0.<org.joda.time.field.AbstractReadableInstantFieldProperty: org.joda.time.DateTimeField getField()>() >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.get : $l0 = virtualinvoke r0.<org.joda.time.field.AbstractReadableInstantFieldProperty: long getMillis()>()
org.joda.time.field.AbstractReadableInstantFieldProperty.get : $l0 = virtualinvoke r0.<org.joda.time.field.AbstractReadableInstantFieldProperty: long getMillis()>() >>>>>>>> org.joda.time.LocalDateTime$Property.getMillis : $r1 = r0.<org.joda.time.LocalDateTime$Property: org.joda.time.LocalDateTime iInstant>
org.joda.time.LocalDateTime$Property.getMillis : $r1 = r0.<org.joda.time.LocalDateTime$Property: org.joda.time.LocalDateTime iInstant> >>>>>>>> org.joda.time.LocalDateTime$Property.getMillis : $l0 = virtualinvoke $r1.<org.joda.time.LocalDateTime: long getLocalMillis()>()
org.joda.time.LocalDateTime$Property.getMillis : $l0 = virtualinvoke $r1.<org.joda.time.LocalDateTime: long getLocalMillis()>() >>>>>>>> org.joda.time.LocalDateTime.getLocalMillis : $l0 = r0.<org.joda.time.LocalDateTime: long iLocalMillis>
org.joda.time.LocalDateTime.getLocalMillis : $l0 = r0.<org.joda.time.LocalDateTime: long iLocalMillis> >>>>>>>> org.joda.time.LocalDateTime.getLocalMillis : return $l0
org.joda.time.LocalDateTime.getLocalMillis : return $l0 >>>>>>>> org.joda.time.LocalDateTime$Property.getMillis : return $l0
org.joda.time.LocalDateTime$Property.getMillis : return $l0 >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.get : $i1 = virtualinvoke $r1.<org.joda.time.DateTimeField: int get(long)>($l0)
org.joda.time.field.AbstractReadableInstantFieldProperty.get : $i1 = virtualinvoke $r1.<org.joda.time.DateTimeField: int get(long)>($l0) >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $b1 = l0 cmp 0L
org.joda.time.field.PreciseDateTimeField.get : $b1 = l0 cmp 0L >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : if $b1 < 0
org.joda.time.field.PreciseDateTimeField.get : if $b1 < 0 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l2 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: long getUnitMillis()>()
org.joda.time.field.PreciseDateTimeField.get : $l2 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: long getUnitMillis()>() >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : return $l0
org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : return $l0 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l3 = l0 / $l2
org.joda.time.field.PreciseDateTimeField.get : $l3 = l0 / $l2 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $i4 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange>
org.joda.time.field.PreciseDateTimeField.get : $i4 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange> >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l5 = (long) $i4
org.joda.time.field.PreciseDateTimeField.get : $l5 = (long) $i4 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l6 = $l3 % $l5
org.joda.time.field.PreciseDateTimeField.get : $l6 = $l3 % $l5 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $i7 = (int) $l6
org.joda.time.field.PreciseDateTimeField.get : $i7 = (int) $l6 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : return $i7
org.joda.time.field.PreciseDateTimeField.get : return $i7 >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.get : return $i1
org.joda.time.field.AbstractReadableInstantFieldProperty.get : return $i1 >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.getAsString : $i0 = virtualinvoke r0.<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>()
org.joda.time.field.AbstractReadableInstantFieldProperty.getAsString : $i0 = virtualinvoke r0.<org.joda.time.field.AbstractReadableInstantFieldProperty: int get()>() >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.getAsString : $r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0)
org.joda.time.field.AbstractReadableInstantFieldProperty.getAsString : $r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0) >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.getAsString : return $r1
org.joda.time.field.AbstractReadableInstantFieldProperty.getAsString : return $r1 >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.getAsText : $r1 = virtualinvoke r0.<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsText(java.util.Locale)>(null)
org.joda.time.field.AbstractReadableInstantFieldProperty.getAsText : $r1 = virtualinvoke r0.<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsText(java.util.Locale)>(null) >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.getAsText : $r2 = virtualinvoke r0.<org.joda.time.field.AbstractReadableInstantFieldProperty: org.joda.time.DateTimeField getField()>()
org.joda.time.field.AbstractReadableInstantFieldProperty.getAsText : $r2 = virtualinvoke r0.<org.joda.time.field.AbstractReadableInstantFieldProperty: org.joda.time.DateTimeField getField()>() >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.getAsText : $l0 = virtualinvoke r0.<org.joda.time.field.AbstractReadableInstantFieldProperty: long getMillis()>()
org.joda.time.field.AbstractReadableInstantFieldProperty.getAsText : $l0 = virtualinvoke r0.<org.joda.time.field.AbstractReadableInstantFieldProperty: long getMillis()>() >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.getAsText : $r3 = virtualinvoke $r2.<org.joda.time.DateTimeField: java.lang.String getAsText(long,java.util.Locale)>($l0, r1)
org.joda.time.field.AbstractReadableInstantFieldProperty.getAsText : $r3 = virtualinvoke $r2.<org.joda.time.DateTimeField: java.lang.String getAsText(long,java.util.Locale)>($l0, r1) >>>>>>>> org.joda.time.field.BaseDateTimeField.getAsText : $i1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int get(long)>(l0)
org.joda.time.field.BaseDateTimeField.getAsText : $i1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.field.BaseDateTimeField.getAsText : $r2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(int,java.util.Locale)>($i1, r1)
org.joda.time.field.BaseDateTimeField.getAsText : $r2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(int,java.util.Locale)>($i1, r1) >>>>>>>> org.joda.time.field.BaseDateTimeField.getAsText : $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0)
org.joda.time.field.BaseDateTimeField.getAsText : $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0) >>>>>>>> org.joda.time.field.BaseDateTimeField.getAsText : return $r2
org.joda.time.field.BaseDateTimeField.getAsText : return $r2 >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.getAsText : return $r3
org.joda.time.field.AbstractReadableInstantFieldProperty.getAsText : return $r3 >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.getAsText : return $r1
org.joda.time.field.AbstractReadableInstantFieldProperty.getAsText : return $r1 >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.getAsShortText : $r1 = virtualinvoke r0.<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsShortText(java.util.Locale)>(null)
org.joda.time.field.AbstractReadableInstantFieldProperty.getAsShortText : $r1 = virtualinvoke r0.<org.joda.time.field.AbstractReadableInstantFieldProperty: java.lang.String getAsShortText(java.util.Locale)>(null) >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.getAsShortText : $r2 = virtualinvoke r0.<org.joda.time.field.AbstractReadableInstantFieldProperty: org.joda.time.DateTimeField getField()>()
org.joda.time.field.AbstractReadableInstantFieldProperty.getAsShortText : $r2 = virtualinvoke r0.<org.joda.time.field.AbstractReadableInstantFieldProperty: org.joda.time.DateTimeField getField()>() >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.getAsShortText : $l0 = virtualinvoke r0.<org.joda.time.field.AbstractReadableInstantFieldProperty: long getMillis()>()
org.joda.time.field.AbstractReadableInstantFieldProperty.getAsShortText : $l0 = virtualinvoke r0.<org.joda.time.field.AbstractReadableInstantFieldProperty: long getMillis()>() >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.getAsShortText : $r3 = virtualinvoke $r2.<org.joda.time.DateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>($l0, r1)
org.joda.time.field.AbstractReadableInstantFieldProperty.getAsShortText : $r3 = virtualinvoke $r2.<org.joda.time.DateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>($l0, r1) >>>>>>>> org.joda.time.field.BaseDateTimeField.getAsShortText : $i1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int get(long)>(l0)
org.joda.time.field.BaseDateTimeField.getAsShortText : $i1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.field.BaseDateTimeField.getAsShortText : $r2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>($i1, r1)
org.joda.time.field.BaseDateTimeField.getAsShortText : $r2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: java.lang.String getAsShortText(int,java.util.Locale)>($i1, r1) >>>>>>>> org.joda.time.field.BaseDateTimeField.getAsShortText : $r2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(int,java.util.Locale)>(i0, r1)
org.joda.time.field.BaseDateTimeField.getAsShortText : $r2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: java.lang.String getAsText(int,java.util.Locale)>(i0, r1) >>>>>>>> org.joda.time.field.BaseDateTimeField.getAsShortText : return $r2
org.joda.time.field.BaseDateTimeField.getAsShortText : return $r2 >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.getAsShortText : return $r3
org.joda.time.field.AbstractReadableInstantFieldProperty.getAsShortText : return $r3 >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.getAsShortText : return $r1
org.joda.time.field.AbstractReadableInstantFieldProperty.getAsShortText : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology.hours : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHours>
org.joda.time.chrono.AssembledChronology.hours : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHours> >>>>>>>> org.joda.time.chrono.AssembledChronology.hours : return $r1
org.joda.time.chrono.AssembledChronology.hours : return $r1 >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.getDurationField : $r1 = virtualinvoke r0.<org.joda.time.field.AbstractReadableInstantFieldProperty: org.joda.time.DateTimeField getField()>()
org.joda.time.field.AbstractReadableInstantFieldProperty.getDurationField : $r1 = virtualinvoke r0.<org.joda.time.field.AbstractReadableInstantFieldProperty: org.joda.time.DateTimeField getField()>() >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.getDurationField : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>()
org.joda.time.field.AbstractReadableInstantFieldProperty.getDurationField : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>() >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getDurationField : $r1 = r0.<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField iUnitField>
org.joda.time.field.PreciseDurationDateTimeField.getDurationField : $r1 = r0.<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField iUnitField> >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getDurationField : return $r1
org.joda.time.field.PreciseDurationDateTimeField.getDurationField : return $r1 >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.getDurationField : return $r2
org.joda.time.field.AbstractReadableInstantFieldProperty.getDurationField : return $r2 >>>>>>>> org.joda.time.field.PreciseDurationField.equals : if r0 != r1
org.joda.time.field.PreciseDurationField.equals : if r0 != r1 >>>>>>>> org.joda.time.field.PreciseDurationField.equals : return 1
org.joda.time.field.PreciseDurationField.equals : return 1 >>>>>>>> org.joda.time.chrono.AssembledChronology.days : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays>
org.joda.time.chrono.AssembledChronology.days : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays> >>>>>>>> org.joda.time.chrono.AssembledChronology.days : return $r1
org.joda.time.chrono.AssembledChronology.days : return $r1 >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.getRangeDurationField : $r1 = virtualinvoke r0.<org.joda.time.field.AbstractReadableInstantFieldProperty: org.joda.time.DateTimeField getField()>()
org.joda.time.field.AbstractReadableInstantFieldProperty.getRangeDurationField : $r1 = virtualinvoke r0.<org.joda.time.field.AbstractReadableInstantFieldProperty: org.joda.time.DateTimeField getField()>() >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.getRangeDurationField : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getRangeDurationField()>()
org.joda.time.field.AbstractReadableInstantFieldProperty.getRangeDurationField : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getRangeDurationField()>() >>>>>>>> org.joda.time.field.PreciseDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.field.PreciseDateTimeField: org.joda.time.DurationField iRangeField>
org.joda.time.field.PreciseDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.field.PreciseDateTimeField: org.joda.time.DurationField iRangeField> >>>>>>>> org.joda.time.field.PreciseDateTimeField.getRangeDurationField : return $r1
org.joda.time.field.PreciseDateTimeField.getRangeDurationField : return $r1 >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.getRangeDurationField : return $r2
org.joda.time.field.AbstractReadableInstantFieldProperty.getRangeDurationField : return $r2 >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.getMaximumTextLength : $r2 = virtualinvoke r0.<org.joda.time.field.AbstractReadableInstantFieldProperty: org.joda.time.DateTimeField getField()>()
org.joda.time.field.AbstractReadableInstantFieldProperty.getMaximumTextLength : $r2 = virtualinvoke r0.<org.joda.time.field.AbstractReadableInstantFieldProperty: org.joda.time.DateTimeField getField()>() >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.getMaximumTextLength : $i0 = virtualinvoke $r2.<org.joda.time.DateTimeField: int getMaximumTextLength(java.util.Locale)>(r1)
org.joda.time.field.AbstractReadableInstantFieldProperty.getMaximumTextLength : $i0 = virtualinvoke $r2.<org.joda.time.DateTimeField: int getMaximumTextLength(java.util.Locale)>(r1) >>>>>>>> org.joda.time.field.BaseDateTimeField.getMaximumTextLength : i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue()>()
org.joda.time.field.BaseDateTimeField.getMaximumTextLength : i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.field.PreciseDateTimeField.getMaximumValue : $i0 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange>
org.joda.time.field.PreciseDateTimeField.getMaximumValue : $i0 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange> >>>>>>>> org.joda.time.field.PreciseDateTimeField.getMaximumValue : $i1 = $i0 - 1
org.joda.time.field.PreciseDateTimeField.getMaximumValue : $i1 = $i0 - 1 >>>>>>>> org.joda.time.field.PreciseDateTimeField.getMaximumValue : return $i1
org.joda.time.field.PreciseDateTimeField.getMaximumValue : return $i1 >>>>>>>> org.joda.time.field.BaseDateTimeField.getMaximumTextLength : if i0 < 0
org.joda.time.field.BaseDateTimeField.getMaximumTextLength : if i0 < 0 >>>>>>>> org.joda.time.field.BaseDateTimeField.getMaximumTextLength : if i0 >= 10
org.joda.time.field.BaseDateTimeField.getMaximumTextLength : if i0 >= 10 >>>>>>>> org.joda.time.field.BaseDateTimeField.getMaximumTextLength : if i0 >= 100
org.joda.time.field.BaseDateTimeField.getMaximumTextLength : if i0 >= 100 >>>>>>>> org.joda.time.field.BaseDateTimeField.getMaximumTextLength : return 2
org.joda.time.field.BaseDateTimeField.getMaximumTextLength : return 2 >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.getMaximumTextLength : return $i0
org.joda.time.field.AbstractReadableInstantFieldProperty.getMaximumTextLength : return $i0 >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.getMaximumShortTextLength : $r2 = virtualinvoke r0.<org.joda.time.field.AbstractReadableInstantFieldProperty: org.joda.time.DateTimeField getField()>()
org.joda.time.field.AbstractReadableInstantFieldProperty.getMaximumShortTextLength : $r2 = virtualinvoke r0.<org.joda.time.field.AbstractReadableInstantFieldProperty: org.joda.time.DateTimeField getField()>() >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.getMaximumShortTextLength : $i0 = virtualinvoke $r2.<org.joda.time.DateTimeField: int getMaximumShortTextLength(java.util.Locale)>(r1)
org.joda.time.field.AbstractReadableInstantFieldProperty.getMaximumShortTextLength : $i0 = virtualinvoke $r2.<org.joda.time.DateTimeField: int getMaximumShortTextLength(java.util.Locale)>(r1) >>>>>>>> org.joda.time.field.BaseDateTimeField.getMaximumShortTextLength : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>(r1)
org.joda.time.field.BaseDateTimeField.getMaximumShortTextLength : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumTextLength(java.util.Locale)>(r1) >>>>>>>> org.joda.time.field.BaseDateTimeField.getMaximumShortTextLength : return $i0
org.joda.time.field.BaseDateTimeField.getMaximumShortTextLength : return $i0 >>>>>>>> org.joda.time.field.AbstractReadableInstantFieldProperty.getMaximumShortTextLength : return $i0
