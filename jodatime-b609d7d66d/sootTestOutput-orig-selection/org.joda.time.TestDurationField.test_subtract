org.joda.time.chrono.ISOChronology.getInstanceUTC : $r0 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.ISOChronology.getInstanceUTC : return $r0
org.joda.time.chrono.ISOChronology.getInstanceUTC : return $r0 >>>>>>>> org.joda.time.chrono.AssembledChronology.millis : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMillis>
org.joda.time.chrono.AssembledChronology.millis : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMillis> >>>>>>>> org.joda.time.chrono.AssembledChronology.millis : return $r1
org.joda.time.chrono.AssembledChronology.millis : return $r1 >>>>>>>> org.joda.time.DurationField.subtract : if i1 != -2147483648
org.joda.time.DurationField.subtract : if i1 != -2147483648 >>>>>>>> org.joda.time.DurationField.subtract : $i4 = neg i1
org.joda.time.DurationField.subtract : $i4 = neg i1 >>>>>>>> org.joda.time.DurationField.subtract : $l5 = virtualinvoke r0.<org.joda.time.DurationField: long add(long,int)>(l0, $i4)
org.joda.time.DurationField.subtract : $l5 = virtualinvoke r0.<org.joda.time.DurationField: long add(long,int)>(l0, $i4) >>>>>>>> org.joda.time.field.MillisDurationField.add : $l2 = (long) i1
org.joda.time.field.MillisDurationField.add : $l2 = (long) i1 >>>>>>>> org.joda.time.field.MillisDurationField.add : $l3 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l0, $l2)
org.joda.time.field.MillisDurationField.add : $l3 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l0, $l2) >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : l2 = l0 + l1
org.joda.time.field.FieldUtils.safeAdd : l2 = l0 + l1 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $l3 = l0 ^ l2
org.joda.time.field.FieldUtils.safeAdd : $l3 = l0 ^ l2 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $b4 = $l3 cmp 0L
org.joda.time.field.FieldUtils.safeAdd : $b4 = $l3 cmp 0L >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : if $b4 >= 0
org.joda.time.field.FieldUtils.safeAdd : if $b4 >= 0 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : return l2
org.joda.time.field.FieldUtils.safeAdd : return l2 >>>>>>>> org.joda.time.field.MillisDurationField.add : return $l3
org.joda.time.field.MillisDurationField.add : return $l3 >>>>>>>> org.joda.time.DurationField.subtract : return $l5
org.joda.time.DurationField.subtract : return $l5 >>>>>>>> org.joda.time.DurationField.subtract : $b2 = l1 cmp -9223372036854775808L
org.joda.time.DurationField.subtract : $b2 = l1 cmp -9223372036854775808L >>>>>>>> org.joda.time.DurationField.subtract : if $b2 != 0
org.joda.time.DurationField.subtract : if $b2 != 0 >>>>>>>> org.joda.time.DurationField.subtract : $l3 = neg l1
org.joda.time.DurationField.subtract : $l3 = neg l1 >>>>>>>> org.joda.time.DurationField.subtract : $l4 = virtualinvoke r0.<org.joda.time.DurationField: long add(long,long)>(l0, $l3)
org.joda.time.DurationField.subtract : $l4 = virtualinvoke r0.<org.joda.time.DurationField: long add(long,long)>(l0, $l3) >>>>>>>> org.joda.time.field.MillisDurationField.add : $l2 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l0, l1)
org.joda.time.field.MillisDurationField.add : $l2 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l0, l1) >>>>>>>> org.joda.time.field.MillisDurationField.add : return $l2
org.joda.time.field.MillisDurationField.add : return $l2 >>>>>>>> org.joda.time.DurationField.subtract : return $l4
org.joda.time.DurationField.subtract : return $l4 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $l5 = l0 ^ l1
org.joda.time.field.FieldUtils.safeAdd : $l5 = l0 ^ l1 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $b6 = $l5 cmp 0L
org.joda.time.field.FieldUtils.safeAdd : $b6 = $l5 cmp 0L >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : if $b6 < 0
org.joda.time.field.FieldUtils.safeAdd : if $b6 < 0 >>>>>>>> org.joda.time.DurationField.subtract : $l2 = (long) i1
org.joda.time.DurationField.subtract : $l2 = (long) i1 >>>>>>>> org.joda.time.DurationField.subtract : $l3 = virtualinvoke r0.<org.joda.time.DurationField: long subtract(long,long)>(l0, $l2)
org.joda.time.DurationField.subtract : $l3 = virtualinvoke r0.<org.joda.time.DurationField: long subtract(long,long)>(l0, $l2) >>>>>>>> org.joda.time.DurationField.subtract : return $l3
org.joda.time.DurationField.subtract : return $l3 >>>>>>>> org.joda.time.DurationField.subtract : $r1 = new java.lang.ArithmeticException
org.joda.time.DurationField.subtract : $r1 = new java.lang.ArithmeticException >>>>>>>> org.joda.time.DurationField.subtract : specialinvoke $r1.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Long.MIN_VALUE cannot be negated")
org.joda.time.DurationField.subtract : specialinvoke $r1.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Long.MIN_VALUE cannot be negated") >>>>>>>> org.joda.time.DurationField.subtract : throw $r1
