org.joda.time.Hours.hours : lookupswitch(i0) {     case -2147483648: >>>>>>>> org.joda.time.Hours.hours : $r2 = <org.joda.time.Hours: org.joda.time.Hours TWO>
org.joda.time.Hours.hours : $r2 = <org.joda.time.Hours: org.joda.time.Hours TWO> >>>>>>>> org.joda.time.Hours.hours : return $r2
org.joda.time.Hours.hours : return $r2 >>>>>>>> org.joda.time.Hours.multipliedBy : $i1 = virtualinvoke r0.<org.joda.time.Hours: int getValue()>()
org.joda.time.Hours.multipliedBy : $i1 = virtualinvoke r0.<org.joda.time.Hours: int getValue()>() >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.getValue : $i0 = r0.<org.joda.time.base.BaseSingleFieldPeriod: int iPeriod>
org.joda.time.base.BaseSingleFieldPeriod.getValue : $i0 = r0.<org.joda.time.base.BaseSingleFieldPeriod: int iPeriod> >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.getValue : return $i0
org.joda.time.base.BaseSingleFieldPeriod.getValue : return $i0 >>>>>>>> org.joda.time.Hours.multipliedBy : $i2 = staticinvoke <org.joda.time.field.FieldUtils: int safeMultiply(int,int)>($i1, i0)
org.joda.time.Hours.multipliedBy : $i2 = staticinvoke <org.joda.time.field.FieldUtils: int safeMultiply(int,int)>($i1, i0) >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : $l3 = (long) i0
org.joda.time.field.FieldUtils.safeMultiply : $l3 = (long) i0 >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : $l4 = (long) i1
org.joda.time.field.FieldUtils.safeMultiply : $l4 = (long) i1 >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : l2 = $l3 * $l4
org.joda.time.field.FieldUtils.safeMultiply : l2 = $l3 * $l4 >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : $b5 = l2 cmp -2147483648L
org.joda.time.field.FieldUtils.safeMultiply : $b5 = l2 cmp -2147483648L >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : if $b5 < 0
org.joda.time.field.FieldUtils.safeMultiply : if $b5 < 0 >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : $b6 = l2 cmp 2147483647L
org.joda.time.field.FieldUtils.safeMultiply : $b6 = l2 cmp 2147483647L >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : if $b6 <= 0
org.joda.time.field.FieldUtils.safeMultiply : if $b6 <= 0 >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : $i7 = (int) l2
org.joda.time.field.FieldUtils.safeMultiply : $i7 = (int) l2 >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : return $i7
org.joda.time.field.FieldUtils.safeMultiply : return $i7 >>>>>>>> org.joda.time.Hours.multipliedBy : $r1 = staticinvoke <org.joda.time.Hours: org.joda.time.Hours hours(int)>($i2)
org.joda.time.Hours.multipliedBy : $r1 = staticinvoke <org.joda.time.Hours: org.joda.time.Hours hours(int)>($i2) >>>>>>>> org.joda.time.Hours.hours : $r6 = <org.joda.time.Hours: org.joda.time.Hours SIX>
org.joda.time.Hours.hours : $r6 = <org.joda.time.Hours: org.joda.time.Hours SIX> >>>>>>>> org.joda.time.Hours.hours : return $r6
org.joda.time.Hours.hours : return $r6 >>>>>>>> org.joda.time.Hours.multipliedBy : return $r1
org.joda.time.Hours.multipliedBy : return $r1 >>>>>>>> org.joda.time.Hours.getHours : $i0 = virtualinvoke r0.<org.joda.time.Hours: int getValue()>()
org.joda.time.Hours.getHours : $i0 = virtualinvoke r0.<org.joda.time.Hours: int getValue()>() >>>>>>>> org.joda.time.Hours.getHours : return $i0
org.joda.time.Hours.getHours : return $i0 >>>>>>>> org.joda.time.Hours.hours : $r11 = new org.joda.time.Hours
org.joda.time.Hours.hours : $r11 = new org.joda.time.Hours >>>>>>>> org.joda.time.Hours.hours : specialinvoke $r11.<org.joda.time.Hours: void <init>(int)>(i0)
org.joda.time.Hours.hours : specialinvoke $r11.<org.joda.time.Hours: void <init>(int)>(i0) >>>>>>>> org.joda.time.Hours.hours : return $r11
org.joda.time.Hours.hours : return $r11 >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : $r0 = new java.lang.ArithmeticException
org.joda.time.field.FieldUtils.safeMultiply : $r0 = new java.lang.ArithmeticException >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : $r1 = new java.lang.StringBuilder
org.joda.time.field.FieldUtils.safeMultiply : $r1 = new java.lang.StringBuilder >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()
org.joda.time.field.FieldUtils.safeMultiply : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The calculation caused an overflow: ")
org.joda.time.field.FieldUtils.safeMultiply : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The calculation caused an overflow: ") >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)
org.joda.time.field.FieldUtils.safeMultiply : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0) >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" * ")
org.joda.time.field.FieldUtils.safeMultiply : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" * ") >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1)
org.joda.time.field.FieldUtils.safeMultiply : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1) >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()
org.joda.time.field.FieldUtils.safeMultiply : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r6)
org.joda.time.field.FieldUtils.safeMultiply : specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r6) >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : throw $r0
