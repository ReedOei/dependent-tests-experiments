org.joda.time.DateTimeUtils.setCurrentMillisSystem : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>() >>>>>>>> org.joda.time.DateTimeUtils.checkPermission : r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>()
org.joda.time.DateTimeUtils.checkPermission : r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>() >>>>>>>> org.joda.time.DateTimeUtils.checkPermission : if r0 == null
org.joda.time.DateTimeUtils.checkPermission : if r0 == null >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisSystem : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$SystemMillisProvider SYSTEM_MILLIS_PROVIDER>
org.joda.time.DateTimeUtils.setCurrentMillisSystem : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$SystemMillisProvider SYSTEM_MILLIS_PROVIDER> >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisSystem : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0
org.joda.time.DateTimeUtils.setCurrentMillisSystem : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0 >>>>>>>> org.joda.time.DateTimeZone.setDefault : r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>()
org.joda.time.DateTimeZone.setDefault : r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>() >>>>>>>> org.joda.time.DateTimeZone.setDefault : if r1 == null
org.joda.time.DateTimeZone.setDefault : if r1 == null >>>>>>>> org.joda.time.DateTimeZone.setDefault : if r0 != null
org.joda.time.DateTimeZone.setDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.setDefault : $r6 = class "org/joda/time/DateTimeZone"
org.joda.time.DateTimeZone.setDefault : $r6 = class "org/joda/time/DateTimeZone" >>>>>>>> org.joda.time.DateTimeZone.setDefault : r3 = $r6
org.joda.time.DateTimeZone.setDefault : r3 = $r6 >>>>>>>> org.joda.time.DateTimeZone.setDefault : entermonitor $r6
org.joda.time.DateTimeZone.setDefault : entermonitor $r6 >>>>>>>> org.joda.time.DateTimeZone.setDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r0
org.joda.time.DateTimeZone.setDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r0 >>>>>>>> org.joda.time.DateTimeZone.setDefault : exitmonitor r3
org.joda.time.DateTimeZone.setDefault : exitmonitor r3 >>>>>>>> org.joda.time.DateTimeZone.setDefault : goto [?= return]
org.joda.time.DateTimeZone.setDefault : goto [?= return] >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>()
org.joda.time.DateTimeUtils.setCurrentMillisFixed : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>() >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : $r0 = new org.joda.time.DateTimeUtils$FixedMillisProvider
org.joda.time.DateTimeUtils.setCurrentMillisFixed : $r0 = new org.joda.time.DateTimeUtils$FixedMillisProvider >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : specialinvoke $r0.<org.joda.time.DateTimeUtils$FixedMillisProvider: void <init>(long)>(l0)
org.joda.time.DateTimeUtils.setCurrentMillisFixed : specialinvoke $r0.<org.joda.time.DateTimeUtils$FixedMillisProvider: void <init>(long)>(l0) >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0
org.joda.time.DateTimeUtils.setCurrentMillisFixed : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0 >>>>>>>> org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> >>>>>>>> org.joda.time.DateTimeZone.getDefault : if r0 != null
org.joda.time.DateTimeZone.getDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.DateTimeZone.getDefault : return r0 >>>>>>>> org.joda.time.DateTimeUtils.getChronology : if r0 != null
org.joda.time.DateTimeUtils.getChronology : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getChronology : return r0
org.joda.time.DateTimeUtils.getChronology : return r0 >>>>>>>> org.joda.time.chrono.CopticChronology.withUTC : $r1 = <org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology INSTANCE_UTC>
org.joda.time.chrono.CopticChronology.withUTC : $r1 = <org.joda.time.chrono.CopticChronology: org.joda.time.chrono.CopticChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.CopticChronology.withUTC : return $r1
org.joda.time.chrono.CopticChronology.withUTC : return $r1 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i0 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>()
org.joda.time.chrono.BaseChronology.validate : i0 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>() >>>>>>>> org.joda.time.YearMonth.size : return 2
org.joda.time.YearMonth.size : return 2 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i1 = 0
org.joda.time.chrono.BaseChronology.validate : i1 = 0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : if i1 >= i0
org.joda.time.chrono.BaseChronology.validate : if i1 >= i0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i2 = r2[i1]
org.joda.time.chrono.BaseChronology.validate : i2 = r2[i1] >>>>>>>> org.joda.time.chrono.BaseChronology.validate : r3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>(i1)
org.joda.time.chrono.BaseChronology.validate : r3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>(i1) >>>>>>>> org.joda.time.base.AbstractPartial.getField : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.Chronology getChronology()>()
org.joda.time.base.AbstractPartial.getField : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.base.BasePartial.getChronology : $r1 = r0.<org.joda.time.base.BasePartial: org.joda.time.Chronology iChronology>
org.joda.time.base.BasePartial.getChronology : $r1 = r0.<org.joda.time.base.BasePartial: org.joda.time.Chronology iChronology> >>>>>>>> org.joda.time.base.BasePartial.getChronology : return $r1
org.joda.time.base.BasePartial.getChronology : return $r1 >>>>>>>> org.joda.time.base.AbstractPartial.getField : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>(i0, $r1)
org.joda.time.base.AbstractPartial.getField : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>(i0, $r1) >>>>>>>> org.joda.time.YearMonth.getField : lookupswitch(i0) {     case 0:
org.joda.time.YearMonth.getField : lookupswitch(i0) {     case 0: >>>>>>>> org.joda.time.YearMonth.getField : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.YearMonth.getField : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.year : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear>
org.joda.time.chrono.AssembledChronology.year : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.year : return $r1
org.joda.time.chrono.AssembledChronology.year : return $r1 >>>>>>>> org.joda.time.YearMonth.getField : return $r3
org.joda.time.YearMonth.getField : return $r3 >>>>>>>> org.joda.time.base.AbstractPartial.getField : return $r2
org.joda.time.base.AbstractPartial.getField : return $r2 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : $i3 = virtualinvoke r3.<org.joda.time.DateTimeField: int getMinimumValue()>()
org.joda.time.chrono.BaseChronology.validate : $i3 = virtualinvoke r3.<org.joda.time.DateTimeField: int getMinimumValue()>() >>>>>>>> org.joda.time.field.DecoratedDateTimeField.getMinimumValue : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DecoratedDateTimeField.getMinimumValue : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.field.DecoratedDateTimeField.getMinimumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMinimumValue()>()
org.joda.time.field.DecoratedDateTimeField.getMinimumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMinimumValue()>() >>>>>>>> org.joda.time.field.SkipDateTimeField.getMinimumValue : $i0 = r0.<org.joda.time.field.SkipDateTimeField: int iMinValue>
org.joda.time.field.SkipDateTimeField.getMinimumValue : $i0 = r0.<org.joda.time.field.SkipDateTimeField: int iMinValue> >>>>>>>> org.joda.time.field.SkipDateTimeField.getMinimumValue : return $i0
org.joda.time.field.SkipDateTimeField.getMinimumValue : return $i0 >>>>>>>> org.joda.time.field.DecoratedDateTimeField.getMinimumValue : return $i0
org.joda.time.field.DecoratedDateTimeField.getMinimumValue : return $i0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : if i2 >= $i3
org.joda.time.chrono.BaseChronology.validate : if i2 >= $i3 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : $i5 = virtualinvoke r3.<org.joda.time.DateTimeField: int getMaximumValue()>()
org.joda.time.chrono.BaseChronology.validate : $i5 = virtualinvoke r3.<org.joda.time.DateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.field.DecoratedDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DecoratedDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.field.DecoratedDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMaximumValue()>()
org.joda.time.field.DecoratedDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DelegatedDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMaximumValue()>()
org.joda.time.field.DelegatedDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMaxYear()>()
org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMaxYear()>() >>>>>>>> org.joda.time.chrono.CopticChronology.getMaxYear : return 292272708
org.joda.time.chrono.CopticChronology.getMaxYear : return 292272708 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : return $i0
org.joda.time.chrono.BasicYearDateTimeField.getMaximumValue : return $i0 >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getMaximumValue : return $i0
org.joda.time.field.DelegatedDateTimeField.getMaximumValue : return $i0 >>>>>>>> org.joda.time.field.DecoratedDateTimeField.getMaximumValue : return $i0
org.joda.time.field.DecoratedDateTimeField.getMaximumValue : return $i0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : if i2 <= $i5
org.joda.time.chrono.BaseChronology.validate : if i2 <= $i5 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i1 = i1 + 1
org.joda.time.chrono.BaseChronology.validate : i1 = i1 + 1 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : goto [?= (branch)]
org.joda.time.chrono.BaseChronology.validate : goto [?= (branch)] >>>>>>>> org.joda.time.YearMonth.getField : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.YearMonth.getField : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.monthOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear>
org.joda.time.chrono.AssembledChronology.monthOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.monthOfYear : return $r1
org.joda.time.chrono.AssembledChronology.monthOfYear : return $r1 >>>>>>>> org.joda.time.YearMonth.getField : return $r4
org.joda.time.YearMonth.getField : return $r4 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getMinimumValue : return 1
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getMinimumValue : return 1 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getMaximumValue : $i0 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getMaximumValue : $i0 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getMaximumValue : return $i0
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getMaximumValue : return $i0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i7 = 0
org.joda.time.chrono.BaseChronology.validate : i7 = 0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : if i7 >= i0
org.joda.time.chrono.BaseChronology.validate : if i7 >= i0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i8 = r2[i7]
org.joda.time.chrono.BaseChronology.validate : i8 = r2[i7] >>>>>>>> org.joda.time.chrono.BaseChronology.validate : r12 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>(i7)
org.joda.time.chrono.BaseChronology.validate : r12 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>(i7) >>>>>>>> org.joda.time.chrono.BaseChronology.validate : $i9 = virtualinvoke r12.<org.joda.time.DateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r2)
org.joda.time.chrono.BaseChronology.validate : $i9 = virtualinvoke r12.<org.joda.time.DateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r2) >>>>>>>> org.joda.time.field.BaseDateTimeField.getMinimumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>(r1)
org.joda.time.field.BaseDateTimeField.getMinimumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>(r1) >>>>>>>> org.joda.time.field.BaseDateTimeField.getMinimumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue()>()
org.joda.time.field.BaseDateTimeField.getMinimumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue()>() >>>>>>>> org.joda.time.field.BaseDateTimeField.getMinimumValue : return $i0
org.joda.time.field.BaseDateTimeField.getMinimumValue : return $i0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : if i8 >= $i9
org.joda.time.chrono.BaseChronology.validate : if i8 >= $i9 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : $i11 = virtualinvoke r12.<org.joda.time.DateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r2)
org.joda.time.chrono.BaseChronology.validate : $i11 = virtualinvoke r12.<org.joda.time.DateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r2) >>>>>>>> org.joda.time.field.BaseDateTimeField.getMaximumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>(r1)
org.joda.time.field.BaseDateTimeField.getMaximumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>(r1) >>>>>>>> org.joda.time.field.BaseDateTimeField.getMaximumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue()>()
org.joda.time.field.BaseDateTimeField.getMaximumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.field.BaseDateTimeField.getMaximumValue : return $i0
org.joda.time.field.BaseDateTimeField.getMaximumValue : return $i0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : if i8 <= $i11
org.joda.time.chrono.BaseChronology.validate : if i8 <= $i11 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i7 = i7 + 1
org.joda.time.chrono.BaseChronology.validate : i7 = i7 + 1 >>>>>>>> org.joda.time.YearMonth.toLocalDate : $r1 = new org.joda.time.LocalDate
org.joda.time.YearMonth.toLocalDate : $r1 = new org.joda.time.LocalDate >>>>>>>> org.joda.time.YearMonth.toLocalDate : $i1 = virtualinvoke r0.<org.joda.time.YearMonth: int getYear()>()
org.joda.time.YearMonth.toLocalDate : $i1 = virtualinvoke r0.<org.joda.time.YearMonth: int getYear()>() >>>>>>>> org.joda.time.YearMonth.getYear : $i0 = virtualinvoke r0.<org.joda.time.YearMonth: int getValue(int)>(0)
org.joda.time.YearMonth.getYear : $i0 = virtualinvoke r0.<org.joda.time.YearMonth: int getValue(int)>(0) >>>>>>>> org.joda.time.base.BasePartial.getValue : $r1 = r0.<org.joda.time.base.BasePartial: int[] iValues>
org.joda.time.base.BasePartial.getValue : $r1 = r0.<org.joda.time.base.BasePartial: int[] iValues> >>>>>>>> org.joda.time.base.BasePartial.getValue : $i1 = $r1[i0]
org.joda.time.base.BasePartial.getValue : $i1 = $r1[i0] >>>>>>>> org.joda.time.base.BasePartial.getValue : return $i1
org.joda.time.base.BasePartial.getValue : return $i1 >>>>>>>> org.joda.time.YearMonth.getYear : return $i0
org.joda.time.YearMonth.getYear : return $i0 >>>>>>>> org.joda.time.YearMonth.toLocalDate : $i2 = virtualinvoke r0.<org.joda.time.YearMonth: int getMonthOfYear()>()
org.joda.time.YearMonth.toLocalDate : $i2 = virtualinvoke r0.<org.joda.time.YearMonth: int getMonthOfYear()>() >>>>>>>> org.joda.time.YearMonth.getMonthOfYear : $i0 = virtualinvoke r0.<org.joda.time.YearMonth: int getValue(int)>(1)
org.joda.time.YearMonth.getMonthOfYear : $i0 = virtualinvoke r0.<org.joda.time.YearMonth: int getValue(int)>(1) >>>>>>>> org.joda.time.YearMonth.getMonthOfYear : return $i0
org.joda.time.YearMonth.getMonthOfYear : return $i0 >>>>>>>> org.joda.time.YearMonth.toLocalDate : $r2 = virtualinvoke r0.<org.joda.time.YearMonth: org.joda.time.Chronology getChronology()>()
org.joda.time.YearMonth.toLocalDate : $r2 = virtualinvoke r0.<org.joda.time.YearMonth: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.YearMonth.toLocalDate : specialinvoke $r1.<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>($i1, $i2, i0, $r2)
org.joda.time.YearMonth.toLocalDate : specialinvoke $r1.<org.joda.time.LocalDate: void <init>(int,int,int,org.joda.time.Chronology)>($i1, $i2, i0, $r2) >>>>>>>> org.joda.time.chrono.CopticChronology.getDateTimeMillis : $l4 = specialinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: long getDateTimeMillis(int,int,int,int)>(i0, i1, i2, i3)
org.joda.time.chrono.CopticChronology.getDateTimeMillis : $l4 = specialinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: long getDateTimeMillis(int,int,int,int)>(i0, i1, i2, i3) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getBase : return $r1
org.joda.time.chrono.AssembledChronology.getBase : return $r1 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : r1 = $r2
org.joda.time.chrono.BasicChronology.getDateTimeMillis : r1 = $r2 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : if $r2 == null
org.joda.time.chrono.BasicChronology.getDateTimeMillis : if $r2 == null >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l4 = virtualinvoke r1.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int)>(i0, i1, i2, i3)
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l4 = virtualinvoke r1.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int)>(i0, i1, i2, i3) >>>>>>>> org.joda.time.chrono.LimitChronology.getDateTimeMillis : $r1 = virtualinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.LimitChronology.getDateTimeMillis : $r1 = virtualinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology getBase()>() >>>>>>>> org.joda.time.chrono.LimitChronology.getDateTimeMillis : l4 = virtualinvoke $r1.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int)>(i0, i1, i2, i3)
org.joda.time.chrono.LimitChronology.getDateTimeMillis : l4 = virtualinvoke $r1.<org.joda.time.Chronology: long getDateTimeMillis(int,int,int,int)>(i0, i1, i2, i3) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r3 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfDay()>()
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $r3 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfDay()>() >>>>>>>> org.joda.time.DateTimeFieldType.millisOfDay : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MILLIS_OF_DAY_TYPE>
org.joda.time.DateTimeFieldType.millisOfDay : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MILLIS_OF_DAY_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.millisOfDay : return $r0
org.joda.time.DateTimeFieldType.millisOfDay : return $r0 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r3, i3, 0, 86400000)
org.joda.time.chrono.BasicChronology.getDateTimeMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r3, i3, 0, 86400000) >>>>>>>> org.joda.time.field.FieldUtils.verifyValueBounds : if i0 < i1
org.joda.time.field.FieldUtils.verifyValueBounds : if i0 < i1 >>>>>>>> org.joda.time.field.FieldUtils.verifyValueBounds : if i0 <= i2
org.joda.time.field.FieldUtils.verifyValueBounds : if i0 <= i2 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l5 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>(i0, i1, i2)
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l5 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getDateMidnightMillis(int,int,int)>(i0, i1, i2) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>()
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $r1 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>() >>>>>>>> org.joda.time.DateTimeFieldType.year : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType YEAR_TYPE>
org.joda.time.DateTimeFieldType.year : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType YEAR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.year : return $r0
org.joda.time.DateTimeFieldType.year : return $r0 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMinYear()>()
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMinYear()>() >>>>>>>> org.joda.time.chrono.CopticChronology.getMinYear : return -292269337
org.joda.time.chrono.CopticChronology.getMinYear : return -292269337 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMaxYear()>()
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMaxYear()>() >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r1, i0, $i3, $i4)
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r1, i0, $i3, $i4) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>()
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>() >>>>>>>> org.joda.time.DateTimeFieldType.monthOfYear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MONTH_OF_YEAR_TYPE>
org.joda.time.DateTimeFieldType.monthOfYear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MONTH_OF_YEAR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.monthOfYear : return $r0
org.joda.time.DateTimeFieldType.monthOfYear : return $r0 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i5 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMaxMonth(int)>(i0)
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i5 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMaxMonth(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicChronology.getMaxMonth : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMaxMonth()>()
org.joda.time.chrono.BasicChronology.getMaxMonth : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMaxMonth()>() >>>>>>>> org.joda.time.chrono.BasicFixedMonthChronology.getMaxMonth : return 13
org.joda.time.chrono.BasicFixedMonthChronology.getMaxMonth : return 13 >>>>>>>> org.joda.time.chrono.BasicChronology.getMaxMonth : return $i1
org.joda.time.chrono.BasicChronology.getMaxMonth : return $i1 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r2, i1, 1, $i5)
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r2, i1, 1, $i5) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $r3 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>()
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $r3 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>() >>>>>>>> org.joda.time.DateTimeFieldType.dayOfMonth : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType DAY_OF_MONTH_TYPE>
org.joda.time.DateTimeFieldType.dayOfMonth : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType DAY_OF_MONTH_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.dayOfMonth : return $r0
org.joda.time.DateTimeFieldType.dayOfMonth : return $r0 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i6 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>(i0, i1)
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $i6 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>(i0, i1) >>>>>>>> org.joda.time.chrono.BasicFixedMonthChronology.getDaysInYearMonth : if i1 == 13
org.joda.time.chrono.BasicFixedMonthChronology.getDaysInYearMonth : if i1 == 13 >>>>>>>> org.joda.time.chrono.BasicFixedMonthChronology.getDaysInYearMonth : $b2 = 30
org.joda.time.chrono.BasicFixedMonthChronology.getDaysInYearMonth : $b2 = 30 >>>>>>>> org.joda.time.chrono.BasicFixedMonthChronology.getDaysInYearMonth : goto [?= return $b2]
org.joda.time.chrono.BasicFixedMonthChronology.getDaysInYearMonth : goto [?= return $b2] >>>>>>>> org.joda.time.chrono.BasicFixedMonthChronology.getDaysInYearMonth : return $b2
org.joda.time.chrono.BasicFixedMonthChronology.getDaysInYearMonth : return $b2 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r3, i2, 1, $i6)
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeFieldType,int,int,int)>($r3, i2, 1, $i6) >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $l7 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>(i0, i1, i2)
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : $l7 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>(i0, i1, i2) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0)
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMillis : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>(i0)
org.joda.time.chrono.BasicChronology.getYearMillis : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $r2 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache>
org.joda.time.chrono.BasicChronology.getYearInfo : $r2 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $i1 = i0 & 1023
org.joda.time.chrono.BasicChronology.getYearInfo : $i1 = i0 & 1023 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : r1 = $r2[$i1]
org.joda.time.chrono.BasicChronology.getYearInfo : r1 = $r2[$i1] >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : if r1 == null
org.joda.time.chrono.BasicChronology.getYearInfo : if r1 == null >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $i2 = r1.<org.joda.time.chrono.BasicChronology$YearInfo: int iYear>
org.joda.time.chrono.BasicChronology.getYearInfo : $i2 = r1.<org.joda.time.chrono.BasicChronology$YearInfo: int iYear> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : if $i2 == i0
org.joda.time.chrono.BasicChronology.getYearInfo : if $i2 == i0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : return r1
org.joda.time.chrono.BasicChronology.getYearInfo : return r1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMillis : $l1 = $r1.<org.joda.time.chrono.BasicChronology$YearInfo: long iFirstDayMillis>
org.joda.time.chrono.BasicChronology.getYearMillis : $l1 = $r1.<org.joda.time.chrono.BasicChronology$YearInfo: long iFirstDayMillis> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMillis : return $l1
org.joda.time.chrono.BasicChronology.getYearMillis : return $l1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i0, i1)
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i0, i1) >>>>>>>> org.joda.time.chrono.BasicFixedMonthChronology.getTotalMillisByYearMonth : $i2 = i1 - 1
org.joda.time.chrono.BasicFixedMonthChronology.getTotalMillisByYearMonth : $i2 = i1 - 1 >>>>>>>> org.joda.time.chrono.BasicFixedMonthChronology.getTotalMillisByYearMonth : $l3 = (long) $i2
org.joda.time.chrono.BasicFixedMonthChronology.getTotalMillisByYearMonth : $l3 = (long) $i2 >>>>>>>> org.joda.time.chrono.BasicFixedMonthChronology.getTotalMillisByYearMonth : $l4 = $l3 * 2592000000L
org.joda.time.chrono.BasicFixedMonthChronology.getTotalMillisByYearMonth : $l4 = $l3 * 2592000000L >>>>>>>> org.joda.time.chrono.BasicFixedMonthChronology.getTotalMillisByYearMonth : return $l4
org.joda.time.chrono.BasicFixedMonthChronology.getTotalMillisByYearMonth : return $l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l5 = l3 + $l4
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l5 = l3 + $l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $i6 = i2 - 1
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $i6 = i2 - 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l7 = (long) $i6
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l7 = (long) $i6 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l8 = $l7 * 86400000L
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l8 = $l7 * 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l9 = l5 + $l8
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l9 = l5 + $l8 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : return $l9
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : return $l9 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateMidnightMillis : return $l7
org.joda.time.chrono.BasicChronology.getDateMidnightMillis : return $l7 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l6 = (long) i3
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l6 = (long) i3 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l7 = $l5 + $l6
org.joda.time.chrono.BasicChronology.getDateTimeMillis : $l7 = $l5 + $l6 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : return $l7
org.joda.time.chrono.BasicChronology.getDateTimeMillis : return $l7 >>>>>>>> org.joda.time.chrono.CopticChronology.getDateTimeMillis : return $l4
org.joda.time.chrono.CopticChronology.getDateTimeMillis : return $l4 >>>>>>>> org.joda.time.chrono.LimitChronology.getDateTimeMillis : virtualinvoke r0.<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>(l4, "resulting")
org.joda.time.chrono.LimitChronology.getDateTimeMillis : virtualinvoke r0.<org.joda.time.chrono.LimitChronology: void checkLimits(long,java.lang.String)>(l4, "resulting") >>>>>>>> org.joda.time.chrono.LimitChronology.checkLimits : $r3 = r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime iLowerLimit>
org.joda.time.chrono.LimitChronology.checkLimits : $r3 = r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime iLowerLimit> >>>>>>>> org.joda.time.chrono.LimitChronology.checkLimits : r2 = $r3
org.joda.time.chrono.LimitChronology.checkLimits : r2 = $r3 >>>>>>>> org.joda.time.chrono.LimitChronology.checkLimits : if $r3 == null
org.joda.time.chrono.LimitChronology.checkLimits : if $r3 == null >>>>>>>> org.joda.time.chrono.LimitChronology.checkLimits : $l1 = virtualinvoke r2.<org.joda.time.DateTime: long getMillis()>()
org.joda.time.chrono.LimitChronology.checkLimits : $l1 = virtualinvoke r2.<org.joda.time.DateTime: long getMillis()>() >>>>>>>> org.joda.time.base.BaseDateTime.getMillis : $l0 = r0.<org.joda.time.base.BaseDateTime: long iMillis>
org.joda.time.base.BaseDateTime.getMillis : $l0 = r0.<org.joda.time.base.BaseDateTime: long iMillis> >>>>>>>> org.joda.time.base.BaseDateTime.getMillis : return $l0
org.joda.time.base.BaseDateTime.getMillis : return $l0 >>>>>>>> org.joda.time.chrono.LimitChronology.checkLimits : $b2 = l0 cmp $l1
org.joda.time.chrono.LimitChronology.checkLimits : $b2 = l0 cmp $l1 >>>>>>>> org.joda.time.chrono.LimitChronology.checkLimits : if $b2 >= 0
org.joda.time.chrono.LimitChronology.checkLimits : if $b2 >= 0 >>>>>>>> org.joda.time.chrono.LimitChronology.checkLimits : $r5 = r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime iUpperLimit>
org.joda.time.chrono.LimitChronology.checkLimits : $r5 = r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime iUpperLimit> >>>>>>>> org.joda.time.chrono.LimitChronology.checkLimits : r6 = $r5
org.joda.time.chrono.LimitChronology.checkLimits : r6 = $r5 >>>>>>>> org.joda.time.chrono.LimitChronology.checkLimits : if $r5 == null
org.joda.time.chrono.LimitChronology.checkLimits : if $r5 == null >>>>>>>> org.joda.time.chrono.LimitChronology.getDateTimeMillis : return l4
org.joda.time.chrono.LimitChronology.getDateTimeMillis : return l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getDateTimeMillis : return $l4
org.joda.time.chrono.BasicChronology.getDateTimeMillis : return $l4 >>>>>>>> org.joda.time.YearMonth.toLocalDate : return $r1
org.joda.time.YearMonth.toLocalDate : return $r1 >>>>>>>> org.joda.time.LocalDate.equals : if r0 != r1
org.joda.time.LocalDate.equals : if r0 != r1 >>>>>>>> org.joda.time.LocalDate.equals : $z0 = r1 instanceof org.joda.time.LocalDate
org.joda.time.LocalDate.equals : $z0 = r1 instanceof org.joda.time.LocalDate >>>>>>>> org.joda.time.LocalDate.equals : if $z0 == 0
org.joda.time.LocalDate.equals : if $z0 == 0 >>>>>>>> org.joda.time.LocalDate.equals : r2 = (org.joda.time.LocalDate) r1
org.joda.time.LocalDate.equals : r2 = (org.joda.time.LocalDate) r1 >>>>>>>> org.joda.time.LocalDate.equals : $r3 = r0.<org.joda.time.LocalDate: org.joda.time.Chronology iChronology>
org.joda.time.LocalDate.equals : $r3 = r0.<org.joda.time.LocalDate: org.joda.time.Chronology iChronology> >>>>>>>> org.joda.time.LocalDate.equals : $r4 = r2.<org.joda.time.LocalDate: org.joda.time.Chronology iChronology>
org.joda.time.LocalDate.equals : $r4 = r2.<org.joda.time.LocalDate: org.joda.time.Chronology iChronology> >>>>>>>> org.joda.time.LocalDate.equals : $z1 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4)
org.joda.time.LocalDate.equals : $z1 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4) >>>>>>>> org.joda.time.chrono.CopticChronology.equals : $z0 = specialinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: boolean equals(java.lang.Object)>(r1)
org.joda.time.chrono.CopticChronology.equals : $z0 = specialinvoke r0.<org.joda.time.chrono.BasicFixedMonthChronology: boolean equals(java.lang.Object)>(r1) >>>>>>>> org.joda.time.chrono.BasicChronology.equals : $z0 = specialinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1)
org.joda.time.chrono.BasicChronology.equals : $z0 = specialinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) >>>>>>>> org.joda.time.chrono.BasicChronology.equals : return $z0
org.joda.time.chrono.BasicChronology.equals : return $z0 >>>>>>>> org.joda.time.chrono.CopticChronology.equals : return $z0
org.joda.time.chrono.CopticChronology.equals : return $z0 >>>>>>>> org.joda.time.LocalDate.equals : if $z1 == 0
org.joda.time.LocalDate.equals : if $z1 == 0 >>>>>>>> org.joda.time.LocalDate.equals : $l0 = r0.<org.joda.time.LocalDate: long iLocalMillis>
org.joda.time.LocalDate.equals : $l0 = r0.<org.joda.time.LocalDate: long iLocalMillis> >>>>>>>> org.joda.time.LocalDate.equals : $l1 = r2.<org.joda.time.LocalDate: long iLocalMillis>
org.joda.time.LocalDate.equals : $l1 = r2.<org.joda.time.LocalDate: long iLocalMillis> >>>>>>>> org.joda.time.LocalDate.equals : $b2 = $l0 cmp $l1
org.joda.time.LocalDate.equals : $b2 = $l0 cmp $l1 >>>>>>>> org.joda.time.LocalDate.equals : if $b2 != 0
org.joda.time.LocalDate.equals : if $b2 != 0 >>>>>>>> org.joda.time.LocalDate.equals : $z2 = 1
org.joda.time.LocalDate.equals : $z2 = 1 >>>>>>>> org.joda.time.LocalDate.equals : goto [?= return $z2]
org.joda.time.LocalDate.equals : goto [?= return $z2] >>>>>>>> org.joda.time.LocalDate.equals : return $z2
org.joda.time.LocalDate.equals : return $z2 >>>>>>>> org.joda.time.field.FieldUtils.verifyValueBounds : $r1 = new org.joda.time.IllegalFieldValueException
org.joda.time.field.FieldUtils.verifyValueBounds : $r1 = new org.joda.time.IllegalFieldValueException >>>>>>>> org.joda.time.field.FieldUtils.verifyValueBounds : $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)
org.joda.time.field.FieldUtils.verifyValueBounds : $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) >>>>>>>> org.joda.time.field.FieldUtils.verifyValueBounds : $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1)
org.joda.time.field.FieldUtils.verifyValueBounds : $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1) >>>>>>>> org.joda.time.field.FieldUtils.verifyValueBounds : $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2)
org.joda.time.field.FieldUtils.verifyValueBounds : $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2) >>>>>>>> org.joda.time.field.FieldUtils.verifyValueBounds : specialinvoke $r1.<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>(r0, $r2, $r3, $r4)
org.joda.time.field.FieldUtils.verifyValueBounds : specialinvoke $r1.<org.joda.time.IllegalFieldValueException: void <init>(org.joda.time.DateTimeFieldType,java.lang.Number,java.lang.Number,java.lang.Number)>(r0, $r2, $r3, $r4) >>>>>>>> org.joda.time.DateTimeFieldType.getName : $r1 = r0.<org.joda.time.DateTimeFieldType: java.lang.String iName>
org.joda.time.DateTimeFieldType.getName : $r1 = r0.<org.joda.time.DateTimeFieldType: java.lang.String iName> >>>>>>>> org.joda.time.DateTimeFieldType.getName : return $r1
org.joda.time.DateTimeFieldType.getName : return $r1 >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : $r5 = new java.lang.StringBuffer
org.joda.time.IllegalFieldValueException.createMessage : $r5 = new java.lang.StringBuffer >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : specialinvoke $r5.<java.lang.StringBuffer: void <init>()>()
org.joda.time.IllegalFieldValueException.createMessage : specialinvoke $r5.<java.lang.StringBuffer: void <init>()>() >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Value ")
org.joda.time.IllegalFieldValueException.createMessage : $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Value ") >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1)
org.joda.time.IllegalFieldValueException.createMessage : $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1) >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" for ")
org.joda.time.IllegalFieldValueException.createMessage : $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" for ") >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0)
org.joda.time.IllegalFieldValueException.createMessage : $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0) >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : r6 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32)
org.joda.time.IllegalFieldValueException.createMessage : r6 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32) >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : if r2 != null
org.joda.time.IllegalFieldValueException.createMessage : if r2 != null >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : if r3 != null
org.joda.time.IllegalFieldValueException.createMessage : if r3 != null >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : $r16 = virtualinvoke r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("must be in the range [")
org.joda.time.IllegalFieldValueException.createMessage : $r16 = virtualinvoke r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("must be in the range [") >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r2)
org.joda.time.IllegalFieldValueException.createMessage : $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r2) >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(44)
org.joda.time.IllegalFieldValueException.createMessage : $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(44) >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r3)
org.joda.time.IllegalFieldValueException.createMessage : $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r3) >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93)
org.joda.time.IllegalFieldValueException.createMessage : virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93) >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : if r4 == null
org.joda.time.IllegalFieldValueException.createMessage : if r4 == null >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : $r23 = virtualinvoke r6.<java.lang.StringBuffer: java.lang.String toString()>()
org.joda.time.IllegalFieldValueException.createMessage : $r23 = virtualinvoke r6.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> org.joda.time.IllegalFieldValueException.createMessage : return $r23
org.joda.time.IllegalFieldValueException.createMessage : return $r23 >>>>>>>> org.joda.time.field.FieldUtils.verifyValueBounds : throw $r1
