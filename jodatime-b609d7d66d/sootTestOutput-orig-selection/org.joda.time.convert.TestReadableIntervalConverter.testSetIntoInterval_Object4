org.joda.time.chrono.JulianChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>() >>>>>>>> org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> >>>>>>>> org.joda.time.DateTimeZone.getDefault : if r0 != null
org.joda.time.DateTimeZone.getDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.DateTimeZone.getDefault : return r0 >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>($r0, 4)
org.joda.time.chrono.JulianChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.JulianChronology: org.joda.time.chrono.JulianChronology getInstance(org.joda.time.DateTimeZone,int)>($r0, 4) >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : if r0 != null
org.joda.time.chrono.JulianChronology.getInstance : if r0 != null >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : $r6 = <org.joda.time.chrono.JulianChronology: java.util.Map cCache>
org.joda.time.chrono.JulianChronology.getInstance : $r6 = <org.joda.time.chrono.JulianChronology: java.util.Map cCache> >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : r1 = $r6
org.joda.time.chrono.JulianChronology.getInstance : r1 = $r6 >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : entermonitor $r6
org.joda.time.chrono.JulianChronology.getInstance : entermonitor $r6 >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : $r7 = <org.joda.time.chrono.JulianChronology: java.util.Map cCache>
org.joda.time.chrono.JulianChronology.getInstance : $r7 = <org.joda.time.chrono.JulianChronology: java.util.Map cCache> >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0)
org.joda.time.chrono.JulianChronology.getInstance : $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> org.joda.time.tz.CachedDateTimeZone.hashCode : $r1 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone>
org.joda.time.tz.CachedDateTimeZone.hashCode : $r1 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.tz.CachedDateTimeZone.hashCode : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeZone: int hashCode()>()
org.joda.time.tz.CachedDateTimeZone.hashCode : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeZone: int hashCode()>() >>>>>>>> org.joda.time.DateTimeZone.hashCode : $r1 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getID()>()
org.joda.time.DateTimeZone.hashCode : $r1 = virtualinvoke r0.<org.joda.time.DateTimeZone: java.lang.String getID()>() >>>>>>>> org.joda.time.DateTimeZone.getID : $r1 = r0.<org.joda.time.DateTimeZone: java.lang.String iID>
org.joda.time.DateTimeZone.getID : $r1 = r0.<org.joda.time.DateTimeZone: java.lang.String iID> >>>>>>>> org.joda.time.DateTimeZone.getID : return $r1
org.joda.time.DateTimeZone.getID : return $r1 >>>>>>>> org.joda.time.DateTimeZone.hashCode : $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>()
org.joda.time.DateTimeZone.hashCode : $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>() >>>>>>>> org.joda.time.DateTimeZone.hashCode : $i1 = 57 + $i0
org.joda.time.DateTimeZone.hashCode : $i1 = 57 + $i0 >>>>>>>> org.joda.time.DateTimeZone.hashCode : return $i1
org.joda.time.DateTimeZone.hashCode : return $i1 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.hashCode : return $i0
org.joda.time.tz.CachedDateTimeZone.hashCode : return $i0 >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : r2 = (org.joda.time.chrono.JulianChronology[]) $r8
org.joda.time.chrono.JulianChronology.getInstance : r2 = (org.joda.time.chrono.JulianChronology[]) $r8 >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : if r2 != null
org.joda.time.chrono.JulianChronology.getInstance : if r2 != null >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : $i1 = i0 - 1
org.joda.time.chrono.JulianChronology.getInstance : $i1 = i0 - 1 >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : r3 = r2[$i1]
org.joda.time.chrono.JulianChronology.getInstance : r3 = r2[$i1] >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : goto [?= (branch)]
org.joda.time.chrono.JulianChronology.getInstance : goto [?= (branch)] >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : if r3 != null
org.joda.time.chrono.JulianChronology.getInstance : if r3 != null >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : exitmonitor r1
org.joda.time.chrono.JulianChronology.getInstance : exitmonitor r1 >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : goto [?= return r3]
org.joda.time.chrono.JulianChronology.getInstance : goto [?= return r3] >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : return r3
org.joda.time.chrono.JulianChronology.getInstance : return r3 >>>>>>>> org.joda.time.chrono.JulianChronology.getInstance : return $r1
org.joda.time.chrono.JulianChronology.getInstance : return $r1 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>()
org.joda.time.chrono.ISOChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>() >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r0)
org.joda.time.chrono.ISOChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r0) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if r0 != null
org.joda.time.chrono.ISOChronology.getInstance : if r0 != null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0)
org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : i0 = $i1 & 63
org.joda.time.chrono.ISOChronology.getInstance : i0 = $i1 & 63 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache>
org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache> >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : r1 = $r5[i0]
org.joda.time.chrono.ISOChronology.getInstance : r1 = $r5[i0] >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if r1 == null
org.joda.time.chrono.ISOChronology.getInstance : if r1 == null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r6 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.ISOChronology.getInstance : $r6 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2
org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null
org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.ZonedChronology.getZone : $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: java.lang.Object getParam()>()
org.joda.time.chrono.ZonedChronology.getZone : $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: java.lang.Object getParam()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getParam : $r1 = r0.<org.joda.time.chrono.AssembledChronology: java.lang.Object iParam>
org.joda.time.chrono.AssembledChronology.getParam : $r1 = r0.<org.joda.time.chrono.AssembledChronology: java.lang.Object iParam> >>>>>>>> org.joda.time.chrono.AssembledChronology.getParam : return $r1
org.joda.time.chrono.AssembledChronology.getParam : return $r1 >>>>>>>> org.joda.time.chrono.ZonedChronology.getZone : $r2 = (org.joda.time.DateTimeZone) $r1
org.joda.time.chrono.ZonedChronology.getZone : $r2 = (org.joda.time.DateTimeZone) $r1 >>>>>>>> org.joda.time.chrono.ZonedChronology.getZone : return $r2
org.joda.time.chrono.ZonedChronology.getZone : return $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : return $r3
org.joda.time.chrono.AssembledChronology.getZone : return $r3 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0
org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : return r1
org.joda.time.chrono.ISOChronology.getInstance : return r1 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : return $r1
org.joda.time.chrono.ISOChronology.getInstance : return $r1 >>>>>>>> org.joda.time.DateTimeUtils.getChronology : if r0 != null
org.joda.time.DateTimeUtils.getChronology : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getChronology : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>()
org.joda.time.DateTimeUtils.getChronology : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>() >>>>>>>> org.joda.time.DateTimeUtils.getChronology : return $r1
org.joda.time.DateTimeUtils.getChronology : return $r1 >>>>>>>> org.joda.time.base.AbstractInterval.checkInterval : $b2 = l1 cmp l0
org.joda.time.base.AbstractInterval.checkInterval : $b2 = l1 cmp l0 >>>>>>>> org.joda.time.base.AbstractInterval.checkInterval : if $b2 >= 0
org.joda.time.base.AbstractInterval.checkInterval : if $b2 >= 0 >>>>>>>> org.joda.time.chrono.BuddhistChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>()
org.joda.time.chrono.BuddhistChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>() >>>>>>>> org.joda.time.chrono.BuddhistChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>($r0)
org.joda.time.chrono.BuddhistChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.BuddhistChronology: org.joda.time.chrono.BuddhistChronology getInstance(org.joda.time.DateTimeZone)>($r0) >>>>>>>> org.joda.time.chrono.BuddhistChronology.getInstance : if r0 != null
org.joda.time.chrono.BuddhistChronology.getInstance : if r0 != null >>>>>>>> org.joda.time.chrono.BuddhistChronology.getInstance : $r3 = <org.joda.time.chrono.BuddhistChronology: java.util.Map cCache>
org.joda.time.chrono.BuddhistChronology.getInstance : $r3 = <org.joda.time.chrono.BuddhistChronology: java.util.Map cCache> >>>>>>>> org.joda.time.chrono.BuddhistChronology.getInstance : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0)
org.joda.time.chrono.BuddhistChronology.getInstance : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> org.joda.time.chrono.BuddhistChronology.getInstance : r1 = (org.joda.time.chrono.BuddhistChronology) $r4
org.joda.time.chrono.BuddhistChronology.getInstance : r1 = (org.joda.time.chrono.BuddhistChronology) $r4 >>>>>>>> org.joda.time.chrono.BuddhistChronology.getInstance : if r1 != null
org.joda.time.chrono.BuddhistChronology.getInstance : if r1 != null >>>>>>>> org.joda.time.chrono.BuddhistChronology.getInstance : return r1
org.joda.time.chrono.BuddhistChronology.getInstance : return r1 >>>>>>>> org.joda.time.chrono.BuddhistChronology.getInstance : return $r1
org.joda.time.chrono.BuddhistChronology.getInstance : return $r1 >>>>>>>> org.joda.time.DateTimeUtils.getChronology : return r0
org.joda.time.DateTimeUtils.getChronology : return r0 >>>>>>>> org.joda.time.convert.ReadableIntervalConverter.setInto : r4 = (org.joda.time.ReadableInterval) r2
org.joda.time.convert.ReadableIntervalConverter.setInto : r4 = (org.joda.time.ReadableInterval) r2 >>>>>>>> org.joda.time.convert.ReadableIntervalConverter.setInto : interfaceinvoke r1.<org.joda.time.ReadWritableInterval: void setInterval(org.joda.time.ReadableInterval)>(r4)
org.joda.time.convert.ReadableIntervalConverter.setInto : interfaceinvoke r1.<org.joda.time.ReadWritableInterval: void setInterval(org.joda.time.ReadableInterval)>(r4) >>>>>>>> org.joda.time.MutableInterval.setInterval : if r1 != null
org.joda.time.MutableInterval.setInterval : if r1 != null >>>>>>>> org.joda.time.MutableInterval.setInterval : l0 = interfaceinvoke r1.<org.joda.time.ReadableInterval: long getStartMillis()>()
org.joda.time.MutableInterval.setInterval : l0 = interfaceinvoke r1.<org.joda.time.ReadableInterval: long getStartMillis()>() >>>>>>>> org.joda.time.base.BaseInterval.getStartMillis : $l0 = r0.<org.joda.time.base.BaseInterval: long iStartMillis>
org.joda.time.base.BaseInterval.getStartMillis : $l0 = r0.<org.joda.time.base.BaseInterval: long iStartMillis> >>>>>>>> org.joda.time.base.BaseInterval.getStartMillis : return $l0
org.joda.time.base.BaseInterval.getStartMillis : return $l0 >>>>>>>> org.joda.time.MutableInterval.setInterval : l1 = interfaceinvoke r1.<org.joda.time.ReadableInterval: long getEndMillis()>()
org.joda.time.MutableInterval.setInterval : l1 = interfaceinvoke r1.<org.joda.time.ReadableInterval: long getEndMillis()>() >>>>>>>> org.joda.time.base.BaseInterval.getEndMillis : $l0 = r0.<org.joda.time.base.BaseInterval: long iEndMillis>
org.joda.time.base.BaseInterval.getEndMillis : $l0 = r0.<org.joda.time.base.BaseInterval: long iEndMillis> >>>>>>>> org.joda.time.base.BaseInterval.getEndMillis : return $l0
org.joda.time.base.BaseInterval.getEndMillis : return $l0 >>>>>>>> org.joda.time.MutableInterval.setInterval : r2 = interfaceinvoke r1.<org.joda.time.ReadableInterval: org.joda.time.Chronology getChronology()>()
org.joda.time.MutableInterval.setInterval : r2 = interfaceinvoke r1.<org.joda.time.ReadableInterval: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.convert.TestReadableIntervalConverter$2.getChronology : return null
org.joda.time.convert.TestReadableIntervalConverter$2.getChronology : return null >>>>>>>> org.joda.time.MutableInterval.setInterval : specialinvoke r0.<org.joda.time.base.BaseInterval: void setInterval(long,long,org.joda.time.Chronology)>(l0, l1, r2)
org.joda.time.MutableInterval.setInterval : specialinvoke r0.<org.joda.time.base.BaseInterval: void setInterval(long,long,org.joda.time.Chronology)>(l0, l1, r2) >>>>>>>> org.joda.time.base.BaseInterval.setInterval : virtualinvoke r0.<org.joda.time.base.BaseInterval: void checkInterval(long,long)>(l0, l1)
org.joda.time.base.BaseInterval.setInterval : virtualinvoke r0.<org.joda.time.base.BaseInterval: void checkInterval(long,long)>(l0, l1) >>>>>>>> org.joda.time.base.BaseInterval.setInterval : r0.<org.joda.time.base.BaseInterval: long iStartMillis> = l0
org.joda.time.base.BaseInterval.setInterval : r0.<org.joda.time.base.BaseInterval: long iStartMillis> = l0 >>>>>>>> org.joda.time.base.BaseInterval.setInterval : r0.<org.joda.time.base.BaseInterval: long iEndMillis> = l1
org.joda.time.base.BaseInterval.setInterval : r0.<org.joda.time.base.BaseInterval: long iEndMillis> = l1 >>>>>>>> org.joda.time.base.BaseInterval.setInterval : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.base.BaseInterval.setInterval : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.base.BaseInterval.setInterval : r0.<org.joda.time.base.BaseInterval: org.joda.time.Chronology iChronology> = $r2
org.joda.time.base.BaseInterval.setInterval : r0.<org.joda.time.base.BaseInterval: org.joda.time.Chronology iChronology> = $r2 >>>>>>>> org.joda.time.convert.ReadableIntervalConverter.setInto : if r3 == null
org.joda.time.convert.ReadableIntervalConverter.setInto : if r3 == null >>>>>>>> org.joda.time.convert.ReadableIntervalConverter.setInto : $r5 = interfaceinvoke r4.<org.joda.time.ReadableInterval: org.joda.time.Chronology getChronology()>()
org.joda.time.convert.ReadableIntervalConverter.setInto : $r5 = interfaceinvoke r4.<org.joda.time.ReadableInterval: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.convert.ReadableIntervalConverter.setInto : interfaceinvoke r1.<org.joda.time.ReadWritableInterval: void setChronology(org.joda.time.Chronology)>($r5)
org.joda.time.convert.ReadableIntervalConverter.setInto : interfaceinvoke r1.<org.joda.time.ReadWritableInterval: void setChronology(org.joda.time.Chronology)>($r5) >>>>>>>> org.joda.time.MutableInterval.setChronology : $l0 = virtualinvoke r0.<org.joda.time.MutableInterval: long getStartMillis()>()
org.joda.time.MutableInterval.setChronology : $l0 = virtualinvoke r0.<org.joda.time.MutableInterval: long getStartMillis()>() >>>>>>>> org.joda.time.MutableInterval.setChronology : $l1 = virtualinvoke r0.<org.joda.time.MutableInterval: long getEndMillis()>()
org.joda.time.MutableInterval.setChronology : $l1 = virtualinvoke r0.<org.joda.time.MutableInterval: long getEndMillis()>() >>>>>>>> org.joda.time.MutableInterval.setChronology : specialinvoke r0.<org.joda.time.base.BaseInterval: void setInterval(long,long,org.joda.time.Chronology)>($l0, $l1, r1)
org.joda.time.MutableInterval.setChronology : specialinvoke r0.<org.joda.time.base.BaseInterval: void setInterval(long,long,org.joda.time.Chronology)>($l0, $l1, r1) >>>>>>>> org.joda.time.base.BaseInterval.getChronology : $r1 = r0.<org.joda.time.base.BaseInterval: org.joda.time.Chronology iChronology>
org.joda.time.base.BaseInterval.getChronology : $r1 = r0.<org.joda.time.base.BaseInterval: org.joda.time.Chronology iChronology> >>>>>>>> org.joda.time.base.BaseInterval.getChronology : return $r1
org.joda.time.base.BaseInterval.getChronology : return $r1 >>>>>>>> org.joda.time.chrono.ISOChronology.equals : $z0 = specialinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1)
org.joda.time.chrono.ISOChronology.equals : $z0 = specialinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) >>>>>>>> org.joda.time.chrono.ISOChronology.equals : return $z0
