org.joda.time.DateTimeUtils.setCurrentMillisSystem : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>() >>>>>>>> org.joda.time.DateTimeUtils.checkPermission : r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>()
org.joda.time.DateTimeUtils.checkPermission : r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>() >>>>>>>> org.joda.time.DateTimeUtils.checkPermission : if r0 == null
org.joda.time.DateTimeUtils.checkPermission : if r0 == null >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisSystem : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$SystemMillisProvider SYSTEM_MILLIS_PROVIDER>
org.joda.time.DateTimeUtils.setCurrentMillisSystem : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$SystemMillisProvider SYSTEM_MILLIS_PROVIDER> >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisSystem : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0
org.joda.time.DateTimeUtils.setCurrentMillisSystem : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0 >>>>>>>> org.joda.time.DateTimeZone.setDefault : r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>()
org.joda.time.DateTimeZone.setDefault : r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>() >>>>>>>> org.joda.time.DateTimeZone.setDefault : if r1 == null
org.joda.time.DateTimeZone.setDefault : if r1 == null >>>>>>>> org.joda.time.DateTimeZone.setDefault : if r0 != null
org.joda.time.DateTimeZone.setDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.setDefault : $r6 = class "org/joda/time/DateTimeZone"
org.joda.time.DateTimeZone.setDefault : $r6 = class "org/joda/time/DateTimeZone" >>>>>>>> org.joda.time.DateTimeZone.setDefault : r3 = $r6
org.joda.time.DateTimeZone.setDefault : r3 = $r6 >>>>>>>> org.joda.time.DateTimeZone.setDefault : entermonitor $r6
org.joda.time.DateTimeZone.setDefault : entermonitor $r6 >>>>>>>> org.joda.time.DateTimeZone.setDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r0
org.joda.time.DateTimeZone.setDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r0 >>>>>>>> org.joda.time.DateTimeZone.setDefault : exitmonitor r3
org.joda.time.DateTimeZone.setDefault : exitmonitor r3 >>>>>>>> org.joda.time.DateTimeZone.setDefault : goto [?= return]
org.joda.time.DateTimeZone.setDefault : goto [?= return] >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>()
org.joda.time.DateTimeUtils.setCurrentMillisFixed : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>() >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : $r0 = new org.joda.time.DateTimeUtils$FixedMillisProvider
org.joda.time.DateTimeUtils.setCurrentMillisFixed : $r0 = new org.joda.time.DateTimeUtils$FixedMillisProvider >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : specialinvoke $r0.<org.joda.time.DateTimeUtils$FixedMillisProvider: void <init>(long)>(l0)
org.joda.time.DateTimeUtils.setCurrentMillisFixed : specialinvoke $r0.<org.joda.time.DateTimeUtils$FixedMillisProvider: void <init>(long)>(l0) >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0
org.joda.time.DateTimeUtils.setCurrentMillisFixed : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0 >>>>>>>> org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> >>>>>>>> org.joda.time.DateTimeZone.getDefault : if r0 != null
org.joda.time.DateTimeZone.getDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.DateTimeZone.getDefault : return r0 >>>>>>>> org.joda.time.format.DateTimeFormat.forStyle : $r1 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyle(java.lang.String)>(r0)
org.joda.time.format.DateTimeFormat.forStyle : $r1 = staticinvoke <org.joda.time.format.DateTimeFormat: org.joda.time.format.DateTimeFormatter createFormatterForStyle(java.lang.String)>(r0) >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForStyle : if r0 == null
org.joda.time.format.DateTimeFormat.createFormatterForStyle : if r0 == null >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForStyle : $i2 = virtualinvoke r0.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormat.createFormatterForStyle : $i2 = virtualinvoke r0.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForStyle : if $i2 == 2
org.joda.time.format.DateTimeFormat.createFormatterForStyle : if $i2 == 2 >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForStyle : $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0)
org.joda.time.format.DateTimeFormat.createFormatterForStyle : $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0) >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForStyle : i0 = staticinvoke <org.joda.time.format.DateTimeFormat: int selectStyle(char)>($c3)
org.joda.time.format.DateTimeFormat.createFormatterForStyle : i0 = staticinvoke <org.joda.time.format.DateTimeFormat: int selectStyle(char)>($c3) >>>>>>>> org.joda.time.format.DateTimeFormat.selectStyle : lookupswitch(c0) {     case 45:
org.joda.time.format.DateTimeFormat.selectStyle : lookupswitch(c0) {     case 45: >>>>>>>> org.joda.time.format.DateTimeFormat.selectStyle : $r1 = new java.lang.IllegalArgumentException
org.joda.time.format.DateTimeFormat.selectStyle : $r1 = new java.lang.IllegalArgumentException >>>>>>>> org.joda.time.format.DateTimeFormat.selectStyle : $r0 = new java.lang.StringBuilder
org.joda.time.format.DateTimeFormat.selectStyle : $r0 = new java.lang.StringBuilder >>>>>>>> org.joda.time.format.DateTimeFormat.selectStyle : specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()
org.joda.time.format.DateTimeFormat.selectStyle : specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.joda.time.format.DateTimeFormat.selectStyle : $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid style character: ")
org.joda.time.format.DateTimeFormat.selectStyle : $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid style character: ") >>>>>>>> org.joda.time.format.DateTimeFormat.selectStyle : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0)
org.joda.time.format.DateTimeFormat.selectStyle : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0) >>>>>>>> org.joda.time.format.DateTimeFormat.selectStyle : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>()
org.joda.time.format.DateTimeFormat.selectStyle : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.joda.time.format.DateTimeFormat.selectStyle : specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4)
org.joda.time.format.DateTimeFormat.selectStyle : specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4) >>>>>>>> org.joda.time.format.DateTimeFormat.selectStyle : throw $r1
org.joda.time.format.DateTimeFormat.selectStyle : throw $r1 >>>>>>>> org.joda.time.format.DateTimeFormat.selectStyle : return 4
org.joda.time.format.DateTimeFormat.selectStyle : return 4 >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForStyle : $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(1)
org.joda.time.format.DateTimeFormat.createFormatterForStyle : $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(1) >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForStyle : i1 = staticinvoke <org.joda.time.format.DateTimeFormat: int selectStyle(char)>($c4)
org.joda.time.format.DateTimeFormat.createFormatterForStyle : i1 = staticinvoke <org.joda.time.format.DateTimeFormat: int selectStyle(char)>($c4) >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForStyle : if i0 != 4
org.joda.time.format.DateTimeFormat.createFormatterForStyle : if i0 != 4 >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForStyle : if i1 != 4
org.joda.time.format.DateTimeFormat.createFormatterForStyle : if i1 != 4 >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForStyle : $r6 = new java.lang.IllegalArgumentException
org.joda.time.format.DateTimeFormat.createFormatterForStyle : $r6 = new java.lang.IllegalArgumentException >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForStyle : specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Style \'--\' is invalid")
org.joda.time.format.DateTimeFormat.createFormatterForStyle : specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Style \'--\' is invalid") >>>>>>>> org.joda.time.format.DateTimeFormat.createFormatterForStyle : throw $r6
