org.joda.time.DateTimeUtils.setCurrentMillisSystem : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>() >>>>>>>> org.joda.time.DateTimeUtils.checkPermission : r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>()
org.joda.time.DateTimeUtils.checkPermission : r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>() >>>>>>>> org.joda.time.DateTimeUtils.checkPermission : if r0 == null
org.joda.time.DateTimeUtils.checkPermission : if r0 == null >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisSystem : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$SystemMillisProvider SYSTEM_MILLIS_PROVIDER>
org.joda.time.DateTimeUtils.setCurrentMillisSystem : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$SystemMillisProvider SYSTEM_MILLIS_PROVIDER> >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisSystem : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0
org.joda.time.DateTimeUtils.setCurrentMillisSystem : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0 >>>>>>>> org.joda.time.DateTimeZone.setDefault : r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>()
org.joda.time.DateTimeZone.setDefault : r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>() >>>>>>>> org.joda.time.DateTimeZone.setDefault : if r1 == null
org.joda.time.DateTimeZone.setDefault : if r1 == null >>>>>>>> org.joda.time.DateTimeZone.setDefault : if r0 != null
org.joda.time.DateTimeZone.setDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.setDefault : $r6 = class "org/joda/time/DateTimeZone"
org.joda.time.DateTimeZone.setDefault : $r6 = class "org/joda/time/DateTimeZone" >>>>>>>> org.joda.time.DateTimeZone.setDefault : r3 = $r6
org.joda.time.DateTimeZone.setDefault : r3 = $r6 >>>>>>>> org.joda.time.DateTimeZone.setDefault : entermonitor $r6
org.joda.time.DateTimeZone.setDefault : entermonitor $r6 >>>>>>>> org.joda.time.DateTimeZone.setDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r0
org.joda.time.DateTimeZone.setDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r0 >>>>>>>> org.joda.time.DateTimeZone.setDefault : exitmonitor r3
org.joda.time.DateTimeZone.setDefault : exitmonitor r3 >>>>>>>> org.joda.time.DateTimeZone.setDefault : goto [?= return]
org.joda.time.DateTimeZone.setDefault : goto [?= return] >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>()
org.joda.time.DateTimeUtils.setCurrentMillisFixed : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>() >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : $r0 = new org.joda.time.DateTimeUtils$FixedMillisProvider
org.joda.time.DateTimeUtils.setCurrentMillisFixed : $r0 = new org.joda.time.DateTimeUtils$FixedMillisProvider >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : specialinvoke $r0.<org.joda.time.DateTimeUtils$FixedMillisProvider: void <init>(long)>(l0)
org.joda.time.DateTimeUtils.setCurrentMillisFixed : specialinvoke $r0.<org.joda.time.DateTimeUtils$FixedMillisProvider: void <init>(long)>(l0) >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0
org.joda.time.DateTimeUtils.setCurrentMillisFixed : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0 >>>>>>>> org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> >>>>>>>> org.joda.time.DateTimeZone.getDefault : if r0 != null
org.joda.time.DateTimeZone.getDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.DateTimeZone.getDefault : return r0 >>>>>>>> org.joda.time.DateTimeUtils.getChronology : if r0 != null
org.joda.time.DateTimeUtils.getChronology : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getChronology : return r0
org.joda.time.DateTimeUtils.getChronology : return r0 >>>>>>>> org.joda.time.chrono.ISOChronology.withUTC : $r1 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC>
org.joda.time.chrono.ISOChronology.withUTC : $r1 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.ISOChronology.withUTC : return $r1
org.joda.time.chrono.ISOChronology.withUTC : return $r1 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i0 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>()
org.joda.time.chrono.BaseChronology.validate : i0 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>() >>>>>>>> org.joda.time.MonthDay.size : return 2
org.joda.time.MonthDay.size : return 2 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i1 = 0
org.joda.time.chrono.BaseChronology.validate : i1 = 0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : if i1 >= i0
org.joda.time.chrono.BaseChronology.validate : if i1 >= i0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i2 = r2[i1]
org.joda.time.chrono.BaseChronology.validate : i2 = r2[i1] >>>>>>>> org.joda.time.chrono.BaseChronology.validate : r3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>(i1)
org.joda.time.chrono.BaseChronology.validate : r3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>(i1) >>>>>>>> org.joda.time.base.AbstractPartial.getField : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.Chronology getChronology()>()
org.joda.time.base.AbstractPartial.getField : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.base.BasePartial.getChronology : $r1 = r0.<org.joda.time.base.BasePartial: org.joda.time.Chronology iChronology>
org.joda.time.base.BasePartial.getChronology : $r1 = r0.<org.joda.time.base.BasePartial: org.joda.time.Chronology iChronology> >>>>>>>> org.joda.time.base.BasePartial.getChronology : return $r1
org.joda.time.base.BasePartial.getChronology : return $r1 >>>>>>>> org.joda.time.base.AbstractPartial.getField : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>(i0, $r1)
org.joda.time.base.AbstractPartial.getField : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeField getField(int,org.joda.time.Chronology)>(i0, $r1) >>>>>>>> org.joda.time.MonthDay.getField : lookupswitch(i0) {     case 0:
org.joda.time.MonthDay.getField : lookupswitch(i0) {     case 0: >>>>>>>> org.joda.time.MonthDay.getField : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.MonthDay.getField : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.monthOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear>
org.joda.time.chrono.AssembledChronology.monthOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.monthOfYear : return $r1
org.joda.time.chrono.AssembledChronology.monthOfYear : return $r1 >>>>>>>> org.joda.time.MonthDay.getField : return $r3
org.joda.time.MonthDay.getField : return $r3 >>>>>>>> org.joda.time.base.AbstractPartial.getField : return $r2
org.joda.time.base.AbstractPartial.getField : return $r2 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : $i3 = virtualinvoke r3.<org.joda.time.DateTimeField: int getMinimumValue()>()
org.joda.time.chrono.BaseChronology.validate : $i3 = virtualinvoke r3.<org.joda.time.DateTimeField: int getMinimumValue()>() >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getMinimumValue : return 1
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getMinimumValue : return 1 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : if i2 >= $i3
org.joda.time.chrono.BaseChronology.validate : if i2 >= $i3 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : $i5 = virtualinvoke r3.<org.joda.time.DateTimeField: int getMaximumValue()>()
org.joda.time.chrono.BaseChronology.validate : $i5 = virtualinvoke r3.<org.joda.time.DateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getMaximumValue : $i0 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getMaximumValue : $i0 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getMaximumValue : return $i0
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getMaximumValue : return $i0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : if i2 <= $i5
org.joda.time.chrono.BaseChronology.validate : if i2 <= $i5 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i1 = i1 + 1
org.joda.time.chrono.BaseChronology.validate : i1 = i1 + 1 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : goto [?= (branch)]
org.joda.time.chrono.BaseChronology.validate : goto [?= (branch)] >>>>>>>> org.joda.time.MonthDay.getField : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.MonthDay.getField : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfMonth : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth>
org.joda.time.chrono.AssembledChronology.dayOfMonth : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth> >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfMonth : return $r1
org.joda.time.chrono.AssembledChronology.dayOfMonth : return $r1 >>>>>>>> org.joda.time.MonthDay.getField : return $r4
org.joda.time.MonthDay.getField : return $r4 >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMinimumValue : return 1
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMinimumValue : return 1 >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDaysInMonthMax()>()
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDaysInMonthMax()>() >>>>>>>> org.joda.time.chrono.BasicChronology.getDaysInMonthMax : return 31
org.joda.time.chrono.BasicChronology.getDaysInMonthMax : return 31 >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValue : return $i0
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValue : return $i0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i7 = 0
org.joda.time.chrono.BaseChronology.validate : i7 = 0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : if i7 >= i0
org.joda.time.chrono.BaseChronology.validate : if i7 >= i0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i8 = r2[i7]
org.joda.time.chrono.BaseChronology.validate : i8 = r2[i7] >>>>>>>> org.joda.time.chrono.BaseChronology.validate : r12 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>(i7)
org.joda.time.chrono.BaseChronology.validate : r12 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>(i7) >>>>>>>> org.joda.time.chrono.BaseChronology.validate : $i9 = virtualinvoke r12.<org.joda.time.DateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r2)
org.joda.time.chrono.BaseChronology.validate : $i9 = virtualinvoke r12.<org.joda.time.DateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r2) >>>>>>>> org.joda.time.field.BaseDateTimeField.getMinimumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>(r1)
org.joda.time.field.BaseDateTimeField.getMinimumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial)>(r1) >>>>>>>> org.joda.time.field.BaseDateTimeField.getMinimumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue()>()
org.joda.time.field.BaseDateTimeField.getMinimumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue()>() >>>>>>>> org.joda.time.field.BaseDateTimeField.getMinimumValue : return $i0
org.joda.time.field.BaseDateTimeField.getMinimumValue : return $i0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : if i8 >= $i9
org.joda.time.chrono.BaseChronology.validate : if i8 >= $i9 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : $i11 = virtualinvoke r12.<org.joda.time.DateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r2)
org.joda.time.chrono.BaseChronology.validate : $i11 = virtualinvoke r12.<org.joda.time.DateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r2) >>>>>>>> org.joda.time.field.BaseDateTimeField.getMaximumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>(r1)
org.joda.time.field.BaseDateTimeField.getMaximumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial)>(r1) >>>>>>>> org.joda.time.field.BaseDateTimeField.getMaximumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue()>()
org.joda.time.field.BaseDateTimeField.getMaximumValue : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.field.BaseDateTimeField.getMaximumValue : return $i0
org.joda.time.field.BaseDateTimeField.getMaximumValue : return $i0 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : if i8 <= $i11
org.joda.time.chrono.BaseChronology.validate : if i8 <= $i11 >>>>>>>> org.joda.time.chrono.BaseChronology.validate : i7 = i7 + 1
org.joda.time.chrono.BaseChronology.validate : i7 = i7 + 1 >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValue : i0 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>()
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValue : i0 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>() >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValue : i1 = 0
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValue : i1 = 0 >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValue : if i1 >= i0
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValue : if i1 >= i0 >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValue : $r3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i1)
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValue : $r3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i1) >>>>>>>> org.joda.time.MonthDay.getFieldType : $r1 = <org.joda.time.MonthDay: org.joda.time.DateTimeFieldType[] FIELD_TYPES>
org.joda.time.MonthDay.getFieldType : $r1 = <org.joda.time.MonthDay: org.joda.time.DateTimeFieldType[] FIELD_TYPES> >>>>>>>> org.joda.time.MonthDay.getFieldType : $r2 = $r1[i0]
org.joda.time.MonthDay.getFieldType : $r2 = $r1[i0] >>>>>>>> org.joda.time.MonthDay.getFieldType : return $r2
org.joda.time.MonthDay.getFieldType : return $r2 >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValue : $r4 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>()
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValue : $r4 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>() >>>>>>>> org.joda.time.DateTimeFieldType.monthOfYear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MONTH_OF_YEAR_TYPE>
org.joda.time.DateTimeFieldType.monthOfYear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MONTH_OF_YEAR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.monthOfYear : return $r0
org.joda.time.DateTimeFieldType.monthOfYear : return $r0 >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValue : if $r3 != $r4
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValue : if $r3 != $r4 >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValue : i2 = r2[i1]
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValue : i2 = r2[i1] >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValue : i3 = 0
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValue : i3 = 0 >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValue : if i3 >= i0
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValue : if i3 >= i0 >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValue : $r5 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i3)
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValue : $r5 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i3) >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValue : $r6 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>()
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValue : $r6 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>() >>>>>>>> org.joda.time.DateTimeFieldType.year : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType YEAR_TYPE>
org.joda.time.DateTimeFieldType.year : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType YEAR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.year : return $r0
org.joda.time.DateTimeFieldType.year : return $r0 >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValue : if $r5 != $r6
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValue : if $r5 != $r6 >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValue : i3 = i3 + 1
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValue : i3 = i3 + 1 >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValue : goto [?= (branch)]
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValue : goto [?= (branch)] >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValue : $r8 = r0.<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValue : $r8 = r0.<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValue : $i6 = virtualinvoke $r8.<org.joda.time.chrono.BasicChronology: int getDaysInMonthMax(int)>(i2)
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValue : $i6 = virtualinvoke $r8.<org.joda.time.chrono.BasicChronology: int getDaysInMonthMax(int)>(i2) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInMonthMax : $r1 = <org.joda.time.chrono.BasicGJChronology: int[] MAX_DAYS_PER_MONTH_ARRAY>
org.joda.time.chrono.BasicGJChronology.getDaysInMonthMax : $r1 = <org.joda.time.chrono.BasicGJChronology: int[] MAX_DAYS_PER_MONTH_ARRAY> >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInMonthMax : $i1 = i0 - 1
org.joda.time.chrono.BasicGJChronology.getDaysInMonthMax : $i1 = i0 - 1 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInMonthMax : $i2 = $r1[$i1]
org.joda.time.chrono.BasicGJChronology.getDaysInMonthMax : $i2 = $r1[$i1] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInMonthMax : return $i2
org.joda.time.chrono.BasicGJChronology.getDaysInMonthMax : return $i2 >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValue : return $i6
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValue : return $i6 >>>>>>>> org.joda.time.MonthDay.minusMonths : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>()
org.joda.time.MonthDay.minusMonths : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>() >>>>>>>> org.joda.time.DurationFieldType.months : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MONTHS_TYPE>
org.joda.time.DurationFieldType.months : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MONTHS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.months : return $r0
org.joda.time.DurationFieldType.months : return $r0 >>>>>>>> org.joda.time.MonthDay.minusMonths : $i1 = staticinvoke <org.joda.time.field.FieldUtils: int safeNegate(int)>(i0)
org.joda.time.MonthDay.minusMonths : $i1 = staticinvoke <org.joda.time.field.FieldUtils: int safeNegate(int)>(i0) >>>>>>>> org.joda.time.field.FieldUtils.safeNegate : if i0 != -2147483648
org.joda.time.field.FieldUtils.safeNegate : if i0 != -2147483648 >>>>>>>> org.joda.time.field.FieldUtils.safeNegate : $i1 = neg i0
org.joda.time.field.FieldUtils.safeNegate : $i1 = neg i0 >>>>>>>> org.joda.time.field.FieldUtils.safeNegate : return $i1
org.joda.time.field.FieldUtils.safeNegate : return $i1 >>>>>>>> org.joda.time.MonthDay.minusMonths : $r2 = virtualinvoke r0.<org.joda.time.MonthDay: org.joda.time.MonthDay withFieldAdded(org.joda.time.DurationFieldType,int)>($r1, $i1)
org.joda.time.MonthDay.minusMonths : $r2 = virtualinvoke r0.<org.joda.time.MonthDay: org.joda.time.MonthDay withFieldAdded(org.joda.time.DurationFieldType,int)>($r1, $i1) >>>>>>>> org.joda.time.MonthDay.withFieldAdded : i1 = virtualinvoke r0.<org.joda.time.MonthDay: int indexOfSupported(org.joda.time.DurationFieldType)>(r1)
org.joda.time.MonthDay.withFieldAdded : i1 = virtualinvoke r0.<org.joda.time.MonthDay: int indexOfSupported(org.joda.time.DurationFieldType)>(r1) >>>>>>>> org.joda.time.base.AbstractPartial.indexOfSupported : i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DurationFieldType)>(r1)
org.joda.time.base.AbstractPartial.indexOfSupported : i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int indexOf(org.joda.time.DurationFieldType)>(r1) >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : i0 = 0
org.joda.time.base.AbstractPartial.indexOf : i0 = 0 >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : i1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int size()>()
org.joda.time.base.AbstractPartial.indexOf : i1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int size()>() >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : if i0 >= i1
org.joda.time.base.AbstractPartial.indexOf : if i0 >= i1 >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i0)
org.joda.time.base.AbstractPartial.indexOf : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i0) >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : $r3 = virtualinvoke $r2.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getDurationType()>()
org.joda.time.base.AbstractPartial.indexOf : $r3 = virtualinvoke $r2.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getDurationType()>() >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getDurationType : $r1 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DurationFieldType iUnitType>
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getDurationType : $r1 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: org.joda.time.DurationFieldType iUnitType> >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getDurationType : return $r1
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getDurationType : return $r1 >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : if $r3 != r1
org.joda.time.base.AbstractPartial.indexOf : if $r3 != r1 >>>>>>>> org.joda.time.base.AbstractPartial.indexOf : return i0
org.joda.time.base.AbstractPartial.indexOf : return i0 >>>>>>>> org.joda.time.base.AbstractPartial.indexOfSupported : if i0 != -1
org.joda.time.base.AbstractPartial.indexOfSupported : if i0 != -1 >>>>>>>> org.joda.time.base.AbstractPartial.indexOfSupported : return i0
org.joda.time.base.AbstractPartial.indexOfSupported : return i0 >>>>>>>> org.joda.time.MonthDay.withFieldAdded : if i0 != 0
org.joda.time.MonthDay.withFieldAdded : if i0 != 0 >>>>>>>> org.joda.time.MonthDay.withFieldAdded : return r0
org.joda.time.MonthDay.withFieldAdded : return r0 >>>>>>>> org.joda.time.MonthDay.minusMonths : return $r2
