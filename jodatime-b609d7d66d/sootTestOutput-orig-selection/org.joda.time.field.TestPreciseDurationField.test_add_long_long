org.joda.time.DurationFieldType.seconds : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType SECONDS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.seconds : return $r0
org.joda.time.DurationFieldType.seconds : return $r0 >>>>>>>> org.joda.time.field.PreciseDurationField.add : $l3 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis>
org.joda.time.field.PreciseDurationField.add : $l3 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationField.add : l2 = staticinvoke <org.joda.time.field.FieldUtils: long safeMultiply(long,long)>(l1, $l3)
org.joda.time.field.PreciseDurationField.add : l2 = staticinvoke <org.joda.time.field.FieldUtils: long safeMultiply(long,long)>(l1, $l3) >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : $b3 = l1 cmp 1L
org.joda.time.field.FieldUtils.safeMultiply : $b3 = l1 cmp 1L >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : if $b3 != 0
org.joda.time.field.FieldUtils.safeMultiply : if $b3 != 0 >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : $b4 = l1 cmp 0L
org.joda.time.field.FieldUtils.safeMultiply : $b4 = l1 cmp 0L >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : if $b4 != 0
org.joda.time.field.FieldUtils.safeMultiply : if $b4 != 0 >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : l2 = l0 * l1
org.joda.time.field.FieldUtils.safeMultiply : l2 = l0 * l1 >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : $l5 = l2 / l1
org.joda.time.field.FieldUtils.safeMultiply : $l5 = l2 / l1 >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : $b6 = $l5 cmp l0
org.joda.time.field.FieldUtils.safeMultiply : $b6 = $l5 cmp l0 >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : if $b6 == 0
org.joda.time.field.FieldUtils.safeMultiply : if $b6 == 0 >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : return l2
org.joda.time.field.FieldUtils.safeMultiply : return l2 >>>>>>>> org.joda.time.field.PreciseDurationField.add : $l4 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l0, l2)
org.joda.time.field.PreciseDurationField.add : $l4 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l0, l2) >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : l2 = l0 + l1
org.joda.time.field.FieldUtils.safeAdd : l2 = l0 + l1 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $l3 = l0 ^ l2
org.joda.time.field.FieldUtils.safeAdd : $l3 = l0 ^ l2 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $b4 = $l3 cmp 0L
org.joda.time.field.FieldUtils.safeAdd : $b4 = $l3 cmp 0L >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : if $b4 >= 0
org.joda.time.field.FieldUtils.safeAdd : if $b4 >= 0 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : return l2
org.joda.time.field.FieldUtils.safeAdd : return l2 >>>>>>>> org.joda.time.field.PreciseDurationField.add : return $l4
org.joda.time.field.PreciseDurationField.add : return $l4 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $l5 = l0 ^ l1
org.joda.time.field.FieldUtils.safeAdd : $l5 = l0 ^ l1 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $b6 = $l5 cmp 0L
org.joda.time.field.FieldUtils.safeAdd : $b6 = $l5 cmp 0L >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : if $b6 < 0
org.joda.time.field.FieldUtils.safeAdd : if $b6 < 0 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $r0 = new java.lang.ArithmeticException
org.joda.time.field.FieldUtils.safeAdd : $r0 = new java.lang.ArithmeticException >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $r1 = new java.lang.StringBuilder
org.joda.time.field.FieldUtils.safeAdd : $r1 = new java.lang.StringBuilder >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()
org.joda.time.field.FieldUtils.safeAdd : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The calculation caused an overflow: ")
org.joda.time.field.FieldUtils.safeAdd : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The calculation caused an overflow: ") >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0)
org.joda.time.field.FieldUtils.safeAdd : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0) >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" + ")
org.joda.time.field.FieldUtils.safeAdd : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" + ") >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1)
org.joda.time.field.FieldUtils.safeAdd : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1) >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()
org.joda.time.field.FieldUtils.safeAdd : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r6)
org.joda.time.field.FieldUtils.safeAdd : specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r6) >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : throw $r0
org.joda.time.field.FieldUtils.safeAdd : throw $r0 >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : $r0 = new java.lang.ArithmeticException
org.joda.time.field.FieldUtils.safeMultiply : $r0 = new java.lang.ArithmeticException >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : $r1 = new java.lang.StringBuilder
org.joda.time.field.FieldUtils.safeMultiply : $r1 = new java.lang.StringBuilder >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()
org.joda.time.field.FieldUtils.safeMultiply : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The calculation caused an overflow: ")
org.joda.time.field.FieldUtils.safeMultiply : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The calculation caused an overflow: ") >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0)
org.joda.time.field.FieldUtils.safeMultiply : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0) >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" * ")
org.joda.time.field.FieldUtils.safeMultiply : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" * ") >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1)
org.joda.time.field.FieldUtils.safeMultiply : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1) >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()
org.joda.time.field.FieldUtils.safeMultiply : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r6)
org.joda.time.field.FieldUtils.safeMultiply : specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r6) >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : throw $r0
