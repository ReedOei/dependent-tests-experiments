org.joda.time.DateTimeUtils.setCurrentMillisSystem : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>() >>>>>>>> org.joda.time.DateTimeUtils.checkPermission : r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>()
org.joda.time.DateTimeUtils.checkPermission : r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>() >>>>>>>> org.joda.time.DateTimeUtils.checkPermission : if r0 == null
org.joda.time.DateTimeUtils.checkPermission : if r0 == null >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisSystem : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$SystemMillisProvider SYSTEM_MILLIS_PROVIDER>
org.joda.time.DateTimeUtils.setCurrentMillisSystem : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$SystemMillisProvider SYSTEM_MILLIS_PROVIDER> >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisSystem : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0
org.joda.time.DateTimeUtils.setCurrentMillisSystem : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0 >>>>>>>> org.joda.time.DateTimeZone.setDefault : r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>()
org.joda.time.DateTimeZone.setDefault : r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>() >>>>>>>> org.joda.time.DateTimeZone.setDefault : if r1 == null
org.joda.time.DateTimeZone.setDefault : if r1 == null >>>>>>>> org.joda.time.DateTimeZone.setDefault : if r0 != null
org.joda.time.DateTimeZone.setDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.setDefault : $r6 = class "org/joda/time/DateTimeZone"
org.joda.time.DateTimeZone.setDefault : $r6 = class "org/joda/time/DateTimeZone" >>>>>>>> org.joda.time.DateTimeZone.setDefault : r3 = $r6
org.joda.time.DateTimeZone.setDefault : r3 = $r6 >>>>>>>> org.joda.time.DateTimeZone.setDefault : entermonitor $r6
org.joda.time.DateTimeZone.setDefault : entermonitor $r6 >>>>>>>> org.joda.time.DateTimeZone.setDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r0
org.joda.time.DateTimeZone.setDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r0 >>>>>>>> org.joda.time.DateTimeZone.setDefault : exitmonitor r3
org.joda.time.DateTimeZone.setDefault : exitmonitor r3 >>>>>>>> org.joda.time.DateTimeZone.setDefault : goto [?= return]
org.joda.time.DateTimeZone.setDefault : goto [?= return] >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>()
org.joda.time.DateTimeUtils.setCurrentMillisFixed : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>() >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : $r0 = new org.joda.time.DateTimeUtils$FixedMillisProvider
org.joda.time.DateTimeUtils.setCurrentMillisFixed : $r0 = new org.joda.time.DateTimeUtils$FixedMillisProvider >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : specialinvoke $r0.<org.joda.time.DateTimeUtils$FixedMillisProvider: void <init>(long)>(l0)
org.joda.time.DateTimeUtils.setCurrentMillisFixed : specialinvoke $r0.<org.joda.time.DateTimeUtils$FixedMillisProvider: void <init>(long)>(l0) >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0
org.joda.time.DateTimeUtils.setCurrentMillisFixed : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0 >>>>>>>> org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> >>>>>>>> org.joda.time.DateTimeZone.getDefault : if r0 != null
org.joda.time.DateTimeZone.getDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.DateTimeZone.getDefault : return r0 >>>>>>>> org.joda.time.PeriodType.standard : r0 = <org.joda.time.PeriodType: org.joda.time.PeriodType cStandard>
org.joda.time.PeriodType.standard : r0 = <org.joda.time.PeriodType: org.joda.time.PeriodType cStandard> >>>>>>>> org.joda.time.PeriodType.standard : if r0 != null
org.joda.time.PeriodType.standard : if r0 != null >>>>>>>> org.joda.time.PeriodType.standard : return r0
org.joda.time.PeriodType.standard : return r0 >>>>>>>> org.joda.time.base.BasePeriod.checkPeriodType : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>(r1)
org.joda.time.base.BasePeriod.checkPeriodType : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>(r1) >>>>>>>> org.joda.time.DateTimeUtils.getPeriodType : if r0 != null
org.joda.time.DateTimeUtils.getPeriodType : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getPeriodType : return r0
org.joda.time.DateTimeUtils.getPeriodType : return r0 >>>>>>>> org.joda.time.base.BasePeriod.checkPeriodType : return $r2
org.joda.time.base.BasePeriod.checkPeriodType : return $r2 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $i8 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int size()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $i8 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int size()>() >>>>>>>> org.joda.time.base.AbstractPeriod.size : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.base.AbstractPeriod.size : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.base.BasePeriod.getPeriodType : $r1 = r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType>
org.joda.time.base.BasePeriod.getPeriodType : $r1 = r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType> >>>>>>>> org.joda.time.base.BasePeriod.getPeriodType : return $r1
org.joda.time.base.BasePeriod.getPeriodType : return $r1 >>>>>>>> org.joda.time.base.AbstractPeriod.size : $i0 = virtualinvoke $r1.<org.joda.time.PeriodType: int size()>()
org.joda.time.base.AbstractPeriod.size : $i0 = virtualinvoke $r1.<org.joda.time.PeriodType: int size()>() >>>>>>>> org.joda.time.PeriodType.size : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.PeriodType.size : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes> >>>>>>>> org.joda.time.PeriodType.size : $i0 = lengthof $r1
org.joda.time.PeriodType.size : $i0 = lengthof $r1 >>>>>>>> org.joda.time.PeriodType.size : return $i0
org.joda.time.PeriodType.size : return $i0 >>>>>>>> org.joda.time.base.AbstractPeriod.size : return $i0
org.joda.time.base.AbstractPeriod.size : return $i0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : r1 = newarray (int)[$i8]
org.joda.time.base.BasePeriod.setPeriodInternal : r1 = newarray (int)[$i8] >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r2 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>() >>>>>>>> org.joda.time.DurationFieldType.years : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType YEARS_TYPE>
org.joda.time.DurationFieldType.years : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType YEARS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.years : return $r0
org.joda.time.DurationFieldType.years : return $r0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r2, r1, i0)
org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r2, r1, i0) >>>>>>>> org.joda.time.base.BasePeriod.checkAndUpdate : i1 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int indexOf(org.joda.time.DurationFieldType)>(r1)
org.joda.time.base.BasePeriod.checkAndUpdate : i1 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int indexOf(org.joda.time.DurationFieldType)>(r1) >>>>>>>> org.joda.time.base.AbstractPeriod.indexOf : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.base.AbstractPeriod.indexOf : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.base.AbstractPeriod.indexOf : $i0 = virtualinvoke $r2.<org.joda.time.PeriodType: int indexOf(org.joda.time.DurationFieldType)>(r1)
org.joda.time.base.AbstractPeriod.indexOf : $i0 = virtualinvoke $r2.<org.joda.time.PeriodType: int indexOf(org.joda.time.DurationFieldType)>(r1) >>>>>>>> org.joda.time.PeriodType.indexOf : i0 = 0
org.joda.time.PeriodType.indexOf : i0 = 0 >>>>>>>> org.joda.time.PeriodType.indexOf : i1 = virtualinvoke r0.<org.joda.time.PeriodType: int size()>()
org.joda.time.PeriodType.indexOf : i1 = virtualinvoke r0.<org.joda.time.PeriodType: int size()>() >>>>>>>> org.joda.time.PeriodType.indexOf : if i0 >= i1
org.joda.time.PeriodType.indexOf : if i0 >= i1 >>>>>>>> org.joda.time.PeriodType.indexOf : $r2 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.PeriodType.indexOf : $r2 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes> >>>>>>>> org.joda.time.PeriodType.indexOf : $r3 = $r2[i0]
org.joda.time.PeriodType.indexOf : $r3 = $r2[i0] >>>>>>>> org.joda.time.PeriodType.indexOf : if $r3 != r1
org.joda.time.PeriodType.indexOf : if $r3 != r1 >>>>>>>> org.joda.time.PeriodType.indexOf : return i0
org.joda.time.PeriodType.indexOf : return i0 >>>>>>>> org.joda.time.base.AbstractPeriod.indexOf : return $i0
org.joda.time.base.AbstractPeriod.indexOf : return $i0 >>>>>>>> org.joda.time.base.BasePeriod.checkAndUpdate : if i1 != -1
org.joda.time.base.BasePeriod.checkAndUpdate : if i1 != -1 >>>>>>>> org.joda.time.base.BasePeriod.checkAndUpdate : r2[i1] = i0
org.joda.time.base.BasePeriod.checkAndUpdate : r2[i1] = i0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $r3 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r3 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>() >>>>>>>> org.joda.time.DurationFieldType.months : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MONTHS_TYPE>
org.joda.time.DurationFieldType.months : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MONTHS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.months : return $r0
org.joda.time.DurationFieldType.months : return $r0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r3, r1, i1)
org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r3, r1, i1) >>>>>>>> org.joda.time.PeriodType.indexOf : i0 = i0 + 1
org.joda.time.PeriodType.indexOf : i0 = i0 + 1 >>>>>>>> org.joda.time.PeriodType.indexOf : goto [?= (branch)]
org.joda.time.PeriodType.indexOf : goto [?= (branch)] >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $r4 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r4 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType weeks()>() >>>>>>>> org.joda.time.DurationFieldType.weeks : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType WEEKS_TYPE>
org.joda.time.DurationFieldType.weeks : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType WEEKS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.weeks : return $r0
org.joda.time.DurationFieldType.weeks : return $r0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r4, r1, i2)
org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r4, r1, i2) >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $r5 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r5 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>() >>>>>>>> org.joda.time.DurationFieldType.days : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType DAYS_TYPE>
org.joda.time.DurationFieldType.days : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType DAYS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.days : return $r0
org.joda.time.DurationFieldType.days : return $r0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r5, r1, i3)
org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r5, r1, i3) >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $r6 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r6 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType hours()>() >>>>>>>> org.joda.time.DurationFieldType.hours : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType HOURS_TYPE>
org.joda.time.DurationFieldType.hours : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType HOURS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.hours : return $r0
org.joda.time.DurationFieldType.hours : return $r0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r6, r1, i4)
org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r6, r1, i4) >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $r7 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r7 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>() >>>>>>>> org.joda.time.DurationFieldType.minutes : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MINUTES_TYPE>
org.joda.time.DurationFieldType.minutes : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MINUTES_TYPE> >>>>>>>> org.joda.time.DurationFieldType.minutes : return $r0
org.joda.time.DurationFieldType.minutes : return $r0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r7, r1, i5)
org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r7, r1, i5) >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $r8 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r8 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType seconds()>() >>>>>>>> org.joda.time.DurationFieldType.seconds : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType SECONDS_TYPE>
org.joda.time.DurationFieldType.seconds : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType SECONDS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.seconds : return $r0
org.joda.time.DurationFieldType.seconds : return $r0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r8, r1, i6)
org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r8, r1, i6) >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : $r9 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>()
org.joda.time.base.BasePeriod.setPeriodInternal : $r9 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType millis()>() >>>>>>>> org.joda.time.DurationFieldType.millis : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MILLIS_TYPE>
org.joda.time.DurationFieldType.millis : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MILLIS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.millis : return $r0
org.joda.time.DurationFieldType.millis : return $r0 >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r9, r1, i7)
org.joda.time.base.BasePeriod.setPeriodInternal : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>($r9, r1, i7) >>>>>>>> org.joda.time.base.BasePeriod.setPeriodInternal : return r1
org.joda.time.base.BasePeriod.setPeriodInternal : return r1 >>>>>>>> org.joda.time.PeriodType.days : r0 = <org.joda.time.PeriodType: org.joda.time.PeriodType cDays>
org.joda.time.PeriodType.days : r0 = <org.joda.time.PeriodType: org.joda.time.PeriodType cDays> >>>>>>>> org.joda.time.PeriodType.days : if r0 != null
org.joda.time.PeriodType.days : if r0 != null >>>>>>>> org.joda.time.PeriodType.days : return r0
org.joda.time.PeriodType.days : return r0 >>>>>>>> org.joda.time.PeriodType.indexOf : return -1
org.joda.time.PeriodType.indexOf : return -1 >>>>>>>> org.joda.time.base.BasePeriod.checkAndUpdate : if i0 == 0
org.joda.time.base.BasePeriod.checkAndUpdate : if i0 == 0 >>>>>>>> org.joda.time.Period.plus : if r1 != null
org.joda.time.Period.plus : if r1 != null >>>>>>>> org.joda.time.Period.plus : return r0
org.joda.time.Period.plus : return r0 >>>>>>>> org.joda.time.Period.years : $r0 = new org.joda.time.Period
org.joda.time.Period.years : $r0 = new org.joda.time.Period >>>>>>>> org.joda.time.Period.years : $r1 = newarray (int)[9]
org.joda.time.Period.years : $r1 = newarray (int)[9] >>>>>>>> org.joda.time.Period.years : $r1[0] = i0
org.joda.time.Period.years : $r1[0] = i0 >>>>>>>> org.joda.time.Period.years : $r1[1] = 0
org.joda.time.Period.years : $r1[1] = 0 >>>>>>>> org.joda.time.Period.years : $r1[2] = 0
org.joda.time.Period.years : $r1[2] = 0 >>>>>>>> org.joda.time.Period.years : $r1[3] = 0
org.joda.time.Period.years : $r1[3] = 0 >>>>>>>> org.joda.time.Period.years : $r1[4] = 0
org.joda.time.Period.years : $r1[4] = 0 >>>>>>>> org.joda.time.Period.years : $r1[5] = 0
org.joda.time.Period.years : $r1[5] = 0 >>>>>>>> org.joda.time.Period.years : $r1[6] = 0
org.joda.time.Period.years : $r1[6] = 0 >>>>>>>> org.joda.time.Period.years : $r1[7] = 0
org.joda.time.Period.years : $r1[7] = 0 >>>>>>>> org.joda.time.Period.years : $r1[8] = 0
org.joda.time.Period.years : $r1[8] = 0 >>>>>>>> org.joda.time.Period.years : $r2 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType standard()>()
org.joda.time.Period.years : $r2 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType standard()>() >>>>>>>> org.joda.time.Period.years : specialinvoke $r0.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>($r1, $r2)
org.joda.time.Period.years : specialinvoke $r0.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>($r1, $r2) >>>>>>>> org.joda.time.Period.years : return $r0
org.joda.time.Period.years : return $r0 >>>>>>>> org.joda.time.Period.plus : r2 = virtualinvoke r0.<org.joda.time.Period: int[] getValues()>()
org.joda.time.Period.plus : r2 = virtualinvoke r0.<org.joda.time.Period: int[] getValues()>() >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : $i1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int size()>()
org.joda.time.base.AbstractPeriod.getValues : $i1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int size()>() >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : r1 = newarray (int)[$i1]
org.joda.time.base.AbstractPeriod.getValues : r1 = newarray (int)[$i1] >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : i0 = 0
org.joda.time.base.AbstractPeriod.getValues : i0 = 0 >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : $i2 = lengthof r1
org.joda.time.base.AbstractPeriod.getValues : $i2 = lengthof r1 >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : if i0 >= $i2
org.joda.time.base.AbstractPeriod.getValues : if i0 >= $i2 >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : $i3 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int getValue(int)>(i0)
org.joda.time.base.AbstractPeriod.getValues : $i3 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int getValue(int)>(i0) >>>>>>>> org.joda.time.base.BasePeriod.getValue : $r1 = r0.<org.joda.time.base.BasePeriod: int[] iValues>
org.joda.time.base.BasePeriod.getValue : $r1 = r0.<org.joda.time.base.BasePeriod: int[] iValues> >>>>>>>> org.joda.time.base.BasePeriod.getValue : $i1 = $r1[i0]
org.joda.time.base.BasePeriod.getValue : $i1 = $r1[i0] >>>>>>>> org.joda.time.base.BasePeriod.getValue : return $i1
org.joda.time.base.BasePeriod.getValue : return $i1 >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : r1[i0] = $i3
org.joda.time.base.AbstractPeriod.getValues : r1[i0] = $i3 >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : i0 = i0 + 1
org.joda.time.base.AbstractPeriod.getValues : i0 = i0 + 1 >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : goto [?= $i2 = lengthof r1]
org.joda.time.base.AbstractPeriod.getValues : goto [?= $i2 = lengthof r1] >>>>>>>> org.joda.time.base.AbstractPeriod.getValues : return r1
org.joda.time.base.AbstractPeriod.getValues : return r1 >>>>>>>> org.joda.time.Period.plus : $r4 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.plus : $r4 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.plus : $i0 = <org.joda.time.PeriodType: int YEAR_INDEX>
org.joda.time.Period.plus : $i0 = <org.joda.time.PeriodType: int YEAR_INDEX> >>>>>>>> org.joda.time.Period.plus : $r3 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType YEARS_TYPE>
org.joda.time.Period.plus : $r3 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType YEARS_TYPE> >>>>>>>> org.joda.time.Period.plus : $i1 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r3)
org.joda.time.Period.plus : $i1 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r3) >>>>>>>> org.joda.time.base.AbstractPeriod.get : i0 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int indexOf(org.joda.time.DurationFieldType)>(r1)
org.joda.time.base.AbstractPeriod.get : i0 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int indexOf(org.joda.time.DurationFieldType)>(r1) >>>>>>>> org.joda.time.base.AbstractPeriod.get : if i0 != -1
org.joda.time.base.AbstractPeriod.get : if i0 != -1 >>>>>>>> org.joda.time.base.AbstractPeriod.get : $i1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int getValue(int)>(i0)
org.joda.time.base.AbstractPeriod.get : $i1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int getValue(int)>(i0) >>>>>>>> org.joda.time.base.AbstractPeriod.get : return $i1
org.joda.time.base.AbstractPeriod.get : return $i1 >>>>>>>> org.joda.time.Period.plus : virtualinvoke $r4.<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r0, $i0, r2, $i1)
org.joda.time.Period.plus : virtualinvoke $r4.<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r0, $i0, r2, $i1) >>>>>>>> org.joda.time.PeriodType.addIndexedField : if i1 != 0
org.joda.time.PeriodType.addIndexedField : if i1 != 0 >>>>>>>> org.joda.time.PeriodType.addIndexedField : $r3 = r0.<org.joda.time.PeriodType: int[] iIndices>
org.joda.time.PeriodType.addIndexedField : $r3 = r0.<org.joda.time.PeriodType: int[] iIndices> >>>>>>>> org.joda.time.PeriodType.addIndexedField : i2 = $r3[i0]
org.joda.time.PeriodType.addIndexedField : i2 = $r3[i0] >>>>>>>> org.joda.time.PeriodType.addIndexedField : if i2 != -1
org.joda.time.PeriodType.addIndexedField : if i2 != -1 >>>>>>>> org.joda.time.PeriodType.addIndexedField : $i3 = r2[i2]
org.joda.time.PeriodType.addIndexedField : $i3 = r2[i2] >>>>>>>> org.joda.time.PeriodType.addIndexedField : $i4 = staticinvoke <org.joda.time.field.FieldUtils: int safeAdd(int,int)>($i3, i1)
org.joda.time.PeriodType.addIndexedField : $i4 = staticinvoke <org.joda.time.field.FieldUtils: int safeAdd(int,int)>($i3, i1) >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : i2 = i0 + i1
org.joda.time.field.FieldUtils.safeAdd : i2 = i0 + i1 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $i3 = i0 ^ i2
org.joda.time.field.FieldUtils.safeAdd : $i3 = i0 ^ i2 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : if $i3 >= 0
org.joda.time.field.FieldUtils.safeAdd : if $i3 >= 0 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : return i2
org.joda.time.field.FieldUtils.safeAdd : return i2 >>>>>>>> org.joda.time.PeriodType.addIndexedField : r2[i2] = $i4
org.joda.time.PeriodType.addIndexedField : r2[i2] = $i4 >>>>>>>> org.joda.time.PeriodType.addIndexedField : return 1
org.joda.time.PeriodType.addIndexedField : return 1 >>>>>>>> org.joda.time.Period.plus : $r5 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.plus : $r5 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.plus : $i2 = <org.joda.time.PeriodType: int MONTH_INDEX>
org.joda.time.Period.plus : $i2 = <org.joda.time.PeriodType: int MONTH_INDEX> >>>>>>>> org.joda.time.Period.plus : $r6 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MONTHS_TYPE>
org.joda.time.Period.plus : $r6 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MONTHS_TYPE> >>>>>>>> org.joda.time.Period.plus : $i3 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r6)
org.joda.time.Period.plus : $i3 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r6) >>>>>>>> org.joda.time.Period.plus : virtualinvoke $r5.<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r0, $i2, r2, $i3)
org.joda.time.Period.plus : virtualinvoke $r5.<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r0, $i2, r2, $i3) >>>>>>>> org.joda.time.PeriodType.addIndexedField : return 0
org.joda.time.PeriodType.addIndexedField : return 0 >>>>>>>> org.joda.time.Period.plus : $r7 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.plus : $r7 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.plus : $i4 = <org.joda.time.PeriodType: int WEEK_INDEX>
org.joda.time.Period.plus : $i4 = <org.joda.time.PeriodType: int WEEK_INDEX> >>>>>>>> org.joda.time.Period.plus : $r8 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType WEEKS_TYPE>
org.joda.time.Period.plus : $r8 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType WEEKS_TYPE> >>>>>>>> org.joda.time.Period.plus : $i5 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r8)
org.joda.time.Period.plus : $i5 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r8) >>>>>>>> org.joda.time.Period.plus : virtualinvoke $r7.<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r0, $i4, r2, $i5)
org.joda.time.Period.plus : virtualinvoke $r7.<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r0, $i4, r2, $i5) >>>>>>>> org.joda.time.Period.plus : $r9 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.plus : $r9 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.plus : $i6 = <org.joda.time.PeriodType: int DAY_INDEX>
org.joda.time.Period.plus : $i6 = <org.joda.time.PeriodType: int DAY_INDEX> >>>>>>>> org.joda.time.Period.plus : $r10 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType DAYS_TYPE>
org.joda.time.Period.plus : $r10 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType DAYS_TYPE> >>>>>>>> org.joda.time.Period.plus : $i7 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r10)
org.joda.time.Period.plus : $i7 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r10) >>>>>>>> org.joda.time.Period.plus : virtualinvoke $r9.<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r0, $i6, r2, $i7)
org.joda.time.Period.plus : virtualinvoke $r9.<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r0, $i6, r2, $i7) >>>>>>>> org.joda.time.Period.plus : $r11 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.plus : $r11 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.plus : $i8 = <org.joda.time.PeriodType: int HOUR_INDEX>
org.joda.time.Period.plus : $i8 = <org.joda.time.PeriodType: int HOUR_INDEX> >>>>>>>> org.joda.time.Period.plus : $r12 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType HOURS_TYPE>
org.joda.time.Period.plus : $r12 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType HOURS_TYPE> >>>>>>>> org.joda.time.Period.plus : $i9 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r12)
org.joda.time.Period.plus : $i9 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r12) >>>>>>>> org.joda.time.Period.plus : virtualinvoke $r11.<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r0, $i8, r2, $i9)
org.joda.time.Period.plus : virtualinvoke $r11.<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r0, $i8, r2, $i9) >>>>>>>> org.joda.time.Period.plus : $r13 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.plus : $r13 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.plus : $i10 = <org.joda.time.PeriodType: int MINUTE_INDEX>
org.joda.time.Period.plus : $i10 = <org.joda.time.PeriodType: int MINUTE_INDEX> >>>>>>>> org.joda.time.Period.plus : $r14 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MINUTES_TYPE>
org.joda.time.Period.plus : $r14 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MINUTES_TYPE> >>>>>>>> org.joda.time.Period.plus : $i11 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r14)
org.joda.time.Period.plus : $i11 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r14) >>>>>>>> org.joda.time.Period.plus : virtualinvoke $r13.<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r0, $i10, r2, $i11)
org.joda.time.Period.plus : virtualinvoke $r13.<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r0, $i10, r2, $i11) >>>>>>>> org.joda.time.Period.plus : $r15 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.plus : $r15 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.plus : $i12 = <org.joda.time.PeriodType: int SECOND_INDEX>
org.joda.time.Period.plus : $i12 = <org.joda.time.PeriodType: int SECOND_INDEX> >>>>>>>> org.joda.time.Period.plus : $r16 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType SECONDS_TYPE>
org.joda.time.Period.plus : $r16 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType SECONDS_TYPE> >>>>>>>> org.joda.time.Period.plus : $i13 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r16)
org.joda.time.Period.plus : $i13 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r16) >>>>>>>> org.joda.time.Period.plus : virtualinvoke $r15.<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r0, $i12, r2, $i13)
org.joda.time.Period.plus : virtualinvoke $r15.<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r0, $i12, r2, $i13) >>>>>>>> org.joda.time.Period.plus : $r17 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.plus : $r17 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.plus : $i14 = <org.joda.time.PeriodType: int MILLI_INDEX>
org.joda.time.Period.plus : $i14 = <org.joda.time.PeriodType: int MILLI_INDEX> >>>>>>>> org.joda.time.Period.plus : $r18 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MILLIS_TYPE>
org.joda.time.Period.plus : $r18 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MILLIS_TYPE> >>>>>>>> org.joda.time.Period.plus : $i15 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r18)
org.joda.time.Period.plus : $i15 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int get(org.joda.time.DurationFieldType)>($r18) >>>>>>>> org.joda.time.Period.plus : virtualinvoke $r17.<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r0, $i14, r2, $i15)
org.joda.time.Period.plus : virtualinvoke $r17.<org.joda.time.PeriodType: boolean addIndexedField(org.joda.time.ReadablePeriod,int,int[],int)>(r0, $i14, r2, $i15) >>>>>>>> org.joda.time.Period.plus : $r19 = new org.joda.time.Period
org.joda.time.Period.plus : $r19 = new org.joda.time.Period >>>>>>>> org.joda.time.Period.plus : $r20 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.plus : $r20 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.plus : specialinvoke $r19.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>(r2, $r20)
org.joda.time.Period.plus : specialinvoke $r19.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>(r2, $r20) >>>>>>>> org.joda.time.Period.plus : return $r19
org.joda.time.Period.plus : return $r19 >>>>>>>> org.joda.time.Period.getYears : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.getYears : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.getYears : $i0 = <org.joda.time.PeriodType: int YEAR_INDEX>
org.joda.time.Period.getYears : $i0 = <org.joda.time.PeriodType: int YEAR_INDEX> >>>>>>>> org.joda.time.Period.getYears : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0)
org.joda.time.Period.getYears : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0) >>>>>>>> org.joda.time.PeriodType.getIndexedField : $r2 = r0.<org.joda.time.PeriodType: int[] iIndices>
org.joda.time.PeriodType.getIndexedField : $r2 = r0.<org.joda.time.PeriodType: int[] iIndices> >>>>>>>> org.joda.time.PeriodType.getIndexedField : i1 = $r2[i0]
org.joda.time.PeriodType.getIndexedField : i1 = $r2[i0] >>>>>>>> org.joda.time.PeriodType.getIndexedField : if i1 != -1
org.joda.time.PeriodType.getIndexedField : if i1 != -1 >>>>>>>> org.joda.time.PeriodType.getIndexedField : $i2 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int getValue(int)>(i1)
org.joda.time.PeriodType.getIndexedField : $i2 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int getValue(int)>(i1) >>>>>>>> org.joda.time.PeriodType.getIndexedField : return $i2
org.joda.time.PeriodType.getIndexedField : return $i2 >>>>>>>> org.joda.time.Period.getYears : return $i1
org.joda.time.Period.getYears : return $i1 >>>>>>>> org.joda.time.Period.getMonths : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.getMonths : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.getMonths : $i0 = <org.joda.time.PeriodType: int MONTH_INDEX>
org.joda.time.Period.getMonths : $i0 = <org.joda.time.PeriodType: int MONTH_INDEX> >>>>>>>> org.joda.time.Period.getMonths : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0)
org.joda.time.Period.getMonths : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0) >>>>>>>> org.joda.time.Period.getMonths : return $i1
org.joda.time.Period.getMonths : return $i1 >>>>>>>> org.joda.time.Period.getWeeks : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.getWeeks : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.getWeeks : $i0 = <org.joda.time.PeriodType: int WEEK_INDEX>
org.joda.time.Period.getWeeks : $i0 = <org.joda.time.PeriodType: int WEEK_INDEX> >>>>>>>> org.joda.time.Period.getWeeks : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0)
org.joda.time.Period.getWeeks : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0) >>>>>>>> org.joda.time.Period.getWeeks : return $i1
org.joda.time.Period.getWeeks : return $i1 >>>>>>>> org.joda.time.Period.getDays : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.getDays : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.getDays : $i0 = <org.joda.time.PeriodType: int DAY_INDEX>
org.joda.time.Period.getDays : $i0 = <org.joda.time.PeriodType: int DAY_INDEX> >>>>>>>> org.joda.time.Period.getDays : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0)
org.joda.time.Period.getDays : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0) >>>>>>>> org.joda.time.Period.getDays : return $i1
org.joda.time.Period.getDays : return $i1 >>>>>>>> org.joda.time.Period.getHours : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.getHours : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.getHours : $i0 = <org.joda.time.PeriodType: int HOUR_INDEX>
org.joda.time.Period.getHours : $i0 = <org.joda.time.PeriodType: int HOUR_INDEX> >>>>>>>> org.joda.time.Period.getHours : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0)
org.joda.time.Period.getHours : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0) >>>>>>>> org.joda.time.Period.getHours : return $i1
org.joda.time.Period.getHours : return $i1 >>>>>>>> org.joda.time.Period.getMinutes : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.getMinutes : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.getMinutes : $i0 = <org.joda.time.PeriodType: int MINUTE_INDEX>
org.joda.time.Period.getMinutes : $i0 = <org.joda.time.PeriodType: int MINUTE_INDEX> >>>>>>>> org.joda.time.Period.getMinutes : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0)
org.joda.time.Period.getMinutes : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0) >>>>>>>> org.joda.time.Period.getMinutes : return $i1
org.joda.time.Period.getMinutes : return $i1 >>>>>>>> org.joda.time.Period.getSeconds : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.getSeconds : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.getSeconds : $i0 = <org.joda.time.PeriodType: int SECOND_INDEX>
org.joda.time.Period.getSeconds : $i0 = <org.joda.time.PeriodType: int SECOND_INDEX> >>>>>>>> org.joda.time.Period.getSeconds : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0)
org.joda.time.Period.getSeconds : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0) >>>>>>>> org.joda.time.Period.getSeconds : return $i1
org.joda.time.Period.getSeconds : return $i1 >>>>>>>> org.joda.time.Period.getMillis : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.Period.getMillis : $r1 = virtualinvoke r0.<org.joda.time.Period: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Period.getMillis : $i0 = <org.joda.time.PeriodType: int MILLI_INDEX>
org.joda.time.Period.getMillis : $i0 = <org.joda.time.PeriodType: int MILLI_INDEX> >>>>>>>> org.joda.time.Period.getMillis : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0)
org.joda.time.Period.getMillis : $i1 = virtualinvoke $r1.<org.joda.time.PeriodType: int getIndexedField(org.joda.time.ReadablePeriod,int)>(r0, $i0) >>>>>>>> org.joda.time.Period.getMillis : return $i1
org.joda.time.Period.getMillis : return $i1 >>>>>>>> org.joda.time.format.ISOPeriodFormat.standard : $r0 = <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter cStandard>
org.joda.time.format.ISOPeriodFormat.standard : $r0 = <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter cStandard> >>>>>>>> org.joda.time.format.ISOPeriodFormat.standard : if $r0 != null
org.joda.time.format.ISOPeriodFormat.standard : if $r0 != null >>>>>>>> org.joda.time.format.ISOPeriodFormat.standard : $r19 = <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter cStandard>
org.joda.time.format.ISOPeriodFormat.standard : $r19 = <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter cStandard> >>>>>>>> org.joda.time.format.ISOPeriodFormat.standard : return $r19
org.joda.time.format.ISOPeriodFormat.standard : return $r19 >>>>>>>> org.joda.time.PeriodType.years : r0 = <org.joda.time.PeriodType: org.joda.time.PeriodType cYears>
org.joda.time.PeriodType.years : r0 = <org.joda.time.PeriodType: org.joda.time.PeriodType cYears> >>>>>>>> org.joda.time.PeriodType.years : if r0 != null
org.joda.time.PeriodType.years : if r0 != null >>>>>>>> org.joda.time.PeriodType.years : return r0
org.joda.time.PeriodType.years : return r0 >>>>>>>> org.joda.time.format.PeriodFormatter.withParseType : $r2 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.PeriodType iParseType>
org.joda.time.format.PeriodFormatter.withParseType : $r2 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.PeriodType iParseType> >>>>>>>> org.joda.time.format.PeriodFormatter.withParseType : if r1 != $r2
org.joda.time.format.PeriodFormatter.withParseType : if r1 != $r2 >>>>>>>> org.joda.time.format.PeriodFormatter.withParseType : $r3 = new org.joda.time.format.PeriodFormatter
org.joda.time.format.PeriodFormatter.withParseType : $r3 = new org.joda.time.format.PeriodFormatter >>>>>>>> org.joda.time.format.PeriodFormatter.withParseType : $r4 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter iPrinter>
org.joda.time.format.PeriodFormatter.withParseType : $r4 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter iPrinter> >>>>>>>> org.joda.time.format.PeriodFormatter.withParseType : $r5 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodParser iParser>
org.joda.time.format.PeriodFormatter.withParseType : $r5 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodParser iParser> >>>>>>>> org.joda.time.format.PeriodFormatter.withParseType : $r6 = r0.<org.joda.time.format.PeriodFormatter: java.util.Locale iLocale>
org.joda.time.format.PeriodFormatter.withParseType : $r6 = r0.<org.joda.time.format.PeriodFormatter: java.util.Locale iLocale> >>>>>>>> org.joda.time.format.PeriodFormatter.withParseType : specialinvoke $r3.<org.joda.time.format.PeriodFormatter: void <init>(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,java.util.Locale,org.joda.time.PeriodType)>($r4, $r5, $r6, r1)
org.joda.time.format.PeriodFormatter.withParseType : specialinvoke $r3.<org.joda.time.format.PeriodFormatter: void <init>(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,java.util.Locale,org.joda.time.PeriodType)>($r4, $r5, $r6, r1) >>>>>>>> org.joda.time.format.PeriodFormatter.withParseType : return $r3
org.joda.time.format.PeriodFormatter.withParseType : return $r3 >>>>>>>> org.joda.time.Years.years : lookupswitch(i0) {     case -2147483648:
org.joda.time.Years.years : lookupswitch(i0) {     case -2147483648: >>>>>>>> org.joda.time.Years.years : $r6 = new org.joda.time.Years
org.joda.time.Years.years : $r6 = new org.joda.time.Years >>>>>>>> org.joda.time.Years.years : specialinvoke $r6.<org.joda.time.Years: void <init>(int)>(i0)
org.joda.time.Years.years : specialinvoke $r6.<org.joda.time.Years: void <init>(int)>(i0) >>>>>>>> org.joda.time.Years.years : return $r6
org.joda.time.Years.years : return $r6 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.get : $r2 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType()>()
org.joda.time.base.BaseSingleFieldPeriod.get : $r2 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.DurationFieldType getFieldType()>() >>>>>>>> org.joda.time.Years.getFieldType : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>()
org.joda.time.Years.getFieldType : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType years()>() >>>>>>>> org.joda.time.Years.getFieldType : return $r1
org.joda.time.Years.getFieldType : return $r1 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.get : if r1 != $r2
org.joda.time.base.BaseSingleFieldPeriod.get : if r1 != $r2 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.get : $i0 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>()
org.joda.time.base.BaseSingleFieldPeriod.get : $i0 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>() >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.getValue : $i0 = r0.<org.joda.time.base.BaseSingleFieldPeriod: int iPeriod>
org.joda.time.base.BaseSingleFieldPeriod.getValue : $i0 = r0.<org.joda.time.base.BaseSingleFieldPeriod: int iPeriod> >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.getValue : return $i0
org.joda.time.base.BaseSingleFieldPeriod.getValue : return $i0 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.get : return $i0
org.joda.time.base.BaseSingleFieldPeriod.get : return $i0 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.get : return 0
org.joda.time.base.BaseSingleFieldPeriod.get : return 0 >>>>>>>> org.joda.time.Period.days : $r0 = new org.joda.time.Period
org.joda.time.Period.days : $r0 = new org.joda.time.Period >>>>>>>> org.joda.time.Period.days : $r1 = newarray (int)[8]
org.joda.time.Period.days : $r1 = newarray (int)[8] >>>>>>>> org.joda.time.Period.days : $r1[0] = 0
org.joda.time.Period.days : $r1[0] = 0 >>>>>>>> org.joda.time.Period.days : $r1[1] = 0
org.joda.time.Period.days : $r1[1] = 0 >>>>>>>> org.joda.time.Period.days : $r1[2] = 0
org.joda.time.Period.days : $r1[2] = 0 >>>>>>>> org.joda.time.Period.days : $r1[3] = i0
org.joda.time.Period.days : $r1[3] = i0 >>>>>>>> org.joda.time.Period.days : $r1[4] = 0
org.joda.time.Period.days : $r1[4] = 0 >>>>>>>> org.joda.time.Period.days : $r1[5] = 0
org.joda.time.Period.days : $r1[5] = 0 >>>>>>>> org.joda.time.Period.days : $r1[6] = 0
org.joda.time.Period.days : $r1[6] = 0 >>>>>>>> org.joda.time.Period.days : $r1[7] = 0
org.joda.time.Period.days : $r1[7] = 0 >>>>>>>> org.joda.time.Period.days : $r2 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType standard()>()
org.joda.time.Period.days : $r2 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType standard()>() >>>>>>>> org.joda.time.Period.days : specialinvoke $r0.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>($r1, $r2)
org.joda.time.Period.days : specialinvoke $r0.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>($r1, $r2) >>>>>>>> org.joda.time.Period.days : return $r0
org.joda.time.Period.days : return $r0 >>>>>>>> org.joda.time.PeriodType.getIndexedField : $i2 = 0
org.joda.time.PeriodType.getIndexedField : $i2 = 0 >>>>>>>> org.joda.time.PeriodType.getIndexedField : goto [?= return $i2]
org.joda.time.PeriodType.getIndexedField : goto [?= return $i2] >>>>>>>> org.joda.time.base.AbstractPeriod.get : return 0
org.joda.time.base.AbstractPeriod.get : return 0 >>>>>>>> org.joda.time.PeriodType.addIndexedField : $r4 = new java.lang.UnsupportedOperationException
org.joda.time.PeriodType.addIndexedField : $r4 = new java.lang.UnsupportedOperationException >>>>>>>> org.joda.time.PeriodType.addIndexedField : specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Field is not supported")
org.joda.time.PeriodType.addIndexedField : specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Field is not supported") >>>>>>>> org.joda.time.PeriodType.addIndexedField : throw $r4
org.joda.time.PeriodType.addIndexedField : throw $r4 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $i4 = i0 ^ i1
org.joda.time.field.FieldUtils.safeAdd : $i4 = i0 ^ i1 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : if $i4 < 0
org.joda.time.field.FieldUtils.safeAdd : if $i4 < 0 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $r1 = new java.lang.ArithmeticException
org.joda.time.field.FieldUtils.safeAdd : $r1 = new java.lang.ArithmeticException >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $r0 = new java.lang.StringBuilder
org.joda.time.field.FieldUtils.safeAdd : $r0 = new java.lang.StringBuilder >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()
org.joda.time.field.FieldUtils.safeAdd : specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The calculation caused an overflow: ")
org.joda.time.field.FieldUtils.safeAdd : $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The calculation caused an overflow: ") >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)
org.joda.time.field.FieldUtils.safeAdd : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0) >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" + ")
org.joda.time.field.FieldUtils.safeAdd : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" + ") >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1)
org.joda.time.field.FieldUtils.safeAdd : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1) >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()
org.joda.time.field.FieldUtils.safeAdd : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : specialinvoke $r1.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r6)
org.joda.time.field.FieldUtils.safeAdd : specialinvoke $r1.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r6) >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : throw $r1
