org.joda.time.Days.days : lookupswitch(i0) {     case -2147483648: >>>>>>>> org.joda.time.Days.days : $r2 = <org.joda.time.Days: org.joda.time.Days TWO>
org.joda.time.Days.days : $r2 = <org.joda.time.Days: org.joda.time.Days TWO> >>>>>>>> org.joda.time.Days.days : return $r2
org.joda.time.Days.days : return $r2 >>>>>>>> org.joda.time.format.ISOPeriodFormat.standard : $r0 = <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter cStandard>
org.joda.time.format.ISOPeriodFormat.standard : $r0 = <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter cStandard> >>>>>>>> org.joda.time.format.ISOPeriodFormat.standard : if $r0 != null
org.joda.time.format.ISOPeriodFormat.standard : if $r0 != null >>>>>>>> org.joda.time.format.ISOPeriodFormat.standard : $r19 = <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter cStandard>
org.joda.time.format.ISOPeriodFormat.standard : $r19 = <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter cStandard> >>>>>>>> org.joda.time.format.ISOPeriodFormat.standard : return $r19
org.joda.time.format.ISOPeriodFormat.standard : return $r19 >>>>>>>> org.joda.time.PeriodType.minutes : r0 = <org.joda.time.PeriodType: org.joda.time.PeriodType cMinutes>
org.joda.time.PeriodType.minutes : r0 = <org.joda.time.PeriodType: org.joda.time.PeriodType cMinutes> >>>>>>>> org.joda.time.PeriodType.minutes : if r0 != null
org.joda.time.PeriodType.minutes : if r0 != null >>>>>>>> org.joda.time.PeriodType.minutes : $r2 = new org.joda.time.PeriodType
org.joda.time.PeriodType.minutes : $r2 = new org.joda.time.PeriodType >>>>>>>> org.joda.time.PeriodType.minutes : $r3 = newarray (org.joda.time.DurationFieldType)[1]
org.joda.time.PeriodType.minutes : $r3 = newarray (org.joda.time.DurationFieldType)[1] >>>>>>>> org.joda.time.PeriodType.minutes : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>()
org.joda.time.PeriodType.minutes : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType minutes()>() >>>>>>>> org.joda.time.DurationFieldType.minutes : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MINUTES_TYPE>
org.joda.time.DurationFieldType.minutes : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MINUTES_TYPE> >>>>>>>> org.joda.time.DurationFieldType.minutes : return $r0
org.joda.time.DurationFieldType.minutes : return $r0 >>>>>>>> org.joda.time.PeriodType.minutes : $r3[0] = $r1
org.joda.time.PeriodType.minutes : $r3[0] = $r1 >>>>>>>> org.joda.time.PeriodType.minutes : $r4 = newarray (int)[8]
org.joda.time.PeriodType.minutes : $r4 = newarray (int)[8] >>>>>>>> org.joda.time.PeriodType.minutes : $r4[0] = -1
org.joda.time.PeriodType.minutes : $r4[0] = -1 >>>>>>>> org.joda.time.PeriodType.minutes : $r4[1] = -1
org.joda.time.PeriodType.minutes : $r4[1] = -1 >>>>>>>> org.joda.time.PeriodType.minutes : $r4[2] = -1
org.joda.time.PeriodType.minutes : $r4[2] = -1 >>>>>>>> org.joda.time.PeriodType.minutes : $r4[3] = -1
org.joda.time.PeriodType.minutes : $r4[3] = -1 >>>>>>>> org.joda.time.PeriodType.minutes : $r4[4] = -1
org.joda.time.PeriodType.minutes : $r4[4] = -1 >>>>>>>> org.joda.time.PeriodType.minutes : $r4[5] = 0
org.joda.time.PeriodType.minutes : $r4[5] = 0 >>>>>>>> org.joda.time.PeriodType.minutes : $r4[6] = -1
org.joda.time.PeriodType.minutes : $r4[6] = -1 >>>>>>>> org.joda.time.PeriodType.minutes : $r4[7] = -1
org.joda.time.PeriodType.minutes : $r4[7] = -1 >>>>>>>> org.joda.time.PeriodType.minutes : specialinvoke $r2.<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>("Minutes", $r3, $r4)
org.joda.time.PeriodType.minutes : specialinvoke $r2.<org.joda.time.PeriodType: void <init>(java.lang.String,org.joda.time.DurationFieldType[],int[])>("Minutes", $r3, $r4) >>>>>>>> org.joda.time.PeriodType.minutes : r0 = $r2
org.joda.time.PeriodType.minutes : r0 = $r2 >>>>>>>> org.joda.time.PeriodType.minutes : <org.joda.time.PeriodType: org.joda.time.PeriodType cMinutes> = r0
org.joda.time.PeriodType.minutes : <org.joda.time.PeriodType: org.joda.time.PeriodType cMinutes> = r0 >>>>>>>> org.joda.time.PeriodType.minutes : return r0
org.joda.time.PeriodType.minutes : return r0 >>>>>>>> org.joda.time.format.PeriodFormatter.withParseType : $r2 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.PeriodType iParseType>
org.joda.time.format.PeriodFormatter.withParseType : $r2 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.PeriodType iParseType> >>>>>>>> org.joda.time.format.PeriodFormatter.withParseType : if r1 != $r2
org.joda.time.format.PeriodFormatter.withParseType : if r1 != $r2 >>>>>>>> org.joda.time.format.PeriodFormatter.withParseType : $r3 = new org.joda.time.format.PeriodFormatter
org.joda.time.format.PeriodFormatter.withParseType : $r3 = new org.joda.time.format.PeriodFormatter >>>>>>>> org.joda.time.format.PeriodFormatter.withParseType : $r4 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter iPrinter>
org.joda.time.format.PeriodFormatter.withParseType : $r4 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodPrinter iPrinter> >>>>>>>> org.joda.time.format.PeriodFormatter.withParseType : $r5 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodParser iParser>
org.joda.time.format.PeriodFormatter.withParseType : $r5 = r0.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodParser iParser> >>>>>>>> org.joda.time.format.PeriodFormatter.withParseType : $r6 = r0.<org.joda.time.format.PeriodFormatter: java.util.Locale iLocale>
org.joda.time.format.PeriodFormatter.withParseType : $r6 = r0.<org.joda.time.format.PeriodFormatter: java.util.Locale iLocale> >>>>>>>> org.joda.time.format.PeriodFormatter.withParseType : specialinvoke $r3.<org.joda.time.format.PeriodFormatter: void <init>(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,java.util.Locale,org.joda.time.PeriodType)>($r4, $r5, $r6, r1)
org.joda.time.format.PeriodFormatter.withParseType : specialinvoke $r3.<org.joda.time.format.PeriodFormatter: void <init>(org.joda.time.format.PeriodPrinter,org.joda.time.format.PeriodParser,java.util.Locale,org.joda.time.PeriodType)>($r4, $r5, $r6, r1) >>>>>>>> org.joda.time.format.PeriodFormatter.withParseType : return $r3
org.joda.time.format.PeriodFormatter.withParseType : return $r3 >>>>>>>> org.joda.time.Minutes.minutes : lookupswitch(i0) {     case -2147483648:
org.joda.time.Minutes.minutes : lookupswitch(i0) {     case -2147483648: >>>>>>>> org.joda.time.Minutes.minutes : $r6 = new org.joda.time.Minutes
org.joda.time.Minutes.minutes : $r6 = new org.joda.time.Minutes >>>>>>>> org.joda.time.Minutes.minutes : specialinvoke $r6.<org.joda.time.Minutes: void <init>(int)>(i0)
org.joda.time.Minutes.minutes : specialinvoke $r6.<org.joda.time.Minutes: void <init>(int)>(i0) >>>>>>>> org.joda.time.Minutes.minutes : return $r6
org.joda.time.Minutes.minutes : return $r6 >>>>>>>> org.joda.time.Days.toStandardMinutes : $i0 = virtualinvoke r0.<org.joda.time.Days: int getValue()>()
org.joda.time.Days.toStandardMinutes : $i0 = virtualinvoke r0.<org.joda.time.Days: int getValue()>() >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.getValue : $i0 = r0.<org.joda.time.base.BaseSingleFieldPeriod: int iPeriod>
org.joda.time.base.BaseSingleFieldPeriod.getValue : $i0 = r0.<org.joda.time.base.BaseSingleFieldPeriod: int iPeriod> >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.getValue : return $i0
org.joda.time.base.BaseSingleFieldPeriod.getValue : return $i0 >>>>>>>> org.joda.time.Days.toStandardMinutes : $i1 = staticinvoke <org.joda.time.field.FieldUtils: int safeMultiply(int,int)>($i0, 1440)
org.joda.time.Days.toStandardMinutes : $i1 = staticinvoke <org.joda.time.field.FieldUtils: int safeMultiply(int,int)>($i0, 1440) >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : $l3 = (long) i0
org.joda.time.field.FieldUtils.safeMultiply : $l3 = (long) i0 >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : $l4 = (long) i1
org.joda.time.field.FieldUtils.safeMultiply : $l4 = (long) i1 >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : l2 = $l3 * $l4
org.joda.time.field.FieldUtils.safeMultiply : l2 = $l3 * $l4 >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : $b5 = l2 cmp -2147483648L
org.joda.time.field.FieldUtils.safeMultiply : $b5 = l2 cmp -2147483648L >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : if $b5 < 0
org.joda.time.field.FieldUtils.safeMultiply : if $b5 < 0 >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : $b6 = l2 cmp 2147483647L
org.joda.time.field.FieldUtils.safeMultiply : $b6 = l2 cmp 2147483647L >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : if $b6 <= 0
org.joda.time.field.FieldUtils.safeMultiply : if $b6 <= 0 >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : $i7 = (int) l2
org.joda.time.field.FieldUtils.safeMultiply : $i7 = (int) l2 >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : return $i7
org.joda.time.field.FieldUtils.safeMultiply : return $i7 >>>>>>>> org.joda.time.Days.toStandardMinutes : $r1 = staticinvoke <org.joda.time.Minutes: org.joda.time.Minutes minutes(int)>($i1)
org.joda.time.Days.toStandardMinutes : $r1 = staticinvoke <org.joda.time.Minutes: org.joda.time.Minutes minutes(int)>($i1) >>>>>>>> org.joda.time.Days.toStandardMinutes : return $r1
org.joda.time.Days.toStandardMinutes : return $r1 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.equals : if r0 != r1
org.joda.time.base.BaseSingleFieldPeriod.equals : if r0 != r1 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.equals : $z0 = r1 instanceof org.joda.time.ReadablePeriod
org.joda.time.base.BaseSingleFieldPeriod.equals : $z0 = r1 instanceof org.joda.time.ReadablePeriod >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.equals : if $z0 != 0
org.joda.time.base.BaseSingleFieldPeriod.equals : if $z0 != 0 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.equals : r2 = (org.joda.time.ReadablePeriod) r1
org.joda.time.base.BaseSingleFieldPeriod.equals : r2 = (org.joda.time.ReadablePeriod) r1 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.equals : $r3 = interfaceinvoke r2.<org.joda.time.ReadablePeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.base.BaseSingleFieldPeriod.equals : $r3 = interfaceinvoke r2.<org.joda.time.ReadablePeriod: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.Minutes.getPeriodType : $r1 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType minutes()>()
org.joda.time.Minutes.getPeriodType : $r1 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType minutes()>() >>>>>>>> org.joda.time.Minutes.getPeriodType : return $r1
org.joda.time.Minutes.getPeriodType : return $r1 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.equals : $r4 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.base.BaseSingleFieldPeriod.equals : $r4 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.equals : if $r3 != $r4
org.joda.time.base.BaseSingleFieldPeriod.equals : if $r3 != $r4 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.equals : $i0 = interfaceinvoke r2.<org.joda.time.ReadablePeriod: int getValue(int)>(0)
org.joda.time.base.BaseSingleFieldPeriod.equals : $i0 = interfaceinvoke r2.<org.joda.time.ReadablePeriod: int getValue(int)>(0) >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.getValue : if i0 == 0
org.joda.time.base.BaseSingleFieldPeriod.getValue : if i0 == 0 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.getValue : $i1 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>()
org.joda.time.base.BaseSingleFieldPeriod.getValue : $i1 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>() >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.getValue : return $i1
org.joda.time.base.BaseSingleFieldPeriod.getValue : return $i1 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.equals : $i1 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>()
org.joda.time.base.BaseSingleFieldPeriod.equals : $i1 = virtualinvoke r0.<org.joda.time.base.BaseSingleFieldPeriod: int getValue()>() >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.equals : if $i0 != $i1
org.joda.time.base.BaseSingleFieldPeriod.equals : if $i0 != $i1 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.equals : $z1 = 1
org.joda.time.base.BaseSingleFieldPeriod.equals : $z1 = 1 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.equals : goto [?= return $z1]
org.joda.time.base.BaseSingleFieldPeriod.equals : goto [?= return $z1] >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.equals : return $z1
org.joda.time.base.BaseSingleFieldPeriod.equals : return $z1 >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : $r0 = new java.lang.ArithmeticException
org.joda.time.field.FieldUtils.safeMultiply : $r0 = new java.lang.ArithmeticException >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : $r1 = new java.lang.StringBuilder
org.joda.time.field.FieldUtils.safeMultiply : $r1 = new java.lang.StringBuilder >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()
org.joda.time.field.FieldUtils.safeMultiply : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The calculation caused an overflow: ")
org.joda.time.field.FieldUtils.safeMultiply : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The calculation caused an overflow: ") >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)
org.joda.time.field.FieldUtils.safeMultiply : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0) >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" * ")
org.joda.time.field.FieldUtils.safeMultiply : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" * ") >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1)
org.joda.time.field.FieldUtils.safeMultiply : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1) >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()
org.joda.time.field.FieldUtils.safeMultiply : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r6)
org.joda.time.field.FieldUtils.safeMultiply : specialinvoke $r0.<java.lang.ArithmeticException: void <init>(java.lang.String)>($r6) >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : throw $r0
