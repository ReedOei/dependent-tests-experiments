org.joda.time.chrono.ISOChronology.getInstanceUTC : $r0 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.ISOChronology.getInstanceUTC : return $r0
org.joda.time.chrono.ISOChronology.getInstanceUTC : return $r0 >>>>>>>> org.joda.time.DateTimeFieldType.secondOfMinute : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType SECOND_OF_MINUTE_TYPE>
org.joda.time.DateTimeFieldType.secondOfMinute : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType SECOND_OF_MINUTE_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.secondOfMinute : return $r0
org.joda.time.DateTimeFieldType.secondOfMinute : return $r0 >>>>>>>> org.joda.time.DateTimeComparator.getInstance : if r0 != null
org.joda.time.DateTimeComparator.getInstance : if r0 != null >>>>>>>> org.joda.time.DateTimeComparator.getInstance : if r1 != null
org.joda.time.DateTimeComparator.getInstance : if r1 != null >>>>>>>> org.joda.time.DateTimeComparator.getInstance : $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>()
org.joda.time.DateTimeComparator.getInstance : $r2 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>() >>>>>>>> org.joda.time.DateTimeFieldType.dayOfYear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType DAY_OF_YEAR_TYPE>
org.joda.time.DateTimeFieldType.dayOfYear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType DAY_OF_YEAR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.dayOfYear : return $r0
org.joda.time.DateTimeFieldType.dayOfYear : return $r0 >>>>>>>> org.joda.time.DateTimeComparator.getInstance : if r0 != $r2
org.joda.time.DateTimeComparator.getInstance : if r0 != $r2 >>>>>>>> org.joda.time.DateTimeComparator.getInstance : $r5 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>()
org.joda.time.DateTimeComparator.getInstance : $r5 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>() >>>>>>>> org.joda.time.DateTimeComparator.getInstance : if r1 != $r5
org.joda.time.DateTimeComparator.getInstance : if r1 != $r5 >>>>>>>> org.joda.time.DateTimeComparator.getInstance : $r7 = new org.joda.time.DateTimeComparator
org.joda.time.DateTimeComparator.getInstance : $r7 = new org.joda.time.DateTimeComparator >>>>>>>> org.joda.time.DateTimeComparator.getInstance : specialinvoke $r7.<org.joda.time.DateTimeComparator: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DateTimeFieldType)>(r0, r1)
org.joda.time.DateTimeComparator.getInstance : specialinvoke $r7.<org.joda.time.DateTimeComparator: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DateTimeFieldType)>(r0, r1) >>>>>>>> org.joda.time.DateTimeComparator.getInstance : return $r7
org.joda.time.DateTimeComparator.getInstance : return $r7 >>>>>>>> org.joda.time.DateTimeFieldType.minuteOfHour : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MINUTE_OF_HOUR_TYPE>
org.joda.time.DateTimeFieldType.minuteOfHour : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MINUTE_OF_HOUR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.minuteOfHour : return $r0
org.joda.time.DateTimeFieldType.minuteOfHour : return $r0 >>>>>>>> org.joda.time.DateTimeFieldType.hourOfDay : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType HOUR_OF_DAY_TYPE>
org.joda.time.DateTimeFieldType.hourOfDay : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType HOUR_OF_DAY_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.hourOfDay : return $r0
org.joda.time.DateTimeFieldType.hourOfDay : return $r0 >>>>>>>> org.joda.time.DateTimeFieldType.dayOfWeek : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType DAY_OF_WEEK_TYPE>
org.joda.time.DateTimeFieldType.dayOfWeek : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType DAY_OF_WEEK_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.dayOfWeek : return $r0
org.joda.time.DateTimeFieldType.dayOfWeek : return $r0 >>>>>>>> org.joda.time.DateTimeFieldType.weekOfWeekyear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType WEEK_OF_WEEKYEAR_TYPE>
org.joda.time.DateTimeFieldType.weekOfWeekyear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType WEEK_OF_WEEKYEAR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.weekOfWeekyear : return $r0
org.joda.time.DateTimeFieldType.weekOfWeekyear : return $r0 >>>>>>>> org.joda.time.DateTimeFieldType.dayOfMonth : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType DAY_OF_MONTH_TYPE>
org.joda.time.DateTimeFieldType.dayOfMonth : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType DAY_OF_MONTH_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.dayOfMonth : return $r0
org.joda.time.DateTimeFieldType.dayOfMonth : return $r0 >>>>>>>> org.joda.time.DateTimeFieldType.monthOfYear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MONTH_OF_YEAR_TYPE>
org.joda.time.DateTimeFieldType.monthOfYear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MONTH_OF_YEAR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.monthOfYear : return $r0
org.joda.time.DateTimeFieldType.monthOfYear : return $r0 >>>>>>>> org.joda.time.DateTimeFieldType.year : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType YEAR_TYPE>
org.joda.time.DateTimeFieldType.year : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType YEAR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.year : return $r0
org.joda.time.DateTimeFieldType.year : return $r0 >>>>>>>> org.joda.time.DateTimeFieldType.weekyear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType WEEKYEAR_TYPE>
org.joda.time.DateTimeFieldType.weekyear : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType WEEKYEAR_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.weekyear : return $r0
org.joda.time.DateTimeFieldType.weekyear : return $r0 >>>>>>>> org.joda.time.DateTimeComparator.getInstance : $r1 = staticinvoke <org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DateTimeFieldType)>(r0, null)
org.joda.time.DateTimeComparator.getInstance : $r1 = staticinvoke <org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator getInstance(org.joda.time.DateTimeFieldType,org.joda.time.DateTimeFieldType)>(r0, null) >>>>>>>> org.joda.time.DateTimeComparator.getInstance : return $r1
org.joda.time.DateTimeComparator.getInstance : return $r1 >>>>>>>> org.joda.time.DateTimeComparator.getDateOnlyInstance : $r0 = <org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator DATE_INSTANCE>
org.joda.time.DateTimeComparator.getDateOnlyInstance : $r0 = <org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator DATE_INSTANCE> >>>>>>>> org.joda.time.DateTimeComparator.getDateOnlyInstance : return $r0
org.joda.time.DateTimeComparator.getDateOnlyInstance : return $r0 >>>>>>>> org.joda.time.DateTimeComparator.getTimeOnlyInstance : $r0 = <org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator TIME_INSTANCE>
org.joda.time.DateTimeComparator.getTimeOnlyInstance : $r0 = <org.joda.time.DateTimeComparator: org.joda.time.DateTimeComparator TIME_INSTANCE> >>>>>>>> org.joda.time.DateTimeComparator.getTimeOnlyInstance : return $r0
org.joda.time.DateTimeComparator.getTimeOnlyInstance : return $r0 >>>>>>>> org.joda.time.convert.ConverterManager.getInstance : $r0 = <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager INSTANCE>
org.joda.time.convert.ConverterManager.getInstance : $r0 = <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager INSTANCE> >>>>>>>> org.joda.time.convert.ConverterManager.getInstance : if $r0 != null
org.joda.time.convert.ConverterManager.getInstance : if $r0 != null >>>>>>>> org.joda.time.convert.ConverterManager.getInstance : $r2 = <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager INSTANCE>
org.joda.time.convert.ConverterManager.getInstance : $r2 = <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager INSTANCE> >>>>>>>> org.joda.time.convert.ConverterManager.getInstance : return $r2
org.joda.time.convert.ConverterManager.getInstance : return $r2 >>>>>>>> org.joda.time.convert.ConverterManager.getInstantConverter : $r4 = r0.<org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterSet iInstantConverters>
org.joda.time.convert.ConverterManager.getInstantConverter : $r4 = r0.<org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterSet iInstantConverters> >>>>>>>> org.joda.time.convert.ConverterManager.getInstantConverter : if r1 != null
org.joda.time.convert.ConverterManager.getInstantConverter : if r1 != null >>>>>>>> org.joda.time.convert.ConverterManager.getInstantConverter : $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>()
org.joda.time.convert.ConverterManager.getInstantConverter : $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> org.joda.time.convert.ConverterManager.getInstantConverter : $r6 = virtualinvoke $r4.<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>($r5)
org.joda.time.convert.ConverterManager.getInstantConverter : $r6 = virtualinvoke $r4.<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>($r5) >>>>>>>> org.joda.time.convert.ConverterSet.select : r2 = r0.<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet$Entry[] iSelectEntries>
org.joda.time.convert.ConverterSet.select : r2 = r0.<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet$Entry[] iSelectEntries> >>>>>>>> org.joda.time.convert.ConverterSet.select : i0 = lengthof r2
org.joda.time.convert.ConverterSet.select : i0 = lengthof r2 >>>>>>>> org.joda.time.convert.ConverterSet.select : if r1 != null
org.joda.time.convert.ConverterSet.select : if r1 != null >>>>>>>> org.joda.time.convert.ConverterSet.select : $i5 = virtualinvoke r1.<java.lang.Object: int hashCode()>()
org.joda.time.convert.ConverterSet.select : $i5 = virtualinvoke r1.<java.lang.Object: int hashCode()>() >>>>>>>> org.joda.time.convert.ConverterSet.select : $i6 = i0 - 1
org.joda.time.convert.ConverterSet.select : $i6 = i0 - 1 >>>>>>>> org.joda.time.convert.ConverterSet.select : $i4 = $i5 & $i6
org.joda.time.convert.ConverterSet.select : $i4 = $i5 & $i6 >>>>>>>> org.joda.time.convert.ConverterSet.select : i1 = $i4
org.joda.time.convert.ConverterSet.select : i1 = $i4 >>>>>>>> org.joda.time.convert.ConverterSet.select : $r6 = r2[i1]
org.joda.time.convert.ConverterSet.select : $r6 = r2[i1] >>>>>>>> org.joda.time.convert.ConverterSet.select : r3 = $r6
org.joda.time.convert.ConverterSet.select : r3 = $r6 >>>>>>>> org.joda.time.convert.ConverterSet.select : if $r6 == null
org.joda.time.convert.ConverterSet.select : if $r6 == null >>>>>>>> org.joda.time.convert.ConverterSet.select : $r7 = r3.<org.joda.time.convert.ConverterSet$Entry: java.lang.Class iType>
org.joda.time.convert.ConverterSet.select : $r7 = r3.<org.joda.time.convert.ConverterSet$Entry: java.lang.Class iType> >>>>>>>> org.joda.time.convert.ConverterSet.select : if $r7 != r1
org.joda.time.convert.ConverterSet.select : if $r7 != r1 >>>>>>>> org.joda.time.convert.ConverterSet.select : $r8 = r3.<org.joda.time.convert.ConverterSet$Entry: org.joda.time.convert.Converter iConverter>
org.joda.time.convert.ConverterSet.select : $r8 = r3.<org.joda.time.convert.ConverterSet$Entry: org.joda.time.convert.Converter iConverter> >>>>>>>> org.joda.time.convert.ConverterSet.select : return $r8
org.joda.time.convert.ConverterSet.select : return $r8 >>>>>>>> org.joda.time.convert.ConverterManager.getInstantConverter : r2 = (org.joda.time.convert.InstantConverter) $r6
org.joda.time.convert.ConverterManager.getInstantConverter : r2 = (org.joda.time.convert.InstantConverter) $r6 >>>>>>>> org.joda.time.convert.ConverterManager.getInstantConverter : if r2 == null
org.joda.time.convert.ConverterManager.getInstantConverter : if r2 == null >>>>>>>> org.joda.time.convert.ConverterManager.getInstantConverter : return r2
org.joda.time.convert.ConverterManager.getInstantConverter : return r2 >>>>>>>> org.joda.time.convert.AbstractConverter.getChronology : $r3 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>(r2)
org.joda.time.convert.AbstractConverter.getChronology : $r3 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>(r2) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if r0 != null
org.joda.time.chrono.ISOChronology.getInstance : if r0 != null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0)
org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : i0 = $i1 & 63
org.joda.time.chrono.ISOChronology.getInstance : i0 = $i1 & 63 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache>
org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache> >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : r1 = $r5[i0]
org.joda.time.chrono.ISOChronology.getInstance : r1 = $r5[i0] >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if r1 == null
org.joda.time.chrono.ISOChronology.getInstance : if r1 == null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r6 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.ISOChronology.getInstance : $r6 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2
org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null
org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.GregorianChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.BasicChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getBase : return $r1
org.joda.time.chrono.AssembledChronology.getBase : return $r1 >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : r1 = $r2
org.joda.time.chrono.BasicChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : if $r2 == null
org.joda.time.chrono.BasicChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>
org.joda.time.chrono.BasicChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC> >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : return $r4
org.joda.time.chrono.BasicChronology.getZone : return $r4 >>>>>>>> org.joda.time.chrono.GregorianChronology.getZone : return $r1
org.joda.time.chrono.GregorianChronology.getZone : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : return $r3
org.joda.time.chrono.AssembledChronology.getZone : return $r3 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0
org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : return r1
org.joda.time.chrono.ISOChronology.getInstance : return r1 >>>>>>>> org.joda.time.convert.AbstractConverter.getChronology : return $r3
org.joda.time.convert.AbstractConverter.getChronology : return $r3 >>>>>>>> org.joda.time.base.BaseDateTime.checkChronology : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.base.BaseDateTime.checkChronology : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DateTimeUtils.getChronology : if r0 != null
org.joda.time.DateTimeUtils.getChronology : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getChronology : return r0
org.joda.time.DateTimeUtils.getChronology : return r0 >>>>>>>> org.joda.time.base.BaseDateTime.checkChronology : return $r2
org.joda.time.base.BaseDateTime.checkChronology : return $r2 >>>>>>>> org.joda.time.convert.StringConverter.getInstantMillis : r3 = (java.lang.String) r1
org.joda.time.convert.StringConverter.getInstantMillis : r3 = (java.lang.String) r1 >>>>>>>> org.joda.time.convert.StringConverter.getInstantMillis : r4 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTimeParser()>()
org.joda.time.convert.StringConverter.getInstantMillis : r4 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTimeParser()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.dateTimeParser : $r0 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dtp>
org.joda.time.format.ISODateTimeFormat.dateTimeParser : $r0 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dtp> >>>>>>>> org.joda.time.format.ISODateTimeFormat.dateTimeParser : if $r0 != null
org.joda.time.format.ISODateTimeFormat.dateTimeParser : if $r0 != null >>>>>>>> org.joda.time.format.ISODateTimeFormat.dateTimeParser : $r15 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dtp>
org.joda.time.format.ISODateTimeFormat.dateTimeParser : $r15 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dtp> >>>>>>>> org.joda.time.format.ISODateTimeFormat.dateTimeParser : return $r15
org.joda.time.format.ISODateTimeFormat.dateTimeParser : return $r15 >>>>>>>> org.joda.time.convert.StringConverter.getInstantMillis : $r5 = virtualinvoke r4.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)>(r2)
org.joda.time.convert.StringConverter.getInstantMillis : $r5 = virtualinvoke r4.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)>(r2) >>>>>>>> org.joda.time.format.DateTimeFormatter.withChronology : $r2 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>
org.joda.time.format.DateTimeFormatter.withChronology : $r2 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono> >>>>>>>> org.joda.time.format.DateTimeFormatter.withChronology : if $r2 != r1
org.joda.time.format.DateTimeFormatter.withChronology : if $r2 != r1 >>>>>>>> org.joda.time.format.DateTimeFormatter.withChronology : $r3 = new org.joda.time.format.DateTimeFormatter
org.joda.time.format.DateTimeFormatter.withChronology : $r3 = new org.joda.time.format.DateTimeFormatter >>>>>>>> org.joda.time.format.DateTimeFormatter.withChronology : $r4 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter iPrinter>
org.joda.time.format.DateTimeFormatter.withChronology : $r4 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter iPrinter> >>>>>>>> org.joda.time.format.DateTimeFormatter.withChronology : $r5 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser iParser>
org.joda.time.format.DateTimeFormatter.withChronology : $r5 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser iParser> >>>>>>>> org.joda.time.format.DateTimeFormatter.withChronology : $r6 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>
org.joda.time.format.DateTimeFormatter.withChronology : $r6 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale> >>>>>>>> org.joda.time.format.DateTimeFormatter.withChronology : $z0 = r0.<org.joda.time.format.DateTimeFormatter: boolean iOffsetParsed>
org.joda.time.format.DateTimeFormatter.withChronology : $z0 = r0.<org.joda.time.format.DateTimeFormatter: boolean iOffsetParsed> >>>>>>>> org.joda.time.format.DateTimeFormatter.withChronology : $r7 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>
org.joda.time.format.DateTimeFormatter.withChronology : $r7 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.format.DateTimeFormatter.withChronology : $r8 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear>
org.joda.time.format.DateTimeFormatter.withChronology : $r8 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear> >>>>>>>> org.joda.time.format.DateTimeFormatter.withChronology : $i0 = r0.<org.joda.time.format.DateTimeFormatter: int iDefaultYear>
org.joda.time.format.DateTimeFormatter.withChronology : $i0 = r0.<org.joda.time.format.DateTimeFormatter: int iDefaultYear> >>>>>>>> org.joda.time.format.DateTimeFormatter.withChronology : specialinvoke $r3.<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser,java.util.Locale,boolean,org.joda.time.Chronology,org.joda.time.DateTimeZone,java.lang.Integer,int)>($r4, $r5, $r6, $z0, r1, $r7, $r8, $i0)
org.joda.time.format.DateTimeFormatter.withChronology : specialinvoke $r3.<org.joda.time.format.DateTimeFormatter: void <init>(org.joda.time.format.DateTimePrinter,org.joda.time.format.DateTimeParser,java.util.Locale,boolean,org.joda.time.Chronology,org.joda.time.DateTimeZone,java.lang.Integer,int)>($r4, $r5, $r6, $z0, r1, $r7, $r8, $i0) >>>>>>>> org.joda.time.format.DateTimeFormatter.withChronology : return $r3
org.joda.time.format.DateTimeFormatter.withChronology : return $r3 >>>>>>>> org.joda.time.convert.StringConverter.getInstantMillis : $l0 = virtualinvoke $r5.<org.joda.time.format.DateTimeFormatter: long parseMillis(java.lang.String)>(r3)
org.joda.time.convert.StringConverter.getInstantMillis : $l0 = virtualinvoke $r5.<org.joda.time.format.DateTimeFormatter: long parseMillis(java.lang.String)>(r3) >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : r2 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser requireParser()>()
org.joda.time.format.DateTimeFormatter.parseMillis : r2 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser requireParser()>() >>>>>>>> org.joda.time.format.DateTimeFormatter.requireParser : r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser iParser>
org.joda.time.format.DateTimeFormatter.requireParser : r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser iParser> >>>>>>>> org.joda.time.format.DateTimeFormatter.requireParser : if r1 != null
org.joda.time.format.DateTimeFormatter.requireParser : if r1 != null >>>>>>>> org.joda.time.format.DateTimeFormatter.requireParser : return r1
org.joda.time.format.DateTimeFormatter.requireParser : return r1 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : $r5 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>
org.joda.time.format.DateTimeFormatter.parseMillis : $r5 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono> >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : r3 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>($r5)
org.joda.time.format.DateTimeFormatter.parseMillis : r3 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>($r5) >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.format.DateTimeFormatter.selectChronology : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : $r3 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>
org.joda.time.format.DateTimeFormatter.selectChronology : $r3 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono> >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : if $r3 == null
org.joda.time.format.DateTimeFormatter.selectChronology : if $r3 == null >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : r2 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>
org.joda.time.format.DateTimeFormatter.selectChronology : r2 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono> >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : $r4 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>
org.joda.time.format.DateTimeFormatter.selectChronology : $r4 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : if $r4 == null
org.joda.time.format.DateTimeFormatter.selectChronology : if $r4 == null >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : return r2
org.joda.time.format.DateTimeFormatter.selectChronology : return r2 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : $r6 = new org.joda.time.format.DateTimeParserBucket
org.joda.time.format.DateTimeFormatter.parseMillis : $r6 = new org.joda.time.format.DateTimeParserBucket >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : $r7 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>
org.joda.time.format.DateTimeFormatter.parseMillis : $r7 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale> >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : $r8 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear>
org.joda.time.format.DateTimeFormatter.parseMillis : $r8 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear> >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : $i1 = r0.<org.joda.time.format.DateTimeFormatter: int iDefaultYear>
org.joda.time.format.DateTimeFormatter.parseMillis : $i1 = r0.<org.joda.time.format.DateTimeFormatter: int iDefaultYear> >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : specialinvoke $r6.<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>(0L, r3, $r7, $r8, $i1)
org.joda.time.format.DateTimeFormatter.parseMillis : specialinvoke $r6.<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>(0L, r3, $r7, $r8, $i1) >>>>>>>> org.joda.time.chrono.ISOChronology.withUTC : $r1 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC>
org.joda.time.chrono.ISOChronology.withUTC : $r1 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.ISOChronology.withUTC : return $r1
org.joda.time.chrono.ISOChronology.withUTC : return $r1 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : r4 = $r6
org.joda.time.format.DateTimeFormatter.parseMillis : r4 = $r6 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : i0 = interfaceinvoke r2.<org.joda.time.format.DateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>(r4, r1, 0)
org.joda.time.format.DateTimeFormatter.parseMillis : i0 = interfaceinvoke r2.<org.joda.time.format.DateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>(r4, r1, 0) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: org.joda.time.format.DateTimeParser[] iParsers>
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: org.joda.time.format.DateTimeParser[] iParsers> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i1 = lengthof r3
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i1 = lengthof r3 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : r4 = virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: java.lang.Object saveState()>()
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : r4 = virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: java.lang.Object saveState()>() >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveState : $r2 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState>
org.joda.time.format.DateTimeParserBucket.saveState : $r2 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState> >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveState : if $r2 != null
org.joda.time.format.DateTimeParserBucket.saveState : if $r2 != null >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveState : $r1 = new org.joda.time.format.DateTimeParserBucket$SavedState
org.joda.time.format.DateTimeParserBucket.saveState : $r1 = new org.joda.time.format.DateTimeParserBucket$SavedState >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveState : specialinvoke $r1.<org.joda.time.format.DateTimeParserBucket$SavedState: void <init>(org.joda.time.format.DateTimeParserBucket)>(r0)
org.joda.time.format.DateTimeParserBucket.saveState : specialinvoke $r1.<org.joda.time.format.DateTimeParserBucket$SavedState: void <init>(org.joda.time.format.DateTimeParserBucket)>(r0) >>>>>>>> org.joda.time.format.DateTimeParserBucket.access$000 : $r1 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone>
org.joda.time.format.DateTimeParserBucket.access$000 : $r1 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.format.DateTimeParserBucket.access$000 : return $r1
org.joda.time.format.DateTimeParserBucket.access$000 : return $r1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.access$100 : $r1 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset>
org.joda.time.format.DateTimeParserBucket.access$100 : $r1 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset> >>>>>>>> org.joda.time.format.DateTimeParserBucket.access$100 : return $r1
org.joda.time.format.DateTimeParserBucket.access$100 : return $r1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.access$200 : $r1 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields>
org.joda.time.format.DateTimeParserBucket.access$200 : $r1 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields> >>>>>>>> org.joda.time.format.DateTimeParserBucket.access$200 : return $r1
org.joda.time.format.DateTimeParserBucket.access$200 : return $r1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.access$300 : $i0 = r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount>
org.joda.time.format.DateTimeParserBucket.access$300 : $i0 = r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount> >>>>>>>> org.joda.time.format.DateTimeParserBucket.access$300 : return $i0
org.joda.time.format.DateTimeParserBucket.access$300 : return $i0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveState : r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState> = $r1
org.joda.time.format.DateTimeParserBucket.saveState : r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState> = $r1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveState : $r3 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState>
org.joda.time.format.DateTimeParserBucket.saveState : $r3 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState> >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveState : return $r3
org.joda.time.format.DateTimeParserBucket.saveState : return $r3 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : z0 = 0
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : z0 = 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i2 = i0
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i2 = i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : r5 = null
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : r5 = null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i3 = i0
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i3 = i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i4 = 0
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i4 = 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if i4 >= i1
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if i4 >= i1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : r6 = r3[i4]
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : r6 = r3[i4] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if r6 != null
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if r6 != null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i5 = interfaceinvoke r6.<org.joda.time.format.DateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>(r1, r2, i0)
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i5 = interfaceinvoke r6.<org.joda.time.format.DateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>(r1, r2, i0) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: org.joda.time.format.DateTimeParser[] iParsers>
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: org.joda.time.format.DateTimeParser[] iParsers> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : if r3 != null
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : if r3 != null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : i1 = lengthof r3
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : i1 = lengthof r3 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : i2 = 0
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : i2 = 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : if i2 >= i1
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : if i2 >= i1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : if i0 < 0
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : if i0 < 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : $r5 = r3[i2]
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : $r5 = r3[i2] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : i0 = interfaceinvoke $r5.<org.joda.time.format.DateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>(r1, r2, i0)
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : i0 = interfaceinvoke $r5.<org.joda.time.format.DateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>(r1, r2, i0) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : $i3 = virtualinvoke r2.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : $i3 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : if i0 < $i3
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : if i0 < $i3 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : c1 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i0)
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : c1 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i0) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : c2 = r0.<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: char iValue>
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : c2 = r0.<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: char iValue> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : if c1 == c2
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : if c1 == c2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : c5 = staticinvoke <java.lang.Character: char toUpperCase(char)>(c1)
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : c5 = staticinvoke <java.lang.Character: char toUpperCase(char)>(c1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : c6 = staticinvoke <java.lang.Character: char toUpperCase(char)>(c2)
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : c6 = staticinvoke <java.lang.Character: char toUpperCase(char)>(c2) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : if c5 == c6
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : if c5 == c6 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : c7 = staticinvoke <java.lang.Character: char toLowerCase(char)>(c5)
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : c7 = staticinvoke <java.lang.Character: char toLowerCase(char)>(c5) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : c8 = staticinvoke <java.lang.Character: char toLowerCase(char)>(c6)
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : c8 = staticinvoke <java.lang.Character: char toLowerCase(char)>(c6) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : if c7 == c8
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : if c7 == c8 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : $i9 = i0 ^ -1
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : $i9 = i0 ^ -1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : return $i9
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : return $i9 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : i2 = i2 + 1
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : i2 = i2 + 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : goto [?= (branch)]
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : goto [?= (branch)] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : return i0
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : return i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if i5 < i0
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if i5 < i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if i5 >= 0
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if i5 >= 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i9 = i5 ^ -1
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i9 = i5 ^ -1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if i9 <= i3
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if i9 <= i3 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: boolean restoreState(java.lang.Object)>(r4)
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: boolean restoreState(java.lang.Object)>(r4) >>>>>>>> org.joda.time.format.DateTimeParserBucket.restoreState : $z0 = r1 instanceof org.joda.time.format.DateTimeParserBucket$SavedState
org.joda.time.format.DateTimeParserBucket.restoreState : $z0 = r1 instanceof org.joda.time.format.DateTimeParserBucket$SavedState >>>>>>>> org.joda.time.format.DateTimeParserBucket.restoreState : if $z0 == 0
org.joda.time.format.DateTimeParserBucket.restoreState : if $z0 == 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.restoreState : $r2 = (org.joda.time.format.DateTimeParserBucket$SavedState) r1
org.joda.time.format.DateTimeParserBucket.restoreState : $r2 = (org.joda.time.format.DateTimeParserBucket$SavedState) r1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.restoreState : $z1 = virtualinvoke $r2.<org.joda.time.format.DateTimeParserBucket$SavedState: boolean restoreState(org.joda.time.format.DateTimeParserBucket)>(r0)
org.joda.time.format.DateTimeParserBucket.restoreState : $z1 = virtualinvoke $r2.<org.joda.time.format.DateTimeParserBucket$SavedState: boolean restoreState(org.joda.time.format.DateTimeParserBucket)>(r0) >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : $r2 = r0.<org.joda.time.format.DateTimeParserBucket$SavedState: org.joda.time.format.DateTimeParserBucket this$0>
org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : $r2 = r0.<org.joda.time.format.DateTimeParserBucket$SavedState: org.joda.time.format.DateTimeParserBucket this$0> >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : if r1 == $r2
org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : if r1 == $r2 >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : $r3 = r0.<org.joda.time.format.DateTimeParserBucket$SavedState: org.joda.time.DateTimeZone iZone>
org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : $r3 = r0.<org.joda.time.format.DateTimeParserBucket$SavedState: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : staticinvoke <org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone access$002(org.joda.time.format.DateTimeParserBucket,org.joda.time.DateTimeZone)>(r1, $r3)
org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : staticinvoke <org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone access$002(org.joda.time.format.DateTimeParserBucket,org.joda.time.DateTimeZone)>(r1, $r3) >>>>>>>> org.joda.time.format.DateTimeParserBucket.access$002 : r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone> = r1
org.joda.time.format.DateTimeParserBucket.access$002 : r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone> = r1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.access$002 : return r1
org.joda.time.format.DateTimeParserBucket.access$002 : return r1 >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : $r5 = r0.<org.joda.time.format.DateTimeParserBucket$SavedState: java.lang.Integer iOffset>
org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : $r5 = r0.<org.joda.time.format.DateTimeParserBucket$SavedState: java.lang.Integer iOffset> >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : staticinvoke <org.joda.time.format.DateTimeParserBucket: java.lang.Integer access$102(org.joda.time.format.DateTimeParserBucket,java.lang.Integer)>(r1, $r5)
org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : staticinvoke <org.joda.time.format.DateTimeParserBucket: java.lang.Integer access$102(org.joda.time.format.DateTimeParserBucket,java.lang.Integer)>(r1, $r5) >>>>>>>> org.joda.time.format.DateTimeParserBucket.access$102 : r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset> = r1
org.joda.time.format.DateTimeParserBucket.access$102 : r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset> = r1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.access$102 : return r1
org.joda.time.format.DateTimeParserBucket.access$102 : return r1 >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : $r7 = r0.<org.joda.time.format.DateTimeParserBucket$SavedState: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields>
org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : $r7 = r0.<org.joda.time.format.DateTimeParserBucket$SavedState: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields> >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : staticinvoke <org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] access$202(org.joda.time.format.DateTimeParserBucket,org.joda.time.format.DateTimeParserBucket$SavedField[])>(r1, $r7)
org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : staticinvoke <org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] access$202(org.joda.time.format.DateTimeParserBucket,org.joda.time.format.DateTimeParserBucket$SavedField[])>(r1, $r7) >>>>>>>> org.joda.time.format.DateTimeParserBucket.access$202 : r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields> = r1
org.joda.time.format.DateTimeParserBucket.access$202 : r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields> = r1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.access$202 : return r1
org.joda.time.format.DateTimeParserBucket.access$202 : return r1 >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : $i0 = r0.<org.joda.time.format.DateTimeParserBucket$SavedState: int iSavedFieldsCount>
org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : $i0 = r0.<org.joda.time.format.DateTimeParserBucket$SavedState: int iSavedFieldsCount> >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : $i1 = staticinvoke <org.joda.time.format.DateTimeParserBucket: int access$300(org.joda.time.format.DateTimeParserBucket)>(r1)
org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : $i1 = staticinvoke <org.joda.time.format.DateTimeParserBucket: int access$300(org.joda.time.format.DateTimeParserBucket)>(r1) >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : if $i0 >= $i1
org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : if $i0 >= $i1 >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : $i2 = r0.<org.joda.time.format.DateTimeParserBucket$SavedState: int iSavedFieldsCount>
org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : $i2 = r0.<org.joda.time.format.DateTimeParserBucket$SavedState: int iSavedFieldsCount> >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : staticinvoke <org.joda.time.format.DateTimeParserBucket: int access$302(org.joda.time.format.DateTimeParserBucket,int)>(r1, $i2)
org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : staticinvoke <org.joda.time.format.DateTimeParserBucket: int access$302(org.joda.time.format.DateTimeParserBucket,int)>(r1, $i2) >>>>>>>> org.joda.time.format.DateTimeParserBucket.access$302 : r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount> = i0
org.joda.time.format.DateTimeParserBucket.access$302 : r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount> = i0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.access$302 : return i0
org.joda.time.format.DateTimeParserBucket.access$302 : return i0 >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : return 1
org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : return 1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.restoreState : if $z1 == 0
org.joda.time.format.DateTimeParserBucket.restoreState : if $z1 == 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.restoreState : r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState> = r1
org.joda.time.format.DateTimeParserBucket.restoreState : r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState> = r1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.restoreState : return 1
org.joda.time.format.DateTimeParserBucket.restoreState : return 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i4 = i4 + 1
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i4 = i4 + 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : goto [?= (branch)]
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : goto [?= (branch)] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i5 = r0.<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int iMaxParsedDigits>
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i5 = r0.<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int iMaxParsedDigits> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i6 = virtualinvoke r2.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i6 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i7 = $i6 - i0
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i7 = $i6 - i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i1 = staticinvoke <java.lang.Math: int min(int,int)>($i5, $i7)
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i1 = staticinvoke <java.lang.Math: int min(int,int)>($i5, $i7) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : z0 = 0
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : z0 = 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i2 = 0
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i2 = 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if i2 >= i1
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if i2 >= i1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i8 = i0 + i2
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i8 = i0 + i2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : c3 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i8)
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : c3 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i8) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if i2 != 0
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if i2 != 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if c3 == 45
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if c3 == 45 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if c3 != 43
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if c3 != 43 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if c3 < 48
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if c3 < 48 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if c3 <= 57
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if c3 <= 57 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i2 = i2 + 1
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i2 = i2 + 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : goto [?= (branch)]
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : goto [?= (branch)] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if i2 < 9
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if i2 < 9 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i4 = i0
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i4 = i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if z0 == 0
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if z0 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i21 = i4 + 1
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i21 = i4 + 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $c22 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i4)
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $c22 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i4) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i20 = $c22 - 48
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i20 = $c22 - 48 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : goto [?= i19 = i0 + i2]
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : goto [?= i19 = i0 + i2] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i19 = i0 + i2
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i19 = i0 + i2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if i21 >= i19
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if i21 >= i19 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i24 = i20 << 3
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i24 = i20 << 3 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i25 = i20 << 1
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i25 = i20 << 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i26 = $i24 + $i25
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i26 = $i24 + $i25 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i27 = i21
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i27 = i21 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i21 = i21 + 1
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i21 = i21 + 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $c28 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i27)
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $c28 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i27) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i29 = $i26 + $c28
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i29 = $i26 + $c28 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i20 = $i29 - 48
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i20 = $i29 - 48 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $r6 = r0.<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: org.joda.time.DateTimeFieldType iFieldType>
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $r6 = r0.<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: org.joda.time.DateTimeFieldType iFieldType> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,int)>($r6, i20)
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,int)>($r6, i20) >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : $r2 = new org.joda.time.format.DateTimeParserBucket$SavedField
org.joda.time.format.DateTimeParserBucket.saveField : $r2 = new org.joda.time.format.DateTimeParserBucket$SavedField >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : $r3 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.Chronology iChrono>
org.joda.time.format.DateTimeParserBucket.saveField : $r3 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.Chronology iChrono> >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : $r4 = virtualinvoke r1.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r3)
org.joda.time.format.DateTimeParserBucket.saveField : $r4 = virtualinvoke r1.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r3) >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $b0 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: byte iOrdinal>
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $b0 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: byte iOrdinal> >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : tableswitch($b0) {     case 1:
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : tableswitch($b0) {     case 1: >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r7 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r7 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.year : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear>
org.joda.time.chrono.AssembledChronology.year : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.year : return $r1
org.joda.time.chrono.AssembledChronology.year : return $r1 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r7
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r7 >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : specialinvoke $r2.<org.joda.time.format.DateTimeParserBucket$SavedField: void <init>(org.joda.time.DateTimeField,int)>($r4, i0)
org.joda.time.format.DateTimeParserBucket.saveField : specialinvoke $r2.<org.joda.time.format.DateTimeParserBucket$SavedField: void <init>(org.joda.time.DateTimeField,int)>($r4, i0) >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : specialinvoke r0.<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.format.DateTimeParserBucket$SavedField)>($r2)
org.joda.time.format.DateTimeParserBucket.saveField : specialinvoke r0.<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.format.DateTimeParserBucket$SavedField)>($r2) >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : r2 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields>
org.joda.time.format.DateTimeParserBucket.saveField : r2 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields> >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : i0 = r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount>
org.joda.time.format.DateTimeParserBucket.saveField : i0 = r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount> >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : $i1 = lengthof r2
org.joda.time.format.DateTimeParserBucket.saveField : $i1 = lengthof r2 >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : if i0 == $i1
org.joda.time.format.DateTimeParserBucket.saveField : if i0 == $i1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : $z0 = r0.<org.joda.time.format.DateTimeParserBucket: boolean iSavedFieldsShared>
org.joda.time.format.DateTimeParserBucket.saveField : $z0 = r0.<org.joda.time.format.DateTimeParserBucket: boolean iSavedFieldsShared> >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : if $z0 == 0
org.joda.time.format.DateTimeParserBucket.saveField : if $z0 == 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState> = null
org.joda.time.format.DateTimeParserBucket.saveField : r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState> = null >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : r2[i0] = r1
org.joda.time.format.DateTimeParserBucket.saveField : r2[i0] = r1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : $i4 = i0 + 1
org.joda.time.format.DateTimeParserBucket.saveField : $i4 = i0 + 1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount> = $i4
org.joda.time.format.DateTimeParserBucket.saveField : r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount> = $i4 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : return i19
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : return i19 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : $i10 = i0 + 1
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : $i10 = i0 + 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : return $i10
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : return $i10 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r9 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r9 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.monthOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear>
org.joda.time.chrono.AssembledChronology.monthOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.monthOfYear : return $r1
org.joda.time.chrono.AssembledChronology.monthOfYear : return $r1 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r9
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r9 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r10 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r10 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfMonth : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth>
org.joda.time.chrono.AssembledChronology.dayOfMonth : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth> >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfMonth : return $r1
org.joda.time.chrono.AssembledChronology.dayOfMonth : return $r1 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r10
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r10 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if i5 <= i2
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if i5 <= i2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : $i6 = virtualinvoke r2.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : $i6 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if i5 >= $i6
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if i5 >= $i6 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : $i7 = i4 + 1
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : $i7 = i4 + 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if $i7 >= i1
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if $i7 >= i1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : $i8 = i4 + 1
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : $i8 = i4 + 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : $r7 = r3[$i8]
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : $r7 = r3[$i8] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if $r7 != null
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if $r7 != null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : return i5
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : return i5 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i2 = i5
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i2 = i5 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : r5 = virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: java.lang.Object saveState()>()
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : r5 = virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: java.lang.Object saveState()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : goto [?= virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: boolean restoreState(java.lang.Object)>(r4)]
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : goto [?= virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: boolean restoreState(java.lang.Object)>(r4)] >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : staticinvoke <org.joda.time.format.DateTimeParserBucket: boolean access$402(org.joda.time.format.DateTimeParserBucket,boolean)>(r1, 1)
org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : staticinvoke <org.joda.time.format.DateTimeParserBucket: boolean access$402(org.joda.time.format.DateTimeParserBucket,boolean)>(r1, 1) >>>>>>>> org.joda.time.format.DateTimeParserBucket.access$402 : r0.<org.joda.time.format.DateTimeParserBucket: boolean iSavedFieldsShared> = z0
org.joda.time.format.DateTimeParserBucket.access$402 : r0.<org.joda.time.format.DateTimeParserBucket: boolean iSavedFieldsShared> = z0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.access$402 : return z0
org.joda.time.format.DateTimeParserBucket.access$402 : return z0 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r12 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField weekyear()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r12 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField weekyear()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.weekyear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyear>
org.joda.time.chrono.AssembledChronology.weekyear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyear> >>>>>>>> org.joda.time.chrono.AssembledChronology.weekyear : return $r1
org.joda.time.chrono.AssembledChronology.weekyear : return $r1 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r12
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r12 >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : $i2 = lengthof r2
org.joda.time.format.DateTimeParserBucket.saveField : $i2 = lengthof r2 >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : if i0 != $i2
org.joda.time.format.DateTimeParserBucket.saveField : if i0 != $i2 >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : $i3 = lengthof r2
org.joda.time.format.DateTimeParserBucket.saveField : $i3 = lengthof r2 >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : r3 = newarray (org.joda.time.format.DateTimeParserBucket$SavedField)[$i3]
org.joda.time.format.DateTimeParserBucket.saveField : r3 = newarray (org.joda.time.format.DateTimeParserBucket$SavedField)[$i3] >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r3, 0, i0)
org.joda.time.format.DateTimeParserBucket.saveField : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r3, 0, i0) >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : r2 = r3
org.joda.time.format.DateTimeParserBucket.saveField : r2 = r3 >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields> = r3
org.joda.time.format.DateTimeParserBucket.saveField : r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields> = r3 >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : r0.<org.joda.time.format.DateTimeParserBucket: boolean iSavedFieldsShared> = 0
org.joda.time.format.DateTimeParserBucket.saveField : r0.<org.joda.time.format.DateTimeParserBucket: boolean iSavedFieldsShared> = 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.parseInto : $r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: java.lang.String iValue>
org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.parseInto : $r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: java.lang.String iValue> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.parseInto : $r4 = r0.<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: java.lang.String iValue>
org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.parseInto : $r4 = r0.<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: java.lang.String iValue> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.parseInto : $i1 = virtualinvoke $r4.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.parseInto : $i1 = virtualinvoke $r4.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.parseInto : $z0 = virtualinvoke r2.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, i0, $r3, 0, $i1)
org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.parseInto : $z0 = virtualinvoke r2.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, i0, $r3, 0, $i1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.parseInto : if $z0 == 0
org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.parseInto : if $z0 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.parseInto : $i4 = i0 ^ -1
org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.parseInto : $i4 = i0 ^ -1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.parseInto : return $i4
org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.parseInto : return $i4 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i3 = i9
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i3 = i9 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r8 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfYear()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r8 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfYear()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfYear>
org.joda.time.chrono.AssembledChronology.dayOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfYear : return $r1
org.joda.time.chrono.AssembledChronology.dayOfYear : return $r1 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r8
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r8 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if i2 > i0
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if i2 > i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if r5 == null
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if r5 == null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: boolean restoreState(java.lang.Object)>(r5)
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: boolean restoreState(java.lang.Object)>(r5) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : return i2
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : return i2 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r19 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r19 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.hourOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay>
org.joda.time.chrono.AssembledChronology.hourOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.hourOfDay : return $r1
org.joda.time.chrono.AssembledChronology.hourOfDay : return $r1 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r19
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r19 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r21 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r21 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.minuteOfHour : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfHour>
org.joda.time.chrono.AssembledChronology.minuteOfHour : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfHour> >>>>>>>> org.joda.time.chrono.AssembledChronology.minuteOfHour : return $r1
org.joda.time.chrono.AssembledChronology.minuteOfHour : return $r1 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r21
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r21 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r23 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r23 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.secondOfMinute : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfMinute>
org.joda.time.chrono.AssembledChronology.secondOfMinute : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfMinute> >>>>>>>> org.joda.time.chrono.AssembledChronology.secondOfMinute : return $r1
org.joda.time.chrono.AssembledChronology.secondOfMinute : return $r1 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r23
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r23 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : $i4 = i0 ^ -1
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : $i4 = i0 ^ -1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : return $i4
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : return $i4 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if i2 != i0
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if i2 != i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if z0 == 0
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if z0 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : $i10 = i3 ^ -1
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : $i10 = i3 ^ -1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : return $i10
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : return $i10 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : return i0
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : return i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i9 = virtualinvoke r2.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i9 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i1 = $i9 - i0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i1 = $i9 - i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetParseText>
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetParseText> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if $r3 == null
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if $r3 == null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $r4 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetParseText>
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $r4 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetParseText> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i10 = virtualinvoke $r4.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i10 = virtualinvoke $r4.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if $i10 != 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if $i10 != 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $r6 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetParseText>
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $r6 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetParseText> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $r7 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetParseText>
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $r7 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetParseText> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i11 = virtualinvoke $r7.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i11 = virtualinvoke $r7.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $z1 = virtualinvoke r2.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, i0, $r6, 0, $i11)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $z1 = virtualinvoke r2.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, i0, $r6, 0, $i11) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if $z1 == 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if $z1 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i1 > 1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i1 > 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i14 = i0 ^ -1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i14 = i0 ^ -1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : return $i14
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : return $i14 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : if i0 < 0
org.joda.time.format.DateTimeFormatter.parseMillis : if i0 < 0 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : $i2 = virtualinvoke r1.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatter.parseMillis : $i2 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : if i0 < $i2
org.joda.time.format.DateTimeFormatter.parseMillis : if i0 < $i2 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : $l3 = virtualinvoke r4.<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.String)>(1, r1)
org.joda.time.format.DateTimeFormatter.parseMillis : $l3 = virtualinvoke r4.<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.String)>(1, r1) >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : r2 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields>
org.joda.time.format.DateTimeParserBucket.computeMillis : r2 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields> >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : i0 = r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount>
org.joda.time.format.DateTimeParserBucket.computeMillis : i0 = r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount> >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $z1 = r0.<org.joda.time.format.DateTimeParserBucket: boolean iSavedFieldsShared>
org.joda.time.format.DateTimeParserBucket.computeMillis : $z1 = r0.<org.joda.time.format.DateTimeParserBucket: boolean iSavedFieldsShared> >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : if $z1 == 0
org.joda.time.format.DateTimeParserBucket.computeMillis : if $z1 == 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : staticinvoke <org.joda.time.format.DateTimeParserBucket: void sort(org.joda.time.format.DateTimeParserBucket$SavedField[],int)>(r2, i0)
org.joda.time.format.DateTimeParserBucket.computeMillis : staticinvoke <org.joda.time.format.DateTimeParserBucket: void sort(org.joda.time.format.DateTimeParserBucket$SavedField[],int)>(r2, i0) >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : if i0 <= 10
org.joda.time.format.DateTimeParserBucket.sort : if i0 <= 10 >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : i1 = 0
org.joda.time.format.DateTimeParserBucket.sort : i1 = 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : if i1 >= i0
org.joda.time.format.DateTimeParserBucket.sort : if i1 >= i0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : i2 = i1
org.joda.time.format.DateTimeParserBucket.sort : i2 = i1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : if i2 <= 0
org.joda.time.format.DateTimeParserBucket.sort : if i2 <= 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : i1 = i1 + 1
org.joda.time.format.DateTimeParserBucket.sort : i1 = i1 + 1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : goto [?= (branch)]
org.joda.time.format.DateTimeParserBucket.sort : goto [?= (branch)] >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : $i3 = i2 - 1
org.joda.time.format.DateTimeParserBucket.sort : $i3 = i2 - 1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : $r2 = r0[$i3]
org.joda.time.format.DateTimeParserBucket.sort : $r2 = r0[$i3] >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : $r3 = r0[i2]
org.joda.time.format.DateTimeParserBucket.sort : $r3 = r0[i2] >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : $i4 = virtualinvoke $r2.<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>($r3)
org.joda.time.format.DateTimeParserBucket.sort : $i4 = virtualinvoke $r2.<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>($r3) >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedField.compareTo : r2 = r1.<org.joda.time.format.DateTimeParserBucket$SavedField: org.joda.time.DateTimeField iField>
org.joda.time.format.DateTimeParserBucket$SavedField.compareTo : r2 = r1.<org.joda.time.format.DateTimeParserBucket$SavedField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedField.compareTo : $r3 = r0.<org.joda.time.format.DateTimeParserBucket$SavedField: org.joda.time.DateTimeField iField>
org.joda.time.format.DateTimeParserBucket$SavedField.compareTo : $r3 = r0.<org.joda.time.format.DateTimeParserBucket$SavedField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedField.compareTo : $r4 = virtualinvoke $r3.<org.joda.time.DateTimeField: org.joda.time.DurationField getRangeDurationField()>()
org.joda.time.format.DateTimeParserBucket$SavedField.compareTo : $r4 = virtualinvoke $r3.<org.joda.time.DateTimeField: org.joda.time.DurationField getRangeDurationField()>() >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getRangeDurationField : return null
org.joda.time.chrono.BasicYearDateTimeField.getRangeDurationField : return null >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedField.compareTo : $r5 = virtualinvoke r2.<org.joda.time.DateTimeField: org.joda.time.DurationField getRangeDurationField()>()
org.joda.time.format.DateTimeParserBucket$SavedField.compareTo : $r5 = virtualinvoke r2.<org.joda.time.DateTimeField: org.joda.time.DurationField getRangeDurationField()>() >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getRangeDurationField : $r2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField years()>()
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getRangeDurationField : $r2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField years()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.years : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iYears>
org.joda.time.chrono.AssembledChronology.years : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iYears> >>>>>>>> org.joda.time.chrono.AssembledChronology.years : return $r1
org.joda.time.chrono.AssembledChronology.years : return $r1 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getRangeDurationField : return $r2
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getRangeDurationField : return $r2 >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedField.compareTo : i0 = staticinvoke <org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>($r4, $r5)
org.joda.time.format.DateTimeParserBucket$SavedField.compareTo : i0 = staticinvoke <org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>($r4, $r5) >>>>>>>> org.joda.time.format.DateTimeParserBucket.compareReverse : if r0 == null
org.joda.time.format.DateTimeParserBucket.compareReverse : if r0 == null >>>>>>>> org.joda.time.format.DateTimeParserBucket.compareReverse : if r1 == null
org.joda.time.format.DateTimeParserBucket.compareReverse : if r1 == null >>>>>>>> org.joda.time.format.DateTimeParserBucket.compareReverse : $z1 = virtualinvoke r1.<org.joda.time.DurationField: boolean isSupported()>()
org.joda.time.format.DateTimeParserBucket.compareReverse : $z1 = virtualinvoke r1.<org.joda.time.DurationField: boolean isSupported()>() >>>>>>>> org.joda.time.field.BaseDurationField.isSupported : return 1
org.joda.time.field.BaseDurationField.isSupported : return 1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.compareReverse : if $z1 != 0
org.joda.time.format.DateTimeParserBucket.compareReverse : if $z1 != 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.compareReverse : return -1
org.joda.time.format.DateTimeParserBucket.compareReverse : return -1 >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedField.compareTo : if i0 == 0
org.joda.time.format.DateTimeParserBucket$SavedField.compareTo : if i0 == 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedField.compareTo : return i0
org.joda.time.format.DateTimeParserBucket$SavedField.compareTo : return i0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : if $i4 <= 0
org.joda.time.format.DateTimeParserBucket.sort : if $i4 <= 0 >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.getRangeDurationField : $r2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField months()>()
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getRangeDurationField : $r2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField months()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.months : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMonths>
org.joda.time.chrono.AssembledChronology.months : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMonths> >>>>>>>> org.joda.time.chrono.AssembledChronology.months : return $r1
org.joda.time.chrono.AssembledChronology.months : return $r1 >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.getRangeDurationField : return $r2
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getRangeDurationField : return $r2 >>>>>>>> org.joda.time.format.DateTimeParserBucket.compareReverse : $z0 = virtualinvoke r0.<org.joda.time.DurationField: boolean isSupported()>()
org.joda.time.format.DateTimeParserBucket.compareReverse : $z0 = virtualinvoke r0.<org.joda.time.DurationField: boolean isSupported()>() >>>>>>>> org.joda.time.format.DateTimeParserBucket.compareReverse : if $z0 != 0
org.joda.time.format.DateTimeParserBucket.compareReverse : if $z0 != 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.compareReverse : $z2 = virtualinvoke r1.<org.joda.time.DurationField: boolean isSupported()>()
org.joda.time.format.DateTimeParserBucket.compareReverse : $z2 = virtualinvoke r1.<org.joda.time.DurationField: boolean isSupported()>() >>>>>>>> org.joda.time.format.DateTimeParserBucket.compareReverse : if $z2 != 0
org.joda.time.format.DateTimeParserBucket.compareReverse : if $z2 != 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.compareReverse : $i0 = virtualinvoke r0.<org.joda.time.DurationField: int compareTo(java.lang.Object)>(r1)
org.joda.time.format.DateTimeParserBucket.compareReverse : $i0 = virtualinvoke r0.<org.joda.time.DurationField: int compareTo(java.lang.Object)>(r1) >>>>>>>> org.joda.time.field.BaseDurationField.compareTo : $r2 = (org.joda.time.DurationField) r1
org.joda.time.field.BaseDurationField.compareTo : $r2 = (org.joda.time.DurationField) r1 >>>>>>>> org.joda.time.field.BaseDurationField.compareTo : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDurationField: int compareTo(org.joda.time.DurationField)>($r2)
org.joda.time.field.BaseDurationField.compareTo : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDurationField: int compareTo(org.joda.time.DurationField)>($r2) >>>>>>>> org.joda.time.field.BaseDurationField.compareTo : l0 = virtualinvoke r1.<org.joda.time.DurationField: long getUnitMillis()>()
org.joda.time.field.BaseDurationField.compareTo : l0 = virtualinvoke r1.<org.joda.time.DurationField: long getUnitMillis()>() >>>>>>>> org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getUnitMillis : $r1 = r0.<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: org.joda.time.field.ImpreciseDateTimeField this$0>
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getUnitMillis : $r1 = r0.<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: org.joda.time.field.ImpreciseDateTimeField this$0> >>>>>>>> org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getUnitMillis : $l0 = $r1.<org.joda.time.field.ImpreciseDateTimeField: long iUnitMillis>
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getUnitMillis : $l0 = $r1.<org.joda.time.field.ImpreciseDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getUnitMillis : return $l0
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getUnitMillis : return $l0 >>>>>>>> org.joda.time.field.BaseDurationField.compareTo : l1 = virtualinvoke r0.<org.joda.time.field.BaseDurationField: long getUnitMillis()>()
org.joda.time.field.BaseDurationField.compareTo : l1 = virtualinvoke r0.<org.joda.time.field.BaseDurationField: long getUnitMillis()>() >>>>>>>> org.joda.time.field.BaseDurationField.compareTo : $b2 = l1 cmp l0
org.joda.time.field.BaseDurationField.compareTo : $b2 = l1 cmp l0 >>>>>>>> org.joda.time.field.BaseDurationField.compareTo : if $b2 != 0
org.joda.time.field.BaseDurationField.compareTo : if $b2 != 0 >>>>>>>> org.joda.time.field.BaseDurationField.compareTo : $b3 = l1 cmp l0
org.joda.time.field.BaseDurationField.compareTo : $b3 = l1 cmp l0 >>>>>>>> org.joda.time.field.BaseDurationField.compareTo : if $b3 >= 0
org.joda.time.field.BaseDurationField.compareTo : if $b3 >= 0 >>>>>>>> org.joda.time.field.BaseDurationField.compareTo : return 1
org.joda.time.field.BaseDurationField.compareTo : return 1 >>>>>>>> org.joda.time.field.BaseDurationField.compareTo : return $i0
org.joda.time.field.BaseDurationField.compareTo : return $i0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.compareReverse : $i1 = neg $i0
org.joda.time.format.DateTimeParserBucket.compareReverse : $i1 = neg $i0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.compareReverse : return $i1
org.joda.time.format.DateTimeParserBucket.compareReverse : return $i1 >>>>>>>> org.joda.time.field.PreciseDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.field.PreciseDateTimeField: org.joda.time.DurationField iRangeField>
org.joda.time.field.PreciseDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.field.PreciseDateTimeField: org.joda.time.DurationField iRangeField> >>>>>>>> org.joda.time.field.PreciseDateTimeField.getRangeDurationField : return $r1
org.joda.time.field.PreciseDateTimeField.getRangeDurationField : return $r1 >>>>>>>> org.joda.time.field.PreciseDurationField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis>
org.joda.time.field.PreciseDurationField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationField.getUnitMillis : return $l0
org.joda.time.field.PreciseDurationField.getUnitMillis : return $l0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : if i0 <= 0
org.joda.time.format.DateTimeParserBucket.computeMillis : if i0 <= 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $r11 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>()
org.joda.time.format.DateTimeParserBucket.computeMillis : $r11 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>() >>>>>>>> org.joda.time.DurationFieldType.months : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MONTHS_TYPE>
org.joda.time.DurationFieldType.months : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MONTHS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.months : return $r0
org.joda.time.DurationFieldType.months : return $r0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $r12 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.Chronology iChrono>
org.joda.time.format.DateTimeParserBucket.computeMillis : $r12 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.Chronology iChrono> >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : r3 = virtualinvoke $r11.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r12)
org.joda.time.format.DateTimeParserBucket.computeMillis : r3 = virtualinvoke $r11.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r12) >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal>
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal> >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : tableswitch($b0) {     case 1:
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : tableswitch($b0) {     case 1: >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r7 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField months()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r7 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField months()>() >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r7
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r7 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $r13 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>()
org.joda.time.format.DateTimeParserBucket.computeMillis : $r13 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>() >>>>>>>> org.joda.time.DurationFieldType.days : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType DAYS_TYPE>
org.joda.time.DurationFieldType.days : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType DAYS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.days : return $r0
org.joda.time.DurationFieldType.days : return $r0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $r14 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.Chronology iChrono>
org.joda.time.format.DateTimeParserBucket.computeMillis : $r14 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.Chronology iChrono> >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : r4 = virtualinvoke $r13.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r14)
org.joda.time.format.DateTimeParserBucket.computeMillis : r4 = virtualinvoke $r13.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r14) >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r9 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField days()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r9 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField days()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.days : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays>
org.joda.time.chrono.AssembledChronology.days : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays> >>>>>>>> org.joda.time.chrono.AssembledChronology.days : return $r1
org.joda.time.chrono.AssembledChronology.days : return $r1 >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r9
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r9 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $r15 = r2[0]
org.joda.time.format.DateTimeParserBucket.computeMillis : $r15 = r2[0] >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $r16 = $r15.<org.joda.time.format.DateTimeParserBucket$SavedField: org.joda.time.DateTimeField iField>
org.joda.time.format.DateTimeParserBucket.computeMillis : $r16 = $r15.<org.joda.time.format.DateTimeParserBucket$SavedField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : r5 = virtualinvoke $r16.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>()
org.joda.time.format.DateTimeParserBucket.computeMillis : r5 = virtualinvoke $r16.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>() >>>>>>>> org.joda.time.field.ImpreciseDateTimeField.getDurationField : $r1 = r0.<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField iDurationField>
org.joda.time.field.ImpreciseDateTimeField.getDurationField : $r1 = r0.<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField iDurationField> >>>>>>>> org.joda.time.field.ImpreciseDateTimeField.getDurationField : return $r1
org.joda.time.field.ImpreciseDateTimeField.getDurationField : return $r1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $i1 = staticinvoke <org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>(r5, r3)
org.joda.time.format.DateTimeParserBucket.computeMillis : $i1 = staticinvoke <org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>(r5, r3) >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : if $i1 < 0
org.joda.time.format.DateTimeParserBucket.computeMillis : if $i1 < 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : l5 = r0.<org.joda.time.format.DateTimeParserBucket: long iMillis>
org.joda.time.format.DateTimeParserBucket.computeMillis : l5 = r0.<org.joda.time.format.DateTimeParserBucket: long iMillis> >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : i6 = 0
org.joda.time.format.DateTimeParserBucket.computeMillis : i6 = 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : if i6 >= i0
org.joda.time.format.DateTimeParserBucket.computeMillis : if i6 >= i0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $r18 = r2[i6]
org.joda.time.format.DateTimeParserBucket.computeMillis : $r18 = r2[i6] >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : l5 = virtualinvoke $r18.<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>(l5, z0)
org.joda.time.format.DateTimeParserBucket.computeMillis : l5 = virtualinvoke $r18.<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>(l5, z0) >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedField.set : $r1 = r0.<org.joda.time.format.DateTimeParserBucket$SavedField: java.lang.String iText>
org.joda.time.format.DateTimeParserBucket$SavedField.set : $r1 = r0.<org.joda.time.format.DateTimeParserBucket$SavedField: java.lang.String iText> >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedField.set : if $r1 != null
org.joda.time.format.DateTimeParserBucket$SavedField.set : if $r1 != null >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedField.set : $r2 = r0.<org.joda.time.format.DateTimeParserBucket$SavedField: org.joda.time.DateTimeField iField>
org.joda.time.format.DateTimeParserBucket$SavedField.set : $r2 = r0.<org.joda.time.format.DateTimeParserBucket$SavedField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedField.set : $i1 = r0.<org.joda.time.format.DateTimeParserBucket$SavedField: int iValue>
org.joda.time.format.DateTimeParserBucket$SavedField.set : $i1 = r0.<org.joda.time.format.DateTimeParserBucket$SavedField: int iValue> >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedField.set : l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>(l0, $i1)
org.joda.time.format.DateTimeParserBucket$SavedField.set : l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>(l0, $i1) >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.set : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : $i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMinYear()>()
org.joda.time.chrono.BasicYearDateTimeField.set : $i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMinYear()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getMinYear : return -292275054
org.joda.time.chrono.GregorianChronology.getMinYear : return -292275054 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : $r2 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.set : $r2 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : $i3 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getMaxYear()>()
org.joda.time.chrono.BasicYearDateTimeField.set : $i3 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getMaxYear()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getMaxYear : return 292278993
org.joda.time.chrono.GregorianChronology.getMaxYear : return 292278993 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i2, $i3)
org.joda.time.chrono.BasicYearDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i2, $i3) >>>>>>>> org.joda.time.field.FieldUtils.verifyValueBounds : if i0 < i1
org.joda.time.field.FieldUtils.verifyValueBounds : if i0 < i1 >>>>>>>> org.joda.time.field.FieldUtils.verifyValueBounds : if i0 <= i2
org.joda.time.field.FieldUtils.verifyValueBounds : if i0 <= i2 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : $r3 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.set : $r3 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : $l4 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: long setYear(long,int)>(l0, i1)
org.joda.time.chrono.BasicYearDateTimeField.set : $l4 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: long setYear(long,int)>(l0, i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicGJChronology.setYear : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getAverageMillisPerYearDividedByTwo()>()
org.joda.time.chrono.BasicChronology.getYear : l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getAverageMillisPerYearDividedByTwo()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getAverageMillisPerYearDividedByTwo : return 15778476000L
org.joda.time.chrono.GregorianChronology.getAverageMillisPerYearDividedByTwo : return 15778476000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $l7 = l0 >> 1
org.joda.time.chrono.BasicChronology.getYear : $l7 = l0 >> 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $l8 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getApproxMillisAtEpochDividedByTwo()>()
org.joda.time.chrono.BasicChronology.getYear : $l8 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getApproxMillisAtEpochDividedByTwo()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getApproxMillisAtEpochDividedByTwo : return 31083597720000L
org.joda.time.chrono.GregorianChronology.getApproxMillisAtEpochDividedByTwo : return 31083597720000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l2 = $l7 + $l8
org.joda.time.chrono.BasicChronology.getYear : l2 = $l7 + $l8 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $b9 = l2 cmp 0L
org.joda.time.chrono.BasicChronology.getYear : $b9 = l2 cmp 0L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $b9 >= 0
org.joda.time.chrono.BasicChronology.getYear : if $b9 >= 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $l11 = l2 / l1
org.joda.time.chrono.BasicChronology.getYear : $l11 = l2 / l1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : i3 = (int) $l11
org.joda.time.chrono.BasicChronology.getYear : i3 = (int) $l11 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i3)
org.joda.time.chrono.BasicChronology.getYear : l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i3) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMillis : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>(i0)
org.joda.time.chrono.BasicChronology.getYearMillis : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $r2 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache>
org.joda.time.chrono.BasicChronology.getYearInfo : $r2 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $i1 = i0 & 1023
org.joda.time.chrono.BasicChronology.getYearInfo : $i1 = i0 & 1023 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : r1 = $r2[$i1]
org.joda.time.chrono.BasicChronology.getYearInfo : r1 = $r2[$i1] >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : if r1 == null
org.joda.time.chrono.BasicChronology.getYearInfo : if r1 == null >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $i2 = r1.<org.joda.time.chrono.BasicChronology$YearInfo: int iYear>
org.joda.time.chrono.BasicChronology.getYearInfo : $i2 = r1.<org.joda.time.chrono.BasicChronology$YearInfo: int iYear> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : if $i2 == i0
org.joda.time.chrono.BasicChronology.getYearInfo : if $i2 == i0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : return r1
org.joda.time.chrono.BasicChronology.getYearInfo : return r1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMillis : $l1 = $r1.<org.joda.time.chrono.BasicChronology$YearInfo: long iFirstDayMillis>
org.joda.time.chrono.BasicChronology.getYearMillis : $l1 = $r1.<org.joda.time.chrono.BasicChronology$YearInfo: long iFirstDayMillis> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMillis : return $l1
org.joda.time.chrono.BasicChronology.getYearMillis : return $l1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l5 = l0 - l4
org.joda.time.chrono.BasicChronology.getYear : l5 = l0 - l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $b12 = l5 cmp 0L
org.joda.time.chrono.BasicChronology.getYear : $b12 = l5 cmp 0L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $b12 >= 0
org.joda.time.chrono.BasicChronology.getYear : if $b12 >= 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $b13 = l5 cmp 31536000000L
org.joda.time.chrono.BasicChronology.getYear : $b13 = l5 cmp 31536000000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $b13 < 0
org.joda.time.chrono.BasicChronology.getYear : if $b13 < 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : return i3
org.joda.time.chrono.BasicChronology.getYear : return i3 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : i3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getDayOfYear(long,int)>(l0, i2)
org.joda.time.chrono.BasicGJChronology.setYear : i3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getDayOfYear(long,int)>(l0, i2) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1)
org.joda.time.chrono.BasicChronology.getDayOfYear : l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : $l3 = l0 - l2
org.joda.time.chrono.BasicChronology.getDayOfYear : $l3 = l0 - l2 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : $l4 = $l3 / 86400000L
org.joda.time.chrono.BasicChronology.getDayOfYear : $l4 = $l3 / 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : $i5 = (int) $l4
org.joda.time.chrono.BasicChronology.getDayOfYear : $i5 = (int) $l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : $i6 = $i5 + 1
org.joda.time.chrono.BasicChronology.getDayOfYear : $i6 = $i5 + 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : return $i6
org.joda.time.chrono.BasicChronology.getDayOfYear : return $i6 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : i4 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getMillisOfDay(long)>(l0)
org.joda.time.chrono.BasicGJChronology.setYear : i4 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getMillisOfDay(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : $b1 = l0 cmp 0L
org.joda.time.chrono.BasicChronology.getMillisOfDay : $b1 = l0 cmp 0L >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : if $b1 < 0
org.joda.time.chrono.BasicChronology.getMillisOfDay : if $b1 < 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : $l2 = l0 % 86400000L
org.joda.time.chrono.BasicChronology.getMillisOfDay : $l2 = l0 % 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : $i3 = (int) $l2
org.joda.time.chrono.BasicChronology.getMillisOfDay : $i3 = (int) $l2 >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : return $i3
org.joda.time.chrono.BasicChronology.getMillisOfDay : return $i3 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : if i3 <= 59
org.joda.time.chrono.BasicGJChronology.setYear : if i3 <= 59 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : l5 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMonthDayMillis(int,int,int)>(i1, 1, i3)
org.joda.time.chrono.BasicGJChronology.setYear : l5 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMonthDayMillis(int,int,int)>(i1, 1, i3) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0)
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i0, i1)
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i0, i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0)
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0) >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : $i1 = i0 & 3
org.joda.time.chrono.GregorianChronology.isLeapYear : $i1 = i0 & 3 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : if $i1 != 0
org.joda.time.chrono.GregorianChronology.isLeapYear : if $i1 != 0 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : $z0 = 0
org.joda.time.chrono.GregorianChronology.isLeapYear : $z0 = 0 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : return $z0
org.joda.time.chrono.GregorianChronology.isLeapYear : return $z0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : if $z0 == 0
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $r2 = <org.joda.time.chrono.BasicGJChronology: long[] MIN_TOTAL_MILLIS_BY_MONTH_ARRAY>
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $r2 = <org.joda.time.chrono.BasicGJChronology: long[] MIN_TOTAL_MILLIS_BY_MONTH_ARRAY> >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $i4 = i1 - 1
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $i4 = i1 - 1 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $l5 = $r2[$i4]
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $l5 = $r2[$i4] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : return $l5
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : return $l5 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l5 = l3 + $l4
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l5 = l3 + $l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $i6 = i2 - 1
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $i6 = i2 - 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l7 = (long) $i6
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l7 = (long) $i6 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l8 = $l7 * 86400000L
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l8 = $l7 * 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l9 = l5 + $l8
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l9 = l5 + $l8 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : return $l9
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : return $l9 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : $l6 = (long) i4
org.joda.time.chrono.BasicGJChronology.setYear : $l6 = (long) i4 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : l7 = l5 + $l6
org.joda.time.chrono.BasicGJChronology.setYear : l7 = l5 + $l6 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : return l7
org.joda.time.chrono.BasicGJChronology.setYear : return l7 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : return $l4
org.joda.time.chrono.BasicYearDateTimeField.set : return $l4 >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedField.set : goto [?= (branch)]
org.joda.time.format.DateTimeParserBucket$SavedField.set : goto [?= (branch)] >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedField.set : if z0 == 0
org.joda.time.format.DateTimeParserBucket$SavedField.set : if z0 == 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedField.set : $r6 = r0.<org.joda.time.format.DateTimeParserBucket$SavedField: org.joda.time.DateTimeField iField>
org.joda.time.format.DateTimeParserBucket$SavedField.set : $r6 = r0.<org.joda.time.format.DateTimeParserBucket$SavedField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedField.set : l2 = virtualinvoke $r6.<org.joda.time.DateTimeField: long roundFloor(long)>(l2)
org.joda.time.format.DateTimeParserBucket$SavedField.set : l2 = virtualinvoke $r6.<org.joda.time.DateTimeField: long roundFloor(long)>(l2) >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.roundFloor : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.roundFloor : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.roundFloor : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>(l0)
org.joda.time.chrono.BasicYearDateTimeField.roundFloor : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicYearDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.get : return $i1
org.joda.time.chrono.BasicYearDateTimeField.get : return $i1 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.roundFloor : $l2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>($i1)
org.joda.time.chrono.BasicYearDateTimeField.roundFloor : $l2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>($i1) >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.roundFloor : return $l2
org.joda.time.chrono.BasicYearDateTimeField.roundFloor : return $l2 >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedField.set : return l2
org.joda.time.format.DateTimeParserBucket$SavedField.set : return l2 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : i6 = i6 + 1
org.joda.time.format.DateTimeParserBucket.computeMillis : i6 = i6 + 1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : goto [?= (branch)]
org.joda.time.format.DateTimeParserBucket.computeMillis : goto [?= (branch)] >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $i5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $i5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, 1, $i5)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, 1, $i5) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : i3 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int)>(l0, i2)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : i3 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int)>(l0, i2) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i1)
org.joda.time.chrono.BasicChronology.getDayOfMonth : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMillis(int)>(i1)
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMillis(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l4 = l0 - $l3
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l4 = l0 - $l3 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l5 = $l4 >> 10
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l5 = $l4 >> 10 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : i2 = (int) $l5
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : i2 = (int) $l5 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i1)
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if $z0 == 0
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 15271875
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 15271875 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 7593750
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 7593750 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 2615625
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 2615625 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 1
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 1 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : goto [?= return $b6]
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : goto [?= return $b6] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : return $b6
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : return $b6 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l0, i1, i2)
org.joda.time.chrono.BasicChronology.getDayOfMonth : $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l0, i1, i2) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1)
org.joda.time.chrono.BasicChronology.getDayOfMonth : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i1, i2)
org.joda.time.chrono.BasicChronology.getDayOfMonth : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i1, i2) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : l5 = l3 + $l4
org.joda.time.chrono.BasicChronology.getDayOfMonth : l5 = l3 + $l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $l6 = l0 - l5
org.joda.time.chrono.BasicChronology.getDayOfMonth : $l6 = l0 - l5 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $l7 = $l6 / 86400000L
org.joda.time.chrono.BasicChronology.getDayOfMonth : $l7 = $l6 / 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $i8 = (int) $l7
org.joda.time.chrono.BasicChronology.getDayOfMonth : $i8 = (int) $l7 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $i9 = $i8 + 1
org.joda.time.chrono.BasicChronology.getDayOfMonth : $i9 = $i8 + 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : return $i9
org.joda.time.chrono.BasicChronology.getDayOfMonth : return $i9 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : return $i3
org.joda.time.chrono.BasicChronology.getDayOfMonth : return $i3 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : i4 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>(i2, i1)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : i4 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>(i2, i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0)
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : if $z0 == 0
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $r2 = <org.joda.time.chrono.BasicGJChronology: int[] MIN_DAYS_PER_MONTH_ARRAY>
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $r2 = <org.joda.time.chrono.BasicGJChronology: int[] MIN_DAYS_PER_MONTH_ARRAY> >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i4 = i1 - 1
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i4 = i1 - 1 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i5 = $r2[$i4]
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i5 = $r2[$i4] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : return $i5
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : return $i5 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : if i3 <= i4
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : if i3 <= i4 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r4 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r4 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $l6 = virtualinvoke $r4.<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>(i2, i1, i3)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $l6 = virtualinvoke $r4.<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>(i2, i1, i3) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $i7 = virtualinvoke $r5.<org.joda.time.chrono.BasicChronology: int getMillisOfDay(long)>(l0)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $i7 = virtualinvoke $r5.<org.joda.time.chrono.BasicChronology: int getMillisOfDay(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $l8 = (long) $i7
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $l8 = (long) $i7 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $l9 = $l6 + $l8
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $l9 = $l6 + $l8 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : return $l9
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : return $l9 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.roundFloor : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.roundFloor : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.roundFloor : i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.roundFloor : i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.roundFloor : $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.roundFloor : $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.roundFloor : i2 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i1)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.roundFloor : i2 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 10125000
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 10125000 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 4
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 4 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.roundFloor : $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.roundFloor : $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.roundFloor : $l3 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: long getYearMonthMillis(int,int)>(i1, i2)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.roundFloor : $l3 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: long getYearMonthMillis(int,int)>(i1, i2) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthMillis : l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0)
org.joda.time.chrono.BasicChronology.getYearMonthMillis : l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthMillis : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i0, i1)
org.joda.time.chrono.BasicChronology.getYearMonthMillis : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i0, i1) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthMillis : l4 = l2 + $l3
org.joda.time.chrono.BasicChronology.getYearMonthMillis : l4 = l2 + $l3 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthMillis : return l4
org.joda.time.chrono.BasicChronology.getYearMonthMillis : return l4 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.roundFloor : return $l3
org.joda.time.chrono.BasicMonthOfYearDateTimeField.roundFloor : return $l3 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : $i2 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int getMinimumValue()>()
org.joda.time.field.PreciseDurationDateTimeField.set : $i2 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int getMinimumValue()>() >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMinimumValue : return 1
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMinimumValue : return 1 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : $i3 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int getMaximumValueForSet(long,int)>(l0, i1)
org.joda.time.field.PreciseDurationDateTimeField.set : $i3 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int getMaximumValueForSet(long,int)>(l0, i1) >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValueForSet : $r1 = r0.<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValueForSet : $r1 = r0.<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValueForSet : $i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDaysInMonthMaxForSet(long,int)>(l0, i1)
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValueForSet : $i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDaysInMonthMaxForSet(long,int)>(l0, i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInMonthMaxForSet : if i1 <= 28
org.joda.time.chrono.BasicGJChronology.getDaysInMonthMaxForSet : if i1 <= 28 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInMonthMaxForSet : $i2 = 28
org.joda.time.chrono.BasicGJChronology.getDaysInMonthMaxForSet : $i2 = 28 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInMonthMaxForSet : return $i2
org.joda.time.chrono.BasicGJChronology.getDaysInMonthMaxForSet : return $i2 >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValueForSet : return $i2
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValueForSet : return $i2 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i2, $i3)
org.joda.time.field.PreciseDurationDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i2, $i3) >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : $i4 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int get(long)>(l0)
org.joda.time.field.PreciseDurationDateTimeField.set : $i4 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long)>(l0)
org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicChronology.getDayOfMonth : i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : return $i1
org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : return $i1 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : $i5 = i1 - $i4
org.joda.time.field.PreciseDurationDateTimeField.set : $i5 = i1 - $i4 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : $l6 = (long) $i5
org.joda.time.field.PreciseDurationDateTimeField.set : $l6 = (long) $i5 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : $l7 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDurationDateTimeField.set : $l7 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : $l8 = $l6 * $l7
org.joda.time.field.PreciseDurationDateTimeField.set : $l8 = $l6 * $l7 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : $l9 = l0 + $l8
org.joda.time.field.PreciseDurationDateTimeField.set : $l9 = l0 + $l8 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : return $l9
org.joda.time.field.PreciseDurationDateTimeField.set : return $l9 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $b1 = l0 cmp 0L
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $b1 = l0 cmp 0L >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : if $b1 < 0
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : if $b1 < 0 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l2 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l2 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l3 = l0 % $l2
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l3 = l0 % $l2 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l4 = l0 - $l3
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l4 = l0 - $l3 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : return $l4
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : return $l4 >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $i2 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int getMinimumValue()>()
org.joda.time.field.PreciseDateTimeField.set : $i2 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int getMinimumValue()>() >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getMinimumValue : return 0
org.joda.time.field.PreciseDurationDateTimeField.getMinimumValue : return 0 >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $i3 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int getMaximumValue()>()
org.joda.time.field.PreciseDateTimeField.set : $i3 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.field.PreciseDateTimeField.getMaximumValue : $i0 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange>
org.joda.time.field.PreciseDateTimeField.getMaximumValue : $i0 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange> >>>>>>>> org.joda.time.field.PreciseDateTimeField.getMaximumValue : $i1 = $i0 - 1
org.joda.time.field.PreciseDateTimeField.getMaximumValue : $i1 = $i0 - 1 >>>>>>>> org.joda.time.field.PreciseDateTimeField.getMaximumValue : return $i1
org.joda.time.field.PreciseDateTimeField.getMaximumValue : return $i1 >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i2, $i3)
org.joda.time.field.PreciseDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i2, $i3) >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $i4 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int get(long)>(l0)
org.joda.time.field.PreciseDateTimeField.set : $i4 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $b1 = l0 cmp 0L
org.joda.time.field.PreciseDateTimeField.get : $b1 = l0 cmp 0L >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : if $b1 < 0
org.joda.time.field.PreciseDateTimeField.get : if $b1 < 0 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l2 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: long getUnitMillis()>()
org.joda.time.field.PreciseDateTimeField.get : $l2 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: long getUnitMillis()>() >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : return $l0
org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : return $l0 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l3 = l0 / $l2
org.joda.time.field.PreciseDateTimeField.get : $l3 = l0 / $l2 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $i4 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange>
org.joda.time.field.PreciseDateTimeField.get : $i4 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange> >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l5 = (long) $i4
org.joda.time.field.PreciseDateTimeField.get : $l5 = (long) $i4 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l6 = $l3 % $l5
org.joda.time.field.PreciseDateTimeField.get : $l6 = $l3 % $l5 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $i7 = (int) $l6
org.joda.time.field.PreciseDateTimeField.get : $i7 = (int) $l6 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : return $i7
org.joda.time.field.PreciseDateTimeField.get : return $i7 >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $i5 = i1 - $i4
org.joda.time.field.PreciseDateTimeField.set : $i5 = i1 - $i4 >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $l6 = (long) $i5
org.joda.time.field.PreciseDateTimeField.set : $l6 = (long) $i5 >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $l7 = r0.<org.joda.time.field.PreciseDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDateTimeField.set : $l7 = r0.<org.joda.time.field.PreciseDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $l8 = $l6 * $l7
org.joda.time.field.PreciseDateTimeField.set : $l8 = $l6 * $l7 >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $l9 = l0 + $l8
org.joda.time.field.PreciseDateTimeField.set : $l9 = l0 + $l8 >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : return $l9
org.joda.time.field.PreciseDateTimeField.set : return $l9 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : if z0 == 0
org.joda.time.format.DateTimeParserBucket.computeMillis : if z0 == 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : i7 = 0
org.joda.time.format.DateTimeParserBucket.computeMillis : i7 = 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : if i7 >= i0
org.joda.time.format.DateTimeParserBucket.computeMillis : if i7 >= i0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $r19 = r2[i7]
org.joda.time.format.DateTimeParserBucket.computeMillis : $r19 = r2[i7] >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $l8 = l5
org.joda.time.format.DateTimeParserBucket.computeMillis : $l8 = l5 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $i9 = i0 - 1
org.joda.time.format.DateTimeParserBucket.computeMillis : $i9 = i0 - 1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : if i7 != $i9
org.joda.time.format.DateTimeParserBucket.computeMillis : if i7 != $i9 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $z2 = 0
org.joda.time.format.DateTimeParserBucket.computeMillis : $z2 = 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : l5 = virtualinvoke $r19.<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>($l8, $z2)
org.joda.time.format.DateTimeParserBucket.computeMillis : l5 = virtualinvoke $r19.<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>($l8, $z2) >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i2)
org.joda.time.chrono.BasicGJChronology.setYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i2) >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : if $z0 == 0
org.joda.time.chrono.BasicGJChronology.setYear : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : $z2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i1)
org.joda.time.chrono.BasicGJChronology.setYear : $z2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : if $z2 == 0
org.joda.time.chrono.BasicGJChronology.setYear : if $z2 == 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : i7 = i7 + 1
org.joda.time.format.DateTimeParserBucket.computeMillis : i7 = i7 + 1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $z2 = 1
org.joda.time.format.DateTimeParserBucket.computeMillis : $z2 = 1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : goto [?= l5 = virtualinvoke $r19.<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>($l8, $z2)]
org.joda.time.format.DateTimeParserBucket.computeMillis : goto [?= l5 = virtualinvoke $r19.<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>($l8, $z2)] >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : goto [?= $r27 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset>]
org.joda.time.format.DateTimeParserBucket.computeMillis : goto [?= $r27 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset>] >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $r27 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset>
org.joda.time.format.DateTimeParserBucket.computeMillis : $r27 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset> >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : if $r27 == null
org.joda.time.format.DateTimeParserBucket.computeMillis : if $r27 == null >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $r29 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone>
org.joda.time.format.DateTimeParserBucket.computeMillis : $r29 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : if $r29 == null
org.joda.time.format.DateTimeParserBucket.computeMillis : if $r29 == null >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $r30 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone>
org.joda.time.format.DateTimeParserBucket.computeMillis : $r30 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : i12 = virtualinvoke $r30.<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>(l5)
org.joda.time.format.DateTimeParserBucket.computeMillis : i12 = virtualinvoke $r30.<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>(l5) >>>>>>>> org.joda.time.tz.FixedDateTimeZone.getOffsetFromLocal : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset>
org.joda.time.tz.FixedDateTimeZone.getOffsetFromLocal : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset> >>>>>>>> org.joda.time.tz.FixedDateTimeZone.getOffsetFromLocal : return $i1
org.joda.time.tz.FixedDateTimeZone.getOffsetFromLocal : return $i1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $l13 = (long) i12
org.joda.time.format.DateTimeParserBucket.computeMillis : $l13 = (long) i12 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : l5 = l5 - $l13
org.joda.time.format.DateTimeParserBucket.computeMillis : l5 = l5 - $l13 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $r31 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone>
org.joda.time.format.DateTimeParserBucket.computeMillis : $r31 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $i14 = virtualinvoke $r31.<org.joda.time.DateTimeZone: int getOffset(long)>(l5)
org.joda.time.format.DateTimeParserBucket.computeMillis : $i14 = virtualinvoke $r31.<org.joda.time.DateTimeZone: int getOffset(long)>(l5) >>>>>>>> org.joda.time.tz.FixedDateTimeZone.getOffset : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset>
org.joda.time.tz.FixedDateTimeZone.getOffset : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset> >>>>>>>> org.joda.time.tz.FixedDateTimeZone.getOffset : return $i1
org.joda.time.tz.FixedDateTimeZone.getOffset : return $i1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : if i12 == $i14
org.joda.time.format.DateTimeParserBucket.computeMillis : if i12 == $i14 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : return l5
org.joda.time.format.DateTimeParserBucket.computeMillis : return l5 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : return $l3
org.joda.time.format.DateTimeFormatter.parseMillis : return $l3 >>>>>>>> org.joda.time.convert.StringConverter.getInstantMillis : return $l0
org.joda.time.convert.StringConverter.getInstantMillis : return $l0 >>>>>>>> org.joda.time.base.BaseDateTime.checkInstant : return l0
org.joda.time.base.BaseDateTime.checkInstant : return l0 >>>>>>>> org.joda.time.base.BaseDateTime.getMillis : $l0 = r0.<org.joda.time.base.BaseDateTime: long iMillis>
org.joda.time.base.BaseDateTime.getMillis : $l0 = r0.<org.joda.time.base.BaseDateTime: long iMillis> >>>>>>>> org.joda.time.base.BaseDateTime.getMillis : return $l0
org.joda.time.base.BaseDateTime.getMillis : return $l0 >>>>>>>> org.joda.time.DateTimeComparator.compare : $r3 = staticinvoke <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager getInstance()>()
org.joda.time.DateTimeComparator.compare : $r3 = staticinvoke <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager getInstance()>() >>>>>>>> org.joda.time.DateTimeComparator.compare : r4 = virtualinvoke $r3.<org.joda.time.convert.ConverterManager: org.joda.time.convert.InstantConverter getInstantConverter(java.lang.Object)>(r1)
org.joda.time.DateTimeComparator.compare : r4 = virtualinvoke $r3.<org.joda.time.convert.ConverterManager: org.joda.time.convert.InstantConverter getInstantConverter(java.lang.Object)>(r1) >>>>>>>> org.joda.time.DateTimeComparator.compare : $r7 = (org.joda.time.Chronology) null
org.joda.time.DateTimeComparator.compare : $r7 = (org.joda.time.Chronology) null >>>>>>>> org.joda.time.DateTimeComparator.compare : r5 = interfaceinvoke r4.<org.joda.time.convert.InstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>(r1, $r7)
org.joda.time.DateTimeComparator.compare : r5 = interfaceinvoke r4.<org.joda.time.convert.InstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>(r1, $r7) >>>>>>>> org.joda.time.convert.ReadableInstantConverter.getChronology : if r2 != null
org.joda.time.convert.ReadableInstantConverter.getChronology : if r2 != null >>>>>>>> org.joda.time.convert.ReadableInstantConverter.getChronology : $r3 = (org.joda.time.ReadableInstant) r1
org.joda.time.convert.ReadableInstantConverter.getChronology : $r3 = (org.joda.time.ReadableInstant) r1 >>>>>>>> org.joda.time.convert.ReadableInstantConverter.getChronology : r4 = interfaceinvoke $r3.<org.joda.time.ReadableInstant: org.joda.time.Chronology getChronology()>()
org.joda.time.convert.ReadableInstantConverter.getChronology : r4 = interfaceinvoke $r3.<org.joda.time.ReadableInstant: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.base.BaseDateTime.getChronology : $r1 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology>
org.joda.time.base.BaseDateTime.getChronology : $r1 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology> >>>>>>>> org.joda.time.base.BaseDateTime.getChronology : return $r1
org.joda.time.base.BaseDateTime.getChronology : return $r1 >>>>>>>> org.joda.time.convert.ReadableInstantConverter.getChronology : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r4)
org.joda.time.convert.ReadableInstantConverter.getChronology : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r4) >>>>>>>> org.joda.time.convert.ReadableInstantConverter.getChronology : return r2
org.joda.time.convert.ReadableInstantConverter.getChronology : return r2 >>>>>>>> org.joda.time.DateTimeComparator.compare : l0 = interfaceinvoke r4.<org.joda.time.convert.InstantConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>(r1, r5)
org.joda.time.DateTimeComparator.compare : l0 = interfaceinvoke r4.<org.joda.time.convert.InstantConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>(r1, r5) >>>>>>>> org.joda.time.convert.ReadableInstantConverter.getInstantMillis : $r3 = (org.joda.time.ReadableInstant) r1
org.joda.time.convert.ReadableInstantConverter.getInstantMillis : $r3 = (org.joda.time.ReadableInstant) r1 >>>>>>>> org.joda.time.convert.ReadableInstantConverter.getInstantMillis : $l0 = interfaceinvoke $r3.<org.joda.time.ReadableInstant: long getMillis()>()
org.joda.time.convert.ReadableInstantConverter.getInstantMillis : $l0 = interfaceinvoke $r3.<org.joda.time.ReadableInstant: long getMillis()>() >>>>>>>> org.joda.time.convert.ReadableInstantConverter.getInstantMillis : return $l0
org.joda.time.convert.ReadableInstantConverter.getInstantMillis : return $l0 >>>>>>>> org.joda.time.DateTimeComparator.compare : $r8 = staticinvoke <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager getInstance()>()
org.joda.time.DateTimeComparator.compare : $r8 = staticinvoke <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager getInstance()>() >>>>>>>> org.joda.time.DateTimeComparator.compare : r9 = virtualinvoke $r8.<org.joda.time.convert.ConverterManager: org.joda.time.convert.InstantConverter getInstantConverter(java.lang.Object)>(r2)
org.joda.time.DateTimeComparator.compare : r9 = virtualinvoke $r8.<org.joda.time.convert.ConverterManager: org.joda.time.convert.InstantConverter getInstantConverter(java.lang.Object)>(r2) >>>>>>>> org.joda.time.DateTimeComparator.compare : $r10 = (org.joda.time.Chronology) null
org.joda.time.DateTimeComparator.compare : $r10 = (org.joda.time.Chronology) null >>>>>>>> org.joda.time.DateTimeComparator.compare : r6 = interfaceinvoke r9.<org.joda.time.convert.InstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>(r2, $r10)
org.joda.time.DateTimeComparator.compare : r6 = interfaceinvoke r9.<org.joda.time.convert.InstantConverter: org.joda.time.Chronology getChronology(java.lang.Object,org.joda.time.Chronology)>(r2, $r10) >>>>>>>> org.joda.time.DateTimeComparator.compare : l1 = interfaceinvoke r9.<org.joda.time.convert.InstantConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>(r2, r6)
org.joda.time.DateTimeComparator.compare : l1 = interfaceinvoke r9.<org.joda.time.convert.InstantConverter: long getInstantMillis(java.lang.Object,org.joda.time.Chronology)>(r2, r6) >>>>>>>> org.joda.time.DateTimeComparator.compare : $r11 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iLowerLimit>
org.joda.time.DateTimeComparator.compare : $r11 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iLowerLimit> >>>>>>>> org.joda.time.DateTimeComparator.compare : if $r11 == null
org.joda.time.DateTimeComparator.compare : if $r11 == null >>>>>>>> org.joda.time.DateTimeComparator.compare : $r12 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iLowerLimit>
org.joda.time.DateTimeComparator.compare : $r12 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iLowerLimit> >>>>>>>> org.joda.time.DateTimeComparator.compare : $r13 = virtualinvoke $r12.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r5)
org.joda.time.DateTimeComparator.compare : $r13 = virtualinvoke $r12.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r5) >>>>>>>> org.joda.time.DateTimeComparator.compare : l0 = virtualinvoke $r13.<org.joda.time.DateTimeField: long roundFloor(long)>(l0)
org.joda.time.DateTimeComparator.compare : l0 = virtualinvoke $r13.<org.joda.time.DateTimeField: long roundFloor(long)>(l0) >>>>>>>> org.joda.time.DateTimeComparator.compare : $r14 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iLowerLimit>
org.joda.time.DateTimeComparator.compare : $r14 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iLowerLimit> >>>>>>>> org.joda.time.DateTimeComparator.compare : $r15 = virtualinvoke $r14.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r6)
org.joda.time.DateTimeComparator.compare : $r15 = virtualinvoke $r14.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r6) >>>>>>>> org.joda.time.DateTimeComparator.compare : l1 = virtualinvoke $r15.<org.joda.time.DateTimeField: long roundFloor(long)>(l1)
org.joda.time.DateTimeComparator.compare : l1 = virtualinvoke $r15.<org.joda.time.DateTimeField: long roundFloor(long)>(l1) >>>>>>>> org.joda.time.DateTimeComparator.compare : $r16 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iUpperLimit>
org.joda.time.DateTimeComparator.compare : $r16 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iUpperLimit> >>>>>>>> org.joda.time.DateTimeComparator.compare : if $r16 == null
org.joda.time.DateTimeComparator.compare : if $r16 == null >>>>>>>> org.joda.time.DateTimeComparator.compare : $r17 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iUpperLimit>
org.joda.time.DateTimeComparator.compare : $r17 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iUpperLimit> >>>>>>>> org.joda.time.DateTimeComparator.compare : $r18 = virtualinvoke $r17.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r5)
org.joda.time.DateTimeComparator.compare : $r18 = virtualinvoke $r17.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r5) >>>>>>>> org.joda.time.DateTimeComparator.compare : l0 = virtualinvoke $r18.<org.joda.time.DateTimeField: long remainder(long)>(l0)
org.joda.time.DateTimeComparator.compare : l0 = virtualinvoke $r18.<org.joda.time.DateTimeField: long remainder(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.remainder : $l1 = virtualinvoke r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>(l0)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.remainder : $l1 = virtualinvoke r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long roundFloor(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.remainder : $l2 = l0 - $l1
org.joda.time.chrono.BasicMonthOfYearDateTimeField.remainder : $l2 = l0 - $l1 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.remainder : return $l2
org.joda.time.chrono.BasicMonthOfYearDateTimeField.remainder : return $l2 >>>>>>>> org.joda.time.DateTimeComparator.compare : $r19 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iUpperLimit>
org.joda.time.DateTimeComparator.compare : $r19 = r0.<org.joda.time.DateTimeComparator: org.joda.time.DateTimeFieldType iUpperLimit> >>>>>>>> org.joda.time.DateTimeComparator.compare : $r20 = virtualinvoke $r19.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r6)
org.joda.time.DateTimeComparator.compare : $r20 = virtualinvoke $r19.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r6) >>>>>>>> org.joda.time.DateTimeComparator.compare : l1 = virtualinvoke $r20.<org.joda.time.DateTimeField: long remainder(long)>(l1)
org.joda.time.DateTimeComparator.compare : l1 = virtualinvoke $r20.<org.joda.time.DateTimeField: long remainder(long)>(l1) >>>>>>>> org.joda.time.DateTimeComparator.compare : $b2 = l0 cmp l1
org.joda.time.DateTimeComparator.compare : $b2 = l0 cmp l1 >>>>>>>> org.joda.time.DateTimeComparator.compare : if $b2 >= 0
org.joda.time.DateTimeComparator.compare : if $b2 >= 0 >>>>>>>> org.joda.time.DateTimeComparator.compare : return -1
org.joda.time.DateTimeComparator.compare : return -1 >>>>>>>> org.joda.time.DateTimeComparator.compare : $b3 = l0 cmp l1
org.joda.time.DateTimeComparator.compare : $b3 = l0 cmp l1 >>>>>>>> org.joda.time.DateTimeComparator.compare : if $b3 <= 0
org.joda.time.DateTimeComparator.compare : if $b3 <= 0 >>>>>>>> org.joda.time.DateTimeComparator.compare : return 1
