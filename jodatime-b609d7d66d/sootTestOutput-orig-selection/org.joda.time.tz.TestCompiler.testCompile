org.joda.time.DateTimeZone.setDefault : r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>() >>>>>>>> org.joda.time.DateTimeZone.setDefault : if r1 == null
org.joda.time.DateTimeZone.setDefault : if r1 == null >>>>>>>> org.joda.time.DateTimeZone.setDefault : if r0 != null
org.joda.time.DateTimeZone.setDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.setDefault : $r6 = class "org/joda/time/DateTimeZone"
org.joda.time.DateTimeZone.setDefault : $r6 = class "org/joda/time/DateTimeZone" >>>>>>>> org.joda.time.DateTimeZone.setDefault : r3 = $r6
org.joda.time.DateTimeZone.setDefault : r3 = $r6 >>>>>>>> org.joda.time.DateTimeZone.setDefault : entermonitor $r6
org.joda.time.DateTimeZone.setDefault : entermonitor $r6 >>>>>>>> org.joda.time.DateTimeZone.setDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r0
org.joda.time.DateTimeZone.setDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r0 >>>>>>>> org.joda.time.DateTimeZone.setDefault : exitmonitor r3
org.joda.time.DateTimeZone.setDefault : exitmonitor r3 >>>>>>>> org.joda.time.DateTimeZone.setDefault : goto [?= return]
org.joda.time.DateTimeZone.setDefault : goto [?= return] >>>>>>>> org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> >>>>>>>> org.joda.time.DateTimeZone.getDefault : if r0 != null
org.joda.time.DateTimeZone.getDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.DateTimeZone.getDefault : return r0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : $i2 = lengthof r0
org.joda.time.tz.ZoneInfoCompiler.main : $i2 = lengthof r0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : if $i2 != 0
org.joda.time.tz.ZoneInfoCompiler.main : if $i2 != 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : r1 = null
org.joda.time.tz.ZoneInfoCompiler.main : r1 = null >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : r2 = null
org.joda.time.tz.ZoneInfoCompiler.main : r2 = null >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : z0 = 0
org.joda.time.tz.ZoneInfoCompiler.main : z0 = 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : i0 = 0
org.joda.time.tz.ZoneInfoCompiler.main : i0 = 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : $i3 = lengthof r0
org.joda.time.tz.ZoneInfoCompiler.main : $i3 = lengthof r0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : if i0 >= $i3
org.joda.time.tz.ZoneInfoCompiler.main : if i0 >= $i3 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : $r4 = "-src"
org.joda.time.tz.ZoneInfoCompiler.main : $r4 = "-src" >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : $r5 = r0[i0]
org.joda.time.tz.ZoneInfoCompiler.main : $r5 = r0[i0] >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5)
org.joda.time.tz.ZoneInfoCompiler.main : $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : if $z1 == 0
org.joda.time.tz.ZoneInfoCompiler.main : if $z1 == 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : $r6 = new java.io.File
org.joda.time.tz.ZoneInfoCompiler.main : $r6 = new java.io.File >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : i0 = i0 + 1
org.joda.time.tz.ZoneInfoCompiler.main : i0 = i0 + 1 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : $r7 = r0[i0]
org.joda.time.tz.ZoneInfoCompiler.main : $r7 = r0[i0] >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>($r7)
org.joda.time.tz.ZoneInfoCompiler.main : specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>($r7) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : r1 = $r6
org.joda.time.tz.ZoneInfoCompiler.main : r1 = $r6 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : goto [?= (branch)]
org.joda.time.tz.ZoneInfoCompiler.main : goto [?= (branch)] >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : goto [?= i0 = i0 + 1]
org.joda.time.tz.ZoneInfoCompiler.main : goto [?= i0 = i0 + 1] >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : goto [?= $i3 = lengthof r0]
org.joda.time.tz.ZoneInfoCompiler.main : goto [?= $i3 = lengthof r0] >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : $r8 = "-dst"
org.joda.time.tz.ZoneInfoCompiler.main : $r8 = "-dst" >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : $r9 = r0[i0]
org.joda.time.tz.ZoneInfoCompiler.main : $r9 = r0[i0] >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : $z2 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r9)
org.joda.time.tz.ZoneInfoCompiler.main : $z2 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r9) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : if $z2 == 0
org.joda.time.tz.ZoneInfoCompiler.main : if $z2 == 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : $r10 = new java.io.File
org.joda.time.tz.ZoneInfoCompiler.main : $r10 = new java.io.File >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : $r11 = r0[i0]
org.joda.time.tz.ZoneInfoCompiler.main : $r11 = r0[i0] >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : specialinvoke $r10.<java.io.File: void <init>(java.lang.String)>($r11)
org.joda.time.tz.ZoneInfoCompiler.main : specialinvoke $r10.<java.io.File: void <init>(java.lang.String)>($r11) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : r2 = $r10
org.joda.time.tz.ZoneInfoCompiler.main : r2 = $r10 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : $r12 = "-verbose"
org.joda.time.tz.ZoneInfoCompiler.main : $r12 = "-verbose" >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : $r13 = r0[i0]
org.joda.time.tz.ZoneInfoCompiler.main : $r13 = r0[i0] >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : $z3 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r13)
org.joda.time.tz.ZoneInfoCompiler.main : $z3 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r13) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : if $z3 == 0
org.joda.time.tz.ZoneInfoCompiler.main : if $z3 == 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : $r14 = "-?"
org.joda.time.tz.ZoneInfoCompiler.main : $r14 = "-?" >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : $r15 = r0[i0]
org.joda.time.tz.ZoneInfoCompiler.main : $r15 = r0[i0] >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : $z4 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r15)
org.joda.time.tz.ZoneInfoCompiler.main : $z4 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r15) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : if $z4 == 0
org.joda.time.tz.ZoneInfoCompiler.main : if $z4 == 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : goto [?= $i4 = lengthof r0]
org.joda.time.tz.ZoneInfoCompiler.main : goto [?= $i4 = lengthof r0] >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : $i4 = lengthof r0
org.joda.time.tz.ZoneInfoCompiler.main : $i4 = lengthof r0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : if i0 < $i4
org.joda.time.tz.ZoneInfoCompiler.main : if i0 < $i4 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : $i5 = lengthof r0
org.joda.time.tz.ZoneInfoCompiler.main : $i5 = lengthof r0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : $i6 = $i5 - i0
org.joda.time.tz.ZoneInfoCompiler.main : $i6 = $i5 - i0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : r17 = newarray (java.io.File)[$i6]
org.joda.time.tz.ZoneInfoCompiler.main : r17 = newarray (java.io.File)[$i6] >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : i1 = 0
org.joda.time.tz.ZoneInfoCompiler.main : i1 = 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : $i7 = lengthof r0
org.joda.time.tz.ZoneInfoCompiler.main : $i7 = lengthof r0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : if i0 >= $i7
org.joda.time.tz.ZoneInfoCompiler.main : if i0 >= $i7 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : $i8 = i1
org.joda.time.tz.ZoneInfoCompiler.main : $i8 = i1 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : if r1 != null
org.joda.time.tz.ZoneInfoCompiler.main : if r1 != null >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : $r19 = new java.io.File
org.joda.time.tz.ZoneInfoCompiler.main : $r19 = new java.io.File >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : $r21 = r0[i0]
org.joda.time.tz.ZoneInfoCompiler.main : $r21 = r0[i0] >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : specialinvoke $r19.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r21)
org.joda.time.tz.ZoneInfoCompiler.main : specialinvoke $r19.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r21) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : r17[$i8] = $r19
org.joda.time.tz.ZoneInfoCompiler.main : r17[$i8] = $r19 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : i1 = i1 + 1
org.joda.time.tz.ZoneInfoCompiler.main : i1 = i1 + 1 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : goto [?= $i7 = lengthof r0]
org.joda.time.tz.ZoneInfoCompiler.main : goto [?= $i7 = lengthof r0] >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : $r22 = <org.joda.time.tz.ZoneInfoCompiler: java.lang.ThreadLocal cVerbose>
org.joda.time.tz.ZoneInfoCompiler.main : $r22 = <org.joda.time.tz.ZoneInfoCompiler: java.lang.ThreadLocal cVerbose> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : $r23 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0)
org.joda.time.tz.ZoneInfoCompiler.main : $r23 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : virtualinvoke $r22.<java.lang.ThreadLocal: void set(java.lang.Object)>($r23)
org.joda.time.tz.ZoneInfoCompiler.main : virtualinvoke $r22.<java.lang.ThreadLocal: void set(java.lang.Object)>($r23) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : $r24 = new org.joda.time.tz.ZoneInfoCompiler
org.joda.time.tz.ZoneInfoCompiler.main : $r24 = new org.joda.time.tz.ZoneInfoCompiler >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : specialinvoke $r24.<org.joda.time.tz.ZoneInfoCompiler: void <init>()>()
org.joda.time.tz.ZoneInfoCompiler.main : specialinvoke $r24.<org.joda.time.tz.ZoneInfoCompiler: void <init>()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : r25 = $r24
org.joda.time.tz.ZoneInfoCompiler.main : r25 = $r24 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.main : virtualinvoke r25.<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>(r2, r17)
org.joda.time.tz.ZoneInfoCompiler.main : virtualinvoke r25.<org.joda.time.tz.ZoneInfoCompiler: java.util.Map compile(java.io.File,java.io.File[])>(r2, r17) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : if r2 == null
org.joda.time.tz.ZoneInfoCompiler.compile : if r2 == null >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : i0 = 0
org.joda.time.tz.ZoneInfoCompiler.compile : i0 = 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : $i1 = lengthof r2
org.joda.time.tz.ZoneInfoCompiler.compile : $i1 = lengthof r2 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : if i0 >= $i1
org.joda.time.tz.ZoneInfoCompiler.compile : if i0 >= $i1 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : $r14 = new java.io.BufferedReader
org.joda.time.tz.ZoneInfoCompiler.compile : $r14 = new java.io.BufferedReader >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : $r3 = new java.io.FileReader
org.joda.time.tz.ZoneInfoCompiler.compile : $r3 = new java.io.FileReader >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : $r15 = r2[i0]
org.joda.time.tz.ZoneInfoCompiler.compile : $r15 = r2[i0] >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : specialinvoke $r3.<java.io.FileReader: void <init>(java.io.File)>($r15)
org.joda.time.tz.ZoneInfoCompiler.compile : specialinvoke $r3.<java.io.FileReader: void <init>(java.io.File)>($r15) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : specialinvoke $r14.<java.io.BufferedReader: void <init>(java.io.Reader)>($r3)
org.joda.time.tz.ZoneInfoCompiler.compile : specialinvoke $r14.<java.io.BufferedReader: void <init>(java.io.Reader)>($r3) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : r4 = $r14
org.joda.time.tz.ZoneInfoCompiler.compile : r4 = $r14 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : virtualinvoke r0.<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader)>(r4)
org.joda.time.tz.ZoneInfoCompiler.compile : virtualinvoke r0.<org.joda.time.tz.ZoneInfoCompiler: void parseDataFile(java.io.BufferedReader)>(r4) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDataFile : r2 = null
org.joda.time.tz.ZoneInfoCompiler.parseDataFile : r2 = null >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDataFile : $r9 = virtualinvoke r1.<java.io.BufferedReader: java.lang.String readLine()>()
org.joda.time.tz.ZoneInfoCompiler.parseDataFile : $r9 = virtualinvoke r1.<java.io.BufferedReader: java.lang.String readLine()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDataFile : r3 = $r9
org.joda.time.tz.ZoneInfoCompiler.parseDataFile : r3 = $r9 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDataFile : if $r9 == null
org.joda.time.tz.ZoneInfoCompiler.parseDataFile : if $r9 == null >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDataFile : r4 = virtualinvoke r3.<java.lang.String: java.lang.String trim()>()
org.joda.time.tz.ZoneInfoCompiler.parseDataFile : r4 = virtualinvoke r3.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDataFile : $i1 = virtualinvoke r4.<java.lang.String: int length()>()
org.joda.time.tz.ZoneInfoCompiler.parseDataFile : $i1 = virtualinvoke r4.<java.lang.String: int length()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDataFile : if $i1 == 0
org.joda.time.tz.ZoneInfoCompiler.parseDataFile : if $i1 == 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDataFile : $c2 = virtualinvoke r4.<java.lang.String: char charAt(int)>(0)
org.joda.time.tz.ZoneInfoCompiler.parseDataFile : $c2 = virtualinvoke r4.<java.lang.String: char charAt(int)>(0) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDataFile : if $c2 != 35
org.joda.time.tz.ZoneInfoCompiler.parseDataFile : if $c2 != 35 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDataFile : goto [?= $r9 = virtualinvoke r1.<java.io.BufferedReader: java.lang.String readLine()>()]
org.joda.time.tz.ZoneInfoCompiler.parseDataFile : goto [?= $r9 = virtualinvoke r1.<java.io.BufferedReader: java.lang.String readLine()>()] >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDataFile : i0 = virtualinvoke r3.<java.lang.String: int indexOf(int)>(35)
org.joda.time.tz.ZoneInfoCompiler.parseDataFile : i0 = virtualinvoke r3.<java.lang.String: int indexOf(int)>(35) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDataFile : if i0 < 0
org.joda.time.tz.ZoneInfoCompiler.parseDataFile : if i0 < 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDataFile : $r10 = new java.util.StringTokenizer
org.joda.time.tz.ZoneInfoCompiler.parseDataFile : $r10 = new java.util.StringTokenizer >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDataFile : specialinvoke $r10.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r3, " \t")
org.joda.time.tz.ZoneInfoCompiler.parseDataFile : specialinvoke $r10.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r3, " \t") >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDataFile : r5 = $r10
org.joda.time.tz.ZoneInfoCompiler.parseDataFile : r5 = $r10 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDataFile : $c3 = virtualinvoke r3.<java.lang.String: char charAt(int)>(0)
org.joda.time.tz.ZoneInfoCompiler.parseDataFile : $c3 = virtualinvoke r3.<java.lang.String: char charAt(int)>(0) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDataFile : $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c3)
org.joda.time.tz.ZoneInfoCompiler.parseDataFile : $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c3) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDataFile : if $z0 == 0
org.joda.time.tz.ZoneInfoCompiler.parseDataFile : if $z0 == 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDataFile : if r2 == null
org.joda.time.tz.ZoneInfoCompiler.parseDataFile : if r2 == null >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDataFile : $z3 = virtualinvoke r5.<java.util.StringTokenizer: boolean hasMoreTokens()>()
org.joda.time.tz.ZoneInfoCompiler.parseDataFile : $z3 = virtualinvoke r5.<java.util.StringTokenizer: boolean hasMoreTokens()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDataFile : if $z3 == 0
org.joda.time.tz.ZoneInfoCompiler.parseDataFile : if $z3 == 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDataFile : r6 = virtualinvoke r5.<java.util.StringTokenizer: java.lang.String nextToken()>()
org.joda.time.tz.ZoneInfoCompiler.parseDataFile : r6 = virtualinvoke r5.<java.util.StringTokenizer: java.lang.String nextToken()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDataFile : $z4 = virtualinvoke r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Rule")
org.joda.time.tz.ZoneInfoCompiler.parseDataFile : $z4 = virtualinvoke r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Rule") >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDataFile : if $z4 == 0
org.joda.time.tz.ZoneInfoCompiler.parseDataFile : if $z4 == 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDataFile : $r12 = new org.joda.time.tz.ZoneInfoCompiler$Rule
org.joda.time.tz.ZoneInfoCompiler.parseDataFile : $r12 = new org.joda.time.tz.ZoneInfoCompiler$Rule >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDataFile : specialinvoke $r12.<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>(r5)
org.joda.time.tz.ZoneInfoCompiler.parseDataFile : specialinvoke $r12.<org.joda.time.tz.ZoneInfoCompiler$Rule: void <init>(java.util.StringTokenizer)>(r5) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseYear : r1 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>()
org.joda.time.tz.ZoneInfoCompiler.parseYear : r1 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseYear : $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("minimum")
org.joda.time.tz.ZoneInfoCompiler.parseYear : $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("minimum") >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseYear : if $z0 != 0
org.joda.time.tz.ZoneInfoCompiler.parseYear : if $z0 != 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseYear : $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("min")
org.joda.time.tz.ZoneInfoCompiler.parseYear : $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("min") >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseYear : if $z1 == 0
org.joda.time.tz.ZoneInfoCompiler.parseYear : if $z1 == 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseYear : $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("maximum")
org.joda.time.tz.ZoneInfoCompiler.parseYear : $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("maximum") >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseYear : if $z2 != 0
org.joda.time.tz.ZoneInfoCompiler.parseYear : if $z2 != 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseYear : $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("max")
org.joda.time.tz.ZoneInfoCompiler.parseYear : $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("max") >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseYear : if $z3 == 0
org.joda.time.tz.ZoneInfoCompiler.parseYear : if $z3 == 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseYear : $z4 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("only")
org.joda.time.tz.ZoneInfoCompiler.parseYear : $z4 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("only") >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseYear : if $z4 == 0
org.joda.time.tz.ZoneInfoCompiler.parseYear : if $z4 == 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseYear : $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r1)
org.joda.time.tz.ZoneInfoCompiler.parseYear : $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r1) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseYear : return $i1
org.joda.time.tz.ZoneInfoCompiler.parseYear : return $i1 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseOptional : $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("-")
org.joda.time.tz.ZoneInfoCompiler.parseOptional : $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("-") >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseOptional : if $z0 == 0
org.joda.time.tz.ZoneInfoCompiler.parseOptional : if $z0 == 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseOptional : $r1 = null
org.joda.time.tz.ZoneInfoCompiler.parseOptional : $r1 = null >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseOptional : goto [?= return $r1]
org.joda.time.tz.ZoneInfoCompiler.parseOptional : goto [?= return $r1] >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseOptional : return $r1
org.joda.time.tz.ZoneInfoCompiler.parseOptional : return $r1 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseMonth : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>()
org.joda.time.tz.ZoneInfoCompiler.parseMonth : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>() >>>>>>>> org.joda.time.chrono.ISOChronology.getInstanceUTC : $r0 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC>
org.joda.time.chrono.ISOChronology.getInstanceUTC : $r0 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.ISOChronology.getInstanceUTC : return $r0
org.joda.time.chrono.ISOChronology.getInstanceUTC : return $r0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseMonth : r2 = virtualinvoke $r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.tz.ZoneInfoCompiler.parseMonth : r2 = virtualinvoke $r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeField monthOfYear()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.monthOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear>
org.joda.time.chrono.AssembledChronology.monthOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.monthOfYear : return $r1
org.joda.time.chrono.AssembledChronology.monthOfYear : return $r1 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseMonth : $r3 = <java.util.Locale: java.util.Locale ENGLISH>
org.joda.time.tz.ZoneInfoCompiler.parseMonth : $r3 = <java.util.Locale: java.util.Locale ENGLISH> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseMonth : $l0 = virtualinvoke r2.<org.joda.time.DateTimeField: long set(long,java.lang.String,java.util.Locale)>(0L, r0, $r3)
org.joda.time.tz.ZoneInfoCompiler.parseMonth : $l0 = virtualinvoke r2.<org.joda.time.DateTimeField: long set(long,java.lang.String,java.util.Locale)>(0L, r0, $r3) >>>>>>>> org.joda.time.field.BaseDateTimeField.set : i1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int convertText(java.lang.String,java.util.Locale)>(r1, r2)
org.joda.time.field.BaseDateTimeField.set : i1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int convertText(java.lang.String,java.util.Locale)>(r1, r2) >>>>>>>> org.joda.time.chrono.GJMonthOfYearDateTimeField.convertText : $r3 = staticinvoke <org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>(r2)
org.joda.time.chrono.GJMonthOfYearDateTimeField.convertText : $r3 = staticinvoke <org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>(r2) >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.forLocale : if r0 != null
org.joda.time.chrono.GJLocaleSymbols.forLocale : if r0 != null >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.forLocale : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0)
org.joda.time.chrono.GJLocaleSymbols.forLocale : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0) >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.forLocale : i0 = $i1 & 63
org.joda.time.chrono.GJLocaleSymbols.forLocale : i0 = $i1 & 63 >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.forLocale : $r4 = <org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols[] cFastCache>
org.joda.time.chrono.GJLocaleSymbols.forLocale : $r4 = <org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols[] cFastCache> >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.forLocale : r1 = $r4[i0]
org.joda.time.chrono.GJLocaleSymbols.forLocale : r1 = $r4[i0] >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.forLocale : if r1 == null
org.joda.time.chrono.GJLocaleSymbols.forLocale : if r1 == null >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.forLocale : $r5 = r1.<org.joda.time.chrono.GJLocaleSymbols: java.lang.ref.WeakReference iLocale>
org.joda.time.chrono.GJLocaleSymbols.forLocale : $r5 = r1.<org.joda.time.chrono.GJLocaleSymbols: java.lang.ref.WeakReference iLocale> >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.forLocale : $r6 = virtualinvoke $r5.<java.lang.ref.WeakReference: java.lang.Object get()>()
org.joda.time.chrono.GJLocaleSymbols.forLocale : $r6 = virtualinvoke $r5.<java.lang.ref.WeakReference: java.lang.Object get()>() >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.forLocale : if $r6 != r0
org.joda.time.chrono.GJLocaleSymbols.forLocale : if $r6 != r0 >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.forLocale : return r1
org.joda.time.chrono.GJLocaleSymbols.forLocale : return r1 >>>>>>>> org.joda.time.chrono.GJMonthOfYearDateTimeField.convertText : $i0 = virtualinvoke $r3.<org.joda.time.chrono.GJLocaleSymbols: int monthOfYearTextToValue(java.lang.String)>(r1)
org.joda.time.chrono.GJMonthOfYearDateTimeField.convertText : $i0 = virtualinvoke $r3.<org.joda.time.chrono.GJLocaleSymbols: int monthOfYearTextToValue(java.lang.String)>(r1) >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.monthOfYearTextToValue : $r4 = r0.<org.joda.time.chrono.GJLocaleSymbols: java.util.TreeMap iParseMonths>
org.joda.time.chrono.GJLocaleSymbols.monthOfYearTextToValue : $r4 = r0.<org.joda.time.chrono.GJLocaleSymbols: java.util.TreeMap iParseMonths> >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.monthOfYearTextToValue : $r5 = virtualinvoke $r4.<java.util.TreeMap: java.lang.Object get(java.lang.Object)>(r1)
org.joda.time.chrono.GJLocaleSymbols.monthOfYearTextToValue : $r5 = virtualinvoke $r4.<java.util.TreeMap: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.monthOfYearTextToValue : r2 = (java.lang.Integer) $r5
org.joda.time.chrono.GJLocaleSymbols.monthOfYearTextToValue : r2 = (java.lang.Integer) $r5 >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.monthOfYearTextToValue : if r2 == null
org.joda.time.chrono.GJLocaleSymbols.monthOfYearTextToValue : if r2 == null >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.monthOfYearTextToValue : $i0 = virtualinvoke r2.<java.lang.Integer: int intValue()>()
org.joda.time.chrono.GJLocaleSymbols.monthOfYearTextToValue : $i0 = virtualinvoke r2.<java.lang.Integer: int intValue()>() >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.monthOfYearTextToValue : return $i0
org.joda.time.chrono.GJLocaleSymbols.monthOfYearTextToValue : return $i0 >>>>>>>> org.joda.time.chrono.GJMonthOfYearDateTimeField.convertText : return $i0
org.joda.time.chrono.GJMonthOfYearDateTimeField.convertText : return $i0 >>>>>>>> org.joda.time.field.BaseDateTimeField.set : $l2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long set(long,int)>(l0, i1)
org.joda.time.field.BaseDateTimeField.set : $l2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long set(long,int)>(l0, i1) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $i5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $i5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, 1, $i5)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, 1, $i5) >>>>>>>> org.joda.time.field.FieldUtils.verifyValueBounds : if i0 < i1
org.joda.time.field.FieldUtils.verifyValueBounds : if i0 < i1 >>>>>>>> org.joda.time.field.FieldUtils.verifyValueBounds : if i0 <= i2
org.joda.time.field.FieldUtils.verifyValueBounds : if i0 <= i2 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getAverageMillisPerYearDividedByTwo()>()
org.joda.time.chrono.BasicChronology.getYear : l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getAverageMillisPerYearDividedByTwo()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getAverageMillisPerYearDividedByTwo : return 15778476000L
org.joda.time.chrono.GregorianChronology.getAverageMillisPerYearDividedByTwo : return 15778476000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $l7 = l0 >> 1
org.joda.time.chrono.BasicChronology.getYear : $l7 = l0 >> 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $l8 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getApproxMillisAtEpochDividedByTwo()>()
org.joda.time.chrono.BasicChronology.getYear : $l8 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getApproxMillisAtEpochDividedByTwo()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getApproxMillisAtEpochDividedByTwo : return 31083597720000L
org.joda.time.chrono.GregorianChronology.getApproxMillisAtEpochDividedByTwo : return 31083597720000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l2 = $l7 + $l8
org.joda.time.chrono.BasicChronology.getYear : l2 = $l7 + $l8 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $b9 = l2 cmp 0L
org.joda.time.chrono.BasicChronology.getYear : $b9 = l2 cmp 0L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $b9 >= 0
org.joda.time.chrono.BasicChronology.getYear : if $b9 >= 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $l11 = l2 / l1
org.joda.time.chrono.BasicChronology.getYear : $l11 = l2 / l1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : i3 = (int) $l11
org.joda.time.chrono.BasicChronology.getYear : i3 = (int) $l11 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i3)
org.joda.time.chrono.BasicChronology.getYear : l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i3) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMillis : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>(i0)
org.joda.time.chrono.BasicChronology.getYearMillis : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $r2 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache>
org.joda.time.chrono.BasicChronology.getYearInfo : $r2 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $i1 = i0 & 1023
org.joda.time.chrono.BasicChronology.getYearInfo : $i1 = i0 & 1023 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : r1 = $r2[$i1]
org.joda.time.chrono.BasicChronology.getYearInfo : r1 = $r2[$i1] >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : if r1 == null
org.joda.time.chrono.BasicChronology.getYearInfo : if r1 == null >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $i2 = r1.<org.joda.time.chrono.BasicChronology$YearInfo: int iYear>
org.joda.time.chrono.BasicChronology.getYearInfo : $i2 = r1.<org.joda.time.chrono.BasicChronology$YearInfo: int iYear> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : if $i2 == i0
org.joda.time.chrono.BasicChronology.getYearInfo : if $i2 == i0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : return r1
org.joda.time.chrono.BasicChronology.getYearInfo : return r1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMillis : $l1 = $r1.<org.joda.time.chrono.BasicChronology$YearInfo: long iFirstDayMillis>
org.joda.time.chrono.BasicChronology.getYearMillis : $l1 = $r1.<org.joda.time.chrono.BasicChronology$YearInfo: long iFirstDayMillis> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMillis : return $l1
org.joda.time.chrono.BasicChronology.getYearMillis : return $l1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l5 = l0 - l4
org.joda.time.chrono.BasicChronology.getYear : l5 = l0 - l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $b12 = l5 cmp 0L
org.joda.time.chrono.BasicChronology.getYear : $b12 = l5 cmp 0L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $b12 >= 0
org.joda.time.chrono.BasicChronology.getYear : if $b12 >= 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $b13 = l5 cmp 31536000000L
org.joda.time.chrono.BasicChronology.getYear : $b13 = l5 cmp 31536000000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $b13 < 0
org.joda.time.chrono.BasicChronology.getYear : if $b13 < 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : return i3
org.joda.time.chrono.BasicChronology.getYear : return i3 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : i3 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int)>(l0, i2)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : i3 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int)>(l0, i2) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i1)
org.joda.time.chrono.BasicChronology.getDayOfMonth : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMillis(int)>(i1)
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMillis(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l4 = l0 - $l3
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l4 = l0 - $l3 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l5 = $l4 >> 10
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l5 = $l4 >> 10 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : i2 = (int) $l5
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : i2 = (int) $l5 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i1)
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i1) >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : $i1 = i0 & 3
org.joda.time.chrono.GregorianChronology.isLeapYear : $i1 = i0 & 3 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : if $i1 != 0
org.joda.time.chrono.GregorianChronology.isLeapYear : if $i1 != 0 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : $z0 = 0
org.joda.time.chrono.GregorianChronology.isLeapYear : $z0 = 0 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : return $z0
org.joda.time.chrono.GregorianChronology.isLeapYear : return $z0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if $z0 == 0
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 15271875
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 15271875 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 7593750
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 7593750 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 2615625
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 2615625 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 1
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 1 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : goto [?= return $b6]
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : goto [?= return $b6] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : return $b6
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : return $b6 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l0, i1, i2)
org.joda.time.chrono.BasicChronology.getDayOfMonth : $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l0, i1, i2) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1)
org.joda.time.chrono.BasicChronology.getDayOfMonth : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i1, i2)
org.joda.time.chrono.BasicChronology.getDayOfMonth : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i1, i2) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0)
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : if $z0 == 0
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $r2 = <org.joda.time.chrono.BasicGJChronology: long[] MIN_TOTAL_MILLIS_BY_MONTH_ARRAY>
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $r2 = <org.joda.time.chrono.BasicGJChronology: long[] MIN_TOTAL_MILLIS_BY_MONTH_ARRAY> >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $i4 = i1 - 1
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $i4 = i1 - 1 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $l5 = $r2[$i4]
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $l5 = $r2[$i4] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : return $l5
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : return $l5 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : l5 = l3 + $l4
org.joda.time.chrono.BasicChronology.getDayOfMonth : l5 = l3 + $l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $l6 = l0 - l5
org.joda.time.chrono.BasicChronology.getDayOfMonth : $l6 = l0 - l5 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $l7 = $l6 / 86400000L
org.joda.time.chrono.BasicChronology.getDayOfMonth : $l7 = $l6 / 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $i8 = (int) $l7
org.joda.time.chrono.BasicChronology.getDayOfMonth : $i8 = (int) $l7 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $i9 = $i8 + 1
org.joda.time.chrono.BasicChronology.getDayOfMonth : $i9 = $i8 + 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : return $i9
org.joda.time.chrono.BasicChronology.getDayOfMonth : return $i9 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : return $i3
org.joda.time.chrono.BasicChronology.getDayOfMonth : return $i3 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : i4 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>(i2, i1)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : i4 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>(i2, i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0)
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : if $z0 == 0
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $r2 = <org.joda.time.chrono.BasicGJChronology: int[] MIN_DAYS_PER_MONTH_ARRAY>
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $r2 = <org.joda.time.chrono.BasicGJChronology: int[] MIN_DAYS_PER_MONTH_ARRAY> >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i4 = i1 - 1
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i4 = i1 - 1 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i5 = $r2[$i4]
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i5 = $r2[$i4] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : return $i5
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : return $i5 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : if i3 <= i4
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : if i3 <= i4 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r4 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r4 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $l6 = virtualinvoke $r4.<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>(i2, i1, i3)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $l6 = virtualinvoke $r4.<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>(i2, i1, i3) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0)
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i0, i1)
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i0, i1) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l5 = l3 + $l4
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l5 = l3 + $l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $i6 = i2 - 1
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $i6 = i2 - 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l7 = (long) $i6
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l7 = (long) $i6 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l8 = $l7 * 86400000L
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l8 = $l7 * 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l9 = l5 + $l8
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l9 = l5 + $l8 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : return $l9
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : return $l9 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $r5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $i7 = virtualinvoke $r5.<org.joda.time.chrono.BasicChronology: int getMillisOfDay(long)>(l0)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $i7 = virtualinvoke $r5.<org.joda.time.chrono.BasicChronology: int getMillisOfDay(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : $b1 = l0 cmp 0L
org.joda.time.chrono.BasicChronology.getMillisOfDay : $b1 = l0 cmp 0L >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : if $b1 < 0
org.joda.time.chrono.BasicChronology.getMillisOfDay : if $b1 < 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : $l2 = l0 % 86400000L
org.joda.time.chrono.BasicChronology.getMillisOfDay : $l2 = l0 % 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : $i3 = (int) $l2
org.joda.time.chrono.BasicChronology.getMillisOfDay : $i3 = (int) $l2 >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : return $i3
org.joda.time.chrono.BasicChronology.getMillisOfDay : return $i3 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $l8 = (long) $i7
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $l8 = (long) $i7 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $l9 = $l6 + $l8
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : $l9 = $l6 + $l8 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : return $l9
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : return $l9 >>>>>>>> org.joda.time.field.BaseDateTimeField.set : return $l2
org.joda.time.field.BaseDateTimeField.set : return $l2 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseMonth : $i1 = virtualinvoke r2.<org.joda.time.DateTimeField: int get(long)>($l0)
org.joda.time.tz.ZoneInfoCompiler.parseMonth : $i1 = virtualinvoke r2.<org.joda.time.DateTimeField: int get(long)>($l0) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long)>(l0)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getMonthOfYear : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicChronology.getMonthOfYear : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getMonthOfYear : $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, $i1)
org.joda.time.chrono.BasicChronology.getMonthOfYear : $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, $i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 4978125
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 4978125 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 3
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 3 >>>>>>>> org.joda.time.chrono.BasicChronology.getMonthOfYear : return $i2
org.joda.time.chrono.BasicChronology.getMonthOfYear : return $i2 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : return $i1
org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : return $i1 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseMonth : return $i1
org.joda.time.tz.ZoneInfoCompiler.parseMonth : return $i1 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDayOfWeek : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>()
org.joda.time.tz.ZoneInfoCompiler.parseDayOfWeek : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDayOfWeek : r2 = virtualinvoke $r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeField dayOfWeek()>()
org.joda.time.tz.ZoneInfoCompiler.parseDayOfWeek : r2 = virtualinvoke $r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeField dayOfWeek()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfWeek : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfWeek>
org.joda.time.chrono.AssembledChronology.dayOfWeek : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfWeek> >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfWeek : return $r1
org.joda.time.chrono.AssembledChronology.dayOfWeek : return $r1 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDayOfWeek : $r3 = <java.util.Locale: java.util.Locale ENGLISH>
org.joda.time.tz.ZoneInfoCompiler.parseDayOfWeek : $r3 = <java.util.Locale: java.util.Locale ENGLISH> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDayOfWeek : $l0 = virtualinvoke r2.<org.joda.time.DateTimeField: long set(long,java.lang.String,java.util.Locale)>(0L, r0, $r3)
org.joda.time.tz.ZoneInfoCompiler.parseDayOfWeek : $l0 = virtualinvoke r2.<org.joda.time.DateTimeField: long set(long,java.lang.String,java.util.Locale)>(0L, r0, $r3) >>>>>>>> org.joda.time.chrono.GJDayOfWeekDateTimeField.convertText : $r3 = staticinvoke <org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>(r2)
org.joda.time.chrono.GJDayOfWeekDateTimeField.convertText : $r3 = staticinvoke <org.joda.time.chrono.GJLocaleSymbols: org.joda.time.chrono.GJLocaleSymbols forLocale(java.util.Locale)>(r2) >>>>>>>> org.joda.time.chrono.GJDayOfWeekDateTimeField.convertText : $i0 = virtualinvoke $r3.<org.joda.time.chrono.GJLocaleSymbols: int dayOfWeekTextToValue(java.lang.String)>(r1)
org.joda.time.chrono.GJDayOfWeekDateTimeField.convertText : $i0 = virtualinvoke $r3.<org.joda.time.chrono.GJLocaleSymbols: int dayOfWeekTextToValue(java.lang.String)>(r1) >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.dayOfWeekTextToValue : $r4 = r0.<org.joda.time.chrono.GJLocaleSymbols: java.util.TreeMap iParseDaysOfWeek>
org.joda.time.chrono.GJLocaleSymbols.dayOfWeekTextToValue : $r4 = r0.<org.joda.time.chrono.GJLocaleSymbols: java.util.TreeMap iParseDaysOfWeek> >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.dayOfWeekTextToValue : $r5 = virtualinvoke $r4.<java.util.TreeMap: java.lang.Object get(java.lang.Object)>(r1)
org.joda.time.chrono.GJLocaleSymbols.dayOfWeekTextToValue : $r5 = virtualinvoke $r4.<java.util.TreeMap: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.dayOfWeekTextToValue : r2 = (java.lang.Integer) $r5
org.joda.time.chrono.GJLocaleSymbols.dayOfWeekTextToValue : r2 = (java.lang.Integer) $r5 >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.dayOfWeekTextToValue : if r2 == null
org.joda.time.chrono.GJLocaleSymbols.dayOfWeekTextToValue : if r2 == null >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.dayOfWeekTextToValue : $i0 = virtualinvoke r2.<java.lang.Integer: int intValue()>()
org.joda.time.chrono.GJLocaleSymbols.dayOfWeekTextToValue : $i0 = virtualinvoke r2.<java.lang.Integer: int intValue()>() >>>>>>>> org.joda.time.chrono.GJLocaleSymbols.dayOfWeekTextToValue : return $i0
org.joda.time.chrono.GJLocaleSymbols.dayOfWeekTextToValue : return $i0 >>>>>>>> org.joda.time.chrono.GJDayOfWeekDateTimeField.convertText : return $i0
org.joda.time.chrono.GJDayOfWeekDateTimeField.convertText : return $i0 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : $i2 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int getMinimumValue()>()
org.joda.time.field.PreciseDurationDateTimeField.set : $i2 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int getMinimumValue()>() >>>>>>>> org.joda.time.chrono.GJDayOfWeekDateTimeField.getMinimumValue : return 1
org.joda.time.chrono.GJDayOfWeekDateTimeField.getMinimumValue : return 1 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : $i3 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int getMaximumValueForSet(long,int)>(l0, i1)
org.joda.time.field.PreciseDurationDateTimeField.set : $i3 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int getMaximumValueForSet(long,int)>(l0, i1) >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getMaximumValueForSet : $i2 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int getMaximumValue(long)>(l0)
org.joda.time.field.PreciseDurationDateTimeField.getMaximumValueForSet : $i2 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int getMaximumValue(long)>(l0) >>>>>>>> org.joda.time.field.BaseDateTimeField.getMaximumValue : $i1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue()>()
org.joda.time.field.BaseDateTimeField.getMaximumValue : $i1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.chrono.GJDayOfWeekDateTimeField.getMaximumValue : return 7
org.joda.time.chrono.GJDayOfWeekDateTimeField.getMaximumValue : return 7 >>>>>>>> org.joda.time.field.BaseDateTimeField.getMaximumValue : return $i1
org.joda.time.field.BaseDateTimeField.getMaximumValue : return $i1 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getMaximumValueForSet : return $i2
org.joda.time.field.PreciseDurationDateTimeField.getMaximumValueForSet : return $i2 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i2, $i3)
org.joda.time.field.PreciseDurationDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i2, $i3) >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : $i4 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int get(long)>(l0)
org.joda.time.field.PreciseDurationDateTimeField.set : $i4 = virtualinvoke r0.<org.joda.time.field.PreciseDurationDateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.chrono.GJDayOfWeekDateTimeField.get : $r1 = r0.<org.joda.time.chrono.GJDayOfWeekDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.GJDayOfWeekDateTimeField.get : $r1 = r0.<org.joda.time.chrono.GJDayOfWeekDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.GJDayOfWeekDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDayOfWeek(long)>(l0)
org.joda.time.chrono.GJDayOfWeekDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDayOfWeek(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : $b2 = l0 cmp 0L
org.joda.time.chrono.BasicChronology.getDayOfWeek : $b2 = l0 cmp 0L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : if $b2 < 0
org.joda.time.chrono.BasicChronology.getDayOfWeek : if $b2 < 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : l1 = l0 / 86400000L
org.joda.time.chrono.BasicChronology.getDayOfWeek : l1 = l0 / 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : goto [?= $l9 = l1 + 3L]
org.joda.time.chrono.BasicChronology.getDayOfWeek : goto [?= $l9 = l1 + 3L] >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : $l9 = l1 + 3L
org.joda.time.chrono.BasicChronology.getDayOfWeek : $l9 = l1 + 3L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : $l10 = $l9 % 7L
org.joda.time.chrono.BasicChronology.getDayOfWeek : $l10 = $l9 % 7L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : $i11 = (int) $l10
org.joda.time.chrono.BasicChronology.getDayOfWeek : $i11 = (int) $l10 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : $i12 = 1 + $i11
org.joda.time.chrono.BasicChronology.getDayOfWeek : $i12 = 1 + $i11 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : return $i12
org.joda.time.chrono.BasicChronology.getDayOfWeek : return $i12 >>>>>>>> org.joda.time.chrono.GJDayOfWeekDateTimeField.get : return $i1
org.joda.time.chrono.GJDayOfWeekDateTimeField.get : return $i1 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : $i5 = i1 - $i4
org.joda.time.field.PreciseDurationDateTimeField.set : $i5 = i1 - $i4 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : $l6 = (long) $i5
org.joda.time.field.PreciseDurationDateTimeField.set : $l6 = (long) $i5 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : $l7 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDurationDateTimeField.set : $l7 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : $l8 = $l6 * $l7
org.joda.time.field.PreciseDurationDateTimeField.set : $l8 = $l6 * $l7 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : $l9 = l0 + $l8
org.joda.time.field.PreciseDurationDateTimeField.set : $l9 = l0 + $l8 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.set : return $l9
org.joda.time.field.PreciseDurationDateTimeField.set : return $l9 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDayOfWeek : $i1 = virtualinvoke r2.<org.joda.time.DateTimeField: int get(long)>($l0)
org.joda.time.tz.ZoneInfoCompiler.parseDayOfWeek : $i1 = virtualinvoke r2.<org.joda.time.DateTimeField: int get(long)>($l0) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDayOfWeek : return $i1
org.joda.time.tz.ZoneInfoCompiler.parseDayOfWeek : return $i1 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseZoneChar : lookupswitch(c0) {     case 71:
org.joda.time.tz.ZoneInfoCompiler.parseZoneChar : lookupswitch(c0) {     case 71: >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseZoneChar : return 119
org.joda.time.tz.ZoneInfoCompiler.parseZoneChar : return 119 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseTime : r1 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>()
org.joda.time.tz.ZoneInfoCompiler.parseTime : r1 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hourMinuteSecondFraction()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.hourMinuteSecondFraction : $r0 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hmsf>
org.joda.time.format.ISODateTimeFormat.hourMinuteSecondFraction : $r0 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hmsf> >>>>>>>> org.joda.time.format.ISODateTimeFormat.hourMinuteSecondFraction : if $r0 != null
org.joda.time.format.ISODateTimeFormat.hourMinuteSecondFraction : if $r0 != null >>>>>>>> org.joda.time.format.ISODateTimeFormat.hourMinuteSecondFraction : $r11 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hmsf>
org.joda.time.format.ISODateTimeFormat.hourMinuteSecondFraction : $r11 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter hmsf> >>>>>>>> org.joda.time.format.ISODateTimeFormat.hourMinuteSecondFraction : return $r11
org.joda.time.format.ISODateTimeFormat.hourMinuteSecondFraction : return $r11 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseTime : $r4 = new org.joda.time.MutableDateTime
org.joda.time.tz.ZoneInfoCompiler.parseTime : $r4 = new org.joda.time.MutableDateTime >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseTime : $r2 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: org.joda.time.Chronology getLenientISOChronology()>()
org.joda.time.tz.ZoneInfoCompiler.parseTime : $r2 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: org.joda.time.Chronology getLenientISOChronology()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.getLenientISOChronology : $r0 = <org.joda.time.tz.ZoneInfoCompiler: org.joda.time.Chronology cLenientISO>
org.joda.time.tz.ZoneInfoCompiler.getLenientISOChronology : $r0 = <org.joda.time.tz.ZoneInfoCompiler: org.joda.time.Chronology cLenientISO> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.getLenientISOChronology : if $r0 != null
org.joda.time.tz.ZoneInfoCompiler.getLenientISOChronology : if $r0 != null >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.getLenientISOChronology : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>()
org.joda.time.tz.ZoneInfoCompiler.getLenientISOChronology : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.getLenientISOChronology : $r2 = staticinvoke <org.joda.time.chrono.LenientChronology: org.joda.time.chrono.LenientChronology getInstance(org.joda.time.Chronology)>($r1)
org.joda.time.tz.ZoneInfoCompiler.getLenientISOChronology : $r2 = staticinvoke <org.joda.time.chrono.LenientChronology: org.joda.time.chrono.LenientChronology getInstance(org.joda.time.Chronology)>($r1) >>>>>>>> org.joda.time.chrono.LenientChronology.getInstance : if r0 != null
org.joda.time.chrono.LenientChronology.getInstance : if r0 != null >>>>>>>> org.joda.time.chrono.LenientChronology.getInstance : $r2 = new org.joda.time.chrono.LenientChronology
org.joda.time.chrono.LenientChronology.getInstance : $r2 = new org.joda.time.chrono.LenientChronology >>>>>>>> org.joda.time.chrono.LenientChronology.getInstance : specialinvoke $r2.<org.joda.time.chrono.LenientChronology: void <init>(org.joda.time.Chronology)>(r0)
org.joda.time.chrono.LenientChronology.getInstance : specialinvoke $r2.<org.joda.time.chrono.LenientChronology: void <init>(org.joda.time.Chronology)>(r0) >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r1 = new org.joda.time.chrono.AssembledChronology$Fields
org.joda.time.chrono.AssembledChronology.setFields : $r1 = new org.joda.time.chrono.AssembledChronology$Fields >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : specialinvoke $r1.<org.joda.time.chrono.AssembledChronology$Fields: void <init>()>()
org.joda.time.chrono.AssembledChronology.setFields : specialinvoke $r1.<org.joda.time.chrono.AssembledChronology$Fields: void <init>()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r2 = $r1
org.joda.time.chrono.AssembledChronology.setFields : r2 = $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r4 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.setFields : $r4 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r4 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r4 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r5 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.setFields : $r5 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : virtualinvoke r2.<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>($r5)
org.joda.time.chrono.AssembledChronology.setFields : virtualinvoke r2.<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>($r5) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField millis()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField millis()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.millis : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMillis>
org.joda.time.chrono.AssembledChronology.millis : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMillis> >>>>>>>> org.joda.time.chrono.AssembledChronology.millis : return $r1
org.joda.time.chrono.AssembledChronology.millis : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r2 = $r3
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r2 = $r3 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z0 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r3)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z0 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r3) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.isSupported : if r0 != null
org.joda.time.chrono.AssembledChronology$Fields.isSupported : if r0 != null >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.isSupported : $z0 = virtualinvoke r0.<org.joda.time.DurationField: boolean isSupported()>()
org.joda.time.chrono.AssembledChronology$Fields.isSupported : $z0 = virtualinvoke r0.<org.joda.time.DurationField: boolean isSupported()>() >>>>>>>> org.joda.time.field.MillisDurationField.isSupported : return 1
org.joda.time.field.MillisDurationField.isSupported : return 1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.isSupported : return $z0
org.joda.time.chrono.AssembledChronology$Fields.isSupported : return $z0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z0 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z0 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField millis> = r2
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField millis> = r2 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField seconds()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField seconds()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.seconds : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iSeconds>
org.joda.time.chrono.AssembledChronology.seconds : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iSeconds> >>>>>>>> org.joda.time.chrono.AssembledChronology.seconds : return $r1
org.joda.time.chrono.AssembledChronology.seconds : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r5 = $r4
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r5 = $r4 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z1 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r4)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z1 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r4) >>>>>>>> org.joda.time.field.BaseDurationField.isSupported : return 1
org.joda.time.field.BaseDurationField.isSupported : return 1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z1 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z1 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField seconds> = r5
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField seconds> = r5 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r6 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField minutes()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r6 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField minutes()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.minutes : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMinutes>
org.joda.time.chrono.AssembledChronology.minutes : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMinutes> >>>>>>>> org.joda.time.chrono.AssembledChronology.minutes : return $r1
org.joda.time.chrono.AssembledChronology.minutes : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r7 = $r6
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r7 = $r6 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z2 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r6)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z2 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r6) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z2 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z2 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField minutes> = r7
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField minutes> = r7 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r8 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField hours()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r8 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField hours()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.hours : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHours>
org.joda.time.chrono.AssembledChronology.hours : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHours> >>>>>>>> org.joda.time.chrono.AssembledChronology.hours : return $r1
org.joda.time.chrono.AssembledChronology.hours : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r9 = $r8
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r9 = $r8 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z3 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r8)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z3 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r8) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z3 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z3 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField hours> = r9
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField hours> = r9 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r10 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField halfdays()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r10 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField halfdays()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.halfdays : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHalfdays>
org.joda.time.chrono.AssembledChronology.halfdays : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHalfdays> >>>>>>>> org.joda.time.chrono.AssembledChronology.halfdays : return $r1
org.joda.time.chrono.AssembledChronology.halfdays : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r11 = $r10
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r11 = $r10 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z4 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r10)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z4 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r10) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z4 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z4 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField halfdays> = r11
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField halfdays> = r11 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r12 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField days()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r12 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField days()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.days : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays>
org.joda.time.chrono.AssembledChronology.days : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays> >>>>>>>> org.joda.time.chrono.AssembledChronology.days : return $r1
org.joda.time.chrono.AssembledChronology.days : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r13 = $r12
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r13 = $r12 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z5 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r12)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z5 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r12) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z5 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z5 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days> = r13
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days> = r13 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r14 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField weeks()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r14 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField weeks()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.weeks : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeeks>
org.joda.time.chrono.AssembledChronology.weeks : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeeks> >>>>>>>> org.joda.time.chrono.AssembledChronology.weeks : return $r1
org.joda.time.chrono.AssembledChronology.weeks : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r15 = $r14
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r15 = $r14 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z6 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r14)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z6 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r14) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z6 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z6 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weeks> = r15
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weeks> = r15 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r16 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField weekyears()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r16 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField weekyears()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.weekyears : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeekyears>
org.joda.time.chrono.AssembledChronology.weekyears : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeekyears> >>>>>>>> org.joda.time.chrono.AssembledChronology.weekyears : return $r1
org.joda.time.chrono.AssembledChronology.weekyears : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r17 = $r16
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r17 = $r16 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z7 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r16)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z7 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r16) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z7 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z7 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears> = r17
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears> = r17 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r18 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField months()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r18 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField months()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.months : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMonths>
org.joda.time.chrono.AssembledChronology.months : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMonths> >>>>>>>> org.joda.time.chrono.AssembledChronology.months : return $r1
org.joda.time.chrono.AssembledChronology.months : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r19 = $r18
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r19 = $r18 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z8 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r18)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z8 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r18) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z8 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z8 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months> = r19
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months> = r19 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r20 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField years()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r20 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField years()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.years : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iYears>
org.joda.time.chrono.AssembledChronology.years : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iYears> >>>>>>>> org.joda.time.chrono.AssembledChronology.years : return $r1
org.joda.time.chrono.AssembledChronology.years : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r21 = $r20
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r21 = $r20 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z9 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r20)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z9 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r20) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z9 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z9 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years> = r21
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years> = r21 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r22 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField centuries()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r22 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField centuries()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.centuries : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iCenturies>
org.joda.time.chrono.AssembledChronology.centuries : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iCenturies> >>>>>>>> org.joda.time.chrono.AssembledChronology.centuries : return $r1
org.joda.time.chrono.AssembledChronology.centuries : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r23 = $r22
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r23 = $r22 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z10 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r22)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z10 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r22) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z10 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z10 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries> = r23
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries> = r23 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r24 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField eras()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r24 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField eras()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.eras : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iEras>
org.joda.time.chrono.AssembledChronology.eras : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iEras> >>>>>>>> org.joda.time.chrono.AssembledChronology.eras : return $r1
org.joda.time.chrono.AssembledChronology.eras : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r25 = $r24
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r25 = $r24 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z11 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r24)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z11 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r24) >>>>>>>> org.joda.time.field.UnsupportedDurationField.isSupported : return 0
org.joda.time.field.UnsupportedDurationField.isSupported : return 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z11 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z11 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r26 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r26 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.millisOfSecond : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfSecond>
org.joda.time.chrono.AssembledChronology.millisOfSecond : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfSecond> >>>>>>>> org.joda.time.chrono.AssembledChronology.millisOfSecond : return $r1
org.joda.time.chrono.AssembledChronology.millisOfSecond : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r27 = $r26
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r27 = $r26 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z12 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r26)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z12 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r26) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.isSupported : $z0 = virtualinvoke r0.<org.joda.time.DateTimeField: boolean isSupported()>()
org.joda.time.chrono.AssembledChronology$Fields.isSupported : $z0 = virtualinvoke r0.<org.joda.time.DateTimeField: boolean isSupported()>() >>>>>>>> org.joda.time.field.BaseDateTimeField.isSupported : return 1
org.joda.time.field.BaseDateTimeField.isSupported : return 1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z12 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z12 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond> = r27
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond> = r27 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r28 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r28 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.millisOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay>
org.joda.time.chrono.AssembledChronology.millisOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.millisOfDay : return $r1
org.joda.time.chrono.AssembledChronology.millisOfDay : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r29 = $r28
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r29 = $r28 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z13 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r28)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z13 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r28) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z13 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z13 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay> = r29
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay> = r29 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r30 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r30 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.secondOfMinute : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfMinute>
org.joda.time.chrono.AssembledChronology.secondOfMinute : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfMinute> >>>>>>>> org.joda.time.chrono.AssembledChronology.secondOfMinute : return $r1
org.joda.time.chrono.AssembledChronology.secondOfMinute : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r31 = $r30
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r31 = $r30 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z14 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r30)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z14 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r30) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z14 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z14 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute> = r31
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute> = r31 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r32 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfDay()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r32 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfDay()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.secondOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfDay>
org.joda.time.chrono.AssembledChronology.secondOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.secondOfDay : return $r1
org.joda.time.chrono.AssembledChronology.secondOfDay : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r33 = $r32
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r33 = $r32 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z15 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r32)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z15 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r32) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z15 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z15 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay> = r33
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay> = r33 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r34 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r34 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.minuteOfHour : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfHour>
org.joda.time.chrono.AssembledChronology.minuteOfHour : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfHour> >>>>>>>> org.joda.time.chrono.AssembledChronology.minuteOfHour : return $r1
org.joda.time.chrono.AssembledChronology.minuteOfHour : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r35 = $r34
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r35 = $r34 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z16 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r34)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z16 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r34) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z16 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z16 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour> = r35
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour> = r35 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r36 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfDay()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r36 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfDay()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.minuteOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfDay>
org.joda.time.chrono.AssembledChronology.minuteOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.minuteOfDay : return $r1
org.joda.time.chrono.AssembledChronology.minuteOfDay : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r37 = $r36
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r37 = $r36 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z17 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r36)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z17 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r36) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z17 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z17 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay> = r37
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay> = r37 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r38 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r38 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.hourOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay>
org.joda.time.chrono.AssembledChronology.hourOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.hourOfDay : return $r1
org.joda.time.chrono.AssembledChronology.hourOfDay : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r39 = $r38
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r39 = $r38 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z18 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r38)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z18 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r38) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z18 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z18 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay> = r39
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay> = r39 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r40 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField clockhourOfDay()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r40 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField clockhourOfDay()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.clockhourOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfDay>
org.joda.time.chrono.AssembledChronology.clockhourOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.clockhourOfDay : return $r1
org.joda.time.chrono.AssembledChronology.clockhourOfDay : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r41 = $r40
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r41 = $r40 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z19 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r40)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z19 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r40) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z19 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z19 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay> = r41
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay> = r41 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r42 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfHalfday()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r42 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfHalfday()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.hourOfHalfday : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfHalfday>
org.joda.time.chrono.AssembledChronology.hourOfHalfday : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfHalfday> >>>>>>>> org.joda.time.chrono.AssembledChronology.hourOfHalfday : return $r1
org.joda.time.chrono.AssembledChronology.hourOfHalfday : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r43 = $r42
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r43 = $r42 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z20 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r42)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z20 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r42) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z20 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z20 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday> = r43
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday> = r43 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r44 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField clockhourOfHalfday()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r44 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField clockhourOfHalfday()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.clockhourOfHalfday : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfHalfday>
org.joda.time.chrono.AssembledChronology.clockhourOfHalfday : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfHalfday> >>>>>>>> org.joda.time.chrono.AssembledChronology.clockhourOfHalfday : return $r1
org.joda.time.chrono.AssembledChronology.clockhourOfHalfday : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r45 = $r44
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r45 = $r44 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z21 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r44)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z21 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r44) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z21 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z21 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday> = r45
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday> = r45 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r46 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField halfdayOfDay()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r46 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField halfdayOfDay()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.halfdayOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHalfdayOfDay>
org.joda.time.chrono.AssembledChronology.halfdayOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHalfdayOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.halfdayOfDay : return $r1
org.joda.time.chrono.AssembledChronology.halfdayOfDay : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r47 = $r46
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r47 = $r46 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z22 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r46)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z22 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r46) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z22 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z22 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay> = r47
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay> = r47 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r48 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r48 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>() >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r49 = $r48
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r49 = $r48 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z23 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r48)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z23 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r48) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z23 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z23 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek> = r49
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek> = r49 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r50 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r50 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfMonth : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth>
org.joda.time.chrono.AssembledChronology.dayOfMonth : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth> >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfMonth : return $r1
org.joda.time.chrono.AssembledChronology.dayOfMonth : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r51 = $r50
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r51 = $r50 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z24 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r50)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z24 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r50) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z24 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z24 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth> = r51
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth> = r51 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r52 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfYear()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r52 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfYear()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfYear>
org.joda.time.chrono.AssembledChronology.dayOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfYear : return $r1
org.joda.time.chrono.AssembledChronology.dayOfYear : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r53 = $r52
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r53 = $r52 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z25 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r52)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z25 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r52) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z25 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z25 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear> = r53
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear> = r53 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r54 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekOfWeekyear()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r54 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekOfWeekyear()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.weekOfWeekyear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekOfWeekyear>
org.joda.time.chrono.AssembledChronology.weekOfWeekyear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekOfWeekyear> >>>>>>>> org.joda.time.chrono.AssembledChronology.weekOfWeekyear : return $r1
org.joda.time.chrono.AssembledChronology.weekOfWeekyear : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r55 = $r54
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r55 = $r54 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z26 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r54)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z26 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r54) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z26 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z26 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear> = r55
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear> = r55 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r56 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekyear()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r56 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekyear()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.weekyear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyear>
org.joda.time.chrono.AssembledChronology.weekyear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyear> >>>>>>>> org.joda.time.chrono.AssembledChronology.weekyear : return $r1
org.joda.time.chrono.AssembledChronology.weekyear : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r57 = $r56
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r57 = $r56 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z27 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r56)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z27 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r56) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z27 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z27 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> = r57
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> = r57 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r58 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekyearOfCentury()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r58 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekyearOfCentury()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.weekyearOfCentury : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyearOfCentury>
org.joda.time.chrono.AssembledChronology.weekyearOfCentury : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyearOfCentury> >>>>>>>> org.joda.time.chrono.AssembledChronology.weekyearOfCentury : return $r1
org.joda.time.chrono.AssembledChronology.weekyearOfCentury : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r59 = $r58
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r59 = $r58 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z28 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r58)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z28 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r58) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z28 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z28 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> = r59
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> = r59 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r60 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r60 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>() >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r61 = $r60
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r61 = $r60 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z29 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r60)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z29 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r60) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z29 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z29 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> = r61
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> = r61 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r62 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r62 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.year : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear>
org.joda.time.chrono.AssembledChronology.year : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.year : return $r1
org.joda.time.chrono.AssembledChronology.year : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r63 = $r62
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r63 = $r62 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z30 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r62)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z30 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r62) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z30 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z30 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> = r63
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> = r63 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r64 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField yearOfEra()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r64 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField yearOfEra()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.yearOfEra : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfEra>
org.joda.time.chrono.AssembledChronology.yearOfEra : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfEra> >>>>>>>> org.joda.time.chrono.AssembledChronology.yearOfEra : return $r1
org.joda.time.chrono.AssembledChronology.yearOfEra : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r65 = $r64
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r65 = $r64 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z31 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r64)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z31 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r64) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z31 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z31 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> = r65
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> = r65 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r66 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField yearOfCentury()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r66 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField yearOfCentury()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.yearOfCentury : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfCentury>
org.joda.time.chrono.AssembledChronology.yearOfCentury : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfCentury> >>>>>>>> org.joda.time.chrono.AssembledChronology.yearOfCentury : return $r1
org.joda.time.chrono.AssembledChronology.yearOfCentury : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r67 = $r66
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r67 = $r66 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z32 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r66)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z32 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r66) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z32 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z32 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> = r67
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> = r67 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r68 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField centuryOfEra()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r68 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField centuryOfEra()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.centuryOfEra : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iCenturyOfEra>
org.joda.time.chrono.AssembledChronology.centuryOfEra : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iCenturyOfEra> >>>>>>>> org.joda.time.chrono.AssembledChronology.centuryOfEra : return $r1
org.joda.time.chrono.AssembledChronology.centuryOfEra : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r69 = $r68
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r69 = $r68 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z33 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r68)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z33 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r68) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z33 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z33 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> = r69
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> = r69 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r70 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField era()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r70 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField era()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.era : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iEra>
org.joda.time.chrono.AssembledChronology.era : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iEra> >>>>>>>> org.joda.time.chrono.AssembledChronology.era : return $r1
org.joda.time.chrono.AssembledChronology.era : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r71 = $r70
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r71 = $r70 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z34 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r70)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z34 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r70) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z34 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z34 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> = r71
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> = r71 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : virtualinvoke r0.<org.joda.time.chrono.AssembledChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>(r2)
org.joda.time.chrono.AssembledChronology.setFields : virtualinvoke r0.<org.joda.time.chrono.AssembledChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>(r2) >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r2 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year>
org.joda.time.chrono.LenientChronology.assemble : $r2 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r3 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r2)
org.joda.time.chrono.LenientChronology.assemble : $r3 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r2) >>>>>>>> org.joda.time.chrono.LenientChronology.convertField : $r2 = virtualinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.LenientChronology.convertField : $r2 = virtualinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology getBase()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getBase : return $r1
org.joda.time.chrono.AssembledChronology.getBase : return $r1 >>>>>>>> org.joda.time.chrono.LenientChronology.convertField : $r3 = staticinvoke <org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)>(r1, $r2)
org.joda.time.chrono.LenientChronology.convertField : $r3 = staticinvoke <org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)>(r1, $r2) >>>>>>>> org.joda.time.field.LenientDateTimeField.getInstance : if r0 != null
org.joda.time.field.LenientDateTimeField.getInstance : if r0 != null >>>>>>>> org.joda.time.field.LenientDateTimeField.getInstance : $z0 = r0 instanceof org.joda.time.field.StrictDateTimeField
org.joda.time.field.LenientDateTimeField.getInstance : $z0 = r0 instanceof org.joda.time.field.StrictDateTimeField >>>>>>>> org.joda.time.field.LenientDateTimeField.getInstance : if $z0 == 0
org.joda.time.field.LenientDateTimeField.getInstance : if $z0 == 0 >>>>>>>> org.joda.time.field.LenientDateTimeField.getInstance : $z1 = virtualinvoke r0.<org.joda.time.DateTimeField: boolean isLenient()>()
org.joda.time.field.LenientDateTimeField.getInstance : $z1 = virtualinvoke r0.<org.joda.time.DateTimeField: boolean isLenient()>() >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.isLenient : return 0
org.joda.time.chrono.BasicYearDateTimeField.isLenient : return 0 >>>>>>>> org.joda.time.field.LenientDateTimeField.getInstance : if $z1 == 0
org.joda.time.field.LenientDateTimeField.getInstance : if $z1 == 0 >>>>>>>> org.joda.time.field.LenientDateTimeField.getInstance : $r3 = new org.joda.time.field.LenientDateTimeField
org.joda.time.field.LenientDateTimeField.getInstance : $r3 = new org.joda.time.field.LenientDateTimeField >>>>>>>> org.joda.time.field.LenientDateTimeField.getInstance : specialinvoke $r3.<org.joda.time.field.LenientDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.Chronology)>(r0, r1)
org.joda.time.field.LenientDateTimeField.getInstance : specialinvoke $r3.<org.joda.time.field.LenientDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.Chronology)>(r0, r1) >>>>>>>> org.joda.time.field.BaseDateTimeField.getType : $r1 = r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType iType>
org.joda.time.field.BaseDateTimeField.getType : $r1 = r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType iType> >>>>>>>> org.joda.time.field.BaseDateTimeField.getType : return $r1
org.joda.time.field.BaseDateTimeField.getType : return $r1 >>>>>>>> org.joda.time.field.LenientDateTimeField.getInstance : return $r3
org.joda.time.field.LenientDateTimeField.getInstance : return $r3 >>>>>>>> org.joda.time.chrono.LenientChronology.convertField : return $r3
org.joda.time.chrono.LenientChronology.convertField : return $r3 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> = $r3
org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> = $r3 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r4 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra>
org.joda.time.chrono.LenientChronology.assemble : $r4 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r5 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r4)
org.joda.time.chrono.LenientChronology.assemble : $r5 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r4) >>>>>>>> org.joda.time.field.DecoratedDateTimeField.isLenient : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DecoratedDateTimeField.isLenient : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.field.DecoratedDateTimeField.isLenient : $z0 = virtualinvoke $r1.<org.joda.time.DateTimeField: boolean isLenient()>()
org.joda.time.field.DecoratedDateTimeField.isLenient : $z0 = virtualinvoke $r1.<org.joda.time.DateTimeField: boolean isLenient()>() >>>>>>>> org.joda.time.field.DecoratedDateTimeField.isLenient : return $z0
org.joda.time.field.DecoratedDateTimeField.isLenient : return $z0 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> = $r5
org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> = $r5 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r6 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury>
org.joda.time.chrono.LenientChronology.assemble : $r6 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r7 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r6)
org.joda.time.chrono.LenientChronology.assemble : $r7 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r6) >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> = $r7
org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> = $r7 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r8 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra>
org.joda.time.chrono.LenientChronology.assemble : $r8 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r9 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r8)
org.joda.time.chrono.LenientChronology.assemble : $r9 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r8) >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> = $r9
org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> = $r9 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r10 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era>
org.joda.time.chrono.LenientChronology.assemble : $r10 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r11 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r10)
org.joda.time.chrono.LenientChronology.assemble : $r11 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r10) >>>>>>>> org.joda.time.chrono.GJEraDateTimeField.isLenient : return 0
org.joda.time.chrono.GJEraDateTimeField.isLenient : return 0 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> = $r11
org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> = $r11 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r12 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek>
org.joda.time.chrono.LenientChronology.assemble : $r12 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek> >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r13 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r12)
org.joda.time.chrono.LenientChronology.assemble : $r13 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r12) >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.isLenient : return 0
org.joda.time.field.PreciseDurationDateTimeField.isLenient : return 0 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek> = $r13
org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek> = $r13 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r14 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth>
org.joda.time.chrono.LenientChronology.assemble : $r14 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth> >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r15 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r14)
org.joda.time.chrono.LenientChronology.assemble : $r15 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r14) >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth> = $r15
org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth> = $r15 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r16 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear>
org.joda.time.chrono.LenientChronology.assemble : $r16 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear> >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r17 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r16)
org.joda.time.chrono.LenientChronology.assemble : $r17 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r16) >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear> = $r17
org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear> = $r17 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r18 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear>
org.joda.time.chrono.LenientChronology.assemble : $r18 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r19 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r18)
org.joda.time.chrono.LenientChronology.assemble : $r19 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r18) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.isLenient : return 0
org.joda.time.chrono.BasicMonthOfYearDateTimeField.isLenient : return 0 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> = $r19
org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> = $r19 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r20 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear>
org.joda.time.chrono.LenientChronology.assemble : $r20 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear> >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r21 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r20)
org.joda.time.chrono.LenientChronology.assemble : $r21 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r20) >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear> = $r21
org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear> = $r21 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r22 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear>
org.joda.time.chrono.LenientChronology.assemble : $r22 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r23 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r22)
org.joda.time.chrono.LenientChronology.assemble : $r23 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r22) >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.isLenient : return 0
org.joda.time.chrono.BasicWeekyearDateTimeField.isLenient : return 0 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> = $r23
org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> = $r23 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r24 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury>
org.joda.time.chrono.LenientChronology.assemble : $r24 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r25 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r24)
org.joda.time.chrono.LenientChronology.assemble : $r25 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r24) >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> = $r25
org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> = $r25 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r26 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond>
org.joda.time.chrono.LenientChronology.assemble : $r26 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond> >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r27 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r26)
org.joda.time.chrono.LenientChronology.assemble : $r27 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r26) >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond> = $r27
org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond> = $r27 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r28 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay>
org.joda.time.chrono.LenientChronology.assemble : $r28 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay> >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r29 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r28)
org.joda.time.chrono.LenientChronology.assemble : $r29 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r28) >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay> = $r29
org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay> = $r29 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r30 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute>
org.joda.time.chrono.LenientChronology.assemble : $r30 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute> >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r31 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r30)
org.joda.time.chrono.LenientChronology.assemble : $r31 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r30) >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute> = $r31
org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute> = $r31 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r32 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay>
org.joda.time.chrono.LenientChronology.assemble : $r32 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay> >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r33 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r32)
org.joda.time.chrono.LenientChronology.assemble : $r33 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r32) >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay> = $r33
org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay> = $r33 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r34 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour>
org.joda.time.chrono.LenientChronology.assemble : $r34 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour> >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r35 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r34)
org.joda.time.chrono.LenientChronology.assemble : $r35 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r34) >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour> = $r35
org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour> = $r35 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r36 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay>
org.joda.time.chrono.LenientChronology.assemble : $r36 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay> >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r37 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r36)
org.joda.time.chrono.LenientChronology.assemble : $r37 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r36) >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay> = $r37
org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay> = $r37 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r38 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay>
org.joda.time.chrono.LenientChronology.assemble : $r38 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay> >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r39 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r38)
org.joda.time.chrono.LenientChronology.assemble : $r39 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r38) >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay> = $r39
org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay> = $r39 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r40 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday>
org.joda.time.chrono.LenientChronology.assemble : $r40 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday> >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r41 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r40)
org.joda.time.chrono.LenientChronology.assemble : $r41 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r40) >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday> = $r41
org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday> = $r41 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r42 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay>
org.joda.time.chrono.LenientChronology.assemble : $r42 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay> >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r43 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r42)
org.joda.time.chrono.LenientChronology.assemble : $r43 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r42) >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay> = $r43
org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay> = $r43 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r44 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday>
org.joda.time.chrono.LenientChronology.assemble : $r44 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday> >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r45 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r44)
org.joda.time.chrono.LenientChronology.assemble : $r45 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r44) >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday> = $r45
org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday> = $r45 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r46 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay>
org.joda.time.chrono.LenientChronology.assemble : $r46 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay> >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r47 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r46)
org.joda.time.chrono.LenientChronology.assemble : $r47 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r46) >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay> = $r47
org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay> = $r47 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r7 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField millis>
org.joda.time.chrono.AssembledChronology.setFields : $r7 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField millis> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r3 = $r7
org.joda.time.chrono.AssembledChronology.setFields : r3 = $r7 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r7 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r7 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r8 = r3
org.joda.time.chrono.AssembledChronology.setFields : $r8 = r3 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMillis> = $r8]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMillis> = $r8] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMillis> = $r8
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMillis> = $r8 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r10 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField seconds>
org.joda.time.chrono.AssembledChronology.setFields : $r10 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField seconds> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r11 = $r10
org.joda.time.chrono.AssembledChronology.setFields : r11 = $r10 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r10 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r10 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r12 = r11
org.joda.time.chrono.AssembledChronology.setFields : $r12 = r11 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iSeconds> = $r12]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iSeconds> = $r12] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iSeconds> = $r12
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iSeconds> = $r12 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r14 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField minutes>
org.joda.time.chrono.AssembledChronology.setFields : $r14 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField minutes> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r15 = $r14
org.joda.time.chrono.AssembledChronology.setFields : r15 = $r14 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r14 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r14 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r16 = r15
org.joda.time.chrono.AssembledChronology.setFields : $r16 = r15 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMinutes> = $r16]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMinutes> = $r16] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMinutes> = $r16
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMinutes> = $r16 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r18 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField hours>
org.joda.time.chrono.AssembledChronology.setFields : $r18 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField hours> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r19 = $r18
org.joda.time.chrono.AssembledChronology.setFields : r19 = $r18 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r18 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r18 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r20 = r19
org.joda.time.chrono.AssembledChronology.setFields : $r20 = r19 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHours> = $r20]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHours> = $r20] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHours> = $r20
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHours> = $r20 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r22 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField halfdays>
org.joda.time.chrono.AssembledChronology.setFields : $r22 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField halfdays> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r23 = $r22
org.joda.time.chrono.AssembledChronology.setFields : r23 = $r22 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r22 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r22 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r24 = r23
org.joda.time.chrono.AssembledChronology.setFields : $r24 = r23 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHalfdays> = $r24]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHalfdays> = $r24] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHalfdays> = $r24
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHalfdays> = $r24 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r26 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days>
org.joda.time.chrono.AssembledChronology.setFields : $r26 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r27 = $r26
org.joda.time.chrono.AssembledChronology.setFields : r27 = $r26 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r26 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r26 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r28 = r27
org.joda.time.chrono.AssembledChronology.setFields : $r28 = r27 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays> = $r28]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays> = $r28] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays> = $r28
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays> = $r28 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r30 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weeks>
org.joda.time.chrono.AssembledChronology.setFields : $r30 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weeks> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r31 = $r30
org.joda.time.chrono.AssembledChronology.setFields : r31 = $r30 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r30 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r30 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r32 = r31
org.joda.time.chrono.AssembledChronology.setFields : $r32 = r31 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeeks> = $r32]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeeks> = $r32] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeeks> = $r32
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeeks> = $r32 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r34 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears>
org.joda.time.chrono.AssembledChronology.setFields : $r34 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r35 = $r34
org.joda.time.chrono.AssembledChronology.setFields : r35 = $r34 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r34 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r34 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r36 = r35
org.joda.time.chrono.AssembledChronology.setFields : $r36 = r35 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeekyears> = $r36]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeekyears> = $r36] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeekyears> = $r36
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeekyears> = $r36 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r38 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months>
org.joda.time.chrono.AssembledChronology.setFields : $r38 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r39 = $r38
org.joda.time.chrono.AssembledChronology.setFields : r39 = $r38 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r38 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r38 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r40 = r39
org.joda.time.chrono.AssembledChronology.setFields : $r40 = r39 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMonths> = $r40]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMonths> = $r40] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMonths> = $r40
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMonths> = $r40 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r42 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years>
org.joda.time.chrono.AssembledChronology.setFields : $r42 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r43 = $r42
org.joda.time.chrono.AssembledChronology.setFields : r43 = $r42 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r42 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r42 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r44 = r43
org.joda.time.chrono.AssembledChronology.setFields : $r44 = r43 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iYears> = $r44]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iYears> = $r44] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iYears> = $r44
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iYears> = $r44 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r46 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries>
org.joda.time.chrono.AssembledChronology.setFields : $r46 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r47 = $r46
org.joda.time.chrono.AssembledChronology.setFields : r47 = $r46 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r46 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r46 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r48 = r47
org.joda.time.chrono.AssembledChronology.setFields : $r48 = r47 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iCenturies> = $r48]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iCenturies> = $r48] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iCenturies> = $r48
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iCenturies> = $r48 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r50 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField eras>
org.joda.time.chrono.AssembledChronology.setFields : $r50 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField eras> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r51 = $r50
org.joda.time.chrono.AssembledChronology.setFields : r51 = $r50 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r50 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r50 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r52 = specialinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField eras()>()
org.joda.time.chrono.AssembledChronology.setFields : $r52 = specialinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField eras()>() >>>>>>>> org.joda.time.chrono.BaseChronology.eras : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType eras()>()
org.joda.time.chrono.BaseChronology.eras : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType eras()>() >>>>>>>> org.joda.time.DurationFieldType.eras : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType ERAS_TYPE>
org.joda.time.DurationFieldType.eras : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType ERAS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.eras : return $r0
org.joda.time.DurationFieldType.eras : return $r0 >>>>>>>> org.joda.time.chrono.BaseChronology.eras : $r2 = staticinvoke <org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>($r1)
org.joda.time.chrono.BaseChronology.eras : $r2 = staticinvoke <org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>($r1) >>>>>>>> org.joda.time.field.UnsupportedDurationField.getInstance : $r1 = <org.joda.time.field.UnsupportedDurationField: java.util.HashMap cCache>
org.joda.time.field.UnsupportedDurationField.getInstance : $r1 = <org.joda.time.field.UnsupportedDurationField: java.util.HashMap cCache> >>>>>>>> org.joda.time.field.UnsupportedDurationField.getInstance : if $r1 != null
org.joda.time.field.UnsupportedDurationField.getInstance : if $r1 != null >>>>>>>> org.joda.time.field.UnsupportedDurationField.getInstance : $r4 = <org.joda.time.field.UnsupportedDurationField: java.util.HashMap cCache>
org.joda.time.field.UnsupportedDurationField.getInstance : $r4 = <org.joda.time.field.UnsupportedDurationField: java.util.HashMap cCache> >>>>>>>> org.joda.time.field.UnsupportedDurationField.getInstance : $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0)
org.joda.time.field.UnsupportedDurationField.getInstance : $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.hashCode : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal>
org.joda.time.DurationFieldType$StandardDurationFieldType.hashCode : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal> >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.hashCode : return $b0
org.joda.time.DurationFieldType$StandardDurationFieldType.hashCode : return $b0 >>>>>>>> org.joda.time.field.UnsupportedDurationField.getInstance : r2 = (org.joda.time.field.UnsupportedDurationField) $r5
org.joda.time.field.UnsupportedDurationField.getInstance : r2 = (org.joda.time.field.UnsupportedDurationField) $r5 >>>>>>>> org.joda.time.field.UnsupportedDurationField.getInstance : if r2 != null
org.joda.time.field.UnsupportedDurationField.getInstance : if r2 != null >>>>>>>> org.joda.time.field.UnsupportedDurationField.getInstance : return r2
org.joda.time.field.UnsupportedDurationField.getInstance : return r2 >>>>>>>> org.joda.time.chrono.BaseChronology.eras : return $r2
org.joda.time.chrono.BaseChronology.eras : return $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iEras> = $r52
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iEras> = $r52 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r54 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond>
org.joda.time.chrono.AssembledChronology.setFields : $r54 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r55 = $r54
org.joda.time.chrono.AssembledChronology.setFields : r55 = $r54 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r54 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r54 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r56 = r55
org.joda.time.chrono.AssembledChronology.setFields : $r56 = r55 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfSecond> = $r56]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfSecond> = $r56] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfSecond> = $r56
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfSecond> = $r56 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r58 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay>
org.joda.time.chrono.AssembledChronology.setFields : $r58 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r59 = $r58
org.joda.time.chrono.AssembledChronology.setFields : r59 = $r58 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r58 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r58 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r60 = r59
org.joda.time.chrono.AssembledChronology.setFields : $r60 = r59 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay> = $r60]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay> = $r60] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay> = $r60
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay> = $r60 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r62 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute>
org.joda.time.chrono.AssembledChronology.setFields : $r62 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r63 = $r62
org.joda.time.chrono.AssembledChronology.setFields : r63 = $r62 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r62 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r62 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r64 = r63
org.joda.time.chrono.AssembledChronology.setFields : $r64 = r63 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfMinute> = $r64]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfMinute> = $r64] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfMinute> = $r64
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfMinute> = $r64 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r66 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay>
org.joda.time.chrono.AssembledChronology.setFields : $r66 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r67 = $r66
org.joda.time.chrono.AssembledChronology.setFields : r67 = $r66 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r66 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r66 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r68 = r67
org.joda.time.chrono.AssembledChronology.setFields : $r68 = r67 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfDay> = $r68]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfDay> = $r68] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfDay> = $r68
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfDay> = $r68 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r70 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour>
org.joda.time.chrono.AssembledChronology.setFields : $r70 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r71 = $r70
org.joda.time.chrono.AssembledChronology.setFields : r71 = $r70 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r70 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r70 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r72 = r71
org.joda.time.chrono.AssembledChronology.setFields : $r72 = r71 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfHour> = $r72]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfHour> = $r72] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfHour> = $r72
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfHour> = $r72 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r74 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay>
org.joda.time.chrono.AssembledChronology.setFields : $r74 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r75 = $r74
org.joda.time.chrono.AssembledChronology.setFields : r75 = $r74 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r74 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r74 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r76 = r75
org.joda.time.chrono.AssembledChronology.setFields : $r76 = r75 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfDay> = $r76]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfDay> = $r76] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfDay> = $r76
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfDay> = $r76 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r78 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay>
org.joda.time.chrono.AssembledChronology.setFields : $r78 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r79 = $r78
org.joda.time.chrono.AssembledChronology.setFields : r79 = $r78 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r78 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r78 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r80 = r79
org.joda.time.chrono.AssembledChronology.setFields : $r80 = r79 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay> = $r80]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay> = $r80] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay> = $r80
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay> = $r80 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r82 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay>
org.joda.time.chrono.AssembledChronology.setFields : $r82 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r83 = $r82
org.joda.time.chrono.AssembledChronology.setFields : r83 = $r82 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r82 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r82 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r84 = r83
org.joda.time.chrono.AssembledChronology.setFields : $r84 = r83 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfDay> = $r84]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfDay> = $r84] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfDay> = $r84
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfDay> = $r84 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r86 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday>
org.joda.time.chrono.AssembledChronology.setFields : $r86 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r87 = $r86
org.joda.time.chrono.AssembledChronology.setFields : r87 = $r86 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r86 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r86 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r88 = r87
org.joda.time.chrono.AssembledChronology.setFields : $r88 = r87 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfHalfday> = $r88]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfHalfday> = $r88] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfHalfday> = $r88
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfHalfday> = $r88 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r90 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday>
org.joda.time.chrono.AssembledChronology.setFields : $r90 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r91 = $r90
org.joda.time.chrono.AssembledChronology.setFields : r91 = $r90 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r90 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r90 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r92 = r91
org.joda.time.chrono.AssembledChronology.setFields : $r92 = r91 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfHalfday> = $r92]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfHalfday> = $r92] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfHalfday> = $r92
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfHalfday> = $r92 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r94 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay>
org.joda.time.chrono.AssembledChronology.setFields : $r94 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r95 = $r94
org.joda.time.chrono.AssembledChronology.setFields : r95 = $r94 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r94 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r94 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r96 = r95
org.joda.time.chrono.AssembledChronology.setFields : $r96 = r95 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHalfdayOfDay> = $r96]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHalfdayOfDay> = $r96] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHalfdayOfDay> = $r96
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHalfdayOfDay> = $r96 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r98 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek>
org.joda.time.chrono.AssembledChronology.setFields : $r98 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r99 = $r98
org.joda.time.chrono.AssembledChronology.setFields : r99 = $r98 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r98 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r98 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r100 = r99
org.joda.time.chrono.AssembledChronology.setFields : $r100 = r99 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfWeek> = $r100]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfWeek> = $r100] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfWeek> = $r100
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfWeek> = $r100 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r102 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth>
org.joda.time.chrono.AssembledChronology.setFields : $r102 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r103 = $r102
org.joda.time.chrono.AssembledChronology.setFields : r103 = $r102 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r102 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r102 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r104 = r103
org.joda.time.chrono.AssembledChronology.setFields : $r104 = r103 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth> = $r104]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth> = $r104] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth> = $r104
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth> = $r104 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r106 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear>
org.joda.time.chrono.AssembledChronology.setFields : $r106 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r107 = $r106
org.joda.time.chrono.AssembledChronology.setFields : r107 = $r106 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r106 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r106 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r108 = r107
org.joda.time.chrono.AssembledChronology.setFields : $r108 = r107 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfYear> = $r108]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfYear> = $r108] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfYear> = $r108
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfYear> = $r108 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r110 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear>
org.joda.time.chrono.AssembledChronology.setFields : $r110 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r111 = $r110
org.joda.time.chrono.AssembledChronology.setFields : r111 = $r110 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r110 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r110 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r112 = r111
org.joda.time.chrono.AssembledChronology.setFields : $r112 = r111 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekOfWeekyear> = $r112]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekOfWeekyear> = $r112] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekOfWeekyear> = $r112
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekOfWeekyear> = $r112 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r114 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear>
org.joda.time.chrono.AssembledChronology.setFields : $r114 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r115 = $r114
org.joda.time.chrono.AssembledChronology.setFields : r115 = $r114 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r114 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r114 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r116 = r115
org.joda.time.chrono.AssembledChronology.setFields : $r116 = r115 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyear> = $r116]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyear> = $r116] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyear> = $r116
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyear> = $r116 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r118 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury>
org.joda.time.chrono.AssembledChronology.setFields : $r118 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r119 = $r118
org.joda.time.chrono.AssembledChronology.setFields : r119 = $r118 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r118 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r118 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r120 = r119
org.joda.time.chrono.AssembledChronology.setFields : $r120 = r119 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyearOfCentury> = $r120]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyearOfCentury> = $r120] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyearOfCentury> = $r120
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyearOfCentury> = $r120 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r122 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear>
org.joda.time.chrono.AssembledChronology.setFields : $r122 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r123 = $r122
org.joda.time.chrono.AssembledChronology.setFields : r123 = $r122 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r122 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r122 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r124 = r123
org.joda.time.chrono.AssembledChronology.setFields : $r124 = r123 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear> = $r124]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear> = $r124] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear> = $r124
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear> = $r124 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r126 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year>
org.joda.time.chrono.AssembledChronology.setFields : $r126 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r127 = $r126
org.joda.time.chrono.AssembledChronology.setFields : r127 = $r126 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r126 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r126 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r128 = r127
org.joda.time.chrono.AssembledChronology.setFields : $r128 = r127 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear> = $r128]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear> = $r128] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear> = $r128
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear> = $r128 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r130 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra>
org.joda.time.chrono.AssembledChronology.setFields : $r130 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r131 = $r130
org.joda.time.chrono.AssembledChronology.setFields : r131 = $r130 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r130 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r130 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r132 = r131
org.joda.time.chrono.AssembledChronology.setFields : $r132 = r131 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfEra> = $r132]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfEra> = $r132] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfEra> = $r132
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfEra> = $r132 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r134 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury>
org.joda.time.chrono.AssembledChronology.setFields : $r134 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r135 = $r134
org.joda.time.chrono.AssembledChronology.setFields : r135 = $r134 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r134 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r134 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r136 = r135
org.joda.time.chrono.AssembledChronology.setFields : $r136 = r135 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfCentury> = $r136]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfCentury> = $r136] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfCentury> = $r136
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfCentury> = $r136 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r138 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra>
org.joda.time.chrono.AssembledChronology.setFields : $r138 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r139 = $r138
org.joda.time.chrono.AssembledChronology.setFields : r139 = $r138 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r138 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r138 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r140 = r139
org.joda.time.chrono.AssembledChronology.setFields : $r140 = r139 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iCenturyOfEra> = $r140]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iCenturyOfEra> = $r140] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iCenturyOfEra> = $r140
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iCenturyOfEra> = $r140 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r142 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era>
org.joda.time.chrono.AssembledChronology.setFields : $r142 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r143 = $r142
org.joda.time.chrono.AssembledChronology.setFields : r143 = $r142 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r142 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r142 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r144 = r143
org.joda.time.chrono.AssembledChronology.setFields : $r144 = r143 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iEra> = $r144]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iEra> = $r144] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iEra> = $r144
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iEra> = $r144 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r145 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.setFields : $r145 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r145 != null
org.joda.time.chrono.AssembledChronology.setFields : if $r145 != null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r146 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay>
org.joda.time.chrono.AssembledChronology.setFields : $r146 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r147 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.setFields : $r147 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r148 = virtualinvoke $r147.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>()
org.joda.time.chrono.AssembledChronology.setFields : $r148 = virtualinvoke $r147.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r146 != $r148
org.joda.time.chrono.AssembledChronology.setFields : if $r146 != $r148 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $b1 = 0
org.joda.time.chrono.AssembledChronology.setFields : $b1 = 0 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r158 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay>
org.joda.time.chrono.AssembledChronology.setFields : $r158 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r159 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.setFields : $r159 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r160 = virtualinvoke $r159.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>()
org.joda.time.chrono.AssembledChronology.setFields : $r160 = virtualinvoke $r159.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r158 != $r160
org.joda.time.chrono.AssembledChronology.setFields : if $r158 != $r160 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $b2 = 0
org.joda.time.chrono.AssembledChronology.setFields : $b2 = 0 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $b3 = $b1 | $b2
org.joda.time.chrono.AssembledChronology.setFields : $b3 = $b1 | $b2 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r161 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear>
org.joda.time.chrono.AssembledChronology.setFields : $r161 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r162 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.setFields : $r162 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r163 = virtualinvoke $r162.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.chrono.AssembledChronology.setFields : $r163 = virtualinvoke $r162.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r161 != $r163
org.joda.time.chrono.AssembledChronology.setFields : if $r161 != $r163 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $b4 = 0
org.joda.time.chrono.AssembledChronology.setFields : $b4 = 0 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : b0 = $b3 | $b4
org.joda.time.chrono.AssembledChronology.setFields : b0 = $b3 | $b4 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: int iBaseFlags> = b0
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: int iBaseFlags> = b0 >>>>>>>> org.joda.time.chrono.LenientChronology.getInstance : return $r2
org.joda.time.chrono.LenientChronology.getInstance : return $r2 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.getLenientISOChronology : <org.joda.time.tz.ZoneInfoCompiler: org.joda.time.Chronology cLenientISO> = $r2
org.joda.time.tz.ZoneInfoCompiler.getLenientISOChronology : <org.joda.time.tz.ZoneInfoCompiler: org.joda.time.Chronology cLenientISO> = $r2 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.getLenientISOChronology : $r3 = <org.joda.time.tz.ZoneInfoCompiler: org.joda.time.Chronology cLenientISO>
org.joda.time.tz.ZoneInfoCompiler.getLenientISOChronology : $r3 = <org.joda.time.tz.ZoneInfoCompiler: org.joda.time.Chronology cLenientISO> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.getLenientISOChronology : return $r3
org.joda.time.tz.ZoneInfoCompiler.getLenientISOChronology : return $r3 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseTime : specialinvoke $r4.<org.joda.time.MutableDateTime: void <init>(long,org.joda.time.Chronology)>(0L, $r2)
org.joda.time.tz.ZoneInfoCompiler.parseTime : specialinvoke $r4.<org.joda.time.MutableDateTime: void <init>(long,org.joda.time.Chronology)>(0L, $r2) >>>>>>>> org.joda.time.base.BaseDateTime.checkChronology : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.base.BaseDateTime.checkChronology : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DateTimeUtils.getChronology : if r0 != null
org.joda.time.DateTimeUtils.getChronology : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getChronology : return r0
org.joda.time.DateTimeUtils.getChronology : return r0 >>>>>>>> org.joda.time.base.BaseDateTime.checkChronology : return $r2
org.joda.time.base.BaseDateTime.checkChronology : return $r2 >>>>>>>> org.joda.time.base.BaseDateTime.checkInstant : return l0
org.joda.time.base.BaseDateTime.checkInstant : return l0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseTime : r3 = $r4
org.joda.time.tz.ZoneInfoCompiler.parseTime : r3 = $r4 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseTime : b0 = 0
org.joda.time.tz.ZoneInfoCompiler.parseTime : b0 = 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseTime : $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("-")
org.joda.time.tz.ZoneInfoCompiler.parseTime : $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("-") >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseTime : if $z0 == 0
org.joda.time.tz.ZoneInfoCompiler.parseTime : if $z0 == 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseTime : i1 = virtualinvoke r1.<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>(r3, r0, b0)
org.joda.time.tz.ZoneInfoCompiler.parseTime : i1 = virtualinvoke r1.<org.joda.time.format.DateTimeFormatter: int parseInto(org.joda.time.ReadWritableInstant,java.lang.String,int)>(r3, r0, b0) >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : r3 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser requireParser()>()
org.joda.time.format.DateTimeFormatter.parseInto : r3 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser requireParser()>() >>>>>>>> org.joda.time.format.DateTimeFormatter.requireParser : r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser iParser>
org.joda.time.format.DateTimeFormatter.requireParser : r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser iParser> >>>>>>>> org.joda.time.format.DateTimeFormatter.requireParser : if r1 != null
org.joda.time.format.DateTimeFormatter.requireParser : if r1 != null >>>>>>>> org.joda.time.format.DateTimeFormatter.requireParser : return r1
org.joda.time.format.DateTimeFormatter.requireParser : return r1 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : if r1 != null
org.joda.time.format.DateTimeFormatter.parseInto : if r1 != null >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : l1 = interfaceinvoke r1.<org.joda.time.ReadWritableInstant: long getMillis()>()
org.joda.time.format.DateTimeFormatter.parseInto : l1 = interfaceinvoke r1.<org.joda.time.ReadWritableInstant: long getMillis()>() >>>>>>>> org.joda.time.base.BaseDateTime.getMillis : $l0 = r0.<org.joda.time.base.BaseDateTime: long iMillis>
org.joda.time.base.BaseDateTime.getMillis : $l0 = r0.<org.joda.time.base.BaseDateTime: long iMillis> >>>>>>>> org.joda.time.base.BaseDateTime.getMillis : return $l0
org.joda.time.base.BaseDateTime.getMillis : return $l0 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : r4 = interfaceinvoke r1.<org.joda.time.ReadWritableInstant: org.joda.time.Chronology getChronology()>()
org.joda.time.format.DateTimeFormatter.parseInto : r4 = interfaceinvoke r1.<org.joda.time.ReadWritableInstant: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.base.BaseDateTime.getChronology : $r1 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology>
org.joda.time.base.BaseDateTime.getChronology : $r1 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology> >>>>>>>> org.joda.time.base.BaseDateTime.getChronology : return $r1
org.joda.time.base.BaseDateTime.getChronology : return $r1 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : $r8 = virtualinvoke r4.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.format.DateTimeFormatter.parseInto : $r8 = virtualinvoke r4.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2
org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null
org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.GregorianChronology.getZone : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicGJChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.BasicChronology.getZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.Chronology getBase()>() >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : r1 = $r2
org.joda.time.chrono.BasicChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : if $r2 == null
org.joda.time.chrono.BasicChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>
org.joda.time.chrono.BasicChronology.getZone : $r4 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC> >>>>>>>> org.joda.time.chrono.BasicChronology.getZone : return $r4
org.joda.time.chrono.BasicChronology.getZone : return $r4 >>>>>>>> org.joda.time.chrono.GregorianChronology.getZone : return $r1
org.joda.time.chrono.GregorianChronology.getZone : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : return $r3
org.joda.time.chrono.AssembledChronology.getZone : return $r3 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : $i5 = virtualinvoke $r8.<org.joda.time.DateTimeZone: int getOffset(long)>(l1)
org.joda.time.format.DateTimeFormatter.parseInto : $i5 = virtualinvoke $r8.<org.joda.time.DateTimeZone: int getOffset(long)>(l1) >>>>>>>> org.joda.time.tz.FixedDateTimeZone.getOffset : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset>
org.joda.time.tz.FixedDateTimeZone.getOffset : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset> >>>>>>>> org.joda.time.tz.FixedDateTimeZone.getOffset : return $i1
org.joda.time.tz.FixedDateTimeZone.getOffset : return $i1 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : $l6 = (long) $i5
org.joda.time.format.DateTimeFormatter.parseInto : $l6 = (long) $i5 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : l2 = l1 + $l6
org.joda.time.format.DateTimeFormatter.parseInto : l2 = l1 + $l6 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : r9 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>(r4)
org.joda.time.format.DateTimeFormatter.parseInto : r9 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>(r4) >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.format.DateTimeFormatter.selectChronology : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : $r3 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>
org.joda.time.format.DateTimeFormatter.selectChronology : $r3 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono> >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : if $r3 == null
org.joda.time.format.DateTimeFormatter.selectChronology : if $r3 == null >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : $r4 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>
org.joda.time.format.DateTimeFormatter.selectChronology : $r4 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : if $r4 == null
org.joda.time.format.DateTimeFormatter.selectChronology : if $r4 == null >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : return r2
org.joda.time.format.DateTimeFormatter.selectChronology : return r2 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : $r10 = new org.joda.time.format.DateTimeParserBucket
org.joda.time.format.DateTimeFormatter.parseInto : $r10 = new org.joda.time.format.DateTimeParserBucket >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : $r11 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>
org.joda.time.format.DateTimeFormatter.parseInto : $r11 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale> >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : $r12 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear>
org.joda.time.format.DateTimeFormatter.parseInto : $r12 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear> >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : $i7 = r0.<org.joda.time.format.DateTimeFormatter: int iDefaultYear>
org.joda.time.format.DateTimeFormatter.parseInto : $i7 = r0.<org.joda.time.format.DateTimeFormatter: int iDefaultYear> >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : specialinvoke $r10.<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>(l2, r9, $r11, $r12, $i7)
org.joda.time.format.DateTimeFormatter.parseInto : specialinvoke $r10.<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>(l2, r9, $r11, $r12, $i7) >>>>>>>> org.joda.time.chrono.LenientChronology.withUTC : $r2 = r0.<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology iWithUTC>
org.joda.time.chrono.LenientChronology.withUTC : $r2 = r0.<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology iWithUTC> >>>>>>>> org.joda.time.chrono.LenientChronology.withUTC : if $r2 != null
org.joda.time.chrono.LenientChronology.withUTC : if $r2 != null >>>>>>>> org.joda.time.chrono.LenientChronology.withUTC : $r3 = virtualinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.LenientChronology.withUTC : $r3 = virtualinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.LenientChronology.withUTC : $r1 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>
org.joda.time.chrono.LenientChronology.withUTC : $r1 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC> >>>>>>>> org.joda.time.chrono.LenientChronology.withUTC : if $r3 != $r1
org.joda.time.chrono.LenientChronology.withUTC : if $r3 != $r1 >>>>>>>> org.joda.time.chrono.LenientChronology.withUTC : r0.<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology iWithUTC> = r0
org.joda.time.chrono.LenientChronology.withUTC : r0.<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology iWithUTC> = r0 >>>>>>>> org.joda.time.chrono.LenientChronology.withUTC : goto [?= $r7 = r0.<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology iWithUTC>]
org.joda.time.chrono.LenientChronology.withUTC : goto [?= $r7 = r0.<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology iWithUTC>] >>>>>>>> org.joda.time.chrono.LenientChronology.withUTC : $r7 = r0.<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology iWithUTC>
org.joda.time.chrono.LenientChronology.withUTC : $r7 = r0.<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology iWithUTC> >>>>>>>> org.joda.time.chrono.LenientChronology.withUTC : return $r7
org.joda.time.chrono.LenientChronology.withUTC : return $r7 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : r5 = $r10
org.joda.time.format.DateTimeFormatter.parseInto : r5 = $r10 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : i3 = interfaceinvoke r3.<org.joda.time.format.DateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>(r5, r2, i0)
org.joda.time.format.DateTimeFormatter.parseInto : i3 = interfaceinvoke r3.<org.joda.time.format.DateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>(r5, r2, i0) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: org.joda.time.format.DateTimeParser[] iParsers>
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: org.joda.time.format.DateTimeParser[] iParsers> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : if r3 != null
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : if r3 != null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : i1 = lengthof r3
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : i1 = lengthof r3 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : i2 = 0
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : i2 = 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : if i2 >= i1
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : if i2 >= i1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : if i0 < 0
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : if i0 < 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : $r5 = r3[i2]
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : $r5 = r3[i2] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : i0 = interfaceinvoke $r5.<org.joda.time.format.DateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>(r1, r2, i0)
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : i0 = interfaceinvoke $r5.<org.joda.time.format.DateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>(r1, r2, i0) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i5 = r0.<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int iMaxParsedDigits>
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i5 = r0.<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int iMaxParsedDigits> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i6 = virtualinvoke r2.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i6 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i7 = $i6 - i0
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i7 = $i6 - i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i1 = staticinvoke <java.lang.Math: int min(int,int)>($i5, $i7)
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i1 = staticinvoke <java.lang.Math: int min(int,int)>($i5, $i7) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : z0 = 0
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : z0 = 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i2 = 0
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i2 = 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if i2 >= i1
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if i2 >= i1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i8 = i0 + i2
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i8 = i0 + i2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : c3 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i8)
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : c3 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i8) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if i2 != 0
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if i2 != 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if c3 == 45
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if c3 == 45 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if c3 != 43
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if c3 != 43 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if c3 < 48
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if c3 < 48 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if c3 <= 57
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if c3 <= 57 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i2 = i2 + 1
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i2 = i2 + 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : goto [?= (branch)]
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : goto [?= (branch)] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if i2 < 9
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if i2 < 9 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i4 = i0
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i4 = i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if z0 == 0
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if z0 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i21 = i4 + 1
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i21 = i4 + 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $c22 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i4)
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $c22 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i4) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i20 = $c22 - 48
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i20 = $c22 - 48 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : goto [?= i19 = i0 + i2]
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : goto [?= i19 = i0 + i2] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i19 = i0 + i2
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i19 = i0 + i2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if i21 >= i19
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : if i21 >= i19 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $r6 = r0.<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: org.joda.time.DateTimeFieldType iFieldType>
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $r6 = r0.<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: org.joda.time.DateTimeFieldType iFieldType> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,int)>($r6, i20)
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,int)>($r6, i20) >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : $r2 = new org.joda.time.format.DateTimeParserBucket$SavedField
org.joda.time.format.DateTimeParserBucket.saveField : $r2 = new org.joda.time.format.DateTimeParserBucket$SavedField >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : $r3 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.Chronology iChrono>
org.joda.time.format.DateTimeParserBucket.saveField : $r3 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.Chronology iChrono> >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : $r4 = virtualinvoke r1.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r3)
org.joda.time.format.DateTimeParserBucket.saveField : $r4 = virtualinvoke r1.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r3) >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $b0 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: byte iOrdinal>
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $b0 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: byte iOrdinal> >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : tableswitch($b0) {     case 1:
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : tableswitch($b0) {     case 1: >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r19 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r19 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>() >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r19
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r19 >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : specialinvoke $r2.<org.joda.time.format.DateTimeParserBucket$SavedField: void <init>(org.joda.time.DateTimeField,int)>($r4, i0)
org.joda.time.format.DateTimeParserBucket.saveField : specialinvoke $r2.<org.joda.time.format.DateTimeParserBucket$SavedField: void <init>(org.joda.time.DateTimeField,int)>($r4, i0) >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : specialinvoke r0.<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.format.DateTimeParserBucket$SavedField)>($r2)
org.joda.time.format.DateTimeParserBucket.saveField : specialinvoke r0.<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.format.DateTimeParserBucket$SavedField)>($r2) >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : r2 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields>
org.joda.time.format.DateTimeParserBucket.saveField : r2 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields> >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : i0 = r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount>
org.joda.time.format.DateTimeParserBucket.saveField : i0 = r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount> >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : $i1 = lengthof r2
org.joda.time.format.DateTimeParserBucket.saveField : $i1 = lengthof r2 >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : if i0 == $i1
org.joda.time.format.DateTimeParserBucket.saveField : if i0 == $i1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : $z0 = r0.<org.joda.time.format.DateTimeParserBucket: boolean iSavedFieldsShared>
org.joda.time.format.DateTimeParserBucket.saveField : $z0 = r0.<org.joda.time.format.DateTimeParserBucket: boolean iSavedFieldsShared> >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : if $z0 == 0
org.joda.time.format.DateTimeParserBucket.saveField : if $z0 == 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState> = null
org.joda.time.format.DateTimeParserBucket.saveField : r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState> = null >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : r2[i0] = r1
org.joda.time.format.DateTimeParserBucket.saveField : r2[i0] = r1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : $i4 = i0 + 1
org.joda.time.format.DateTimeParserBucket.saveField : $i4 = i0 + 1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount> = $i4
org.joda.time.format.DateTimeParserBucket.saveField : r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount> = $i4 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : return i19
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : return i19 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : i2 = i2 + 1
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : i2 = i2 + 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : goto [?= (branch)]
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : goto [?= (branch)] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : $i3 = virtualinvoke r2.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : $i3 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : if i0 < $i3
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : if i0 < $i3 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : c1 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i0)
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : c1 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i0) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : c2 = r0.<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: char iValue>
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : c2 = r0.<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: char iValue> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : if c1 == c2
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : if c1 == c2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : $i10 = i0 + 1
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : $i10 = i0 + 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : return $i10
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : return $i10 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i24 = i20 << 3
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i24 = i20 << 3 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i25 = i20 << 1
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i25 = i20 << 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i26 = $i24 + $i25
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i26 = $i24 + $i25 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i27 = i21
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i27 = i21 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i21 = i21 + 1
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i21 = i21 + 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $c28 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i27)
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $c28 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i27) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i29 = $i26 + $c28
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i29 = $i26 + $c28 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i20 = $i29 - 48
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : i20 = $i29 - 48 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r21 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r21 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>() >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r21
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r21 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : $i4 = i0 ^ -1
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : $i4 = i0 ^ -1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : return $i4
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : return $i4 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : return i0
org.joda.time.format.DateTimeFormatterBuilder$Composite.parseInto : return i0 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : $l8 = virtualinvoke r5.<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.String)>(0, r2)
org.joda.time.format.DateTimeFormatter.parseInto : $l8 = virtualinvoke r5.<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.String)>(0, r2) >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : r2 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields>
org.joda.time.format.DateTimeParserBucket.computeMillis : r2 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields> >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : i0 = r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount>
org.joda.time.format.DateTimeParserBucket.computeMillis : i0 = r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount> >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $z1 = r0.<org.joda.time.format.DateTimeParserBucket: boolean iSavedFieldsShared>
org.joda.time.format.DateTimeParserBucket.computeMillis : $z1 = r0.<org.joda.time.format.DateTimeParserBucket: boolean iSavedFieldsShared> >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : if $z1 == 0
org.joda.time.format.DateTimeParserBucket.computeMillis : if $z1 == 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : staticinvoke <org.joda.time.format.DateTimeParserBucket: void sort(org.joda.time.format.DateTimeParserBucket$SavedField[],int)>(r2, i0)
org.joda.time.format.DateTimeParserBucket.computeMillis : staticinvoke <org.joda.time.format.DateTimeParserBucket: void sort(org.joda.time.format.DateTimeParserBucket$SavedField[],int)>(r2, i0) >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : if i0 <= 10
org.joda.time.format.DateTimeParserBucket.sort : if i0 <= 10 >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : i1 = 0
org.joda.time.format.DateTimeParserBucket.sort : i1 = 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : if i1 >= i0
org.joda.time.format.DateTimeParserBucket.sort : if i1 >= i0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : i2 = i1
org.joda.time.format.DateTimeParserBucket.sort : i2 = i1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : if i2 <= 0
org.joda.time.format.DateTimeParserBucket.sort : if i2 <= 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : i1 = i1 + 1
org.joda.time.format.DateTimeParserBucket.sort : i1 = i1 + 1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : goto [?= (branch)]
org.joda.time.format.DateTimeParserBucket.sort : goto [?= (branch)] >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : $i3 = i2 - 1
org.joda.time.format.DateTimeParserBucket.sort : $i3 = i2 - 1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : $r2 = r0[$i3]
org.joda.time.format.DateTimeParserBucket.sort : $r2 = r0[$i3] >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : $r3 = r0[i2]
org.joda.time.format.DateTimeParserBucket.sort : $r3 = r0[i2] >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : $i4 = virtualinvoke $r2.<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>($r3)
org.joda.time.format.DateTimeParserBucket.sort : $i4 = virtualinvoke $r2.<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>($r3) >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedField.compareTo : r2 = r1.<org.joda.time.format.DateTimeParserBucket$SavedField: org.joda.time.DateTimeField iField>
org.joda.time.format.DateTimeParserBucket$SavedField.compareTo : r2 = r1.<org.joda.time.format.DateTimeParserBucket$SavedField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedField.compareTo : $r3 = r0.<org.joda.time.format.DateTimeParserBucket$SavedField: org.joda.time.DateTimeField iField>
org.joda.time.format.DateTimeParserBucket$SavedField.compareTo : $r3 = r0.<org.joda.time.format.DateTimeParserBucket$SavedField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedField.compareTo : $r4 = virtualinvoke $r3.<org.joda.time.DateTimeField: org.joda.time.DurationField getRangeDurationField()>()
org.joda.time.format.DateTimeParserBucket$SavedField.compareTo : $r4 = virtualinvoke $r3.<org.joda.time.DateTimeField: org.joda.time.DurationField getRangeDurationField()>() >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DelegatedDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getRangeDurationField : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getRangeDurationField()>()
org.joda.time.field.DelegatedDateTimeField.getRangeDurationField : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getRangeDurationField()>() >>>>>>>> org.joda.time.field.PreciseDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.field.PreciseDateTimeField: org.joda.time.DurationField iRangeField>
org.joda.time.field.PreciseDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.field.PreciseDateTimeField: org.joda.time.DurationField iRangeField> >>>>>>>> org.joda.time.field.PreciseDateTimeField.getRangeDurationField : return $r1
org.joda.time.field.PreciseDateTimeField.getRangeDurationField : return $r1 >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getRangeDurationField : return $r2
org.joda.time.field.DelegatedDateTimeField.getRangeDurationField : return $r2 >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedField.compareTo : $r5 = virtualinvoke r2.<org.joda.time.DateTimeField: org.joda.time.DurationField getRangeDurationField()>()
org.joda.time.format.DateTimeParserBucket$SavedField.compareTo : $r5 = virtualinvoke r2.<org.joda.time.DateTimeField: org.joda.time.DurationField getRangeDurationField()>() >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedField.compareTo : i0 = staticinvoke <org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>($r4, $r5)
org.joda.time.format.DateTimeParserBucket$SavedField.compareTo : i0 = staticinvoke <org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>($r4, $r5) >>>>>>>> org.joda.time.format.DateTimeParserBucket.compareReverse : if r0 == null
org.joda.time.format.DateTimeParserBucket.compareReverse : if r0 == null >>>>>>>> org.joda.time.format.DateTimeParserBucket.compareReverse : $z0 = virtualinvoke r0.<org.joda.time.DurationField: boolean isSupported()>()
org.joda.time.format.DateTimeParserBucket.compareReverse : $z0 = virtualinvoke r0.<org.joda.time.DurationField: boolean isSupported()>() >>>>>>>> org.joda.time.format.DateTimeParserBucket.compareReverse : if $z0 != 0
org.joda.time.format.DateTimeParserBucket.compareReverse : if $z0 != 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.compareReverse : if r1 == null
org.joda.time.format.DateTimeParserBucket.compareReverse : if r1 == null >>>>>>>> org.joda.time.format.DateTimeParserBucket.compareReverse : $z2 = virtualinvoke r1.<org.joda.time.DurationField: boolean isSupported()>()
org.joda.time.format.DateTimeParserBucket.compareReverse : $z2 = virtualinvoke r1.<org.joda.time.DurationField: boolean isSupported()>() >>>>>>>> org.joda.time.format.DateTimeParserBucket.compareReverse : if $z2 != 0
org.joda.time.format.DateTimeParserBucket.compareReverse : if $z2 != 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.compareReverse : $i0 = virtualinvoke r0.<org.joda.time.DurationField: int compareTo(java.lang.Object)>(r1)
org.joda.time.format.DateTimeParserBucket.compareReverse : $i0 = virtualinvoke r0.<org.joda.time.DurationField: int compareTo(java.lang.Object)>(r1) >>>>>>>> org.joda.time.field.BaseDurationField.compareTo : $r2 = (org.joda.time.DurationField) r1
org.joda.time.field.BaseDurationField.compareTo : $r2 = (org.joda.time.DurationField) r1 >>>>>>>> org.joda.time.field.BaseDurationField.compareTo : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDurationField: int compareTo(org.joda.time.DurationField)>($r2)
org.joda.time.field.BaseDurationField.compareTo : $i0 = virtualinvoke r0.<org.joda.time.field.BaseDurationField: int compareTo(org.joda.time.DurationField)>($r2) >>>>>>>> org.joda.time.field.BaseDurationField.compareTo : l0 = virtualinvoke r1.<org.joda.time.DurationField: long getUnitMillis()>()
org.joda.time.field.BaseDurationField.compareTo : l0 = virtualinvoke r1.<org.joda.time.DurationField: long getUnitMillis()>() >>>>>>>> org.joda.time.field.PreciseDurationField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis>
org.joda.time.field.PreciseDurationField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationField.getUnitMillis : return $l0
org.joda.time.field.PreciseDurationField.getUnitMillis : return $l0 >>>>>>>> org.joda.time.field.BaseDurationField.compareTo : l1 = virtualinvoke r0.<org.joda.time.field.BaseDurationField: long getUnitMillis()>()
org.joda.time.field.BaseDurationField.compareTo : l1 = virtualinvoke r0.<org.joda.time.field.BaseDurationField: long getUnitMillis()>() >>>>>>>> org.joda.time.field.BaseDurationField.compareTo : $b2 = l1 cmp l0
org.joda.time.field.BaseDurationField.compareTo : $b2 = l1 cmp l0 >>>>>>>> org.joda.time.field.BaseDurationField.compareTo : if $b2 != 0
org.joda.time.field.BaseDurationField.compareTo : if $b2 != 0 >>>>>>>> org.joda.time.field.BaseDurationField.compareTo : $b3 = l1 cmp l0
org.joda.time.field.BaseDurationField.compareTo : $b3 = l1 cmp l0 >>>>>>>> org.joda.time.field.BaseDurationField.compareTo : if $b3 >= 0
org.joda.time.field.BaseDurationField.compareTo : if $b3 >= 0 >>>>>>>> org.joda.time.field.BaseDurationField.compareTo : return 1
org.joda.time.field.BaseDurationField.compareTo : return 1 >>>>>>>> org.joda.time.field.BaseDurationField.compareTo : return $i0
org.joda.time.field.BaseDurationField.compareTo : return $i0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.compareReverse : $i1 = neg $i0
org.joda.time.format.DateTimeParserBucket.compareReverse : $i1 = neg $i0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.compareReverse : return $i1
org.joda.time.format.DateTimeParserBucket.compareReverse : return $i1 >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedField.compareTo : if i0 == 0
org.joda.time.format.DateTimeParserBucket$SavedField.compareTo : if i0 == 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedField.compareTo : return i0
org.joda.time.format.DateTimeParserBucket$SavedField.compareTo : return i0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : if $i4 <= 0
org.joda.time.format.DateTimeParserBucket.sort : if $i4 <= 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : if i0 <= 0
org.joda.time.format.DateTimeParserBucket.computeMillis : if i0 <= 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $r11 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>()
org.joda.time.format.DateTimeParserBucket.computeMillis : $r11 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType months()>() >>>>>>>> org.joda.time.DurationFieldType.months : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MONTHS_TYPE>
org.joda.time.DurationFieldType.months : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType MONTHS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.months : return $r0
org.joda.time.DurationFieldType.months : return $r0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $r12 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.Chronology iChrono>
org.joda.time.format.DateTimeParserBucket.computeMillis : $r12 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.Chronology iChrono> >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : r3 = virtualinvoke $r11.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r12)
org.joda.time.format.DateTimeParserBucket.computeMillis : r3 = virtualinvoke $r11.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r12) >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal>
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal> >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : tableswitch($b0) {     case 1:
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : tableswitch($b0) {     case 1: >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r7 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField months()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r7 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField months()>() >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r7
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r7 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $r13 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>()
org.joda.time.format.DateTimeParserBucket.computeMillis : $r13 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType days()>() >>>>>>>> org.joda.time.DurationFieldType.days : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType DAYS_TYPE>
org.joda.time.DurationFieldType.days : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType DAYS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.days : return $r0
org.joda.time.DurationFieldType.days : return $r0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $r14 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.Chronology iChrono>
org.joda.time.format.DateTimeParserBucket.computeMillis : $r14 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.Chronology iChrono> >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : r4 = virtualinvoke $r13.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r14)
org.joda.time.format.DateTimeParserBucket.computeMillis : r4 = virtualinvoke $r13.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>($r14) >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r9 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField days()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r9 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField days()>() >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r9
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r9 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $r15 = r2[0]
org.joda.time.format.DateTimeParserBucket.computeMillis : $r15 = r2[0] >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $r16 = $r15.<org.joda.time.format.DateTimeParserBucket$SavedField: org.joda.time.DateTimeField iField>
org.joda.time.format.DateTimeParserBucket.computeMillis : $r16 = $r15.<org.joda.time.format.DateTimeParserBucket$SavedField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : r5 = virtualinvoke $r16.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>()
org.joda.time.format.DateTimeParserBucket.computeMillis : r5 = virtualinvoke $r16.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>() >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getDurationField : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DelegatedDateTimeField.getDurationField : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getDurationField : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>()
org.joda.time.field.DelegatedDateTimeField.getDurationField : $r2 = virtualinvoke $r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>() >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getDurationField : $r1 = r0.<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField iUnitField>
org.joda.time.field.PreciseDurationDateTimeField.getDurationField : $r1 = r0.<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField iUnitField> >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getDurationField : return $r1
org.joda.time.field.PreciseDurationDateTimeField.getDurationField : return $r1 >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getDurationField : return $r2
org.joda.time.field.DelegatedDateTimeField.getDurationField : return $r2 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $i1 = staticinvoke <org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>(r5, r3)
org.joda.time.format.DateTimeParserBucket.computeMillis : $i1 = staticinvoke <org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>(r5, r3) >>>>>>>> org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getUnitMillis : $r1 = r0.<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: org.joda.time.field.ImpreciseDateTimeField this$0>
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getUnitMillis : $r1 = r0.<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: org.joda.time.field.ImpreciseDateTimeField this$0> >>>>>>>> org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getUnitMillis : $l0 = $r1.<org.joda.time.field.ImpreciseDateTimeField: long iUnitMillis>
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getUnitMillis : $l0 = $r1.<org.joda.time.field.ImpreciseDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getUnitMillis : return $l0
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getUnitMillis : return $l0 >>>>>>>> org.joda.time.field.BaseDurationField.compareTo : return -1
org.joda.time.field.BaseDurationField.compareTo : return -1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : if $i1 < 0
org.joda.time.format.DateTimeParserBucket.computeMillis : if $i1 < 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $i2 = staticinvoke <org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>(r5, r4)
org.joda.time.format.DateTimeParserBucket.computeMillis : $i2 = staticinvoke <org.joda.time.format.DateTimeParserBucket: int compareReverse(org.joda.time.DurationField,org.joda.time.DurationField)>(r5, r4) >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : if $i2 > 0
org.joda.time.format.DateTimeParserBucket.computeMillis : if $i2 > 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : l5 = r0.<org.joda.time.format.DateTimeParserBucket: long iMillis>
org.joda.time.format.DateTimeParserBucket.computeMillis : l5 = r0.<org.joda.time.format.DateTimeParserBucket: long iMillis> >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : i6 = 0
org.joda.time.format.DateTimeParserBucket.computeMillis : i6 = 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : if i6 >= i0
org.joda.time.format.DateTimeParserBucket.computeMillis : if i6 >= i0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $r18 = r2[i6]
org.joda.time.format.DateTimeParserBucket.computeMillis : $r18 = r2[i6] >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : l5 = virtualinvoke $r18.<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>(l5, z0)
org.joda.time.format.DateTimeParserBucket.computeMillis : l5 = virtualinvoke $r18.<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>(l5, z0) >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedField.set : $r1 = r0.<org.joda.time.format.DateTimeParserBucket$SavedField: java.lang.String iText>
org.joda.time.format.DateTimeParserBucket$SavedField.set : $r1 = r0.<org.joda.time.format.DateTimeParserBucket$SavedField: java.lang.String iText> >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedField.set : if $r1 != null
org.joda.time.format.DateTimeParserBucket$SavedField.set : if $r1 != null >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedField.set : $r2 = r0.<org.joda.time.format.DateTimeParserBucket$SavedField: org.joda.time.DateTimeField iField>
org.joda.time.format.DateTimeParserBucket$SavedField.set : $r2 = r0.<org.joda.time.format.DateTimeParserBucket$SavedField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedField.set : $i1 = r0.<org.joda.time.format.DateTimeParserBucket$SavedField: int iValue>
org.joda.time.format.DateTimeParserBucket$SavedField.set : $i1 = r0.<org.joda.time.format.DateTimeParserBucket$SavedField: int iValue> >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedField.set : l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>(l0, $i1)
org.joda.time.format.DateTimeParserBucket$SavedField.set : l2 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>(l0, $i1) >>>>>>>> org.joda.time.field.LenientDateTimeField.set : $r1 = r0.<org.joda.time.field.LenientDateTimeField: org.joda.time.Chronology iBase>
org.joda.time.field.LenientDateTimeField.set : $r1 = r0.<org.joda.time.field.LenientDateTimeField: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.field.LenientDateTimeField.set : $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.field.LenientDateTimeField.set : $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.field.LenientDateTimeField.set : l2 = virtualinvoke $r2.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>(l0)
org.joda.time.field.LenientDateTimeField.set : l2 = virtualinvoke $r2.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>(l0) >>>>>>>> org.joda.time.DateTimeZone.convertUTCToLocal : i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0)
org.joda.time.DateTimeZone.convertUTCToLocal : i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0) >>>>>>>> org.joda.time.DateTimeZone.convertUTCToLocal : $l3 = (long) i1
org.joda.time.DateTimeZone.convertUTCToLocal : $l3 = (long) i1 >>>>>>>> org.joda.time.DateTimeZone.convertUTCToLocal : l2 = l0 + $l3
org.joda.time.DateTimeZone.convertUTCToLocal : l2 = l0 + $l3 >>>>>>>> org.joda.time.DateTimeZone.convertUTCToLocal : $l4 = l0 ^ l2
org.joda.time.DateTimeZone.convertUTCToLocal : $l4 = l0 ^ l2 >>>>>>>> org.joda.time.DateTimeZone.convertUTCToLocal : $b5 = $l4 cmp 0L
org.joda.time.DateTimeZone.convertUTCToLocal : $b5 = $l4 cmp 0L >>>>>>>> org.joda.time.DateTimeZone.convertUTCToLocal : if $b5 >= 0
org.joda.time.DateTimeZone.convertUTCToLocal : if $b5 >= 0 >>>>>>>> org.joda.time.DateTimeZone.convertUTCToLocal : return l2
org.joda.time.DateTimeZone.convertUTCToLocal : return l2 >>>>>>>> org.joda.time.field.LenientDateTimeField.set : $l4 = (long) i1
org.joda.time.field.LenientDateTimeField.set : $l4 = (long) i1 >>>>>>>> org.joda.time.field.LenientDateTimeField.set : $i5 = virtualinvoke r0.<org.joda.time.field.LenientDateTimeField: int get(long)>(l0)
org.joda.time.field.LenientDateTimeField.set : $i5 = virtualinvoke r0.<org.joda.time.field.LenientDateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.field.DelegatedDateTimeField.get : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DelegatedDateTimeField.get : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.field.DelegatedDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.DateTimeField: int get(long)>(l0)
org.joda.time.field.DelegatedDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.DateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $b1 = l0 cmp 0L
org.joda.time.field.PreciseDateTimeField.get : $b1 = l0 cmp 0L >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : if $b1 < 0
org.joda.time.field.PreciseDateTimeField.get : if $b1 < 0 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l2 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: long getUnitMillis()>()
org.joda.time.field.PreciseDateTimeField.get : $l2 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: long getUnitMillis()>() >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : return $l0
org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : return $l0 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l3 = l0 / $l2
org.joda.time.field.PreciseDateTimeField.get : $l3 = l0 / $l2 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $i4 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange>
org.joda.time.field.PreciseDateTimeField.get : $i4 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange> >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l5 = (long) $i4
org.joda.time.field.PreciseDateTimeField.get : $l5 = (long) $i4 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l6 = $l3 % $l5
org.joda.time.field.PreciseDateTimeField.get : $l6 = $l3 % $l5 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $i7 = (int) $l6
org.joda.time.field.PreciseDateTimeField.get : $i7 = (int) $l6 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : return $i7
org.joda.time.field.PreciseDateTimeField.get : return $i7 >>>>>>>> org.joda.time.field.DelegatedDateTimeField.get : return $i1
org.joda.time.field.DelegatedDateTimeField.get : return $i1 >>>>>>>> org.joda.time.field.LenientDateTimeField.set : $l6 = (long) $i5
org.joda.time.field.LenientDateTimeField.set : $l6 = (long) $i5 >>>>>>>> org.joda.time.field.LenientDateTimeField.set : l3 = staticinvoke <org.joda.time.field.FieldUtils: long safeSubtract(long,long)>($l4, $l6)
org.joda.time.field.LenientDateTimeField.set : l3 = staticinvoke <org.joda.time.field.FieldUtils: long safeSubtract(long,long)>($l4, $l6) >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : l2 = l0 - l1
org.joda.time.field.FieldUtils.safeSubtract : l2 = l0 - l1 >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : $l3 = l0 ^ l2
org.joda.time.field.FieldUtils.safeSubtract : $l3 = l0 ^ l2 >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : $b4 = $l3 cmp 0L
org.joda.time.field.FieldUtils.safeSubtract : $b4 = $l3 cmp 0L >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : if $b4 >= 0
org.joda.time.field.FieldUtils.safeSubtract : if $b4 >= 0 >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : return l2
org.joda.time.field.FieldUtils.safeSubtract : return l2 >>>>>>>> org.joda.time.field.LenientDateTimeField.set : $r3 = virtualinvoke r0.<org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeFieldType getType()>()
org.joda.time.field.LenientDateTimeField.set : $r3 = virtualinvoke r0.<org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeFieldType getType()>() >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getType : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeFieldType iType>
org.joda.time.field.DelegatedDateTimeField.getType : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeFieldType iType> >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getType : return $r1
org.joda.time.field.DelegatedDateTimeField.getType : return $r1 >>>>>>>> org.joda.time.field.LenientDateTimeField.set : $r4 = r0.<org.joda.time.field.LenientDateTimeField: org.joda.time.Chronology iBase>
org.joda.time.field.LenientDateTimeField.set : $r4 = r0.<org.joda.time.field.LenientDateTimeField: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.field.LenientDateTimeField.set : $r5 = virtualinvoke $r4.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>()
org.joda.time.field.LenientDateTimeField.set : $r5 = virtualinvoke $r4.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>() >>>>>>>> org.joda.time.chrono.ISOChronology.withUTC : $r1 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC>
org.joda.time.chrono.ISOChronology.withUTC : $r1 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.ISOChronology.withUTC : return $r1
org.joda.time.chrono.ISOChronology.withUTC : return $r1 >>>>>>>> org.joda.time.field.LenientDateTimeField.set : $r6 = virtualinvoke $r3.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r5)
org.joda.time.field.LenientDateTimeField.set : $r6 = virtualinvoke $r3.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r5) >>>>>>>> org.joda.time.field.LenientDateTimeField.set : l7 = virtualinvoke $r6.<org.joda.time.DateTimeField: long add(long,long)>(l2, l3)
org.joda.time.field.LenientDateTimeField.set : l7 = virtualinvoke $r6.<org.joda.time.DateTimeField: long add(long,long)>(l2, l3) >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $r1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getDurationField()>()
org.joda.time.field.BaseDateTimeField.add : $r1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getDurationField()>() >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $l2 = virtualinvoke $r1.<org.joda.time.DurationField: long add(long,long)>(l0, l1)
org.joda.time.field.BaseDateTimeField.add : $l2 = virtualinvoke $r1.<org.joda.time.DurationField: long add(long,long)>(l0, l1) >>>>>>>> org.joda.time.field.PreciseDurationField.add : $l3 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis>
org.joda.time.field.PreciseDurationField.add : $l3 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationField.add : l2 = staticinvoke <org.joda.time.field.FieldUtils: long safeMultiply(long,long)>(l1, $l3)
org.joda.time.field.PreciseDurationField.add : l2 = staticinvoke <org.joda.time.field.FieldUtils: long safeMultiply(long,long)>(l1, $l3) >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : $b3 = l1 cmp 1L
org.joda.time.field.FieldUtils.safeMultiply : $b3 = l1 cmp 1L >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : if $b3 != 0
org.joda.time.field.FieldUtils.safeMultiply : if $b3 != 0 >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : $b4 = l1 cmp 0L
org.joda.time.field.FieldUtils.safeMultiply : $b4 = l1 cmp 0L >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : if $b4 != 0
org.joda.time.field.FieldUtils.safeMultiply : if $b4 != 0 >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : l2 = l0 * l1
org.joda.time.field.FieldUtils.safeMultiply : l2 = l0 * l1 >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : $l5 = l2 / l1
org.joda.time.field.FieldUtils.safeMultiply : $l5 = l2 / l1 >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : $b6 = $l5 cmp l0
org.joda.time.field.FieldUtils.safeMultiply : $b6 = $l5 cmp l0 >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : if $b6 == 0
org.joda.time.field.FieldUtils.safeMultiply : if $b6 == 0 >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : return l2
org.joda.time.field.FieldUtils.safeMultiply : return l2 >>>>>>>> org.joda.time.field.PreciseDurationField.add : $l4 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l0, l2)
org.joda.time.field.PreciseDurationField.add : $l4 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l0, l2) >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : l2 = l0 + l1
org.joda.time.field.FieldUtils.safeAdd : l2 = l0 + l1 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $l3 = l0 ^ l2
org.joda.time.field.FieldUtils.safeAdd : $l3 = l0 ^ l2 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $b4 = $l3 cmp 0L
org.joda.time.field.FieldUtils.safeAdd : $b4 = $l3 cmp 0L >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : if $b4 >= 0
org.joda.time.field.FieldUtils.safeAdd : if $b4 >= 0 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : return l2
org.joda.time.field.FieldUtils.safeAdd : return l2 >>>>>>>> org.joda.time.field.PreciseDurationField.add : return $l4
org.joda.time.field.PreciseDurationField.add : return $l4 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : return $l2
org.joda.time.field.BaseDateTimeField.add : return $l2 >>>>>>>> org.joda.time.field.LenientDateTimeField.set : $r7 = r0.<org.joda.time.field.LenientDateTimeField: org.joda.time.Chronology iBase>
org.joda.time.field.LenientDateTimeField.set : $r7 = r0.<org.joda.time.field.LenientDateTimeField: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.field.LenientDateTimeField.set : $r8 = virtualinvoke $r7.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.field.LenientDateTimeField.set : $r8 = virtualinvoke $r7.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.field.LenientDateTimeField.set : $l8 = virtualinvoke $r8.<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>(l7, 0, l0)
org.joda.time.field.LenientDateTimeField.set : $l8 = virtualinvoke $r8.<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>(l7, 0, l0) >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : i2 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l1)
org.joda.time.DateTimeZone.convertLocalToUTC : i2 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l1) >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : $l5 = (long) i2
org.joda.time.DateTimeZone.convertLocalToUTC : $l5 = (long) i2 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : l3 = l0 - $l5
org.joda.time.DateTimeZone.convertLocalToUTC : l3 = l0 - $l5 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : i4 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l3)
org.joda.time.DateTimeZone.convertLocalToUTC : i4 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l3) >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : if i4 != i2
org.joda.time.DateTimeZone.convertLocalToUTC : if i4 != i2 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : return l3
org.joda.time.DateTimeZone.convertLocalToUTC : return l3 >>>>>>>> org.joda.time.field.LenientDateTimeField.set : return $l8
org.joda.time.field.LenientDateTimeField.set : return $l8 >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedField.set : goto [?= (branch)]
org.joda.time.format.DateTimeParserBucket$SavedField.set : goto [?= (branch)] >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedField.set : if z0 == 0
org.joda.time.format.DateTimeParserBucket$SavedField.set : if z0 == 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedField.set : return l2
org.joda.time.format.DateTimeParserBucket$SavedField.set : return l2 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : i6 = i6 + 1
org.joda.time.format.DateTimeParserBucket.computeMillis : i6 = i6 + 1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : goto [?= (branch)]
org.joda.time.format.DateTimeParserBucket.computeMillis : goto [?= (branch)] >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : if z0 == 0
org.joda.time.format.DateTimeParserBucket.computeMillis : if z0 == 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : goto [?= $r27 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset>]
org.joda.time.format.DateTimeParserBucket.computeMillis : goto [?= $r27 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset>] >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $r27 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset>
org.joda.time.format.DateTimeParserBucket.computeMillis : $r27 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset> >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : if $r27 == null
org.joda.time.format.DateTimeParserBucket.computeMillis : if $r27 == null >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $r29 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone>
org.joda.time.format.DateTimeParserBucket.computeMillis : $r29 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : if $r29 == null
org.joda.time.format.DateTimeParserBucket.computeMillis : if $r29 == null >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $r30 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone>
org.joda.time.format.DateTimeParserBucket.computeMillis : $r30 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : i12 = virtualinvoke $r30.<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>(l5)
org.joda.time.format.DateTimeParserBucket.computeMillis : i12 = virtualinvoke $r30.<org.joda.time.DateTimeZone: int getOffsetFromLocal(long)>(l5) >>>>>>>> org.joda.time.tz.FixedDateTimeZone.getOffsetFromLocal : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset>
org.joda.time.tz.FixedDateTimeZone.getOffsetFromLocal : $i1 = r0.<org.joda.time.tz.FixedDateTimeZone: int iWallOffset> >>>>>>>> org.joda.time.tz.FixedDateTimeZone.getOffsetFromLocal : return $i1
org.joda.time.tz.FixedDateTimeZone.getOffsetFromLocal : return $i1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $l13 = (long) i12
org.joda.time.format.DateTimeParserBucket.computeMillis : $l13 = (long) i12 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : l5 = l5 - $l13
org.joda.time.format.DateTimeParserBucket.computeMillis : l5 = l5 - $l13 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $r31 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone>
org.joda.time.format.DateTimeParserBucket.computeMillis : $r31 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $i14 = virtualinvoke $r31.<org.joda.time.DateTimeZone: int getOffset(long)>(l5)
org.joda.time.format.DateTimeParserBucket.computeMillis : $i14 = virtualinvoke $r31.<org.joda.time.DateTimeZone: int getOffset(long)>(l5) >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : if i12 == $i14
org.joda.time.format.DateTimeParserBucket.computeMillis : if i12 == $i14 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : return l5
org.joda.time.format.DateTimeParserBucket.computeMillis : return l5 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : interfaceinvoke r1.<org.joda.time.ReadWritableInstant: void setMillis(long)>($l8)
org.joda.time.format.DateTimeFormatter.parseInto : interfaceinvoke r1.<org.joda.time.ReadWritableInstant: void setMillis(long)>($l8) >>>>>>>> org.joda.time.MutableDateTime.setMillis : $i1 = r0.<org.joda.time.MutableDateTime: int iRoundingMode>
org.joda.time.MutableDateTime.setMillis : $i1 = r0.<org.joda.time.MutableDateTime: int iRoundingMode> >>>>>>>> org.joda.time.MutableDateTime.setMillis : tableswitch($i1) {     case 0:
org.joda.time.MutableDateTime.setMillis : tableswitch($i1) {     case 0: >>>>>>>> org.joda.time.MutableDateTime.setMillis : goto [?= specialinvoke r0.<org.joda.time.base.BaseDateTime: void setMillis(long)>(l0)]
org.joda.time.MutableDateTime.setMillis : goto [?= specialinvoke r0.<org.joda.time.base.BaseDateTime: void setMillis(long)>(l0)] >>>>>>>> org.joda.time.MutableDateTime.setMillis : specialinvoke r0.<org.joda.time.base.BaseDateTime: void setMillis(long)>(l0)
org.joda.time.MutableDateTime.setMillis : specialinvoke r0.<org.joda.time.base.BaseDateTime: void setMillis(long)>(l0) >>>>>>>> org.joda.time.base.BaseDateTime.setMillis : $r1 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology>
org.joda.time.base.BaseDateTime.setMillis : $r1 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology> >>>>>>>> org.joda.time.base.BaseDateTime.setMillis : $l1 = virtualinvoke r0.<org.joda.time.base.BaseDateTime: long checkInstant(long,org.joda.time.Chronology)>(l0, $r1)
org.joda.time.base.BaseDateTime.setMillis : $l1 = virtualinvoke r0.<org.joda.time.base.BaseDateTime: long checkInstant(long,org.joda.time.Chronology)>(l0, $r1) >>>>>>>> org.joda.time.base.BaseDateTime.setMillis : r0.<org.joda.time.base.BaseDateTime: long iMillis> = $l1
org.joda.time.base.BaseDateTime.setMillis : r0.<org.joda.time.base.BaseDateTime: long iMillis> = $l1 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : $z0 = r0.<org.joda.time.format.DateTimeFormatter: boolean iOffsetParsed>
org.joda.time.format.DateTimeFormatter.parseInto : $z0 = r0.<org.joda.time.format.DateTimeFormatter: boolean iOffsetParsed> >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : if $z0 == 0
org.joda.time.format.DateTimeFormatter.parseInto : if $z0 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : $r15 = virtualinvoke r5.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone getZone()>()
org.joda.time.format.DateTimeFormatter.parseInto : $r15 = virtualinvoke r5.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.format.DateTimeParserBucket.getZone : $r1 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone>
org.joda.time.format.DateTimeParserBucket.getZone : $r1 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.format.DateTimeParserBucket.getZone : return $r1
org.joda.time.format.DateTimeParserBucket.getZone : return $r1 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : if $r15 == null
org.joda.time.format.DateTimeFormatter.parseInto : if $r15 == null >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : $r16 = virtualinvoke r5.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone getZone()>()
org.joda.time.format.DateTimeFormatter.parseInto : $r16 = virtualinvoke r5.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : r9 = virtualinvoke r9.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>($r16)
org.joda.time.format.DateTimeFormatter.parseInto : r9 = virtualinvoke r9.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>($r16) >>>>>>>> org.joda.time.chrono.LenientChronology.withZone : if r1 != null
org.joda.time.chrono.LenientChronology.withZone : if r1 != null >>>>>>>> org.joda.time.chrono.LenientChronology.withZone : $r2 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>
org.joda.time.chrono.LenientChronology.withZone : $r2 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC> >>>>>>>> org.joda.time.chrono.LenientChronology.withZone : if r1 != $r2
org.joda.time.chrono.LenientChronology.withZone : if r1 != $r2 >>>>>>>> org.joda.time.chrono.LenientChronology.withZone : $r3 = virtualinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>()
org.joda.time.chrono.LenientChronology.withZone : $r3 = virtualinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology withUTC()>() >>>>>>>> org.joda.time.chrono.LenientChronology.withZone : return $r3
org.joda.time.chrono.LenientChronology.withZone : return $r3 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : interfaceinvoke r1.<org.joda.time.ReadWritableInstant: void setChronology(org.joda.time.Chronology)>(r9)
org.joda.time.format.DateTimeFormatter.parseInto : interfaceinvoke r1.<org.joda.time.ReadWritableInstant: void setChronology(org.joda.time.Chronology)>(r9) >>>>>>>> org.joda.time.MutableDateTime.setChronology : specialinvoke r0.<org.joda.time.base.BaseDateTime: void setChronology(org.joda.time.Chronology)>(r1)
org.joda.time.MutableDateTime.setChronology : specialinvoke r0.<org.joda.time.base.BaseDateTime: void setChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.base.BaseDateTime.setChronology : $r2 = virtualinvoke r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology checkChronology(org.joda.time.Chronology)>(r1)
org.joda.time.base.BaseDateTime.setChronology : $r2 = virtualinvoke r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology checkChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.base.BaseDateTime.setChronology : r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology> = $r2
org.joda.time.base.BaseDateTime.setChronology : r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology> = $r2 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : $r17 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>
org.joda.time.format.DateTimeFormatter.parseInto : $r17 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : if $r17 == null
org.joda.time.format.DateTimeFormatter.parseInto : if $r17 == null >>>>>>>> org.joda.time.format.DateTimeFormatter.parseInto : return i3
org.joda.time.format.DateTimeFormatter.parseInto : return i3 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseTime : $b3 = b0 ^ -1
org.joda.time.tz.ZoneInfoCompiler.parseTime : $b3 = b0 ^ -1 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseTime : if i1 != $b3
org.joda.time.tz.ZoneInfoCompiler.parseTime : if i1 != $b3 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseTime : $l4 = virtualinvoke r3.<org.joda.time.MutableDateTime: long getMillis()>()
org.joda.time.tz.ZoneInfoCompiler.parseTime : $l4 = virtualinvoke r3.<org.joda.time.MutableDateTime: long getMillis()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseTime : i2 = (int) $l4
org.joda.time.tz.ZoneInfoCompiler.parseTime : i2 = (int) $l4 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseTime : if b0 != 1
org.joda.time.tz.ZoneInfoCompiler.parseTime : if b0 != 1 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseTime : return i2
org.joda.time.tz.ZoneInfoCompiler.parseTime : return i2 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseOptional : $r1 = r0
org.joda.time.tz.ZoneInfoCompiler.parseOptional : $r1 = r0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDataFile : r7 = $r12
org.joda.time.tz.ZoneInfoCompiler.parseDataFile : r7 = $r12 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDataFile : $r13 = r0.<org.joda.time.tz.ZoneInfoCompiler: java.util.Map iRuleSets>
org.joda.time.tz.ZoneInfoCompiler.parseDataFile : $r13 = r0.<org.joda.time.tz.ZoneInfoCompiler: java.util.Map iRuleSets> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDataFile : $r14 = r7.<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String iName>
org.joda.time.tz.ZoneInfoCompiler.parseDataFile : $r14 = r7.<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String iName> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDataFile : $r15 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>($r14)
org.joda.time.tz.ZoneInfoCompiler.parseDataFile : $r15 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>($r14) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDataFile : r8 = (org.joda.time.tz.ZoneInfoCompiler$RuleSet) $r15
org.joda.time.tz.ZoneInfoCompiler.parseDataFile : r8 = (org.joda.time.tz.ZoneInfoCompiler$RuleSet) $r15 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDataFile : if r8 != null
org.joda.time.tz.ZoneInfoCompiler.parseDataFile : if r8 != null >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDataFile : $r16 = new org.joda.time.tz.ZoneInfoCompiler$RuleSet
org.joda.time.tz.ZoneInfoCompiler.parseDataFile : $r16 = new org.joda.time.tz.ZoneInfoCompiler$RuleSet >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDataFile : specialinvoke $r16.<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void <init>(org.joda.time.tz.ZoneInfoCompiler$Rule)>(r7)
org.joda.time.tz.ZoneInfoCompiler.parseDataFile : specialinvoke $r16.<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void <init>(org.joda.time.tz.ZoneInfoCompiler$Rule)>(r7) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDataFile : r17 = $r16
org.joda.time.tz.ZoneInfoCompiler.parseDataFile : r17 = $r16 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDataFile : $r18 = r0.<org.joda.time.tz.ZoneInfoCompiler: java.util.Map iRuleSets>
org.joda.time.tz.ZoneInfoCompiler.parseDataFile : $r18 = r0.<org.joda.time.tz.ZoneInfoCompiler: java.util.Map iRuleSets> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDataFile : $r19 = r7.<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String iName>
org.joda.time.tz.ZoneInfoCompiler.parseDataFile : $r19 = r7.<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String iName> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDataFile : interfaceinvoke $r18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, r17)
org.joda.time.tz.ZoneInfoCompiler.parseDataFile : interfaceinvoke $r18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, r17) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDataFile : goto [?= (branch)]
org.joda.time.tz.ZoneInfoCompiler.parseDataFile : goto [?= (branch)] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 23034375
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 23034375 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 25650000
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 25650000 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 10
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 10 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDataFile : virtualinvoke r8.<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRule(org.joda.time.tz.ZoneInfoCompiler$Rule)>(r7)
org.joda.time.tz.ZoneInfoCompiler.parseDataFile : virtualinvoke r8.<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRule(org.joda.time.tz.ZoneInfoCompiler$Rule)>(r7) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$RuleSet.addRule : $r2 = r1.<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String iName>
org.joda.time.tz.ZoneInfoCompiler$RuleSet.addRule : $r2 = r1.<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String iName> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$RuleSet.addRule : $r3 = r0.<org.joda.time.tz.ZoneInfoCompiler$RuleSet: java.util.List iRules>
org.joda.time.tz.ZoneInfoCompiler$RuleSet.addRule : $r3 = r0.<org.joda.time.tz.ZoneInfoCompiler$RuleSet: java.util.List iRules> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$RuleSet.addRule : $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(0)
org.joda.time.tz.ZoneInfoCompiler$RuleSet.addRule : $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(0) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$RuleSet.addRule : $r5 = (org.joda.time.tz.ZoneInfoCompiler$Rule) $r4
org.joda.time.tz.ZoneInfoCompiler$RuleSet.addRule : $r5 = (org.joda.time.tz.ZoneInfoCompiler$Rule) $r4 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$RuleSet.addRule : $r6 = $r5.<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String iName>
org.joda.time.tz.ZoneInfoCompiler$RuleSet.addRule : $r6 = $r5.<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String iName> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$RuleSet.addRule : $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r6)
org.joda.time.tz.ZoneInfoCompiler$RuleSet.addRule : $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r6) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$RuleSet.addRule : if $z0 != 0
org.joda.time.tz.ZoneInfoCompiler$RuleSet.addRule : if $z0 != 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$RuleSet.addRule : $r8 = r0.<org.joda.time.tz.ZoneInfoCompiler$RuleSet: java.util.List iRules>
org.joda.time.tz.ZoneInfoCompiler$RuleSet.addRule : $r8 = r0.<org.joda.time.tz.ZoneInfoCompiler$RuleSet: java.util.List iRules> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$RuleSet.addRule : interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r1)
org.joda.time.tz.ZoneInfoCompiler$RuleSet.addRule : interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r1) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDataFile : r3 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>(0, i0)
org.joda.time.tz.ZoneInfoCompiler.parseDataFile : r3 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int,int)>(0, i0) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseYear : return i0
org.joda.time.tz.ZoneInfoCompiler.parseYear : return i0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 2
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 2 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 17887500
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 17887500 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 20503125
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 20503125 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 8
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 8 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseZoneChar : return 117
org.joda.time.tz.ZoneInfoCompiler.parseZoneChar : return 117 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : c5 = staticinvoke <java.lang.Character: char toUpperCase(char)>(c1)
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : c5 = staticinvoke <java.lang.Character: char toUpperCase(char)>(c1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : c6 = staticinvoke <java.lang.Character: char toUpperCase(char)>(c2)
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : c6 = staticinvoke <java.lang.Character: char toUpperCase(char)>(c2) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : if c5 == c6
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : if c5 == c6 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : c7 = staticinvoke <java.lang.Character: char toLowerCase(char)>(c5)
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : c7 = staticinvoke <java.lang.Character: char toLowerCase(char)>(c5) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : c8 = staticinvoke <java.lang.Character: char toLowerCase(char)>(c6)
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : c8 = staticinvoke <java.lang.Character: char toLowerCase(char)>(c6) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : if c7 == c8
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : if c7 == c8 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : $i9 = i0 ^ -1
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : $i9 = i0 ^ -1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : return $i9
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.parseInto : return $i9 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 9
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 9 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseYear : return 2147483647
org.joda.time.tz.ZoneInfoCompiler.parseYear : return 2147483647 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 10125000
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 10125000 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 4
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 4 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDataFile : $z5 = virtualinvoke r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Zone")
org.joda.time.tz.ZoneInfoCompiler.parseDataFile : $z5 = virtualinvoke r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Zone") >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDataFile : if $z5 == 0
org.joda.time.tz.ZoneInfoCompiler.parseDataFile : if $z5 == 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDataFile : $r21 = new org.joda.time.tz.ZoneInfoCompiler$Zone
org.joda.time.tz.ZoneInfoCompiler.parseDataFile : $r21 = new org.joda.time.tz.ZoneInfoCompiler$Zone >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDataFile : specialinvoke $r21.<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.util.StringTokenizer)>(r5)
org.joda.time.tz.ZoneInfoCompiler.parseDataFile : specialinvoke $r21.<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.util.StringTokenizer)>(r5) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseTime : b0 = 1
org.joda.time.tz.ZoneInfoCompiler.parseTime : b0 = 1 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r23 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r23 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>() >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r23
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r23 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseTime : i2 = neg i2
org.joda.time.tz.ZoneInfoCompiler.parseTime : i2 = neg i2 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.getStartOfYear : $r0 = <org.joda.time.tz.ZoneInfoCompiler: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear cStartOfYear>
org.joda.time.tz.ZoneInfoCompiler.getStartOfYear : $r0 = <org.joda.time.tz.ZoneInfoCompiler: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear cStartOfYear> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.getStartOfYear : if $r0 != null
org.joda.time.tz.ZoneInfoCompiler.getStartOfYear : if $r0 != null >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.getStartOfYear : $r1 = new org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear
org.joda.time.tz.ZoneInfoCompiler.getStartOfYear : $r1 = new org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.getStartOfYear : specialinvoke $r1.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>()>()
org.joda.time.tz.ZoneInfoCompiler.getStartOfYear : specialinvoke $r1.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void <init>()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.getStartOfYear : <org.joda.time.tz.ZoneInfoCompiler: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear cStartOfYear> = $r1
org.joda.time.tz.ZoneInfoCompiler.getStartOfYear : <org.joda.time.tz.ZoneInfoCompiler: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear cStartOfYear> = $r1 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.getStartOfYear : $r2 = <org.joda.time.tz.ZoneInfoCompiler: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear cStartOfYear>
org.joda.time.tz.ZoneInfoCompiler.getStartOfYear : $r2 = <org.joda.time.tz.ZoneInfoCompiler: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear cStartOfYear> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.getStartOfYear : return $r2
org.joda.time.tz.ZoneInfoCompiler.getStartOfYear : return $r2 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 28181250
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 28181250 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 11
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 11 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDataFile : r2 = $r21
org.joda.time.tz.ZoneInfoCompiler.parseDataFile : r2 = $r21 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDataFile : $z1 = virtualinvoke r5.<java.util.StringTokenizer: boolean hasMoreTokens()>()
org.joda.time.tz.ZoneInfoCompiler.parseDataFile : $z1 = virtualinvoke r5.<java.util.StringTokenizer: boolean hasMoreTokens()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDataFile : if $z1 == 0
org.joda.time.tz.ZoneInfoCompiler.parseDataFile : if $z1 == 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDataFile : virtualinvoke r2.<org.joda.time.tz.ZoneInfoCompiler$Zone: void chain(java.util.StringTokenizer)>(r5)
org.joda.time.tz.ZoneInfoCompiler.parseDataFile : virtualinvoke r2.<org.joda.time.tz.ZoneInfoCompiler$Zone: void chain(java.util.StringTokenizer)>(r5) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Zone.chain : $r2 = r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: org.joda.time.tz.ZoneInfoCompiler$Zone iNext>
org.joda.time.tz.ZoneInfoCompiler$Zone.chain : $r2 = r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: org.joda.time.tz.ZoneInfoCompiler$Zone iNext> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Zone.chain : if $r2 == null
org.joda.time.tz.ZoneInfoCompiler$Zone.chain : if $r2 == null >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Zone.chain : $r4 = new org.joda.time.tz.ZoneInfoCompiler$Zone
org.joda.time.tz.ZoneInfoCompiler$Zone.chain : $r4 = new org.joda.time.tz.ZoneInfoCompiler$Zone >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Zone.chain : $r5 = r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iName>
org.joda.time.tz.ZoneInfoCompiler$Zone.chain : $r5 = r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iName> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Zone.chain : specialinvoke $r4.<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>($r5, r1)
org.joda.time.tz.ZoneInfoCompiler$Zone.chain : specialinvoke $r4.<org.joda.time.tz.ZoneInfoCompiler$Zone: void <init>(java.lang.String,java.util.StringTokenizer)>($r5, r1) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Zone.chain : r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: org.joda.time.tz.ZoneInfoCompiler$Zone iNext> = $r4
org.joda.time.tz.ZoneInfoCompiler$Zone.chain : r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: org.joda.time.tz.ZoneInfoCompiler$Zone iNext> = $r4 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Zone.chain : $r3 = r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: org.joda.time.tz.ZoneInfoCompiler$Zone iNext>
org.joda.time.tz.ZoneInfoCompiler$Zone.chain : $r3 = r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: org.joda.time.tz.ZoneInfoCompiler$Zone iNext> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Zone.chain : virtualinvoke $r3.<org.joda.time.tz.ZoneInfoCompiler$Zone: void chain(java.util.StringTokenizer)>(r1)
org.joda.time.tz.ZoneInfoCompiler$Zone.chain : virtualinvoke $r3.<org.joda.time.tz.ZoneInfoCompiler$Zone: void chain(java.util.StringTokenizer)>(r1) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Zone.chain : goto [?= return]
org.joda.time.tz.ZoneInfoCompiler$Zone.chain : goto [?= return] >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDataFile : $r31 = r0.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iZones>
org.joda.time.tz.ZoneInfoCompiler.parseDataFile : $r31 = r0.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iZones> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseDataFile : interfaceinvoke $r31.<java.util.List: boolean add(java.lang.Object)>(r2)
org.joda.time.tz.ZoneInfoCompiler.parseDataFile : interfaceinvoke $r31.<java.util.List: boolean add(java.lang.Object)>(r2) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : virtualinvoke r4.<java.io.BufferedReader: void close()>()
org.joda.time.tz.ZoneInfoCompiler.compile : virtualinvoke r4.<java.io.BufferedReader: void close()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : i0 = i0 + 1
org.joda.time.tz.ZoneInfoCompiler.compile : i0 = i0 + 1 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : goto [?= $i1 = lengthof r2]
org.joda.time.tz.ZoneInfoCompiler.compile : goto [?= $i1 = lengthof r2] >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : if r1 == null
org.joda.time.tz.ZoneInfoCompiler.compile : if r1 == null >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : $z0 = virtualinvoke r1.<java.io.File: boolean exists()>()
org.joda.time.tz.ZoneInfoCompiler.compile : $z0 = virtualinvoke r1.<java.io.File: boolean exists()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : if $z0 != 0
org.joda.time.tz.ZoneInfoCompiler.compile : if $z0 != 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : $z1 = virtualinvoke r1.<java.io.File: boolean isDirectory()>()
org.joda.time.tz.ZoneInfoCompiler.compile : $z1 = virtualinvoke r1.<java.io.File: boolean isDirectory()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : if $z1 != 0
org.joda.time.tz.ZoneInfoCompiler.compile : if $z1 != 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : $r26 = new java.util.TreeMap
org.joda.time.tz.ZoneInfoCompiler.compile : $r26 = new java.util.TreeMap >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : specialinvoke $r26.<java.util.TreeMap: void <init>()>()
org.joda.time.tz.ZoneInfoCompiler.compile : specialinvoke $r26.<java.util.TreeMap: void <init>()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : r27 = $r26
org.joda.time.tz.ZoneInfoCompiler.compile : r27 = $r26 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : $r28 = <java.lang.System: java.io.PrintStream out>
org.joda.time.tz.ZoneInfoCompiler.compile : $r28 = <java.lang.System: java.io.PrintStream out> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : virtualinvoke $r28.<java.io.PrintStream: void println(java.lang.String)>("Writing zoneinfo files")
org.joda.time.tz.ZoneInfoCompiler.compile : virtualinvoke $r28.<java.io.PrintStream: void println(java.lang.String)>("Writing zoneinfo files") >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : i2 = 0
org.joda.time.tz.ZoneInfoCompiler.compile : i2 = 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : $r29 = r0.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iZones>
org.joda.time.tz.ZoneInfoCompiler.compile : $r29 = r0.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iZones> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : $i3 = interfaceinvoke $r29.<java.util.List: int size()>()
org.joda.time.tz.ZoneInfoCompiler.compile : $i3 = interfaceinvoke $r29.<java.util.List: int size()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : if i2 >= $i3
org.joda.time.tz.ZoneInfoCompiler.compile : if i2 >= $i3 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : $r30 = r0.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iZones>
org.joda.time.tz.ZoneInfoCompiler.compile : $r30 = r0.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iZones> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : $r31 = interfaceinvoke $r30.<java.util.List: java.lang.Object get(int)>(i2)
org.joda.time.tz.ZoneInfoCompiler.compile : $r31 = interfaceinvoke $r30.<java.util.List: java.lang.Object get(int)>(i2) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : r5 = (org.joda.time.tz.ZoneInfoCompiler$Zone) $r31
org.joda.time.tz.ZoneInfoCompiler.compile : r5 = (org.joda.time.tz.ZoneInfoCompiler$Zone) $r31 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : $r32 = new org.joda.time.tz.DateTimeZoneBuilder
org.joda.time.tz.ZoneInfoCompiler.compile : $r32 = new org.joda.time.tz.DateTimeZoneBuilder >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : specialinvoke $r32.<org.joda.time.tz.DateTimeZoneBuilder: void <init>()>()
org.joda.time.tz.ZoneInfoCompiler.compile : specialinvoke $r32.<org.joda.time.tz.DateTimeZoneBuilder: void <init>()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : r6 = $r32
org.joda.time.tz.ZoneInfoCompiler.compile : r6 = $r32 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : $r33 = r0.<org.joda.time.tz.ZoneInfoCompiler: java.util.Map iRuleSets>
org.joda.time.tz.ZoneInfoCompiler.compile : $r33 = r0.<org.joda.time.tz.ZoneInfoCompiler: java.util.Map iRuleSets> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : virtualinvoke r5.<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>(r6, $r33)
org.joda.time.tz.ZoneInfoCompiler.compile : virtualinvoke r5.<org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>(r6, $r33) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Zone.addToBuilder : staticinvoke <org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>(r0, r1, r2)
org.joda.time.tz.ZoneInfoCompiler$Zone.addToBuilder : staticinvoke <org.joda.time.tz.ZoneInfoCompiler$Zone: void addToBuilder(org.joda.time.tz.ZoneInfoCompiler$Zone,org.joda.time.tz.DateTimeZoneBuilder,java.util.Map)>(r0, r1, r2) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Zone.addToBuilder : if r0 == null
org.joda.time.tz.ZoneInfoCompiler$Zone.addToBuilder : if r0 == null >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Zone.addToBuilder : $i1 = r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: int iOffsetMillis>
org.joda.time.tz.ZoneInfoCompiler$Zone.addToBuilder : $i1 = r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: int iOffsetMillis> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Zone.addToBuilder : virtualinvoke r1.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder setStandardOffset(int)>($i1)
org.joda.time.tz.ZoneInfoCompiler$Zone.addToBuilder : virtualinvoke r1.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder setStandardOffset(int)>($i1) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.setStandardOffset : $r1 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder$RuleSet getLastRuleSet()>()
org.joda.time.tz.DateTimeZoneBuilder.setStandardOffset : $r1 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder$RuleSet getLastRuleSet()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets>
org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>()
org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : if $i0 != 0
org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : if $i0 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addCutover(int,char,int,int,int,boolean,int)>(-2147483648, 119, 1, 1, 0, 0, 0)
org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addCutover(int,char,int,int,int,boolean,int)>(-2147483648, 119, 1, 1, 0, 0, 0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addCutover : $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets>
org.joda.time.tz.DateTimeZoneBuilder.addCutover : $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addCutover : $i6 = virtualinvoke $r3.<java.util.ArrayList: int size()>()
org.joda.time.tz.DateTimeZoneBuilder.addCutover : $i6 = virtualinvoke $r3.<java.util.ArrayList: int size()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addCutover : if $i6 <= 0
org.joda.time.tz.DateTimeZoneBuilder.addCutover : if $i6 <= 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addCutover : $r8 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets>
org.joda.time.tz.DateTimeZoneBuilder.addCutover : $r8 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addCutover : $r9 = new org.joda.time.tz.DateTimeZoneBuilder$RuleSet
org.joda.time.tz.DateTimeZoneBuilder.addCutover : $r9 = new org.joda.time.tz.DateTimeZoneBuilder$RuleSet >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addCutover : specialinvoke $r9.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <init>()>()
org.joda.time.tz.DateTimeZoneBuilder.addCutover : specialinvoke $r9.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <init>()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addCutover : virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>($r9)
org.joda.time.tz.DateTimeZoneBuilder.addCutover : virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>($r9) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addCutover : return r0
org.joda.time.tz.DateTimeZoneBuilder.addCutover : return r0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets>
org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : $r4 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets>
org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : $r4 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : $i1 = virtualinvoke $r4.<java.util.ArrayList: int size()>()
org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : $i1 = virtualinvoke $r4.<java.util.ArrayList: int size()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : $i2 = $i1 - 1
org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : $i2 = $i1 - 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : $r5 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>($i2)
org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : $r5 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>($i2) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : $r6 = (org.joda.time.tz.DateTimeZoneBuilder$RuleSet) $r5
org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : $r6 = (org.joda.time.tz.DateTimeZoneBuilder$RuleSet) $r5 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : return $r6
org.joda.time.tz.DateTimeZoneBuilder.getLastRuleSet : return $r6 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.setStandardOffset : virtualinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void setStandardOffset(int)>(i0)
org.joda.time.tz.DateTimeZoneBuilder.setStandardOffset : virtualinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void setStandardOffset(int)>(i0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.setStandardOffset : r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset> = i0
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.setStandardOffset : r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset> = i0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.setStandardOffset : return r0
org.joda.time.tz.DateTimeZoneBuilder.setStandardOffset : return r0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Zone.addToBuilder : $r5 = r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iRules>
org.joda.time.tz.ZoneInfoCompiler$Zone.addToBuilder : $r5 = r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iRules> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Zone.addToBuilder : if $r5 != null
org.joda.time.tz.ZoneInfoCompiler$Zone.addToBuilder : if $r5 != null >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Zone.addToBuilder : $r6 = r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iFormat>
org.joda.time.tz.ZoneInfoCompiler$Zone.addToBuilder : $r6 = r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iFormat> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Zone.addToBuilder : virtualinvoke r1.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder setFixedSavings(java.lang.String,int)>($r6, 0)
org.joda.time.tz.ZoneInfoCompiler$Zone.addToBuilder : virtualinvoke r1.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder setFixedSavings(java.lang.String,int)>($r6, 0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.setFixedSavings : $r2 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder$RuleSet getLastRuleSet()>()
org.joda.time.tz.DateTimeZoneBuilder.setFixedSavings : $r2 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder$RuleSet getLastRuleSet()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.setFixedSavings : virtualinvoke $r2.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void setFixedSavings(java.lang.String,int)>(r1, i0)
org.joda.time.tz.DateTimeZoneBuilder.setFixedSavings : virtualinvoke $r2.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void setFixedSavings(java.lang.String,int)>(r1, i0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.setFixedSavings : r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String iInitialNameKey> = r1
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.setFixedSavings : r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String iInitialNameKey> = r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.setFixedSavings : r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iInitialSaveMillis> = i0
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.setFixedSavings : r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iInitialSaveMillis> = i0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.setFixedSavings : return r0
org.joda.time.tz.DateTimeZoneBuilder.setFixedSavings : return r0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Zone.addToBuilder : goto [?= $i2 = r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: int iUntilYear>]
org.joda.time.tz.ZoneInfoCompiler$Zone.addToBuilder : goto [?= $i2 = r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: int iUntilYear>] >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Zone.addToBuilder : $i2 = r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: int iUntilYear>
org.joda.time.tz.ZoneInfoCompiler$Zone.addToBuilder : $i2 = r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: int iUntilYear> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Zone.addToBuilder : if $i2 != 2147483647
org.joda.time.tz.ZoneInfoCompiler$Zone.addToBuilder : if $i2 != 2147483647 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Zone.addToBuilder : $r22 = r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear iUntilDateTimeOfYear>
org.joda.time.tz.ZoneInfoCompiler$Zone.addToBuilder : $r22 = r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear iUntilDateTimeOfYear> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Zone.addToBuilder : $i3 = r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: int iUntilYear>
org.joda.time.tz.ZoneInfoCompiler$Zone.addToBuilder : $i3 = r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: int iUntilYear> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Zone.addToBuilder : virtualinvoke $r22.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void addCutover(org.joda.time.tz.DateTimeZoneBuilder,int)>(r1, $i3)
org.joda.time.tz.ZoneInfoCompiler$Zone.addToBuilder : virtualinvoke $r22.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void addCutover(org.joda.time.tz.DateTimeZoneBuilder,int)>(r1, $i3) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear.addCutover : $c1 = r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: char iZoneChar>
org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear.addCutover : $c1 = r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: char iZoneChar> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear.addCutover : $i2 = r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iMonthOfYear>
org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear.addCutover : $i2 = r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iMonthOfYear> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear.addCutover : $i3 = r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iDayOfMonth>
org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear.addCutover : $i3 = r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iDayOfMonth> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear.addCutover : $i4 = r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iDayOfWeek>
org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear.addCutover : $i4 = r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iDayOfWeek> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear.addCutover : $z0 = r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: boolean iAdvanceDayOfWeek>
org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear.addCutover : $z0 = r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: boolean iAdvanceDayOfWeek> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear.addCutover : $i5 = r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iMillisOfDay>
org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear.addCutover : $i5 = r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iMillisOfDay> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear.addCutover : virtualinvoke r1.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addCutover(int,char,int,int,int,boolean,int)>(i0, $c1, $i2, $i3, $i4, $z0, $i5)
org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear.addCutover : virtualinvoke r1.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addCutover(int,char,int,int,int,boolean,int)>(i0, $c1, $i2, $i3, $i4, $z0, $i5) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addCutover : $r4 = new org.joda.time.tz.DateTimeZoneBuilder$OfYear
org.joda.time.tz.DateTimeZoneBuilder.addCutover : $r4 = new org.joda.time.tz.DateTimeZoneBuilder$OfYear >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addCutover : specialinvoke $r4.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void <init>(char,int,int,int,boolean,int)>(c1, i2, i3, i4, z0, i5)
org.joda.time.tz.DateTimeZoneBuilder.addCutover : specialinvoke $r4.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void <init>(char,int,int,int,boolean,int)>(c1, i2, i3, i4, z0, i5) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addCutover : r1 = $r4
org.joda.time.tz.DateTimeZoneBuilder.addCutover : r1 = $r4 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addCutover : $r5 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets>
org.joda.time.tz.DateTimeZoneBuilder.addCutover : $r5 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addCutover : $r6 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets>
org.joda.time.tz.DateTimeZoneBuilder.addCutover : $r6 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addCutover : $i7 = virtualinvoke $r6.<java.util.ArrayList: int size()>()
org.joda.time.tz.DateTimeZoneBuilder.addCutover : $i7 = virtualinvoke $r6.<java.util.ArrayList: int size()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addCutover : $i8 = $i7 - 1
org.joda.time.tz.DateTimeZoneBuilder.addCutover : $i8 = $i7 - 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addCutover : $r7 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>($i8)
org.joda.time.tz.DateTimeZoneBuilder.addCutover : $r7 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>($i8) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addCutover : r2 = (org.joda.time.tz.DateTimeZoneBuilder$RuleSet) $r7
org.joda.time.tz.DateTimeZoneBuilder.addCutover : r2 = (org.joda.time.tz.DateTimeZoneBuilder$RuleSet) $r7 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addCutover : virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void setUpperLimit(int,org.joda.time.tz.DateTimeZoneBuilder$OfYear)>(i0, r1)
org.joda.time.tz.DateTimeZoneBuilder.addCutover : virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void setUpperLimit(int,org.joda.time.tz.DateTimeZoneBuilder$OfYear)>(i0, r1) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.setUpperLimit : r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iUpperYear> = i0
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.setUpperLimit : r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iUpperYear> = i0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.setUpperLimit : r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$OfYear iUpperOfYear> = r1
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.setUpperLimit : r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$OfYear iUpperOfYear> = r1 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Zone.addToBuilder : r0 = r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: org.joda.time.tz.ZoneInfoCompiler$Zone iNext>
org.joda.time.tz.ZoneInfoCompiler$Zone.addToBuilder : r0 = r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: org.joda.time.tz.ZoneInfoCompiler$Zone iNext> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Zone.addToBuilder : goto [?= (branch)]
org.joda.time.tz.ZoneInfoCompiler$Zone.addToBuilder : goto [?= (branch)] >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Zone.addToBuilder : $r8 = r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iRules>
org.joda.time.tz.ZoneInfoCompiler$Zone.addToBuilder : $r8 = r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iRules> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Zone.addToBuilder : i0 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>($r8)
org.joda.time.tz.ZoneInfoCompiler$Zone.addToBuilder : i0 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: int parseTime(java.lang.String)>($r8) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i17 = i0 ^ -1
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : $i17 = i0 ^ -1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : return $i17
org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter.parseInto : return $i17 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseTime : $r5 = new java.lang.IllegalArgumentException
org.joda.time.tz.ZoneInfoCompiler.parseTime : $r5 = new java.lang.IllegalArgumentException >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseTime : specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r0)
org.joda.time.tz.ZoneInfoCompiler.parseTime : specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r0) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.parseTime : throw $r5
org.joda.time.tz.ZoneInfoCompiler.parseTime : throw $r5 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Zone.addToBuilder : r12 = $r11
org.joda.time.tz.ZoneInfoCompiler$Zone.addToBuilder : r12 = $r11 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Zone.addToBuilder : $r13 = r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iRules>
org.joda.time.tz.ZoneInfoCompiler$Zone.addToBuilder : $r13 = r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iRules> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Zone.addToBuilder : $r14 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r13)
org.joda.time.tz.ZoneInfoCompiler$Zone.addToBuilder : $r14 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r13) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Zone.addToBuilder : r3 = (org.joda.time.tz.ZoneInfoCompiler$RuleSet) $r14
org.joda.time.tz.ZoneInfoCompiler$Zone.addToBuilder : r3 = (org.joda.time.tz.ZoneInfoCompiler$RuleSet) $r14 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Zone.addToBuilder : if r3 != null
org.joda.time.tz.ZoneInfoCompiler$Zone.addToBuilder : if r3 != null >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Zone.addToBuilder : $r21 = r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iFormat>
org.joda.time.tz.ZoneInfoCompiler$Zone.addToBuilder : $r21 = r0.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iFormat> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Zone.addToBuilder : virtualinvoke r3.<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String)>(r1, $r21)
org.joda.time.tz.ZoneInfoCompiler$Zone.addToBuilder : virtualinvoke r3.<org.joda.time.tz.ZoneInfoCompiler$RuleSet: void addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String)>(r1, $r21) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$RuleSet.addRecurring : i0 = 0
org.joda.time.tz.ZoneInfoCompiler$RuleSet.addRecurring : i0 = 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$RuleSet.addRecurring : $r4 = r0.<org.joda.time.tz.ZoneInfoCompiler$RuleSet: java.util.List iRules>
org.joda.time.tz.ZoneInfoCompiler$RuleSet.addRecurring : $r4 = r0.<org.joda.time.tz.ZoneInfoCompiler$RuleSet: java.util.List iRules> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$RuleSet.addRecurring : $i1 = interfaceinvoke $r4.<java.util.List: int size()>()
org.joda.time.tz.ZoneInfoCompiler$RuleSet.addRecurring : $i1 = interfaceinvoke $r4.<java.util.List: int size()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$RuleSet.addRecurring : if i0 >= $i1
org.joda.time.tz.ZoneInfoCompiler$RuleSet.addRecurring : if i0 >= $i1 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$RuleSet.addRecurring : $r5 = r0.<org.joda.time.tz.ZoneInfoCompiler$RuleSet: java.util.List iRules>
org.joda.time.tz.ZoneInfoCompiler$RuleSet.addRecurring : $r5 = r0.<org.joda.time.tz.ZoneInfoCompiler$RuleSet: java.util.List iRules> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$RuleSet.addRecurring : $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i0)
org.joda.time.tz.ZoneInfoCompiler$RuleSet.addRecurring : $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i0) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$RuleSet.addRecurring : r3 = (org.joda.time.tz.ZoneInfoCompiler$Rule) $r6
org.joda.time.tz.ZoneInfoCompiler$RuleSet.addRecurring : r3 = (org.joda.time.tz.ZoneInfoCompiler$Rule) $r6 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$RuleSet.addRecurring : virtualinvoke r3.<org.joda.time.tz.ZoneInfoCompiler$Rule: void addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String)>(r1, r2)
org.joda.time.tz.ZoneInfoCompiler$RuleSet.addRecurring : virtualinvoke r3.<org.joda.time.tz.ZoneInfoCompiler$Rule: void addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String)>(r1, r2) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Rule.addRecurring : r3 = specialinvoke r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>(r2)
org.joda.time.tz.ZoneInfoCompiler$Rule.addRecurring : r3 = specialinvoke r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String formatName(java.lang.String)>(r2) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : i0 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(47)
org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : i0 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(47) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : if i0 <= 0
org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : if i0 <= 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : i3 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String)>("%s")
org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : i3 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String)>("%s") >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : if i3 >= 0
org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : if i3 >= 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i3)
org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i3) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : $i4 = i3 + 2
org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : $i4 = i3 + 2 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i4)
org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>($i4) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : $r9 = r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String iLetterS>
org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : $r9 = r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String iLetterS> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : if $r9 != null
org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : if $r9 != null >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : $r10 = new java.lang.StringBuilder
org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : $r10 = new java.lang.StringBuilder >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : specialinvoke $r10.<java.lang.StringBuilder: void <init>()>()
org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : $r12 = r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String iLetterS>
org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : $r12 = r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: java.lang.String iLetterS> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12)
org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3)
org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : r4 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>()
org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : r4 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : $r15 = virtualinvoke r4.<java.lang.String: java.lang.String intern()>()
org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : $r15 = virtualinvoke r4.<java.lang.String: java.lang.String intern()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : return $r15
org.joda.time.tz.ZoneInfoCompiler$Rule.formatName : return $r15 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Rule.addRecurring : $r4 = r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear iDateTimeOfYear>
org.joda.time.tz.ZoneInfoCompiler$Rule.addRecurring : $r4 = r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear iDateTimeOfYear> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Rule.addRecurring : $i0 = r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: int iSaveMillis>
org.joda.time.tz.ZoneInfoCompiler$Rule.addRecurring : $i0 = r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: int iSaveMillis> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Rule.addRecurring : $i1 = r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: int iFromYear>
org.joda.time.tz.ZoneInfoCompiler$Rule.addRecurring : $i1 = r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: int iFromYear> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Rule.addRecurring : $i2 = r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: int iToYear>
org.joda.time.tz.ZoneInfoCompiler$Rule.addRecurring : $i2 = r0.<org.joda.time.tz.ZoneInfoCompiler$Rule: int iToYear> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Rule.addRecurring : virtualinvoke $r4.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String,int,int,int)>(r1, r3, $i0, $i1, $i2)
org.joda.time.tz.ZoneInfoCompiler$Rule.addRecurring : virtualinvoke $r4.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: void addRecurring(org.joda.time.tz.DateTimeZoneBuilder,java.lang.String,int,int,int)>(r1, r3, $i0, $i1, $i2) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear.addRecurring : $c3 = r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: char iZoneChar>
org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear.addRecurring : $c3 = r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: char iZoneChar> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear.addRecurring : $i4 = r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iMonthOfYear>
org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear.addRecurring : $i4 = r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iMonthOfYear> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear.addRecurring : $i5 = r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iDayOfMonth>
org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear.addRecurring : $i5 = r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iDayOfMonth> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear.addRecurring : $i6 = r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iDayOfWeek>
org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear.addRecurring : $i6 = r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iDayOfWeek> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear.addRecurring : $z0 = r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: boolean iAdvanceDayOfWeek>
org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear.addRecurring : $z0 = r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: boolean iAdvanceDayOfWeek> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear.addRecurring : $i7 = r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iMillisOfDay>
org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear.addRecurring : $i7 = r0.<org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear: int iMillisOfDay> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear.addRecurring : virtualinvoke r1.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addRecurringSavings(java.lang.String,int,int,int,char,int,int,int,boolean,int)>(r2, i0, i1, i2, $c3, $i4, $i5, $i6, $z0, $i7)
org.joda.time.tz.ZoneInfoCompiler$DateTimeOfYear.addRecurring : virtualinvoke r1.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder addRecurringSavings(java.lang.String,int,int,int,char,int,int,int,boolean,int)>(r2, i0, i1, i2, $c3, $i4, $i5, $i6, $z0, $i7) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : if i1 > i2
org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : if i1 > i2 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : $r5 = new org.joda.time.tz.DateTimeZoneBuilder$OfYear
org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : $r5 = new org.joda.time.tz.DateTimeZoneBuilder$OfYear >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : specialinvoke $r5.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void <init>(char,int,int,int,boolean,int)>(c3, i4, i5, i6, z0, i7)
org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : specialinvoke $r5.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void <init>(char,int,int,int,boolean,int)>(c3, i4, i5, i6, z0, i7) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : r2 = $r5
org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : r2 = $r5 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : $r6 = new org.joda.time.tz.DateTimeZoneBuilder$Recurrence
org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : $r6 = new org.joda.time.tz.DateTimeZoneBuilder$Recurrence >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : specialinvoke $r6.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: void <init>(org.joda.time.tz.DateTimeZoneBuilder$OfYear,java.lang.String,int)>(r2, r1, i0)
org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : specialinvoke $r6.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: void <init>(org.joda.time.tz.DateTimeZoneBuilder$OfYear,java.lang.String,int)>(r2, r1, i0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : r3 = $r6
org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : r3 = $r6 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : $r7 = new org.joda.time.tz.DateTimeZoneBuilder$Rule
org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : $r7 = new org.joda.time.tz.DateTimeZoneBuilder$Rule >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : specialinvoke $r7.<org.joda.time.tz.DateTimeZoneBuilder$Rule: void <init>(org.joda.time.tz.DateTimeZoneBuilder$Recurrence,int,int)>(r3, i1, i2)
org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : specialinvoke $r7.<org.joda.time.tz.DateTimeZoneBuilder$Rule: void <init>(org.joda.time.tz.DateTimeZoneBuilder$Recurrence,int,int)>(r3, i1, i2) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : r4 = $r7
org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : r4 = $r7 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : $r8 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder$RuleSet getLastRuleSet()>()
org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : $r8 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.tz.DateTimeZoneBuilder$RuleSet getLastRuleSet()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : virtualinvoke $r8.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void addRule(org.joda.time.tz.DateTimeZoneBuilder$Rule)>(r4)
org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : virtualinvoke $r8.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void addRule(org.joda.time.tz.DateTimeZoneBuilder$Rule)>(r4) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.addRule : $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.addRule : $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.addRule : $z0 = virtualinvoke $r2.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1)
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.addRule : $z0 = virtualinvoke $r2.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.addRule : if $z0 != 0
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.addRule : if $z0 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.addRule : $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.addRule : $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.addRule : virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r1)
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.addRule : virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r1) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : return r0
org.joda.time.tz.DateTimeZoneBuilder.addRecurringSavings : return r0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$RuleSet.addRecurring : i0 = i0 + 1
org.joda.time.tz.ZoneInfoCompiler$RuleSet.addRecurring : i0 = i0 + 1 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$RuleSet.addRecurring : goto [?= $r4 = r0.<org.joda.time.tz.ZoneInfoCompiler$RuleSet: java.util.List iRules>]
org.joda.time.tz.ZoneInfoCompiler$RuleSet.addRecurring : goto [?= $r4 = r0.<org.joda.time.tz.ZoneInfoCompiler$RuleSet: java.util.List iRules>] >>>>>>>> org.joda.time.tz.ZoneInfoCompiler$Zone.addToBuilder : goto [?= return]
org.joda.time.tz.ZoneInfoCompiler$Zone.addToBuilder : goto [?= return] >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : $r34 = r5.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iName>
org.joda.time.tz.ZoneInfoCompiler.compile : $r34 = r5.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iName> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : r7 = virtualinvoke r6.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>($r34, 1)
org.joda.time.tz.ZoneInfoCompiler.compile : r7 = virtualinvoke r6.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>($r34, 1) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if r1 != null
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if r1 != null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r7 = new java.util.ArrayList
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r7 = new java.util.ArrayList >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : specialinvoke $r7.<java.util.ArrayList: void <init>()>()
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : specialinvoke $r7.<java.util.ArrayList: void <init>()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : r2 = $r7
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : r2 = $r7 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : r3 = null
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : r3 = null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : l0 = -9223372036854775808L
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : l0 = -9223372036854775808L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : z1 = 0
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : z1 = 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r8 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets>
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r8 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : i1 = virtualinvoke $r8.<java.util.ArrayList: int size()>()
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : i1 = virtualinvoke $r8.<java.util.ArrayList: int size()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : i2 = 0
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : i2 = 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if i2 >= i1
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if i2 >= i1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r9 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets>
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r9 = r0.<org.joda.time.tz.DateTimeZoneBuilder: java.util.ArrayList iRuleSets> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r10 = virtualinvoke $r9.<java.util.ArrayList: java.lang.Object get(int)>(i2)
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r10 = virtualinvoke $r9.<java.util.ArrayList: java.lang.Object get(int)>(i2) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : r4 = (org.joda.time.tz.DateTimeZoneBuilder$RuleSet) $r10
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : r4 = (org.joda.time.tz.DateTimeZoneBuilder$RuleSet) $r10 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : r5 = virtualinvoke r4.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>(l0)
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : r5 = virtualinvoke r4.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition firstTransition(long)>(l0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $r6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String iInitialNameKey>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $r6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String iInitialNameKey> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : if $r6 == null
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : if $r6 == null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $r7 = new org.joda.time.tz.DateTimeZoneBuilder$Transition
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $r7 = new org.joda.time.tz.DateTimeZoneBuilder$Transition >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $r8 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String iInitialNameKey>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $r8 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.lang.String iInitialNameKey> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $i3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $i3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $i4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iInitialSaveMillis>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $i4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iInitialSaveMillis> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $i5 = $i3 + $i4
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $i5 = $i3 + $i4 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $i6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $i6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : specialinvoke $r7.<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,java.lang.String,int,int)>(l0, $r8, $i5, $i6)
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : specialinvoke $r7.<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,java.lang.String,int,int)>(l0, $r8, $i5, $i6) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : return $r7
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : return $r7 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if r5 != null
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if r5 != null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>(r2, r5)
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>(r2, r5) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : i0 = virtualinvoke r1.<java.util.ArrayList: int size()>()
org.joda.time.tz.DateTimeZoneBuilder.addTransition : i0 = virtualinvoke r1.<java.util.ArrayList: int size()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : if i0 != 0
org.joda.time.tz.DateTimeZoneBuilder.addTransition : if i0 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r2)
org.joda.time.tz.DateTimeZoneBuilder.addTransition : virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r2) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : return 1
org.joda.time.tz.DateTimeZoneBuilder.addTransition : return 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : l3 = virtualinvoke r5.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>()
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : l3 = virtualinvoke r5.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.getMillis : $l0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long iMillis>
org.joda.time.tz.DateTimeZoneBuilder$Transition.getMillis : $l0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long iMillis> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.getMillis : return $l0
org.joda.time.tz.DateTimeZoneBuilder$Transition.getMillis : return $l0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : i4 = virtualinvoke r5.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getSaveMillis()>()
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : i4 = virtualinvoke r5.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getSaveMillis()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.getSaveMillis : $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int iWallOffset>
org.joda.time.tz.DateTimeZoneBuilder$Transition.getSaveMillis : $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int iWallOffset> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.getSaveMillis : $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int iStandardOffset>
org.joda.time.tz.DateTimeZoneBuilder$Transition.getSaveMillis : $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int iStandardOffset> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.getSaveMillis : $i2 = $i0 - $i1
org.joda.time.tz.DateTimeZoneBuilder$Transition.getSaveMillis : $i2 = $i0 - $i1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.getSaveMillis : return $i2
org.joda.time.tz.DateTimeZoneBuilder$Transition.getSaveMillis : return $i2 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r11 = new org.joda.time.tz.DateTimeZoneBuilder$RuleSet
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r11 = new org.joda.time.tz.DateTimeZoneBuilder$RuleSet >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : specialinvoke $r11.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <init>(org.joda.time.tz.DateTimeZoneBuilder$RuleSet)>(r4)
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : specialinvoke $r11.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: void <init>(org.joda.time.tz.DateTimeZoneBuilder$RuleSet)>(r4) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : r12 = $r11
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : r12 = $r11 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r13 = virtualinvoke r12.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>(l3, i4)
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r13 = virtualinvoke r12.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>(l3, i4) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : r2 = null
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : r2 = null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : l2 = 9223372036854775807L
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : l2 = 9223372036854775807L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $r5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $r5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : r3 = virtualinvoke $r5.<java.util.ArrayList: java.util.Iterator iterator()>()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : r3 = virtualinvoke $r5.<java.util.ArrayList: java.util.Iterator iterator()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : if $z0 == 0
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : if $z0 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : if r2 != null
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : if r2 != null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : return null
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : return null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : r14 = $r13
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : r14 = $r13 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if $r13 == null
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if $r13 == null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : l0 = virtualinvoke r12.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: long getUpperLimit(int)>(i4)
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : l0 = virtualinvoke r12.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: long getUpperLimit(int)>(i4) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.getUpperLimit : $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iUpperYear>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.getUpperLimit : $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iUpperYear> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.getUpperLimit : if $i1 != 2147483647
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.getUpperLimit : if $i1 != 2147483647 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.getUpperLimit : $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$OfYear iUpperOfYear>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.getUpperLimit : $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$OfYear iUpperOfYear> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.getUpperLimit : $i2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iUpperYear>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.getUpperLimit : $i2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iUpperYear> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.getUpperLimit : $i3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.getUpperLimit : $i3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.getUpperLimit : $l4 = virtualinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>($i2, $i3, i0)
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.getUpperLimit : $l4 = virtualinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>($i2, $i3, i0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : $c5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : $c5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : if $c5 != 119
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : if $c5 != 119 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : i3 = i1 + i2
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : i3 = i1 + i2 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : goto [?= r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>()]
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : goto [?= r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>()] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : l4 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>(0L, i0)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : l4 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>(0L, i0) >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.set : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : $i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMinYear()>()
org.joda.time.chrono.BasicYearDateTimeField.set : $i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMinYear()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getMinYear : return -292275054
org.joda.time.chrono.GregorianChronology.getMinYear : return -292275054 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : $r2 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.set : $r2 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : $i3 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getMaxYear()>()
org.joda.time.chrono.BasicYearDateTimeField.set : $i3 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getMaxYear()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getMaxYear : return 292278993
org.joda.time.chrono.GregorianChronology.getMaxYear : return 292278993 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i2, $i3)
org.joda.time.chrono.BasicYearDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i2, $i3) >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : $r3 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.set : $r3 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : $l4 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: long setYear(long,int)>(l0, i1)
org.joda.time.chrono.BasicYearDateTimeField.set : $l4 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: long setYear(long,int)>(l0, i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicGJChronology.setYear : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : i3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getDayOfYear(long,int)>(l0, i2)
org.joda.time.chrono.BasicGJChronology.setYear : i3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getDayOfYear(long,int)>(l0, i2) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1)
org.joda.time.chrono.BasicChronology.getDayOfYear : l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : $l3 = l0 - l2
org.joda.time.chrono.BasicChronology.getDayOfYear : $l3 = l0 - l2 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : $l4 = $l3 / 86400000L
org.joda.time.chrono.BasicChronology.getDayOfYear : $l4 = $l3 / 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : $i5 = (int) $l4
org.joda.time.chrono.BasicChronology.getDayOfYear : $i5 = (int) $l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : $i6 = $i5 + 1
org.joda.time.chrono.BasicChronology.getDayOfYear : $i6 = $i5 + 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : return $i6
org.joda.time.chrono.BasicChronology.getDayOfYear : return $i6 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : i4 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getMillisOfDay(long)>(l0)
org.joda.time.chrono.BasicGJChronology.setYear : i4 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getMillisOfDay(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : if i3 <= 59
org.joda.time.chrono.BasicGJChronology.setYear : if i3 <= 59 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : l5 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMonthDayMillis(int,int,int)>(i1, 1, i3)
org.joda.time.chrono.BasicGJChronology.setYear : l5 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMonthDayMillis(int,int,int)>(i1, 1, i3) >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : $l6 = (long) i4
org.joda.time.chrono.BasicGJChronology.setYear : $l6 = (long) i4 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : l7 = l5 + $l6
org.joda.time.chrono.BasicGJChronology.setYear : l7 = l5 + $l6 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : return l7
org.joda.time.chrono.BasicGJChronology.setYear : return l7 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : return $l4
org.joda.time.chrono.BasicYearDateTimeField.set : return $l4 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : $i7 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMonthOfYear>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : $i7 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMonthOfYear> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : l8 = virtualinvoke $r3.<org.joda.time.DateTimeField: long set(long,int)>(l4, $i7)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : l8 = virtualinvoke $r3.<org.joda.time.DateTimeField: long set(long,int)>(l4, $i7) >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : $l4 = l0 + 1L
org.joda.time.chrono.BasicChronology.getMillisOfDay : $l4 = l0 + 1L >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : $l5 = $l4 % 86400000L
org.joda.time.chrono.BasicChronology.getMillisOfDay : $l5 = $l4 % 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : $i6 = (int) $l5
org.joda.time.chrono.BasicChronology.getMillisOfDay : $i6 = (int) $l5 >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : $i7 = 86399999 + $i6
org.joda.time.chrono.BasicChronology.getMillisOfDay : $i7 = 86399999 + $i6 >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : return $i7
org.joda.time.chrono.BasicChronology.getMillisOfDay : return $i7 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : $i9 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMillisOfDay>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : $i9 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMillisOfDay> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : l10 = virtualinvoke $r4.<org.joda.time.DateTimeField: long set(long,int)>(l8, $i9)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : l10 = virtualinvoke $r4.<org.joda.time.DateTimeField: long set(long,int)>(l8, $i9) >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $i2 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int getMinimumValue()>()
org.joda.time.field.PreciseDateTimeField.set : $i2 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int getMinimumValue()>() >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getMinimumValue : return 0
org.joda.time.field.PreciseDurationDateTimeField.getMinimumValue : return 0 >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $i3 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int getMaximumValue()>()
org.joda.time.field.PreciseDateTimeField.set : $i3 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.field.PreciseDateTimeField.getMaximumValue : $i0 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange>
org.joda.time.field.PreciseDateTimeField.getMaximumValue : $i0 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange> >>>>>>>> org.joda.time.field.PreciseDateTimeField.getMaximumValue : $i1 = $i0 - 1
org.joda.time.field.PreciseDateTimeField.getMaximumValue : $i1 = $i0 - 1 >>>>>>>> org.joda.time.field.PreciseDateTimeField.getMaximumValue : return $i1
org.joda.time.field.PreciseDateTimeField.getMaximumValue : return $i1 >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i2, $i3)
org.joda.time.field.PreciseDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i2, $i3) >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $i4 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int get(long)>(l0)
org.joda.time.field.PreciseDateTimeField.set : $i4 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $i8 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange>
org.joda.time.field.PreciseDateTimeField.get : $i8 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange> >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $i9 = $i8 - 1
org.joda.time.field.PreciseDateTimeField.get : $i9 = $i8 - 1 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l10 = l0 + 1L
org.joda.time.field.PreciseDateTimeField.get : $l10 = l0 + 1L >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l11 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: long getUnitMillis()>()
org.joda.time.field.PreciseDateTimeField.get : $l11 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: long getUnitMillis()>() >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l12 = $l10 / $l11
org.joda.time.field.PreciseDateTimeField.get : $l12 = $l10 / $l11 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $i13 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange>
org.joda.time.field.PreciseDateTimeField.get : $i13 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange> >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l14 = (long) $i13
org.joda.time.field.PreciseDateTimeField.get : $l14 = (long) $i13 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l15 = $l12 % $l14
org.joda.time.field.PreciseDateTimeField.get : $l15 = $l12 % $l14 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $i16 = (int) $l15
org.joda.time.field.PreciseDateTimeField.get : $i16 = (int) $l15 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $i17 = $i9 + $i16
org.joda.time.field.PreciseDateTimeField.get : $i17 = $i9 + $i16 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : return $i17
org.joda.time.field.PreciseDateTimeField.get : return $i17 >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $i5 = i1 - $i4
org.joda.time.field.PreciseDateTimeField.set : $i5 = i1 - $i4 >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $l6 = (long) $i5
org.joda.time.field.PreciseDateTimeField.set : $l6 = (long) $i5 >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $l7 = r0.<org.joda.time.field.PreciseDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDateTimeField.set : $l7 = r0.<org.joda.time.field.PreciseDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $l8 = $l6 * $l7
org.joda.time.field.PreciseDateTimeField.set : $l8 = $l6 * $l7 >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : $l9 = l0 + $l8
org.joda.time.field.PreciseDateTimeField.set : $l9 = l0 + $l8 >>>>>>>> org.joda.time.field.PreciseDateTimeField.set : return $l9
org.joda.time.field.PreciseDateTimeField.set : return $l9 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : l11 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>(r1, l10)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : l11 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>(r1, l10) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfMonth>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfMonth> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : if $i1 < 0
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : if $i1 < 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : $i2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfMonth>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : $i2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfMonth> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : l3 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>(l0, $i2)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : l3 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>(l0, $i2) >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMinimumValue : return 1
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMinimumValue : return 1 >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValueForSet : $r1 = r0.<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValueForSet : $r1 = r0.<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValueForSet : $i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDaysInMonthMaxForSet(long,int)>(l0, i1)
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValueForSet : $i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDaysInMonthMaxForSet(long,int)>(l0, i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInMonthMaxForSet : if i1 <= 28
org.joda.time.chrono.BasicGJChronology.getDaysInMonthMaxForSet : if i1 <= 28 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInMonthMaxForSet : $i2 = 28
org.joda.time.chrono.BasicGJChronology.getDaysInMonthMaxForSet : $i2 = 28 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInMonthMaxForSet : return $i2
org.joda.time.chrono.BasicGJChronology.getDaysInMonthMaxForSet : return $i2 >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValueForSet : return $i2
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getMaximumValueForSet : return $i2 >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long)>(l0)
org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicChronology.getDayOfMonth : i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : return $i1
org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : return $i1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : goto [?= return l3]
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : goto [?= return l3] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : return l3
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : return l3 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : $i12 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfWeek>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : $i12 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfWeek> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : if $i12 == 0
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : if $i12 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : $l13 = (long) i3
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : $l13 = (long) i3 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : $l14 = l11 - $l13
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : $l14 = l11 - $l13 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : return $l14
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setInstant : return $l14 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.getUpperLimit : return $l4
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.getUpperLimit : return $l4 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : i2 = i2 + 1
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : i2 = i2 + 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : goto [?= (branch)]
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : goto [?= (branch)] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $r9 = new java.util.ArrayList
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $r9 = new java.util.ArrayList >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $r10 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $r10 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : specialinvoke $r9.<java.util.ArrayList: void <init>(java.util.Collection)>($r10)
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : specialinvoke $r9.<java.util.ArrayList: void <init>(java.util.Collection)>($r10) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : r1 = $r9
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : r1 = $r9 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : l1 = -9223372036854775808L
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : l1 = -9223372036854775808L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : i2 = 0
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : i2 = 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : r2 = null
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : r2 = null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $r11 = virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>(l1, i2)
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $r11 = virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>(l1, i2) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : r4 = (org.joda.time.tz.DateTimeZoneBuilder$Rule) $r6
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : r4 = (org.joda.time.tz.DateTimeZoneBuilder$Rule) $r6 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $i4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $i4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : l3 = virtualinvoke r4.<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>(l0, $i4, i1)
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : l3 = virtualinvoke r4.<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>(l0, $i4, i1) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>()
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : i3 = i1 + i2
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : i3 = i1 + i2 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : l4 = l0
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : l4 = l0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $b7 = l0 cmp -9223372036854775808L
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $b7 = l0 cmp -9223372036854775808L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : if $b7 != 0
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : if $b7 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : i5 = -2147483648
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : i5 = -2147483648 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : goto [?= $i10 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int iFromYear>]
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : goto [?= $i10 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int iFromYear>] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $i10 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int iFromYear>
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $i10 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int iFromYear> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : if i5 >= $i10
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : if i5 >= $i10 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $i11 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int iFromYear>
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $i11 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int iFromYear> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $l12 = virtualinvoke $r3.<org.joda.time.DateTimeField: long set(long,int)>(0L, $i11)
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $l12 = virtualinvoke $r3.<org.joda.time.DateTimeField: long set(long,int)>(0L, $i11) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $l13 = (long) i3
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $l13 = (long) i3 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : l14 = $l12 - $l13
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : l14 = $l12 - $l13 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : l4 = l14 - 1L
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : l4 = l14 - 1L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $r4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iRecurrence>
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $r4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iRecurrence> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : l6 = virtualinvoke $r4.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long next(long,int,int)>(l4, i1, i2)
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : l6 = virtualinvoke $r4.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long next(long,int,int)>(l4, i1, i2) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.next : $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$OfYear iOfYear>
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.next : $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$OfYear iOfYear> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.next : $l3 = virtualinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>(l0, i1, i2)
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.next : $l3 = virtualinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long next(long,int,int)>(l0, i1, i2) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $c5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $c5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : if $c5 != 119
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : if $c5 != 119 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : i3 = i1 + i2
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : i3 = i1 + i2 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : goto [?= $l7 = (long) i3]
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : goto [?= $l7 = (long) i3] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $l7 = (long) i3
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $l7 = (long) i3 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l8 = l0 + $l7
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l8 = l0 + $l7 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $i9 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMonthOfYear>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $i9 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMonthOfYear> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l4 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>(l8, $i9)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l4 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>(l8, $i9) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 12
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 12 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l10 = virtualinvoke $r3.<org.joda.time.DateTimeField: long set(long,int)>(l4, 0)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l10 = virtualinvoke $r3.<org.joda.time.DateTimeField: long set(long,int)>(l4, 0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $i11 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMillisOfDay>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $i11 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMillisOfDay> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l12 = virtualinvoke $r4.<org.joda.time.DateTimeField: long add(long,int)>(l10, $i11)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l12 = virtualinvoke $r4.<org.joda.time.DateTimeField: long add(long,int)>(l10, $i11) >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $l2 = virtualinvoke $r1.<org.joda.time.DurationField: long add(long,int)>(l0, i1)
org.joda.time.field.BaseDateTimeField.add : $l2 = virtualinvoke $r1.<org.joda.time.DurationField: long add(long,int)>(l0, i1) >>>>>>>> org.joda.time.field.MillisDurationField.add : $l2 = (long) i1
org.joda.time.field.MillisDurationField.add : $l2 = (long) i1 >>>>>>>> org.joda.time.field.MillisDurationField.add : $l3 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l0, $l2)
org.joda.time.field.MillisDurationField.add : $l3 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l0, $l2) >>>>>>>> org.joda.time.field.MillisDurationField.add : return $l3
org.joda.time.field.MillisDurationField.add : return $l3 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l13 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>(r1, l12)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l13 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>(r1, l12) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonthNext : l0 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>(r1, l0)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonthNext : l0 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>(r1, l0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : l4 = virtualinvoke $r3.<org.joda.time.DateTimeField: long set(long,int)>(l0, 1)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : l4 = virtualinvoke $r3.<org.joda.time.DateTimeField: long set(long,int)>(l0, 1) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : l5 = virtualinvoke $r4.<org.joda.time.DateTimeField: long add(long,int)>(l4, 1)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : l5 = virtualinvoke $r4.<org.joda.time.DateTimeField: long add(long,int)>(l4, 1) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : if i1 != 0
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : if i1 != 0 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i10 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMillisOfDay(long)>(l0)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i10 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMillisOfDay(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : l2 = (long) $i10
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : l2 = (long) $i10 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i3 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i3 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i4 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i3)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i4 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i3) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i11 = i4 - 1
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i11 = i4 - 1 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i5 = $i11 + i1
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i5 = $i11 + i1 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : if i5 < 0
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : if i5 < 0 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i12 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i12 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i13 = i5 / $i12
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i13 = i5 / $i12 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i6 = i3 + $i13
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i6 = i3 + $i13 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i14 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i14 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i15 = i5 % $i14
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i15 = i5 % $i14 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i16 = $i15 + 1
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i16 = $i15 + 1 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : goto [?= $r4 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>]
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : goto [?= $r4 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>] >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r4 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r4 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i24 = virtualinvoke $r4.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l0, i3, i4)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i24 = virtualinvoke $r4.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l0, i3, i4) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i8 = virtualinvoke $r5.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>(i6, i16)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i8 = virtualinvoke $r5.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>(i6, i16) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : if i24 <= i8
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : if i24 <= i8 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r6 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r6 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : l9 = virtualinvoke $r6.<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>(i6, i16, i24)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : l9 = virtualinvoke $r6.<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>(i6, i16, i24) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $l25 = l9 + l2
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $l25 = l9 + l2 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : return $l25
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : return $l25 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : $r5 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : $r5 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : $i6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfMonth>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : $i6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfMonth> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : l3 = virtualinvoke $r5.<org.joda.time.DateTimeField: long add(long,int)>(l5, $i6)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonth : l3 = virtualinvoke $r5.<org.joda.time.DateTimeField: long add(long,int)>(l5, $i6) >>>>>>>> org.joda.time.field.PreciseDurationField.add : $l3 = (long) i1
org.joda.time.field.PreciseDurationField.add : $l3 = (long) i1 >>>>>>>> org.joda.time.field.PreciseDurationField.add : $l4 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis>
org.joda.time.field.PreciseDurationField.add : $l4 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationField.add : l2 = $l3 * $l4
org.joda.time.field.PreciseDurationField.add : l2 = $l3 * $l4 >>>>>>>> org.joda.time.field.PreciseDurationField.add : $l5 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l0, l2)
org.joda.time.field.PreciseDurationField.add : $l5 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l0, l2) >>>>>>>> org.joda.time.field.PreciseDurationField.add : return $l5
org.joda.time.field.PreciseDurationField.add : return $l5 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonthNext : goto [?= return l0]
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonthNext : goto [?= return l0] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonthNext : return l0
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonthNext : return l0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $i14 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfWeek>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $i14 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfWeek> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : if $i14 != 0
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : if $i14 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l13 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>(r1, l13)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l13 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>(r1, l13) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>(l0)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : $l3 = l0 - 86399999L
org.joda.time.chrono.BasicChronology.getDayOfWeek : $l3 = l0 - 86399999L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : l1 = $l3 / 86400000L
org.joda.time.chrono.BasicChronology.getDayOfWeek : l1 = $l3 / 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : $b4 = l1 cmp -3L
org.joda.time.chrono.BasicChronology.getDayOfWeek : $b4 = l1 cmp -3L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : if $b4 >= 0
org.joda.time.chrono.BasicChronology.getDayOfWeek : if $b4 >= 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : $l5 = l1 + 4L
org.joda.time.chrono.BasicChronology.getDayOfWeek : $l5 = l1 + 4L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : $l6 = $l5 % 7L
org.joda.time.chrono.BasicChronology.getDayOfWeek : $l6 = $l5 % 7L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : $i7 = (int) $l6
org.joda.time.chrono.BasicChronology.getDayOfWeek : $i7 = (int) $l6 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : $i8 = 7 + $i7
org.joda.time.chrono.BasicChronology.getDayOfWeek : $i8 = 7 + $i7 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfWeek : return $i8
org.joda.time.chrono.BasicChronology.getDayOfWeek : return $i8 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : $i3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfWeek>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : $i3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfWeek> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : i2 = $i3 - i1
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : i2 = $i3 - i1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : if i2 == 0
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : if i2 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : $z0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: boolean iAdvance>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : $z0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: boolean iAdvance> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : if $z0 == 0
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : if $z0 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : if i2 <= 0
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : if i2 <= 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : i2 = i2 + -7
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : i2 = i2 + -7 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : l0 = virtualinvoke $r3.<org.joda.time.DateTimeField: long add(long,int)>(l0, i2)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : l0 = virtualinvoke $r3.<org.joda.time.DateTimeField: long add(long,int)>(l0, i2) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : return l0
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : return l0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $b17 = l13 cmp l8
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $b17 = l13 cmp l8 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : if $b17 > 0
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : if $b17 > 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $r6 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $r6 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l18 = virtualinvoke $r6.<org.joda.time.DateTimeField: long add(long,int)>(l13, 1)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l18 = virtualinvoke $r6.<org.joda.time.DateTimeField: long add(long,int)>(l13, 1) >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.add : if i1 != 0
org.joda.time.chrono.BasicYearDateTimeField.add : if i1 != 0 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.add : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>(l0)
org.joda.time.chrono.BasicYearDateTimeField.add : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicYearDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.get : return $i1
org.joda.time.chrono.BasicYearDateTimeField.get : return $i1 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.add : i3 = staticinvoke <org.joda.time.field.FieldUtils: int safeAdd(int,int)>(i2, i1)
org.joda.time.chrono.BasicYearDateTimeField.add : i3 = staticinvoke <org.joda.time.field.FieldUtils: int safeAdd(int,int)>(i2, i1) >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : i2 = i0 + i1
org.joda.time.field.FieldUtils.safeAdd : i2 = i0 + i1 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $i3 = i0 ^ i2
org.joda.time.field.FieldUtils.safeAdd : $i3 = i0 ^ i2 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : if $i3 >= 0
org.joda.time.field.FieldUtils.safeAdd : if $i3 >= 0 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : return i2
org.joda.time.field.FieldUtils.safeAdd : return i2 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.add : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>(l0, i3)
org.joda.time.chrono.BasicYearDateTimeField.add : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>(l0, i3) >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i2)
org.joda.time.chrono.BasicGJChronology.setYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i2) >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : if $z0 == 0
org.joda.time.chrono.BasicGJChronology.setYear : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : $z2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i1)
org.joda.time.chrono.BasicGJChronology.setYear : $z2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : if $z2 == 0
org.joda.time.chrono.BasicGJChronology.setYear : if $z2 == 0 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.add : return $l4
org.joda.time.chrono.BasicYearDateTimeField.add : return $l4 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $r7 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $r7 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $i19 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMonthOfYear>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $i19 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMonthOfYear> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l20 = virtualinvoke $r7.<org.joda.time.DateTimeField: long set(long,int)>(l18, $i19)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l20 = virtualinvoke $r7.<org.joda.time.DateTimeField: long set(long,int)>(l18, $i19) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l21 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>(r1, l20)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l21 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>(r1, l20) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l13 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>(r1, l21)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l13 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>(r1, l21) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $l22 = (long) i3
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $l22 = (long) i3 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $l23 = l13 - $l22
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $l23 = l13 - $l22 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : return $l23
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : return $l23 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.next : return $l3
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.next : return $l3 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $b15 = l6 cmp l0
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $b15 = l6 cmp l0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : if $b15 <= 0
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : if $b15 <= 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $r5 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $r5 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $l16 = (long) i3
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $l16 = (long) i3 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $l17 = l6 + $l16
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $l17 = l6 + $l16 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : i18 = virtualinvoke $r5.<org.joda.time.DateTimeField: int get(long)>($l17)
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : i18 = virtualinvoke $r5.<org.joda.time.DateTimeField: int get(long)>($l17) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $i19 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int iToYear>
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $i19 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int iToYear> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : if i18 <= $i19
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : if i18 <= $i19 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : return l6
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : return l6 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $b5 = l3 cmp l0
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $b5 = l3 cmp l0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : if $b5 > 0
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : if $b5 > 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $b6 = l3 cmp l2
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $b6 = l3 cmp l2 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : if $b6 > 0
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : if $b6 > 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : r2 = r4
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : r2 = r4 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : l2 = l3
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : l2 = l3 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : i3 = i4
org.joda.time.chrono.BasicMonthOfYearDateTimeField.set : i3 = i4 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $b15 = l13 cmp l8
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $b15 = l13 cmp l8 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : if $b15 > 0
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : if $b15 > 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $r5 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $r5 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l16 = virtualinvoke $r5.<org.joda.time.DateTimeField: long add(long,int)>(l13, 1)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l16 = virtualinvoke $r5.<org.joda.time.DateTimeField: long add(long,int)>(l13, 1) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l13 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>(r1, l16)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : l13 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthNext(org.joda.time.Chronology,long)>(r1, l16) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : goto [?= $l22 = (long) i3]
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : goto [?= $l22 = (long) i3] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $c6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : $c6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : if $c6 != 115
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : if $c6 != 115 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : i3 = 0
org.joda.time.tz.DateTimeZoneBuilder$OfYear.next : i3 = 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : i3 = i3 + -1
org.joda.time.chrono.BasicChronology.getYear : i3 = i3 + -1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : goto [?= return i3]
org.joda.time.chrono.BasicChronology.getYear : goto [?= return i3] >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : $i2 = i0 % 100
org.joda.time.chrono.GregorianChronology.isLeapYear : $i2 = i0 % 100 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : if $i2 != 0
org.joda.time.chrono.GregorianChronology.isLeapYear : if $i2 != 0 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : $z0 = 1
org.joda.time.chrono.GregorianChronology.isLeapYear : $z0 = 1 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : goto [?= return $z0]
org.joda.time.chrono.GregorianChronology.isLeapYear : goto [?= return $z0] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 15356250
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 15356250 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 23118750
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 23118750 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 25734375
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 25734375 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 28265625
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 28265625 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $r1 = <org.joda.time.chrono.BasicGJChronology: long[] MAX_TOTAL_MILLIS_BY_MONTH_ARRAY>
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $r1 = <org.joda.time.chrono.BasicGJChronology: long[] MAX_TOTAL_MILLIS_BY_MONTH_ARRAY> >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $i2 = i1 - 1
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $i2 = i1 - 1 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $l3 = $r1[$i2]
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $l3 = $r1[$i2] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : return $l3
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : return $l3 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $r1 = <org.joda.time.chrono.BasicGJChronology: int[] MAX_DAYS_PER_MONTH_ARRAY>
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $r1 = <org.joda.time.chrono.BasicGJChronology: int[] MAX_DAYS_PER_MONTH_ARRAY> >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i2 = i1 - 1
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i2 = i1 - 1 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i3 = $r1[$i2]
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i3 = $r1[$i2] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : return $i3
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : return $i3 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInMonthMaxForSet : $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getDaysInMonthMax(long)>(l0)
org.joda.time.chrono.BasicGJChronology.getDaysInMonthMaxForSet : $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getDaysInMonthMax(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getDaysInMonthMax : i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicChronology.getDaysInMonthMax : i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getDaysInMonthMax : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i1)
org.joda.time.chrono.BasicChronology.getDaysInMonthMax : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 17971875
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 17971875 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 20587500
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 20587500 >>>>>>>> org.joda.time.chrono.BasicChronology.getDaysInMonthMax : $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>(i1, i2)
org.joda.time.chrono.BasicChronology.getDaysInMonthMax : $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>(i1, i2) >>>>>>>> org.joda.time.chrono.BasicChronology.getDaysInMonthMax : return $i3
org.joda.time.chrono.BasicChronology.getDaysInMonthMax : return $i3 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInMonthMaxForSet : goto [?= return $i2]
org.joda.time.chrono.BasicGJChronology.getDaysInMonthMaxForSet : goto [?= return $i2] >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : $z1 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i1)
org.joda.time.chrono.BasicGJChronology.setYear : $z1 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : if $z1 != 0
org.joda.time.chrono.BasicGJChronology.setYear : if $z1 != 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : i3 = i3 + -1
org.joda.time.chrono.BasicGJChronology.setYear : i3 = i3 + -1 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : goto [?= l5 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMonthDayMillis(int,int,int)>(i1, 1, i3)]
org.joda.time.chrono.BasicGJChronology.setYear : goto [?= l5 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMonthDayMillis(int,int,int)>(i1, 1, i3)] >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : i3 = i3 + 1
org.joda.time.chrono.BasicGJChronology.setYear : i3 = i3 + 1 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 7678125
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 7678125 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 10209375
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 10209375 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : if i2 >= 0
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : if i2 >= 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $r7 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $r7 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $i7 = virtualinvoke $r7.<org.joda.time.DateTimeField: int get(long)>(l2)
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $i7 = virtualinvoke $r7.<org.joda.time.DateTimeField: int get(long)>(l2) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $i8 = <org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int YEAR_LIMIT>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $i8 = <org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int YEAR_LIMIT> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : if $i7 < $i8
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : if $i7 < $i8 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $i9 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iUpperYear>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $i9 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iUpperYear> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : if $i9 >= 2147483647
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : if $i9 >= 2147483647 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $r8 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$OfYear iUpperOfYear>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $r8 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$OfYear iUpperOfYear> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $i10 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iUpperYear>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $i10 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iUpperYear> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $i11 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $i11 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : l12 = virtualinvoke $r8.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>($i10, $i11, i1)
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : l12 = virtualinvoke $r8.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>($i10, $i11, i1) >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: boolean isLeapYear(int)>(i3)
org.joda.time.chrono.BasicChronology.getYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: boolean isLeapYear(int)>(i3) >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $z0 == 0
org.joda.time.chrono.BasicChronology.getYear : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l6 = 31536000000L
org.joda.time.chrono.BasicChronology.getYear : l6 = 31536000000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l14 = l4 + l6
org.joda.time.chrono.BasicChronology.getYear : l14 = l4 + l6 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $b15 = l14 cmp l0
org.joda.time.chrono.BasicChronology.getYear : $b15 = l14 cmp l0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $b15 > 0
org.joda.time.chrono.BasicChronology.getYear : if $b15 > 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : i3 = i3 + 1
org.joda.time.chrono.BasicChronology.getYear : i3 = i3 + 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $b13 = l2 cmp l12
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $b13 = l2 cmp l12 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : if $b13 < 0
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : if $b13 < 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $r9 = new org.joda.time.tz.DateTimeZoneBuilder$Transition
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $r9 = new org.joda.time.tz.DateTimeZoneBuilder$Transition >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $i14 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $i14 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : specialinvoke $r9.<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Rule,int)>(l2, r2, $i14)
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : specialinvoke $r9.<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Rule,int)>(l2, r2, $i14) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.getNameKey : $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iRecurrence>
org.joda.time.tz.DateTimeZoneBuilder$Rule.getNameKey : $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iRecurrence> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.getNameKey : $r2 = virtualinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String getNameKey()>()
org.joda.time.tz.DateTimeZoneBuilder$Rule.getNameKey : $r2 = virtualinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String getNameKey()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.getNameKey : $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String iNameKey>
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.getNameKey : $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String iNameKey> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.getNameKey : return $r1
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.getNameKey : return $r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.getNameKey : return $r2
org.joda.time.tz.DateTimeZoneBuilder$Rule.getNameKey : return $r2 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.getSaveMillis : $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iRecurrence>
org.joda.time.tz.DateTimeZoneBuilder$Rule.getSaveMillis : $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iRecurrence> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.getSaveMillis : $i0 = virtualinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>()
org.joda.time.tz.DateTimeZoneBuilder$Rule.getSaveMillis : $i0 = virtualinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.getSaveMillis : $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int iSaveMillis>
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.getSaveMillis : $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int iSaveMillis> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.getSaveMillis : return $i0
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.getSaveMillis : return $i0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.getSaveMillis : return $i0
org.joda.time.tz.DateTimeZoneBuilder$Rule.getSaveMillis : return $i0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : return $r9
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : return $r9 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : r3 = $r11
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : r3 = $r11 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : if $r11 == null
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : if $r11 == null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : l1 = virtualinvoke r3.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : l1 = virtualinvoke r3.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $b7 = l1 cmp l0
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $b7 = l1 cmp l0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : if $b7 != 0
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : if $b7 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $b8 = l1 cmp l0
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $b8 = l1 cmp l0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : if $b8 <= 0
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : if $b8 <= 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : if r2 != null
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : if r2 != null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : r4 = virtualinvoke r1.<java.util.ArrayList: java.util.Iterator iterator()>()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : r4 = virtualinvoke r1.<java.util.ArrayList: java.util.Iterator iterator()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : if $z0 == 0
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : if $z0 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $r13 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $r13 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : r5 = (org.joda.time.tz.DateTimeZoneBuilder$Rule) $r13
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : r5 = (org.joda.time.tz.DateTimeZoneBuilder$Rule) $r13 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $i9 = virtualinvoke r5.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int getSaveMillis()>()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $i9 = virtualinvoke r5.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int getSaveMillis()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : if $i9 != 0
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : if $i9 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $r14 = new org.joda.time.tz.DateTimeZoneBuilder$Transition
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $r14 = new org.joda.time.tz.DateTimeZoneBuilder$Transition >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $i10 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $i10 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : specialinvoke $r14.<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Rule,int)>(l0, r5, $i10)
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : specialinvoke $r14.<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Rule,int)>(l0, r5, $i10) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : r2 = $r14
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : r2 = $r14 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : goto [?= (branch)]
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : goto [?= (branch)] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules> = r1
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules> = r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : return r2
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : return r2 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : $i5 = i0 - 1
org.joda.time.tz.DateTimeZoneBuilder.addTransition : $i5 = i0 - 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : $r4 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>($i5)
org.joda.time.tz.DateTimeZoneBuilder.addTransition : $r4 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>($i5) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : r3 = (org.joda.time.tz.DateTimeZoneBuilder$Transition) $r4
org.joda.time.tz.DateTimeZoneBuilder.addTransition : r3 = (org.joda.time.tz.DateTimeZoneBuilder$Transition) $r4 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : $z1 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$Transition: boolean isTransitionFrom(org.joda.time.tz.DateTimeZoneBuilder$Transition)>(r3)
org.joda.time.tz.DateTimeZoneBuilder.addTransition : $z1 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$Transition: boolean isTransitionFrom(org.joda.time.tz.DateTimeZoneBuilder$Transition)>(r3) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : if r1 != null
org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : if r1 != null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : $l0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long iMillis>
org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : $l0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long iMillis> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : $l1 = r1.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long iMillis>
org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : $l1 = r1.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long iMillis> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : $b2 = $l0 cmp $l1
org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : $b2 = $l0 cmp $l1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : if $b2 <= 0
org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : if $b2 <= 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : $i3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int iWallOffset>
org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : $i3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int iWallOffset> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : $i4 = r1.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int iWallOffset>
org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : $i4 = r1.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int iWallOffset> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : if $i3 != $i4
org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : if $i3 != $i4 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : $z1 = 1
org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : $z1 = 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : goto [?= return $z1]
org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : goto [?= return $z1] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : return $z1
org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : return $z1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : if $z1 != 0
org.joda.time.tz.DateTimeZoneBuilder.addTransition : if $z1 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : i1 = 0
org.joda.time.tz.DateTimeZoneBuilder.addTransition : i1 = 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : if i0 < 2
org.joda.time.tz.DateTimeZoneBuilder.addTransition : if i0 < 2 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : i2 = virtualinvoke r3.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getWallOffset()>()
org.joda.time.tz.DateTimeZoneBuilder.addTransition : i2 = virtualinvoke r3.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getWallOffset()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.getWallOffset : $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int iWallOffset>
org.joda.time.tz.DateTimeZoneBuilder$Transition.getWallOffset : $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int iWallOffset> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.getWallOffset : return $i0
org.joda.time.tz.DateTimeZoneBuilder$Transition.getWallOffset : return $i0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : $l7 = virtualinvoke r3.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>()
org.joda.time.tz.DateTimeZoneBuilder.addTransition : $l7 = virtualinvoke r3.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : $l8 = (long) i1
org.joda.time.tz.DateTimeZoneBuilder.addTransition : $l8 = (long) i1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : l3 = $l7 + $l8
org.joda.time.tz.DateTimeZoneBuilder.addTransition : l3 = $l7 + $l8 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : $l9 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>()
org.joda.time.tz.DateTimeZoneBuilder.addTransition : $l9 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : $l10 = (long) i2
org.joda.time.tz.DateTimeZoneBuilder.addTransition : $l10 = (long) i2 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : l4 = $l9 + $l10
org.joda.time.tz.DateTimeZoneBuilder.addTransition : l4 = $l9 + $l10 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : $b11 = l4 cmp l3
org.joda.time.tz.DateTimeZoneBuilder.addTransition : $b11 = l4 cmp l3 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : if $b11 == 0
org.joda.time.tz.DateTimeZoneBuilder.addTransition : if $b11 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $l8 = (long) i3
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $l8 = (long) i3 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $l9 = l0 + $l8
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : $l9 = l0 + $l8 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : i5 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l9)
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : i5 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>($l9) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $z3 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>(r2, r14)
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $z3 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>(r2, r14) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : $i6 = i0 - 2
org.joda.time.tz.DateTimeZoneBuilder.addTransition : $i6 = i0 - 2 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : $r5 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>($i6)
org.joda.time.tz.DateTimeZoneBuilder.addTransition : $r5 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>($i6) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : $r6 = (org.joda.time.tz.DateTimeZoneBuilder$Transition) $r5
org.joda.time.tz.DateTimeZoneBuilder.addTransition : $r6 = (org.joda.time.tz.DateTimeZoneBuilder$Transition) $r5 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : i1 = virtualinvoke $r6.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getWallOffset()>()
org.joda.time.tz.DateTimeZoneBuilder.addTransition : i1 = virtualinvoke $r6.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getWallOffset()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if $z3 == 0
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if $z3 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if r3 == null
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if r3 == null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : l3 = virtualinvoke r14.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>()
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : l3 = virtualinvoke r14.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : i4 = virtualinvoke r14.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getSaveMillis()>()
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : i4 = virtualinvoke r14.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getSaveMillis()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if r3 != null
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if r3 != null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $i5 = i1 - 1
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $i5 = i1 - 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if i2 != $i5
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if i2 != $i5 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String iNameKey>
org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String iNameKey> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : $r3 = r1.<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String iNameKey>
org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : $r3 = r1.<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String iNameKey> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3)
org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : if $z0 != 0
org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : if $z0 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : $z1 = 0
org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : $z1 = 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : return 0
org.joda.time.tz.DateTimeZoneBuilder.addTransition : return 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 5062500
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 5062500 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.next : l6 = l0
org.joda.time.tz.DateTimeZoneBuilder$Rule.next : l6 = l0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : interfaceinvoke r3.<java.util.Iterator: void remove()>()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : interfaceinvoke r3.<java.util.Iterator: void remove()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $r17 = new org.joda.time.tz.DateTimeZoneBuilder$Transition
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : $r17 = new org.joda.time.tz.DateTimeZoneBuilder$Transition >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : specialinvoke $r17.<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Transition)>(l0, r3)
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : specialinvoke $r17.<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Transition)>(l0, r3) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : r2 = $r17
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : r2 = $r17 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : i2 = virtualinvoke r3.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getSaveMillis()>()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : i2 = virtualinvoke r3.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getSaveMillis()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : goto [?= $r11 = virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>(l1, i2)]
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.firstTransition : goto [?= $r11 = virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>(l1, i2)] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : r3 = virtualinvoke r12.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$DSTZone buildTailZone(java.lang.String)>(r1)
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : r3 = virtualinvoke r12.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$DSTZone buildTailZone(java.lang.String)>(r1) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $r4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $r4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : if $i0 != 2
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : if $i0 != 2 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : return null
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : return null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : goto [?= $r13 = virtualinvoke r12.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>(l3, i4)]
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : goto [?= $r13 = virtualinvoke r12.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$Transition nextTransition(long,int)>(l3, i4)] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $r5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $r5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(0)
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : r2 = (org.joda.time.tz.DateTimeZoneBuilder$Rule) $r6
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : r2 = (org.joda.time.tz.DateTimeZoneBuilder$Rule) $r6 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $r7 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $r7 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(1)
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(1) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : r3 = (org.joda.time.tz.DateTimeZoneBuilder$Rule) $r8
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : r3 = (org.joda.time.tz.DateTimeZoneBuilder$Rule) $r8 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $i1 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int getToYear()>()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $i1 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int getToYear()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.getToYear : $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int iToYear>
org.joda.time.tz.DateTimeZoneBuilder$Rule.getToYear : $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int iToYear> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Rule.getToYear : return $i0
org.joda.time.tz.DateTimeZoneBuilder$Rule.getToYear : return $i0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : if $i1 != 2147483647
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : if $i1 != 2147483647 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $i2 = virtualinvoke r3.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int getToYear()>()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $i2 = virtualinvoke r3.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int getToYear()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : if $i2 != 2147483647
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : if $i2 != 2147483647 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $r9 = new org.joda.time.tz.DateTimeZoneBuilder$DSTZone
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $r9 = new org.joda.time.tz.DateTimeZoneBuilder$DSTZone >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $i3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $i3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $r10 = r2.<org.joda.time.tz.DateTimeZoneBuilder$Rule: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iRecurrence>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $r10 = r2.<org.joda.time.tz.DateTimeZoneBuilder$Rule: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iRecurrence> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $r11 = r3.<org.joda.time.tz.DateTimeZoneBuilder$Rule: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iRecurrence>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $r11 = r3.<org.joda.time.tz.DateTimeZoneBuilder$Rule: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iRecurrence> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : specialinvoke $r9.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void <init>(java.lang.String,int,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,org.joda.time.tz.DateTimeZoneBuilder$Recurrence)>(r1, $i3, $r10, $r11)
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : specialinvoke $r9.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void <init>(java.lang.String,int,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,org.joda.time.tz.DateTimeZoneBuilder$Recurrence)>(r1, $i3, $r10, $r11) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : return $r9
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : return $r9 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : goto [?= l0 = virtualinvoke r12.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: long getUpperLimit(int)>(i4)]
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : goto [?= l0 = virtualinvoke r12.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: long getUpperLimit(int)>(i4)] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.getUpperLimit : return 9223372036854775807L
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.getUpperLimit : return 9223372036854775807L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $i6 = virtualinvoke r2.<java.util.ArrayList: int size()>()
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $i6 = virtualinvoke r2.<java.util.ArrayList: int size()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if $i6 != 0
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if $i6 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $i7 = virtualinvoke r2.<java.util.ArrayList: int size()>()
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $i7 = virtualinvoke r2.<java.util.ArrayList: int size()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if $i7 != 1
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if $i7 != 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : r20 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>(r1, z0, r2, r3)
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : r20 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone create(java.lang.String,boolean,java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>(r1, z0, r2, r3) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : i0 = virtualinvoke r1.<java.util.ArrayList: int size()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : i0 = virtualinvoke r1.<java.util.ArrayList: int size()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if i0 != 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if i0 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r3 = newarray (long)[i0]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r3 = newarray (long)[i0] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r4 = newarray (int)[i0]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r4 = newarray (int)[i0] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r5 = newarray (int)[i0]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r5 = newarray (int)[i0] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r6 = newarray (java.lang.String)[i0]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r6 = newarray (java.lang.String)[i0] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r7 = null
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r7 = null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : i1 = 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : i1 = 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if i1 >= i0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if i1 >= i0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r14 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i1)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r14 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i1) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r8 = (org.joda.time.tz.DateTimeZoneBuilder$Transition) $r14
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r8 = (org.joda.time.tz.DateTimeZoneBuilder$Transition) $r14 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $z1 = virtualinvoke r8.<org.joda.time.tz.DateTimeZoneBuilder$Transition: boolean isTransitionFrom(org.joda.time.tz.DateTimeZoneBuilder$Transition)>(r7)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $z1 = virtualinvoke r8.<org.joda.time.tz.DateTimeZoneBuilder$Transition: boolean isTransitionFrom(org.joda.time.tz.DateTimeZoneBuilder$Transition)>(r7) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : return 1
org.joda.time.tz.DateTimeZoneBuilder$Transition.isTransitionFrom : return 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if $z1 != 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if $z1 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $l7 = virtualinvoke r8.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $l7 = virtualinvoke r8.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r3[i1] = $l7
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r3[i1] = $l7 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i8 = virtualinvoke r8.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getWallOffset()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i8 = virtualinvoke r8.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getWallOffset()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r4[i1] = $i8
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r4[i1] = $i8 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i9 = virtualinvoke r8.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getStandardOffset()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i9 = virtualinvoke r8.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getStandardOffset()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.getStandardOffset : $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int iStandardOffset>
org.joda.time.tz.DateTimeZoneBuilder$Transition.getStandardOffset : $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int iStandardOffset> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.getStandardOffset : return $i0
org.joda.time.tz.DateTimeZoneBuilder$Transition.getStandardOffset : return $i0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r5[i1] = $i9
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r5[i1] = $i9 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r16 = virtualinvoke r8.<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String getNameKey()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r16 = virtualinvoke r8.<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String getNameKey()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.getNameKey : $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String iNameKey>
org.joda.time.tz.DateTimeZoneBuilder$Transition.getNameKey : $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Transition: java.lang.String iNameKey> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Transition.getNameKey : return $r1
org.joda.time.tz.DateTimeZoneBuilder$Transition.getNameKey : return $r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r6[i1] = $r16
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r6[i1] = $r16 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r7 = r8
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r7 = r8 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : i1 = i1 + 1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : i1 = i1 + 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : goto [?= (branch)]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : goto [?= (branch)] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r17 = newarray (java.lang.String)[5]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r17 = newarray (java.lang.String)[5] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r18 = new java.text.DateFormatSymbols
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r18 = new java.text.DateFormatSymbols >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r19 = <java.util.Locale: java.util.Locale ENGLISH>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r19 = <java.util.Locale: java.util.Locale ENGLISH> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : specialinvoke $r18.<java.text.DateFormatSymbols: void <init>(java.util.Locale)>($r19)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : specialinvoke $r18.<java.text.DateFormatSymbols: void <init>(java.util.Locale)>($r19) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r20 = virtualinvoke $r18.<java.text.DateFormatSymbols: java.lang.String[][] getZoneStrings()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r20 = virtualinvoke $r18.<java.text.DateFormatSymbols: java.lang.String[][] getZoneStrings()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : i2 = 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : i2 = 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i10 = lengthof r20
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i10 = lengthof r20 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if i2 >= $i10
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if i2 >= $i10 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r9 = r20[i2]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r9 = r20[i2] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if r9 == null
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if r9 == null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i11 = lengthof r9
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i11 = lengthof r9 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if $i11 != 5
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if $i11 != 5 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r21 = r9[0]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r21 = r9[0] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r21)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r21) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if $z2 == 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if $z2 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r17 = r9
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r17 = r9 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : i2 = i2 + 1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : i2 = i2 + 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : goto [?= $i10 = lengthof r20]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : goto [?= $i10 = lengthof r20] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r22 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r22 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : i12 = 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : i12 = 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i13 = lengthof r6
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i13 = lengthof r6 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i14 = $i13 - 1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i14 = $i13 - 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if i12 >= $i14
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if i12 >= $i14 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r10 = r6[i12]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r10 = r6[i12] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i15 = i12 + 1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i15 = i12 + 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r11 = r6[$i15]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r11 = r6[$i15] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i16 = r4[i12]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i16 = r4[i12] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : l3 = (long) $i16
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : l3 = (long) $i16 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i17 = i12 + 1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i17 = i12 + 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i18 = r4[$i17]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i18 = r4[$i17] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : l4 = (long) $i18
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : l4 = (long) $i18 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i19 = r5[i12]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i19 = r5[i12] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : l5 = (long) $i19
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : l5 = (long) $i19 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i20 = i12 + 1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i20 = i12 + 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i21 = r5[$i20]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i21 = r5[$i20] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : l6 = (long) $i21
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : l6 = (long) $i21 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r23 = new org.joda.time.Period
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r23 = new org.joda.time.Period >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $l22 = r3[i12]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $l22 = r3[i12] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i23 = i12 + 1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $i23 = i12 + 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $l24 = r3[$i23]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $l24 = r3[$i23] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r24 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r24 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType yearMonthDay()>() >>>>>>>> org.joda.time.PeriodType.yearMonthDay : r0 = <org.joda.time.PeriodType: org.joda.time.PeriodType cYMD>
org.joda.time.PeriodType.yearMonthDay : r0 = <org.joda.time.PeriodType: org.joda.time.PeriodType cYMD> >>>>>>>> org.joda.time.PeriodType.yearMonthDay : if r0 != null
org.joda.time.PeriodType.yearMonthDay : if r0 != null >>>>>>>> org.joda.time.PeriodType.yearMonthDay : return r0
org.joda.time.PeriodType.yearMonthDay : return r0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : specialinvoke $r23.<org.joda.time.Period: void <init>(long,long,org.joda.time.PeriodType,org.joda.time.Chronology)>($l22, $l24, $r24, r22)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : specialinvoke $r23.<org.joda.time.Period: void <init>(long,long,org.joda.time.PeriodType,org.joda.time.Chronology)>($l22, $l24, $r24, r22) >>>>>>>> org.joda.time.base.BasePeriod.checkPeriodType : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>(r1)
org.joda.time.base.BasePeriod.checkPeriodType : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.PeriodType getPeriodType(org.joda.time.PeriodType)>(r1) >>>>>>>> org.joda.time.DateTimeUtils.getPeriodType : if r0 != null
org.joda.time.DateTimeUtils.getPeriodType : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getPeriodType : return r0
org.joda.time.DateTimeUtils.getPeriodType : return r0 >>>>>>>> org.joda.time.base.BasePeriod.checkPeriodType : return $r2
org.joda.time.base.BasePeriod.checkPeriodType : return $r2 >>>>>>>> org.joda.time.chrono.BaseChronology.get : i2 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int size()>()
org.joda.time.chrono.BaseChronology.get : i2 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: int size()>() >>>>>>>> org.joda.time.base.AbstractPeriod.size : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.base.AbstractPeriod.size : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.base.BasePeriod.getPeriodType : $r1 = r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType>
org.joda.time.base.BasePeriod.getPeriodType : $r1 = r0.<org.joda.time.base.BasePeriod: org.joda.time.PeriodType iType> >>>>>>>> org.joda.time.base.BasePeriod.getPeriodType : return $r1
org.joda.time.base.BasePeriod.getPeriodType : return $r1 >>>>>>>> org.joda.time.base.AbstractPeriod.size : $i0 = virtualinvoke $r1.<org.joda.time.PeriodType: int size()>()
org.joda.time.base.AbstractPeriod.size : $i0 = virtualinvoke $r1.<org.joda.time.PeriodType: int size()>() >>>>>>>> org.joda.time.PeriodType.size : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.PeriodType.size : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes> >>>>>>>> org.joda.time.PeriodType.size : $i0 = lengthof $r1
org.joda.time.PeriodType.size : $i0 = lengthof $r1 >>>>>>>> org.joda.time.PeriodType.size : return $i0
org.joda.time.PeriodType.size : return $i0 >>>>>>>> org.joda.time.base.AbstractPeriod.size : return $i0
org.joda.time.base.AbstractPeriod.size : return $i0 >>>>>>>> org.joda.time.chrono.BaseChronology.get : r2 = newarray (int)[i2]
org.joda.time.chrono.BaseChronology.get : r2 = newarray (int)[i2] >>>>>>>> org.joda.time.chrono.BaseChronology.get : $b5 = l0 cmp l1
org.joda.time.chrono.BaseChronology.get : $b5 = l0 cmp l1 >>>>>>>> org.joda.time.chrono.BaseChronology.get : if $b5 == 0
org.joda.time.chrono.BaseChronology.get : if $b5 == 0 >>>>>>>> org.joda.time.chrono.BaseChronology.get : i3 = 0
org.joda.time.chrono.BaseChronology.get : i3 = 0 >>>>>>>> org.joda.time.chrono.BaseChronology.get : if i3 >= i2
org.joda.time.chrono.BaseChronology.get : if i3 >= i2 >>>>>>>> org.joda.time.chrono.BaseChronology.get : $r4 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>(i3)
org.joda.time.chrono.BaseChronology.get : $r4 = interfaceinvoke r1.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>(i3) >>>>>>>> org.joda.time.base.AbstractPeriod.getFieldType : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>()
org.joda.time.base.AbstractPeriod.getFieldType : $r1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.PeriodType getPeriodType()>() >>>>>>>> org.joda.time.base.AbstractPeriod.getFieldType : $r2 = virtualinvoke $r1.<org.joda.time.PeriodType: org.joda.time.DurationFieldType getFieldType(int)>(i0)
org.joda.time.base.AbstractPeriod.getFieldType : $r2 = virtualinvoke $r1.<org.joda.time.PeriodType: org.joda.time.DurationFieldType getFieldType(int)>(i0) >>>>>>>> org.joda.time.PeriodType.getFieldType : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes>
org.joda.time.PeriodType.getFieldType : $r1 = r0.<org.joda.time.PeriodType: org.joda.time.DurationFieldType[] iTypes> >>>>>>>> org.joda.time.PeriodType.getFieldType : $r2 = $r1[i0]
org.joda.time.PeriodType.getFieldType : $r2 = $r1[i0] >>>>>>>> org.joda.time.PeriodType.getFieldType : return $r2
org.joda.time.PeriodType.getFieldType : return $r2 >>>>>>>> org.joda.time.base.AbstractPeriod.getFieldType : return $r2
org.joda.time.base.AbstractPeriod.getFieldType : return $r2 >>>>>>>> org.joda.time.chrono.BaseChronology.get : r3 = virtualinvoke $r4.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>(r0)
org.joda.time.chrono.BaseChronology.get : r3 = virtualinvoke $r4.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>(r0) >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r6 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField years()>()
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : $r6 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DurationField years()>() >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r6
org.joda.time.DurationFieldType$StandardDurationFieldType.getField : return $r6 >>>>>>>> org.joda.time.chrono.BaseChronology.get : i4 = virtualinvoke r3.<org.joda.time.DurationField: int getDifference(long,long)>(l1, l0)
org.joda.time.chrono.BaseChronology.get : i4 = virtualinvoke r3.<org.joda.time.DurationField: int getDifference(long,long)>(l1, l0) >>>>>>>> org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getDifference : $r1 = r0.<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: org.joda.time.field.ImpreciseDateTimeField this$0>
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getDifference : $r1 = r0.<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: org.joda.time.field.ImpreciseDateTimeField this$0> >>>>>>>> org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getDifference : $i2 = virtualinvoke $r1.<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>(l0, l1)
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getDifference : $i2 = virtualinvoke $r1.<org.joda.time.field.ImpreciseDateTimeField: int getDifference(long,long)>(l0, l1) >>>>>>>> org.joda.time.field.ImpreciseDateTimeField.getDifference : $l2 = virtualinvoke r0.<org.joda.time.field.ImpreciseDateTimeField: long getDifferenceAsLong(long,long)>(l0, l1)
org.joda.time.field.ImpreciseDateTimeField.getDifference : $l2 = virtualinvoke r0.<org.joda.time.field.ImpreciseDateTimeField: long getDifferenceAsLong(long,long)>(l0, l1) >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getDifferenceAsLong : $b2 = l0 cmp l1
org.joda.time.chrono.BasicYearDateTimeField.getDifferenceAsLong : $b2 = l0 cmp l1 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getDifferenceAsLong : if $b2 >= 0
org.joda.time.chrono.BasicYearDateTimeField.getDifferenceAsLong : if $b2 >= 0 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getDifferenceAsLong : $r2 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.getDifferenceAsLong : $r2 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getDifferenceAsLong : $l5 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: long getYearDifference(long,long)>(l0, l1)
org.joda.time.chrono.BasicYearDateTimeField.getDifferenceAsLong : $l5 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: long getYearDifference(long,long)>(l0, l1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicGJChronology.getYearDifference : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : i3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getYear(long)>(l1)
org.joda.time.chrono.BasicGJChronology.getYearDifference : i3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getYear(long)>(l1) >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $l10 = l2 - l1
org.joda.time.chrono.BasicChronology.getYear : $l10 = l2 - l1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l2 = $l10 + 1L
org.joda.time.chrono.BasicChronology.getYear : l2 = $l10 + 1L >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : $l7 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMillis(int)>(i2)
org.joda.time.chrono.BasicGJChronology.getYearDifference : $l7 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMillis(int)>(i2) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : l4 = l0 - $l7
org.joda.time.chrono.BasicGJChronology.getYearDifference : l4 = l0 - $l7 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : $l8 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMillis(int)>(i3)
org.joda.time.chrono.BasicGJChronology.getYearDifference : $l8 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMillis(int)>(i3) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : l5 = l1 - $l8
org.joda.time.chrono.BasicGJChronology.getYearDifference : l5 = l1 - $l8 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : $b9 = l5 cmp 5097600000L
org.joda.time.chrono.BasicGJChronology.getYearDifference : $b9 = l5 cmp 5097600000L >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : if $b9 < 0
org.joda.time.chrono.BasicGJChronology.getYearDifference : if $b9 < 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i3)
org.joda.time.chrono.BasicGJChronology.getYearDifference : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i3) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : if $z0 == 0
org.joda.time.chrono.BasicGJChronology.getYearDifference : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : $b10 = l4 cmp 5097600000L
org.joda.time.chrono.BasicGJChronology.getYearDifference : $b10 = l4 cmp 5097600000L >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : if $b10 < 0
org.joda.time.chrono.BasicGJChronology.getYearDifference : if $b10 < 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : $z2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i2)
org.joda.time.chrono.BasicGJChronology.getYearDifference : $z2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i2) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : if $z2 == 0
org.joda.time.chrono.BasicGJChronology.getYearDifference : if $z2 == 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : i6 = i2 - i3
org.joda.time.chrono.BasicGJChronology.getYearDifference : i6 = i2 - i3 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : $b11 = l4 cmp l5
org.joda.time.chrono.BasicGJChronology.getYearDifference : $b11 = l4 cmp l5 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : if $b11 >= 0
org.joda.time.chrono.BasicGJChronology.getYearDifference : if $b11 >= 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : $l12 = (long) i6
org.joda.time.chrono.BasicGJChronology.getYearDifference : $l12 = (long) i6 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : return $l12
org.joda.time.chrono.BasicGJChronology.getYearDifference : return $l12 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getDifferenceAsLong : return $l5
org.joda.time.chrono.BasicYearDateTimeField.getDifferenceAsLong : return $l5 >>>>>>>> org.joda.time.field.ImpreciseDateTimeField.getDifference : $i3 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>($l2)
org.joda.time.field.ImpreciseDateTimeField.getDifference : $i3 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>($l2) >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : $b1 = -2147483648L cmp l0
org.joda.time.field.FieldUtils.safeToInt : $b1 = -2147483648L cmp l0 >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : if $b1 > 0
org.joda.time.field.FieldUtils.safeToInt : if $b1 > 0 >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : $b2 = l0 cmp 2147483647L
org.joda.time.field.FieldUtils.safeToInt : $b2 = l0 cmp 2147483647L >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : if $b2 > 0
org.joda.time.field.FieldUtils.safeToInt : if $b2 > 0 >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : $i3 = (int) l0
org.joda.time.field.FieldUtils.safeToInt : $i3 = (int) l0 >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : return $i3
org.joda.time.field.FieldUtils.safeToInt : return $i3 >>>>>>>> org.joda.time.field.ImpreciseDateTimeField.getDifference : return $i3
org.joda.time.field.ImpreciseDateTimeField.getDifference : return $i3 >>>>>>>> org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getDifference : return $i2
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.getDifference : return $i2 >>>>>>>> org.joda.time.chrono.BaseChronology.get : l0 = virtualinvoke r3.<org.joda.time.DurationField: long add(long,int)>(l0, i4)
org.joda.time.chrono.BaseChronology.get : l0 = virtualinvoke r3.<org.joda.time.DurationField: long add(long,int)>(l0, i4) >>>>>>>> org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.add : $r1 = r0.<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: org.joda.time.field.ImpreciseDateTimeField this$0>
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.add : $r1 = r0.<org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField: org.joda.time.field.ImpreciseDateTimeField this$0> >>>>>>>> org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.add : $l2 = virtualinvoke $r1.<org.joda.time.field.ImpreciseDateTimeField: long add(long,int)>(l0, i1)
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.add : $l2 = virtualinvoke $r1.<org.joda.time.field.ImpreciseDateTimeField: long add(long,int)>(l0, i1) >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $i4 = i0 ^ i1
org.joda.time.field.FieldUtils.safeAdd : $i4 = i0 ^ i1 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : if $i4 < 0
org.joda.time.field.FieldUtils.safeAdd : if $i4 < 0 >>>>>>>> org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.add : return $l2
org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField.add : return $l2 >>>>>>>> org.joda.time.chrono.BaseChronology.get : r2[i3] = i4
org.joda.time.chrono.BaseChronology.get : r2[i3] = i4 >>>>>>>> org.joda.time.chrono.BaseChronology.get : i3 = i3 + 1
org.joda.time.chrono.BaseChronology.get : i3 = i3 + 1 >>>>>>>> org.joda.time.chrono.BaseChronology.get : goto [?= (branch)]
org.joda.time.chrono.BaseChronology.get : goto [?= (branch)] >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $b10 = l0 cmp l1
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $b10 = l0 cmp l1 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : if $b10 >= 0
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : if $b10 >= 0 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : i3 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i2)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : i3 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i2) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : i4 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l1)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : i4 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l1) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r4 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r4 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : i5 = virtualinvoke $r4.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l1, i4)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : i5 = virtualinvoke $r4.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l1, i4) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 12740625
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 12740625 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 5
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 5 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $i14 = i2 - i4
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $i14 = i2 - i4 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l15 = (long) $i14
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l15 = (long) $i14 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $i16 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $i16 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l17 = (long) $i16
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l17 = (long) $i16 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l18 = $l15 * $l17
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l18 = $l15 * $l17 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l19 = (long) i3
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l19 = (long) i3 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l20 = $l18 + $l19
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l20 = $l18 + $l19 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l21 = (long) i5
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l21 = (long) i5 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : l6 = $l20 - $l21
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : l6 = $l20 - $l21 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : i7 = virtualinvoke $r5.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l0, i2, i3)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : i7 = virtualinvoke $r5.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l0, i2, i3) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r6 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r6 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $i22 = virtualinvoke $r6.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>(i2, i3)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $i22 = virtualinvoke $r6.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>(i2, i3) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : if i7 != $i22
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : if i7 != $i22 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r10 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r10 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l23 = virtualinvoke $r10.<org.joda.time.chrono.BasicChronology: long getYearMonthMillis(int,int)>(i2, i3)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l23 = virtualinvoke $r10.<org.joda.time.chrono.BasicChronology: long getYearMonthMillis(int,int)>(i2, i3) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthMillis : l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0)
org.joda.time.chrono.BasicChronology.getYearMonthMillis : l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthMillis : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i0, i1)
org.joda.time.chrono.BasicChronology.getYearMonthMillis : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i0, i1) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthMillis : l4 = l2 + $l3
org.joda.time.chrono.BasicChronology.getYearMonthMillis : l4 = l2 + $l3 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthMillis : return l4
org.joda.time.chrono.BasicChronology.getYearMonthMillis : return l4 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : l24 = l0 - $l23
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : l24 = l0 - $l23 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r11 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r11 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l25 = virtualinvoke $r11.<org.joda.time.chrono.BasicChronology: long getYearMonthMillis(int,int)>(i4, i5)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $l25 = virtualinvoke $r11.<org.joda.time.chrono.BasicChronology: long getYearMonthMillis(int,int)>(i4, i5) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : l9 = l1 - $l25
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : l9 = l1 - $l25 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $b26 = l24 cmp l9
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $b26 = l24 cmp l9 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : if $b26 >= 0
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : if $b26 >= 0 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : return l6
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : return l6 >>>>>>>> org.joda.time.field.BaseDurationField.getDifference : $l2 = virtualinvoke r0.<org.joda.time.field.BaseDurationField: long getDifferenceAsLong(long,long)>(l0, l1)
org.joda.time.field.BaseDurationField.getDifference : $l2 = virtualinvoke r0.<org.joda.time.field.BaseDurationField: long getDifferenceAsLong(long,long)>(l0, l1) >>>>>>>> org.joda.time.field.PreciseDurationField.getDifferenceAsLong : l2 = staticinvoke <org.joda.time.field.FieldUtils: long safeSubtract(long,long)>(l0, l1)
org.joda.time.field.PreciseDurationField.getDifferenceAsLong : l2 = staticinvoke <org.joda.time.field.FieldUtils: long safeSubtract(long,long)>(l0, l1) >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : $l5 = l0 ^ l1
org.joda.time.field.FieldUtils.safeSubtract : $l5 = l0 ^ l1 >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : $b6 = $l5 cmp 0L
org.joda.time.field.FieldUtils.safeSubtract : $b6 = $l5 cmp 0L >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : if $b6 >= 0
org.joda.time.field.FieldUtils.safeSubtract : if $b6 >= 0 >>>>>>>> org.joda.time.field.PreciseDurationField.getDifferenceAsLong : $l3 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis>
org.joda.time.field.PreciseDurationField.getDifferenceAsLong : $l3 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationField.getDifferenceAsLong : $l4 = l2 / $l3
org.joda.time.field.PreciseDurationField.getDifferenceAsLong : $l4 = l2 / $l3 >>>>>>>> org.joda.time.field.PreciseDurationField.getDifferenceAsLong : return $l4
org.joda.time.field.PreciseDurationField.getDifferenceAsLong : return $l4 >>>>>>>> org.joda.time.field.BaseDurationField.getDifference : $i3 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>($l2)
org.joda.time.field.BaseDurationField.getDifference : $i3 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>($l2) >>>>>>>> org.joda.time.field.BaseDurationField.getDifference : return $i3
org.joda.time.field.BaseDurationField.getDifference : return $i3 >>>>>>>> org.joda.time.chrono.BaseChronology.get : return r2
org.joda.time.chrono.BaseChronology.get : return r2 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r12 = $r23
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : r12 = $r23 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $b25 = l3 cmp l4
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $b25 = l3 cmp l4 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if $b25 == 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if $b25 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $b26 = l5 cmp l6
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $b26 = l5 cmp l6 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if $b26 != 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if $b26 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : i12 = i12 + 1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : i12 = i12 + 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : goto [?= $i13 = lengthof r6]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : goto [?= $i13 = lengthof r6] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : i6 = i6 + -1
org.joda.time.chrono.BasicGJChronology.getYearDifference : i6 = i6 + -1 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r7 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r7 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : i8 = virtualinvoke $r7.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l1, i4, i5)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : i8 = virtualinvoke $r7.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l1, i4, i5) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : if i8 <= i7
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : if i8 <= i7 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $z3 = virtualinvoke r10.<java.lang.String: boolean equals(java.lang.Object)>(r11)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $z3 = virtualinvoke r10.<java.lang.String: boolean equals(java.lang.Object)>(r11) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if $z3 == 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if $z3 == 0 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.add : return l0
org.joda.time.chrono.BasicYearDateTimeField.add : return l0 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : l6 = l6 - 1L
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : l6 = l6 - 1L >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i24 = i8
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i24 = i8 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : l4 = l4 - 86400000L
org.joda.time.chrono.BasicGJChronology.getYearDifference : l4 = l4 - 86400000L >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : $z1 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i2)
org.joda.time.chrono.BasicGJChronology.getYearDifference : $z1 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i2) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : if $z1 != 0
org.joda.time.chrono.BasicGJChronology.getYearDifference : if $z1 != 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : l5 = l5 - 86400000L
org.joda.time.chrono.BasicGJChronology.getYearDifference : l5 = l5 - 86400000L >>>>>>>> org.joda.time.chrono.BasicGJChronology.getYearDifference : goto [?= i6 = i2 - i3]
org.joda.time.chrono.BasicGJChronology.getYearDifference : goto [?= i6 = i2 - i3] >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r8 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r8 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r9 = virtualinvoke $r8.<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : $r9 = virtualinvoke $r8.<org.joda.time.chrono.BasicChronology: org.joda.time.DateTimeField dayOfMonth()>() >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : l1 = virtualinvoke $r9.<org.joda.time.DateTimeField: long set(long,int)>(l1, i7)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getDifferenceAsLong : l1 = virtualinvoke $r9.<org.joda.time.DateTimeField: long set(long,int)>(l1, i7) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if r2 == null
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if r2 == null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r51 = r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r51 = r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r52 = virtualinvoke $r51.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String getNameKey()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r52 = virtualinvoke $r51.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String getNameKey()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r53 = r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r53 = r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r54 = virtualinvoke $r53.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String getNameKey()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r54 = virtualinvoke $r53.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String getNameKey()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $z7 = virtualinvoke $r52.<java.lang.String: boolean equals(java.lang.Object)>($r54)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $z7 = virtualinvoke $r52.<java.lang.String: boolean equals(java.lang.Object)>($r54) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if $z7 == 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if $z7 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r73 = new org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r73 = new org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if z0 == 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : if z0 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r75 = r0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r75 = r0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : goto [?= specialinvoke $r73.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void <init>(java.lang.String,long[],int[],int[],java.lang.String[],org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>($r75, r3, r4, r5, r6, r2)]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : goto [?= specialinvoke $r73.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void <init>(java.lang.String,long[],int[],int[],java.lang.String[],org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>($r75, r3, r4, r5, r6, r2)] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : specialinvoke $r73.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void <init>(java.lang.String,long[],int[],int[],java.lang.String[],org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>($r75, r3, r4, r5, r6, r2)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : specialinvoke $r73.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void <init>(java.lang.String,long[],int[],int[],java.lang.String[],org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>($r75, r3, r4, r5, r6, r2) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : return $r73
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : return $r73 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $z4 = virtualinvoke r20.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean isCachable()>()
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $z4 = virtualinvoke r20.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: boolean isCachable()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.isCachable : $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.isCachable : $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.isCachable : if $r2 == null
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.isCachable : if $r2 == null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.isCachable : return 1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.isCachable : return 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if $z4 == 0
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : if $z4 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r21 = staticinvoke <org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone forZone(org.joda.time.DateTimeZone)>(r20)
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : $r21 = staticinvoke <org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone forZone(org.joda.time.DateTimeZone)>(r20) >>>>>>>> org.joda.time.tz.CachedDateTimeZone.forZone : $z0 = r0 instanceof org.joda.time.tz.CachedDateTimeZone
org.joda.time.tz.CachedDateTimeZone.forZone : $z0 = r0 instanceof org.joda.time.tz.CachedDateTimeZone >>>>>>>> org.joda.time.tz.CachedDateTimeZone.forZone : if $z0 == 0
org.joda.time.tz.CachedDateTimeZone.forZone : if $z0 == 0 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.forZone : $r2 = new org.joda.time.tz.CachedDateTimeZone
org.joda.time.tz.CachedDateTimeZone.forZone : $r2 = new org.joda.time.tz.CachedDateTimeZone >>>>>>>> org.joda.time.tz.CachedDateTimeZone.forZone : specialinvoke $r2.<org.joda.time.tz.CachedDateTimeZone: void <init>(org.joda.time.DateTimeZone)>(r0)
org.joda.time.tz.CachedDateTimeZone.forZone : specialinvoke $r2.<org.joda.time.tz.CachedDateTimeZone: void <init>(org.joda.time.DateTimeZone)>(r0) >>>>>>>> org.joda.time.DateTimeZone.getID : $r1 = r0.<org.joda.time.DateTimeZone: java.lang.String iID>
org.joda.time.DateTimeZone.getID : $r1 = r0.<org.joda.time.DateTimeZone: java.lang.String iID> >>>>>>>> org.joda.time.DateTimeZone.getID : return $r1
org.joda.time.DateTimeZone.getID : return $r1 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.forZone : return $r2
org.joda.time.tz.CachedDateTimeZone.forZone : return $r2 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : return $r21
org.joda.time.tz.DateTimeZoneBuilder.toDateTimeZone : return $r21 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : r8 = r7
org.joda.time.tz.ZoneInfoCompiler.compile : r8 = r7 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : $r35 = virtualinvoke r8.<org.joda.time.DateTimeZone: java.lang.String getID()>()
org.joda.time.tz.ZoneInfoCompiler.compile : $r35 = virtualinvoke r8.<org.joda.time.DateTimeZone: java.lang.String getID()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : $z2 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>($r35, r8)
org.joda.time.tz.ZoneInfoCompiler.compile : $z2 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: boolean test(java.lang.String,org.joda.time.DateTimeZone)>($r35, r8) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r6 = virtualinvoke r1.<org.joda.time.DateTimeZone: java.lang.String getID()>()
org.joda.time.tz.ZoneInfoCompiler.test : $r6 = virtualinvoke r1.<org.joda.time.DateTimeZone: java.lang.String getID()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r6)
org.joda.time.tz.ZoneInfoCompiler.test : $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r6) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : if $z0 != 0
org.joda.time.tz.ZoneInfoCompiler.test : if $z0 != 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r7 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>()
org.joda.time.tz.ZoneInfoCompiler.test : $r7 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r8 = virtualinvoke $r7.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeField year()>()
org.joda.time.tz.ZoneInfoCompiler.test : $r8 = virtualinvoke $r7.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : l0 = virtualinvoke $r8.<org.joda.time.DateTimeField: long set(long,int)>(0L, 1850)
org.joda.time.tz.ZoneInfoCompiler.test : l0 = virtualinvoke $r8.<org.joda.time.DateTimeField: long set(long,int)>(0L, 1850) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $r3 = new org.joda.time.chrono.BasicChronology$YearInfo
org.joda.time.chrono.BasicChronology.getYearInfo : $r3 = new org.joda.time.chrono.BasicChronology$YearInfo >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long calculateFirstDayOfYearMillis(int)>(i0)
org.joda.time.chrono.BasicChronology.getYearInfo : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long calculateFirstDayOfYearMillis(int)>(i0) >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : i1 = i0 / 100
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : i1 = i0 / 100 >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : if i0 >= 0
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : if i0 >= 0 >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $i9 = i0 >> 2
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $i9 = i0 >> 2 >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $i10 = $i9 - i1
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $i10 = $i9 - i1 >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $i11 = i1 >> 2
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $i11 = i1 >> 2 >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : i8 = $i10 + $i11
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : i8 = $i10 + $i11 >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $z0 = virtualinvoke r0.<org.joda.time.chrono.GregorianChronology: boolean isLeapYear(int)>(i0)
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $z0 = virtualinvoke r0.<org.joda.time.chrono.GregorianChronology: boolean isLeapYear(int)>(i0) >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : if $z0 == 0
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : if $z0 == 0 >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $l12 = (long) i0
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $l12 = (long) i0 >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $l13 = $l12 * 365L
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $l13 = $l12 * 365L >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $i14 = i8 - 719527
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $i14 = i8 - 719527 >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $l15 = (long) $i14
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $l15 = (long) $i14 >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $l16 = $l13 + $l15
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $l16 = $l13 + $l15 >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $l17 = $l16 * 86400000L
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : $l17 = $l16 * 86400000L >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : return $l17
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : return $l17 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : specialinvoke $r3.<org.joda.time.chrono.BasicChronology$YearInfo: void <init>(int,long)>(i0, $l3)
org.joda.time.chrono.BasicChronology.getYearInfo : specialinvoke $r3.<org.joda.time.chrono.BasicChronology$YearInfo: void <init>(int,long)>(i0, $l3) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : r1 = $r3
org.joda.time.chrono.BasicChronology.getYearInfo : r1 = $r3 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $r4 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache>
org.joda.time.chrono.BasicChronology.getYearInfo : $r4 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $i4 = i0 & 1023
org.joda.time.chrono.BasicChronology.getYearInfo : $i4 = i0 & 1023 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $r4[$i4] = r1
org.joda.time.chrono.BasicChronology.getYearInfo : $r4[$i4] = r1 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r9 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>()
org.joda.time.tz.ZoneInfoCompiler.test : $r9 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r10 = virtualinvoke $r9.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeField year()>()
org.joda.time.tz.ZoneInfoCompiler.test : $r10 = virtualinvoke $r9.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : l1 = virtualinvoke $r10.<org.joda.time.DateTimeField: long set(long,int)>(0L, 2050)
org.joda.time.tz.ZoneInfoCompiler.test : l1 = virtualinvoke $r10.<org.joda.time.DateTimeField: long set(long,int)>(0L, 2050) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : i2 = virtualinvoke r1.<org.joda.time.DateTimeZone: int getOffset(long)>(l0)
org.joda.time.tz.ZoneInfoCompiler.test : i2 = virtualinvoke r1.<org.joda.time.DateTimeZone: int getOffset(long)>(l0) >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getOffset : $r1 = specialinvoke r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info getInfo(long)>(l0)
org.joda.time.tz.CachedDateTimeZone.getOffset : $r1 = specialinvoke r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info getInfo(long)>(l0) >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getInfo : $l4 = l0 >> 32
org.joda.time.tz.CachedDateTimeZone.getInfo : $l4 = l0 >> 32 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getInfo : i1 = (int) $l4
org.joda.time.tz.CachedDateTimeZone.getInfo : i1 = (int) $l4 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getInfo : r1 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info[] iInfoCache>
org.joda.time.tz.CachedDateTimeZone.getInfo : r1 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info[] iInfoCache> >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getInfo : $i2 = <org.joda.time.tz.CachedDateTimeZone: int cInfoCacheMask>
org.joda.time.tz.CachedDateTimeZone.getInfo : $i2 = <org.joda.time.tz.CachedDateTimeZone: int cInfoCacheMask> >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getInfo : i3 = i1 & $i2
org.joda.time.tz.CachedDateTimeZone.getInfo : i3 = i1 & $i2 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getInfo : r2 = r1[i3]
org.joda.time.tz.CachedDateTimeZone.getInfo : r2 = r1[i3] >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getInfo : if r2 == null
org.joda.time.tz.CachedDateTimeZone.getInfo : if r2 == null >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getInfo : r2 = specialinvoke r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info createInfo(long)>(l0)
org.joda.time.tz.CachedDateTimeZone.getInfo : r2 = specialinvoke r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info createInfo(long)>(l0) >>>>>>>> org.joda.time.tz.CachedDateTimeZone.createInfo : l1 = l0 & -4294967296L
org.joda.time.tz.CachedDateTimeZone.createInfo : l1 = l0 & -4294967296L >>>>>>>> org.joda.time.tz.CachedDateTimeZone.createInfo : $r3 = new org.joda.time.tz.CachedDateTimeZone$Info
org.joda.time.tz.CachedDateTimeZone.createInfo : $r3 = new org.joda.time.tz.CachedDateTimeZone$Info >>>>>>>> org.joda.time.tz.CachedDateTimeZone.createInfo : $r4 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone>
org.joda.time.tz.CachedDateTimeZone.createInfo : $r4 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.tz.CachedDateTimeZone.createInfo : specialinvoke $r3.<org.joda.time.tz.CachedDateTimeZone$Info: void <init>(org.joda.time.DateTimeZone,long)>($r4, l1)
org.joda.time.tz.CachedDateTimeZone.createInfo : specialinvoke $r3.<org.joda.time.tz.CachedDateTimeZone$Info: void <init>(org.joda.time.DateTimeZone,long)>($r4, l1) >>>>>>>> org.joda.time.tz.CachedDateTimeZone.createInfo : r1 = $r3
org.joda.time.tz.CachedDateTimeZone.createInfo : r1 = $r3 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.createInfo : l2 = l1 | 4294967295L
org.joda.time.tz.CachedDateTimeZone.createInfo : l2 = l1 | 4294967295L >>>>>>>> org.joda.time.tz.CachedDateTimeZone.createInfo : r2 = r1
org.joda.time.tz.CachedDateTimeZone.createInfo : r2 = r1 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.createInfo : $r5 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone>
org.joda.time.tz.CachedDateTimeZone.createInfo : $r5 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.tz.CachedDateTimeZone.createInfo : l3 = virtualinvoke $r5.<org.joda.time.DateTimeZone: long nextTransition(long)>(l1)
org.joda.time.tz.CachedDateTimeZone.createInfo : l3 = virtualinvoke $r5.<org.joda.time.DateTimeZone: long nextTransition(long)>(l1) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : i1 = staticinvoke <java.util.Arrays: int binarySearch(long[],long)>(r1, l0)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : i1 = staticinvoke <java.util.Arrays: int binarySearch(long[],long)>(r1, l0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : if i1 < 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : if i1 < 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : $i3 = i1 ^ -1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : $i3 = i1 ^ -1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : i4 = $i3
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : i4 = $i3 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : $i5 = lengthof r1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : $i5 = lengthof r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : if i4 >= $i5
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : if i4 >= $i5 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : $l6 = r1[i4]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : $l6 = r1[i4] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : return $l6
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : return $l6 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.createInfo : $b4 = l3 cmp l1
org.joda.time.tz.CachedDateTimeZone.createInfo : $b4 = l3 cmp l1 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.createInfo : if $b4 == 0
org.joda.time.tz.CachedDateTimeZone.createInfo : if $b4 == 0 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.createInfo : $b5 = l3 cmp l2
org.joda.time.tz.CachedDateTimeZone.createInfo : $b5 = l3 cmp l2 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.createInfo : if $b5 <= 0
org.joda.time.tz.CachedDateTimeZone.createInfo : if $b5 <= 0 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.createInfo : goto [?= return r1]
org.joda.time.tz.CachedDateTimeZone.createInfo : goto [?= return r1] >>>>>>>> org.joda.time.tz.CachedDateTimeZone.createInfo : return r1
org.joda.time.tz.CachedDateTimeZone.createInfo : return r1 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getInfo : r1[i3] = r2
org.joda.time.tz.CachedDateTimeZone.getInfo : r1[i3] = r2 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getInfo : return r2
org.joda.time.tz.CachedDateTimeZone.getInfo : return r2 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getOffset : $i1 = virtualinvoke $r1.<org.joda.time.tz.CachedDateTimeZone$Info: int getOffset(long)>(l0)
org.joda.time.tz.CachedDateTimeZone.getOffset : $i1 = virtualinvoke $r1.<org.joda.time.tz.CachedDateTimeZone$Info: int getOffset(long)>(l0) >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getOffset : $r1 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: org.joda.time.tz.CachedDateTimeZone$Info iNextInfo>
org.joda.time.tz.CachedDateTimeZone$Info.getOffset : $r1 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: org.joda.time.tz.CachedDateTimeZone$Info iNextInfo> >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getOffset : if $r1 == null
org.joda.time.tz.CachedDateTimeZone$Info.getOffset : if $r1 == null >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getOffset : $i3 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: int iOffset>
org.joda.time.tz.CachedDateTimeZone$Info.getOffset : $i3 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: int iOffset> >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getOffset : if $i3 != -2147483648
org.joda.time.tz.CachedDateTimeZone$Info.getOffset : if $i3 != -2147483648 >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getOffset : $r3 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: org.joda.time.DateTimeZone iZoneRef>
org.joda.time.tz.CachedDateTimeZone$Info.getOffset : $r3 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: org.joda.time.DateTimeZone iZoneRef> >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getOffset : $l4 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: long iPeriodStart>
org.joda.time.tz.CachedDateTimeZone$Info.getOffset : $l4 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: long iPeriodStart> >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getOffset : $i5 = virtualinvoke $r3.<org.joda.time.DateTimeZone: int getOffset(long)>($l4)
org.joda.time.tz.CachedDateTimeZone$Info.getOffset : $i5 = virtualinvoke $r3.<org.joda.time.DateTimeZone: int getOffset(long)>($l4) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : i1 = staticinvoke <java.util.Arrays: int binarySearch(long[],long)>(r1, l0)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : i1 = staticinvoke <java.util.Arrays: int binarySearch(long[],long)>(r1, l0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : if i1 < 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : if i1 < 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : i3 = i1 ^ -1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : i3 = i1 ^ -1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : $i4 = lengthof r1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : $i4 = lengthof r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : if i3 >= $i4
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : if i3 >= $i4 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : if i3 <= 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : if i3 <= 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iWallOffsets>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iWallOffsets> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : $i5 = i3 - 1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : $i5 = i3 - 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : $i6 = $r3[$i5]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : $i6 = $r3[$i5] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : return $i6
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : return $i6 >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getOffset : r0.<org.joda.time.tz.CachedDateTimeZone$Info: int iOffset> = $i5
org.joda.time.tz.CachedDateTimeZone$Info.getOffset : r0.<org.joda.time.tz.CachedDateTimeZone$Info: int iOffset> = $i5 >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getOffset : $i6 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: int iOffset>
org.joda.time.tz.CachedDateTimeZone$Info.getOffset : $i6 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: int iOffset> >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getOffset : return $i6
org.joda.time.tz.CachedDateTimeZone$Info.getOffset : return $i6 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getOffset : return $i1
org.joda.time.tz.CachedDateTimeZone.getOffset : return $i1 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : r2 = virtualinvoke r1.<org.joda.time.DateTimeZone: java.lang.String getNameKey(long)>(l0)
org.joda.time.tz.ZoneInfoCompiler.test : r2 = virtualinvoke r1.<org.joda.time.DateTimeZone: java.lang.String getNameKey(long)>(l0) >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getNameKey : $r1 = specialinvoke r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info getInfo(long)>(l0)
org.joda.time.tz.CachedDateTimeZone.getNameKey : $r1 = specialinvoke r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info getInfo(long)>(l0) >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getInfo : $l5 = r2.<org.joda.time.tz.CachedDateTimeZone$Info: long iPeriodStart>
org.joda.time.tz.CachedDateTimeZone.getInfo : $l5 = r2.<org.joda.time.tz.CachedDateTimeZone$Info: long iPeriodStart> >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getInfo : $l6 = $l5 >> 32
org.joda.time.tz.CachedDateTimeZone.getInfo : $l6 = $l5 >> 32 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getInfo : $i7 = (int) $l6
org.joda.time.tz.CachedDateTimeZone.getInfo : $i7 = (int) $l6 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getInfo : if $i7 == i1
org.joda.time.tz.CachedDateTimeZone.getInfo : if $i7 == i1 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getNameKey : $r2 = virtualinvoke $r1.<org.joda.time.tz.CachedDateTimeZone$Info: java.lang.String getNameKey(long)>(l0)
org.joda.time.tz.CachedDateTimeZone.getNameKey : $r2 = virtualinvoke $r1.<org.joda.time.tz.CachedDateTimeZone$Info: java.lang.String getNameKey(long)>(l0) >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : $r1 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: org.joda.time.tz.CachedDateTimeZone$Info iNextInfo>
org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : $r1 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: org.joda.time.tz.CachedDateTimeZone$Info iNextInfo> >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : if $r1 == null
org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : if $r1 == null >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : $r3 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: java.lang.String iNameKey>
org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : $r3 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: java.lang.String iNameKey> >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : if $r3 != null
org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : if $r3 != null >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : $r4 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: org.joda.time.DateTimeZone iZoneRef>
org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : $r4 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: org.joda.time.DateTimeZone iZoneRef> >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : $l3 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: long iPeriodStart>
org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : $l3 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: long iPeriodStart> >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : $r5 = virtualinvoke $r4.<org.joda.time.DateTimeZone: java.lang.String getNameKey(long)>($l3)
org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : $r5 = virtualinvoke $r4.<org.joda.time.DateTimeZone: java.lang.String getNameKey(long)>($l3) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : i1 = staticinvoke <java.util.Arrays: int binarySearch(long[],long)>(r1, l0)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : i1 = staticinvoke <java.util.Arrays: int binarySearch(long[],long)>(r1, l0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : if i1 < 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : if i1 < 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : i2 = i1 ^ -1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : i2 = i1 ^ -1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : $i3 = lengthof r1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : $i3 = lengthof r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : if i2 >= $i3
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : if i2 >= $i3 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : if i2 <= 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : if i2 <= 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : $r4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String[] iNameKeys>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : $r4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String[] iNameKeys> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : $i4 = i2 - 1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : $i4 = i2 - 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : $r5 = $r4[$i4]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : $r5 = $r4[$i4] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : return $r5
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : return $r5 >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : r0.<org.joda.time.tz.CachedDateTimeZone$Info: java.lang.String iNameKey> = $r5
org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : r0.<org.joda.time.tz.CachedDateTimeZone$Info: java.lang.String iNameKey> = $r5 >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : $r6 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: java.lang.String iNameKey>
org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : $r6 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: java.lang.String iNameKey> >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : return $r6
org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : return $r6 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getNameKey : return $r2
org.joda.time.tz.CachedDateTimeZone.getNameKey : return $r2 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r11 = new java.util.ArrayList
org.joda.time.tz.ZoneInfoCompiler.test : $r11 = new java.util.ArrayList >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : specialinvoke $r11.<java.util.ArrayList: void <init>()>()
org.joda.time.tz.ZoneInfoCompiler.test : specialinvoke $r11.<java.util.ArrayList: void <init>()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : r3 = $r11
org.joda.time.tz.ZoneInfoCompiler.test : r3 = $r11 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : l3 = virtualinvoke r1.<org.joda.time.DateTimeZone: long nextTransition(long)>(l0)
org.joda.time.tz.ZoneInfoCompiler.test : l3 = virtualinvoke r1.<org.joda.time.DateTimeZone: long nextTransition(long)>(l0) >>>>>>>> org.joda.time.tz.CachedDateTimeZone.nextTransition : $r1 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone>
org.joda.time.tz.CachedDateTimeZone.nextTransition : $r1 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.tz.CachedDateTimeZone.nextTransition : $l1 = virtualinvoke $r1.<org.joda.time.DateTimeZone: long nextTransition(long)>(l0)
org.joda.time.tz.CachedDateTimeZone.nextTransition : $l1 = virtualinvoke $r1.<org.joda.time.DateTimeZone: long nextTransition(long)>(l0) >>>>>>>> org.joda.time.tz.CachedDateTimeZone.nextTransition : return $l1
org.joda.time.tz.CachedDateTimeZone.nextTransition : return $l1 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $b6 = l3 cmp l0
org.joda.time.tz.ZoneInfoCompiler.test : $b6 = l3 cmp l0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : if $b6 == 0
org.joda.time.tz.ZoneInfoCompiler.test : if $b6 == 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $b7 = l3 cmp l1
org.joda.time.tz.ZoneInfoCompiler.test : $b7 = l3 cmp l1 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : if $b7 <= 0
org.joda.time.tz.ZoneInfoCompiler.test : if $b7 <= 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : l0 = l3
org.joda.time.tz.ZoneInfoCompiler.test : l0 = l3 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : i4 = virtualinvoke r1.<org.joda.time.DateTimeZone: int getOffset(long)>(l0)
org.joda.time.tz.ZoneInfoCompiler.test : i4 = virtualinvoke r1.<org.joda.time.DateTimeZone: int getOffset(long)>(l0) >>>>>>>> org.joda.time.tz.CachedDateTimeZone.createInfo : l1 = l3
org.joda.time.tz.CachedDateTimeZone.createInfo : l1 = l3 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.createInfo : $r6 = new org.joda.time.tz.CachedDateTimeZone$Info
org.joda.time.tz.CachedDateTimeZone.createInfo : $r6 = new org.joda.time.tz.CachedDateTimeZone$Info >>>>>>>> org.joda.time.tz.CachedDateTimeZone.createInfo : $r7 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone>
org.joda.time.tz.CachedDateTimeZone.createInfo : $r7 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.tz.CachedDateTimeZone.createInfo : specialinvoke $r6.<org.joda.time.tz.CachedDateTimeZone$Info: void <init>(org.joda.time.DateTimeZone,long)>($r7, l1)
org.joda.time.tz.CachedDateTimeZone.createInfo : specialinvoke $r6.<org.joda.time.tz.CachedDateTimeZone$Info: void <init>(org.joda.time.DateTimeZone,long)>($r7, l1) >>>>>>>> org.joda.time.tz.CachedDateTimeZone.createInfo : r2.<org.joda.time.tz.CachedDateTimeZone$Info: org.joda.time.tz.CachedDateTimeZone$Info iNextInfo> = $r6
org.joda.time.tz.CachedDateTimeZone.createInfo : r2.<org.joda.time.tz.CachedDateTimeZone$Info: org.joda.time.tz.CachedDateTimeZone$Info iNextInfo> = $r6 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.createInfo : r2 = $r6
org.joda.time.tz.CachedDateTimeZone.createInfo : r2 = $r6 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.createInfo : goto [?= $r5 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone>]
org.joda.time.tz.CachedDateTimeZone.createInfo : goto [?= $r5 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone>] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : $i3 = i1 + 1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : $i3 = i1 + 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : goto [?= i4 = $i3]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : goto [?= i4 = $i3] >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getOffset : $r2 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: org.joda.time.tz.CachedDateTimeZone$Info iNextInfo>
org.joda.time.tz.CachedDateTimeZone$Info.getOffset : $r2 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: org.joda.time.tz.CachedDateTimeZone$Info iNextInfo> >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getOffset : $l1 = $r2.<org.joda.time.tz.CachedDateTimeZone$Info: long iPeriodStart>
org.joda.time.tz.CachedDateTimeZone$Info.getOffset : $l1 = $r2.<org.joda.time.tz.CachedDateTimeZone$Info: long iPeriodStart> >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getOffset : $b2 = l0 cmp $l1
org.joda.time.tz.CachedDateTimeZone$Info.getOffset : $b2 = l0 cmp $l1 >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getOffset : if $b2 >= 0
org.joda.time.tz.CachedDateTimeZone$Info.getOffset : if $b2 >= 0 >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getOffset : $r4 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: org.joda.time.tz.CachedDateTimeZone$Info iNextInfo>
org.joda.time.tz.CachedDateTimeZone$Info.getOffset : $r4 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: org.joda.time.tz.CachedDateTimeZone$Info iNextInfo> >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getOffset : $i7 = virtualinvoke $r4.<org.joda.time.tz.CachedDateTimeZone$Info: int getOffset(long)>(l0)
org.joda.time.tz.CachedDateTimeZone$Info.getOffset : $i7 = virtualinvoke $r4.<org.joda.time.tz.CachedDateTimeZone$Info: int getOffset(long)>(l0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iWallOffsets>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iWallOffsets> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : $i2 = $r2[i1]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : $i2 = $r2[i1] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : return $i2
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : return $i2 >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getOffset : return $i7
org.joda.time.tz.CachedDateTimeZone$Info.getOffset : return $i7 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : r4 = virtualinvoke r1.<org.joda.time.DateTimeZone: java.lang.String getNameKey(long)>(l0)
org.joda.time.tz.ZoneInfoCompiler.test : r4 = virtualinvoke r1.<org.joda.time.DateTimeZone: java.lang.String getNameKey(long)>(l0) >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : $r2 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: org.joda.time.tz.CachedDateTimeZone$Info iNextInfo>
org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : $r2 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: org.joda.time.tz.CachedDateTimeZone$Info iNextInfo> >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : $l1 = $r2.<org.joda.time.tz.CachedDateTimeZone$Info: long iPeriodStart>
org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : $l1 = $r2.<org.joda.time.tz.CachedDateTimeZone$Info: long iPeriodStart> >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : $b2 = l0 cmp $l1
org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : $b2 = l0 cmp $l1 >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : if $b2 >= 0
org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : if $b2 >= 0 >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : $r7 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: org.joda.time.tz.CachedDateTimeZone$Info iNextInfo>
org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : $r7 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: org.joda.time.tz.CachedDateTimeZone$Info iNextInfo> >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : $r8 = virtualinvoke $r7.<org.joda.time.tz.CachedDateTimeZone$Info: java.lang.String getNameKey(long)>(l0)
org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : $r8 = virtualinvoke $r7.<org.joda.time.tz.CachedDateTimeZone$Info: java.lang.String getNameKey(long)>(l0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String[] iNameKeys>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String[] iNameKeys> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : $r3 = $r2[i1]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : $r3 = $r2[i1] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : return $r3
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : return $r3 >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : return $r8
org.joda.time.tz.CachedDateTimeZone$Info.getNameKey : return $r8 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : if i2 != i4
org.joda.time.tz.ZoneInfoCompiler.test : if i2 != i4 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : if r4 == null
org.joda.time.tz.ZoneInfoCompiler.test : if r4 == null >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $i8 = virtualinvoke r4.<java.lang.String: int length()>()
org.joda.time.tz.ZoneInfoCompiler.test : $i8 = virtualinvoke r4.<java.lang.String: int length()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : if $i8 >= 3
org.joda.time.tz.ZoneInfoCompiler.test : if $i8 >= 3 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r34 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0)
org.joda.time.tz.ZoneInfoCompiler.test : $r34 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r34)
org.joda.time.tz.ZoneInfoCompiler.test : interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r34) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : i2 = i4
org.joda.time.tz.ZoneInfoCompiler.test : i2 = i4 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : r2 = r4
org.joda.time.tz.ZoneInfoCompiler.test : r2 = r4 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : goto [?= l3 = virtualinvoke r1.<org.joda.time.DateTimeZone: long nextTransition(long)>(l0)]
org.joda.time.tz.ZoneInfoCompiler.test : goto [?= l3 = virtualinvoke r1.<org.joda.time.DateTimeZone: long nextTransition(long)>(l0)] >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(r4)
org.joda.time.tz.ZoneInfoCompiler.test : $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>(r4) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : if $z1 == 0
org.joda.time.tz.ZoneInfoCompiler.test : if $z1 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : if $r2 != null
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : if $r2 != null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : $i7 = lengthof r1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : $i7 = lengthof r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : $i8 = $i7 - 1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : $i8 = $i7 - 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : l2 = r1[$i8]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : l2 = r1[$i8] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : $b9 = l0 cmp l2
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : $b9 = l0 cmp l2 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : if $b9 >= 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : if $b9 >= 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : $l10 = virtualinvoke $r3.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long nextTransition(long)>(l0)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : $l10 = virtualinvoke $r3.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long nextTransition(long)>(l0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset>
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence>
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence>
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : $i4 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>()
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : $i4 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : l2 = virtualinvoke r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long next(long,int,int)>(l0, i1, $i4)
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : l2 = virtualinvoke r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long next(long,int,int)>(l0, i1, $i4) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : $b5 = l0 cmp 0L
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : $b5 = l0 cmp 0L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : if $b5 <= 0
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : if $b5 <= 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : $b6 = l2 cmp 0L
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : $b6 = l2 cmp 0L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : if $b6 >= 0
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : if $b6 >= 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : goto [?= $i7 = virtualinvoke r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>()]
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : goto [?= $i7 = virtualinvoke r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>()] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : $i7 = virtualinvoke r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>()
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : $i7 = virtualinvoke r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : l3 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long next(long,int,int)>(l0, i1, $i7)
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : l3 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long next(long,int,int)>(l0, i1, $i7) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : $b8 = l0 cmp 0L
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : $b8 = l0 cmp 0L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : if $b8 <= 0
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : if $b8 <= 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : $b9 = l3 cmp 0L
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : $b9 = l3 cmp 0L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : if $b9 >= 0
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : if $b9 >= 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : goto [?= $b10 = l2 cmp l3]
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : goto [?= $b10 = l2 cmp l3] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : $b10 = l2 cmp l3
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : $b10 = l2 cmp l3 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : if $b10 <= 0
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : if $b10 <= 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : $l11 = l2
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : $l11 = l2 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : return $l11
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : return $l11 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : return $l10
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.nextTransition : return $l10 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : $l11 = l3
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : $l11 = l3 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : goto [?= return $l11]
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.nextTransition : goto [?= return $l11] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : $r4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : $r4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : if $r4 != null
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : if $r4 != null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : $r6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : $r6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : $i9 = virtualinvoke $r6.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>(l0)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : $i9 = virtualinvoke $r6.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getOffset(long)>(l0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.getOffset : $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset>
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.getOffset : $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.getOffset : $r1 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence findMatchingRecurrence(long)>(l0)
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.getOffset : $r1 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence findMatchingRecurrence(long)>(l0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.findMatchingRecurrence : i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset>
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.findMatchingRecurrence : i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.findMatchingRecurrence : r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence>
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.findMatchingRecurrence : r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.findMatchingRecurrence : r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence>
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.findMatchingRecurrence : r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.findMatchingRecurrence : $i4 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>()
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.findMatchingRecurrence : $i4 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.findMatchingRecurrence : l2 = virtualinvoke r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long next(long,int,int)>(l0, i1, $i4)
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.findMatchingRecurrence : l2 = virtualinvoke r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long next(long,int,int)>(l0, i1, $i4) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.findMatchingRecurrence : goto [?= $i5 = virtualinvoke r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>()]
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.findMatchingRecurrence : goto [?= $i5 = virtualinvoke r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>()] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.findMatchingRecurrence : $i5 = virtualinvoke r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>()
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.findMatchingRecurrence : $i5 = virtualinvoke r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.findMatchingRecurrence : l3 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long next(long,int,int)>(l0, i1, $i5)
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.findMatchingRecurrence : l3 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long next(long,int,int)>(l0, i1, $i5) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.findMatchingRecurrence : goto [?= $b6 = l2 cmp l3]
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.findMatchingRecurrence : goto [?= $b6 = l2 cmp l3] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.findMatchingRecurrence : $b6 = l2 cmp l3
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.findMatchingRecurrence : $b6 = l2 cmp l3 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.findMatchingRecurrence : if $b6 <= 0
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.findMatchingRecurrence : if $b6 <= 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.findMatchingRecurrence : $r11 = r1
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.findMatchingRecurrence : $r11 = r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.findMatchingRecurrence : goto [?= return $r11]
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.findMatchingRecurrence : goto [?= return $r11] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.findMatchingRecurrence : return $r11
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.findMatchingRecurrence : return $r11 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.getOffset : $i2 = virtualinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>()
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.getOffset : $i2 = virtualinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.getOffset : $i3 = $i1 + $i2
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.getOffset : $i3 = $i1 + $i2 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.getOffset : return $i3
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.getOffset : return $i3 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : return $i9
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getOffset : return $i9 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : $r6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : $r6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : if $r6 != null
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : if $r6 != null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : $r9 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : $r9 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : $r10 = virtualinvoke $r9.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getNameKey(long)>(l0)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : $r10 = virtualinvoke $r9.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getNameKey(long)>(l0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.getNameKey : $r1 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence findMatchingRecurrence(long)>(l0)
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.getNameKey : $r1 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence findMatchingRecurrence(long)>(l0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.getNameKey : $r2 = virtualinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String getNameKey()>()
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.getNameKey : $r2 = virtualinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String getNameKey()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.getNameKey : return $r2
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.getNameKey : return $r2 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : return $r10
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getNameKey : return $r10 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.findMatchingRecurrence : $r11 = r2
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.findMatchingRecurrence : $r11 = r2 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : $i3 = i0 % 400
org.joda.time.chrono.GregorianChronology.isLeapYear : $i3 = i0 % 400 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : if $i3 != 0
org.joda.time.chrono.GregorianChronology.isLeapYear : if $i3 != 0 >>>>>>>> org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : i8 = i8 + -1
org.joda.time.chrono.GregorianChronology.calculateFirstDayOfYearMillis : i8 = i8 + -1 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : goto [?= $r35 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>()]
org.joda.time.tz.ZoneInfoCompiler.test : goto [?= $r35 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>()] >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r35 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>()
org.joda.time.tz.ZoneInfoCompiler.test : $r35 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r36 = virtualinvoke $r35.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeField year()>()
org.joda.time.tz.ZoneInfoCompiler.test : $r36 = virtualinvoke $r35.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : l9 = virtualinvoke $r36.<org.joda.time.DateTimeField: long set(long,int)>(0L, 2050)
org.joda.time.tz.ZoneInfoCompiler.test : l9 = virtualinvoke $r36.<org.joda.time.DateTimeField: long set(long,int)>(0L, 2050) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r37 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>()
org.joda.time.tz.ZoneInfoCompiler.test : $r37 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r38 = virtualinvoke $r37.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeField year()>()
org.joda.time.tz.ZoneInfoCompiler.test : $r38 = virtualinvoke $r37.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : l10 = virtualinvoke $r38.<org.joda.time.DateTimeField: long set(long,int)>(0L, 1850)
org.joda.time.tz.ZoneInfoCompiler.test : l10 = virtualinvoke $r38.<org.joda.time.DateTimeField: long set(long,int)>(0L, 1850) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : i11 = interfaceinvoke r3.<java.util.List: int size()>()
org.joda.time.tz.ZoneInfoCompiler.test : i11 = interfaceinvoke r3.<java.util.List: int size()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : i11 = i11 + -1
org.joda.time.tz.ZoneInfoCompiler.test : i11 = i11 + -1 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : if i11 < 0
org.joda.time.tz.ZoneInfoCompiler.test : if i11 < 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : l5 = virtualinvoke r1.<org.joda.time.DateTimeZone: long previousTransition(long)>(l9)
org.joda.time.tz.ZoneInfoCompiler.test : l5 = virtualinvoke r1.<org.joda.time.DateTimeZone: long previousTransition(long)>(l9) >>>>>>>> org.joda.time.tz.CachedDateTimeZone.previousTransition : $r1 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone>
org.joda.time.tz.CachedDateTimeZone.previousTransition : $r1 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.tz.CachedDateTimeZone.previousTransition : $l1 = virtualinvoke $r1.<org.joda.time.DateTimeZone: long previousTransition(long)>(l0)
org.joda.time.tz.CachedDateTimeZone.previousTransition : $l1 = virtualinvoke $r1.<org.joda.time.DateTimeZone: long previousTransition(long)>(l0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.previousTransition : r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.previousTransition : r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.previousTransition : i1 = staticinvoke <java.util.Arrays: int binarySearch(long[],long)>(r1, l0)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.previousTransition : i1 = staticinvoke <java.util.Arrays: int binarySearch(long[],long)>(r1, l0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.previousTransition : if i1 < 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.previousTransition : if i1 < 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.previousTransition : i5 = i1 ^ -1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.previousTransition : i5 = i1 ^ -1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.previousTransition : $i6 = lengthof r1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.previousTransition : $i6 = lengthof r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.previousTransition : if i5 >= $i6
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.previousTransition : if i5 >= $i6 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.previousTransition : $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.previousTransition : $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.previousTransition : if $r2 == null
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.previousTransition : if $r2 == null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.previousTransition : $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.previousTransition : $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.previousTransition : l10 = virtualinvoke $r3.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long previousTransition(long)>(l0)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.previousTransition : l10 = virtualinvoke $r3.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long previousTransition(long)>(l0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.previousTransition : l4 = l0 + 1L
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.previousTransition : l4 = l0 + 1L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.previousTransition : i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset>
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.previousTransition : i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.previousTransition : r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence>
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.previousTransition : r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.previousTransition : r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence>
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.previousTransition : r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.previousTransition : $i5 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>()
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.previousTransition : $i5 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.previousTransition : l2 = virtualinvoke r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long previous(long,int,int)>(l4, i1, $i5)
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.previousTransition : l2 = virtualinvoke r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long previous(long,int,int)>(l4, i1, $i5) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.previous : $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$OfYear iOfYear>
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.previous : $r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$OfYear iOfYear> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.previous : $l3 = virtualinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>(l0, i1, i2)
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.previous : $l3 = virtualinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long previous(long,int,int)>(l0, i1, i2) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : $c5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : $c5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : if $c5 != 119
org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : if $c5 != 119 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : i3 = i1 + i2
org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : i3 = i1 + i2 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : goto [?= $l7 = (long) i3]
org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : goto [?= $l7 = (long) i3] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : $l7 = (long) i3
org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : $l7 = (long) i3 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : l8 = l0 + $l7
org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : l8 = l0 + $l7 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : $i9 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMonthOfYear>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : $i9 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMonthOfYear> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : l4 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>(l8, $i9)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : l4 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>(l8, $i9) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : l10 = virtualinvoke $r3.<org.joda.time.DateTimeField: long set(long,int)>(l4, 0)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : l10 = virtualinvoke $r3.<org.joda.time.DateTimeField: long set(long,int)>(l4, 0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : $i11 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMillisOfDay>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : $i11 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMillisOfDay> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : l12 = virtualinvoke $r4.<org.joda.time.DateTimeField: long add(long,int)>(l10, $i11)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : l12 = virtualinvoke $r4.<org.joda.time.DateTimeField: long add(long,int)>(l10, $i11) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : l13 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>(r1, l12)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : l13 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>(r1, l12) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonthPrevious : l0 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>(r1, l0)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonthPrevious : l0 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonth(org.joda.time.Chronology,long)>(r1, l0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonthPrevious : goto [?= return l0]
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonthPrevious : goto [?= return l0] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonthPrevious : return l0
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfMonthPrevious : return l0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : $i14 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfWeek>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : $i14 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfWeek> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : if $i14 != 0
org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : if $i14 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : l13 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>(r1, l13)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : l13 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>(r1, l13) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : $b17 = l13 cmp l8
org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : $b17 = l13 cmp l8 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : if $b17 < 0
org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : if $b17 < 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : $l22 = (long) i3
org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : $l22 = (long) i3 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : $l23 = l13 - $l22
org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : $l23 = l13 - $l22 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : return $l23
org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : return $l23 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.previous : return $l3
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.previous : return $l3 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.previousTransition : $b6 = l4 cmp 0L
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.previousTransition : $b6 = l4 cmp 0L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.previousTransition : if $b6 >= 0
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.previousTransition : if $b6 >= 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.previousTransition : goto [?= $i8 = virtualinvoke r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>()]
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.previousTransition : goto [?= $i8 = virtualinvoke r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>()] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.previousTransition : $i8 = virtualinvoke r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>()
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.previousTransition : $i8 = virtualinvoke r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.previousTransition : l3 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long previous(long,int,int)>(l4, i1, $i8)
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.previousTransition : l3 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long previous(long,int,int)>(l4, i1, $i8) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.previousTransition : $b9 = l4 cmp 0L
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.previousTransition : $b9 = l4 cmp 0L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.previousTransition : if $b9 >= 0
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.previousTransition : if $b9 >= 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.previousTransition : goto [?= $b11 = l2 cmp l3]
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.previousTransition : goto [?= $b11 = l2 cmp l3] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.previousTransition : $b11 = l2 cmp l3
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.previousTransition : $b11 = l2 cmp l3 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.previousTransition : if $b11 <= 0
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.previousTransition : if $b11 <= 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.previousTransition : $l12 = l2
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.previousTransition : $l12 = l2 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.previousTransition : goto [?= $l13 = $l12 - 1L]
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.previousTransition : goto [?= $l13 = $l12 - 1L] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.previousTransition : $l13 = $l12 - 1L
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.previousTransition : $l13 = $l12 - 1L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.previousTransition : return $l13
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.previousTransition : return $l13 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.previousTransition : $b11 = l10 cmp l0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.previousTransition : $b11 = l10 cmp l0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.previousTransition : if $b11 >= 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.previousTransition : if $b11 >= 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.previousTransition : return l10
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.previousTransition : return l10 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.previousTransition : return $l1
org.joda.time.tz.CachedDateTimeZone.previousTransition : return $l1 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $b12 = l5 cmp l9
org.joda.time.tz.ZoneInfoCompiler.test : $b12 = l5 cmp l9 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : if $b12 == 0
org.joda.time.tz.ZoneInfoCompiler.test : if $b12 == 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $b13 = l5 cmp l10
org.joda.time.tz.ZoneInfoCompiler.test : $b13 = l5 cmp l10 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : if $b13 >= 0
org.joda.time.tz.ZoneInfoCompiler.test : if $b13 >= 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : l9 = l5
org.joda.time.tz.ZoneInfoCompiler.test : l9 = l5 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r39 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i11)
org.joda.time.tz.ZoneInfoCompiler.test : $r39 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i11) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $r40 = (java.lang.Long) $r39
org.joda.time.tz.ZoneInfoCompiler.test : $r40 = (java.lang.Long) $r39 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : l14 = virtualinvoke $r40.<java.lang.Long: long longValue()>()
org.joda.time.tz.ZoneInfoCompiler.test : l14 = virtualinvoke $r40.<java.lang.Long: long longValue()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $l15 = l14 - 1L
org.joda.time.tz.ZoneInfoCompiler.test : $l15 = l14 - 1L >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : $b16 = $l15 cmp l9
org.joda.time.tz.ZoneInfoCompiler.test : $b16 = $l15 cmp l9 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : if $b16 == 0
org.joda.time.tz.ZoneInfoCompiler.test : if $b16 == 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : goto [?= i11 = i11 + -1]
org.joda.time.tz.ZoneInfoCompiler.test : goto [?= i11 = i11 + -1] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : $r6 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : $r6 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : l18 = virtualinvoke $r6.<org.joda.time.DateTimeField: long add(long,int)>(l13, -1)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : l18 = virtualinvoke $r6.<org.joda.time.DateTimeField: long add(long,int)>(l13, -1) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : $r7 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : $r7 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : $i19 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMonthOfYear>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : $i19 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMonthOfYear> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : l20 = virtualinvoke $r7.<org.joda.time.DateTimeField: long set(long,int)>(l18, $i19)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : l20 = virtualinvoke $r7.<org.joda.time.DateTimeField: long set(long,int)>(l18, $i19) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : l21 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>(r1, l20)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : l21 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfMonthPrevious(org.joda.time.Chronology,long)>(r1, l20) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : l13 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>(r1, l21)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.previous : l13 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setDayOfWeek(org.joda.time.Chronology,long)>(r1, l21) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.previousTransition : $l12 = l3
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.previousTransition : $l12 = l3 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.previousTransition : if i5 <= 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.previousTransition : if i5 <= 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.previousTransition : $i7 = i5 - 1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.previousTransition : $i7 = i5 - 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.previousTransition : l2 = r1[$i7]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.previousTransition : l2 = r1[$i7] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.previousTransition : $b8 = l2 cmp -9223372036854775808L
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.previousTransition : $b8 = l2 cmp -9223372036854775808L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.previousTransition : if $b8 <= 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.previousTransition : if $b8 <= 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.previousTransition : $l9 = l2 - 1L
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.previousTransition : $l9 = l2 - 1L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.previousTransition : return $l9
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.previousTransition : return $l9 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.test : return 1
org.joda.time.tz.ZoneInfoCompiler.test : return 1 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : if $z2 == 0
org.joda.time.tz.ZoneInfoCompiler.compile : if $z2 == 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : $r36 = virtualinvoke r8.<org.joda.time.DateTimeZone: java.lang.String getID()>()
org.joda.time.tz.ZoneInfoCompiler.compile : $r36 = virtualinvoke r8.<org.joda.time.DateTimeZone: java.lang.String getID()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : interfaceinvoke r27.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r36, r8)
org.joda.time.tz.ZoneInfoCompiler.compile : interfaceinvoke r27.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r36, r8) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : $z3 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: boolean verbose()>()
org.joda.time.tz.ZoneInfoCompiler.compile : $z3 = staticinvoke <org.joda.time.tz.ZoneInfoCompiler: boolean verbose()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.verbose : $r0 = <org.joda.time.tz.ZoneInfoCompiler: java.lang.ThreadLocal cVerbose>
org.joda.time.tz.ZoneInfoCompiler.verbose : $r0 = <org.joda.time.tz.ZoneInfoCompiler: java.lang.ThreadLocal cVerbose> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.verbose : $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>()
org.joda.time.tz.ZoneInfoCompiler.verbose : $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.verbose : $r2 = (java.lang.Boolean) $r1
org.joda.time.tz.ZoneInfoCompiler.verbose : $r2 = (java.lang.Boolean) $r1 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.verbose : $z0 = virtualinvoke $r2.<java.lang.Boolean: boolean booleanValue()>()
org.joda.time.tz.ZoneInfoCompiler.verbose : $z0 = virtualinvoke $r2.<java.lang.Boolean: boolean booleanValue()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.verbose : return $z0
org.joda.time.tz.ZoneInfoCompiler.verbose : return $z0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : if $z3 == 0
org.joda.time.tz.ZoneInfoCompiler.compile : if $z3 == 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : $r44 = new java.io.File
org.joda.time.tz.ZoneInfoCompiler.compile : $r44 = new java.io.File >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : $r45 = virtualinvoke r8.<org.joda.time.DateTimeZone: java.lang.String getID()>()
org.joda.time.tz.ZoneInfoCompiler.compile : $r45 = virtualinvoke r8.<org.joda.time.DateTimeZone: java.lang.String getID()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : specialinvoke $r44.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r45)
org.joda.time.tz.ZoneInfoCompiler.compile : specialinvoke $r44.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, $r45) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : r9 = $r44
org.joda.time.tz.ZoneInfoCompiler.compile : r9 = $r44 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : $r46 = virtualinvoke r9.<java.io.File: java.io.File getParentFile()>()
org.joda.time.tz.ZoneInfoCompiler.compile : $r46 = virtualinvoke r9.<java.io.File: java.io.File getParentFile()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : $z4 = virtualinvoke $r46.<java.io.File: boolean exists()>()
org.joda.time.tz.ZoneInfoCompiler.compile : $z4 = virtualinvoke $r46.<java.io.File: boolean exists()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : if $z4 != 0
org.joda.time.tz.ZoneInfoCompiler.compile : if $z4 != 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : $r47 = virtualinvoke r9.<java.io.File: java.io.File getParentFile()>()
org.joda.time.tz.ZoneInfoCompiler.compile : $r47 = virtualinvoke r9.<java.io.File: java.io.File getParentFile()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : virtualinvoke $r47.<java.io.File: boolean mkdirs()>()
org.joda.time.tz.ZoneInfoCompiler.compile : virtualinvoke $r47.<java.io.File: boolean mkdirs()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : $r48 = new java.io.FileOutputStream
org.joda.time.tz.ZoneInfoCompiler.compile : $r48 = new java.io.FileOutputStream >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : specialinvoke $r48.<java.io.FileOutputStream: void <init>(java.io.File)>(r9)
org.joda.time.tz.ZoneInfoCompiler.compile : specialinvoke $r48.<java.io.FileOutputStream: void <init>(java.io.File)>(r9) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : r10 = $r48
org.joda.time.tz.ZoneInfoCompiler.compile : r10 = $r48 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : $r49 = r5.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iName>
org.joda.time.tz.ZoneInfoCompiler.compile : $r49 = r5.<org.joda.time.tz.ZoneInfoCompiler$Zone: java.lang.String iName> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : virtualinvoke r6.<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.OutputStream)>($r49, r10)
org.joda.time.tz.ZoneInfoCompiler.compile : virtualinvoke r6.<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.OutputStream)>($r49, r10) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeTo : $z0 = r2 instanceof java.io.DataOutput
org.joda.time.tz.DateTimeZoneBuilder.writeTo : $z0 = r2 instanceof java.io.DataOutput >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeTo : if $z0 == 0
org.joda.time.tz.DateTimeZoneBuilder.writeTo : if $z0 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeTo : $r4 = new java.io.DataOutputStream
org.joda.time.tz.DateTimeZoneBuilder.writeTo : $r4 = new java.io.DataOutputStream >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeTo : specialinvoke $r4.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>(r2)
org.joda.time.tz.DateTimeZoneBuilder.writeTo : specialinvoke $r4.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>(r2) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeTo : virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>(r1, $r4)
org.joda.time.tz.DateTimeZoneBuilder.writeTo : virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: void writeTo(java.lang.String,java.io.DataOutput)>(r1, $r4) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeTo : r3 = virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>(r1, 0)
org.joda.time.tz.DateTimeZoneBuilder.writeTo : r3 = virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone toDateTimeZone(java.lang.String,boolean)>(r1, 0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r75 = ""
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.create : $r75 = "" >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeTo : $z0 = r3 instanceof org.joda.time.tz.FixedDateTimeZone
org.joda.time.tz.DateTimeZoneBuilder.writeTo : $z0 = r3 instanceof org.joda.time.tz.FixedDateTimeZone >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeTo : $z1 = r3 instanceof org.joda.time.tz.CachedDateTimeZone
org.joda.time.tz.DateTimeZoneBuilder.writeTo : $z1 = r3 instanceof org.joda.time.tz.CachedDateTimeZone >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeTo : if $z1 == 0
org.joda.time.tz.DateTimeZoneBuilder.writeTo : if $z1 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeTo : interfaceinvoke r2.<java.io.DataOutput: void writeByte(int)>(67)
org.joda.time.tz.DateTimeZoneBuilder.writeTo : interfaceinvoke r2.<java.io.DataOutput: void writeByte(int)>(67) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeTo : $r5 = (org.joda.time.tz.CachedDateTimeZone) r3
org.joda.time.tz.DateTimeZoneBuilder.writeTo : $r5 = (org.joda.time.tz.CachedDateTimeZone) r3 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeTo : r3 = virtualinvoke $r5.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone getUncachedZone()>()
org.joda.time.tz.DateTimeZoneBuilder.writeTo : r3 = virtualinvoke $r5.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone getUncachedZone()>() >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getUncachedZone : $r1 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone>
org.joda.time.tz.CachedDateTimeZone.getUncachedZone : $r1 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getUncachedZone : return $r1
org.joda.time.tz.CachedDateTimeZone.getUncachedZone : return $r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeTo : goto [?= $r6 = (org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone) r3]
org.joda.time.tz.DateTimeZoneBuilder.writeTo : goto [?= $r6 = (org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone) r3] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeTo : $r6 = (org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone) r3
org.joda.time.tz.DateTimeZoneBuilder.writeTo : $r6 = (org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone) r3 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeTo : virtualinvoke $r6.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>(r2)
org.joda.time.tz.DateTimeZoneBuilder.writeTo : virtualinvoke $r6.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void writeTo(java.io.DataOutput)>(r2) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $r6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $r6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : i0 = lengthof $r6
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : i0 = lengthof $r6 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $r7 = new java.util.HashSet
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $r7 = new java.util.HashSet >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : specialinvoke $r7.<java.util.HashSet: void <init>()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : specialinvoke $r7.<java.util.HashSet: void <init>()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : r2 = $r7
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : r2 = $r7 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : i1 = 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : i1 = 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : if i1 >= i0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : if i1 >= i0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $r8 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String[] iNameKeys>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $r8 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String[] iNameKeys> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $r9 = $r8[i1]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $r9 = $r8[i1] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>($r9)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>($r9) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : i1 = i1 + 1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : i1 = i1 + 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : goto [?= (branch)]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : goto [?= (branch)] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : i4 = interfaceinvoke r2.<java.util.Set: int size()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : i4 = interfaceinvoke r2.<java.util.Set: int size()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : if i4 <= 65535
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : if i4 <= 65535 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : r3 = newarray (java.lang.String)[i4]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : r3 = newarray (java.lang.String)[i4] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : r4 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : r4 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : i2 = 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : i2 = 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : if $z1 == 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : if $z1 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $r11 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $r11 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $r12 = (java.lang.String) $r11
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $r12 = (java.lang.String) $r11 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : r3[i2] = $r12
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : r3[i2] = $r12 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : i2 = i2 + 1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : i2 = i2 + 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : goto [?= $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : goto [?= $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : interfaceinvoke r1.<java.io.DataOutput: void writeShort(int)>(i4)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : interfaceinvoke r1.<java.io.DataOutput: void writeShort(int)>(i4) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : i5 = 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : i5 = 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : if i5 >= i4
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : if i5 >= i4 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $r13 = r3[i5]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $r13 = r3[i5] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : interfaceinvoke r1.<java.io.DataOutput: void writeUTF(java.lang.String)>($r13)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : interfaceinvoke r1.<java.io.DataOutput: void writeUTF(java.lang.String)>($r13) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : i5 = i5 + 1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : i5 = i5 + 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : interfaceinvoke r1.<java.io.DataOutput: void writeInt(int)>(i0)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : interfaceinvoke r1.<java.io.DataOutput: void writeInt(int)>(i0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : i6 = 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : i6 = 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : if i6 >= i0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : if i6 >= i0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $r14 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $r14 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $l7 = $r14[i6]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $l7 = $r14[i6] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>(r1, $l7)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>(r1, $l7) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l2 = l0 % 1800000L
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l2 = l0 % 1800000L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $b3 = $l2 cmp 0L
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $b3 = $l2 cmp 0L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : if $b3 != 0
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : if $b3 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l9 = l0 % 60000L
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l9 = l0 % 60000L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $b10 = $l9 cmp 0L
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $b10 = $l9 cmp 0L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : if $b10 != 0
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : if $b10 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l18 = l0 % 1000L
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l18 = l0 % 1000L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $b19 = $l18 cmp 0L
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $b19 = $l18 cmp 0L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : if $b19 != 0
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : if $b19 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $b30 = l0 cmp 0L
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $b30 = l0 cmp 0L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : if $b30 >= 0
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : if $b30 >= 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $s31 = 255
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $s31 = 255 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : goto [?= interfaceinvoke r0.<java.io.DataOutput: void writeByte(int)>($s31)]
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : goto [?= interfaceinvoke r0.<java.io.DataOutput: void writeByte(int)>($s31)] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : interfaceinvoke r0.<java.io.DataOutput: void writeByte(int)>($s31)
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : interfaceinvoke r0.<java.io.DataOutput: void writeByte(int)>($s31) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : interfaceinvoke r0.<java.io.DataOutput: void writeLong(long)>(l0)
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : interfaceinvoke r0.<java.io.DataOutput: void writeLong(long)>(l0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $r15 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iWallOffsets>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $r15 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iWallOffsets> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $i8 = $r15[i6]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $i8 = $r15[i6] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $l9 = (long) $i8
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $l9 = (long) $i8 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>(r1, $l9)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>(r1, $l9) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : l20 = l0 / 1000L
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : l20 = l0 / 1000L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l21 = l20 << 26
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l21 = l20 << 26 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l22 = $l21 >> 26
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l22 = $l21 >> 26 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $b23 = $l22 cmp l20
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $b23 = $l22 cmp l20 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : if $b23 != 0
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : if $b23 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l24 = l20 >> 32
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l24 = l20 >> 32 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l25 = $l24 & 63L
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l25 = $l24 & 63L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $i26 = (int) $l25
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $i26 = (int) $l25 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $i27 = 128 | $i26
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $i27 = 128 | $i26 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : interfaceinvoke r0.<java.io.DataOutput: void writeByte(int)>($i27)
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : interfaceinvoke r0.<java.io.DataOutput: void writeByte(int)>($i27) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l28 = l20 & -1L
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l28 = l20 & -1L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $i29 = (int) $l28
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $i29 = (int) $l28 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : interfaceinvoke r0.<java.io.DataOutput: void writeInt(int)>($i29)
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : interfaceinvoke r0.<java.io.DataOutput: void writeInt(int)>($i29) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $r16 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iStandardOffsets>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $r16 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iStandardOffsets> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $i10 = $r16[i6]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $i10 = $r16[i6] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $l11 = (long) $i10
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $l11 = (long) $i10 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>(r1, $l11)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>(r1, $l11) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $r17 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String[] iNameKeys>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $r17 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String[] iNameKeys> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : r5 = $r17[i6]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : r5 = $r17[i6] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : i3 = 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : i3 = 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : if i3 >= i4
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : if i3 >= i4 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $r18 = r3[i3]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $r18 = r3[i3] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $z2 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>(r5)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $z2 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>(r5) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : if $z2 == 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : if $z2 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : if i4 >= 256
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : if i4 >= 256 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : interfaceinvoke r1.<java.io.DataOutput: void writeByte(int)>(i3)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : interfaceinvoke r1.<java.io.DataOutput: void writeByte(int)>(i3) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : goto [?= i6 = i6 + 1]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : goto [?= i6 = i6 + 1] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : i6 = i6 + 1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : i6 = i6 + 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : l1 = l0 / 1800000L
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : l1 = l0 / 1800000L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l4 = l1 << 58
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l4 = l1 << 58 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l5 = $l4 >> 58
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l5 = $l4 >> 58 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $b6 = $l5 cmp l1
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $b6 = $l5 cmp l1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : if $b6 != 0
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : if $b6 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l7 = l1 & 63L
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l7 = l1 & 63L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $i8 = (int) $l7
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $i8 = (int) $l7 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : interfaceinvoke r0.<java.io.DataOutput: void writeByte(int)>($i8)
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : interfaceinvoke r0.<java.io.DataOutput: void writeByte(int)>($i8) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : i3 = i3 + 1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : i3 = i3 + 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : l11 = l0 / 60000L
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : l11 = l0 / 60000L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l12 = l11 << 34
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l12 = l11 << 34 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l13 = $l12 >> 34
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l13 = $l12 >> 34 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $b14 = $l13 cmp l11
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $b14 = $l13 cmp l11 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : if $b14 != 0
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : if $b14 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l15 = l11 & 1073741823L
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l15 = l11 & 1073741823L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $i16 = (int) $l15
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $i16 = (int) $l15 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $i17 = 1073741824 | $i16
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $i17 = 1073741824 | $i16 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : interfaceinvoke r0.<java.io.DataOutput: void writeInt(int)>($i17)
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : interfaceinvoke r0.<java.io.DataOutput: void writeInt(int)>($i17) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $r20 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $r20 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : if $r20 == null
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : if $r20 == null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $z3 = 1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $z3 = 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : goto [?= interfaceinvoke r1.<java.io.DataOutput: void writeBoolean(boolean)>($z3)]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : goto [?= interfaceinvoke r1.<java.io.DataOutput: void writeBoolean(boolean)>($z3)] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : interfaceinvoke r1.<java.io.DataOutput: void writeBoolean(boolean)>($z3)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : interfaceinvoke r1.<java.io.DataOutput: void writeBoolean(boolean)>($z3) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $r21 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $r21 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : if $r21 == null
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : if $r21 == null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $r22 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : $r22 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : virtualinvoke $r22.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void writeTo(java.io.DataOutput)>(r1)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.writeTo : virtualinvoke $r22.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void writeTo(java.io.DataOutput)>(r1) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.writeTo : $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset>
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.writeTo : $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.writeTo : $l1 = (long) $i0
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.writeTo : $l1 = (long) $i0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.writeTo : staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>(r1, $l1)
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.writeTo : staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>(r1, $l1) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.writeTo : $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence>
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.writeTo : $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.writeTo : virtualinvoke $r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: void writeTo(java.io.DataOutput)>(r1)
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.writeTo : virtualinvoke $r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: void writeTo(java.io.DataOutput)>(r1) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.writeTo : $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$OfYear iOfYear>
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.writeTo : $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$OfYear iOfYear> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.writeTo : virtualinvoke $r2.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void writeTo(java.io.DataOutput)>(r1)
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.writeTo : virtualinvoke $r2.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void writeTo(java.io.DataOutput)>(r1) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.writeTo : $c0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.writeTo : $c0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.writeTo : interfaceinvoke r1.<java.io.DataOutput: void writeByte(int)>($c0)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.writeTo : interfaceinvoke r1.<java.io.DataOutput: void writeByte(int)>($c0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.writeTo : $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMonthOfYear>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.writeTo : $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMonthOfYear> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.writeTo : interfaceinvoke r1.<java.io.DataOutput: void writeByte(int)>($i1)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.writeTo : interfaceinvoke r1.<java.io.DataOutput: void writeByte(int)>($i1) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.writeTo : $i2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfMonth>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.writeTo : $i2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfMonth> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.writeTo : interfaceinvoke r1.<java.io.DataOutput: void writeByte(int)>($i2)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.writeTo : interfaceinvoke r1.<java.io.DataOutput: void writeByte(int)>($i2) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.writeTo : $i3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfWeek>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.writeTo : $i3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfWeek> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.writeTo : interfaceinvoke r1.<java.io.DataOutput: void writeByte(int)>($i3)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.writeTo : interfaceinvoke r1.<java.io.DataOutput: void writeByte(int)>($i3) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.writeTo : $z0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: boolean iAdvance>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.writeTo : $z0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: boolean iAdvance> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.writeTo : interfaceinvoke r1.<java.io.DataOutput: void writeBoolean(boolean)>($z0)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.writeTo : interfaceinvoke r1.<java.io.DataOutput: void writeBoolean(boolean)>($z0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.writeTo : $i4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMillisOfDay>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.writeTo : $i4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMillisOfDay> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.writeTo : $l5 = (long) $i4
org.joda.time.tz.DateTimeZoneBuilder$OfYear.writeTo : $l5 = (long) $i4 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.writeTo : staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>(r1, $l5)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.writeTo : staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>(r1, $l5) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.writeTo : $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String iNameKey>
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.writeTo : $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String iNameKey> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.writeTo : interfaceinvoke r1.<java.io.DataOutput: void writeUTF(java.lang.String)>($r3)
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.writeTo : interfaceinvoke r1.<java.io.DataOutput: void writeUTF(java.lang.String)>($r3) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.writeTo : $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int iSaveMillis>
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.writeTo : $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int iSaveMillis> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.writeTo : $l1 = (long) $i0
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.writeTo : $l1 = (long) $i0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.writeTo : staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>(r1, $l1)
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.writeTo : staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>(r1, $l1) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.writeTo : $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence>
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.writeTo : $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.writeTo : virtualinvoke $r3.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: void writeTo(java.io.DataOutput)>(r1)
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.writeTo : virtualinvoke $r3.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: void writeTo(java.io.DataOutput)>(r1) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : virtualinvoke r10.<java.io.OutputStream: void close()>()
org.joda.time.tz.ZoneInfoCompiler.compile : virtualinvoke r10.<java.io.OutputStream: void close()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : goto [?= $r51 = new java.io.FileInputStream]
org.joda.time.tz.ZoneInfoCompiler.compile : goto [?= $r51 = new java.io.FileInputStream] >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : $r51 = new java.io.FileInputStream
org.joda.time.tz.ZoneInfoCompiler.compile : $r51 = new java.io.FileInputStream >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : specialinvoke $r51.<java.io.FileInputStream: void <init>(java.io.File)>(r9)
org.joda.time.tz.ZoneInfoCompiler.compile : specialinvoke $r51.<java.io.FileInputStream: void <init>(java.io.File)>(r9) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : r52 = $r51
org.joda.time.tz.ZoneInfoCompiler.compile : r52 = $r51 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : $r53 = virtualinvoke r8.<org.joda.time.DateTimeZone: java.lang.String getID()>()
org.joda.time.tz.ZoneInfoCompiler.compile : $r53 = virtualinvoke r8.<org.joda.time.DateTimeZone: java.lang.String getID()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : r12 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.InputStream,java.lang.String)>(r52, $r53)
org.joda.time.tz.ZoneInfoCompiler.compile : r12 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.InputStream,java.lang.String)>(r52, $r53) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readFrom : $z0 = r0 instanceof java.io.DataInput
org.joda.time.tz.DateTimeZoneBuilder.readFrom : $z0 = r0 instanceof java.io.DataInput >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readFrom : if $z0 == 0
org.joda.time.tz.DateTimeZoneBuilder.readFrom : if $z0 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readFrom : $r4 = new java.io.DataInputStream
org.joda.time.tz.DateTimeZoneBuilder.readFrom : $r4 = new java.io.DataInputStream >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readFrom : specialinvoke $r4.<java.io.DataInputStream: void <init>(java.io.InputStream)>(r0)
org.joda.time.tz.DateTimeZoneBuilder.readFrom : specialinvoke $r4.<java.io.DataInputStream: void <init>(java.io.InputStream)>(r0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readFrom : $r5 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>($r4, r1)
org.joda.time.tz.DateTimeZoneBuilder.readFrom : $r5 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.DataInput,java.lang.String)>($r4, r1) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readFrom : $i0 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>()
org.joda.time.tz.DateTimeZoneBuilder.readFrom : $i0 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readFrom : lookupswitch($i0) {     case 67:
org.joda.time.tz.DateTimeZoneBuilder.readFrom : lookupswitch($i0) {     case 67: >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readFrom : $r6 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>(r0, r1)
org.joda.time.tz.DateTimeZoneBuilder.readFrom : $r6 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone readFrom(java.io.DataInput,java.lang.String)>(r0, r1) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : i0 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedShort()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : i0 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedShort()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : r2 = newarray (java.lang.String)[i0]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : r2 = newarray (java.lang.String)[i0] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : i1 = 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : i1 = 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : if i1 >= i0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : if i1 >= i0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : $r7 = interfaceinvoke r0.<java.io.DataInput: java.lang.String readUTF()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : $r7 = interfaceinvoke r0.<java.io.DataInput: java.lang.String readUTF()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : r2[i1] = $r7
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : r2[i1] = $r7 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : i1 = i1 + 1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : i1 = i1 + 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : goto [?= (branch)]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : goto [?= (branch)] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : i4 = interfaceinvoke r0.<java.io.DataInput: int readInt()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : i4 = interfaceinvoke r0.<java.io.DataInput: int readInt()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : r3 = newarray (long)[i4]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : r3 = newarray (long)[i4] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : r4 = newarray (int)[i4]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : r4 = newarray (int)[i4] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : r5 = newarray (int)[i4]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : r5 = newarray (int)[i4] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : r6 = newarray (java.lang.String)[i4]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : r6 = newarray (java.lang.String)[i4] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : i2 = 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : i2 = 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : if i2 >= i4
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : if i2 >= i4 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : $l5 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>(r0)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : $l5 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>(r0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readMillis : i0 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>()
org.joda.time.tz.DateTimeZoneBuilder.readMillis : i0 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readMillis : $i2 = i0 >> 6
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $i2 = i0 >> 6 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readMillis : tableswitch($i2) {     case 0:
org.joda.time.tz.DateTimeZoneBuilder.readMillis : tableswitch($i2) {     case 0: >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readMillis : $l37 = interfaceinvoke r0.<java.io.DataInput: long readLong()>()
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $l37 = interfaceinvoke r0.<java.io.DataInput: long readLong()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readMillis : return $l37
org.joda.time.tz.DateTimeZoneBuilder.readMillis : return $l37 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : r3[i2] = $l5
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : r3[i2] = $l5 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : $l6 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>(r0)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : $l6 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>(r0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readMillis : $l19 = (long) i0
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $l19 = (long) i0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readMillis : $l20 = $l19 << 58
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $l20 = $l19 << 58 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readMillis : l1 = $l20 >> 26
org.joda.time.tz.DateTimeZoneBuilder.readMillis : l1 = $l20 >> 26 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readMillis : $i21 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>()
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $i21 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readMillis : $i22 = $i21 << 24
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $i22 = $i21 << 24 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readMillis : $l23 = (long) $i22
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $l23 = (long) $i22 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readMillis : l24 = l1 | $l23
org.joda.time.tz.DateTimeZoneBuilder.readMillis : l24 = l1 | $l23 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readMillis : $i25 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>()
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $i25 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readMillis : $i26 = $i25 << 16
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $i26 = $i25 << 16 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readMillis : $l27 = (long) $i26
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $l27 = (long) $i26 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readMillis : l28 = l24 | $l27
org.joda.time.tz.DateTimeZoneBuilder.readMillis : l28 = l24 | $l27 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readMillis : $i29 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>()
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $i29 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readMillis : $i30 = $i29 << 8
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $i30 = $i29 << 8 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readMillis : $l31 = (long) $i30
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $l31 = (long) $i30 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readMillis : l32 = l28 | $l31
org.joda.time.tz.DateTimeZoneBuilder.readMillis : l32 = l28 | $l31 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readMillis : $i33 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>()
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $i33 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readMillis : $l34 = (long) $i33
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $l34 = (long) $i33 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readMillis : l35 = l32 | $l34
org.joda.time.tz.DateTimeZoneBuilder.readMillis : l35 = l32 | $l34 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readMillis : $l36 = l35 * 1000L
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $l36 = l35 * 1000L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readMillis : return $l36
org.joda.time.tz.DateTimeZoneBuilder.readMillis : return $l36 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : $i7 = (int) $l6
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : $i7 = (int) $l6 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : r4[i2] = $i7
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : r4[i2] = $i7 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : $l8 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>(r0)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : $l8 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>(r0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : $i9 = (int) $l8
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : $i9 = (int) $l8 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : r5[i2] = $i9
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : r5[i2] = $i9 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : if i0 >= 256
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : if i0 >= 256 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : i3 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : i3 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : goto [?= $r8 = r2[i3]]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : goto [?= $r8 = r2[i3]] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : $r8 = r2[i3]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : $r8 = r2[i3] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : r6[i2] = $r8
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : r6[i2] = $r8 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : goto [?= i2 = i2 + 1]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : goto [?= i2 = i2 + 1] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : i2 = i2 + 1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : i2 = i2 + 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readMillis : $i3 = i0 << 26
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $i3 = i0 << 26 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readMillis : i4 = $i3 >> 26
org.joda.time.tz.DateTimeZoneBuilder.readMillis : i4 = $i3 >> 26 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readMillis : $l5 = (long) i4
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $l5 = (long) i4 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readMillis : $l6 = $l5 * 1800000L
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $l6 = $l5 * 1800000L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readMillis : return $l6
org.joda.time.tz.DateTimeZoneBuilder.readMillis : return $l6 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readMillis : $i7 = i0 << 26
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $i7 = i0 << 26 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readMillis : i8 = $i7 >> 2
org.joda.time.tz.DateTimeZoneBuilder.readMillis : i8 = $i7 >> 2 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readMillis : $i9 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>()
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $i9 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readMillis : $i10 = $i9 << 16
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $i10 = $i9 << 16 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readMillis : i11 = i8 | $i10
org.joda.time.tz.DateTimeZoneBuilder.readMillis : i11 = i8 | $i10 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readMillis : $i12 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>()
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $i12 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readMillis : $i13 = $i12 << 8
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $i13 = $i12 << 8 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readMillis : i14 = i11 | $i13
org.joda.time.tz.DateTimeZoneBuilder.readMillis : i14 = i11 | $i13 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readMillis : $i15 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>()
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $i15 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readMillis : i16 = i14 | $i15
org.joda.time.tz.DateTimeZoneBuilder.readMillis : i16 = i14 | $i15 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readMillis : $l17 = (long) i16
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $l17 = (long) i16 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readMillis : $l18 = $l17 * 60000L
org.joda.time.tz.DateTimeZoneBuilder.readMillis : $l18 = $l17 * 60000L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readMillis : return $l18
org.joda.time.tz.DateTimeZoneBuilder.readMillis : return $l18 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : r12 = null
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : r12 = null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : $z0 = interfaceinvoke r0.<java.io.DataInput: boolean readBoolean()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : $z0 = interfaceinvoke r0.<java.io.DataInput: boolean readBoolean()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : if $z0 == 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : if $z0 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : r12 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone readFrom(java.io.DataInput,java.lang.String)>(r0, r1)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : r12 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone readFrom(java.io.DataInput,java.lang.String)>(r0, r1) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.readFrom : $r2 = new org.joda.time.tz.DateTimeZoneBuilder$DSTZone
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.readFrom : $r2 = new org.joda.time.tz.DateTimeZoneBuilder$DSTZone >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.readFrom : $l0 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>(r0)
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.readFrom : $l0 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>(r0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.readFrom : $i1 = (int) $l0
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.readFrom : $i1 = (int) $l0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.readFrom : $r3 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence readFrom(java.io.DataInput)>(r0)
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.readFrom : $r3 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence readFrom(java.io.DataInput)>(r0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.readFrom : $r1 = new org.joda.time.tz.DateTimeZoneBuilder$Recurrence
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.readFrom : $r1 = new org.joda.time.tz.DateTimeZoneBuilder$Recurrence >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.readFrom : $r2 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder$OfYear: org.joda.time.tz.DateTimeZoneBuilder$OfYear readFrom(java.io.DataInput)>(r0)
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.readFrom : $r2 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder$OfYear: org.joda.time.tz.DateTimeZoneBuilder$OfYear readFrom(java.io.DataInput)>(r0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.readFrom : $r1 = new org.joda.time.tz.DateTimeZoneBuilder$OfYear
org.joda.time.tz.DateTimeZoneBuilder$OfYear.readFrom : $r1 = new org.joda.time.tz.DateTimeZoneBuilder$OfYear >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.readFrom : $i0 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.readFrom : $i0 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.readFrom : $c1 = (char) $i0
org.joda.time.tz.DateTimeZoneBuilder$OfYear.readFrom : $c1 = (char) $i0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.readFrom : $i2 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.readFrom : $i2 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.readFrom : $b3 = interfaceinvoke r0.<java.io.DataInput: byte readByte()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.readFrom : $b3 = interfaceinvoke r0.<java.io.DataInput: byte readByte()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.readFrom : $i4 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.readFrom : $i4 = interfaceinvoke r0.<java.io.DataInput: int readUnsignedByte()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.readFrom : $z0 = interfaceinvoke r0.<java.io.DataInput: boolean readBoolean()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.readFrom : $z0 = interfaceinvoke r0.<java.io.DataInput: boolean readBoolean()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.readFrom : $l5 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>(r0)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.readFrom : $l5 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>(r0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.readFrom : $i6 = (int) $l5
org.joda.time.tz.DateTimeZoneBuilder$OfYear.readFrom : $i6 = (int) $l5 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.readFrom : specialinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void <init>(char,int,int,int,boolean,int)>($c1, $i2, $b3, $i4, $z0, $i6)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.readFrom : specialinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: void <init>(char,int,int,int,boolean,int)>($c1, $i2, $b3, $i4, $z0, $i6) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.readFrom : return $r1
org.joda.time.tz.DateTimeZoneBuilder$OfYear.readFrom : return $r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.readFrom : $r3 = interfaceinvoke r0.<java.io.DataInput: java.lang.String readUTF()>()
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.readFrom : $r3 = interfaceinvoke r0.<java.io.DataInput: java.lang.String readUTF()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.readFrom : $l0 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>(r0)
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.readFrom : $l0 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>(r0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.readFrom : $i1 = (int) $l0
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.readFrom : $i1 = (int) $l0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.readFrom : specialinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: void <init>(org.joda.time.tz.DateTimeZoneBuilder$OfYear,java.lang.String,int)>($r2, $r3, $i1)
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.readFrom : specialinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: void <init>(org.joda.time.tz.DateTimeZoneBuilder$OfYear,java.lang.String,int)>($r2, $r3, $i1) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.readFrom : return $r1
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.readFrom : return $r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.readFrom : $r4 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence readFrom(java.io.DataInput)>(r0)
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.readFrom : $r4 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence readFrom(java.io.DataInput)>(r0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.readFrom : specialinvoke $r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void <init>(java.lang.String,int,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,org.joda.time.tz.DateTimeZoneBuilder$Recurrence)>(r1, $i1, $r3, $r4)
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.readFrom : specialinvoke $r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void <init>(java.lang.String,int,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,org.joda.time.tz.DateTimeZoneBuilder$Recurrence)>(r1, $i1, $r3, $r4) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.readFrom : return $r2
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.readFrom : return $r2 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : $r13 = new org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : $r13 = new org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : specialinvoke $r13.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void <init>(java.lang.String,long[],int[],int[],java.lang.String[],org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>(r1, r3, r4, r5, r6, r12)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : specialinvoke $r13.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: void <init>(java.lang.String,long[],int[],int[],java.lang.String[],org.joda.time.tz.DateTimeZoneBuilder$DSTZone)>(r1, r3, r4, r5, r6, r12) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : return $r13
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.readFrom : return $r13 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readFrom : $r7 = staticinvoke <org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone forZone(org.joda.time.DateTimeZone)>($r6)
org.joda.time.tz.DateTimeZoneBuilder.readFrom : $r7 = staticinvoke <org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone forZone(org.joda.time.DateTimeZone)>($r6) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readFrom : return $r7
org.joda.time.tz.DateTimeZoneBuilder.readFrom : return $r7 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.readFrom : return $r5
org.joda.time.tz.DateTimeZoneBuilder.readFrom : return $r5 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : virtualinvoke r52.<java.io.InputStream: void close()>()
org.joda.time.tz.ZoneInfoCompiler.compile : virtualinvoke r52.<java.io.InputStream: void close()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : $z6 = virtualinvoke r7.<org.joda.time.DateTimeZone: boolean equals(java.lang.Object)>(r12)
org.joda.time.tz.ZoneInfoCompiler.compile : $z6 = virtualinvoke r7.<org.joda.time.DateTimeZone: boolean equals(java.lang.Object)>(r12) >>>>>>>> org.joda.time.tz.CachedDateTimeZone.equals : if r0 != r1
org.joda.time.tz.CachedDateTimeZone.equals : if r0 != r1 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.equals : $z0 = r1 instanceof org.joda.time.tz.CachedDateTimeZone
org.joda.time.tz.CachedDateTimeZone.equals : $z0 = r1 instanceof org.joda.time.tz.CachedDateTimeZone >>>>>>>> org.joda.time.tz.CachedDateTimeZone.equals : if $z0 == 0
org.joda.time.tz.CachedDateTimeZone.equals : if $z0 == 0 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.equals : $r2 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone>
org.joda.time.tz.CachedDateTimeZone.equals : $r2 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.tz.CachedDateTimeZone.equals : $r3 = (org.joda.time.tz.CachedDateTimeZone) r1
org.joda.time.tz.CachedDateTimeZone.equals : $r3 = (org.joda.time.tz.CachedDateTimeZone) r1 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.equals : $r4 = $r3.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone>
org.joda.time.tz.CachedDateTimeZone.equals : $r4 = $r3.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.tz.CachedDateTimeZone.equals : $z1 = virtualinvoke $r2.<org.joda.time.DateTimeZone: boolean equals(java.lang.Object)>($r4)
org.joda.time.tz.CachedDateTimeZone.equals : $z1 = virtualinvoke $r2.<org.joda.time.DateTimeZone: boolean equals(java.lang.Object)>($r4) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if r0 != r1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if r0 != r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z0 = r1 instanceof org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z0 = r1 instanceof org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if $z0 == 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if $z0 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : r2 = (org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone) r1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : r2 = (org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone) r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r3 = virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getID()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r3 = virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getID()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r4 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getID()>()
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r4 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String getID()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if $z1 == 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if $z1 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r6 = r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r6 = r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z2 = staticinvoke <java.util.Arrays: boolean equals(long[],long[])>($r5, $r6)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z2 = staticinvoke <java.util.Arrays: boolean equals(long[],long[])>($r5, $r6) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if $z2 == 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if $z2 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r7 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String[] iNameKeys>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r7 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String[] iNameKeys> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r8 = r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String[] iNameKeys>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r8 = r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: java.lang.String[] iNameKeys> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z3 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r7, $r8)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z3 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r7, $r8) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if $z3 == 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if $z3 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r9 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iWallOffsets>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r9 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iWallOffsets> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r10 = r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iWallOffsets>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r10 = r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iWallOffsets> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z4 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r9, $r10)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z4 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r9, $r10) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if $z4 == 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if $z4 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r11 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iStandardOffsets>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r11 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iStandardOffsets> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r12 = r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iStandardOffsets>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r12 = r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iStandardOffsets> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z5 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r11, $r12)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z5 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r11, $r12) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if $z5 == 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if $z5 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r13 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r13 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if $r13 != null
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if $r13 != null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r15 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r15 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r16 = r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $r16 = r2.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z6 = virtualinvoke $r15.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)>($r16)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z6 = virtualinvoke $r15.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)>($r16) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : if r0 != r1
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : if r0 != r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $z0 = r1 instanceof org.joda.time.tz.DateTimeZoneBuilder$DSTZone
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $z0 = r1 instanceof org.joda.time.tz.DateTimeZoneBuilder$DSTZone >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : if $z0 == 0
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : if $z0 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : r2 = (org.joda.time.tz.DateTimeZoneBuilder$DSTZone) r1
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : r2 = (org.joda.time.tz.DateTimeZoneBuilder$DSTZone) r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $r3 = virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getID()>()
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $r3 = virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getID()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $r4 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getID()>()
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $r4 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getID()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4)
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : if $z1 == 0
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : if $z1 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset>
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $i1 = r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset>
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $i1 = r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : if $i0 != $i1
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : if $i0 != $i1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $r5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence>
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $r5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $r6 = r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence>
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $r6 = r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $z2 = virtualinvoke $r5.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: boolean equals(java.lang.Object)>($r6)
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $z2 = virtualinvoke $r5.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: boolean equals(java.lang.Object)>($r6) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : if r0 != r1
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : if r0 != r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $z0 = r1 instanceof org.joda.time.tz.DateTimeZoneBuilder$Recurrence
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $z0 = r1 instanceof org.joda.time.tz.DateTimeZoneBuilder$Recurrence >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : if $z0 == 0
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : if $z0 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : r2 = (org.joda.time.tz.DateTimeZoneBuilder$Recurrence) r1
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : r2 = (org.joda.time.tz.DateTimeZoneBuilder$Recurrence) r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int iSaveMillis>
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int iSaveMillis> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $i1 = r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int iSaveMillis>
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $i1 = r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int iSaveMillis> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : if $i0 != $i1
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : if $i0 != $i1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String iNameKey>
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String iNameKey> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $r4 = r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String iNameKey>
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $r4 = r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String iNameKey> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4)
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : if $z1 == 0
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : if $z1 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $r5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$OfYear iOfYear>
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $r5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$OfYear iOfYear> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $r6 = r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$OfYear iOfYear>
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $r6 = r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$OfYear iOfYear> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $z2 = virtualinvoke $r5.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: boolean equals(java.lang.Object)>($r6)
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $z2 = virtualinvoke $r5.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: boolean equals(java.lang.Object)>($r6) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : if r0 != r1
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : if r0 != r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $z0 = r1 instanceof org.joda.time.tz.DateTimeZoneBuilder$OfYear
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $z0 = r1 instanceof org.joda.time.tz.DateTimeZoneBuilder$OfYear >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : if $z0 == 0
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : if $z0 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : r2 = (org.joda.time.tz.DateTimeZoneBuilder$OfYear) r1
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : r2 = (org.joda.time.tz.DateTimeZoneBuilder$OfYear) r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $c0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $c0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $c1 = r2.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $c1 = r2.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: char iMode> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : if $c0 != $c1
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : if $c0 != $c1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $i2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMonthOfYear>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $i2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMonthOfYear> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $i3 = r2.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMonthOfYear>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $i3 = r2.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMonthOfYear> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : if $i2 != $i3
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : if $i2 != $i3 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $i4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfMonth>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $i4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfMonth> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $i5 = r2.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfMonth>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $i5 = r2.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfMonth> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : if $i4 != $i5
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : if $i4 != $i5 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $i6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfWeek>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $i6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfWeek> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $i7 = r2.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfWeek>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $i7 = r2.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfWeek> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : if $i6 != $i7
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : if $i6 != $i7 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $z1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: boolean iAdvance>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $z1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: boolean iAdvance> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $z2 = r2.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: boolean iAdvance>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $z2 = r2.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: boolean iAdvance> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : if $z1 != $z2
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : if $z1 != $z2 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $i8 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMillisOfDay>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $i8 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMillisOfDay> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $i9 = r2.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMillisOfDay>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $i9 = r2.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iMillisOfDay> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : if $i8 != $i9
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : if $i8 != $i9 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $z3 = 1
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : $z3 = 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : goto [?= return $z3]
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : goto [?= return $z3] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : return $z3
org.joda.time.tz.DateTimeZoneBuilder$OfYear.equals : return $z3 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : if $z2 == 0
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : if $z2 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $z3 = 1
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : $z3 = 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : goto [?= return $z3]
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : goto [?= return $z3] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : return $z3
org.joda.time.tz.DateTimeZoneBuilder$Recurrence.equals : return $z3 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : if $z2 == 0
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : if $z2 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $r7 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence>
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $r7 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $r8 = r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence>
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $r8 = r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $z3 = virtualinvoke $r7.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: boolean equals(java.lang.Object)>($r8)
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $z3 = virtualinvoke $r7.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: boolean equals(java.lang.Object)>($r8) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : if $z3 == 0
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : if $z3 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $z4 = 1
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : $z4 = 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : goto [?= return $z4]
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : goto [?= return $z4] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : return $z4
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.equals : return $z4 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if $z6 == 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : if $z6 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z7 = 1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : $z7 = 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : goto [?= return $z7]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : goto [?= return $z7] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : return $z7
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.equals : return $z7 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.equals : return $z1
org.joda.time.tz.CachedDateTimeZone.equals : return $z1 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : if $z6 != 0
org.joda.time.tz.ZoneInfoCompiler.compile : if $z6 != 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : i2 = i2 + 1
org.joda.time.tz.ZoneInfoCompiler.compile : i2 = i2 + 1 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : goto [?= $r29 = r0.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iZones>]
org.joda.time.tz.ZoneInfoCompiler.compile : goto [?= $r29 = r0.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iZones>] >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : i4 = 0
org.joda.time.tz.ZoneInfoCompiler.compile : i4 = 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : if i4 >= 2
org.joda.time.tz.ZoneInfoCompiler.compile : if i4 >= 2 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : i5 = 0
org.joda.time.tz.ZoneInfoCompiler.compile : i5 = 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : $r61 = r0.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iLinks>
org.joda.time.tz.ZoneInfoCompiler.compile : $r61 = r0.<org.joda.time.tz.ZoneInfoCompiler: java.util.List iLinks> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : $i6 = interfaceinvoke $r61.<java.util.List: int size()>()
org.joda.time.tz.ZoneInfoCompiler.compile : $i6 = interfaceinvoke $r61.<java.util.List: int size()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : if i5 >= $i6
org.joda.time.tz.ZoneInfoCompiler.compile : if i5 >= $i6 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : i4 = i4 + 1
org.joda.time.tz.ZoneInfoCompiler.compile : i4 = i4 + 1 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : goto [?= (branch)]
org.joda.time.tz.ZoneInfoCompiler.compile : goto [?= (branch)] >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : $r79 = <java.lang.System: java.io.PrintStream out>
org.joda.time.tz.ZoneInfoCompiler.compile : $r79 = <java.lang.System: java.io.PrintStream out> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : virtualinvoke $r79.<java.io.PrintStream: void println(java.lang.String)>("Writing ZoneInfoMap")
org.joda.time.tz.ZoneInfoCompiler.compile : virtualinvoke $r79.<java.io.PrintStream: void println(java.lang.String)>("Writing ZoneInfoMap") >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : $r80 = new java.io.File
org.joda.time.tz.ZoneInfoCompiler.compile : $r80 = new java.io.File >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : specialinvoke $r80.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "ZoneInfoMap")
org.joda.time.tz.ZoneInfoCompiler.compile : specialinvoke $r80.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, "ZoneInfoMap") >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : r81 = $r80
org.joda.time.tz.ZoneInfoCompiler.compile : r81 = $r80 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : $r82 = virtualinvoke r81.<java.io.File: java.io.File getParentFile()>()
org.joda.time.tz.ZoneInfoCompiler.compile : $r82 = virtualinvoke r81.<java.io.File: java.io.File getParentFile()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : $z7 = virtualinvoke $r82.<java.io.File: boolean exists()>()
org.joda.time.tz.ZoneInfoCompiler.compile : $z7 = virtualinvoke $r82.<java.io.File: boolean exists()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : if $z7 != 0
org.joda.time.tz.ZoneInfoCompiler.compile : if $z7 != 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : $r84 = new java.io.FileOutputStream
org.joda.time.tz.ZoneInfoCompiler.compile : $r84 = new java.io.FileOutputStream >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : specialinvoke $r84.<java.io.FileOutputStream: void <init>(java.io.File)>(r81)
org.joda.time.tz.ZoneInfoCompiler.compile : specialinvoke $r84.<java.io.FileOutputStream: void <init>(java.io.File)>(r81) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : r85 = $r84
org.joda.time.tz.ZoneInfoCompiler.compile : r85 = $r84 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : $r86 = new java.io.DataOutputStream
org.joda.time.tz.ZoneInfoCompiler.compile : $r86 = new java.io.DataOutputStream >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : specialinvoke $r86.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>(r85)
org.joda.time.tz.ZoneInfoCompiler.compile : specialinvoke $r86.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>(r85) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : r87 = $r86
org.joda.time.tz.ZoneInfoCompiler.compile : r87 = $r86 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : $r88 = new java.util.TreeMap
org.joda.time.tz.ZoneInfoCompiler.compile : $r88 = new java.util.TreeMap >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : $r89 = <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER>
org.joda.time.tz.ZoneInfoCompiler.compile : $r89 = <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER> >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : specialinvoke $r88.<java.util.TreeMap: void <init>(java.util.Comparator)>($r89)
org.joda.time.tz.ZoneInfoCompiler.compile : specialinvoke $r88.<java.util.TreeMap: void <init>(java.util.Comparator)>($r89) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : r90 = $r88
org.joda.time.tz.ZoneInfoCompiler.compile : r90 = $r88 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : interfaceinvoke r90.<java.util.Map: void putAll(java.util.Map)>(r27)
org.joda.time.tz.ZoneInfoCompiler.compile : interfaceinvoke r90.<java.util.Map: void putAll(java.util.Map)>(r27) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : staticinvoke <org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>(r87, r90)
org.joda.time.tz.ZoneInfoCompiler.compile : staticinvoke <org.joda.time.tz.ZoneInfoCompiler: void writeZoneInfoMap(java.io.DataOutputStream,java.util.Map)>(r87, r90) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $r2 = new java.util.HashMap
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $r2 = new java.util.HashMap >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $i1 = interfaceinvoke r1.<java.util.Map: int size()>()
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $i1 = interfaceinvoke r1.<java.util.Map: int size()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : specialinvoke $r2.<java.util.HashMap: void <init>(int)>($i1)
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : specialinvoke $r2.<java.util.HashMap: void <init>(int)>($i1) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : r3 = $r2
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : r3 = $r2 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $r9 = new java.util.TreeMap
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $r9 = new java.util.TreeMap >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : specialinvoke $r9.<java.util.TreeMap: void <init>()>()
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : specialinvoke $r9.<java.util.TreeMap: void <init>()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : r4 = $r9
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : r4 = $r9 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : s0 = 0
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : s0 = 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $r10 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>()
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $r10 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : r5 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>()
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : r5 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : if $z0 == 0
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : if $z0 == 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $r11 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>()
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $r11 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : r6 = (java.util.Map$Entry) $r11
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : r6 = (java.util.Map$Entry) $r11 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $r12 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>()
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $r12 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : r7 = (java.lang.String) $r12
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : r7 = (java.lang.String) $r12 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $z1 = interfaceinvoke r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r7)
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $z1 = interfaceinvoke r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r7) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : if $z1 != 0
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : if $z1 != 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : r8 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(s0)
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : r8 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(s0) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, r8)
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, r8) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : virtualinvoke r4.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r7)
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : virtualinvoke r4.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r7) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $i2 = s0 + 1
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $i2 = s0 + 1 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : s0 = (short) $i2
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : s0 = (short) $i2 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : if s0 != 0
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : if s0 != 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $r16 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>()
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $r16 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $r17 = (org.joda.time.DateTimeZone) $r16
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $r17 = (org.joda.time.DateTimeZone) $r16 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : r18 = virtualinvoke $r17.<org.joda.time.DateTimeZone: java.lang.String getID()>()
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : r18 = virtualinvoke $r17.<org.joda.time.DateTimeZone: java.lang.String getID()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $z2 = interfaceinvoke r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r18)
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $z2 = interfaceinvoke r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r18) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : if $z2 != 0
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : if $z2 != 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : goto [?= $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : goto [?= $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $i4 = virtualinvoke r4.<java.util.TreeMap: int size()>()
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $i4 = virtualinvoke r4.<java.util.TreeMap: int size()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : virtualinvoke r0.<java.io.DataOutputStream: void writeShort(int)>($i4)
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : virtualinvoke r0.<java.io.DataOutputStream: void writeShort(int)>($i4) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $r23 = virtualinvoke r4.<java.util.TreeMap: java.util.Collection values()>()
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $r23 = virtualinvoke r4.<java.util.TreeMap: java.util.Collection values()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : r24 = interfaceinvoke $r23.<java.util.Collection: java.util.Iterator iterator()>()
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : r24 = interfaceinvoke $r23.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $z3 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>()
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $z3 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : if $z3 == 0
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : if $z3 == 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $r25 = interfaceinvoke r24.<java.util.Iterator: java.lang.Object next()>()
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $r25 = interfaceinvoke r24.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : r26 = (java.lang.String) $r25
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : r26 = (java.lang.String) $r25 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : virtualinvoke r0.<java.io.DataOutputStream: void writeUTF(java.lang.String)>(r26)
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : virtualinvoke r0.<java.io.DataOutputStream: void writeUTF(java.lang.String)>(r26) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : goto [?= $z3 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>()]
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : goto [?= $z3 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $i5 = interfaceinvoke r1.<java.util.Map: int size()>()
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $i5 = interfaceinvoke r1.<java.util.Map: int size()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : virtualinvoke r0.<java.io.DataOutputStream: void writeShort(int)>($i5)
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : virtualinvoke r0.<java.io.DataOutputStream: void writeShort(int)>($i5) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $r27 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>()
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $r27 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : r28 = interfaceinvoke $r27.<java.util.Set: java.util.Iterator iterator()>()
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : r28 = interfaceinvoke $r27.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $z4 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>()
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $z4 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : if $z4 == 0
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : if $z4 == 0 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $r29 = interfaceinvoke r28.<java.util.Iterator: java.lang.Object next()>()
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $r29 = interfaceinvoke r28.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : r30 = (java.util.Map$Entry) $r29
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : r30 = (java.util.Map$Entry) $r29 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $r31 = interfaceinvoke r30.<java.util.Map$Entry: java.lang.Object getKey()>()
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $r31 = interfaceinvoke r30.<java.util.Map$Entry: java.lang.Object getKey()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : r32 = (java.lang.String) $r31
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : r32 = (java.lang.String) $r31 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $r33 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r32)
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $r33 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r32) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $r34 = (java.lang.Short) $r33
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $r34 = (java.lang.Short) $r33 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $s6 = virtualinvoke $r34.<java.lang.Short: short shortValue()>()
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $s6 = virtualinvoke $r34.<java.lang.Short: short shortValue()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : virtualinvoke r0.<java.io.DataOutputStream: void writeShort(int)>($s6)
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : virtualinvoke r0.<java.io.DataOutputStream: void writeShort(int)>($s6) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $r35 = interfaceinvoke r30.<java.util.Map$Entry: java.lang.Object getValue()>()
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $r35 = interfaceinvoke r30.<java.util.Map$Entry: java.lang.Object getValue()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $r36 = (org.joda.time.DateTimeZone) $r35
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $r36 = (org.joda.time.DateTimeZone) $r35 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : r37 = virtualinvoke $r36.<org.joda.time.DateTimeZone: java.lang.String getID()>()
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : r37 = virtualinvoke $r36.<org.joda.time.DateTimeZone: java.lang.String getID()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $r38 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r37)
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $r38 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r37) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $r39 = (java.lang.Short) $r38
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $r39 = (java.lang.Short) $r38 >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $s7 = virtualinvoke $r39.<java.lang.Short: short shortValue()>()
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : $s7 = virtualinvoke $r39.<java.lang.Short: short shortValue()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : virtualinvoke r0.<java.io.DataOutputStream: void writeShort(int)>($s7)
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : virtualinvoke r0.<java.io.DataOutputStream: void writeShort(int)>($s7) >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : goto [?= $z4 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>()]
org.joda.time.tz.ZoneInfoCompiler.writeZoneInfoMap : goto [?= $z4 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : virtualinvoke r87.<java.io.DataOutputStream: void close()>()
org.joda.time.tz.ZoneInfoCompiler.compile : virtualinvoke r87.<java.io.DataOutputStream: void close()>() >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : goto [?= return r27]
org.joda.time.tz.ZoneInfoCompiler.compile : goto [?= return r27] >>>>>>>> org.joda.time.tz.ZoneInfoCompiler.compile : return r27
org.joda.time.tz.ZoneInfoCompiler.compile : return r27 >>>>>>>> org.joda.time.tz.ZoneInfoProvider.openResource : $r6 = r0.<org.joda.time.tz.ZoneInfoProvider: java.io.File iFileDir>
org.joda.time.tz.ZoneInfoProvider.openResource : $r6 = r0.<org.joda.time.tz.ZoneInfoProvider: java.io.File iFileDir> >>>>>>>> org.joda.time.tz.ZoneInfoProvider.openResource : if $r6 == null
org.joda.time.tz.ZoneInfoProvider.openResource : if $r6 == null >>>>>>>> org.joda.time.tz.ZoneInfoProvider.openResource : $r7 = new java.io.FileInputStream
org.joda.time.tz.ZoneInfoProvider.openResource : $r7 = new java.io.FileInputStream >>>>>>>> org.joda.time.tz.ZoneInfoProvider.openResource : $r2 = new java.io.File
org.joda.time.tz.ZoneInfoProvider.openResource : $r2 = new java.io.File >>>>>>>> org.joda.time.tz.ZoneInfoProvider.openResource : $r8 = r0.<org.joda.time.tz.ZoneInfoProvider: java.io.File iFileDir>
org.joda.time.tz.ZoneInfoProvider.openResource : $r8 = r0.<org.joda.time.tz.ZoneInfoProvider: java.io.File iFileDir> >>>>>>>> org.joda.time.tz.ZoneInfoProvider.openResource : specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r8, r1)
org.joda.time.tz.ZoneInfoProvider.openResource : specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r8, r1) >>>>>>>> org.joda.time.tz.ZoneInfoProvider.openResource : specialinvoke $r7.<java.io.FileInputStream: void <init>(java.io.File)>($r2)
org.joda.time.tz.ZoneInfoProvider.openResource : specialinvoke $r7.<java.io.FileInputStream: void <init>(java.io.File)>($r2) >>>>>>>> org.joda.time.tz.ZoneInfoProvider.openResource : r3 = $r7
org.joda.time.tz.ZoneInfoProvider.openResource : r3 = $r7 >>>>>>>> org.joda.time.tz.ZoneInfoProvider.openResource : goto [?= return r3]
org.joda.time.tz.ZoneInfoProvider.openResource : goto [?= return r3] >>>>>>>> org.joda.time.tz.ZoneInfoProvider.openResource : return r3
org.joda.time.tz.ZoneInfoProvider.openResource : return r3 >>>>>>>> org.joda.time.tz.ZoneInfoProvider.loadZoneInfoMap : $r1 = new java.util.concurrent.ConcurrentHashMap
org.joda.time.tz.ZoneInfoProvider.loadZoneInfoMap : $r1 = new java.util.concurrent.ConcurrentHashMap >>>>>>>> org.joda.time.tz.ZoneInfoProvider.loadZoneInfoMap : specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>()
org.joda.time.tz.ZoneInfoProvider.loadZoneInfoMap : specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>() >>>>>>>> org.joda.time.tz.ZoneInfoProvider.loadZoneInfoMap : r2 = $r1
org.joda.time.tz.ZoneInfoProvider.loadZoneInfoMap : r2 = $r1 >>>>>>>> org.joda.time.tz.ZoneInfoProvider.loadZoneInfoMap : $r8 = new java.io.DataInputStream
org.joda.time.tz.ZoneInfoProvider.loadZoneInfoMap : $r8 = new java.io.DataInputStream >>>>>>>> org.joda.time.tz.ZoneInfoProvider.loadZoneInfoMap : specialinvoke $r8.<java.io.DataInputStream: void <init>(java.io.InputStream)>(r0)
org.joda.time.tz.ZoneInfoProvider.loadZoneInfoMap : specialinvoke $r8.<java.io.DataInputStream: void <init>(java.io.InputStream)>(r0) >>>>>>>> org.joda.time.tz.ZoneInfoProvider.loadZoneInfoMap : r3 = $r8
org.joda.time.tz.ZoneInfoProvider.loadZoneInfoMap : r3 = $r8 >>>>>>>> org.joda.time.tz.ZoneInfoProvider.loadZoneInfoMap : staticinvoke <org.joda.time.tz.ZoneInfoProvider: void readZoneInfoMap(java.io.DataInputStream,java.util.Map)>(r3, r2)
org.joda.time.tz.ZoneInfoProvider.loadZoneInfoMap : staticinvoke <org.joda.time.tz.ZoneInfoProvider: void readZoneInfoMap(java.io.DataInputStream,java.util.Map)>(r3, r2) >>>>>>>> org.joda.time.tz.ZoneInfoProvider.readZoneInfoMap : i0 = virtualinvoke r0.<java.io.DataInputStream: int readUnsignedShort()>()
org.joda.time.tz.ZoneInfoProvider.readZoneInfoMap : i0 = virtualinvoke r0.<java.io.DataInputStream: int readUnsignedShort()>() >>>>>>>> org.joda.time.tz.ZoneInfoProvider.readZoneInfoMap : r2 = newarray (java.lang.String)[i0]
org.joda.time.tz.ZoneInfoProvider.readZoneInfoMap : r2 = newarray (java.lang.String)[i0] >>>>>>>> org.joda.time.tz.ZoneInfoProvider.readZoneInfoMap : i1 = 0
org.joda.time.tz.ZoneInfoProvider.readZoneInfoMap : i1 = 0 >>>>>>>> org.joda.time.tz.ZoneInfoProvider.readZoneInfoMap : if i1 >= i0
org.joda.time.tz.ZoneInfoProvider.readZoneInfoMap : if i1 >= i0 >>>>>>>> org.joda.time.tz.ZoneInfoProvider.readZoneInfoMap : $r4 = virtualinvoke r0.<java.io.DataInputStream: java.lang.String readUTF()>()
org.joda.time.tz.ZoneInfoProvider.readZoneInfoMap : $r4 = virtualinvoke r0.<java.io.DataInputStream: java.lang.String readUTF()>() >>>>>>>> org.joda.time.tz.ZoneInfoProvider.readZoneInfoMap : $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String intern()>()
org.joda.time.tz.ZoneInfoProvider.readZoneInfoMap : $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String intern()>() >>>>>>>> org.joda.time.tz.ZoneInfoProvider.readZoneInfoMap : r2[i1] = $r5
org.joda.time.tz.ZoneInfoProvider.readZoneInfoMap : r2[i1] = $r5 >>>>>>>> org.joda.time.tz.ZoneInfoProvider.readZoneInfoMap : i1 = i1 + 1
org.joda.time.tz.ZoneInfoProvider.readZoneInfoMap : i1 = i1 + 1 >>>>>>>> org.joda.time.tz.ZoneInfoProvider.readZoneInfoMap : goto [?= (branch)]
org.joda.time.tz.ZoneInfoProvider.readZoneInfoMap : goto [?= (branch)] >>>>>>>> org.joda.time.tz.ZoneInfoProvider.readZoneInfoMap : i2 = virtualinvoke r0.<java.io.DataInputStream: int readUnsignedShort()>()
org.joda.time.tz.ZoneInfoProvider.readZoneInfoMap : i2 = virtualinvoke r0.<java.io.DataInputStream: int readUnsignedShort()>() >>>>>>>> org.joda.time.tz.ZoneInfoProvider.readZoneInfoMap : i3 = 0
org.joda.time.tz.ZoneInfoProvider.readZoneInfoMap : i3 = 0 >>>>>>>> org.joda.time.tz.ZoneInfoProvider.readZoneInfoMap : if i3 >= i2
org.joda.time.tz.ZoneInfoProvider.readZoneInfoMap : if i3 >= i2 >>>>>>>> org.joda.time.tz.ZoneInfoProvider.readZoneInfoMap : $i4 = virtualinvoke r0.<java.io.DataInputStream: int readUnsignedShort()>()
org.joda.time.tz.ZoneInfoProvider.readZoneInfoMap : $i4 = virtualinvoke r0.<java.io.DataInputStream: int readUnsignedShort()>() >>>>>>>> org.joda.time.tz.ZoneInfoProvider.readZoneInfoMap : $r6 = r2[$i4]
org.joda.time.tz.ZoneInfoProvider.readZoneInfoMap : $r6 = r2[$i4] >>>>>>>> org.joda.time.tz.ZoneInfoProvider.readZoneInfoMap : $i5 = virtualinvoke r0.<java.io.DataInputStream: int readUnsignedShort()>()
org.joda.time.tz.ZoneInfoProvider.readZoneInfoMap : $i5 = virtualinvoke r0.<java.io.DataInputStream: int readUnsignedShort()>() >>>>>>>> org.joda.time.tz.ZoneInfoProvider.readZoneInfoMap : $r7 = r2[$i5]
org.joda.time.tz.ZoneInfoProvider.readZoneInfoMap : $r7 = r2[$i5] >>>>>>>> org.joda.time.tz.ZoneInfoProvider.readZoneInfoMap : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7)
org.joda.time.tz.ZoneInfoProvider.readZoneInfoMap : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7) >>>>>>>> org.joda.time.tz.ZoneInfoProvider.readZoneInfoMap : goto [?= i3 = i3 + 1]
org.joda.time.tz.ZoneInfoProvider.readZoneInfoMap : goto [?= i3 = i3 + 1] >>>>>>>> org.joda.time.tz.ZoneInfoProvider.readZoneInfoMap : i3 = i3 + 1
org.joda.time.tz.ZoneInfoProvider.readZoneInfoMap : i3 = i3 + 1 >>>>>>>> org.joda.time.tz.ZoneInfoProvider.loadZoneInfoMap : virtualinvoke r3.<java.io.DataInputStream: void close()>()
org.joda.time.tz.ZoneInfoProvider.loadZoneInfoMap : virtualinvoke r3.<java.io.DataInputStream: void close()>() >>>>>>>> org.joda.time.tz.ZoneInfoProvider.loadZoneInfoMap : goto [?= $r12 = new java.lang.ref.SoftReference]
org.joda.time.tz.ZoneInfoProvider.loadZoneInfoMap : goto [?= $r12 = new java.lang.ref.SoftReference] >>>>>>>> org.joda.time.tz.ZoneInfoProvider.loadZoneInfoMap : $r12 = new java.lang.ref.SoftReference
org.joda.time.tz.ZoneInfoProvider.loadZoneInfoMap : $r12 = new java.lang.ref.SoftReference >>>>>>>> org.joda.time.tz.ZoneInfoProvider.loadZoneInfoMap : $r7 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>
org.joda.time.tz.ZoneInfoProvider.loadZoneInfoMap : $r7 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC> >>>>>>>> org.joda.time.tz.ZoneInfoProvider.loadZoneInfoMap : specialinvoke $r12.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>($r7)
org.joda.time.tz.ZoneInfoProvider.loadZoneInfoMap : specialinvoke $r12.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>($r7) >>>>>>>> org.joda.time.tz.ZoneInfoProvider.loadZoneInfoMap : interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("UTC", $r12)
org.joda.time.tz.ZoneInfoProvider.loadZoneInfoMap : interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("UTC", $r12) >>>>>>>> org.joda.time.tz.ZoneInfoProvider.loadZoneInfoMap : return r2
org.joda.time.tz.ZoneInfoProvider.loadZoneInfoMap : return r2 >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : if r1 != null
org.joda.time.tz.ZoneInfoProvider.getZone : if r1 != null >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : $r5 = r0.<org.joda.time.tz.ZoneInfoProvider: java.util.Map iZoneInfoMap>
org.joda.time.tz.ZoneInfoProvider.getZone : $r5 = r0.<org.joda.time.tz.ZoneInfoProvider: java.util.Map iZoneInfoMap> >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : r2 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.joda.time.tz.ZoneInfoProvider.getZone : r2 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : if r2 != null
org.joda.time.tz.ZoneInfoProvider.getZone : if r2 != null >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r2)
org.joda.time.tz.ZoneInfoProvider.getZone : $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r2) >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : if $z0 == 0
org.joda.time.tz.ZoneInfoProvider.getZone : if $z0 == 0 >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : $r6 = specialinvoke r0.<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>(r1)
org.joda.time.tz.ZoneInfoProvider.getZone : $r6 = specialinvoke r0.<org.joda.time.tz.ZoneInfoProvider: org.joda.time.DateTimeZone loadZoneData(java.lang.String)>(r1) >>>>>>>> org.joda.time.tz.ZoneInfoProvider.loadZoneData : r2 = null
org.joda.time.tz.ZoneInfoProvider.loadZoneData : r2 = null >>>>>>>> org.joda.time.tz.ZoneInfoProvider.loadZoneData : r2 = specialinvoke r0.<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>(r1)
org.joda.time.tz.ZoneInfoProvider.loadZoneData : r2 = specialinvoke r0.<org.joda.time.tz.ZoneInfoProvider: java.io.InputStream openResource(java.lang.String)>(r1) >>>>>>>> org.joda.time.tz.ZoneInfoProvider.loadZoneData : r3 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.InputStream,java.lang.String)>(r2, r1)
org.joda.time.tz.ZoneInfoProvider.loadZoneData : r3 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: org.joda.time.DateTimeZone readFrom(java.io.InputStream,java.lang.String)>(r2, r1) >>>>>>>> org.joda.time.tz.ZoneInfoProvider.loadZoneData : $r9 = r0.<org.joda.time.tz.ZoneInfoProvider: java.util.Map iZoneInfoMap>
org.joda.time.tz.ZoneInfoProvider.loadZoneData : $r9 = r0.<org.joda.time.tz.ZoneInfoProvider: java.util.Map iZoneInfoMap> >>>>>>>> org.joda.time.tz.ZoneInfoProvider.loadZoneData : $r4 = new java.lang.ref.SoftReference
org.joda.time.tz.ZoneInfoProvider.loadZoneData : $r4 = new java.lang.ref.SoftReference >>>>>>>> org.joda.time.tz.ZoneInfoProvider.loadZoneData : specialinvoke $r4.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>(r3)
org.joda.time.tz.ZoneInfoProvider.loadZoneData : specialinvoke $r4.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>(r3) >>>>>>>> org.joda.time.tz.ZoneInfoProvider.loadZoneData : interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4)
org.joda.time.tz.ZoneInfoProvider.loadZoneData : interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4) >>>>>>>> org.joda.time.tz.ZoneInfoProvider.loadZoneData : r5 = r3
org.joda.time.tz.ZoneInfoProvider.loadZoneData : r5 = r3 >>>>>>>> org.joda.time.tz.ZoneInfoProvider.loadZoneData : if r2 == null
org.joda.time.tz.ZoneInfoProvider.loadZoneData : if r2 == null >>>>>>>> org.joda.time.tz.ZoneInfoProvider.loadZoneData : virtualinvoke r2.<java.io.InputStream: void close()>()
org.joda.time.tz.ZoneInfoProvider.loadZoneData : virtualinvoke r2.<java.io.InputStream: void close()>() >>>>>>>> org.joda.time.tz.ZoneInfoProvider.loadZoneData : goto [?= return r5]
org.joda.time.tz.ZoneInfoProvider.loadZoneData : goto [?= return r5] >>>>>>>> org.joda.time.tz.ZoneInfoProvider.loadZoneData : return r5
org.joda.time.tz.ZoneInfoProvider.loadZoneData : return r5 >>>>>>>> org.joda.time.tz.ZoneInfoProvider.getZone : return $r6
org.joda.time.tz.ZoneInfoProvider.getZone : return $r6 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.isFixed : $r1 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone>
org.joda.time.tz.CachedDateTimeZone.isFixed : $r1 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.tz.CachedDateTimeZone.isFixed : $z0 = virtualinvoke $r1.<org.joda.time.DateTimeZone: boolean isFixed()>()
org.joda.time.tz.CachedDateTimeZone.isFixed : $z0 = virtualinvoke $r1.<org.joda.time.DateTimeZone: boolean isFixed()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.isFixed : return 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.isFixed : return 0 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.isFixed : return $z0
org.joda.time.tz.CachedDateTimeZone.isFixed : return $z0 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : r2 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser requireParser()>()
org.joda.time.format.DateTimeFormatter.parseMillis : r2 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeParser requireParser()>() >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : $r5 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>
org.joda.time.format.DateTimeFormatter.parseMillis : $r5 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono> >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : r3 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>($r5)
org.joda.time.format.DateTimeFormatter.parseMillis : r3 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>($r5) >>>>>>>> org.joda.time.DateTimeUtils.getChronology : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>()
org.joda.time.DateTimeUtils.getChronology : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance()>() >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>()
org.joda.time.chrono.ISOChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>() >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r0)
org.joda.time.chrono.ISOChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r0) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if r0 != null
org.joda.time.chrono.ISOChronology.getInstance : if r0 != null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0)
org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : i0 = $i1 & 63
org.joda.time.chrono.ISOChronology.getInstance : i0 = $i1 & 63 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache>
org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache> >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : r1 = $r5[i0]
org.joda.time.chrono.ISOChronology.getInstance : r1 = $r5[i0] >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if r1 == null
org.joda.time.chrono.ISOChronology.getInstance : if r1 == null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r6 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.ISOChronology.getInstance : $r6 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0
org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : return r1
org.joda.time.chrono.ISOChronology.getInstance : return r1 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : return $r1
org.joda.time.chrono.ISOChronology.getInstance : return $r1 >>>>>>>> org.joda.time.DateTimeUtils.getChronology : return $r1
org.joda.time.DateTimeUtils.getChronology : return $r1 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : $r6 = new org.joda.time.format.DateTimeParserBucket
org.joda.time.format.DateTimeFormatter.parseMillis : $r6 = new org.joda.time.format.DateTimeParserBucket >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : $r7 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>
org.joda.time.format.DateTimeFormatter.parseMillis : $r7 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale> >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : $r8 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear>
org.joda.time.format.DateTimeFormatter.parseMillis : $r8 = r0.<org.joda.time.format.DateTimeFormatter: java.lang.Integer iPivotYear> >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : $i1 = r0.<org.joda.time.format.DateTimeFormatter: int iDefaultYear>
org.joda.time.format.DateTimeFormatter.parseMillis : $i1 = r0.<org.joda.time.format.DateTimeFormatter: int iDefaultYear> >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : specialinvoke $r6.<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>(0L, r3, $r7, $r8, $i1)
org.joda.time.format.DateTimeFormatter.parseMillis : specialinvoke $r6.<org.joda.time.format.DateTimeParserBucket: void <init>(long,org.joda.time.Chronology,java.util.Locale,java.lang.Integer,int)>(0L, r3, $r7, $r8, $i1) >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : r4 = $r6
org.joda.time.format.DateTimeFormatter.parseMillis : r4 = $r6 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : i0 = interfaceinvoke r2.<org.joda.time.format.DateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>(r4, r1, 0)
org.joda.time.format.DateTimeFormatter.parseMillis : i0 = interfaceinvoke r2.<org.joda.time.format.DateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>(r4, r1, 0) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i9 = virtualinvoke r2.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i9 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i1 = $i9 - i0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i1 = $i9 - i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetParseText>
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetParseText> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if $r3 == null
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if $r3 == null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i1 > 1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i1 > 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : c3 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i0)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : c3 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i0) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if c3 != 45
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if c3 != 45 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : z2 = 1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : z2 = 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : goto [?= i16 = i1 + -1]
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : goto [?= i16 = i1 + -1] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i16 = i1 + -1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i16 = i1 + -1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i17 = i0 + 1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i17 = i0 + 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i18 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.String,int,int)>(r2, i17, 2)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i18 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.String,int,int)>(r2, i17, 2) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : $i4 = virtualinvoke r1.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : $i4 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : $i5 = $i4 - i0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : $i5 = $i4 - i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : i2 = staticinvoke <java.lang.Math: int min(int,int)>($i5, i1)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : i2 = staticinvoke <java.lang.Math: int min(int,int)>($i5, i1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : i6 = 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : i6 = 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : if i2 <= 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : if i2 <= 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : $i7 = i0 + i6
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : $i7 = i0 + i6 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i7)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i7) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : if c3 < 48
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : if c3 < 48 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : if c3 <= 57
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : if c3 <= 57 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : i6 = i6 + 1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : i6 = i6 + 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : i2 = i2 + -1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : i2 = i2 + -1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : goto [?= (branch)]
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : goto [?= (branch)] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : return i6
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.digitCount : return i6 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if $i18 >= 2
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if $i18 >= 2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i4 = staticinvoke <org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.String,int)>(r2, i17)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i4 = staticinvoke <org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.String,int)>(r2, i17) >>>>>>>> org.joda.time.format.FormatUtils.parseTwoDigits : $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0)
org.joda.time.format.FormatUtils.parseTwoDigits : $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0) >>>>>>>> org.joda.time.format.FormatUtils.parseTwoDigits : i1 = $c2 - 48
org.joda.time.format.FormatUtils.parseTwoDigits : i1 = $c2 - 48 >>>>>>>> org.joda.time.format.FormatUtils.parseTwoDigits : $i3 = i1 << 3
org.joda.time.format.FormatUtils.parseTwoDigits : $i3 = i1 << 3 >>>>>>>> org.joda.time.format.FormatUtils.parseTwoDigits : $i4 = i1 << 1
org.joda.time.format.FormatUtils.parseTwoDigits : $i4 = i1 << 1 >>>>>>>> org.joda.time.format.FormatUtils.parseTwoDigits : $i5 = $i3 + $i4
org.joda.time.format.FormatUtils.parseTwoDigits : $i5 = $i3 + $i4 >>>>>>>> org.joda.time.format.FormatUtils.parseTwoDigits : $i6 = i0 + 1
org.joda.time.format.FormatUtils.parseTwoDigits : $i6 = i0 + 1 >>>>>>>> org.joda.time.format.FormatUtils.parseTwoDigits : $c7 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i6)
org.joda.time.format.FormatUtils.parseTwoDigits : $c7 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i6) >>>>>>>> org.joda.time.format.FormatUtils.parseTwoDigits : $i8 = $i5 + $c7
org.joda.time.format.FormatUtils.parseTwoDigits : $i8 = $i5 + $c7 >>>>>>>> org.joda.time.format.FormatUtils.parseTwoDigits : $i9 = $i8 - 48
org.joda.time.format.FormatUtils.parseTwoDigits : $i9 = $i8 - 48 >>>>>>>> org.joda.time.format.FormatUtils.parseTwoDigits : return $i9
org.joda.time.format.FormatUtils.parseTwoDigits : return $i9 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i4 <= 23
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i4 <= 23 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i5 = i4 * 3600000
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i5 = i4 * 3600000 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i21 = i16 + -2
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i21 = i16 + -2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i22 = i17 + 2
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i22 = i17 + 2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i21 > 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i21 > 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : c23 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i22)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : c23 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i22) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if c23 != 58
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if c23 != 58 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : z0 = 1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : z0 = 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i21 = i21 + -1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i21 = i21 + -1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i22 = i22 + 1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i22 = i22 + 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : goto [?= i6 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.String,int,int)>(r2, i22, 2)]
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : goto [?= i6 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.String,int,int)>(r2, i22, 2)] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i6 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.String,int,int)>(r2, i22, 2)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i6 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.String,int,int)>(r2, i22, 2) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i6 != 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i6 != 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i6 >= 2
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i6 >= 2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i7 = staticinvoke <org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.String,int)>(r2, i22)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i7 = staticinvoke <org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.String,int)>(r2, i22) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i7 <= 59
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i7 <= 59 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i26 = i7 * 60000
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i26 = i7 * 60000 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i5 = i5 + $i26
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i5 = i5 + $i26 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i27 = i21 + -2
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i27 = i21 + -2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i22 = i22 + 2
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i22 = i22 + 2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i27 > 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i27 > 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if z0 == 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if z0 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $c28 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i22)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $c28 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i22) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if $c28 == 58
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if $c28 == 58 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i27 = i27 + -1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i27 = i27 + -1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i29 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.String,int,int)>(r2, i22, 2)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i29 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.String,int,int)>(r2, i22, 2) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i29 != 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i29 != 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i29 >= 2
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i29 >= 2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i8 = staticinvoke <org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.String,int)>(r2, i22)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i8 = staticinvoke <org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.String,int)>(r2, i22) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i8 <= 59
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i8 <= 59 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i32 = i8 * 1000
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i32 = i8 * 1000 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i5 = i5 + $i32
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i5 = i5 + $i32 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i33 = i27 + -2
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i33 = i27 + -2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i33 > 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i33 > 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : goto [?= (branch)]
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : goto [?= (branch)] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if z2 == 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if z2 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i50 = neg i5
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i50 = neg i5 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : goto [?= $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i50)]
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : goto [?= $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i50)] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i50)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i50) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: void setOffset(java.lang.Integer)>($r11)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: void setOffset(java.lang.Integer)>($r11) >>>>>>>> org.joda.time.format.DateTimeParserBucket.setOffset : r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState> = null
org.joda.time.format.DateTimeParserBucket.setOffset : r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState> = null >>>>>>>> org.joda.time.format.DateTimeParserBucket.setOffset : r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset> = r1
org.joda.time.format.DateTimeParserBucket.setOffset : r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset> = r1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : return i22
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : return i22 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : if i0 < 0
org.joda.time.format.DateTimeFormatter.parseMillis : if i0 < 0 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : $i2 = virtualinvoke r1.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatter.parseMillis : $i2 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : if i0 < $i2
org.joda.time.format.DateTimeFormatter.parseMillis : if i0 < $i2 >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : $l3 = virtualinvoke r4.<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.String)>(1, r1)
org.joda.time.format.DateTimeFormatter.parseMillis : $l3 = virtualinvoke r4.<org.joda.time.format.DateTimeParserBucket: long computeMillis(boolean,java.lang.String)>(1, r1) >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : i7 = 0
org.joda.time.format.DateTimeParserBucket.computeMillis : i7 = 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : if i7 >= i0
org.joda.time.format.DateTimeParserBucket.computeMillis : if i7 >= i0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $r28 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset>
org.joda.time.format.DateTimeParserBucket.computeMillis : $r28 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset> >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $i10 = virtualinvoke $r28.<java.lang.Integer: int intValue()>()
org.joda.time.format.DateTimeParserBucket.computeMillis : $i10 = virtualinvoke $r28.<java.lang.Integer: int intValue()>() >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $l11 = (long) $i10
org.joda.time.format.DateTimeParserBucket.computeMillis : $l11 = (long) $i10 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : l5 = l5 - $l11
org.joda.time.format.DateTimeParserBucket.computeMillis : l5 = l5 - $l11 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : goto [?= return l5]
org.joda.time.format.DateTimeParserBucket.computeMillis : goto [?= return l5] >>>>>>>> org.joda.time.format.DateTimeFormatter.parseMillis : return $l3
org.joda.time.format.DateTimeFormatter.parseMillis : return $l3 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getStandardOffset : $r1 = specialinvoke r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info getInfo(long)>(l0)
org.joda.time.tz.CachedDateTimeZone.getStandardOffset : $r1 = specialinvoke r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info getInfo(long)>(l0) >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getStandardOffset : $i1 = virtualinvoke $r1.<org.joda.time.tz.CachedDateTimeZone$Info: int getStandardOffset(long)>(l0)
org.joda.time.tz.CachedDateTimeZone.getStandardOffset : $i1 = virtualinvoke $r1.<org.joda.time.tz.CachedDateTimeZone$Info: int getStandardOffset(long)>(l0) >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getStandardOffset : $r1 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: org.joda.time.tz.CachedDateTimeZone$Info iNextInfo>
org.joda.time.tz.CachedDateTimeZone$Info.getStandardOffset : $r1 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: org.joda.time.tz.CachedDateTimeZone$Info iNextInfo> >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getStandardOffset : if $r1 == null
org.joda.time.tz.CachedDateTimeZone$Info.getStandardOffset : if $r1 == null >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getStandardOffset : $i3 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: int iStandardOffset>
org.joda.time.tz.CachedDateTimeZone$Info.getStandardOffset : $i3 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: int iStandardOffset> >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getStandardOffset : if $i3 != -2147483648
org.joda.time.tz.CachedDateTimeZone$Info.getStandardOffset : if $i3 != -2147483648 >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getStandardOffset : $r3 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: org.joda.time.DateTimeZone iZoneRef>
org.joda.time.tz.CachedDateTimeZone$Info.getStandardOffset : $r3 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: org.joda.time.DateTimeZone iZoneRef> >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getStandardOffset : $l4 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: long iPeriodStart>
org.joda.time.tz.CachedDateTimeZone$Info.getStandardOffset : $l4 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: long iPeriodStart> >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getStandardOffset : $i5 = virtualinvoke $r3.<org.joda.time.DateTimeZone: int getStandardOffset(long)>($l4)
org.joda.time.tz.CachedDateTimeZone$Info.getStandardOffset : $i5 = virtualinvoke $r3.<org.joda.time.DateTimeZone: int getStandardOffset(long)>($l4) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: long[] iTransitions> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : i1 = staticinvoke <java.util.Arrays: int binarySearch(long[],long)>(r1, l0)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : i1 = staticinvoke <java.util.Arrays: int binarySearch(long[],long)>(r1, l0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : if i1 < 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : if i1 < 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iStandardOffsets>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : $r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iStandardOffsets> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : $i2 = $r2[i1]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : $i2 = $r2[i1] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : return $i2
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : return $i2 >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getStandardOffset : r0.<org.joda.time.tz.CachedDateTimeZone$Info: int iStandardOffset> = $i5
org.joda.time.tz.CachedDateTimeZone$Info.getStandardOffset : r0.<org.joda.time.tz.CachedDateTimeZone$Info: int iStandardOffset> = $i5 >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getStandardOffset : $i6 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: int iStandardOffset>
org.joda.time.tz.CachedDateTimeZone$Info.getStandardOffset : $i6 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: int iStandardOffset> >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getStandardOffset : return $i6
org.joda.time.tz.CachedDateTimeZone$Info.getStandardOffset : return $i6 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getStandardOffset : return $i1
org.joda.time.tz.CachedDateTimeZone.getStandardOffset : return $i1 >>>>>>>> org.joda.time.convert.ConverterManager.getInstance : $r0 = <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager INSTANCE>
org.joda.time.convert.ConverterManager.getInstance : $r0 = <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager INSTANCE> >>>>>>>> org.joda.time.convert.ConverterManager.getInstance : if $r0 != null
org.joda.time.convert.ConverterManager.getInstance : if $r0 != null >>>>>>>> org.joda.time.convert.ConverterManager.getInstance : $r2 = <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager INSTANCE>
org.joda.time.convert.ConverterManager.getInstance : $r2 = <org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterManager INSTANCE> >>>>>>>> org.joda.time.convert.ConverterManager.getInstance : return $r2
org.joda.time.convert.ConverterManager.getInstance : return $r2 >>>>>>>> org.joda.time.convert.ConverterManager.getInstantConverter : $r4 = r0.<org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterSet iInstantConverters>
org.joda.time.convert.ConverterManager.getInstantConverter : $r4 = r0.<org.joda.time.convert.ConverterManager: org.joda.time.convert.ConverterSet iInstantConverters> >>>>>>>> org.joda.time.convert.ConverterManager.getInstantConverter : if r1 != null
org.joda.time.convert.ConverterManager.getInstantConverter : if r1 != null >>>>>>>> org.joda.time.convert.ConverterManager.getInstantConverter : $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>()
org.joda.time.convert.ConverterManager.getInstantConverter : $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> org.joda.time.convert.ConverterManager.getInstantConverter : $r6 = virtualinvoke $r4.<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>($r5)
org.joda.time.convert.ConverterManager.getInstantConverter : $r6 = virtualinvoke $r4.<org.joda.time.convert.ConverterSet: org.joda.time.convert.Converter select(java.lang.Class)>($r5) >>>>>>>> org.joda.time.convert.ConverterSet.select : r2 = r0.<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet$Entry[] iSelectEntries>
org.joda.time.convert.ConverterSet.select : r2 = r0.<org.joda.time.convert.ConverterSet: org.joda.time.convert.ConverterSet$Entry[] iSelectEntries> >>>>>>>> org.joda.time.convert.ConverterSet.select : i0 = lengthof r2
org.joda.time.convert.ConverterSet.select : i0 = lengthof r2 >>>>>>>> org.joda.time.convert.ConverterSet.select : if r1 != null
org.joda.time.convert.ConverterSet.select : if r1 != null >>>>>>>> org.joda.time.convert.ConverterSet.select : $i5 = virtualinvoke r1.<java.lang.Object: int hashCode()>()
org.joda.time.convert.ConverterSet.select : $i5 = virtualinvoke r1.<java.lang.Object: int hashCode()>() >>>>>>>> org.joda.time.convert.ConverterSet.select : $i6 = i0 - 1
org.joda.time.convert.ConverterSet.select : $i6 = i0 - 1 >>>>>>>> org.joda.time.convert.ConverterSet.select : $i4 = $i5 & $i6
org.joda.time.convert.ConverterSet.select : $i4 = $i5 & $i6 >>>>>>>> org.joda.time.convert.ConverterSet.select : i1 = $i4
org.joda.time.convert.ConverterSet.select : i1 = $i4 >>>>>>>> org.joda.time.convert.ConverterSet.select : $r6 = r2[i1]
org.joda.time.convert.ConverterSet.select : $r6 = r2[i1] >>>>>>>> org.joda.time.convert.ConverterSet.select : r3 = $r6
org.joda.time.convert.ConverterSet.select : r3 = $r6 >>>>>>>> org.joda.time.convert.ConverterSet.select : if $r6 == null
org.joda.time.convert.ConverterSet.select : if $r6 == null >>>>>>>> org.joda.time.convert.ConverterSet.select : $r7 = r3.<org.joda.time.convert.ConverterSet$Entry: java.lang.Class iType>
org.joda.time.convert.ConverterSet.select : $r7 = r3.<org.joda.time.convert.ConverterSet$Entry: java.lang.Class iType> >>>>>>>> org.joda.time.convert.ConverterSet.select : if $r7 != r1
org.joda.time.convert.ConverterSet.select : if $r7 != r1 >>>>>>>> org.joda.time.convert.ConverterSet.select : $r8 = r3.<org.joda.time.convert.ConverterSet$Entry: org.joda.time.convert.Converter iConverter>
org.joda.time.convert.ConverterSet.select : $r8 = r3.<org.joda.time.convert.ConverterSet$Entry: org.joda.time.convert.Converter iConverter> >>>>>>>> org.joda.time.convert.ConverterSet.select : return $r8
org.joda.time.convert.ConverterSet.select : return $r8 >>>>>>>> org.joda.time.convert.ConverterManager.getInstantConverter : r2 = (org.joda.time.convert.InstantConverter) $r6
org.joda.time.convert.ConverterManager.getInstantConverter : r2 = (org.joda.time.convert.InstantConverter) $r6 >>>>>>>> org.joda.time.convert.ConverterManager.getInstantConverter : if r2 == null
org.joda.time.convert.ConverterManager.getInstantConverter : if r2 == null >>>>>>>> org.joda.time.convert.ConverterManager.getInstantConverter : return r2
org.joda.time.convert.ConverterManager.getInstantConverter : return r2 >>>>>>>> org.joda.time.convert.AbstractConverter.getChronology : $r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r2)
org.joda.time.convert.AbstractConverter.getChronology : $r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r2) >>>>>>>> org.joda.time.convert.AbstractConverter.getChronology : return $r3
org.joda.time.convert.AbstractConverter.getChronology : return $r3 >>>>>>>> org.joda.time.convert.StringConverter.getInstantMillis : r3 = (java.lang.String) r1
org.joda.time.convert.StringConverter.getInstantMillis : r3 = (java.lang.String) r1 >>>>>>>> org.joda.time.convert.StringConverter.getInstantMillis : r4 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTimeParser()>()
org.joda.time.convert.StringConverter.getInstantMillis : r4 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTimeParser()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.dateTimeParser : $r0 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dtp>
org.joda.time.format.ISODateTimeFormat.dateTimeParser : $r0 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dtp> >>>>>>>> org.joda.time.format.ISODateTimeFormat.dateTimeParser : if $r0 != null
org.joda.time.format.ISODateTimeFormat.dateTimeParser : if $r0 != null >>>>>>>> org.joda.time.format.ISODateTimeFormat.dateTimeParser : $r15 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dtp>
org.joda.time.format.ISODateTimeFormat.dateTimeParser : $r15 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dtp> >>>>>>>> org.joda.time.format.ISODateTimeFormat.dateTimeParser : return $r15
org.joda.time.format.ISODateTimeFormat.dateTimeParser : return $r15 >>>>>>>> org.joda.time.convert.StringConverter.getInstantMillis : $r5 = virtualinvoke r4.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)>(r2)
org.joda.time.convert.StringConverter.getInstantMillis : $r5 = virtualinvoke r4.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)>(r2) >>>>>>>> org.joda.time.format.DateTimeFormatter.withChronology : $r2 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>
org.joda.time.format.DateTimeFormatter.withChronology : $r2 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono> >>>>>>>> org.joda.time.format.DateTimeFormatter.withChronology : if $r2 != r1
org.joda.time.format.DateTimeFormatter.withChronology : if $r2 != r1 >>>>>>>> org.joda.time.format.DateTimeFormatter.withChronology : return r0
org.joda.time.format.DateTimeFormatter.withChronology : return r0 >>>>>>>> org.joda.time.convert.StringConverter.getInstantMillis : $l0 = virtualinvoke $r5.<org.joda.time.format.DateTimeFormatter: long parseMillis(java.lang.String)>(r3)
org.joda.time.convert.StringConverter.getInstantMillis : $l0 = virtualinvoke $r5.<org.joda.time.format.DateTimeFormatter: long parseMillis(java.lang.String)>(r3) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: org.joda.time.format.DateTimeParser[] iParsers>
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$MatchingParser: org.joda.time.format.DateTimeParser[] iParsers> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i1 = lengthof r3
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i1 = lengthof r3 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : r4 = virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: java.lang.Object saveState()>()
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : r4 = virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: java.lang.Object saveState()>() >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveState : $r2 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState>
org.joda.time.format.DateTimeParserBucket.saveState : $r2 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState> >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveState : if $r2 != null
org.joda.time.format.DateTimeParserBucket.saveState : if $r2 != null >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveState : $r1 = new org.joda.time.format.DateTimeParserBucket$SavedState
org.joda.time.format.DateTimeParserBucket.saveState : $r1 = new org.joda.time.format.DateTimeParserBucket$SavedState >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveState : specialinvoke $r1.<org.joda.time.format.DateTimeParserBucket$SavedState: void <init>(org.joda.time.format.DateTimeParserBucket)>(r0)
org.joda.time.format.DateTimeParserBucket.saveState : specialinvoke $r1.<org.joda.time.format.DateTimeParserBucket$SavedState: void <init>(org.joda.time.format.DateTimeParserBucket)>(r0) >>>>>>>> org.joda.time.format.DateTimeParserBucket.access$000 : $r1 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone>
org.joda.time.format.DateTimeParserBucket.access$000 : $r1 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.format.DateTimeParserBucket.access$000 : return $r1
org.joda.time.format.DateTimeParserBucket.access$000 : return $r1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.access$100 : $r1 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset>
org.joda.time.format.DateTimeParserBucket.access$100 : $r1 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset> >>>>>>>> org.joda.time.format.DateTimeParserBucket.access$100 : return $r1
org.joda.time.format.DateTimeParserBucket.access$100 : return $r1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.access$200 : $r1 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields>
org.joda.time.format.DateTimeParserBucket.access$200 : $r1 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields> >>>>>>>> org.joda.time.format.DateTimeParserBucket.access$200 : return $r1
org.joda.time.format.DateTimeParserBucket.access$200 : return $r1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.access$300 : $i0 = r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount>
org.joda.time.format.DateTimeParserBucket.access$300 : $i0 = r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount> >>>>>>>> org.joda.time.format.DateTimeParserBucket.access$300 : return $i0
org.joda.time.format.DateTimeParserBucket.access$300 : return $i0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveState : r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState> = $r1
org.joda.time.format.DateTimeParserBucket.saveState : r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState> = $r1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveState : $r3 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState>
org.joda.time.format.DateTimeParserBucket.saveState : $r3 = r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState> >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveState : return $r3
org.joda.time.format.DateTimeParserBucket.saveState : return $r3 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : z0 = 0
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : z0 = 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i2 = i0
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i2 = i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : r5 = null
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : r5 = null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i3 = i0
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i3 = i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i4 = 0
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i4 = 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if i4 >= i1
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if i4 >= i1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : r6 = r3[i4]
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : r6 = r3[i4] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if r6 != null
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if r6 != null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i5 = interfaceinvoke r6.<org.joda.time.format.DateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>(r1, r2, i0)
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i5 = interfaceinvoke r6.<org.joda.time.format.DateTimeParser: int parseInto(org.joda.time.format.DateTimeParserBucket,java.lang.String,int)>(r1, r2, i0) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if i5 < i0
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if i5 < i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if i5 >= 0
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if i5 >= 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i9 = i5 ^ -1
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i9 = i5 ^ -1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if i9 <= i3
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if i9 <= i3 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: boolean restoreState(java.lang.Object)>(r4)
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: boolean restoreState(java.lang.Object)>(r4) >>>>>>>> org.joda.time.format.DateTimeParserBucket.restoreState : $z0 = r1 instanceof org.joda.time.format.DateTimeParserBucket$SavedState
org.joda.time.format.DateTimeParserBucket.restoreState : $z0 = r1 instanceof org.joda.time.format.DateTimeParserBucket$SavedState >>>>>>>> org.joda.time.format.DateTimeParserBucket.restoreState : if $z0 == 0
org.joda.time.format.DateTimeParserBucket.restoreState : if $z0 == 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.restoreState : $r2 = (org.joda.time.format.DateTimeParserBucket$SavedState) r1
org.joda.time.format.DateTimeParserBucket.restoreState : $r2 = (org.joda.time.format.DateTimeParserBucket$SavedState) r1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.restoreState : $z1 = virtualinvoke $r2.<org.joda.time.format.DateTimeParserBucket$SavedState: boolean restoreState(org.joda.time.format.DateTimeParserBucket)>(r0)
org.joda.time.format.DateTimeParserBucket.restoreState : $z1 = virtualinvoke $r2.<org.joda.time.format.DateTimeParserBucket$SavedState: boolean restoreState(org.joda.time.format.DateTimeParserBucket)>(r0) >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : $r2 = r0.<org.joda.time.format.DateTimeParserBucket$SavedState: org.joda.time.format.DateTimeParserBucket this$0>
org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : $r2 = r0.<org.joda.time.format.DateTimeParserBucket$SavedState: org.joda.time.format.DateTimeParserBucket this$0> >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : if r1 == $r2
org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : if r1 == $r2 >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : $r3 = r0.<org.joda.time.format.DateTimeParserBucket$SavedState: org.joda.time.DateTimeZone iZone>
org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : $r3 = r0.<org.joda.time.format.DateTimeParserBucket$SavedState: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : staticinvoke <org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone access$002(org.joda.time.format.DateTimeParserBucket,org.joda.time.DateTimeZone)>(r1, $r3)
org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : staticinvoke <org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone access$002(org.joda.time.format.DateTimeParserBucket,org.joda.time.DateTimeZone)>(r1, $r3) >>>>>>>> org.joda.time.format.DateTimeParserBucket.access$002 : r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone> = r1
org.joda.time.format.DateTimeParserBucket.access$002 : r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.DateTimeZone iZone> = r1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.access$002 : return r1
org.joda.time.format.DateTimeParserBucket.access$002 : return r1 >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : $r5 = r0.<org.joda.time.format.DateTimeParserBucket$SavedState: java.lang.Integer iOffset>
org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : $r5 = r0.<org.joda.time.format.DateTimeParserBucket$SavedState: java.lang.Integer iOffset> >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : staticinvoke <org.joda.time.format.DateTimeParserBucket: java.lang.Integer access$102(org.joda.time.format.DateTimeParserBucket,java.lang.Integer)>(r1, $r5)
org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : staticinvoke <org.joda.time.format.DateTimeParserBucket: java.lang.Integer access$102(org.joda.time.format.DateTimeParserBucket,java.lang.Integer)>(r1, $r5) >>>>>>>> org.joda.time.format.DateTimeParserBucket.access$102 : r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset> = r1
org.joda.time.format.DateTimeParserBucket.access$102 : r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Integer iOffset> = r1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.access$102 : return r1
org.joda.time.format.DateTimeParserBucket.access$102 : return r1 >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : $r7 = r0.<org.joda.time.format.DateTimeParserBucket$SavedState: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields>
org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : $r7 = r0.<org.joda.time.format.DateTimeParserBucket$SavedState: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields> >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : staticinvoke <org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] access$202(org.joda.time.format.DateTimeParserBucket,org.joda.time.format.DateTimeParserBucket$SavedField[])>(r1, $r7)
org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : staticinvoke <org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] access$202(org.joda.time.format.DateTimeParserBucket,org.joda.time.format.DateTimeParserBucket$SavedField[])>(r1, $r7) >>>>>>>> org.joda.time.format.DateTimeParserBucket.access$202 : r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields> = r1
org.joda.time.format.DateTimeParserBucket.access$202 : r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields> = r1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.access$202 : return r1
org.joda.time.format.DateTimeParserBucket.access$202 : return r1 >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : $i0 = r0.<org.joda.time.format.DateTimeParserBucket$SavedState: int iSavedFieldsCount>
org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : $i0 = r0.<org.joda.time.format.DateTimeParserBucket$SavedState: int iSavedFieldsCount> >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : $i1 = staticinvoke <org.joda.time.format.DateTimeParserBucket: int access$300(org.joda.time.format.DateTimeParserBucket)>(r1)
org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : $i1 = staticinvoke <org.joda.time.format.DateTimeParserBucket: int access$300(org.joda.time.format.DateTimeParserBucket)>(r1) >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : if $i0 >= $i1
org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : if $i0 >= $i1 >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : $i2 = r0.<org.joda.time.format.DateTimeParserBucket$SavedState: int iSavedFieldsCount>
org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : $i2 = r0.<org.joda.time.format.DateTimeParserBucket$SavedState: int iSavedFieldsCount> >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : staticinvoke <org.joda.time.format.DateTimeParserBucket: int access$302(org.joda.time.format.DateTimeParserBucket,int)>(r1, $i2)
org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : staticinvoke <org.joda.time.format.DateTimeParserBucket: int access$302(org.joda.time.format.DateTimeParserBucket,int)>(r1, $i2) >>>>>>>> org.joda.time.format.DateTimeParserBucket.access$302 : r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount> = i0
org.joda.time.format.DateTimeParserBucket.access$302 : r0.<org.joda.time.format.DateTimeParserBucket: int iSavedFieldsCount> = i0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.access$302 : return i0
org.joda.time.format.DateTimeParserBucket.access$302 : return i0 >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : return 1
org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : return 1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.restoreState : if $z1 == 0
org.joda.time.format.DateTimeParserBucket.restoreState : if $z1 == 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.restoreState : r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState> = r1
org.joda.time.format.DateTimeParserBucket.restoreState : r0.<org.joda.time.format.DateTimeParserBucket: java.lang.Object iSavedState> = r1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.restoreState : return 1
org.joda.time.format.DateTimeParserBucket.restoreState : return 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i4 = i4 + 1
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i4 = i4 + 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : goto [?= (branch)]
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : goto [?= (branch)] >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r7 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r7 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r7
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r7 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r9 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r9 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>() >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r9
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r9 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r10 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r10 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>() >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r10
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r10 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if i5 <= i2
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if i5 <= i2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : $i6 = virtualinvoke r2.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : $i6 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if i5 >= $i6
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if i5 >= $i6 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : $i7 = i4 + 1
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : $i7 = i4 + 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if $i7 >= i1
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if $i7 >= i1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : $i8 = i4 + 1
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : $i8 = i4 + 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : $r7 = r3[$i8]
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : $r7 = r3[$i8] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if $r7 != null
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if $r7 != null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : return i5
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : return i5 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i2 = i5
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i2 = i5 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : r5 = virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: java.lang.Object saveState()>()
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : r5 = virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: java.lang.Object saveState()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : goto [?= virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: boolean restoreState(java.lang.Object)>(r4)]
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : goto [?= virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: boolean restoreState(java.lang.Object)>(r4)] >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : staticinvoke <org.joda.time.format.DateTimeParserBucket: boolean access$402(org.joda.time.format.DateTimeParserBucket,boolean)>(r1, 1)
org.joda.time.format.DateTimeParserBucket$SavedState.restoreState : staticinvoke <org.joda.time.format.DateTimeParserBucket: boolean access$402(org.joda.time.format.DateTimeParserBucket,boolean)>(r1, 1) >>>>>>>> org.joda.time.format.DateTimeParserBucket.access$402 : r0.<org.joda.time.format.DateTimeParserBucket: boolean iSavedFieldsShared> = z0
org.joda.time.format.DateTimeParserBucket.access$402 : r0.<org.joda.time.format.DateTimeParserBucket: boolean iSavedFieldsShared> = z0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.access$402 : return z0
org.joda.time.format.DateTimeParserBucket.access$402 : return z0 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r12 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField weekyear()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r12 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField weekyear()>() >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r12
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r12 >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : $i2 = lengthof r2
org.joda.time.format.DateTimeParserBucket.saveField : $i2 = lengthof r2 >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : if i0 != $i2
org.joda.time.format.DateTimeParserBucket.saveField : if i0 != $i2 >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : $i3 = lengthof r2
org.joda.time.format.DateTimeParserBucket.saveField : $i3 = lengthof r2 >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : r3 = newarray (org.joda.time.format.DateTimeParserBucket$SavedField)[$i3]
org.joda.time.format.DateTimeParserBucket.saveField : r3 = newarray (org.joda.time.format.DateTimeParserBucket$SavedField)[$i3] >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r3, 0, i0)
org.joda.time.format.DateTimeParserBucket.saveField : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r3, 0, i0) >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : r2 = r3
org.joda.time.format.DateTimeParserBucket.saveField : r2 = r3 >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields> = r3
org.joda.time.format.DateTimeParserBucket.saveField : r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields> = r3 >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : r0.<org.joda.time.format.DateTimeParserBucket: boolean iSavedFieldsShared> = 0
org.joda.time.format.DateTimeParserBucket.saveField : r0.<org.joda.time.format.DateTimeParserBucket: boolean iSavedFieldsShared> = 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.parseInto : $r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: java.lang.String iValue>
org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.parseInto : $r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: java.lang.String iValue> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.parseInto : $r4 = r0.<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: java.lang.String iValue>
org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.parseInto : $r4 = r0.<org.joda.time.format.DateTimeFormatterBuilder$StringLiteral: java.lang.String iValue> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.parseInto : $i1 = virtualinvoke $r4.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.parseInto : $i1 = virtualinvoke $r4.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.parseInto : $z0 = virtualinvoke r2.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, i0, $r3, 0, $i1)
org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.parseInto : $z0 = virtualinvoke r2.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, i0, $r3, 0, $i1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.parseInto : if $z0 == 0
org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.parseInto : if $z0 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.parseInto : $i4 = i0 ^ -1
org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.parseInto : $i4 = i0 ^ -1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.parseInto : return $i4
org.joda.time.format.DateTimeFormatterBuilder$StringLiteral.parseInto : return $i4 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i3 = i9
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : i3 = i9 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r8 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfYear()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r8 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfYear()>() >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r8
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r8 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if i2 > i0
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if i2 > i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if r5 == null
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if r5 == null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: boolean restoreState(java.lang.Object)>(r5)
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: boolean restoreState(java.lang.Object)>(r5) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : return i2
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : return i2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $r4 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: org.joda.time.DateTimeFieldType iFieldType>
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $r4 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: org.joda.time.DateTimeFieldType iFieldType> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $r5 = virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: org.joda.time.Chronology getChronology()>()
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $r5 = virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.format.DateTimeParserBucket.getChronology : $r1 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.Chronology iChrono>
org.joda.time.format.DateTimeParserBucket.getChronology : $r1 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.Chronology iChrono> >>>>>>>> org.joda.time.format.DateTimeParserBucket.getChronology : return $r1
org.joda.time.format.DateTimeParserBucket.getChronology : return $r1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : r3 = virtualinvoke $r4.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r5)
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : r3 = virtualinvoke $r4.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r5) >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r22 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfDay()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r22 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfDay()>() >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r22
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r22 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $i7 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int iMaxDigits>
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $i7 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int iMaxDigits> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $i8 = virtualinvoke r2.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $i8 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $i9 = $i8 - i0
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $i9 = $i8 - i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : i1 = staticinvoke <java.lang.Math: int min(int,int)>($i7, $i9)
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : i1 = staticinvoke <java.lang.Math: int min(int,int)>($i7, $i9) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : l2 = 0L
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : l2 = 0L >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $r6 = virtualinvoke r3.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>()
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $r6 = virtualinvoke r3.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $l10 = virtualinvoke $r6.<org.joda.time.DurationField: long getUnitMillis()>()
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $l10 = virtualinvoke $r6.<org.joda.time.DurationField: long getUnitMillis()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : l3 = $l10 * 10L
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : l3 = $l10 * 10L >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : i4 = 0
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : i4 = 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : if i4 >= i1
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : if i4 >= i1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $i11 = i0 + i4
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $i11 = i0 + i4 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : c5 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i11)
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : c5 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i11) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : if c5 < 48
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : if c5 < 48 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : if c5 <= 57
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : if c5 <= 57 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : i4 = i4 + 1
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : i4 = i4 + 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : l6 = l3 / 10L
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : l6 = l3 / 10L >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $i12 = c5 - 48
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $i12 = c5 - 48 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $l13 = (long) $i12
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $l13 = (long) $i12 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $l14 = $l13 * l6
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $l14 = $l13 * l6 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : l2 = l2 + $l14
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : l2 = l2 + $l14 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : l3 = l6
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : l3 = l6 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : goto [?= (branch)]
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : goto [?= (branch)] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : goto [?= l15 = l2 / 10L]
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : goto [?= l15 = l2 / 10L] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : l15 = l2 / 10L
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : l15 = l2 / 10L >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : if i4 != 0
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : if i4 != 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $b17 = l15 cmp 2147483647L
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $b17 = l15 cmp 2147483647L >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : if $b17 <= 0
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : if $b17 <= 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $r7 = new org.joda.time.field.PreciseDateTimeField
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $r7 = new org.joda.time.field.PreciseDateTimeField >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $r8 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>()
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $r8 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType millisOfSecond()>() >>>>>>>> org.joda.time.DateTimeFieldType.millisOfSecond : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MILLIS_OF_SECOND_TYPE>
org.joda.time.DateTimeFieldType.millisOfSecond : $r0 = <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType MILLIS_OF_SECOND_TYPE> >>>>>>>> org.joda.time.DateTimeFieldType.millisOfSecond : return $r0
org.joda.time.DateTimeFieldType.millisOfSecond : return $r0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $r9 = <org.joda.time.field.MillisDurationField: org.joda.time.DurationField INSTANCE>
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $r9 = <org.joda.time.field.MillisDurationField: org.joda.time.DurationField INSTANCE> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $r10 = virtualinvoke r3.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>()
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $r10 = virtualinvoke r3.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : specialinvoke $r7.<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>($r8, $r9, $r10)
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : specialinvoke $r7.<org.joda.time.field.PreciseDateTimeField: void <init>(org.joda.time.DateTimeFieldType,org.joda.time.DurationField,org.joda.time.DurationField)>($r8, $r9, $r10) >>>>>>>> org.joda.time.field.MillisDurationField.isPrecise : return 1
org.joda.time.field.MillisDurationField.isPrecise : return 1 >>>>>>>> org.joda.time.field.MillisDurationField.getUnitMillis : return 1L
org.joda.time.field.MillisDurationField.getUnitMillis : return 1L >>>>>>>> org.joda.time.field.PreciseDurationField.isPrecise : return 1
org.joda.time.field.PreciseDurationField.isPrecise : return 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : r11 = $r7
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : r11 = $r7 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $i19 = (int) l15
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $i19 = (int) l15 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeField,int)>(r11, $i19)
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeField,int)>(r11, $i19) >>>>>>>> org.joda.time.format.DateTimeParserBucket.saveField : specialinvoke $r2.<org.joda.time.format.DateTimeParserBucket$SavedField: void <init>(org.joda.time.DateTimeField,int)>(r1, i0)
org.joda.time.format.DateTimeParserBucket.saveField : specialinvoke $r2.<org.joda.time.format.DateTimeParserBucket$SavedField: void <init>(org.joda.time.DateTimeField,int)>(r1, i0) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $i20 = i0 + i4
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : $i20 = i0 + i4 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : return $i20
org.joda.time.format.DateTimeFormatterBuilder$Fraction.parseInto : return $i20 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if i2 != i0
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if i2 != i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if z0 == 0
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : if z0 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : $i10 = i3 ^ -1
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : $i10 = i3 ^ -1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : return $i10
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : return $i10 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : z0 = 1
org.joda.time.format.DateTimeFormatterBuilder$MatchingParser.parseInto : z0 = 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $r4 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetParseText>
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $r4 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetParseText> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i10 = virtualinvoke $r4.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i10 = virtualinvoke $r4.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if $i10 != 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if $i10 != 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $r6 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetParseText>
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $r6 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetParseText> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $r7 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetParseText>
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $r7 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetParseText> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i11 = virtualinvoke $r7.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i11 = virtualinvoke $r7.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $z1 = virtualinvoke r2.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, i0, $r6, 0, $i11)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $z1 = virtualinvoke r2.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, i0, $r6, 0, $i11) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if $z1 == 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if $z1 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: void setOffset(java.lang.Integer)>($r8)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: void setOffset(java.lang.Integer)>($r8) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $r9 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetParseText>
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $r9 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetParseText> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i12 = virtualinvoke $r9.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i12 = virtualinvoke $r9.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i13 = i0 + $i12
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i13 = i0 + $i12 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : return $i13
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : return $i13 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $r7 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields>
org.joda.time.format.DateTimeParserBucket.computeMillis : $r7 = r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields> >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.Object clone()>()
org.joda.time.format.DateTimeParserBucket.computeMillis : $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $r9 = (org.joda.time.format.DateTimeParserBucket$SavedField[]) $r8
org.joda.time.format.DateTimeParserBucket.computeMillis : $r9 = (org.joda.time.format.DateTimeParserBucket$SavedField[]) $r8 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $r10 = (org.joda.time.format.DateTimeParserBucket$SavedField[]) $r9
org.joda.time.format.DateTimeParserBucket.computeMillis : $r10 = (org.joda.time.format.DateTimeParserBucket$SavedField[]) $r9 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : r2 = $r10
org.joda.time.format.DateTimeParserBucket.computeMillis : r2 = $r10 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields> = $r10
org.joda.time.format.DateTimeParserBucket.computeMillis : r0.<org.joda.time.format.DateTimeParserBucket: org.joda.time.format.DateTimeParserBucket$SavedField[] iSavedFields> = $r10 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : r0.<org.joda.time.format.DateTimeParserBucket: boolean iSavedFieldsShared> = 0
org.joda.time.format.DateTimeParserBucket.computeMillis : r0.<org.joda.time.format.DateTimeParserBucket: boolean iSavedFieldsShared> = 0 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.getRangeDurationField : return null
org.joda.time.chrono.BasicYearDateTimeField.getRangeDurationField : return null >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getRangeDurationField : $r2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField years()>()
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getRangeDurationField : $r2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField years()>() >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.getRangeDurationField : return $r2
org.joda.time.chrono.BasicMonthOfYearDateTimeField.getRangeDurationField : return $r2 >>>>>>>> org.joda.time.format.DateTimeParserBucket.compareReverse : $z1 = virtualinvoke r1.<org.joda.time.DurationField: boolean isSupported()>()
org.joda.time.format.DateTimeParserBucket.compareReverse : $z1 = virtualinvoke r1.<org.joda.time.DurationField: boolean isSupported()>() >>>>>>>> org.joda.time.format.DateTimeParserBucket.compareReverse : if $z1 != 0
org.joda.time.format.DateTimeParserBucket.compareReverse : if $z1 != 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.compareReverse : return -1
org.joda.time.format.DateTimeParserBucket.compareReverse : return -1 >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getRangeDurationField : $r1 = r0.<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.getRangeDurationField : $r2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField months()>()
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getRangeDurationField : $r2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: org.joda.time.DurationField months()>() >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.getRangeDurationField : return $r2
org.joda.time.chrono.BasicDayOfMonthDateTimeField.getRangeDurationField : return $r2 >>>>>>>> org.joda.time.field.ImpreciseDateTimeField.getDurationField : $r1 = r0.<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField iDurationField>
org.joda.time.field.ImpreciseDateTimeField.getDurationField : $r1 = r0.<org.joda.time.field.ImpreciseDateTimeField: org.joda.time.DurationField iDurationField> >>>>>>>> org.joda.time.field.ImpreciseDateTimeField.getDurationField : return $r1
org.joda.time.field.ImpreciseDateTimeField.getDurationField : return $r1 >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedField.set : $r6 = r0.<org.joda.time.format.DateTimeParserBucket$SavedField: org.joda.time.DateTimeField iField>
org.joda.time.format.DateTimeParserBucket$SavedField.set : $r6 = r0.<org.joda.time.format.DateTimeParserBucket$SavedField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.format.DateTimeParserBucket$SavedField.set : l2 = virtualinvoke $r6.<org.joda.time.DateTimeField: long roundFloor(long)>(l2)
org.joda.time.format.DateTimeParserBucket$SavedField.set : l2 = virtualinvoke $r6.<org.joda.time.DateTimeField: long roundFloor(long)>(l2) >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.roundFloor : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.roundFloor : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.roundFloor : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>(l0)
org.joda.time.chrono.BasicYearDateTimeField.roundFloor : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.roundFloor : $l2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>($i1)
org.joda.time.chrono.BasicYearDateTimeField.roundFloor : $l2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>($i1) >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.roundFloor : return $l2
org.joda.time.chrono.BasicYearDateTimeField.roundFloor : return $l2 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.roundFloor : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.roundFloor : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.roundFloor : i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.roundFloor : i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.roundFloor : $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.roundFloor : $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.roundFloor : i2 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i1)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.roundFloor : i2 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i1) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.roundFloor : $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.roundFloor : $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.roundFloor : $l3 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: long getYearMonthMillis(int,int)>(i1, i2)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.roundFloor : $l3 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: long getYearMonthMillis(int,int)>(i1, i2) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.roundFloor : return $l3
org.joda.time.chrono.BasicMonthOfYearDateTimeField.roundFloor : return $l3 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $b1 = l0 cmp 0L
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $b1 = l0 cmp 0L >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : if $b1 < 0
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : if $b1 < 0 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : l5 = l0 + 1L
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : l5 = l0 + 1L >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l6 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l6 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l7 = l5 % $l6
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l7 = l5 % $l6 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l8 = l5 - $l7
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l8 = l5 - $l7 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l9 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l9 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l10 = $l8 - $l9
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l10 = $l8 - $l9 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : return $l10
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : return $l10 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $r19 = r2[i7]
org.joda.time.format.DateTimeParserBucket.computeMillis : $r19 = r2[i7] >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $l8 = l5
org.joda.time.format.DateTimeParserBucket.computeMillis : $l8 = l5 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $i9 = i0 - 1
org.joda.time.format.DateTimeParserBucket.computeMillis : $i9 = i0 - 1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : if i7 != $i9
org.joda.time.format.DateTimeParserBucket.computeMillis : if i7 != $i9 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $z2 = 0
org.joda.time.format.DateTimeParserBucket.computeMillis : $z2 = 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : l5 = virtualinvoke $r19.<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>($l8, $z2)
org.joda.time.format.DateTimeParserBucket.computeMillis : l5 = virtualinvoke $r19.<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>($l8, $z2) >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : i7 = i7 + 1
org.joda.time.format.DateTimeParserBucket.computeMillis : i7 = i7 + 1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : $z2 = 1
org.joda.time.format.DateTimeParserBucket.computeMillis : $z2 = 1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.computeMillis : goto [?= l5 = virtualinvoke $r19.<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>($l8, $z2)]
org.joda.time.format.DateTimeParserBucket.computeMillis : goto [?= l5 = virtualinvoke $r19.<org.joda.time.format.DateTimeParserBucket$SavedField: long set(long,boolean)>($l8, $z2)] >>>>>>>> org.joda.time.convert.StringConverter.getInstantMillis : return $l0
org.joda.time.convert.StringConverter.getInstantMillis : return $l0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : i3 = i1 ^ -1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : i3 = i1 ^ -1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : $i4 = lengthof r1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : $i4 = lengthof r1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : if i3 >= $i4
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : if i3 >= $i4 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : if i3 <= 0
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : if i3 <= 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iStandardOffsets>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : $r3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: int[] iStandardOffsets> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : $i5 = i3 - 1
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : $i5 = i3 - 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : $i6 = $r3[$i5]
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : $i6 = $r3[$i5] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : return $i6
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : return $i6 >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getStandardOffset : $r2 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: org.joda.time.tz.CachedDateTimeZone$Info iNextInfo>
org.joda.time.tz.CachedDateTimeZone$Info.getStandardOffset : $r2 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: org.joda.time.tz.CachedDateTimeZone$Info iNextInfo> >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getStandardOffset : $l1 = $r2.<org.joda.time.tz.CachedDateTimeZone$Info: long iPeriodStart>
org.joda.time.tz.CachedDateTimeZone$Info.getStandardOffset : $l1 = $r2.<org.joda.time.tz.CachedDateTimeZone$Info: long iPeriodStart> >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getStandardOffset : $b2 = l0 cmp $l1
org.joda.time.tz.CachedDateTimeZone$Info.getStandardOffset : $b2 = l0 cmp $l1 >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getStandardOffset : if $b2 >= 0
org.joda.time.tz.CachedDateTimeZone$Info.getStandardOffset : if $b2 >= 0 >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getStandardOffset : $r4 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: org.joda.time.tz.CachedDateTimeZone$Info iNextInfo>
org.joda.time.tz.CachedDateTimeZone$Info.getStandardOffset : $r4 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: org.joda.time.tz.CachedDateTimeZone$Info iNextInfo> >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getStandardOffset : $i7 = virtualinvoke $r4.<org.joda.time.tz.CachedDateTimeZone$Info: int getStandardOffset(long)>(l0)
org.joda.time.tz.CachedDateTimeZone$Info.getStandardOffset : $i7 = virtualinvoke $r4.<org.joda.time.tz.CachedDateTimeZone$Info: int getStandardOffset(long)>(l0) >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getStandardOffset : return $i7
org.joda.time.tz.CachedDateTimeZone$Info.getStandardOffset : return $i7 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l2 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l2 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l3 = l0 % $l2
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l3 = l0 % $l2 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l4 = l0 - $l3
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l4 = l0 - $l3 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : return $l4
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : return $l4 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : $r4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : $r4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : if $r4 != null
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : if $r4 != null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : $r6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone>
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : $r6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone: org.joda.time.tz.DateTimeZoneBuilder$DSTZone iTailZone> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : $i9 = virtualinvoke $r6.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getStandardOffset(long)>(l0)
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : $i9 = virtualinvoke $r6.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int getStandardOffset(long)>(l0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.getStandardOffset : $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset>
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.getStandardOffset : $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$DSTZone.getStandardOffset : return $i1
org.joda.time.tz.DateTimeZoneBuilder$DSTZone.getStandardOffset : return $i1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : return $i9
org.joda.time.tz.DateTimeZoneBuilder$PrecalculatedZone.getStandardOffset : return $i9 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 6
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 6 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 7
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 7 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 12825000
