org.joda.time.chrono.ISOChronology.getInstance : $r0 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>() >>>>>>>> org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> >>>>>>>> org.joda.time.DateTimeZone.getDefault : if r0 != null
org.joda.time.DateTimeZone.getDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.DateTimeZone.getDefault : return r0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r0)
org.joda.time.chrono.ISOChronology.getInstance : $r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstance(org.joda.time.DateTimeZone)>($r0) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if r0 != null
org.joda.time.chrono.ISOChronology.getInstance : if r0 != null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0)
org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : i0 = $i1 & 63
org.joda.time.chrono.ISOChronology.getInstance : i0 = $i1 & 63 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache>
org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache> >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : r1 = $r5[i0]
org.joda.time.chrono.ISOChronology.getInstance : r1 = $r5[i0] >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if r1 == null
org.joda.time.chrono.ISOChronology.getInstance : if r1 == null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r6 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.ISOChronology.getInstance : $r6 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2
org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null
org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.ZonedChronology.getZone : $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: java.lang.Object getParam()>()
org.joda.time.chrono.ZonedChronology.getZone : $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: java.lang.Object getParam()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getParam : $r1 = r0.<org.joda.time.chrono.AssembledChronology: java.lang.Object iParam>
org.joda.time.chrono.AssembledChronology.getParam : $r1 = r0.<org.joda.time.chrono.AssembledChronology: java.lang.Object iParam> >>>>>>>> org.joda.time.chrono.AssembledChronology.getParam : return $r1
org.joda.time.chrono.AssembledChronology.getParam : return $r1 >>>>>>>> org.joda.time.chrono.ZonedChronology.getZone : $r2 = (org.joda.time.DateTimeZone) $r1
org.joda.time.chrono.ZonedChronology.getZone : $r2 = (org.joda.time.DateTimeZone) $r1 >>>>>>>> org.joda.time.chrono.ZonedChronology.getZone : return $r2
org.joda.time.chrono.ZonedChronology.getZone : return $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : return $r3
org.joda.time.chrono.AssembledChronology.getZone : return $r3 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0
org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : return r1
org.joda.time.chrono.ISOChronology.getInstance : return r1 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : return $r1
org.joda.time.chrono.ISOChronology.getInstance : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology.secondOfMinute : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfMinute>
org.joda.time.chrono.AssembledChronology.secondOfMinute : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfMinute> >>>>>>>> org.joda.time.chrono.AssembledChronology.secondOfMinute : return $r1
org.joda.time.chrono.AssembledChronology.secondOfMinute : return $r1 >>>>>>>> org.joda.time.field.BaseDateTimeField.getType : $r1 = r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType iType>
org.joda.time.field.BaseDateTimeField.getType : $r1 = r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType iType> >>>>>>>> org.joda.time.field.BaseDateTimeField.getType : return $r1
org.joda.time.field.BaseDateTimeField.getType : return $r1 >>>>>>>> org.joda.time.field.BaseDateTimeField.isSupported : return 1
org.joda.time.field.BaseDateTimeField.isSupported : return 1 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMinimumValue : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMinimumValue : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMinimumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMinimumValue()>()
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMinimumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMinimumValue()>() >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getMinimumValue : return 0
org.joda.time.field.PreciseDurationDateTimeField.getMinimumValue : return 0 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMinimumValue : return $i0
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMinimumValue : return $i0 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMaximumValue : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMaximumValue()>()
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMaximumValue : $i0 = virtualinvoke $r1.<org.joda.time.DateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.field.PreciseDateTimeField.getMaximumValue : $i0 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange>
org.joda.time.field.PreciseDateTimeField.getMaximumValue : $i0 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange> >>>>>>>> org.joda.time.field.PreciseDateTimeField.getMaximumValue : $i1 = $i0 - 1
org.joda.time.field.PreciseDateTimeField.getMaximumValue : $i1 = $i0 - 1 >>>>>>>> org.joda.time.field.PreciseDateTimeField.getMaximumValue : return $i1
org.joda.time.field.PreciseDateTimeField.getMaximumValue : return $i1 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMaximumValue : return $i0
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getMaximumValue : return $i0 >>>>>>>> org.joda.time.field.OffsetDateTimeField.roundHalfFloor : $r1 = virtualinvoke r0.<org.joda.time.field.OffsetDateTimeField: org.joda.time.DateTimeField getWrappedField()>()
org.joda.time.field.OffsetDateTimeField.roundHalfFloor : $r1 = virtualinvoke r0.<org.joda.time.field.OffsetDateTimeField: org.joda.time.DateTimeField getWrappedField()>() >>>>>>>> org.joda.time.field.DecoratedDateTimeField.getWrappedField : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DecoratedDateTimeField.getWrappedField : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.field.DecoratedDateTimeField.getWrappedField : return $r1
org.joda.time.field.DecoratedDateTimeField.getWrappedField : return $r1 >>>>>>>> org.joda.time.field.OffsetDateTimeField.roundHalfFloor : $l1 = virtualinvoke $r1.<org.joda.time.DateTimeField: long roundHalfFloor(long)>(l0)
org.joda.time.field.OffsetDateTimeField.roundHalfFloor : $l1 = virtualinvoke $r1.<org.joda.time.DateTimeField: long roundHalfFloor(long)>(l0) >>>>>>>> org.joda.time.field.BaseDateTimeField.roundHalfFloor : l1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long roundFloor(long)>(l0)
org.joda.time.field.BaseDateTimeField.roundHalfFloor : l1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long roundFloor(long)>(l0) >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : $z0 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean iTimeField>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : $z0 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean iTimeField> >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : if $z0 == 0
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : if $z0 == 0 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : i1 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>(l0)
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : i1 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>(l0) >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getOffsetToAdd : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getOffsetToAdd : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getOffsetToAdd : i1 = virtualinvoke $r1.<org.joda.time.DateTimeZone: int getOffset(long)>(l0)
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getOffsetToAdd : i1 = virtualinvoke $r1.<org.joda.time.DateTimeZone: int getOffset(long)>(l0) >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getOffset : $r1 = specialinvoke r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info getInfo(long)>(l0)
org.joda.time.tz.CachedDateTimeZone.getOffset : $r1 = specialinvoke r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info getInfo(long)>(l0) >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getInfo : $l4 = l0 >> 32
org.joda.time.tz.CachedDateTimeZone.getInfo : $l4 = l0 >> 32 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getInfo : i1 = (int) $l4
org.joda.time.tz.CachedDateTimeZone.getInfo : i1 = (int) $l4 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getInfo : r1 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info[] iInfoCache>
org.joda.time.tz.CachedDateTimeZone.getInfo : r1 = r0.<org.joda.time.tz.CachedDateTimeZone: org.joda.time.tz.CachedDateTimeZone$Info[] iInfoCache> >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getInfo : $i2 = <org.joda.time.tz.CachedDateTimeZone: int cInfoCacheMask>
org.joda.time.tz.CachedDateTimeZone.getInfo : $i2 = <org.joda.time.tz.CachedDateTimeZone: int cInfoCacheMask> >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getInfo : i3 = i1 & $i2
org.joda.time.tz.CachedDateTimeZone.getInfo : i3 = i1 & $i2 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getInfo : r2 = r1[i3]
org.joda.time.tz.CachedDateTimeZone.getInfo : r2 = r1[i3] >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getInfo : if r2 == null
org.joda.time.tz.CachedDateTimeZone.getInfo : if r2 == null >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getInfo : $l5 = r2.<org.joda.time.tz.CachedDateTimeZone$Info: long iPeriodStart>
org.joda.time.tz.CachedDateTimeZone.getInfo : $l5 = r2.<org.joda.time.tz.CachedDateTimeZone$Info: long iPeriodStart> >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getInfo : $l6 = $l5 >> 32
org.joda.time.tz.CachedDateTimeZone.getInfo : $l6 = $l5 >> 32 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getInfo : $i7 = (int) $l6
org.joda.time.tz.CachedDateTimeZone.getInfo : $i7 = (int) $l6 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getInfo : if $i7 == i1
org.joda.time.tz.CachedDateTimeZone.getInfo : if $i7 == i1 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getInfo : return r2
org.joda.time.tz.CachedDateTimeZone.getInfo : return r2 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getOffset : $i1 = virtualinvoke $r1.<org.joda.time.tz.CachedDateTimeZone$Info: int getOffset(long)>(l0)
org.joda.time.tz.CachedDateTimeZone.getOffset : $i1 = virtualinvoke $r1.<org.joda.time.tz.CachedDateTimeZone$Info: int getOffset(long)>(l0) >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getOffset : $r1 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: org.joda.time.tz.CachedDateTimeZone$Info iNextInfo>
org.joda.time.tz.CachedDateTimeZone$Info.getOffset : $r1 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: org.joda.time.tz.CachedDateTimeZone$Info iNextInfo> >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getOffset : if $r1 == null
org.joda.time.tz.CachedDateTimeZone$Info.getOffset : if $r1 == null >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getOffset : $i3 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: int iOffset>
org.joda.time.tz.CachedDateTimeZone$Info.getOffset : $i3 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: int iOffset> >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getOffset : if $i3 != -2147483648
org.joda.time.tz.CachedDateTimeZone$Info.getOffset : if $i3 != -2147483648 >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getOffset : $i6 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: int iOffset>
org.joda.time.tz.CachedDateTimeZone$Info.getOffset : $i6 = r0.<org.joda.time.tz.CachedDateTimeZone$Info: int iOffset> >>>>>>>> org.joda.time.tz.CachedDateTimeZone$Info.getOffset : return $i6
org.joda.time.tz.CachedDateTimeZone$Info.getOffset : return $i6 >>>>>>>> org.joda.time.tz.CachedDateTimeZone.getOffset : return $i1
org.joda.time.tz.CachedDateTimeZone.getOffset : return $i1 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getOffsetToAdd : $l3 = (long) i1
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getOffsetToAdd : $l3 = (long) i1 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getOffsetToAdd : l2 = l0 + $l3
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getOffsetToAdd : l2 = l0 + $l3 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getOffsetToAdd : $l4 = l0 ^ l2
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getOffsetToAdd : $l4 = l0 ^ l2 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getOffsetToAdd : $b5 = $l4 cmp 0L
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getOffsetToAdd : $b5 = $l4 cmp 0L >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getOffsetToAdd : if $b5 >= 0
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getOffsetToAdd : if $b5 >= 0 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getOffsetToAdd : $l6 = (long) i1
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getOffsetToAdd : $l6 = (long) i1 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getOffsetToAdd : $l7 = l0 ^ $l6
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getOffsetToAdd : $l7 = l0 ^ $l6 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getOffsetToAdd : $b8 = $l7 cmp 0L
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getOffsetToAdd : $b8 = $l7 cmp 0L >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getOffsetToAdd : if $b8 < 0
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getOffsetToAdd : if $b8 < 0 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getOffsetToAdd : return i1
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getOffsetToAdd : return i1 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : $l2 = (long) i1
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : $l2 = (long) i1 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : $l3 = l0 + $l2
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : $l3 = l0 + $l2 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : l4 = virtualinvoke $r1.<org.joda.time.DateTimeField: long roundFloor(long)>($l3)
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : l4 = virtualinvoke $r1.<org.joda.time.DateTimeField: long roundFloor(long)>($l3) >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $b1 = l0 cmp 0L
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $b1 = l0 cmp 0L >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : if $b1 < 0
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : if $b1 < 0 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : l5 = l0 + 1L
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : l5 = l0 + 1L >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l6 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l6 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l7 = l5 % $l6
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l7 = l5 % $l6 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l8 = l5 - $l7
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l8 = l5 - $l7 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l9 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l9 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l10 = $l8 - $l9
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : $l10 = $l8 - $l9 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundFloor : return $l10
org.joda.time.field.PreciseDurationDateTimeField.roundFloor : return $l10 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : $l5 = (long) i1
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : $l5 = (long) i1 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : $l6 = l4 - $l5
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : $l6 = l4 - $l5 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : return $l6
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundFloor : return $l6 >>>>>>>> org.joda.time.field.BaseDateTimeField.roundHalfFloor : l2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>(l0)
org.joda.time.field.BaseDateTimeField.roundHalfFloor : l2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: long roundCeiling(long)>(l0) >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundCeiling : $z0 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean iTimeField>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundCeiling : $z0 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: boolean iTimeField> >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundCeiling : if $z0 == 0
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundCeiling : if $z0 == 0 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundCeiling : i1 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>(l0)
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundCeiling : i1 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: int getOffsetToAdd(long)>(l0) >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundCeiling : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundCeiling : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundCeiling : $l2 = (long) i1
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundCeiling : $l2 = (long) i1 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundCeiling : $l3 = l0 + $l2
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundCeiling : $l3 = l0 + $l2 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundCeiling : l4 = virtualinvoke $r1.<org.joda.time.DateTimeField: long roundCeiling(long)>($l3)
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundCeiling : l4 = virtualinvoke $r1.<org.joda.time.DateTimeField: long roundCeiling(long)>($l3) >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundCeiling : $b1 = l0 cmp 0L
org.joda.time.field.PreciseDurationDateTimeField.roundCeiling : $b1 = l0 cmp 0L >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundCeiling : if $b1 <= 0
org.joda.time.field.PreciseDurationDateTimeField.roundCeiling : if $b1 <= 0 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundCeiling : $l8 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDurationDateTimeField.roundCeiling : $l8 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundCeiling : $l9 = l0 % $l8
org.joda.time.field.PreciseDurationDateTimeField.roundCeiling : $l9 = l0 % $l8 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundCeiling : $l10 = l0 - $l9
org.joda.time.field.PreciseDurationDateTimeField.roundCeiling : $l10 = l0 - $l9 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.roundCeiling : return $l10
org.joda.time.field.PreciseDurationDateTimeField.roundCeiling : return $l10 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundCeiling : $l5 = (long) i1
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundCeiling : $l5 = (long) i1 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundCeiling : $l6 = l4 - $l5
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundCeiling : $l6 = l4 - $l5 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundCeiling : return $l6
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.roundCeiling : return $l6 >>>>>>>> org.joda.time.field.BaseDateTimeField.roundHalfFloor : l3 = l0 - l1
org.joda.time.field.BaseDateTimeField.roundHalfFloor : l3 = l0 - l1 >>>>>>>> org.joda.time.field.BaseDateTimeField.roundHalfFloor : l4 = l2 - l0
org.joda.time.field.BaseDateTimeField.roundHalfFloor : l4 = l2 - l0 >>>>>>>> org.joda.time.field.BaseDateTimeField.roundHalfFloor : $b5 = l3 cmp l4
org.joda.time.field.BaseDateTimeField.roundHalfFloor : $b5 = l3 cmp l4 >>>>>>>> org.joda.time.field.BaseDateTimeField.roundHalfFloor : if $b5 > 0
org.joda.time.field.BaseDateTimeField.roundHalfFloor : if $b5 > 0 >>>>>>>> org.joda.time.field.BaseDateTimeField.roundHalfFloor : return l1
org.joda.time.field.BaseDateTimeField.roundHalfFloor : return l1 >>>>>>>> org.joda.time.field.OffsetDateTimeField.roundHalfFloor : return $l1
org.joda.time.field.OffsetDateTimeField.roundHalfFloor : return $l1 >>>>>>>> org.joda.time.field.BaseDateTimeField.roundHalfFloor : return l2
