org.joda.time.DateTimeUtils.setCurrentMillisSystem : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>() >>>>>>>> org.joda.time.DateTimeUtils.checkPermission : r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>()
org.joda.time.DateTimeUtils.checkPermission : r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>() >>>>>>>> org.joda.time.DateTimeUtils.checkPermission : if r0 == null
org.joda.time.DateTimeUtils.checkPermission : if r0 == null >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisSystem : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$SystemMillisProvider SYSTEM_MILLIS_PROVIDER>
org.joda.time.DateTimeUtils.setCurrentMillisSystem : $r0 = <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$SystemMillisProvider SYSTEM_MILLIS_PROVIDER> >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisSystem : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0
org.joda.time.DateTimeUtils.setCurrentMillisSystem : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0 >>>>>>>> org.joda.time.DateTimeZone.setDefault : r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>()
org.joda.time.DateTimeZone.setDefault : r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>() >>>>>>>> org.joda.time.DateTimeZone.setDefault : if r1 == null
org.joda.time.DateTimeZone.setDefault : if r1 == null >>>>>>>> org.joda.time.DateTimeZone.setDefault : if r0 != null
org.joda.time.DateTimeZone.setDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.setDefault : $r6 = class "org/joda/time/DateTimeZone"
org.joda.time.DateTimeZone.setDefault : $r6 = class "org/joda/time/DateTimeZone" >>>>>>>> org.joda.time.DateTimeZone.setDefault : r3 = $r6
org.joda.time.DateTimeZone.setDefault : r3 = $r6 >>>>>>>> org.joda.time.DateTimeZone.setDefault : entermonitor $r6
org.joda.time.DateTimeZone.setDefault : entermonitor $r6 >>>>>>>> org.joda.time.DateTimeZone.setDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r0
org.joda.time.DateTimeZone.setDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r0 >>>>>>>> org.joda.time.DateTimeZone.setDefault : exitmonitor r3
org.joda.time.DateTimeZone.setDefault : exitmonitor r3 >>>>>>>> org.joda.time.DateTimeZone.setDefault : goto [?= return]
org.joda.time.DateTimeZone.setDefault : goto [?= return] >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>()
org.joda.time.DateTimeUtils.setCurrentMillisFixed : staticinvoke <org.joda.time.DateTimeUtils: void checkPermission()>() >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : $r0 = new org.joda.time.DateTimeUtils$FixedMillisProvider
org.joda.time.DateTimeUtils.setCurrentMillisFixed : $r0 = new org.joda.time.DateTimeUtils$FixedMillisProvider >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : specialinvoke $r0.<org.joda.time.DateTimeUtils$FixedMillisProvider: void <init>(long)>(l0)
org.joda.time.DateTimeUtils.setCurrentMillisFixed : specialinvoke $r0.<org.joda.time.DateTimeUtils$FixedMillisProvider: void <init>(long)>(l0) >>>>>>>> org.joda.time.DateTimeUtils.setCurrentMillisFixed : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0
org.joda.time.DateTimeUtils.setCurrentMillisFixed : <org.joda.time.DateTimeUtils: org.joda.time.DateTimeUtils$MillisProvider cMillisProvider> = $r0 >>>>>>>> org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault>
org.joda.time.DateTimeZone.getDefault : r0 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> >>>>>>>> org.joda.time.DateTimeZone.getDefault : if r0 != null
org.joda.time.DateTimeZone.getDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.getDefault : return r0
org.joda.time.DateTimeZone.getDefault : return r0 >>>>>>>> org.joda.time.base.AbstractPartial.getValues : $i1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int size()>()
org.joda.time.base.AbstractPartial.getValues : $i1 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int size()>() >>>>>>>> org.joda.time.TestAbstractPartial$MockPartial.size : return 2
org.joda.time.TestAbstractPartial$MockPartial.size : return 2 >>>>>>>> org.joda.time.base.AbstractPartial.getValues : r1 = newarray (int)[$i1]
org.joda.time.base.AbstractPartial.getValues : r1 = newarray (int)[$i1] >>>>>>>> org.joda.time.base.AbstractPartial.getValues : i0 = 0
org.joda.time.base.AbstractPartial.getValues : i0 = 0 >>>>>>>> org.joda.time.base.AbstractPartial.getValues : $i2 = lengthof r1
org.joda.time.base.AbstractPartial.getValues : $i2 = lengthof r1 >>>>>>>> org.joda.time.base.AbstractPartial.getValues : if i0 >= $i2
org.joda.time.base.AbstractPartial.getValues : if i0 >= $i2 >>>>>>>> org.joda.time.base.AbstractPartial.getValues : $i3 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int getValue(int)>(i0)
org.joda.time.base.AbstractPartial.getValues : $i3 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int getValue(int)>(i0) >>>>>>>> org.joda.time.TestAbstractPartial$MockPartial.getValue : $r1 = r0.<org.joda.time.TestAbstractPartial$MockPartial: int[] val>
org.joda.time.TestAbstractPartial$MockPartial.getValue : $r1 = r0.<org.joda.time.TestAbstractPartial$MockPartial: int[] val> >>>>>>>> org.joda.time.TestAbstractPartial$MockPartial.getValue : $i1 = $r1[i0]
org.joda.time.TestAbstractPartial$MockPartial.getValue : $i1 = $r1[i0] >>>>>>>> org.joda.time.TestAbstractPartial$MockPartial.getValue : return $i1
org.joda.time.TestAbstractPartial$MockPartial.getValue : return $i1 >>>>>>>> org.joda.time.base.AbstractPartial.getValues : r1[i0] = $i3
org.joda.time.base.AbstractPartial.getValues : r1[i0] = $i3 >>>>>>>> org.joda.time.base.AbstractPartial.getValues : i0 = i0 + 1
org.joda.time.base.AbstractPartial.getValues : i0 = i0 + 1 >>>>>>>> org.joda.time.base.AbstractPartial.getValues : goto [?= $i2 = lengthof r1]
org.joda.time.base.AbstractPartial.getValues : goto [?= $i2 = lengthof r1] >>>>>>>> org.joda.time.base.AbstractPartial.getValues : return r1
