org.joda.time.chrono.ISOChronology.getInstance : if r0 != null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0)
org.joda.time.chrono.ISOChronology.getInstance : $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0) >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : i0 = $i1 & 63
org.joda.time.chrono.ISOChronology.getInstance : i0 = $i1 & 63 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache>
org.joda.time.chrono.ISOChronology.getInstance : $r5 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology[] cFastCache> >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : r1 = $r5[i0]
org.joda.time.chrono.ISOChronology.getInstance : r1 = $r5[i0] >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if r1 == null
org.joda.time.chrono.ISOChronology.getInstance : if r1 == null >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : $r6 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.ISOChronology.getInstance : $r6 = virtualinvoke r1.<org.joda.time.chrono.ISOChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getZone : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2
org.joda.time.chrono.AssembledChronology.getZone : r1 = $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null
org.joda.time.chrono.AssembledChronology.getZone : if $r2 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.AssembledChronology.getZone : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.ZonedChronology.getZone : $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: java.lang.Object getParam()>()
org.joda.time.chrono.ZonedChronology.getZone : $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: java.lang.Object getParam()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getParam : $r1 = r0.<org.joda.time.chrono.AssembledChronology: java.lang.Object iParam>
org.joda.time.chrono.AssembledChronology.getParam : $r1 = r0.<org.joda.time.chrono.AssembledChronology: java.lang.Object iParam> >>>>>>>> org.joda.time.chrono.AssembledChronology.getParam : return $r1
org.joda.time.chrono.AssembledChronology.getParam : return $r1 >>>>>>>> org.joda.time.chrono.ZonedChronology.getZone : $r2 = (org.joda.time.DateTimeZone) $r1
org.joda.time.chrono.ZonedChronology.getZone : $r2 = (org.joda.time.DateTimeZone) $r1 >>>>>>>> org.joda.time.chrono.ZonedChronology.getZone : return $r2
org.joda.time.chrono.ZonedChronology.getZone : return $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.getZone : return $r3
org.joda.time.chrono.AssembledChronology.getZone : return $r3 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0
org.joda.time.chrono.ISOChronology.getInstance : if $r6 != r0 >>>>>>>> org.joda.time.chrono.ISOChronology.getInstance : return r1
org.joda.time.chrono.ISOChronology.getInstance : return r1 >>>>>>>> org.joda.time.chrono.LenientChronology.getInstance : if r0 != null
org.joda.time.chrono.LenientChronology.getInstance : if r0 != null >>>>>>>> org.joda.time.chrono.LenientChronology.getInstance : $r2 = new org.joda.time.chrono.LenientChronology
org.joda.time.chrono.LenientChronology.getInstance : $r2 = new org.joda.time.chrono.LenientChronology >>>>>>>> org.joda.time.chrono.LenientChronology.getInstance : specialinvoke $r2.<org.joda.time.chrono.LenientChronology: void <init>(org.joda.time.Chronology)>(r0)
org.joda.time.chrono.LenientChronology.getInstance : specialinvoke $r2.<org.joda.time.chrono.LenientChronology: void <init>(org.joda.time.Chronology)>(r0) >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r1 = new org.joda.time.chrono.AssembledChronology$Fields
org.joda.time.chrono.AssembledChronology.setFields : $r1 = new org.joda.time.chrono.AssembledChronology$Fields >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : specialinvoke $r1.<org.joda.time.chrono.AssembledChronology$Fields: void <init>()>()
org.joda.time.chrono.AssembledChronology.setFields : specialinvoke $r1.<org.joda.time.chrono.AssembledChronology$Fields: void <init>()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r2 = $r1
org.joda.time.chrono.AssembledChronology.setFields : r2 = $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r4 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.setFields : $r4 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r4 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r4 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r5 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.setFields : $r5 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : virtualinvoke r2.<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>($r5)
org.joda.time.chrono.AssembledChronology.setFields : virtualinvoke r2.<org.joda.time.chrono.AssembledChronology$Fields: void copyFieldsFrom(org.joda.time.Chronology)>($r5) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField millis()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField millis()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.millis : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMillis>
org.joda.time.chrono.AssembledChronology.millis : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMillis> >>>>>>>> org.joda.time.chrono.AssembledChronology.millis : return $r1
org.joda.time.chrono.AssembledChronology.millis : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r2 = $r3
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r2 = $r3 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z0 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r3)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z0 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r3) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.isSupported : if r0 != null
org.joda.time.chrono.AssembledChronology$Fields.isSupported : if r0 != null >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.isSupported : $z0 = virtualinvoke r0.<org.joda.time.DurationField: boolean isSupported()>()
org.joda.time.chrono.AssembledChronology$Fields.isSupported : $z0 = virtualinvoke r0.<org.joda.time.DurationField: boolean isSupported()>() >>>>>>>> org.joda.time.field.BaseDurationField.isSupported : return 1
org.joda.time.field.BaseDurationField.isSupported : return 1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.isSupported : return $z0
org.joda.time.chrono.AssembledChronology$Fields.isSupported : return $z0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z0 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z0 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField millis> = r2
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField millis> = r2 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField seconds()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r4 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField seconds()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.seconds : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iSeconds>
org.joda.time.chrono.AssembledChronology.seconds : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iSeconds> >>>>>>>> org.joda.time.chrono.AssembledChronology.seconds : return $r1
org.joda.time.chrono.AssembledChronology.seconds : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r5 = $r4
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r5 = $r4 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z1 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r4)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z1 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r4) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z1 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z1 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField seconds> = r5
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField seconds> = r5 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r6 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField minutes()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r6 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField minutes()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.minutes : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMinutes>
org.joda.time.chrono.AssembledChronology.minutes : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMinutes> >>>>>>>> org.joda.time.chrono.AssembledChronology.minutes : return $r1
org.joda.time.chrono.AssembledChronology.minutes : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r7 = $r6
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r7 = $r6 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z2 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r6)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z2 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r6) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z2 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z2 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField minutes> = r7
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField minutes> = r7 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r8 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField hours()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r8 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField hours()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.hours : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHours>
org.joda.time.chrono.AssembledChronology.hours : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHours> >>>>>>>> org.joda.time.chrono.AssembledChronology.hours : return $r1
org.joda.time.chrono.AssembledChronology.hours : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r9 = $r8
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r9 = $r8 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z3 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r8)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z3 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r8) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z3 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z3 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField hours> = r9
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField hours> = r9 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r10 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField halfdays()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r10 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField halfdays()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.halfdays : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHalfdays>
org.joda.time.chrono.AssembledChronology.halfdays : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHalfdays> >>>>>>>> org.joda.time.chrono.AssembledChronology.halfdays : return $r1
org.joda.time.chrono.AssembledChronology.halfdays : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r11 = $r10
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r11 = $r10 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z4 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r10)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z4 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r10) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z4 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z4 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField halfdays> = r11
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField halfdays> = r11 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r12 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField days()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r12 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField days()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.days : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays>
org.joda.time.chrono.AssembledChronology.days : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays> >>>>>>>> org.joda.time.chrono.AssembledChronology.days : return $r1
org.joda.time.chrono.AssembledChronology.days : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r13 = $r12
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r13 = $r12 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z5 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r12)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z5 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r12) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z5 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z5 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days> = r13
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days> = r13 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r14 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField weeks()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r14 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField weeks()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.weeks : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeeks>
org.joda.time.chrono.AssembledChronology.weeks : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeeks> >>>>>>>> org.joda.time.chrono.AssembledChronology.weeks : return $r1
org.joda.time.chrono.AssembledChronology.weeks : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r15 = $r14
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r15 = $r14 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z6 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r14)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z6 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r14) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z6 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z6 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weeks> = r15
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weeks> = r15 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r16 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField weekyears()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r16 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField weekyears()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.weekyears : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeekyears>
org.joda.time.chrono.AssembledChronology.weekyears : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeekyears> >>>>>>>> org.joda.time.chrono.AssembledChronology.weekyears : return $r1
org.joda.time.chrono.AssembledChronology.weekyears : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r17 = $r16
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r17 = $r16 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z7 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r16)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z7 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r16) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z7 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z7 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears> = r17
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears> = r17 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r18 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField months()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r18 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField months()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.months : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMonths>
org.joda.time.chrono.AssembledChronology.months : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMonths> >>>>>>>> org.joda.time.chrono.AssembledChronology.months : return $r1
org.joda.time.chrono.AssembledChronology.months : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r19 = $r18
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r19 = $r18 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z8 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r18)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z8 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r18) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z8 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z8 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months> = r19
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months> = r19 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r20 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField years()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r20 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField years()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.years : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iYears>
org.joda.time.chrono.AssembledChronology.years : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iYears> >>>>>>>> org.joda.time.chrono.AssembledChronology.years : return $r1
org.joda.time.chrono.AssembledChronology.years : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r21 = $r20
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r21 = $r20 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z9 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r20)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z9 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r20) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z9 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z9 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years> = r21
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years> = r21 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r22 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField centuries()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r22 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField centuries()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.centuries : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iCenturies>
org.joda.time.chrono.AssembledChronology.centuries : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iCenturies> >>>>>>>> org.joda.time.chrono.AssembledChronology.centuries : return $r1
org.joda.time.chrono.AssembledChronology.centuries : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r23 = $r22
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r23 = $r22 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z10 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r22)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z10 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r22) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z10 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z10 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries> = r23
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries> = r23 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r24 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField eras()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r24 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DurationField eras()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.eras : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iEras>
org.joda.time.chrono.AssembledChronology.eras : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iEras> >>>>>>>> org.joda.time.chrono.AssembledChronology.eras : return $r1
org.joda.time.chrono.AssembledChronology.eras : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r25 = $r24
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r25 = $r24 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z11 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r24)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z11 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DurationField)>($r24) >>>>>>>> org.joda.time.field.UnsupportedDurationField.isSupported : return 0
org.joda.time.field.UnsupportedDurationField.isSupported : return 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z11 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z11 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r26 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r26 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.millisOfSecond : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfSecond>
org.joda.time.chrono.AssembledChronology.millisOfSecond : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfSecond> >>>>>>>> org.joda.time.chrono.AssembledChronology.millisOfSecond : return $r1
org.joda.time.chrono.AssembledChronology.millisOfSecond : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r27 = $r26
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r27 = $r26 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z12 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r26)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z12 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r26) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.isSupported : $z0 = virtualinvoke r0.<org.joda.time.DateTimeField: boolean isSupported()>()
org.joda.time.chrono.AssembledChronology$Fields.isSupported : $z0 = virtualinvoke r0.<org.joda.time.DateTimeField: boolean isSupported()>() >>>>>>>> org.joda.time.field.BaseDateTimeField.isSupported : return 1
org.joda.time.field.BaseDateTimeField.isSupported : return 1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z12 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z12 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond> = r27
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond> = r27 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r28 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r28 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.millisOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay>
org.joda.time.chrono.AssembledChronology.millisOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.millisOfDay : return $r1
org.joda.time.chrono.AssembledChronology.millisOfDay : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r29 = $r28
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r29 = $r28 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z13 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r28)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z13 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r28) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z13 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z13 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay> = r29
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay> = r29 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r30 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r30 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.secondOfMinute : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfMinute>
org.joda.time.chrono.AssembledChronology.secondOfMinute : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfMinute> >>>>>>>> org.joda.time.chrono.AssembledChronology.secondOfMinute : return $r1
org.joda.time.chrono.AssembledChronology.secondOfMinute : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r31 = $r30
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r31 = $r30 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z14 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r30)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z14 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r30) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z14 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z14 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute> = r31
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute> = r31 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r32 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfDay()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r32 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfDay()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.secondOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfDay>
org.joda.time.chrono.AssembledChronology.secondOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.secondOfDay : return $r1
org.joda.time.chrono.AssembledChronology.secondOfDay : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r33 = $r32
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r33 = $r32 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z15 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r32)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z15 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r32) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z15 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z15 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay> = r33
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay> = r33 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r34 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r34 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.minuteOfHour : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfHour>
org.joda.time.chrono.AssembledChronology.minuteOfHour : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfHour> >>>>>>>> org.joda.time.chrono.AssembledChronology.minuteOfHour : return $r1
org.joda.time.chrono.AssembledChronology.minuteOfHour : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r35 = $r34
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r35 = $r34 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z16 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r34)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z16 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r34) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z16 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z16 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour> = r35
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour> = r35 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r36 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfDay()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r36 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfDay()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.minuteOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfDay>
org.joda.time.chrono.AssembledChronology.minuteOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.minuteOfDay : return $r1
org.joda.time.chrono.AssembledChronology.minuteOfDay : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r37 = $r36
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r37 = $r36 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z17 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r36)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z17 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r36) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z17 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z17 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay> = r37
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay> = r37 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r38 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r38 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.hourOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay>
org.joda.time.chrono.AssembledChronology.hourOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.hourOfDay : return $r1
org.joda.time.chrono.AssembledChronology.hourOfDay : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r39 = $r38
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r39 = $r38 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z18 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r38)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z18 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r38) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z18 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z18 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay> = r39
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay> = r39 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r40 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField clockhourOfDay()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r40 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField clockhourOfDay()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.clockhourOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfDay>
org.joda.time.chrono.AssembledChronology.clockhourOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.clockhourOfDay : return $r1
org.joda.time.chrono.AssembledChronology.clockhourOfDay : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r41 = $r40
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r41 = $r40 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z19 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r40)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z19 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r40) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z19 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z19 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay> = r41
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay> = r41 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r42 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfHalfday()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r42 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfHalfday()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.hourOfHalfday : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfHalfday>
org.joda.time.chrono.AssembledChronology.hourOfHalfday : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfHalfday> >>>>>>>> org.joda.time.chrono.AssembledChronology.hourOfHalfday : return $r1
org.joda.time.chrono.AssembledChronology.hourOfHalfday : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r43 = $r42
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r43 = $r42 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z20 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r42)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z20 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r42) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z20 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z20 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday> = r43
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday> = r43 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r44 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField clockhourOfHalfday()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r44 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField clockhourOfHalfday()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.clockhourOfHalfday : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfHalfday>
org.joda.time.chrono.AssembledChronology.clockhourOfHalfday : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfHalfday> >>>>>>>> org.joda.time.chrono.AssembledChronology.clockhourOfHalfday : return $r1
org.joda.time.chrono.AssembledChronology.clockhourOfHalfday : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r45 = $r44
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r45 = $r44 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z21 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r44)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z21 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r44) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z21 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z21 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday> = r45
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday> = r45 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r46 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField halfdayOfDay()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r46 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField halfdayOfDay()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.halfdayOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHalfdayOfDay>
org.joda.time.chrono.AssembledChronology.halfdayOfDay : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHalfdayOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.halfdayOfDay : return $r1
org.joda.time.chrono.AssembledChronology.halfdayOfDay : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r47 = $r46
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r47 = $r46 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z22 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r46)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z22 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r46) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z22 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z22 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay> = r47
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay> = r47 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r48 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r48 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfWeek : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfWeek>
org.joda.time.chrono.AssembledChronology.dayOfWeek : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfWeek> >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfWeek : return $r1
org.joda.time.chrono.AssembledChronology.dayOfWeek : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r49 = $r48
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r49 = $r48 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z23 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r48)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z23 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r48) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z23 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z23 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek> = r49
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek> = r49 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r50 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r50 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfMonth : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth>
org.joda.time.chrono.AssembledChronology.dayOfMonth : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth> >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfMonth : return $r1
org.joda.time.chrono.AssembledChronology.dayOfMonth : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r51 = $r50
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r51 = $r50 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z24 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r50)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z24 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r50) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z24 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z24 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth> = r51
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth> = r51 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r52 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfYear()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r52 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfYear()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfYear>
org.joda.time.chrono.AssembledChronology.dayOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.dayOfYear : return $r1
org.joda.time.chrono.AssembledChronology.dayOfYear : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r53 = $r52
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r53 = $r52 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z25 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r52)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z25 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r52) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z25 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z25 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear> = r53
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear> = r53 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r54 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekOfWeekyear()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r54 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekOfWeekyear()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.weekOfWeekyear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekOfWeekyear>
org.joda.time.chrono.AssembledChronology.weekOfWeekyear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekOfWeekyear> >>>>>>>> org.joda.time.chrono.AssembledChronology.weekOfWeekyear : return $r1
org.joda.time.chrono.AssembledChronology.weekOfWeekyear : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r55 = $r54
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r55 = $r54 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z26 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r54)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z26 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r54) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z26 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z26 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear> = r55
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear> = r55 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r56 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekyear()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r56 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekyear()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.weekyear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyear>
org.joda.time.chrono.AssembledChronology.weekyear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyear> >>>>>>>> org.joda.time.chrono.AssembledChronology.weekyear : return $r1
org.joda.time.chrono.AssembledChronology.weekyear : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r57 = $r56
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r57 = $r56 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z27 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r56)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z27 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r56) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z27 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z27 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> = r57
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> = r57 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r58 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekyearOfCentury()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r58 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField weekyearOfCentury()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.weekyearOfCentury : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyearOfCentury>
org.joda.time.chrono.AssembledChronology.weekyearOfCentury : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyearOfCentury> >>>>>>>> org.joda.time.chrono.AssembledChronology.weekyearOfCentury : return $r1
org.joda.time.chrono.AssembledChronology.weekyearOfCentury : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r59 = $r58
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r59 = $r58 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z28 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r58)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z28 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r58) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z28 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z28 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> = r59
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> = r59 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r60 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r60 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.monthOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear>
org.joda.time.chrono.AssembledChronology.monthOfYear : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.monthOfYear : return $r1
org.joda.time.chrono.AssembledChronology.monthOfYear : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r61 = $r60
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r61 = $r60 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z29 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r60)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z29 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r60) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z29 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z29 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> = r61
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> = r61 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r62 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r62 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.year : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear>
org.joda.time.chrono.AssembledChronology.year : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.year : return $r1
org.joda.time.chrono.AssembledChronology.year : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r63 = $r62
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r63 = $r62 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z30 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r62)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z30 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r62) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z30 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z30 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> = r63
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> = r63 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r64 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField yearOfEra()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r64 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField yearOfEra()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.yearOfEra : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfEra>
org.joda.time.chrono.AssembledChronology.yearOfEra : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfEra> >>>>>>>> org.joda.time.chrono.AssembledChronology.yearOfEra : return $r1
org.joda.time.chrono.AssembledChronology.yearOfEra : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r65 = $r64
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r65 = $r64 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z31 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r64)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z31 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r64) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z31 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z31 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> = r65
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> = r65 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r66 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField yearOfCentury()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r66 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField yearOfCentury()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.yearOfCentury : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfCentury>
org.joda.time.chrono.AssembledChronology.yearOfCentury : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfCentury> >>>>>>>> org.joda.time.chrono.AssembledChronology.yearOfCentury : return $r1
org.joda.time.chrono.AssembledChronology.yearOfCentury : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r67 = $r66
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r67 = $r66 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z32 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r66)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z32 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r66) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z32 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z32 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> = r67
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> = r67 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r68 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField centuryOfEra()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r68 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField centuryOfEra()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.centuryOfEra : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iCenturyOfEra>
org.joda.time.chrono.AssembledChronology.centuryOfEra : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iCenturyOfEra> >>>>>>>> org.joda.time.chrono.AssembledChronology.centuryOfEra : return $r1
org.joda.time.chrono.AssembledChronology.centuryOfEra : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r69 = $r68
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r69 = $r68 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z33 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r68)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z33 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r68) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z33 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z33 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> = r69
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> = r69 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r70 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField era()>()
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $r70 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField era()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.era : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iEra>
org.joda.time.chrono.AssembledChronology.era : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iEra> >>>>>>>> org.joda.time.chrono.AssembledChronology.era : return $r1
org.joda.time.chrono.AssembledChronology.era : return $r1 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r71 = $r70
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r71 = $r70 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z34 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r70)
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : $z34 = staticinvoke <org.joda.time.chrono.AssembledChronology$Fields: boolean isSupported(org.joda.time.DateTimeField)>($r70) >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z34 == 0
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : if $z34 == 0 >>>>>>>> org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> = r71
org.joda.time.chrono.AssembledChronology$Fields.copyFieldsFrom : r0.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> = r71 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : virtualinvoke r0.<org.joda.time.chrono.AssembledChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>(r2)
org.joda.time.chrono.AssembledChronology.setFields : virtualinvoke r0.<org.joda.time.chrono.AssembledChronology: void assemble(org.joda.time.chrono.AssembledChronology$Fields)>(r2) >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r2 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year>
org.joda.time.chrono.LenientChronology.assemble : $r2 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r3 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r2)
org.joda.time.chrono.LenientChronology.assemble : $r3 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r2) >>>>>>>> org.joda.time.chrono.LenientChronology.convertField : $r2 = virtualinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.LenientChronology.convertField : $r2 = virtualinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology getBase()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getBase : $r1 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getBase : return $r1
org.joda.time.chrono.AssembledChronology.getBase : return $r1 >>>>>>>> org.joda.time.chrono.LenientChronology.convertField : $r3 = staticinvoke <org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)>(r1, $r2)
org.joda.time.chrono.LenientChronology.convertField : $r3 = staticinvoke <org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeField getInstance(org.joda.time.DateTimeField,org.joda.time.Chronology)>(r1, $r2) >>>>>>>> org.joda.time.field.LenientDateTimeField.getInstance : if r0 != null
org.joda.time.field.LenientDateTimeField.getInstance : if r0 != null >>>>>>>> org.joda.time.field.LenientDateTimeField.getInstance : $z0 = r0 instanceof org.joda.time.field.StrictDateTimeField
org.joda.time.field.LenientDateTimeField.getInstance : $z0 = r0 instanceof org.joda.time.field.StrictDateTimeField >>>>>>>> org.joda.time.field.LenientDateTimeField.getInstance : if $z0 == 0
org.joda.time.field.LenientDateTimeField.getInstance : if $z0 == 0 >>>>>>>> org.joda.time.field.LenientDateTimeField.getInstance : $z1 = virtualinvoke r0.<org.joda.time.DateTimeField: boolean isLenient()>()
org.joda.time.field.LenientDateTimeField.getInstance : $z1 = virtualinvoke r0.<org.joda.time.DateTimeField: boolean isLenient()>() >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.isLenient : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.isLenient : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.isLenient : $z0 = virtualinvoke $r1.<org.joda.time.DateTimeField: boolean isLenient()>()
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.isLenient : $z0 = virtualinvoke $r1.<org.joda.time.DateTimeField: boolean isLenient()>() >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.isLenient : return 0
org.joda.time.chrono.BasicYearDateTimeField.isLenient : return 0 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.isLenient : return $z0
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.isLenient : return $z0 >>>>>>>> org.joda.time.field.LenientDateTimeField.getInstance : if $z1 == 0
org.joda.time.field.LenientDateTimeField.getInstance : if $z1 == 0 >>>>>>>> org.joda.time.field.LenientDateTimeField.getInstance : $r3 = new org.joda.time.field.LenientDateTimeField
org.joda.time.field.LenientDateTimeField.getInstance : $r3 = new org.joda.time.field.LenientDateTimeField >>>>>>>> org.joda.time.field.LenientDateTimeField.getInstance : specialinvoke $r3.<org.joda.time.field.LenientDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.Chronology)>(r0, r1)
org.joda.time.field.LenientDateTimeField.getInstance : specialinvoke $r3.<org.joda.time.field.LenientDateTimeField: void <init>(org.joda.time.DateTimeField,org.joda.time.Chronology)>(r0, r1) >>>>>>>> org.joda.time.field.BaseDateTimeField.getType : $r1 = r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType iType>
org.joda.time.field.BaseDateTimeField.getType : $r1 = r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DateTimeFieldType iType> >>>>>>>> org.joda.time.field.BaseDateTimeField.getType : return $r1
org.joda.time.field.BaseDateTimeField.getType : return $r1 >>>>>>>> org.joda.time.field.LenientDateTimeField.getInstance : return $r3
org.joda.time.field.LenientDateTimeField.getInstance : return $r3 >>>>>>>> org.joda.time.chrono.LenientChronology.convertField : return $r3
org.joda.time.chrono.LenientChronology.convertField : return $r3 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> = $r3
org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> = $r3 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r4 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra>
org.joda.time.chrono.LenientChronology.assemble : $r4 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r5 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r4)
org.joda.time.chrono.LenientChronology.assemble : $r5 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r4) >>>>>>>> org.joda.time.field.DecoratedDateTimeField.isLenient : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DecoratedDateTimeField.isLenient : $r1 = r0.<org.joda.time.field.DecoratedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.field.DecoratedDateTimeField.isLenient : $z0 = virtualinvoke $r1.<org.joda.time.DateTimeField: boolean isLenient()>()
org.joda.time.field.DecoratedDateTimeField.isLenient : $z0 = virtualinvoke $r1.<org.joda.time.DateTimeField: boolean isLenient()>() >>>>>>>> org.joda.time.field.DecoratedDateTimeField.isLenient : return $z0
org.joda.time.field.DecoratedDateTimeField.isLenient : return $z0 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> = $r5
org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> = $r5 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r6 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury>
org.joda.time.chrono.LenientChronology.assemble : $r6 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r7 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r6)
org.joda.time.chrono.LenientChronology.assemble : $r7 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r6) >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> = $r7
org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> = $r7 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r8 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra>
org.joda.time.chrono.LenientChronology.assemble : $r8 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r9 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r8)
org.joda.time.chrono.LenientChronology.assemble : $r9 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r8) >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> = $r9
org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> = $r9 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r10 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era>
org.joda.time.chrono.LenientChronology.assemble : $r10 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r11 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r10)
org.joda.time.chrono.LenientChronology.assemble : $r11 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r10) >>>>>>>> org.joda.time.chrono.GJEraDateTimeField.isLenient : return 0
org.joda.time.chrono.GJEraDateTimeField.isLenient : return 0 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> = $r11
org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> = $r11 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r12 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek>
org.joda.time.chrono.LenientChronology.assemble : $r12 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek> >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r13 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r12)
org.joda.time.chrono.LenientChronology.assemble : $r13 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r12) >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.isLenient : return 0
org.joda.time.field.PreciseDurationDateTimeField.isLenient : return 0 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek> = $r13
org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek> = $r13 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r14 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth>
org.joda.time.chrono.LenientChronology.assemble : $r14 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth> >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r15 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r14)
org.joda.time.chrono.LenientChronology.assemble : $r15 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r14) >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth> = $r15
org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth> = $r15 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r16 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear>
org.joda.time.chrono.LenientChronology.assemble : $r16 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear> >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r17 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r16)
org.joda.time.chrono.LenientChronology.assemble : $r17 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r16) >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear> = $r17
org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear> = $r17 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r18 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear>
org.joda.time.chrono.LenientChronology.assemble : $r18 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r19 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r18)
org.joda.time.chrono.LenientChronology.assemble : $r19 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r18) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.isLenient : return 0
org.joda.time.chrono.BasicMonthOfYearDateTimeField.isLenient : return 0 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> = $r19
org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> = $r19 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r20 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear>
org.joda.time.chrono.LenientChronology.assemble : $r20 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear> >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r21 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r20)
org.joda.time.chrono.LenientChronology.assemble : $r21 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r20) >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear> = $r21
org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear> = $r21 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r22 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear>
org.joda.time.chrono.LenientChronology.assemble : $r22 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r23 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r22)
org.joda.time.chrono.LenientChronology.assemble : $r23 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r22) >>>>>>>> org.joda.time.chrono.BasicWeekyearDateTimeField.isLenient : return 0
org.joda.time.chrono.BasicWeekyearDateTimeField.isLenient : return 0 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> = $r23
org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> = $r23 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r24 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury>
org.joda.time.chrono.LenientChronology.assemble : $r24 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r25 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r24)
org.joda.time.chrono.LenientChronology.assemble : $r25 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r24) >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> = $r25
org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> = $r25 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r26 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond>
org.joda.time.chrono.LenientChronology.assemble : $r26 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond> >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r27 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r26)
org.joda.time.chrono.LenientChronology.assemble : $r27 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r26) >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond> = $r27
org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond> = $r27 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r28 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay>
org.joda.time.chrono.LenientChronology.assemble : $r28 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay> >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r29 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r28)
org.joda.time.chrono.LenientChronology.assemble : $r29 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r28) >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay> = $r29
org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay> = $r29 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r30 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute>
org.joda.time.chrono.LenientChronology.assemble : $r30 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute> >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r31 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r30)
org.joda.time.chrono.LenientChronology.assemble : $r31 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r30) >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute> = $r31
org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute> = $r31 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r32 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay>
org.joda.time.chrono.LenientChronology.assemble : $r32 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay> >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r33 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r32)
org.joda.time.chrono.LenientChronology.assemble : $r33 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r32) >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay> = $r33
org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay> = $r33 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r34 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour>
org.joda.time.chrono.LenientChronology.assemble : $r34 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour> >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r35 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r34)
org.joda.time.chrono.LenientChronology.assemble : $r35 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r34) >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour> = $r35
org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour> = $r35 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r36 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay>
org.joda.time.chrono.LenientChronology.assemble : $r36 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay> >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r37 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r36)
org.joda.time.chrono.LenientChronology.assemble : $r37 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r36) >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay> = $r37
org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay> = $r37 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r38 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay>
org.joda.time.chrono.LenientChronology.assemble : $r38 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay> >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r39 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r38)
org.joda.time.chrono.LenientChronology.assemble : $r39 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r38) >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay> = $r39
org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay> = $r39 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r40 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday>
org.joda.time.chrono.LenientChronology.assemble : $r40 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday> >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r41 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r40)
org.joda.time.chrono.LenientChronology.assemble : $r41 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r40) >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday> = $r41
org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday> = $r41 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r42 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay>
org.joda.time.chrono.LenientChronology.assemble : $r42 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay> >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r43 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r42)
org.joda.time.chrono.LenientChronology.assemble : $r43 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r42) >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay> = $r43
org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay> = $r43 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r44 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday>
org.joda.time.chrono.LenientChronology.assemble : $r44 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday> >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r45 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r44)
org.joda.time.chrono.LenientChronology.assemble : $r45 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r44) >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday> = $r45
org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday> = $r45 >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r46 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay>
org.joda.time.chrono.LenientChronology.assemble : $r46 = r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay> >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : $r47 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r46)
org.joda.time.chrono.LenientChronology.assemble : $r47 = specialinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeField convertField(org.joda.time.DateTimeField)>($r46) >>>>>>>> org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay> = $r47
org.joda.time.chrono.LenientChronology.assemble : r1.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay> = $r47 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r7 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField millis>
org.joda.time.chrono.AssembledChronology.setFields : $r7 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField millis> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r3 = $r7
org.joda.time.chrono.AssembledChronology.setFields : r3 = $r7 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r7 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r7 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r8 = r3
org.joda.time.chrono.AssembledChronology.setFields : $r8 = r3 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMillis> = $r8]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMillis> = $r8] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMillis> = $r8
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMillis> = $r8 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r10 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField seconds>
org.joda.time.chrono.AssembledChronology.setFields : $r10 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField seconds> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r11 = $r10
org.joda.time.chrono.AssembledChronology.setFields : r11 = $r10 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r10 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r10 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r12 = r11
org.joda.time.chrono.AssembledChronology.setFields : $r12 = r11 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iSeconds> = $r12]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iSeconds> = $r12] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iSeconds> = $r12
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iSeconds> = $r12 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r14 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField minutes>
org.joda.time.chrono.AssembledChronology.setFields : $r14 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField minutes> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r15 = $r14
org.joda.time.chrono.AssembledChronology.setFields : r15 = $r14 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r14 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r14 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r16 = r15
org.joda.time.chrono.AssembledChronology.setFields : $r16 = r15 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMinutes> = $r16]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMinutes> = $r16] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMinutes> = $r16
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMinutes> = $r16 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r18 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField hours>
org.joda.time.chrono.AssembledChronology.setFields : $r18 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField hours> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r19 = $r18
org.joda.time.chrono.AssembledChronology.setFields : r19 = $r18 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r18 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r18 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r20 = r19
org.joda.time.chrono.AssembledChronology.setFields : $r20 = r19 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHours> = $r20]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHours> = $r20] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHours> = $r20
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHours> = $r20 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r22 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField halfdays>
org.joda.time.chrono.AssembledChronology.setFields : $r22 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField halfdays> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r23 = $r22
org.joda.time.chrono.AssembledChronology.setFields : r23 = $r22 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r22 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r22 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r24 = r23
org.joda.time.chrono.AssembledChronology.setFields : $r24 = r23 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHalfdays> = $r24]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHalfdays> = $r24] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHalfdays> = $r24
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iHalfdays> = $r24 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r26 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days>
org.joda.time.chrono.AssembledChronology.setFields : $r26 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField days> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r27 = $r26
org.joda.time.chrono.AssembledChronology.setFields : r27 = $r26 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r26 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r26 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r28 = r27
org.joda.time.chrono.AssembledChronology.setFields : $r28 = r27 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays> = $r28]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays> = $r28] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays> = $r28
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iDays> = $r28 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r30 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weeks>
org.joda.time.chrono.AssembledChronology.setFields : $r30 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weeks> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r31 = $r30
org.joda.time.chrono.AssembledChronology.setFields : r31 = $r30 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r30 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r30 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r32 = r31
org.joda.time.chrono.AssembledChronology.setFields : $r32 = r31 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeeks> = $r32]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeeks> = $r32] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeeks> = $r32
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeeks> = $r32 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r34 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears>
org.joda.time.chrono.AssembledChronology.setFields : $r34 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField weekyears> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r35 = $r34
org.joda.time.chrono.AssembledChronology.setFields : r35 = $r34 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r34 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r34 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r36 = r35
org.joda.time.chrono.AssembledChronology.setFields : $r36 = r35 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeekyears> = $r36]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeekyears> = $r36] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeekyears> = $r36
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iWeekyears> = $r36 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r38 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months>
org.joda.time.chrono.AssembledChronology.setFields : $r38 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField months> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r39 = $r38
org.joda.time.chrono.AssembledChronology.setFields : r39 = $r38 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r38 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r38 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r40 = r39
org.joda.time.chrono.AssembledChronology.setFields : $r40 = r39 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMonths> = $r40]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMonths> = $r40] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMonths> = $r40
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iMonths> = $r40 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r42 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years>
org.joda.time.chrono.AssembledChronology.setFields : $r42 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField years> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r43 = $r42
org.joda.time.chrono.AssembledChronology.setFields : r43 = $r42 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r42 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r42 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r44 = r43
org.joda.time.chrono.AssembledChronology.setFields : $r44 = r43 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iYears> = $r44]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iYears> = $r44] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iYears> = $r44
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iYears> = $r44 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r46 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries>
org.joda.time.chrono.AssembledChronology.setFields : $r46 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField centuries> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r47 = $r46
org.joda.time.chrono.AssembledChronology.setFields : r47 = $r46 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r46 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r46 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r48 = r47
org.joda.time.chrono.AssembledChronology.setFields : $r48 = r47 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iCenturies> = $r48]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iCenturies> = $r48] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iCenturies> = $r48
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iCenturies> = $r48 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r50 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField eras>
org.joda.time.chrono.AssembledChronology.setFields : $r50 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DurationField eras> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r51 = $r50
org.joda.time.chrono.AssembledChronology.setFields : r51 = $r50 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r50 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r50 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r52 = specialinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField eras()>()
org.joda.time.chrono.AssembledChronology.setFields : $r52 = specialinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DurationField eras()>() >>>>>>>> org.joda.time.chrono.BaseChronology.eras : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType eras()>()
org.joda.time.chrono.BaseChronology.eras : $r1 = staticinvoke <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType eras()>() >>>>>>>> org.joda.time.DurationFieldType.eras : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType ERAS_TYPE>
org.joda.time.DurationFieldType.eras : $r0 = <org.joda.time.DurationFieldType: org.joda.time.DurationFieldType ERAS_TYPE> >>>>>>>> org.joda.time.DurationFieldType.eras : return $r0
org.joda.time.DurationFieldType.eras : return $r0 >>>>>>>> org.joda.time.chrono.BaseChronology.eras : $r2 = staticinvoke <org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>($r1)
org.joda.time.chrono.BaseChronology.eras : $r2 = staticinvoke <org.joda.time.field.UnsupportedDurationField: org.joda.time.field.UnsupportedDurationField getInstance(org.joda.time.DurationFieldType)>($r1) >>>>>>>> org.joda.time.field.UnsupportedDurationField.getInstance : $r1 = <org.joda.time.field.UnsupportedDurationField: java.util.HashMap cCache>
org.joda.time.field.UnsupportedDurationField.getInstance : $r1 = <org.joda.time.field.UnsupportedDurationField: java.util.HashMap cCache> >>>>>>>> org.joda.time.field.UnsupportedDurationField.getInstance : if $r1 != null
org.joda.time.field.UnsupportedDurationField.getInstance : if $r1 != null >>>>>>>> org.joda.time.field.UnsupportedDurationField.getInstance : $r4 = <org.joda.time.field.UnsupportedDurationField: java.util.HashMap cCache>
org.joda.time.field.UnsupportedDurationField.getInstance : $r4 = <org.joda.time.field.UnsupportedDurationField: java.util.HashMap cCache> >>>>>>>> org.joda.time.field.UnsupportedDurationField.getInstance : $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0)
org.joda.time.field.UnsupportedDurationField.getInstance : $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.hashCode : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal>
org.joda.time.DurationFieldType$StandardDurationFieldType.hashCode : $b0 = r0.<org.joda.time.DurationFieldType$StandardDurationFieldType: byte iOrdinal> >>>>>>>> org.joda.time.DurationFieldType$StandardDurationFieldType.hashCode : return $b0
org.joda.time.DurationFieldType$StandardDurationFieldType.hashCode : return $b0 >>>>>>>> org.joda.time.field.UnsupportedDurationField.getInstance : r2 = (org.joda.time.field.UnsupportedDurationField) $r5
org.joda.time.field.UnsupportedDurationField.getInstance : r2 = (org.joda.time.field.UnsupportedDurationField) $r5 >>>>>>>> org.joda.time.field.UnsupportedDurationField.getInstance : if r2 != null
org.joda.time.field.UnsupportedDurationField.getInstance : if r2 != null >>>>>>>> org.joda.time.field.UnsupportedDurationField.getInstance : return r2
org.joda.time.field.UnsupportedDurationField.getInstance : return r2 >>>>>>>> org.joda.time.chrono.BaseChronology.eras : return $r2
org.joda.time.chrono.BaseChronology.eras : return $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iEras> = $r52
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DurationField iEras> = $r52 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r54 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond>
org.joda.time.chrono.AssembledChronology.setFields : $r54 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfSecond> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r55 = $r54
org.joda.time.chrono.AssembledChronology.setFields : r55 = $r54 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r54 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r54 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r56 = r55
org.joda.time.chrono.AssembledChronology.setFields : $r56 = r55 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfSecond> = $r56]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfSecond> = $r56] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfSecond> = $r56
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfSecond> = $r56 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r58 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay>
org.joda.time.chrono.AssembledChronology.setFields : $r58 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField millisOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r59 = $r58
org.joda.time.chrono.AssembledChronology.setFields : r59 = $r58 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r58 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r58 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r60 = r59
org.joda.time.chrono.AssembledChronology.setFields : $r60 = r59 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay> = $r60]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay> = $r60] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay> = $r60
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay> = $r60 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r62 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute>
org.joda.time.chrono.AssembledChronology.setFields : $r62 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfMinute> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r63 = $r62
org.joda.time.chrono.AssembledChronology.setFields : r63 = $r62 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r62 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r62 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r64 = r63
org.joda.time.chrono.AssembledChronology.setFields : $r64 = r63 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfMinute> = $r64]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfMinute> = $r64] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfMinute> = $r64
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfMinute> = $r64 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r66 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay>
org.joda.time.chrono.AssembledChronology.setFields : $r66 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField secondOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r67 = $r66
org.joda.time.chrono.AssembledChronology.setFields : r67 = $r66 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r66 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r66 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r68 = r67
org.joda.time.chrono.AssembledChronology.setFields : $r68 = r67 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfDay> = $r68]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfDay> = $r68] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfDay> = $r68
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iSecondOfDay> = $r68 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r70 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour>
org.joda.time.chrono.AssembledChronology.setFields : $r70 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfHour> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r71 = $r70
org.joda.time.chrono.AssembledChronology.setFields : r71 = $r70 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r70 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r70 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r72 = r71
org.joda.time.chrono.AssembledChronology.setFields : $r72 = r71 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfHour> = $r72]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfHour> = $r72] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfHour> = $r72
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfHour> = $r72 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r74 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay>
org.joda.time.chrono.AssembledChronology.setFields : $r74 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField minuteOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r75 = $r74
org.joda.time.chrono.AssembledChronology.setFields : r75 = $r74 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r74 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r74 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r76 = r75
org.joda.time.chrono.AssembledChronology.setFields : $r76 = r75 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfDay> = $r76]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfDay> = $r76] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfDay> = $r76
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMinuteOfDay> = $r76 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r78 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay>
org.joda.time.chrono.AssembledChronology.setFields : $r78 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r79 = $r78
org.joda.time.chrono.AssembledChronology.setFields : r79 = $r78 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r78 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r78 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r80 = r79
org.joda.time.chrono.AssembledChronology.setFields : $r80 = r79 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay> = $r80]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay> = $r80] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay> = $r80
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay> = $r80 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r82 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay>
org.joda.time.chrono.AssembledChronology.setFields : $r82 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r83 = $r82
org.joda.time.chrono.AssembledChronology.setFields : r83 = $r82 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r82 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r82 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r84 = r83
org.joda.time.chrono.AssembledChronology.setFields : $r84 = r83 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfDay> = $r84]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfDay> = $r84] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfDay> = $r84
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfDay> = $r84 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r86 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday>
org.joda.time.chrono.AssembledChronology.setFields : $r86 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField hourOfHalfday> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r87 = $r86
org.joda.time.chrono.AssembledChronology.setFields : r87 = $r86 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r86 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r86 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r88 = r87
org.joda.time.chrono.AssembledChronology.setFields : $r88 = r87 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfHalfday> = $r88]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfHalfday> = $r88] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfHalfday> = $r88
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfHalfday> = $r88 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r90 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday>
org.joda.time.chrono.AssembledChronology.setFields : $r90 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField clockhourOfHalfday> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r91 = $r90
org.joda.time.chrono.AssembledChronology.setFields : r91 = $r90 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r90 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r90 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r92 = r91
org.joda.time.chrono.AssembledChronology.setFields : $r92 = r91 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfHalfday> = $r92]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfHalfday> = $r92] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfHalfday> = $r92
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iClockhourOfHalfday> = $r92 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r94 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay>
org.joda.time.chrono.AssembledChronology.setFields : $r94 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField halfdayOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r95 = $r94
org.joda.time.chrono.AssembledChronology.setFields : r95 = $r94 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r94 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r94 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r96 = r95
org.joda.time.chrono.AssembledChronology.setFields : $r96 = r95 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHalfdayOfDay> = $r96]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHalfdayOfDay> = $r96] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHalfdayOfDay> = $r96
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHalfdayOfDay> = $r96 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r98 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek>
org.joda.time.chrono.AssembledChronology.setFields : $r98 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfWeek> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r99 = $r98
org.joda.time.chrono.AssembledChronology.setFields : r99 = $r98 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r98 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r98 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r100 = r99
org.joda.time.chrono.AssembledChronology.setFields : $r100 = r99 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfWeek> = $r100]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfWeek> = $r100] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfWeek> = $r100
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfWeek> = $r100 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r102 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth>
org.joda.time.chrono.AssembledChronology.setFields : $r102 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfMonth> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r103 = $r102
org.joda.time.chrono.AssembledChronology.setFields : r103 = $r102 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r102 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r102 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r104 = r103
org.joda.time.chrono.AssembledChronology.setFields : $r104 = r103 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth> = $r104]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth> = $r104] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth> = $r104
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfMonth> = $r104 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r106 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear>
org.joda.time.chrono.AssembledChronology.setFields : $r106 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField dayOfYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r107 = $r106
org.joda.time.chrono.AssembledChronology.setFields : r107 = $r106 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r106 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r106 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r108 = r107
org.joda.time.chrono.AssembledChronology.setFields : $r108 = r107 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfYear> = $r108]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfYear> = $r108] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfYear> = $r108
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iDayOfYear> = $r108 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r110 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear>
org.joda.time.chrono.AssembledChronology.setFields : $r110 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekOfWeekyear> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r111 = $r110
org.joda.time.chrono.AssembledChronology.setFields : r111 = $r110 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r110 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r110 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r112 = r111
org.joda.time.chrono.AssembledChronology.setFields : $r112 = r111 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekOfWeekyear> = $r112]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekOfWeekyear> = $r112] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekOfWeekyear> = $r112
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekOfWeekyear> = $r112 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r114 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear>
org.joda.time.chrono.AssembledChronology.setFields : $r114 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyear> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r115 = $r114
org.joda.time.chrono.AssembledChronology.setFields : r115 = $r114 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r114 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r114 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r116 = r115
org.joda.time.chrono.AssembledChronology.setFields : $r116 = r115 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyear> = $r116]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyear> = $r116] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyear> = $r116
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyear> = $r116 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r118 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury>
org.joda.time.chrono.AssembledChronology.setFields : $r118 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField weekyearOfCentury> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r119 = $r118
org.joda.time.chrono.AssembledChronology.setFields : r119 = $r118 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r118 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r118 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r120 = r119
org.joda.time.chrono.AssembledChronology.setFields : $r120 = r119 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyearOfCentury> = $r120]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyearOfCentury> = $r120] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyearOfCentury> = $r120
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iWeekyearOfCentury> = $r120 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r122 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear>
org.joda.time.chrono.AssembledChronology.setFields : $r122 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField monthOfYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r123 = $r122
org.joda.time.chrono.AssembledChronology.setFields : r123 = $r122 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r122 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r122 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r124 = r123
org.joda.time.chrono.AssembledChronology.setFields : $r124 = r123 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear> = $r124]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear> = $r124] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear> = $r124
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMonthOfYear> = $r124 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r126 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year>
org.joda.time.chrono.AssembledChronology.setFields : $r126 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField year> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r127 = $r126
org.joda.time.chrono.AssembledChronology.setFields : r127 = $r126 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r126 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r126 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r128 = r127
org.joda.time.chrono.AssembledChronology.setFields : $r128 = r127 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear> = $r128]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear> = $r128] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear> = $r128
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear> = $r128 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r130 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra>
org.joda.time.chrono.AssembledChronology.setFields : $r130 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfEra> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r131 = $r130
org.joda.time.chrono.AssembledChronology.setFields : r131 = $r130 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r130 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r130 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r132 = r131
org.joda.time.chrono.AssembledChronology.setFields : $r132 = r131 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfEra> = $r132]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfEra> = $r132] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfEra> = $r132
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfEra> = $r132 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r134 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury>
org.joda.time.chrono.AssembledChronology.setFields : $r134 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField yearOfCentury> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r135 = $r134
org.joda.time.chrono.AssembledChronology.setFields : r135 = $r134 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r134 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r134 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r136 = r135
org.joda.time.chrono.AssembledChronology.setFields : $r136 = r135 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfCentury> = $r136]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfCentury> = $r136] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfCentury> = $r136
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYearOfCentury> = $r136 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r138 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra>
org.joda.time.chrono.AssembledChronology.setFields : $r138 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField centuryOfEra> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r139 = $r138
org.joda.time.chrono.AssembledChronology.setFields : r139 = $r138 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r138 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r138 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r140 = r139
org.joda.time.chrono.AssembledChronology.setFields : $r140 = r139 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iCenturyOfEra> = $r140]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iCenturyOfEra> = $r140] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iCenturyOfEra> = $r140
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iCenturyOfEra> = $r140 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r142 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era>
org.joda.time.chrono.AssembledChronology.setFields : $r142 = r2.<org.joda.time.chrono.AssembledChronology$Fields: org.joda.time.DateTimeField era> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r143 = $r142
org.joda.time.chrono.AssembledChronology.setFields : r143 = $r142 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r142 == null
org.joda.time.chrono.AssembledChronology.setFields : if $r142 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r144 = r143
org.joda.time.chrono.AssembledChronology.setFields : $r144 = r143 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iEra> = $r144]
org.joda.time.chrono.AssembledChronology.setFields : goto [?= r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iEra> = $r144] >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iEra> = $r144
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iEra> = $r144 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r145 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.setFields : $r145 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r145 != null
org.joda.time.chrono.AssembledChronology.setFields : if $r145 != null >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r146 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay>
org.joda.time.chrono.AssembledChronology.setFields : $r146 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iHourOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r147 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.setFields : $r147 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r148 = virtualinvoke $r147.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>()
org.joda.time.chrono.AssembledChronology.setFields : $r148 = virtualinvoke $r147.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r146 != $r148
org.joda.time.chrono.AssembledChronology.setFields : if $r146 != $r148 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $b1 = 0
org.joda.time.chrono.AssembledChronology.setFields : $b1 = 0 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r158 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay>
org.joda.time.chrono.AssembledChronology.setFields : $r158 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iMillisOfDay> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r159 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.setFields : $r159 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r160 = virtualinvoke $r159.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>()
org.joda.time.chrono.AssembledChronology.setFields : $r160 = virtualinvoke $r159.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfDay()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r158 != $r160
org.joda.time.chrono.AssembledChronology.setFields : if $r158 != $r160 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $b2 = 0
org.joda.time.chrono.AssembledChronology.setFields : $b2 = 0 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $b3 = $b1 | $b2
org.joda.time.chrono.AssembledChronology.setFields : $b3 = $b1 | $b2 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r161 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear>
org.joda.time.chrono.AssembledChronology.setFields : $r161 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.DateTimeField iYear> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r162 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.setFields : $r162 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $r163 = virtualinvoke $r162.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.chrono.AssembledChronology.setFields : $r163 = virtualinvoke $r162.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : if $r161 != $r163
org.joda.time.chrono.AssembledChronology.setFields : if $r161 != $r163 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : $b4 = 0
org.joda.time.chrono.AssembledChronology.setFields : $b4 = 0 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : b0 = $b3 | $b4
org.joda.time.chrono.AssembledChronology.setFields : b0 = $b3 | $b4 >>>>>>>> org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: int iBaseFlags> = b0
org.joda.time.chrono.AssembledChronology.setFields : r0.<org.joda.time.chrono.AssembledChronology: int iBaseFlags> = b0 >>>>>>>> org.joda.time.chrono.LenientChronology.getInstance : return $r2
org.joda.time.chrono.LenientChronology.getInstance : return $r2 >>>>>>>> org.joda.time.base.BaseDateTime.checkChronology : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.base.BaseDateTime.checkChronology : $r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DateTimeUtils.getChronology : if r0 != null
org.joda.time.DateTimeUtils.getChronology : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getChronology : return r0
org.joda.time.DateTimeUtils.getChronology : return r0 >>>>>>>> org.joda.time.base.BaseDateTime.checkChronology : return $r2
org.joda.time.base.BaseDateTime.checkChronology : return $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase>
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $r2 = r0.<org.joda.time.chrono.AssembledChronology: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.chrono.AssembledChronology.getDateTimeMillis : r1 = $r2
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : r1 = $r2 >>>>>>>> org.joda.time.chrono.AssembledChronology.getDateTimeMillis : if $r2 == null
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : if $r2 == null >>>>>>>> org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $i7 = r0.<org.joda.time.chrono.AssembledChronology: int iBaseFlags>
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $i7 = r0.<org.joda.time.chrono.AssembledChronology: int iBaseFlags> >>>>>>>> org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $i8 = $i7 & 5
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $i8 = $i7 & 5 >>>>>>>> org.joda.time.chrono.AssembledChronology.getDateTimeMillis : if $i8 != 5
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : if $i8 != 5 >>>>>>>> org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $l10 = specialinvoke r0.<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5, i6)
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : $l10 = specialinvoke r0.<org.joda.time.chrono.BaseChronology: long getDateTimeMillis(int,int,int,int,int,int,int)>(i0, i1, i2, i3, i4, i5, i6) >>>>>>>> org.joda.time.chrono.BaseChronology.getDateTimeMillis : $r1 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>()
org.joda.time.chrono.BaseChronology.getDateTimeMillis : $r1 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.chrono.BaseChronology.getDateTimeMillis : l7 = virtualinvoke $r1.<org.joda.time.DateTimeField: long set(long,int)>(0L, i0)
org.joda.time.chrono.BaseChronology.getDateTimeMillis : l7 = virtualinvoke $r1.<org.joda.time.DateTimeField: long set(long,int)>(0L, i0) >>>>>>>> org.joda.time.field.LenientDateTimeField.set : $r1 = r0.<org.joda.time.field.LenientDateTimeField: org.joda.time.Chronology iBase>
org.joda.time.field.LenientDateTimeField.set : $r1 = r0.<org.joda.time.field.LenientDateTimeField: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.field.LenientDateTimeField.set : $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.field.LenientDateTimeField.set : $r2 = virtualinvoke $r1.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.field.LenientDateTimeField.set : l2 = virtualinvoke $r2.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>(l0)
org.joda.time.field.LenientDateTimeField.set : l2 = virtualinvoke $r2.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>(l0) >>>>>>>> org.joda.time.DateTimeZone.convertUTCToLocal : i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0)
org.joda.time.DateTimeZone.convertUTCToLocal : i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0) >>>>>>>> org.joda.time.MockZone.getOffset : $l1 = r0.<org.joda.time.MockZone: long transition>
org.joda.time.MockZone.getOffset : $l1 = r0.<org.joda.time.MockZone: long transition> >>>>>>>> org.joda.time.MockZone.getOffset : $b2 = l0 cmp $l1
org.joda.time.MockZone.getOffset : $b2 = l0 cmp $l1 >>>>>>>> org.joda.time.MockZone.getOffset : if $b2 >= 0
org.joda.time.MockZone.getOffset : if $b2 >= 0 >>>>>>>> org.joda.time.MockZone.getOffset : $i3 = r0.<org.joda.time.MockZone: int winterOffset>
org.joda.time.MockZone.getOffset : $i3 = r0.<org.joda.time.MockZone: int winterOffset> >>>>>>>> org.joda.time.MockZone.getOffset : goto [?= return $i3]
org.joda.time.MockZone.getOffset : goto [?= return $i3] >>>>>>>> org.joda.time.MockZone.getOffset : return $i3
org.joda.time.MockZone.getOffset : return $i3 >>>>>>>> org.joda.time.DateTimeZone.convertUTCToLocal : $l3 = (long) i1
org.joda.time.DateTimeZone.convertUTCToLocal : $l3 = (long) i1 >>>>>>>> org.joda.time.DateTimeZone.convertUTCToLocal : l2 = l0 + $l3
org.joda.time.DateTimeZone.convertUTCToLocal : l2 = l0 + $l3 >>>>>>>> org.joda.time.DateTimeZone.convertUTCToLocal : $l4 = l0 ^ l2
org.joda.time.DateTimeZone.convertUTCToLocal : $l4 = l0 ^ l2 >>>>>>>> org.joda.time.DateTimeZone.convertUTCToLocal : $b5 = $l4 cmp 0L
org.joda.time.DateTimeZone.convertUTCToLocal : $b5 = $l4 cmp 0L >>>>>>>> org.joda.time.DateTimeZone.convertUTCToLocal : if $b5 >= 0
org.joda.time.DateTimeZone.convertUTCToLocal : if $b5 >= 0 >>>>>>>> org.joda.time.DateTimeZone.convertUTCToLocal : $l6 = (long) i1
org.joda.time.DateTimeZone.convertUTCToLocal : $l6 = (long) i1 >>>>>>>> org.joda.time.DateTimeZone.convertUTCToLocal : $l7 = l0 ^ $l6
org.joda.time.DateTimeZone.convertUTCToLocal : $l7 = l0 ^ $l6 >>>>>>>> org.joda.time.DateTimeZone.convertUTCToLocal : $b8 = $l7 cmp 0L
org.joda.time.DateTimeZone.convertUTCToLocal : $b8 = $l7 cmp 0L >>>>>>>> org.joda.time.DateTimeZone.convertUTCToLocal : if $b8 < 0
org.joda.time.DateTimeZone.convertUTCToLocal : if $b8 < 0 >>>>>>>> org.joda.time.DateTimeZone.convertUTCToLocal : return l2
org.joda.time.DateTimeZone.convertUTCToLocal : return l2 >>>>>>>> org.joda.time.field.LenientDateTimeField.set : $l4 = (long) i1
org.joda.time.field.LenientDateTimeField.set : $l4 = (long) i1 >>>>>>>> org.joda.time.field.LenientDateTimeField.set : $i5 = virtualinvoke r0.<org.joda.time.field.LenientDateTimeField: int get(long)>(l0)
org.joda.time.field.LenientDateTimeField.set : $i5 = virtualinvoke r0.<org.joda.time.field.LenientDateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.field.DelegatedDateTimeField.get : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DelegatedDateTimeField.get : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.field.DelegatedDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.DateTimeField: int get(long)>(l0)
org.joda.time.field.DelegatedDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.DateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.get : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.get : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.get : l1 = virtualinvoke $r1.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>(l0)
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.get : l1 = virtualinvoke $r1.<org.joda.time.DateTimeZone: long convertUTCToLocal(long)>(l0) >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.get : $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.get : $r2 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.get : $i2 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>(l1)
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.get : $i2 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>(l1) >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicYearDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getAverageMillisPerYearDividedByTwo()>()
org.joda.time.chrono.BasicChronology.getYear : l1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getAverageMillisPerYearDividedByTwo()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getAverageMillisPerYearDividedByTwo : return 15778476000L
org.joda.time.chrono.GregorianChronology.getAverageMillisPerYearDividedByTwo : return 15778476000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $l7 = l0 >> 1
org.joda.time.chrono.BasicChronology.getYear : $l7 = l0 >> 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $l8 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getApproxMillisAtEpochDividedByTwo()>()
org.joda.time.chrono.BasicChronology.getYear : $l8 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getApproxMillisAtEpochDividedByTwo()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getApproxMillisAtEpochDividedByTwo : return 31083597720000L
org.joda.time.chrono.GregorianChronology.getApproxMillisAtEpochDividedByTwo : return 31083597720000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l2 = $l7 + $l8
org.joda.time.chrono.BasicChronology.getYear : l2 = $l7 + $l8 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $b9 = l2 cmp 0L
org.joda.time.chrono.BasicChronology.getYear : $b9 = l2 cmp 0L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $b9 >= 0
org.joda.time.chrono.BasicChronology.getYear : if $b9 >= 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $l11 = l2 / l1
org.joda.time.chrono.BasicChronology.getYear : $l11 = l2 / l1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : i3 = (int) $l11
org.joda.time.chrono.BasicChronology.getYear : i3 = (int) $l11 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i3)
org.joda.time.chrono.BasicChronology.getYear : l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i3) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMillis : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>(i0)
org.joda.time.chrono.BasicChronology.getYearMillis : $r1 = specialinvoke r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo getYearInfo(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $r2 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache>
org.joda.time.chrono.BasicChronology.getYearInfo : $r2 = r0.<org.joda.time.chrono.BasicChronology: org.joda.time.chrono.BasicChronology$YearInfo[] iYearInfoCache> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $i1 = i0 & 1023
org.joda.time.chrono.BasicChronology.getYearInfo : $i1 = i0 & 1023 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : r1 = $r2[$i1]
org.joda.time.chrono.BasicChronology.getYearInfo : r1 = $r2[$i1] >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : if r1 == null
org.joda.time.chrono.BasicChronology.getYearInfo : if r1 == null >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : $i2 = r1.<org.joda.time.chrono.BasicChronology$YearInfo: int iYear>
org.joda.time.chrono.BasicChronology.getYearInfo : $i2 = r1.<org.joda.time.chrono.BasicChronology$YearInfo: int iYear> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : if $i2 == i0
org.joda.time.chrono.BasicChronology.getYearInfo : if $i2 == i0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearInfo : return r1
org.joda.time.chrono.BasicChronology.getYearInfo : return r1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMillis : $l1 = $r1.<org.joda.time.chrono.BasicChronology$YearInfo: long iFirstDayMillis>
org.joda.time.chrono.BasicChronology.getYearMillis : $l1 = $r1.<org.joda.time.chrono.BasicChronology$YearInfo: long iFirstDayMillis> >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMillis : return $l1
org.joda.time.chrono.BasicChronology.getYearMillis : return $l1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : l5 = l0 - l4
org.joda.time.chrono.BasicChronology.getYear : l5 = l0 - l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $b12 = l5 cmp 0L
org.joda.time.chrono.BasicChronology.getYear : $b12 = l5 cmp 0L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $b12 >= 0
org.joda.time.chrono.BasicChronology.getYear : if $b12 >= 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : $b13 = l5 cmp 31536000000L
org.joda.time.chrono.BasicChronology.getYear : $b13 = l5 cmp 31536000000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : if $b13 < 0
org.joda.time.chrono.BasicChronology.getYear : if $b13 < 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getYear : return i3
org.joda.time.chrono.BasicChronology.getYear : return i3 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.get : return $i1
org.joda.time.chrono.BasicYearDateTimeField.get : return $i1 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.get : return $i2
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.get : return $i2 >>>>>>>> org.joda.time.field.DelegatedDateTimeField.get : return $i1
org.joda.time.field.DelegatedDateTimeField.get : return $i1 >>>>>>>> org.joda.time.field.LenientDateTimeField.set : $l6 = (long) $i5
org.joda.time.field.LenientDateTimeField.set : $l6 = (long) $i5 >>>>>>>> org.joda.time.field.LenientDateTimeField.set : l3 = staticinvoke <org.joda.time.field.FieldUtils: long safeSubtract(long,long)>($l4, $l6)
org.joda.time.field.LenientDateTimeField.set : l3 = staticinvoke <org.joda.time.field.FieldUtils: long safeSubtract(long,long)>($l4, $l6) >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : l2 = l0 - l1
org.joda.time.field.FieldUtils.safeSubtract : l2 = l0 - l1 >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : $l3 = l0 ^ l2
org.joda.time.field.FieldUtils.safeSubtract : $l3 = l0 ^ l2 >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : $b4 = $l3 cmp 0L
org.joda.time.field.FieldUtils.safeSubtract : $b4 = $l3 cmp 0L >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : if $b4 >= 0
org.joda.time.field.FieldUtils.safeSubtract : if $b4 >= 0 >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : return l2
org.joda.time.field.FieldUtils.safeSubtract : return l2 >>>>>>>> org.joda.time.field.LenientDateTimeField.set : $r3 = virtualinvoke r0.<org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeFieldType getType()>()
org.joda.time.field.LenientDateTimeField.set : $r3 = virtualinvoke r0.<org.joda.time.field.LenientDateTimeField: org.joda.time.DateTimeFieldType getType()>() >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getType : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeFieldType iType>
org.joda.time.field.DelegatedDateTimeField.getType : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeFieldType iType> >>>>>>>> org.joda.time.field.DelegatedDateTimeField.getType : return $r1
org.joda.time.field.DelegatedDateTimeField.getType : return $r1 >>>>>>>> org.joda.time.field.LenientDateTimeField.set : $r4 = r0.<org.joda.time.field.LenientDateTimeField: org.joda.time.Chronology iBase>
org.joda.time.field.LenientDateTimeField.set : $r4 = r0.<org.joda.time.field.LenientDateTimeField: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.field.LenientDateTimeField.set : $r5 = virtualinvoke $r4.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>()
org.joda.time.field.LenientDateTimeField.set : $r5 = virtualinvoke $r4.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>() >>>>>>>> org.joda.time.chrono.ISOChronology.withUTC : $r1 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC>
org.joda.time.chrono.ISOChronology.withUTC : $r1 = <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology INSTANCE_UTC> >>>>>>>> org.joda.time.chrono.ISOChronology.withUTC : return $r1
org.joda.time.chrono.ISOChronology.withUTC : return $r1 >>>>>>>> org.joda.time.field.LenientDateTimeField.set : $r6 = virtualinvoke $r3.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r5)
org.joda.time.field.LenientDateTimeField.set : $r6 = virtualinvoke $r3.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r5) >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $b0 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: byte iOrdinal>
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $b0 = r0.<org.joda.time.DateTimeFieldType$StandardDateTimeFieldType: byte iOrdinal> >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : tableswitch($b0) {     case 1:
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : tableswitch($b0) {     case 1: >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r7 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r7 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r7
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r7 >>>>>>>> org.joda.time.field.LenientDateTimeField.set : l7 = virtualinvoke $r6.<org.joda.time.DateTimeField: long add(long,long)>(l2, l3)
org.joda.time.field.LenientDateTimeField.set : l7 = virtualinvoke $r6.<org.joda.time.DateTimeField: long add(long,long)>(l2, l3) >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.add : $i2 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>(l1)
org.joda.time.chrono.BasicYearDateTimeField.add : $i2 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>(l1) >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : $b1 = -2147483648L cmp l0
org.joda.time.field.FieldUtils.safeToInt : $b1 = -2147483648L cmp l0 >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : if $b1 > 0
org.joda.time.field.FieldUtils.safeToInt : if $b1 > 0 >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : $b2 = l0 cmp 2147483647L
org.joda.time.field.FieldUtils.safeToInt : $b2 = l0 cmp 2147483647L >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : if $b2 > 0
org.joda.time.field.FieldUtils.safeToInt : if $b2 > 0 >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : $i3 = (int) l0
org.joda.time.field.FieldUtils.safeToInt : $i3 = (int) l0 >>>>>>>> org.joda.time.field.FieldUtils.safeToInt : return $i3
org.joda.time.field.FieldUtils.safeToInt : return $i3 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.add : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>(l0, $i2)
org.joda.time.chrono.BasicYearDateTimeField.add : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicYearDateTimeField: long add(long,int)>(l0, $i2) >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.add : if i1 != 0
org.joda.time.chrono.BasicYearDateTimeField.add : if i1 != 0 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.add : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>(l0)
org.joda.time.chrono.BasicYearDateTimeField.add : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicYearDateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.add : i3 = staticinvoke <org.joda.time.field.FieldUtils: int safeAdd(int,int)>(i2, i1)
org.joda.time.chrono.BasicYearDateTimeField.add : i3 = staticinvoke <org.joda.time.field.FieldUtils: int safeAdd(int,int)>(i2, i1) >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : i2 = i0 + i1
org.joda.time.field.FieldUtils.safeAdd : i2 = i0 + i1 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $i3 = i0 ^ i2
org.joda.time.field.FieldUtils.safeAdd : $i3 = i0 ^ i2 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : if $i3 >= 0
org.joda.time.field.FieldUtils.safeAdd : if $i3 >= 0 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : return i2
org.joda.time.field.FieldUtils.safeAdd : return i2 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.add : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>(l0, i3)
org.joda.time.chrono.BasicYearDateTimeField.add : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicYearDateTimeField: long set(long,int)>(l0, i3) >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.set : $r1 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : $i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMinYear()>()
org.joda.time.chrono.BasicYearDateTimeField.set : $i2 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMinYear()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getMinYear : return -292275054
org.joda.time.chrono.GregorianChronology.getMinYear : return -292275054 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : $r2 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.set : $r2 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : $i3 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getMaxYear()>()
org.joda.time.chrono.BasicYearDateTimeField.set : $i3 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getMaxYear()>() >>>>>>>> org.joda.time.chrono.GregorianChronology.getMaxYear : return 292278993
org.joda.time.chrono.GregorianChronology.getMaxYear : return 292278993 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i2, $i3)
org.joda.time.chrono.BasicYearDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, $i2, $i3) >>>>>>>> org.joda.time.field.FieldUtils.verifyValueBounds : if i0 < i1
org.joda.time.field.FieldUtils.verifyValueBounds : if i0 < i1 >>>>>>>> org.joda.time.field.FieldUtils.verifyValueBounds : if i0 <= i2
org.joda.time.field.FieldUtils.verifyValueBounds : if i0 <= i2 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : $r3 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicYearDateTimeField.set : $r3 = r0.<org.joda.time.chrono.BasicYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : $l4 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: long setYear(long,int)>(l0, i1)
org.joda.time.chrono.BasicYearDateTimeField.set : $l4 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: long setYear(long,int)>(l0, i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicGJChronology.setYear : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : i3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getDayOfYear(long,int)>(l0, i2)
org.joda.time.chrono.BasicGJChronology.setYear : i3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getDayOfYear(long,int)>(l0, i2) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1)
org.joda.time.chrono.BasicChronology.getDayOfYear : l2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : $l3 = l0 - l2
org.joda.time.chrono.BasicChronology.getDayOfYear : $l3 = l0 - l2 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : $l4 = $l3 / 86400000L
org.joda.time.chrono.BasicChronology.getDayOfYear : $l4 = $l3 / 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : $i5 = (int) $l4
org.joda.time.chrono.BasicChronology.getDayOfYear : $i5 = (int) $l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : $i6 = $i5 + 1
org.joda.time.chrono.BasicChronology.getDayOfYear : $i6 = $i5 + 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfYear : return $i6
org.joda.time.chrono.BasicChronology.getDayOfYear : return $i6 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : i4 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getMillisOfDay(long)>(l0)
org.joda.time.chrono.BasicGJChronology.setYear : i4 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: int getMillisOfDay(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : $b1 = l0 cmp 0L
org.joda.time.chrono.BasicChronology.getMillisOfDay : $b1 = l0 cmp 0L >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : if $b1 < 0
org.joda.time.chrono.BasicChronology.getMillisOfDay : if $b1 < 0 >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : $l4 = l0 + 1L
org.joda.time.chrono.BasicChronology.getMillisOfDay : $l4 = l0 + 1L >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : $l5 = $l4 % 86400000L
org.joda.time.chrono.BasicChronology.getMillisOfDay : $l5 = $l4 % 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : $i6 = (int) $l5
org.joda.time.chrono.BasicChronology.getMillisOfDay : $i6 = (int) $l5 >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : $i7 = 86399999 + $i6
org.joda.time.chrono.BasicChronology.getMillisOfDay : $i7 = 86399999 + $i6 >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : return $i7
org.joda.time.chrono.BasicChronology.getMillisOfDay : return $i7 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : if i3 <= 59
org.joda.time.chrono.BasicGJChronology.setYear : if i3 <= 59 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i2)
org.joda.time.chrono.BasicGJChronology.setYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i2) >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : $i1 = i0 & 3
org.joda.time.chrono.GregorianChronology.isLeapYear : $i1 = i0 & 3 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : if $i1 != 0
org.joda.time.chrono.GregorianChronology.isLeapYear : if $i1 != 0 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : $z0 = 0
org.joda.time.chrono.GregorianChronology.isLeapYear : $z0 = 0 >>>>>>>> org.joda.time.chrono.GregorianChronology.isLeapYear : return $z0
org.joda.time.chrono.GregorianChronology.isLeapYear : return $z0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : if $z0 == 0
org.joda.time.chrono.BasicGJChronology.setYear : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : $z2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i1)
org.joda.time.chrono.BasicGJChronology.setYear : $z2 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : if $z2 == 0
org.joda.time.chrono.BasicGJChronology.setYear : if $z2 == 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : l5 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMonthDayMillis(int,int,int)>(i1, 1, i3)
org.joda.time.chrono.BasicGJChronology.setYear : l5 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMonthDayMillis(int,int,int)>(i1, 1, i3) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0)
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i0, i1)
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i0, i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0)
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : if $z0 == 0
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $r2 = <org.joda.time.chrono.BasicGJChronology: long[] MIN_TOTAL_MILLIS_BY_MONTH_ARRAY>
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $r2 = <org.joda.time.chrono.BasicGJChronology: long[] MIN_TOTAL_MILLIS_BY_MONTH_ARRAY> >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $i4 = i1 - 1
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $i4 = i1 - 1 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $l5 = $r2[$i4]
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : $l5 = $r2[$i4] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : return $l5
org.joda.time.chrono.BasicGJChronology.getTotalMillisByYearMonth : return $l5 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l5 = l3 + $l4
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : l5 = l3 + $l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $i6 = i2 - 1
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $i6 = i2 - 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l7 = (long) $i6
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l7 = (long) $i6 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l8 = $l7 * 86400000L
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l8 = $l7 * 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l9 = l5 + $l8
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : $l9 = l5 + $l8 >>>>>>>> org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : return $l9
org.joda.time.chrono.BasicChronology.getYearMonthDayMillis : return $l9 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : $l6 = (long) i4
org.joda.time.chrono.BasicGJChronology.setYear : $l6 = (long) i4 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : l7 = l5 + $l6
org.joda.time.chrono.BasicGJChronology.setYear : l7 = l5 + $l6 >>>>>>>> org.joda.time.chrono.BasicGJChronology.setYear : return l7
org.joda.time.chrono.BasicGJChronology.setYear : return l7 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.set : return $l4
org.joda.time.chrono.BasicYearDateTimeField.set : return $l4 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.add : return $l4
org.joda.time.chrono.BasicYearDateTimeField.add : return $l4 >>>>>>>> org.joda.time.chrono.BasicYearDateTimeField.add : return $l3
org.joda.time.chrono.BasicYearDateTimeField.add : return $l3 >>>>>>>> org.joda.time.field.LenientDateTimeField.set : $r7 = r0.<org.joda.time.field.LenientDateTimeField: org.joda.time.Chronology iBase>
org.joda.time.field.LenientDateTimeField.set : $r7 = r0.<org.joda.time.field.LenientDateTimeField: org.joda.time.Chronology iBase> >>>>>>>> org.joda.time.field.LenientDateTimeField.set : $r8 = virtualinvoke $r7.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.field.LenientDateTimeField.set : $r8 = virtualinvoke $r7.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.field.LenientDateTimeField.set : $l8 = virtualinvoke $r8.<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>(l7, 0, l0)
org.joda.time.field.LenientDateTimeField.set : $l8 = virtualinvoke $r8.<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean,long)>(l7, 0, l0) >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : i2 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l1)
org.joda.time.DateTimeZone.convertLocalToUTC : i2 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l1) >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : $l5 = (long) i2
org.joda.time.DateTimeZone.convertLocalToUTC : $l5 = (long) i2 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : l3 = l0 - $l5
org.joda.time.DateTimeZone.convertLocalToUTC : l3 = l0 - $l5 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : i4 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l3)
org.joda.time.DateTimeZone.convertLocalToUTC : i4 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l3) >>>>>>>> org.joda.time.MockZone.getOffset : $i4 = r0.<org.joda.time.MockZone: int winterOffset>
org.joda.time.MockZone.getOffset : $i4 = r0.<org.joda.time.MockZone: int winterOffset> >>>>>>>> org.joda.time.MockZone.getOffset : $i5 = r0.<org.joda.time.MockZone: int sizeMillis>
org.joda.time.MockZone.getOffset : $i5 = r0.<org.joda.time.MockZone: int sizeMillis> >>>>>>>> org.joda.time.MockZone.getOffset : $i3 = $i4 + $i5
org.joda.time.MockZone.getOffset : $i3 = $i4 + $i5 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : if i4 != i2
org.joda.time.DateTimeZone.convertLocalToUTC : if i4 != i2 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : $l6 = virtualinvoke r0.<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>(l0, z0)
org.joda.time.DateTimeZone.convertLocalToUTC : $l6 = virtualinvoke r0.<org.joda.time.DateTimeZone: long convertLocalToUTC(long,boolean)>(l0, z0) >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0)
org.joda.time.DateTimeZone.convertLocalToUTC : i1 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>(l0) >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : $l5 = (long) i1
org.joda.time.DateTimeZone.convertLocalToUTC : $l5 = (long) i1 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : $l6 = l0 - $l5
org.joda.time.DateTimeZone.convertLocalToUTC : $l6 = l0 - $l5 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : i2 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>($l6)
org.joda.time.DateTimeZone.convertLocalToUTC : i2 = virtualinvoke r0.<org.joda.time.DateTimeZone: int getOffset(long)>($l6) >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : if i1 == i2
org.joda.time.DateTimeZone.convertLocalToUTC : if i1 == i2 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : $l18 = (long) i2
org.joda.time.DateTimeZone.convertLocalToUTC : $l18 = (long) i2 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : l19 = l0 - $l18
org.joda.time.DateTimeZone.convertLocalToUTC : l19 = l0 - $l18 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : $l20 = l0 ^ l19
org.joda.time.DateTimeZone.convertLocalToUTC : $l20 = l0 ^ l19 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : $b21 = $l20 cmp 0L
org.joda.time.DateTimeZone.convertLocalToUTC : $b21 = $l20 cmp 0L >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : if $b21 >= 0
org.joda.time.DateTimeZone.convertLocalToUTC : if $b21 >= 0 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : return l19
org.joda.time.DateTimeZone.convertLocalToUTC : return l19 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : return $l6
org.joda.time.DateTimeZone.convertLocalToUTC : return $l6 >>>>>>>> org.joda.time.field.LenientDateTimeField.set : return $l8
org.joda.time.field.LenientDateTimeField.set : return $l8 >>>>>>>> org.joda.time.chrono.BaseChronology.getDateTimeMillis : $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.chrono.BaseChronology.getDateTimeMillis : $r2 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField monthOfYear()>() >>>>>>>> org.joda.time.chrono.BaseChronology.getDateTimeMillis : l8 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>(l7, i1)
org.joda.time.chrono.BaseChronology.getDateTimeMillis : l8 = virtualinvoke $r2.<org.joda.time.DateTimeField: long set(long,int)>(l7, i1) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long)>(l0)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getMonthOfYear : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicChronology.getMonthOfYear : $i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getMonthOfYear : $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, $i1)
org.joda.time.chrono.BasicChronology.getMonthOfYear : $i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, $i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMillis(int)>(i1)
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l3 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: long getYearMillis(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l4 = l0 - $l3
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l4 = l0 - $l3 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l5 = $l4 >> 10
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $l5 = $l4 >> 10 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : i2 = (int) $l5
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : i2 = (int) $l5 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i1)
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if $z0 == 0
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 15271875
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 15271875 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 23034375
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 23034375 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 25650000
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 25650000 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 28181250
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 28181250 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 12
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 12 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : return $b6
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : return $b6 >>>>>>>> org.joda.time.chrono.BasicChronology.getMonthOfYear : return $i2
org.joda.time.chrono.BasicChronology.getMonthOfYear : return $i2 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : return $i1
org.joda.time.chrono.BasicMonthOfYearDateTimeField.get : return $i1 >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : $l5 = l0 ^ l1
org.joda.time.field.FieldUtils.safeSubtract : $l5 = l0 ^ l1 >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : $b6 = $l5 cmp 0L
org.joda.time.field.FieldUtils.safeSubtract : $b6 = $l5 cmp 0L >>>>>>>> org.joda.time.field.FieldUtils.safeSubtract : if $b6 >= 0
org.joda.time.field.FieldUtils.safeSubtract : if $b6 >= 0 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r9 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r9 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField monthOfYear()>() >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r9
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r9 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i2 = (int) l1
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i2 = (int) l1 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $l13 = (long) i2
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $l13 = (long) i2 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $b14 = $l13 cmp l1
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $b14 = $l13 cmp l1 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : if $b14 != 0
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : if $b14 != 0 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $l15 = virtualinvoke r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>(l0, i2)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $l15 = virtualinvoke r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: long add(long,int)>(l0, i2) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : if i1 != 0
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : if i1 != 0 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r1 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i10 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMillisOfDay(long)>(l0)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i10 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getMillisOfDay(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : $l2 = l0 % 86400000L
org.joda.time.chrono.BasicChronology.getMillisOfDay : $l2 = l0 % 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : $i3 = (int) $l2
org.joda.time.chrono.BasicChronology.getMillisOfDay : $i3 = (int) $l2 >>>>>>>> org.joda.time.chrono.BasicChronology.getMillisOfDay : return $i3
org.joda.time.chrono.BasicChronology.getMillisOfDay : return $i3 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : l2 = (long) $i10
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : l2 = (long) $i10 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r2 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i3 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i3 = virtualinvoke $r2.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r3 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i4 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i3)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i4 = virtualinvoke $r3.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i3) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i11 = i4 - 1
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i11 = i4 - 1 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i5 = $i11 + i1
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i5 = $i11 + i1 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : if i5 < 0
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : if i5 < 0 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i12 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i12 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i13 = i5 / $i12
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i13 = i5 / $i12 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i6 = i3 + $i13
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i6 = i3 + $i13 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i14 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i14 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: int iMax> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i15 = i5 % $i14
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $i15 = i5 % $i14 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i16 = $i15 + 1
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i16 = $i15 + 1 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : goto [?= $r4 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>]
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : goto [?= $r4 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>] >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r4 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r4 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i24 = virtualinvoke $r4.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l0, i3, i4)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i24 = virtualinvoke $r4.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l0, i3, i4) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1)
org.joda.time.chrono.BasicChronology.getDayOfMonth : l3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getYearMillis(int)>(i1) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i1, i2)
org.joda.time.chrono.BasicChronology.getDayOfMonth : $l4 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: long getTotalMillisByYearMonth(int,int)>(i1, i2) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : l5 = l3 + $l4
org.joda.time.chrono.BasicChronology.getDayOfMonth : l5 = l3 + $l4 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $l6 = l0 - l5
org.joda.time.chrono.BasicChronology.getDayOfMonth : $l6 = l0 - l5 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $l7 = $l6 / 86400000L
org.joda.time.chrono.BasicChronology.getDayOfMonth : $l7 = $l6 / 86400000L >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $i8 = (int) $l7
org.joda.time.chrono.BasicChronology.getDayOfMonth : $i8 = (int) $l7 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $i9 = $i8 + 1
org.joda.time.chrono.BasicChronology.getDayOfMonth : $i9 = $i8 + 1 >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : return $i9
org.joda.time.chrono.BasicChronology.getDayOfMonth : return $i9 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r5 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i8 = virtualinvoke $r5.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>(i6, i16)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i8 = virtualinvoke $r5.<org.joda.time.chrono.BasicChronology: int getDaysInYearMonth(int,int)>(i6, i16) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0)
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $z0 = virtualinvoke r0.<org.joda.time.chrono.BasicGJChronology: boolean isLeapYear(int)>(i0) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : if $z0 == 0
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : if $z0 == 0 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $r2 = <org.joda.time.chrono.BasicGJChronology: int[] MIN_DAYS_PER_MONTH_ARRAY>
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $r2 = <org.joda.time.chrono.BasicGJChronology: int[] MIN_DAYS_PER_MONTH_ARRAY> >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i4 = i1 - 1
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i4 = i1 - 1 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i5 = $r2[$i4]
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : $i5 = $r2[$i4] >>>>>>>> org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : return $i5
org.joda.time.chrono.BasicGJChronology.getDaysInYearMonth : return $i5 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : if i24 <= i8
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : if i24 <= i8 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i24 = i8
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : i24 = i8 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r6 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $r6 = r0.<org.joda.time.chrono.BasicMonthOfYearDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : l9 = virtualinvoke $r6.<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>(i6, i16, i24)
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : l9 = virtualinvoke $r6.<org.joda.time.chrono.BasicChronology: long getYearMonthDayMillis(int,int,int)>(i6, i16, i24) >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $l25 = l9 + l2
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : $l25 = l9 + l2 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : return $l25
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : return $l25 >>>>>>>> org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : return $l15
org.joda.time.chrono.BasicMonthOfYearDateTimeField.add : return $l15 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : return l3
org.joda.time.DateTimeZone.convertLocalToUTC : return l3 >>>>>>>> org.joda.time.chrono.BaseChronology.getDateTimeMillis : $r3 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.chrono.BaseChronology.getDateTimeMillis : $r3 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField dayOfMonth()>() >>>>>>>> org.joda.time.chrono.BaseChronology.getDateTimeMillis : l9 = virtualinvoke $r3.<org.joda.time.DateTimeField: long set(long,int)>(l8, i2)
org.joda.time.chrono.BaseChronology.getDateTimeMillis : l9 = virtualinvoke $r3.<org.joda.time.DateTimeField: long set(long,int)>(l8, i2) >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : $r1 = r0.<org.joda.time.chrono.BasicDayOfMonthDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long)>(l0)
org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : $i1 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.BasicChronology.getDayOfMonth : i1 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i1)
org.joda.time.chrono.BasicChronology.getDayOfMonth : i2 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getMonthOfYear(long,int)>(l0, i1) >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 7593750
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 7593750 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 10125000
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : if i2 >= 10125000 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 4
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : $b6 = 4 >>>>>>>> org.joda.time.chrono.BasicGJChronology.getMonthOfYear : goto [?= return $b6]
org.joda.time.chrono.BasicGJChronology.getMonthOfYear : goto [?= return $b6] >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l0, i1, i2)
org.joda.time.chrono.BasicChronology.getDayOfMonth : $i3 = virtualinvoke r0.<org.joda.time.chrono.BasicChronology: int getDayOfMonth(long,int,int)>(l0, i1, i2) >>>>>>>> org.joda.time.chrono.BasicChronology.getDayOfMonth : return $i3
org.joda.time.chrono.BasicChronology.getDayOfMonth : return $i3 >>>>>>>> org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : return $i1
org.joda.time.chrono.BasicDayOfMonthDateTimeField.get : return $i1 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r10 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r10 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfMonth()>() >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r10
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r10 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $r1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getDurationField()>()
org.joda.time.field.BaseDateTimeField.add : $r1 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getDurationField()>() >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getDurationField : $r1 = r0.<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField iUnitField>
org.joda.time.field.PreciseDurationDateTimeField.getDurationField : $r1 = r0.<org.joda.time.field.PreciseDurationDateTimeField: org.joda.time.DurationField iUnitField> >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getDurationField : return $r1
org.joda.time.field.PreciseDurationDateTimeField.getDurationField : return $r1 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : $l2 = virtualinvoke $r1.<org.joda.time.DurationField: long add(long,long)>(l0, l1)
org.joda.time.field.BaseDateTimeField.add : $l2 = virtualinvoke $r1.<org.joda.time.DurationField: long add(long,long)>(l0, l1) >>>>>>>> org.joda.time.field.PreciseDurationField.add : $l3 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis>
org.joda.time.field.PreciseDurationField.add : $l3 = r0.<org.joda.time.field.PreciseDurationField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationField.add : l2 = staticinvoke <org.joda.time.field.FieldUtils: long safeMultiply(long,long)>(l1, $l3)
org.joda.time.field.PreciseDurationField.add : l2 = staticinvoke <org.joda.time.field.FieldUtils: long safeMultiply(long,long)>(l1, $l3) >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : $b3 = l1 cmp 1L
org.joda.time.field.FieldUtils.safeMultiply : $b3 = l1 cmp 1L >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : if $b3 != 0
org.joda.time.field.FieldUtils.safeMultiply : if $b3 != 0 >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : $b4 = l1 cmp 0L
org.joda.time.field.FieldUtils.safeMultiply : $b4 = l1 cmp 0L >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : if $b4 != 0
org.joda.time.field.FieldUtils.safeMultiply : if $b4 != 0 >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : l2 = l0 * l1
org.joda.time.field.FieldUtils.safeMultiply : l2 = l0 * l1 >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : $l5 = l2 / l1
org.joda.time.field.FieldUtils.safeMultiply : $l5 = l2 / l1 >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : $b6 = $l5 cmp l0
org.joda.time.field.FieldUtils.safeMultiply : $b6 = $l5 cmp l0 >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : if $b6 == 0
org.joda.time.field.FieldUtils.safeMultiply : if $b6 == 0 >>>>>>>> org.joda.time.field.FieldUtils.safeMultiply : return l2
org.joda.time.field.FieldUtils.safeMultiply : return l2 >>>>>>>> org.joda.time.field.PreciseDurationField.add : $l4 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l0, l2)
org.joda.time.field.PreciseDurationField.add : $l4 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l0, l2) >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : l2 = l0 + l1
org.joda.time.field.FieldUtils.safeAdd : l2 = l0 + l1 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $l3 = l0 ^ l2
org.joda.time.field.FieldUtils.safeAdd : $l3 = l0 ^ l2 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : $b4 = $l3 cmp 0L
org.joda.time.field.FieldUtils.safeAdd : $b4 = $l3 cmp 0L >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : if $b4 >= 0
org.joda.time.field.FieldUtils.safeAdd : if $b4 >= 0 >>>>>>>> org.joda.time.field.FieldUtils.safeAdd : return l2
org.joda.time.field.FieldUtils.safeAdd : return l2 >>>>>>>> org.joda.time.field.PreciseDurationField.add : return $l4
org.joda.time.field.PreciseDurationField.add : return $l4 >>>>>>>> org.joda.time.field.BaseDateTimeField.add : return $l2
org.joda.time.field.BaseDateTimeField.add : return $l2 >>>>>>>> org.joda.time.chrono.BaseChronology.getDateTimeMillis : $r4 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>()
org.joda.time.chrono.BaseChronology.getDateTimeMillis : $r4 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField hourOfDay()>() >>>>>>>> org.joda.time.chrono.BaseChronology.getDateTimeMillis : l10 = virtualinvoke $r4.<org.joda.time.DateTimeField: long set(long,int)>(l9, i3)
org.joda.time.chrono.BaseChronology.getDateTimeMillis : l10 = virtualinvoke $r4.<org.joda.time.DateTimeField: long set(long,int)>(l9, i3) >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $b1 = l0 cmp 0L
org.joda.time.field.PreciseDateTimeField.get : $b1 = l0 cmp 0L >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : if $b1 < 0
org.joda.time.field.PreciseDateTimeField.get : if $b1 < 0 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l2 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: long getUnitMillis()>()
org.joda.time.field.PreciseDateTimeField.get : $l2 = virtualinvoke r0.<org.joda.time.field.PreciseDateTimeField: long getUnitMillis()>() >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : $l0 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : return $l0
org.joda.time.field.PreciseDurationDateTimeField.getUnitMillis : return $l0 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l3 = l0 / $l2
org.joda.time.field.PreciseDateTimeField.get : $l3 = l0 / $l2 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $i4 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange>
org.joda.time.field.PreciseDateTimeField.get : $i4 = r0.<org.joda.time.field.PreciseDateTimeField: int iRange> >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l5 = (long) $i4
org.joda.time.field.PreciseDateTimeField.get : $l5 = (long) $i4 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $l6 = $l3 % $l5
org.joda.time.field.PreciseDateTimeField.get : $l6 = $l3 % $l5 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : $i7 = (int) $l6
org.joda.time.field.PreciseDateTimeField.get : $i7 = (int) $l6 >>>>>>>> org.joda.time.field.PreciseDateTimeField.get : return $i7
org.joda.time.field.PreciseDateTimeField.get : return $i7 >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r19 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r19 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField hourOfDay()>() >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r19
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r19 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : if z0 != 0
org.joda.time.DateTimeZone.convertLocalToUTC : if z0 != 0 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : if i1 >= 0
org.joda.time.DateTimeZone.convertLocalToUTC : if i1 >= 0 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : $l7 = (long) i1
org.joda.time.DateTimeZone.convertLocalToUTC : $l7 = (long) i1 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : $l8 = l0 - $l7
org.joda.time.DateTimeZone.convertLocalToUTC : $l8 = l0 - $l7 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : l3 = virtualinvoke r0.<org.joda.time.DateTimeZone: long nextTransition(long)>($l8)
org.joda.time.DateTimeZone.convertLocalToUTC : l3 = virtualinvoke r0.<org.joda.time.DateTimeZone: long nextTransition(long)>($l8) >>>>>>>> org.joda.time.MockZone.nextTransition : $l1 = r0.<org.joda.time.MockZone: long transition>
org.joda.time.MockZone.nextTransition : $l1 = r0.<org.joda.time.MockZone: long transition> >>>>>>>> org.joda.time.MockZone.nextTransition : $b2 = l0 cmp $l1
org.joda.time.MockZone.nextTransition : $b2 = l0 cmp $l1 >>>>>>>> org.joda.time.MockZone.nextTransition : if $b2 >= 0
org.joda.time.MockZone.nextTransition : if $b2 >= 0 >>>>>>>> org.joda.time.MockZone.nextTransition : $l4 = r0.<org.joda.time.MockZone: long transition>
org.joda.time.MockZone.nextTransition : $l4 = r0.<org.joda.time.MockZone: long transition> >>>>>>>> org.joda.time.MockZone.nextTransition : $l3 = $l4 + 15552000000L
org.joda.time.MockZone.nextTransition : $l3 = $l4 + 15552000000L >>>>>>>> org.joda.time.MockZone.nextTransition : return $l3
org.joda.time.MockZone.nextTransition : return $l3 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : $l9 = (long) i1
org.joda.time.DateTimeZone.convertLocalToUTC : $l9 = (long) i1 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : $l10 = l0 - $l9
org.joda.time.DateTimeZone.convertLocalToUTC : $l10 = l0 - $l9 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : $b11 = l3 cmp $l10
org.joda.time.DateTimeZone.convertLocalToUTC : $b11 = l3 cmp $l10 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : if $b11 != 0
org.joda.time.DateTimeZone.convertLocalToUTC : if $b11 != 0 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : $l12 = (long) i2
org.joda.time.DateTimeZone.convertLocalToUTC : $l12 = (long) i2 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : $l13 = l0 - $l12
org.joda.time.DateTimeZone.convertLocalToUTC : $l13 = l0 - $l12 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : l4 = virtualinvoke r0.<org.joda.time.DateTimeZone: long nextTransition(long)>($l13)
org.joda.time.DateTimeZone.convertLocalToUTC : l4 = virtualinvoke r0.<org.joda.time.DateTimeZone: long nextTransition(long)>($l13) >>>>>>>> org.joda.time.MockZone.nextTransition : $l3 = r0.<org.joda.time.MockZone: long transition>
org.joda.time.MockZone.nextTransition : $l3 = r0.<org.joda.time.MockZone: long transition> >>>>>>>> org.joda.time.MockZone.nextTransition : goto [?= return $l3]
org.joda.time.MockZone.nextTransition : goto [?= return $l3] >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : $l14 = (long) i2
org.joda.time.DateTimeZone.convertLocalToUTC : $l14 = (long) i2 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : $l15 = l0 - $l14
org.joda.time.DateTimeZone.convertLocalToUTC : $l15 = l0 - $l14 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : $b16 = l4 cmp $l15
org.joda.time.DateTimeZone.convertLocalToUTC : $b16 = l4 cmp $l15 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : if $b16 != 0
org.joda.time.DateTimeZone.convertLocalToUTC : if $b16 != 0 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : $b17 = l3 cmp l4
org.joda.time.DateTimeZone.convertLocalToUTC : $b17 = l3 cmp l4 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : if $b17 == 0
org.joda.time.DateTimeZone.convertLocalToUTC : if $b17 == 0 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : if z0 == 0
org.joda.time.DateTimeZone.convertLocalToUTC : if z0 == 0 >>>>>>>> org.joda.time.DateTimeZone.convertLocalToUTC : i2 = i1
org.joda.time.DateTimeZone.convertLocalToUTC : i2 = i1 >>>>>>>> org.joda.time.chrono.BaseChronology.getDateTimeMillis : $r5 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>()
org.joda.time.chrono.BaseChronology.getDateTimeMillis : $r5 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField minuteOfHour()>() >>>>>>>> org.joda.time.chrono.BaseChronology.getDateTimeMillis : l11 = virtualinvoke $r5.<org.joda.time.DateTimeField: long set(long,int)>(l10, i4)
org.joda.time.chrono.BaseChronology.getDateTimeMillis : l11 = virtualinvoke $r5.<org.joda.time.DateTimeField: long set(long,int)>(l10, i4) >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r21 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r21 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField minuteOfHour()>() >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r21
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r21 >>>>>>>> org.joda.time.chrono.BaseChronology.getDateTimeMillis : $r6 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>()
org.joda.time.chrono.BaseChronology.getDateTimeMillis : $r6 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField secondOfMinute()>() >>>>>>>> org.joda.time.chrono.BaseChronology.getDateTimeMillis : l12 = virtualinvoke $r6.<org.joda.time.DateTimeField: long set(long,int)>(l11, i5)
org.joda.time.chrono.BaseChronology.getDateTimeMillis : l12 = virtualinvoke $r6.<org.joda.time.DateTimeField: long set(long,int)>(l11, i5) >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r23 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r23 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfMinute()>() >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r23
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r23 >>>>>>>> org.joda.time.chrono.BaseChronology.getDateTimeMillis : $r7 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>()
org.joda.time.chrono.BaseChronology.getDateTimeMillis : $r7 = virtualinvoke r0.<org.joda.time.chrono.BaseChronology: org.joda.time.DateTimeField millisOfSecond()>() >>>>>>>> org.joda.time.chrono.BaseChronology.getDateTimeMillis : $l13 = virtualinvoke $r7.<org.joda.time.DateTimeField: long set(long,int)>(l12, i6)
org.joda.time.chrono.BaseChronology.getDateTimeMillis : $l13 = virtualinvoke $r7.<org.joda.time.DateTimeField: long set(long,int)>(l12, i6) >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r25 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r25 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField millisOfSecond()>() >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r25
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r25 >>>>>>>> org.joda.time.field.MillisDurationField.add : $l2 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l0, l1)
org.joda.time.field.MillisDurationField.add : $l2 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l0, l1) >>>>>>>> org.joda.time.field.MillisDurationField.add : return $l2
org.joda.time.field.MillisDurationField.add : return $l2 >>>>>>>> org.joda.time.chrono.BaseChronology.getDateTimeMillis : return $l13
org.joda.time.chrono.BaseChronology.getDateTimeMillis : return $l13 >>>>>>>> org.joda.time.chrono.AssembledChronology.getDateTimeMillis : return $l10
org.joda.time.chrono.AssembledChronology.getDateTimeMillis : return $l10 >>>>>>>> org.joda.time.base.BaseDateTime.checkInstant : return l0
org.joda.time.base.BaseDateTime.checkInstant : return l0 >>>>>>>> org.joda.time.base.AbstractInstant.toString : $r1 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTime()>()
org.joda.time.base.AbstractInstant.toString : $r1 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTime()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.dateTime : $r0 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dt>
org.joda.time.format.ISODateTimeFormat.dateTime : $r0 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dt> >>>>>>>> org.joda.time.format.ISODateTimeFormat.dateTime : if $r0 != null
org.joda.time.format.ISODateTimeFormat.dateTime : if $r0 != null >>>>>>>> org.joda.time.format.ISODateTimeFormat.dateTime : $r7 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dt>
org.joda.time.format.ISODateTimeFormat.dateTime : $r7 = <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dt> >>>>>>>> org.joda.time.format.ISODateTimeFormat.dateTime : return $r7
org.joda.time.format.ISODateTimeFormat.dateTime : return $r7 >>>>>>>> org.joda.time.base.AbstractInstant.toString : $r2 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>(r0)
org.joda.time.base.AbstractInstant.toString : $r2 = virtualinvoke $r1.<org.joda.time.format.DateTimeFormatter: java.lang.String print(org.joda.time.ReadableInstant)>(r0) >>>>>>>> org.joda.time.format.DateTimeFormatter.print : $r2 = new java.lang.StringBuffer
org.joda.time.format.DateTimeFormatter.print : $r2 = new java.lang.StringBuffer >>>>>>>> org.joda.time.format.DateTimeFormatter.print : $r4 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter requirePrinter()>()
org.joda.time.format.DateTimeFormatter.print : $r4 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter requirePrinter()>() >>>>>>>> org.joda.time.format.DateTimeFormatter.requirePrinter : r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter iPrinter>
org.joda.time.format.DateTimeFormatter.requirePrinter : r1 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter iPrinter> >>>>>>>> org.joda.time.format.DateTimeFormatter.requirePrinter : if r1 != null
org.joda.time.format.DateTimeFormatter.requirePrinter : if r1 != null >>>>>>>> org.joda.time.format.DateTimeFormatter.requirePrinter : return r1
org.joda.time.format.DateTimeFormatter.requirePrinter : return r1 >>>>>>>> org.joda.time.format.DateTimeFormatter.print : $i0 = interfaceinvoke $r4.<org.joda.time.format.DateTimePrinter: int estimatePrintedLength()>()
org.joda.time.format.DateTimeFormatter.print : $i0 = interfaceinvoke $r4.<org.joda.time.format.DateTimePrinter: int estimatePrintedLength()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.estimatePrintedLength : $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: int iPrintedLengthEstimate>
org.joda.time.format.DateTimeFormatterBuilder$Composite.estimatePrintedLength : $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: int iPrintedLengthEstimate> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.estimatePrintedLength : return $i0
org.joda.time.format.DateTimeFormatterBuilder$Composite.estimatePrintedLength : return $i0 >>>>>>>> org.joda.time.format.DateTimeFormatter.print : specialinvoke $r2.<java.lang.StringBuffer: void <init>(int)>($i0)
org.joda.time.format.DateTimeFormatter.print : specialinvoke $r2.<java.lang.StringBuffer: void <init>(int)>($i0) >>>>>>>> org.joda.time.format.DateTimeFormatter.print : r3 = $r2
org.joda.time.format.DateTimeFormatter.print : r3 = $r2 >>>>>>>> org.joda.time.format.DateTimeFormatter.print : virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadableInstant)>(r3, r1)
org.joda.time.format.DateTimeFormatter.print : virtualinvoke r0.<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.StringBuffer,org.joda.time.ReadableInstant)>(r3, r1) >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>(r2)
org.joda.time.format.DateTimeFormatter.printTo : l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>(r2) >>>>>>>> org.joda.time.DateTimeUtils.getInstantMillis : if r0 != null
org.joda.time.DateTimeUtils.getInstantMillis : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getInstantMillis : $l1 = interfaceinvoke r0.<org.joda.time.ReadableInstant: long getMillis()>()
org.joda.time.DateTimeUtils.getInstantMillis : $l1 = interfaceinvoke r0.<org.joda.time.ReadableInstant: long getMillis()>() >>>>>>>> org.joda.time.base.BaseDateTime.getMillis : $l0 = r0.<org.joda.time.base.BaseDateTime: long iMillis>
org.joda.time.base.BaseDateTime.getMillis : $l0 = r0.<org.joda.time.base.BaseDateTime: long iMillis> >>>>>>>> org.joda.time.base.BaseDateTime.getMillis : return $l0
org.joda.time.base.BaseDateTime.getMillis : return $l0 >>>>>>>> org.joda.time.DateTimeUtils.getInstantMillis : return $l1
org.joda.time.DateTimeUtils.getInstantMillis : return $l1 >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>(r2)
org.joda.time.format.DateTimeFormatter.printTo : r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>(r2) >>>>>>>> org.joda.time.DateTimeUtils.getInstantChronology : if r0 != null
org.joda.time.DateTimeUtils.getInstantChronology : if r0 != null >>>>>>>> org.joda.time.DateTimeUtils.getInstantChronology : r1 = interfaceinvoke r0.<org.joda.time.ReadableInstant: org.joda.time.Chronology getChronology()>()
org.joda.time.DateTimeUtils.getInstantChronology : r1 = interfaceinvoke r0.<org.joda.time.ReadableInstant: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.base.BaseDateTime.getChronology : $r1 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology>
org.joda.time.base.BaseDateTime.getChronology : $r1 = r0.<org.joda.time.base.BaseDateTime: org.joda.time.Chronology iChronology> >>>>>>>> org.joda.time.base.BaseDateTime.getChronology : return $r1
org.joda.time.base.BaseDateTime.getChronology : return $r1 >>>>>>>> org.joda.time.DateTimeUtils.getInstantChronology : if r1 != null
org.joda.time.DateTimeUtils.getInstantChronology : if r1 != null >>>>>>>> org.joda.time.DateTimeUtils.getInstantChronology : return r1
org.joda.time.DateTimeUtils.getInstantChronology : return r1 >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : specialinvoke r0.<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology)>(r1, l0, r3)
org.joda.time.format.DateTimeFormatter.printTo : specialinvoke r0.<org.joda.time.format.DateTimeFormatter: void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology)>(r1, l0, r3) >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : r3 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter requirePrinter()>()
org.joda.time.format.DateTimeFormatter.printTo : r3 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimePrinter requirePrinter()>() >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : r5 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>(r2)
org.joda.time.format.DateTimeFormatter.printTo : r5 = specialinvoke r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology selectChronology(org.joda.time.Chronology)>(r2) >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1)
org.joda.time.format.DateTimeFormatter.selectChronology : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : $r3 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono>
org.joda.time.format.DateTimeFormatter.selectChronology : $r3 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.Chronology iChrono> >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : if $r3 == null
org.joda.time.format.DateTimeFormatter.selectChronology : if $r3 == null >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : $r4 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone>
org.joda.time.format.DateTimeFormatter.selectChronology : $r4 = r0.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : if $r4 == null
org.joda.time.format.DateTimeFormatter.selectChronology : if $r4 == null >>>>>>>> org.joda.time.format.DateTimeFormatter.selectChronology : return r2
org.joda.time.format.DateTimeFormatter.selectChronology : return r2 >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : r4 = virtualinvoke r5.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.format.DateTimeFormatter.printTo : r4 = virtualinvoke r5.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : i1 = virtualinvoke r4.<org.joda.time.DateTimeZone: int getOffset(long)>(l0)
org.joda.time.format.DateTimeFormatter.printTo : i1 = virtualinvoke r4.<org.joda.time.DateTimeZone: int getOffset(long)>(l0) >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : $l3 = (long) i1
org.joda.time.format.DateTimeFormatter.printTo : $l3 = (long) i1 >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : l2 = l0 + $l3
org.joda.time.format.DateTimeFormatter.printTo : l2 = l0 + $l3 >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : $l4 = l0 ^ l2
org.joda.time.format.DateTimeFormatter.printTo : $l4 = l0 ^ l2 >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : $b5 = $l4 cmp 0L
org.joda.time.format.DateTimeFormatter.printTo : $b5 = $l4 cmp 0L >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : if $b5 >= 0
org.joda.time.format.DateTimeFormatter.printTo : if $b5 >= 0 >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : $r6 = virtualinvoke r5.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>()
org.joda.time.format.DateTimeFormatter.printTo : $r6 = virtualinvoke r5.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>() >>>>>>>> org.joda.time.chrono.LenientChronology.withUTC : $r2 = r0.<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology iWithUTC>
org.joda.time.chrono.LenientChronology.withUTC : $r2 = r0.<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology iWithUTC> >>>>>>>> org.joda.time.chrono.LenientChronology.withUTC : if $r2 != null
org.joda.time.chrono.LenientChronology.withUTC : if $r2 != null >>>>>>>> org.joda.time.chrono.LenientChronology.withUTC : $r3 = virtualinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.LenientChronology.withUTC : $r3 = virtualinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.LenientChronology.withUTC : $r1 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>
org.joda.time.chrono.LenientChronology.withUTC : $r1 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC> >>>>>>>> org.joda.time.chrono.LenientChronology.withUTC : if $r3 != $r1
org.joda.time.chrono.LenientChronology.withUTC : if $r3 != $r1 >>>>>>>> org.joda.time.chrono.LenientChronology.withUTC : $r4 = virtualinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.LenientChronology.withUTC : $r4 = virtualinvoke r0.<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology getBase()>() >>>>>>>> org.joda.time.chrono.LenientChronology.withUTC : $r5 = virtualinvoke $r4.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>()
org.joda.time.chrono.LenientChronology.withUTC : $r5 = virtualinvoke $r4.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>() >>>>>>>> org.joda.time.chrono.LenientChronology.withUTC : $r6 = staticinvoke <org.joda.time.chrono.LenientChronology: org.joda.time.chrono.LenientChronology getInstance(org.joda.time.Chronology)>($r5)
org.joda.time.chrono.LenientChronology.withUTC : $r6 = staticinvoke <org.joda.time.chrono.LenientChronology: org.joda.time.chrono.LenientChronology getInstance(org.joda.time.Chronology)>($r5) >>>>>>>> org.joda.time.field.MillisDurationField.isSupported : return 1
org.joda.time.field.MillisDurationField.isSupported : return 1 >>>>>>>> org.joda.time.chrono.LenientChronology.withUTC : r0.<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology iWithUTC> = $r6
org.joda.time.chrono.LenientChronology.withUTC : r0.<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology iWithUTC> = $r6 >>>>>>>> org.joda.time.chrono.LenientChronology.withUTC : $r7 = r0.<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology iWithUTC>
org.joda.time.chrono.LenientChronology.withUTC : $r7 = r0.<org.joda.time.chrono.LenientChronology: org.joda.time.Chronology iWithUTC> >>>>>>>> org.joda.time.chrono.LenientChronology.withUTC : return $r7
org.joda.time.chrono.LenientChronology.withUTC : return $r7 >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : $r7 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale>
org.joda.time.format.DateTimeFormatter.printTo : $r7 = r0.<org.joda.time.format.DateTimeFormatter: java.util.Locale iLocale> >>>>>>>> org.joda.time.format.DateTimeFormatter.printTo : interfaceinvoke r3.<org.joda.time.format.DateTimePrinter: void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>(r1, l2, $r6, i1, r4, $r7)
org.joda.time.format.DateTimeFormatter.printTo : interfaceinvoke r3.<org.joda.time.format.DateTimePrinter: void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>(r1, l2, $r6, i1, r4, $r7) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : r5 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: org.joda.time.format.DateTimePrinter[] iPrinters>
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : r5 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Composite: org.joda.time.format.DateTimePrinter[] iPrinters> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : if r5 != null
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : if r5 != null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : if r4 != null
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : if r4 != null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : r4 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>()
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : r4 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : i2 = lengthof r5
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : i2 = lengthof r5 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : i3 = 0
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : i3 = 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : if i3 >= i2
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : if i3 >= i2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : $r7 = r5[i3]
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : $r7 = r5[i3] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : interfaceinvoke $r7.<org.joda.time.format.DateTimePrinter: void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>(r1, l0, r2, i1, r3, r4)
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : interfaceinvoke $r7.<org.joda.time.format.DateTimePrinter: void printTo(java.lang.StringBuffer,long,org.joda.time.Chronology,int,org.joda.time.DateTimeZone,java.util.Locale)>(r1, l0, r2, i1, r3, r4) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $r6 = r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: org.joda.time.DateTimeFieldType iFieldType>
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $r6 = r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: org.joda.time.DateTimeFieldType iFieldType> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : r5 = virtualinvoke $r6.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r2)
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : r5 = virtualinvoke $r6.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r2) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $i2 = virtualinvoke r5.<org.joda.time.DateTimeField: int get(long)>(l0)
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $i2 = virtualinvoke r5.<org.joda.time.DateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $i3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: int iMinPrintedDigits>
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : $i3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber: int iMinPrintedDigits> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, $i2, $i3)
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, $i2, $i3) >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 0
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 0 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 10
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 10 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 100
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 100 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 1000
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 1000 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 10000
org.joda.time.format.FormatUtils.appendPaddedInteger : if i0 >= 10000 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : i15 = 4
org.joda.time.format.FormatUtils.appendPaddedInteger : i15 = 4 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : goto [?= (branch)]
org.joda.time.format.FormatUtils.appendPaddedInteger : goto [?= (branch)] >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i1 <= i15
org.joda.time.format.FormatUtils.appendPaddedInteger : if i1 <= i15 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $r10 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0)
org.joda.time.format.FormatUtils.appendPaddedInteger : $r10 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0) >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10)
org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : goto [?= return]
org.joda.time.format.DateTimeFormatterBuilder$PaddedNumber.printTo : goto [?= return] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : i3 = i3 + 1
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : i3 = i3 + 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : goto [?= (branch)]
org.joda.time.format.DateTimeFormatterBuilder$Composite.printTo : goto [?= (branch)] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.printTo : $c2 = r0.<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: char iValue>
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.printTo : $c2 = r0.<org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral: char iValue> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2)
org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2) >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i1 <= 1
org.joda.time.format.FormatUtils.appendPaddedInteger : if i1 <= 1 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48)
org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48) >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : i1 = i1 + -1
org.joda.time.format.FormatUtils.appendPaddedInteger : i1 = i1 + -1 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i3 = i0 + 48
org.joda.time.format.FormatUtils.appendPaddedInteger : $i3 = i0 + 48 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $c4 = (char) $i3
org.joda.time.format.FormatUtils.appendPaddedInteger : $c4 = (char) $i3 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4)
org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4) >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : goto [?= return]
org.joda.time.format.FormatUtils.appendPaddedInteger : goto [?= return] >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : if i1 <= 2
org.joda.time.format.FormatUtils.appendPaddedInteger : if i1 <= 2 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i5 = i0 + 1
org.joda.time.format.FormatUtils.appendPaddedInteger : $i5 = i0 + 1 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i6 = $i5 * 13421772
org.joda.time.format.FormatUtils.appendPaddedInteger : $i6 = $i5 * 13421772 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : i2 = $i6 >> 27
org.joda.time.format.FormatUtils.appendPaddedInteger : i2 = $i6 >> 27 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i7 = i2 + 48
org.joda.time.format.FormatUtils.appendPaddedInteger : $i7 = i2 + 48 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $c8 = (char) $i7
org.joda.time.format.FormatUtils.appendPaddedInteger : $c8 = (char) $i7 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c8)
org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c8) >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i9 = i2 << 3
org.joda.time.format.FormatUtils.appendPaddedInteger : $i9 = i2 << 3 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i10 = i0 - $i9
org.joda.time.format.FormatUtils.appendPaddedInteger : $i10 = i0 - $i9 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i11 = i2 << 1
org.joda.time.format.FormatUtils.appendPaddedInteger : $i11 = i2 << 1 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i12 = $i10 - $i11
org.joda.time.format.FormatUtils.appendPaddedInteger : $i12 = $i10 - $i11 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $i13 = $i12 + 48
org.joda.time.format.FormatUtils.appendPaddedInteger : $i13 = $i12 + 48 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : $c14 = (char) $i13
org.joda.time.format.FormatUtils.appendPaddedInteger : $c14 = (char) $i13 >>>>>>>> org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c14)
org.joda.time.format.FormatUtils.appendPaddedInteger : virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c14) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.StringBuffer,java.io.Writer,long,org.joda.time.Chronology)>(r1, null, l0, r2)
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: void printTo(java.lang.StringBuffer,java.io.Writer,long,org.joda.time.Chronology)>(r1, null, l0, r2) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $r7 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: org.joda.time.DateTimeFieldType iFieldType>
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $r7 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: org.joda.time.DateTimeFieldType iFieldType> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : r4 = virtualinvoke $r7.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r3)
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : r4 = virtualinvoke $r7.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r3) >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r22 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfDay()>()
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : $r22 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeField secondOfDay()>() >>>>>>>> org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r22
org.joda.time.DateTimeFieldType$StandardDateTimeFieldType.getField : return $r22 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : i1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int iMinDigits>
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : i1 = r0.<org.joda.time.format.DateTimeFormatterBuilder$Fraction: int iMinDigits> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : l2 = virtualinvoke r4.<org.joda.time.DateTimeField: long remainder(long)>(l0)
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : l2 = virtualinvoke r4.<org.joda.time.DateTimeField: long remainder(long)>(l0) >>>>>>>> org.joda.time.field.DelegatedDateTimeField.remainder : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField>
org.joda.time.field.DelegatedDateTimeField.remainder : $r1 = r0.<org.joda.time.field.DelegatedDateTimeField: org.joda.time.DateTimeField iField> >>>>>>>> org.joda.time.field.DelegatedDateTimeField.remainder : $l1 = virtualinvoke $r1.<org.joda.time.DateTimeField: long remainder(long)>(l0)
org.joda.time.field.DelegatedDateTimeField.remainder : $l1 = virtualinvoke $r1.<org.joda.time.DateTimeField: long remainder(long)>(l0) >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.remainder : $b1 = l0 cmp 0L
org.joda.time.field.PreciseDurationDateTimeField.remainder : $b1 = l0 cmp 0L >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.remainder : if $b1 < 0
org.joda.time.field.PreciseDurationDateTimeField.remainder : if $b1 < 0 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.remainder : $l2 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis>
org.joda.time.field.PreciseDurationDateTimeField.remainder : $l2 = r0.<org.joda.time.field.PreciseDurationDateTimeField: long iUnitMillis> >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.remainder : $l3 = l0 % $l2
org.joda.time.field.PreciseDurationDateTimeField.remainder : $l3 = l0 % $l2 >>>>>>>> org.joda.time.field.PreciseDurationDateTimeField.remainder : return $l3
org.joda.time.field.PreciseDurationDateTimeField.remainder : return $l3 >>>>>>>> org.joda.time.field.DelegatedDateTimeField.remainder : return $l1
org.joda.time.field.DelegatedDateTimeField.remainder : return $l1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : goto [?= $b8 = l2 cmp 0L]
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : goto [?= $b8 = l2 cmp 0L] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $b8 = l2 cmp 0L
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : $b8 = l2 cmp 0L >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : if $b8 != 0
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : if $b8 != 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : if r1 == null
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : if r1 == null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : i1 = i1 + -1
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : i1 = i1 + -1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : if i1 < 0
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : if i1 < 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48)
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : goto [?= i1 = i1 + -1]
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : goto [?= i1 = i1 + -1] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : goto [?= return]
org.joda.time.format.DateTimeFormatterBuilder$Fraction.printTo : goto [?= return] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : if r3 != null
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : if r3 != null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : if i1 != 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : if i1 != 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : if i1 < 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : if i1 < 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(45) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : i1 = neg i1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : i1 = neg i1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : i2 = i1 / 3600000
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : i2 = i1 / 3600000 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, i2, 2)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, i2, 2) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : $i5 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMaxFields>
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : $i5 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMaxFields> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : if $i5 != 1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : if $i5 != 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : $i6 = i2 * 3600000
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : $i6 = i2 * 3600000 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : i7 = i1 - $i6
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : i7 = i1 - $i6 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : if i7 != 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : if i7 != 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : $i8 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMinFields>
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : $i8 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMinFields> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : if $i8 > 1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : if $i8 > 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : i3 = i7 / 60000
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : i3 = i7 / 60000 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : $z0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: boolean iShowSeparators>
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : $z0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: boolean iShowSeparators> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : if $z0 == 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : if $z0 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, i3, 2)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : staticinvoke <org.joda.time.format.FormatUtils: void appendPaddedInteger(java.lang.StringBuffer,int,int)>(r1, i3, 2) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : $i9 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMaxFields>
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : $i9 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMaxFields> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : if $i9 != 2
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : if $i9 != 2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : $i10 = i3 * 60000
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : $i10 = i3 * 60000 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : i11 = i7 - $i10
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : i11 = i7 - $i10 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : if i11 != 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : if i11 != 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : $i12 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMinFields>
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : $i12 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int iMinFields> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : if $i12 > 2
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.printTo : if $i12 > 2 >>>>>>>> org.joda.time.format.DateTimeFormatter.print : $r5 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>()
org.joda.time.format.DateTimeFormatter.print : $r5 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> org.joda.time.format.DateTimeFormatter.print : return $r5
org.joda.time.format.DateTimeFormatter.print : return $r5 >>>>>>>> org.joda.time.base.AbstractInstant.toString : return $r2
