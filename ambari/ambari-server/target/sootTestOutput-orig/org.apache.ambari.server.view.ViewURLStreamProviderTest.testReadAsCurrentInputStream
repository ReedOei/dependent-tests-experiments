org.apache.ambari.server.view.ViewURLStreamProvider.access$000 : $r0 = <org.apache.ambari.server.view.ViewURLStreamProvider: org.apache.commons.logging.Log LOG>
org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getKey : $r1 = r0.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String m_key>
org.apache.ambari.server.view.ViewURLStreamProvider.addDoAs : $r8 = virtualinvoke r3.<org.apache.http.client.utils.URIBuilder: java.net.URI build()>()
org.apache.ambari.server.view.ViewURLStreamProvider.addDoAs : $r4 = virtualinvoke r1.<java.lang.String: java.lang.String toLowerCase()>()
org.apache.ambari.server.view.ViewURLStreamProvider.addDoAs : $r6 = new org.apache.http.client.utils.URIBuilder
org.apache.ambari.server.view.ViewURLStreamProvider.addDoAs : virtualinvoke r3.<org.apache.http.client.utils.URIBuilder: org.apache.http.client.utils.URIBuilder addParameter(java.lang.String,java.lang.String)>("doAs", r2)
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r27 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider: org.apache.ambari.server.controller.internal.URLStreamProvider streamProvider>
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r23 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>()
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r20 = new java.util.HashMap
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r21 = interfaceinvoke r3.<java.util.Map: java.util.Set entrySet()>()
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : goto [?= $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $z0 = virtualinvoke r0.<org.apache.ambari.server.view.ViewURLStreamProvider: boolean isProxyCallAllowed(java.lang.String)>(r1)
org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : return 1
org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isNotBlank(java.lang.String)>(r1)
org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : r0.<org.apache.ambari.server.view.ViewURLStreamProvider: org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler hostPortRestrictionHandler> = r2
org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : $r8 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider: org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler hostPortRestrictionHandler>
org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : $r3 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider: org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler hostPortRestrictionHandler>
org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : $r4 = new org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler
org.apache.ambari.server.view.ViewURLStreamProvider.readFrom : if r3 != null goto $r9 = staticinvoke <org.apache.commons.io.IOUtils: byte[] toByteArray(java.io.InputStream)>(r3)
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.proxyCallRestricted : $r2 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.lang.Boolean isProxyCallRestricted>
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.proxyCallRestricted : $r1 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.util.Map allowedHostPorts>
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.proxyCallRestricted : specialinvoke r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: void initializeAllowedHostPorts()>()
org.apache.ambari.server.view.ViewURLStreamProvider.readAsCurrent : $r5 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider: org.apache.ambari.view.ViewContext viewContext>
org.apache.ambari.server.view.ViewURLStreamProvider.getInputStream : i0 = virtualinvoke r5.<java.net.HttpURLConnection: int getResponseCode()>()
org.apache.ambari.server.view.ViewURLStreamProvider.getInputStream : r5 = specialinvoke r0.<org.apache.ambari.server.view.ViewURLStreamProvider: java.net.HttpURLConnection getHttpURLConnection(java.lang.String,java.lang.String,java.util.Map,byte[])>(r1, r2, r3, r4)
org.apache.ambari.server.view.ViewURLStreamProvider.getInputStream : $i1 = <org.apache.ambari.server.proxy.ProxyService: int HTTP_ERROR_RANGE_START>
org.apache.ambari.server.view.ViewURLStreamProvider.getInputStream : $z0 = virtualinvoke r0.<org.apache.ambari.server.view.ViewURLStreamProvider: boolean isProxyCallAllowed(java.lang.String)>(r1)
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : z0 = 0
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r45 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0)
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r8 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.lang.String allowedHostPortsValue>
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.util.Map allowedHostPorts> = r1
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r7 = new java.util.HashMap
org.apache.ambari.server.view.ViewURLStreamProvider.readAs : $r6 = specialinvoke r0.<org.apache.ambari.server.view.ViewURLStreamProvider: java.lang.String addDoAs(java.lang.String,java.lang.String)>(r1, r5)
