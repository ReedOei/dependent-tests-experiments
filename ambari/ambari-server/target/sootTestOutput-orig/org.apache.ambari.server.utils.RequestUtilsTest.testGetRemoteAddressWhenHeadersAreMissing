org.apache.ambari.server.utils.RequestUtils.isRemoteAddressUnknown : if r0 == null goto $z1 = 1
org.apache.ambari.server.utils.RequestUtils.containsMultipleRemoteAddresses : if r0 == null goto $z0 = 0
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : $r4 = <org.apache.ambari.server.utils.RequestUtils: java.util.Set headersToCheck>
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : r1 = null
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : r1 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getRemoteAddr()>()
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : $z2 = staticinvoke <org.apache.ambari.server.utils.RequestUtils: boolean isRemoteAddressUnknown(java.lang.String)>(r1)
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : r1 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>(r3)
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : $z1 = staticinvoke <org.apache.ambari.server.utils.RequestUtils: boolean isRemoteAddressUnknown(java.lang.String)>(r1)
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : $z3 = staticinvoke <org.apache.ambari.server.utils.RequestUtils: boolean containsMultipleRemoteAddresses(java.lang.String)>(r1)
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : return r1
