org.apache.ambari.server.security.encryption.AbstractCredentialStore.loadKeyStore : r3 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(r2)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.loadKeyStore : $r11 = r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: org.apache.ambari.server.security.encryption.MasterKeyService masterKeyService>
org.apache.ambari.server.security.encryption.AbstractCredentialStore.loadKeyStore : return r3
org.apache.ambari.server.security.encryption.AbstractCredentialStore.loadKeyStore : $r5 = r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: org.apache.ambari.server.security.encryption.MasterKeyService masterKeyService>
org.apache.ambari.server.security.encryption.AbstractCredentialStore.loadKeyStore : goto [?= $r11 = r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: org.apache.ambari.server.security.encryption.MasterKeyService masterKeyService>]
org.apache.ambari.server.security.encryption.AbstractCredentialStore.loadKeyStore : goto [?= return r3]
org.apache.ambari.server.security.encryption.CredentialStoreTest$DefaultMasterKeyServiceFactory.createPersisted : staticinvoke <org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: boolean initializeMasterKeyFile(java.io.File,java.lang.String)>(r1, r2)
org.apache.ambari.server.security.encryption.CredentialStoreTest$DefaultMasterKeyServiceFactory.createPersisted : $r3 = new org.apache.ambari.server.security.encryption.MasterKeyServiceImpl
org.apache.ambari.server.security.credential.GenericKeyCredential.toValue : $r1 = r0.<org.apache.ambari.server.security.credential.GenericKeyCredential: char[] key>
org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : $r5 = virtualinvoke r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: java.security.KeyStore loadCredentialStore()>()
org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : $r6 = r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: java.util.concurrent.locks.Lock lock>
org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : r3 = null
org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : if r4 == null goto (branch)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : goto [?= $r17 = staticinvoke <org.apache.ambari.server.security.credential.CredentialFactory: org.apache.ambari.server.security.credential.Credential createCredential(char[])>(r3)]
org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : if r1 != null goto $r4 = r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: java.util.concurrent.locks.Lock lock>
org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : $r4 = r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: java.util.concurrent.locks.Lock lock>
org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : $r5 = r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: org.apache.ambari.server.security.encryption.MasterKeyService masterKeyService>
org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : if r1 == null goto $r17 = staticinvoke <org.apache.ambari.server.security.credential.CredentialFactory: org.apache.ambari.server.security.credential.Credential createCredential(char[])>(r3)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : $r17 = staticinvoke <org.apache.ambari.server.security.credential.CredentialFactory: org.apache.ambari.server.security.credential.Credential createCredential(char[])>(r3)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : $r7 = interfaceinvoke r4.<java.security.Key: byte[] getEncoded()>()
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r12 = r0.<org.apache.ambari.server.security.encryption.AESEncryptor: javax.crypto.Cipher dcipher>
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r9 = r0.<org.apache.ambari.server.security.encryption.AESEncryptor: javax.crypto.Cipher dcipher>
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r7 = new javax.crypto.spec.SecretKeySpec
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r4 = new java.lang.String
org.apache.ambari.server.security.encryption.AbstractCredentialStore.setMasterKeyService : r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: org.apache.ambari.server.security.encryption.MasterKeyService masterKeyService> = r1
org.apache.ambari.server.security.credential.GenericKeyCredential.fromValue : $r1 = new org.apache.ambari.server.security.credential.GenericKeyCredential
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : if r1 != null goto r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r1)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : $r7 = virtualinvoke r3.<java.nio.CharBuffer: char[] array()>()
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : return r4
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r1)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : $r8 = virtualinvoke r2.<java.nio.ByteBuffer: byte[] array()>()
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : $r5 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8")
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : $r6 = virtualinvoke r3.<java.nio.CharBuffer: char[] array()>()
org.apache.ambari.server.security.encryption.CredentialStoreTest$FileBasedCredentialStoreServiceFactory.create : return r4
org.apache.ambari.server.security.encryption.CredentialStoreTest$FileBasedCredentialStoreServiceFactory.create : interfaceinvoke r4.<org.apache.ambari.server.security.encryption.CredentialStore: void setMasterKeyService(org.apache.ambari.server.security.encryption.MasterKeyService)>(r2)
org.apache.ambari.server.security.encryption.CredentialStoreTest$FileBasedCredentialStoreServiceFactory.create : $r3 = new org.apache.ambari.server.security.encryption.FileBasedCredentialStore
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.getMasterSecret : $r1 = r0.<org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: char[] master>
org.apache.ambari.server.security.encryption.AbstractCredentialStore.writeKeyStore : $r6 = r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: org.apache.ambari.server.security.encryption.MasterKeyService masterKeyService>
org.apache.ambari.server.security.encryption.AbstractCredentialStore.writeKeyStore : $r4 = r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: org.apache.ambari.server.security.encryption.MasterKeyService masterKeyService>
org.apache.ambari.server.security.encryption.AbstractCredentialStore.writeKeyStore : goto [?= return]
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.putKeyStore : r4 = null
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.putKeyStore : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r4)
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.putKeyStore : $r3 = <org.apache.ambari.server.security.encryption.FileBasedCredentialStore: org.slf4j.Logger LOG>
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.putKeyStore : goto [?= return]
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.putKeyStore : $r8 = new java.io.FileOutputStream
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.putKeyStore : virtualinvoke r0.<org.apache.ambari.server.security.encryption.FileBasedCredentialStore: void writeKeyStore(java.security.KeyStore,java.io.OutputStream)>(r1, r4)
org.apache.ambari.server.security.credential.CredentialFactory.createCredential : r1 = staticinvoke <java.lang.String: java.lang.String valueOf(char[])>(r0)
org.apache.ambari.server.security.credential.CredentialFactory.createCredential : if r0 != null goto r1 = staticinvoke <java.lang.String: java.lang.String valueOf(char[])>(r0)
org.apache.ambari.server.security.credential.CredentialFactory.createCredential : $z0 = staticinvoke <org.apache.ambari.server.security.credential.PrincipalKeyCredential: boolean isValidValue(java.lang.String)>(r1)
org.apache.ambari.server.security.credential.CredentialFactory.createCredential : $r3 = staticinvoke <org.apache.ambari.server.security.credential.GenericKeyCredential: org.apache.ambari.server.security.credential.GenericKeyCredential fromValue(java.lang.String)>(r1)
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.persistCredentialStore : $r2 = r0.<org.apache.ambari.server.security.encryption.FileBasedCredentialStore: java.io.File keyStoreFile>
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.getKeyStore : goto [?= r5 = virtualinvoke r0.<org.apache.ambari.server.security.encryption.FileBasedCredentialStore: java.security.KeyStore loadKeyStore(java.io.InputStream,java.lang.String)>(r3, r2)]
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.getKeyStore : goto [?= return r5]
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.getKeyStore : return r5
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.getKeyStore : $r17 = <org.apache.ambari.server.security.encryption.FileBasedCredentialStore: org.slf4j.Logger LOG>
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.getKeyStore : r3 = null
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.getKeyStore : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r3)
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.getKeyStore : $r7 = <org.apache.ambari.server.security.encryption.FileBasedCredentialStore: org.slf4j.Logger LOG>
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.getKeyStore : $r9 = new java.io.FileInputStream
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.getKeyStore : $z0 = virtualinvoke r1.<java.io.File: boolean exists()>()
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.getKeyStore : r5 = virtualinvoke r0.<org.apache.ambari.server.security.encryption.FileBasedCredentialStore: java.security.KeyStore loadKeyStore(java.io.InputStream,java.lang.String)>(r3, r2)
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.getKeyStore : $l0 = virtualinvoke r1.<java.io.File: long length()>()
org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : r3 = null
org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : return r3
org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : $r6 = new javax.crypto.spec.PBEKeySpec
org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : r4 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>("PBKDF2WithHmacSHA1")
org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : r3 = virtualinvoke r4.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r5)
org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : goto [?= return r3]
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : $r6 = r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: java.util.concurrent.locks.Lock lock>
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : r3 = virtualinvoke r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: java.security.KeyStore loadCredentialStore()>()
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : $r9 = r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: org.apache.ambari.server.security.encryption.MasterKeyService masterKeyService>
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : virtualinvoke r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: void addCredential(java.security.KeyStore,java.lang.String,org.apache.ambari.server.security.credential.Credential)>(r3, r1, r2)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : virtualinvoke r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: void persistCredentialStore(java.security.KeyStore)>(r3)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : if r1 == null goto return
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : if r4 == null goto r5 = null
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : if r1 == null goto $r5 = new java.lang.IllegalArgumentException
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : goto [?= return]
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : $r7 = new javax.crypto.spec.SecretKeySpec
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : $r7 = r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: java.util.concurrent.locks.Lock lock>
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : if r3 != null goto $r6 = interfaceinvoke r3.<org.apache.ambari.server.security.credential.Credential: char[] toValue()>()
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : r3 = null
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r11 = <org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: org.apache.ambari.server.security.encryption.AESEncryptor aes>
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r51 = new java.lang.StringBuilder
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : virtualinvoke r50.<java.util.ArrayList: boolean add(java.lang.Object)>(r71)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : staticinvoke <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection)>(r0, "UTF8", r50)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : if r1 == null goto $z0 = virtualinvoke r0.<java.io.File: boolean exists()>()
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : goto [?= $z0 = virtualinvoke r0.<java.io.File: boolean exists()>()]
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r57 = new java.lang.StringBuilder
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : goto [?= return 1]
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : if r3 == null goto return 1
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : staticinvoke <org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: void protectAccess(java.io.File)>(r0)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : return 1
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $z0 = virtualinvoke r0.<java.io.File: boolean exists()>()
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r2 = <org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: org.apache.commons.logging.Log LOG>
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r49 = new java.util.ArrayList
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : $z5 = virtualinvoke r0.<java.io.File: boolean isDirectory()>()
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : $z1 = virtualinvoke r0.<java.io.File: boolean setReadable(boolean,boolean)>(0, 0)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : $z8 = virtualinvoke r0.<java.io.File: boolean setExecutable(boolean,boolean)>(0, 0)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : $z0 = virtualinvoke r0.<java.io.File: boolean exists()>()
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : $z3 = virtualinvoke r0.<java.io.File: boolean setWritable(boolean,boolean)>(0, 0)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : r5 = virtualinvoke r4.<java.lang.String: java.lang.String[] split(java.lang.String)>("::")
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r16 = new java.lang.String
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : goto [?= return]
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : r2 = staticinvoke <org.apache.commons.io.FileUtils: java.util.List readLines(java.io.File,java.lang.String)>(r1, "UTF8")
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r6 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(0)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r7 = <org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: org.apache.commons.logging.Log LOG>
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r12 = new java.lang.String
org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : return r3
org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : r2 = virtualinvoke r1.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF8")
org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r2 = new org.apache.ambari.server.security.encryption.EncryptionResult
org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : r3 = virtualinvoke r0.<org.apache.ambari.server.security.encryption.AESEncryptor: org.apache.ambari.server.security.encryption.EncryptionResult encrypt(byte[])>(r2)
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : r7 = interfaceinvoke r1.<org.apache.ambari.server.security.encryption.CredentialStoreTest$CredentialStoreServiceFactory: org.apache.ambari.server.security.encryption.CredentialStore create(java.io.File,org.apache.ambari.server.security.encryption.MasterKeyService)>(r3, r6)
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : r4 = "ThisIsSomeSecretPassPhrase1234"
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : r8 = "mypassword"
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : r6 = interfaceinvoke r2.<org.apache.ambari.server.security.encryption.CredentialStoreTest$MasterKeyServiceFactory: org.apache.ambari.server.security.encryption.MasterKeyService createPersisted(java.io.File,java.lang.String)>(r5, r4)
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : $r12 = new org.apache.ambari.server.security.credential.GenericKeyCredential
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : r9 = interfaceinvoke r7.<org.apache.ambari.server.security.encryption.CredentialStore: org.apache.ambari.server.security.credential.Credential getCredential(java.lang.String)>("myalias")
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : $z0 = virtualinvoke r5.<java.io.File: boolean exists()>()
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : $r11 = new java.io.File
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : $r14 = new java.lang.String
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : $r10 = r0.<org.apache.ambari.server.security.encryption.CredentialStoreTest: org.junit.rules.TemporaryFolder tmpFolder>
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : r2 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(char[])>(r1)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : $r7 = virtualinvoke r2.<java.nio.CharBuffer: char[] array()>()
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : $r8 = virtualinvoke r3.<java.nio.ByteBuffer: byte[] array()>()
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : return r4
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : if r1 != null goto r2 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(char[])>(r1)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : $r5 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8")
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : $r6 = virtualinvoke r3.<java.nio.ByteBuffer: byte[] array()>()
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : $r6 = new java.io.FileReader
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : r1 = null
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : $i1 = virtualinvoke r1.<java.io.FileReader: int read(char[])>(r2)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : goto [?= return z0]
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : if r1 == null goto return z0
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : virtualinvoke r1.<java.io.FileReader: void close()>()
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : $r7 = "#1.0# "
org.apache.ambari.server.security.credential.PrincipalKeyCredential.isValidValue : if r0 == null goto $z1 = 0
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.loadCredentialStore : $r1 = r0.<org.apache.ambari.server.security.encryption.FileBasedCredentialStore: java.io.File keyStoreFile>
