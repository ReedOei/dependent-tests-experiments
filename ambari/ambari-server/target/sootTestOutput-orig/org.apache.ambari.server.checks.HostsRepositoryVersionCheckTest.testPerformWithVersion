org.apache.ambari.server.orm.entities.HostVersionEntity.getRepositoryVersion : $r1 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: org.apache.ambari.server.orm.entities.RepositoryVersionEntity _persistence_get_repositoryVersion()>()
org.apache.ambari.server.state.stack.PrerequisiteCheck.getFailedOn : $r1 = r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet m_failedOn>
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$4.get : $r1 = virtualinvoke r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$4: org.apache.ambari.server.state.Clusters get()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$4.get : $r1 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$4: org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest this$0>
org.apache.ambari.server.orm.entities.HostVersionEntity.setRepositoryVersion : virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: void _persistence_set_repositoryVersion(org.apache.ambari.server.orm.entities.RepositoryVersionEntity)>(r1)
org.apache.ambari.server.orm.entities.HostVersionEntity.getState : $r1 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: org.apache.ambari.server.state.RepositoryVersionState _persistence_get_state()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : z0 = 0
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r3 = virtualinvoke r2.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getClusterName()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r6 = interfaceinvoke r4.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.StackId getDesiredStackVersion()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : z0 = 1
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : goto [?= (branch)]
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : goto [?= $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r16 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheck: com.google.inject.Provider clustersProvider>
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r19 = interfaceinvoke r5.<java.util.Map: java.util.Collection values()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r61 = virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet getFailedOn()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r13 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheck: com.google.inject.Provider clustersProvider>
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r21 = <org.apache.ambari.server.state.MaintenanceState: org.apache.ambari.server.state.MaintenanceState OFF>
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r23 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheck: com.google.inject.Provider hostVersionDaoProvider>
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r29 = virtualinvoke r11.<org.apache.ambari.server.orm.entities.HostVersionEntity: org.apache.ambari.server.orm.entities.RepositoryVersionEntity getRepositoryVersion()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : if z0 != 0 goto (branch)
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $l0 = interfaceinvoke r4.<org.apache.ambari.server.state.Cluster: long getClusterId()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r22 = virtualinvoke r2.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getRepositoryVersion()>()
org.apache.ambari.server.state.stack.PrerequisiteCheck.getStatus : $r1 = r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: org.apache.ambari.server.state.stack.PrereqCheckStatus m_status>
org.apache.ambari.server.controller.PrereqCheckRequest.setRepositoryVersion : r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String m_repositoryVersion> = r1
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$6.get : $r1 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$6: org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest this$0>
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$6.get : $r1 = virtualinvoke r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$6: org.apache.ambari.server.orm.dao.HostVersionDAO get()>()
org.apache.ambari.server.controller.PrereqCheckRequest.getRepositoryVersion : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String m_repositoryVersion>
org.apache.ambari.server.orm.entities.RepositoryVersionEntity.setVersion : virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: void _persistence_set_version(java.lang.String)>(r1)
org.apache.ambari.server.orm.entities.RepositoryVersionEntity.getVersion : $r1 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: java.lang.String _persistence_get_version()>()
org.apache.ambari.server.orm.entities.HostVersionEntity.setState : virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: void _persistence_set_state(org.apache.ambari.server.state.RepositoryVersionState)>(r1)
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest.access$000 : $r1 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest: org.apache.ambari.server.state.Clusters clusters>
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest.access$200 : $r1 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest: org.apache.ambari.server.orm.dao.HostVersionDAO hostVersionDAO>
org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String m_clusterName>
