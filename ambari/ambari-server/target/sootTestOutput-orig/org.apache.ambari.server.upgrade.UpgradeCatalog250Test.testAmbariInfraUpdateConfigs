org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : r12 = specialinvoke r0.<org.apache.ambari.server.upgrade.AbstractUpgradeCatalog: java.util.Map mergeProperties(java.util.Map,java.util.Map,boolean,com.google.common.collect.Multimap)>(r9, r3, z0, r10)
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : interfaceinvoke r5.<org.apache.ambari.server.controller.AmbariManagementController: org.apache.ambari.server.state.Config createConfig(org.apache.ambari.server.state.Cluster,java.lang.String,java.util.Map,java.lang.String,java.util.Map)>(r1, r2, r12, r6, r39)
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : r7 = interfaceinvoke r1.<org.apache.ambari.server.state.Cluster: java.util.Map getConfigsByType(java.lang.String)>(r2)
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $i2 = interfaceinvoke r10.<com.google.common.collect.Multimap: int size()>()
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $r31 = r0.<org.apache.ambari.server.upgrade.AbstractUpgradeCatalog: org.apache.ambari.server.configuration.Configuration configuration>
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : if r7 == null goto r8 = interfaceinvoke r1.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.Config getDesiredConfigByType(java.lang.String)>(r2)
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : r39 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>()
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : r39 = interfaceinvoke r8.<org.apache.ambari.server.state.Config: java.util.Map getPropertiesAttributes()>()
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : r11 = interfaceinvoke r1.<org.apache.ambari.server.state.Cluster: java.lang.String getServiceByConfigType(java.lang.String)>(r2)
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : if r8 != null goto (branch)
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : r39 = null
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : if null != r39 goto interfaceinvoke r5.<org.apache.ambari.server.controller.AmbariManagementController: org.apache.ambari.server.state.Config createConfig(org.apache.ambari.server.state.Cluster,java.lang.String,java.util.Map,java.lang.String,java.util.Map)>(r1, r2, r12, r6, r39)
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $r20 = new java.lang.StringBuilder
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : r13 = $r33
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $r35 = staticinvoke <com.google.common.collect.Maps: com.google.common.collect.MapDifference difference(java.util.Map,java.util.Map)>(r9, r12)
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : r8 = interfaceinvoke r1.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.Config getDesiredConfigByType(java.lang.String)>(r2)
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : r9 = interfaceinvoke r8.<org.apache.ambari.server.state.Config: java.util.Map getProperties()>()
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : if r8 != null goto r9 = interfaceinvoke r8.<org.apache.ambari.server.state.Config: java.util.Map getProperties()>()
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : if r3 == null goto return
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : goto [?= return]
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : r14 = interfaceinvoke r1.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.Config getConfig(java.lang.String,java.lang.String)>(r2, r6)
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : if r4 == null goto $i2 = interfaceinvoke r10.<com.google.common.collect.Multimap: int size()>()
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : if r8 == null goto (branch)
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $r36 = <org.apache.ambari.server.upgrade.AbstractUpgradeCatalog: org.slf4j.Logger LOG>
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $r18 = r0.<org.apache.ambari.server.upgrade.AbstractUpgradeCatalog: com.google.inject.Injector injector>
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $r34 = <org.apache.ambari.server.upgrade.AbstractUpgradeCatalog: org.slf4j.Logger LOG>
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : virtualinvoke r0.<org.apache.ambari.server.upgrade.AbstractUpgradeCatalog: void updateConfigurationPropertiesForCluster(org.apache.ambari.server.state.Cluster,java.lang.String,java.util.Map,java.util.Set,boolean,boolean)>(r1, r2, r3, null, z0, z1)
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : r10 = staticinvoke <com.google.common.collect.ArrayListMultimap: com.google.common.collect.ArrayListMultimap create()>()
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : if r14 == null goto (branch)
org.apache.ambari.server.upgrade.SchemaUpgradeUtil.extractProperty : r10 = virtualinvoke r3.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("(\\w+)", r9)
org.apache.ambari.server.upgrade.SchemaUpgradeUtil.extractProperty : r7 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(r3)
org.apache.ambari.server.upgrade.SchemaUpgradeUtil.extractProperty : $r16 = new java.lang.StringBuilder
org.apache.ambari.server.upgrade.SchemaUpgradeUtil.extractProperty : r0 = virtualinvoke r0.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(r10, r11)
org.apache.ambari.server.upgrade.SchemaUpgradeUtil.extractProperty : r8 = virtualinvoke r7.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0)
org.apache.ambari.server.upgrade.SchemaUpgradeUtil.extractProperty : $i0 = staticinvoke <org.springframework.util.StringUtils: int countOccurrencesOf(java.lang.String,java.lang.String)>(r3, "(\\w+)")
org.apache.ambari.server.upgrade.SchemaUpgradeUtil.extractProperty : $z0 = virtualinvoke r8.<java.util.regex.Matcher: boolean find()>()
org.apache.ambari.server.upgrade.SchemaUpgradeUtil.extractProperty : r9 = r4
org.apache.ambari.server.upgrade.SchemaUpgradeUtil.extractProperty : interfaceinvoke r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r9)
org.apache.ambari.server.upgrade.SchemaUpgradeUtil.extractProperty : return r0
org.apache.ambari.server.upgrade.SchemaUpgradeUtil.extractProperty : r9 = virtualinvoke r8.<java.util.regex.Matcher: java.lang.String group(int)>(1)
org.apache.ambari.server.upgrade.UpgradeCatalog250.getTargetVersion : return "2.5.0"
org.apache.ambari.server.upgrade.UpgradeCatalog250.updateAmbariInfraConfigs : goto [?= $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.upgrade.UpgradeCatalog250.updateAmbariInfraConfigs : $r15 = interfaceinvoke r6.<org.apache.ambari.server.state.Config: java.util.Map getProperties()>()
org.apache.ambari.server.upgrade.UpgradeCatalog250.updateAmbariInfraConfigs : if r20 == null goto r27 = interfaceinvoke r5.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.Config getDesiredConfigByType(java.lang.String)>("infra-solr-client-log4j")
org.apache.ambari.server.upgrade.UpgradeCatalog250.updateAmbariInfraConfigs : r7 = virtualinvoke r7.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("SOLR_KERB_NAME_RULES={{infra_solr_kerberos_name_rules}}", "SOLR_KERB_NAME_RULES=\"{{infra_solr_kerberos_name_rules}}\"")
org.apache.ambari.server.upgrade.UpgradeCatalog250.updateAmbariInfraConfigs : interfaceinvoke r29.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("content", r33)
org.apache.ambari.server.upgrade.UpgradeCatalog250.updateAmbariInfraConfigs : if r2 == null goto return
org.apache.ambari.server.upgrade.UpgradeCatalog250.updateAmbariInfraConfigs : r27 = interfaceinvoke r5.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.Config getDesiredConfigByType(java.lang.String)>("infra-solr-client-log4j")
org.apache.ambari.server.upgrade.UpgradeCatalog250.updateAmbariInfraConfigs : r2 = interfaceinvoke r1.<org.apache.ambari.server.controller.AmbariManagementController: org.apache.ambari.server.state.Clusters getClusters()>()
org.apache.ambari.server.upgrade.UpgradeCatalog250.updateAmbariInfraConfigs : $r17 = interfaceinvoke r6.<org.apache.ambari.server.state.Config: java.util.Map getProperties()>()
org.apache.ambari.server.upgrade.UpgradeCatalog250.updateAmbariInfraConfigs : r7 = virtualinvoke r7.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("SOLR_SSL_TRUST_STORE={{infra_solr_keystore_location}}", "SOLR_SSL_TRUST_STORE={{infra_solr_truststore_location}}")
org.apache.ambari.server.upgrade.UpgradeCatalog250.updateAmbariInfraConfigs : $z4 = virtualinvoke r7.<java.lang.String: boolean contains(java.lang.CharSequence)>("SOLR_KERB_NAME_RULES={{infra_solr_kerberos_name_rules}}")
org.apache.ambari.server.upgrade.UpgradeCatalog250.updateAmbariInfraConfigs : r33 = staticinvoke <org.apache.ambari.server.upgrade.SchemaUpgradeUtil: java.lang.String extractProperty(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Map)>(r32, "infra_client_log_maxbackupindex", "solr_client_log_maxbackupindex", "log4j.appender.file.MaxBackupIndex=(\\w+)\n", "60", r29)
org.apache.ambari.server.upgrade.UpgradeCatalog250.updateAmbariInfraConfigs : virtualinvoke r0.<org.apache.ambari.server.upgrade.UpgradeCatalog250: void updateConfigurationPropertiesForCluster(org.apache.ambari.server.state.Cluster,java.lang.String,java.util.Map,boolean,boolean)>(r5, "infra-solr-client-log4j", r29, 1, 1)
org.apache.ambari.server.upgrade.UpgradeCatalog250.updateAmbariInfraConfigs : $z2 = virtualinvoke r7.<java.lang.String: boolean contains(java.lang.CharSequence)>("SOLR_SSL_TRUST_STORE={{infra_solr_keystore_location}}")
org.apache.ambari.server.upgrade.UpgradeCatalog250.updateAmbariInfraConfigs : r3 = interfaceinvoke r2.<org.apache.ambari.server.state.Clusters: java.util.Map getClusters()>()
org.apache.ambari.server.upgrade.UpgradeCatalog250.updateAmbariInfraConfigs : $z7 = virtualinvoke r10.<java.lang.String: boolean contains(java.lang.CharSequence)>("infra_client_log")
org.apache.ambari.server.upgrade.UpgradeCatalog250.updateAmbariInfraConfigs : $r19 = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>("content", r7)
org.apache.ambari.server.upgrade.UpgradeCatalog250.updateAmbariInfraConfigs : r7 = virtualinvoke r7.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("SOLR_SSL_TRUST_STORE_PASSWORD={{infra_solr_keystore_password}}", "SOLR_SSL_TRUST_STORE_PASSWORD={{infra_solr_truststore_password}}")
org.apache.ambari.server.upgrade.UpgradeCatalog250.updateAmbariInfraConfigs : $r28 = new java.util.HashMap
org.apache.ambari.server.upgrade.UpgradeCatalog250.updateAmbariInfraConfigs : interfaceinvoke r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("content", r25)
org.apache.ambari.server.upgrade.UpgradeCatalog250.updateAmbariInfraConfigs : r32 = staticinvoke <org.apache.ambari.server.upgrade.SchemaUpgradeUtil: java.lang.String extractProperty(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Map)>(r10, "infra_client_log_maxfilesize", "solr_client_log_maxfilesize", "log4j.appender.file.MaxFileSize=(\\w+)MB", "80", r29)
org.apache.ambari.server.upgrade.UpgradeCatalog250.updateAmbariInfraConfigs : r6 = interfaceinvoke r5.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.Config getDesiredConfigByType(java.lang.String)>("infra-solr-env")
org.apache.ambari.server.upgrade.UpgradeCatalog250.updateAmbariInfraConfigs : $r22 = interfaceinvoke r20.<org.apache.ambari.server.state.Config: java.util.Map getProperties()>()
org.apache.ambari.server.upgrade.UpgradeCatalog250.updateAmbariInfraConfigs : r25 = staticinvoke <org.apache.ambari.server.upgrade.SchemaUpgradeUtil: java.lang.String extractProperty(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Map)>(r24, "infra_log_maxbackupindex", "infra_log_maxbackupindex", "log4j.appender.file.MaxBackupIndex=(\\w+)\n", "9", r8)
org.apache.ambari.server.upgrade.UpgradeCatalog250.updateAmbariInfraConfigs : $r21 = new java.util.HashMap
org.apache.ambari.server.upgrade.UpgradeCatalog250.updateAmbariInfraConfigs : r10 = virtualinvoke r10.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("infra_client_log", "solr_client_log")
org.apache.ambari.server.upgrade.UpgradeCatalog250.updateAmbariInfraConfigs : if r3 == null goto return
org.apache.ambari.server.upgrade.UpgradeCatalog250.updateAmbariInfraConfigs : $r13 = interfaceinvoke r3.<java.util.Map: java.util.Collection values()>()
org.apache.ambari.server.upgrade.UpgradeCatalog250.updateAmbariInfraConfigs : $r11 = r0.<org.apache.ambari.server.upgrade.UpgradeCatalog250: com.google.inject.Injector injector>
org.apache.ambari.server.upgrade.UpgradeCatalog250.updateAmbariInfraConfigs : $z5 = virtualinvoke r7.<java.lang.String: boolean contains(java.lang.CharSequence)>(" -Dsolr.kerberos.name.rules=${SOLR_KERB_NAME_RULES}")
org.apache.ambari.server.upgrade.UpgradeCatalog250.updateAmbariInfraConfigs : r20 = interfaceinvoke r5.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.Config getDesiredConfigByType(java.lang.String)>("infra-solr-log4j")
org.apache.ambari.server.upgrade.UpgradeCatalog250.updateAmbariInfraConfigs : $z3 = virtualinvoke r7.<java.lang.String: boolean contains(java.lang.CharSequence)>("SOLR_SSL_TRUST_STORE_PASSWORD={{infra_solr_keystore_password}}")
org.apache.ambari.server.upgrade.UpgradeCatalog250.updateAmbariInfraConfigs : r7 = virtualinvoke r7.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(" -Dsolr.kerberos.name.rules=${SOLR_KERB_NAME_RULES}", "")
org.apache.ambari.server.upgrade.UpgradeCatalog250.updateAmbariInfraConfigs : if r27 == null goto (branch)
org.apache.ambari.server.upgrade.UpgradeCatalog250.updateAmbariInfraConfigs : if r6 == null goto r20 = interfaceinvoke r5.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.Config getDesiredConfigByType(java.lang.String)>("infra-solr-log4j")
org.apache.ambari.server.upgrade.UpgradeCatalog250.updateAmbariInfraConfigs : r24 = staticinvoke <org.apache.ambari.server.upgrade.SchemaUpgradeUtil: java.lang.String extractProperty(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Map)>(r9, "infra_log_maxfilesize", "infra_log_maxfilesize", "log4j.appender.file.MaxFileSize=(\\w+)MB", "10", r8)
org.apache.ambari.server.upgrade.UpgradeCatalog250.updateAmbariInfraConfigs : $r30 = interfaceinvoke r27.<org.apache.ambari.server.state.Config: java.util.Map getProperties()>()
org.apache.ambari.server.upgrade.UpgradeCatalog250.updateAmbariInfraConfigs : virtualinvoke r0.<org.apache.ambari.server.upgrade.UpgradeCatalog250: void updateConfigurationPropertiesForCluster(org.apache.ambari.server.state.Cluster,java.lang.String,java.util.Map,boolean,boolean)>(r5, "infra-solr-log4j", r8, 1, 1)
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.registerCatalog : $r2 = <org.apache.ambari.server.upgrade.AbstractUpgradeCatalog: java.util.Map upgradeCatalogMap>
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : $r10 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>()
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : return r5
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : if z0 == 0 goto (branch)
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : $r18 = <org.apache.ambari.server.upgrade.AbstractUpgradeCatalog$ConfigUpdateType: org.apache.ambari.server.upgrade.AbstractUpgradeCatalog$ConfigUpdateType UPDATED>
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : goto [?= $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : $r8 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>()
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : $r11 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>()
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : $r15 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>()
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : $r4 = new java.util.HashMap
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : $r14 = <org.apache.ambari.server.upgrade.AbstractUpgradeCatalog$ConfigUpdateType: org.apache.ambari.server.upgrade.AbstractUpgradeCatalog$ConfigUpdateType ADDED>
