org.apache.ambari.server.view.ViewURLStreamProvider.access$000 : $r0 = <org.apache.ambari.server.view.ViewURLStreamProvider: org.apache.commons.logging.Log LOG>
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r14 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.util.Map allowedHostPorts>
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r17 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.util.Map allowedHostPorts>
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r13 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>()
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r15 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.lang.Boolean isProxyCallRestricted>
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : r6 = virtualinvoke r2.<java.lang.String: java.lang.String trim()>()
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r3 = staticinvoke <org.apache.ambari.server.view.ViewURLStreamProvider: org.apache.commons.logging.Log access$000()>()
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : return 1
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : return 0
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : r6 = ""
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r20 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.util.Map allowedHostPorts>
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r16 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.util.Map allowedHostPorts>
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isNotBlank(java.lang.String)>(r1)
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $z4 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isNotBlank(java.lang.String)>(r2)
org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getKey : $r1 = r0.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String m_key>
org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isNotBlank(java.lang.String)>(r1)
org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : $r5 = new java.net.URL
org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : $r6 = specialinvoke r0.<org.apache.ambari.server.view.ViewURLStreamProvider: org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler getHostPortRestrictionHandler()>()
org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : r0.<org.apache.ambari.server.view.ViewURLStreamProvider: org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler hostPortRestrictionHandler> = r2
org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : $r8 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider: org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler hostPortRestrictionHandler>
org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : $r3 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider: org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler hostPortRestrictionHandler>
org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : $r4 = new org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.proxyCallRestricted : $r2 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.lang.Boolean isProxyCallRestricted>
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.proxyCallRestricted : $r1 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.util.Map allowedHostPorts>
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.proxyCallRestricted : specialinvoke r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: void initializeAllowedHostPorts()>()
org.apache.ambari.server.configuration.Configuration.getProperty : r2 = null
org.apache.ambari.server.configuration.Configuration.getProperty : $r4 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object getDefaultValue()>()
org.apache.ambari.server.configuration.Configuration.getProperty : $r5 = r0.<org.apache.ambari.server.configuration.Configuration: java.util.Properties properties>
org.apache.ambari.server.configuration.Configuration.getProperty : $r3 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object getDefaultValue()>()
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r15 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_TYPE>
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_PATH>
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r7 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_PASSWORD>
org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getDefaultValue : $r1 = r0.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object m_defaultValue>
org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty API_USE_SSL>
org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.isKerberosAuthenticationEnabled : $z0 = r0.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean kerberosAuthenticationEnabled>
org.apache.ambari.server.configuration.Configuration.getProxyHostAndPorts : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty PROXY_ALLOWED_HOST_PORTS>
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : z0 = 0
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r45 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0)
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r32 = r6[0]
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : r4 = r3
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r9 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.lang.String allowedHostPortsValue>
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : z0 = 1
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r12 = virtualinvoke r2.<java.lang.String: java.lang.String trim()>()
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r13 = virtualinvoke r5.<java.lang.String: java.lang.String trim()>()
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r29 = r6[0]
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r36 = staticinvoke <org.apache.ambari.server.view.ViewURLStreamProvider: org.apache.commons.logging.Log access$000()>()
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r8 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.lang.String allowedHostPortsValue>
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $i2 = lengthof r6
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r28 = r6[0]
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.util.Map allowedHostPorts> = r1
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r10 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty PROXY_ALLOWED_HOST_PORTS>
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r7 = new java.util.HashMap
org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.setKerberosAuthenticationEnabled : r0.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean kerberosAuthenticationEnabled> = z0
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r3 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty KERBEROS_AUTH_ENABLED>
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : return r2
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $z1 = virtualinvoke r2.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean isKerberosAuthenticationEnabled()>()
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r1 = new org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties
