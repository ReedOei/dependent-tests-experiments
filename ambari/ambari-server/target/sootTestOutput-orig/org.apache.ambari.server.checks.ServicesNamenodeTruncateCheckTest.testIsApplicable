org.apache.ambari.server.controller.PrereqCheckRequest.setSourceStackId : r0.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.state.StackId m_sourceStackId> = r1
org.apache.ambari.server.state.StackId.parseStackIdHelper : if r2 == null goto r1.<org.apache.ambari.server.state.StackId: java.lang.String stackName> = ""
org.apache.ambari.server.state.StackId.parseStackIdHelper : $r8 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0)
org.apache.ambari.server.state.StackId.parseStackIdHelper : i0 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(45)
org.apache.ambari.server.state.StackId.parseStackIdHelper : if i0 == -1 goto $r3 = new java.lang.RuntimeException
org.apache.ambari.server.state.StackId.parseStackIdHelper : $i3 = i0 + 1
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r11 = interfaceinvoke r3.<org.apache.ambari.server.state.Cluster: java.util.Map getServices()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : if z0 == 0 goto $z3 = 0
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : return z1
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : r5 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : goto [?= $z4 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r7 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: com.google.inject.Provider clustersProvider>
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $z5 = interfaceinvoke r4.<java.util.Set: boolean contains(java.lang.Object)>(r6)
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $z6 = interfaceinvoke r4.<java.util.Set: boolean contains(java.lang.Object)>(r6)
org.apache.ambari.server.checks.ServicesNamenodeTruncateCheckTest.access$000 : $r1 = r0.<org.apache.ambari.server.checks.ServicesNamenodeTruncateCheckTest: org.apache.ambari.server.state.Clusters m_clusters>
org.apache.ambari.server.controller.PrereqCheckRequest.setRepositoryVersion : r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String m_repositoryVersion> = r1
org.apache.ambari.server.controller.PrereqCheckRequest.getResult : $r2 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.util.Map m_results>
org.apache.ambari.server.checks.ServicesNamenodeTruncateCheck.isApplicable : return 1
org.apache.ambari.server.checks.ServicesNamenodeTruncateCheck.isApplicable : if null == r2 goto return 1
org.apache.ambari.server.checks.ServicesNamenodeTruncateCheck.isApplicable : $r5 = <org.apache.ambari.server.checks.CheckDescription: org.apache.ambari.server.checks.CheckDescription SERVICES_NAMENODE_HA>
org.apache.ambari.server.checks.ServicesNamenodeTruncateCheck.isApplicable : $r3 = newarray (java.lang.String)[1]
org.apache.ambari.server.controller.PrereqCheckRequest.setTargetStackId : r0.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.state.StackId m_targetStackId> = r1
org.apache.ambari.server.checks.ServicesNamenodeTruncateCheckTest$1.get : $r1 = virtualinvoke r0.<org.apache.ambari.server.checks.ServicesNamenodeTruncateCheckTest$1: org.apache.ambari.server.state.Clusters get()>()
org.apache.ambari.server.checks.ServicesNamenodeTruncateCheckTest$1.get : $r1 = r0.<org.apache.ambari.server.checks.ServicesNamenodeTruncateCheckTest$1: org.apache.ambari.server.checks.ServicesNamenodeTruncateCheckTest this$0>
org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String m_clusterName>
