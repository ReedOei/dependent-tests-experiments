org.apache.ambari.server.state.stack.UpgradePack.mergeProcessing : r2 = r1.<org.apache.ambari.server.state.stack.UpgradePack: java.util.List processing> >>>>>>>> org.apache.ambari.server.state.stack.UpgradePack.mergeProcessing : if r2 != null
org.apache.ambari.server.state.stack.UpgradePack.mergeProcessing : if r2 != null >>>>>>>> org.apache.ambari.server.state.stack.UpgradePack.getTasks : $r1 = r0.<org.apache.ambari.server.state.stack.UpgradePack: java.util.Map m_process>
org.apache.ambari.server.state.stack.UpgradePack.getTasks : $r1 = r0.<org.apache.ambari.server.state.stack.UpgradePack: java.util.Map m_process> >>>>>>>> org.apache.ambari.server.state.stack.UpgradePack.getTasks : return $r1
org.apache.ambari.server.state.stack.UpgradePack.getTasks : return $r1 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Direction.getText : if z0 == 0
org.apache.ambari.server.state.stack.upgrade.Direction.getText : if z0 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Direction.getText : $r1 = virtualinvoke r0.<org.apache.ambari.server.state.stack.upgrade.Direction: java.lang.String name()>()
org.apache.ambari.server.state.stack.upgrade.Direction.getText : $r1 = virtualinvoke r0.<org.apache.ambari.server.state.stack.upgrade.Direction: java.lang.String name()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Direction.getText : $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>()
org.apache.ambari.server.state.stack.upgrade.Direction.getText : $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Direction.getText : $r3 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String capitalize(java.lang.String)>($r2)
org.apache.ambari.server.state.stack.upgrade.Direction.getText : $r3 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String capitalize(java.lang.String)>($r2) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Direction.getText : goto [?= return $r3]
org.apache.ambari.server.state.stack.upgrade.Direction.getText : goto [?= return $r3] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Direction.getText : return $r3
org.apache.ambari.server.state.stack.upgrade.Direction.getText : return $r3 >>>>>>>> org.apache.ambari.server.state.stack.UpgradePack.getGroups : $r2 = new java.util.ArrayList
org.apache.ambari.server.state.stack.UpgradePack.getGroups : $r2 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.state.stack.UpgradePack.getGroups : specialinvoke $r2.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.state.stack.UpgradePack.getGroups : specialinvoke $r2.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.state.stack.UpgradePack.getGroups : r3 = $r2
org.apache.ambari.server.state.stack.UpgradePack.getGroups : r3 = $r2 >>>>>>>> org.apache.ambari.server.state.stack.UpgradePack.getGroups : $z0 = virtualinvoke r1.<org.apache.ambari.server.state.stack.upgrade.Direction: boolean isUpgrade()>()
org.apache.ambari.server.state.stack.UpgradePack.getGroups : $z0 = virtualinvoke r1.<org.apache.ambari.server.state.stack.upgrade.Direction: boolean isUpgrade()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Direction.isUpgrade : $r1 = <org.apache.ambari.server.state.stack.upgrade.Direction: org.apache.ambari.server.state.stack.upgrade.Direction UPGRADE>
org.apache.ambari.server.state.stack.upgrade.Direction.isUpgrade : $r1 = <org.apache.ambari.server.state.stack.upgrade.Direction: org.apache.ambari.server.state.stack.upgrade.Direction UPGRADE> >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Direction.isUpgrade : if r0 != $r1
org.apache.ambari.server.state.stack.upgrade.Direction.isUpgrade : if r0 != $r1 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Direction.isUpgrade : $z0 = 1
org.apache.ambari.server.state.stack.upgrade.Direction.isUpgrade : $z0 = 1 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Direction.isUpgrade : goto [?= return $z0]
org.apache.ambari.server.state.stack.upgrade.Direction.isUpgrade : goto [?= return $z0] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Direction.isUpgrade : return $z0
org.apache.ambari.server.state.stack.upgrade.Direction.isUpgrade : return $z0 >>>>>>>> org.apache.ambari.server.state.stack.UpgradePack.getGroups : if $z0 == 0
org.apache.ambari.server.state.stack.UpgradePack.getGroups : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.stack.UpgradePack.getGroups : r7 = r0.<org.apache.ambari.server.state.stack.UpgradePack: java.util.List groups>
org.apache.ambari.server.state.stack.UpgradePack.getGroups : r7 = r0.<org.apache.ambari.server.state.stack.UpgradePack: java.util.List groups> >>>>>>>> org.apache.ambari.server.state.stack.UpgradePack.getGroups : goto [?= $r10 = new java.util.ArrayList]
org.apache.ambari.server.state.stack.UpgradePack.getGroups : goto [?= $r10 = new java.util.ArrayList] >>>>>>>> org.apache.ambari.server.state.stack.UpgradePack.getGroups : $r10 = new java.util.ArrayList
org.apache.ambari.server.state.stack.UpgradePack.getGroups : $r10 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.state.stack.UpgradePack.getGroups : specialinvoke $r10.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.state.stack.UpgradePack.getGroups : specialinvoke $r10.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.state.stack.UpgradePack.getGroups : r4 = $r10
org.apache.ambari.server.state.stack.UpgradePack.getGroups : r4 = $r10 >>>>>>>> org.apache.ambari.server.state.stack.UpgradePack.getGroups : r5 = interfaceinvoke r7.<java.util.List: java.util.Iterator iterator()>()
