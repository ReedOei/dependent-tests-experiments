org.apache.ambari.server.utils.StageUtils.replaceRanges : if r0 != null >>>>>>>> org.apache.ambari.server.utils.StageUtils.replaceRanges : $r7 = new java.util.HashSet
org.apache.ambari.server.utils.StageUtils.replaceRanges : $r7 = new java.util.HashSet >>>>>>>> org.apache.ambari.server.utils.StageUtils.replaceRanges : specialinvoke $r7.<java.util.HashSet: void <init>()>()
org.apache.ambari.server.utils.StageUtils.replaceRanges : specialinvoke $r7.<java.util.HashSet: void <init>()>() >>>>>>>> org.apache.ambari.server.utils.StageUtils.replaceRanges : r1 = $r7
org.apache.ambari.server.utils.StageUtils.replaceRanges : r1 = $r7 >>>>>>>> org.apache.ambari.server.utils.StageUtils.replaceRanges : r2 = null
org.apache.ambari.server.utils.StageUtils.replaceRanges : r2 = null >>>>>>>> org.apache.ambari.server.utils.StageUtils.replaceRanges : $r8 = interfaceinvoke r0.<java.util.SortedSet: java.lang.Object first()>()
org.apache.ambari.server.utils.StageUtils.replaceRanges : $r8 = interfaceinvoke r0.<java.util.SortedSet: java.lang.Object first()>() >>>>>>>> org.apache.ambari.server.utils.StageUtils.replaceRanges : r3 = (java.lang.Integer) $r8
org.apache.ambari.server.utils.StageUtils.replaceRanges : r3 = (java.lang.Integer) $r8 >>>>>>>> org.apache.ambari.server.utils.StageUtils.replaceRanges : r4 = interfaceinvoke r0.<java.util.SortedSet: java.util.Iterator iterator()>()
org.apache.ambari.server.utils.StageUtils.replaceRanges : r4 = interfaceinvoke r0.<java.util.SortedSet: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.utils.StageUtils.replaceRanges : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.utils.StageUtils.replaceRanges : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.utils.StageUtils.replaceRanges : if $z0 == 0
org.apache.ambari.server.utils.StageUtils.replaceRanges : if $z0 == 0 >>>>>>>> org.apache.ambari.server.utils.StageUtils.replaceRanges : $r9 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.utils.StageUtils.replaceRanges : $r9 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.utils.StageUtils.replaceRanges : r5 = (java.lang.Integer) $r9
org.apache.ambari.server.utils.StageUtils.replaceRanges : r5 = (java.lang.Integer) $r9 >>>>>>>> org.apache.ambari.server.utils.StageUtils.replaceRanges : if r2 == null
org.apache.ambari.server.utils.StageUtils.replaceRanges : if r2 == null >>>>>>>> org.apache.ambari.server.utils.StageUtils.replaceRanges : r2 = r5
org.apache.ambari.server.utils.StageUtils.replaceRanges : r2 = r5 >>>>>>>> org.apache.ambari.server.utils.StageUtils.replaceRanges : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.utils.StageUtils.replaceRanges : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.utils.StageUtils.replaceRanges : $i0 = virtualinvoke r5.<java.lang.Integer: int intValue()>()
org.apache.ambari.server.utils.StageUtils.replaceRanges : $i0 = virtualinvoke r5.<java.lang.Integer: int intValue()>() >>>>>>>> org.apache.ambari.server.utils.StageUtils.replaceRanges : $i1 = virtualinvoke r2.<java.lang.Integer: int intValue()>()
org.apache.ambari.server.utils.StageUtils.replaceRanges : $i1 = virtualinvoke r2.<java.lang.Integer: int intValue()>() >>>>>>>> org.apache.ambari.server.utils.StageUtils.replaceRanges : $i2 = $i0 - $i1
org.apache.ambari.server.utils.StageUtils.replaceRanges : $i2 = $i0 - $i1 >>>>>>>> org.apache.ambari.server.utils.StageUtils.replaceRanges : if $i2 <= 1
org.apache.ambari.server.utils.StageUtils.replaceRanges : if $i2 <= 1 >>>>>>>> org.apache.ambari.server.utils.StageUtils.replaceRanges : r6 = staticinvoke <org.apache.ambari.server.utils.StageUtils: java.lang.String getRangedItem(java.lang.Integer,java.lang.Integer)>(r3, r2)
org.apache.ambari.server.utils.StageUtils.replaceRanges : r6 = staticinvoke <org.apache.ambari.server.utils.StageUtils: java.lang.String getRangedItem(java.lang.Integer,java.lang.Integer)>(r3, r2) >>>>>>>> org.apache.ambari.server.utils.StageUtils.getRangedItem : $i0 = virtualinvoke r1.<java.lang.Integer: int intValue()>()
org.apache.ambari.server.utils.StageUtils.getRangedItem : $i0 = virtualinvoke r1.<java.lang.Integer: int intValue()>() >>>>>>>> org.apache.ambari.server.utils.StageUtils.getRangedItem : $i1 = virtualinvoke r0.<java.lang.Integer: int intValue()>()
org.apache.ambari.server.utils.StageUtils.getRangedItem : $i1 = virtualinvoke r0.<java.lang.Integer: int intValue()>() >>>>>>>> org.apache.ambari.server.utils.StageUtils.getRangedItem : $i2 = $i0 - $i1
org.apache.ambari.server.utils.StageUtils.getRangedItem : $i2 = $i0 - $i1 >>>>>>>> org.apache.ambari.server.utils.StageUtils.getRangedItem : if $i2 <= 1
org.apache.ambari.server.utils.StageUtils.getRangedItem : if $i2 <= 1 >>>>>>>> org.apache.ambari.server.utils.StageUtils.getRangedItem : $r4 = ","
org.apache.ambari.server.utils.StageUtils.getRangedItem : $r4 = "," >>>>>>>> org.apache.ambari.server.utils.StageUtils.getRangedItem : r2 = $r4
org.apache.ambari.server.utils.StageUtils.getRangedItem : r2 = $r4 >>>>>>>> org.apache.ambari.server.utils.StageUtils.getRangedItem : $z0 = virtualinvoke r1.<java.lang.Integer: boolean equals(java.lang.Object)>(r0)
org.apache.ambari.server.utils.StageUtils.getRangedItem : $z0 = virtualinvoke r1.<java.lang.Integer: boolean equals(java.lang.Object)>(r0) >>>>>>>> org.apache.ambari.server.utils.StageUtils.getRangedItem : if $z0 == 0
org.apache.ambari.server.utils.StageUtils.getRangedItem : if $z0 == 0 >>>>>>>> org.apache.ambari.server.utils.StageUtils.getRangedItem : $r6 = new java.lang.StringBuilder
org.apache.ambari.server.utils.StageUtils.getRangedItem : $r6 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.utils.StageUtils.getRangedItem : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.utils.StageUtils.getRangedItem : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.utils.StageUtils.getRangedItem : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0)
org.apache.ambari.server.utils.StageUtils.getRangedItem : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0) >>>>>>>> org.apache.ambari.server.utils.StageUtils.getRangedItem : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
org.apache.ambari.server.utils.StageUtils.getRangedItem : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> org.apache.ambari.server.utils.StageUtils.getRangedItem : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1)
org.apache.ambari.server.utils.StageUtils.getRangedItem : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.utils.StageUtils.getRangedItem : $r5 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.utils.StageUtils.getRangedItem : $r5 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.utils.StageUtils.getRangedItem : r3 = $r5
org.apache.ambari.server.utils.StageUtils.getRangedItem : r3 = $r5 >>>>>>>> org.apache.ambari.server.utils.StageUtils.getRangedItem : return r3
org.apache.ambari.server.utils.StageUtils.getRangedItem : return r3 >>>>>>>> org.apache.ambari.server.utils.StageUtils.replaceRanges : interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>(r6)
org.apache.ambari.server.utils.StageUtils.replaceRanges : interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>(r6) >>>>>>>> org.apache.ambari.server.utils.StageUtils.replaceRanges : r3 = r5
org.apache.ambari.server.utils.StageUtils.replaceRanges : r3 = r5 >>>>>>>> org.apache.ambari.server.utils.StageUtils.replaceRanges : $r10 = staticinvoke <org.apache.ambari.server.utils.StageUtils: java.lang.String getRangedItem(java.lang.Integer,java.lang.Integer)>(r3, r2)
org.apache.ambari.server.utils.StageUtils.replaceRanges : $r10 = staticinvoke <org.apache.ambari.server.utils.StageUtils: java.lang.String getRangedItem(java.lang.Integer,java.lang.Integer)>(r3, r2) >>>>>>>> org.apache.ambari.server.utils.StageUtils.getRangedItem : $r5 = virtualinvoke r1.<java.lang.Integer: java.lang.String toString()>()
org.apache.ambari.server.utils.StageUtils.getRangedItem : $r5 = virtualinvoke r1.<java.lang.Integer: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.utils.StageUtils.getRangedItem : goto [?= r3 = $r5]
org.apache.ambari.server.utils.StageUtils.getRangedItem : goto [?= r3 = $r5] >>>>>>>> org.apache.ambari.server.utils.StageUtils.replaceRanges : interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>($r10)
org.apache.ambari.server.utils.StageUtils.replaceRanges : interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>($r10) >>>>>>>> org.apache.ambari.server.utils.StageUtils.replaceRanges : return r1
org.apache.ambari.server.utils.StageUtils.replaceRanges : return r1 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.TaskWrapper.isAnyTaskSequential : $r3 = virtualinvoke r0.<org.apache.ambari.server.state.stack.upgrade.TaskWrapper: java.util.List getTasks()>()
org.apache.ambari.server.state.stack.upgrade.TaskWrapper.isAnyTaskSequential : $r3 = virtualinvoke r0.<org.apache.ambari.server.state.stack.upgrade.TaskWrapper: java.util.List getTasks()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.TaskWrapper.getTasks : $r1 = r0.<org.apache.ambari.server.state.stack.upgrade.TaskWrapper: java.util.List tasks>
org.apache.ambari.server.state.stack.upgrade.TaskWrapper.getTasks : $r1 = r0.<org.apache.ambari.server.state.stack.upgrade.TaskWrapper: java.util.List tasks> >>>>>>>> org.apache.ambari.server.state.stack.upgrade.TaskWrapper.getTasks : return $r1
org.apache.ambari.server.state.stack.upgrade.TaskWrapper.getTasks : return $r1 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.TaskWrapper.isAnyTaskSequential : r1 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.stack.upgrade.TaskWrapper.isAnyTaskSequential : r1 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.TaskWrapper.isAnyTaskSequential : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.upgrade.TaskWrapper.isAnyTaskSequential : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.TaskWrapper.isAnyTaskSequential : if $z0 == 0
org.apache.ambari.server.state.stack.upgrade.TaskWrapper.isAnyTaskSequential : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.TaskWrapper.isAnyTaskSequential : $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.stack.upgrade.TaskWrapper.isAnyTaskSequential : $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.TaskWrapper.isAnyTaskSequential : r2 = (org.apache.ambari.server.state.stack.upgrade.Task) $r4
org.apache.ambari.server.state.stack.upgrade.TaskWrapper.isAnyTaskSequential : r2 = (org.apache.ambari.server.state.stack.upgrade.Task) $r4 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.TaskWrapper.isAnyTaskSequential : $z1 = r2.<org.apache.ambari.server.state.stack.upgrade.Task: boolean isSequential>
org.apache.ambari.server.state.stack.upgrade.TaskWrapper.isAnyTaskSequential : $z1 = r2.<org.apache.ambari.server.state.stack.upgrade.Task: boolean isSequential> >>>>>>>> org.apache.ambari.server.state.stack.upgrade.TaskWrapper.isAnyTaskSequential : if $z1 == 0
org.apache.ambari.server.state.stack.upgrade.TaskWrapper.isAnyTaskSequential : if $z1 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.TaskWrapper.isAnyTaskSequential : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.stack.upgrade.TaskWrapper.isAnyTaskSequential : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.TaskWrapper.isAnyTaskSequential : return 0
