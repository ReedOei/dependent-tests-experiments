org.apache.ambari.server.api.resources.BaseResourceDefinition.initializeDirectives : $r3 = new java.util.HashSet >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.initializeDirectives : specialinvoke $r3.<java.util.HashSet: void <init>()>()
org.apache.ambari.server.api.resources.BaseResourceDefinition.initializeDirectives : specialinvoke $r3.<java.util.HashSet: void <init>()>() >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.initializeDirectives : r4 = $r3
org.apache.ambari.server.api.resources.BaseResourceDefinition.initializeDirectives : r4 = $r3 >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.initializeDirectives : if r2 == null
org.apache.ambari.server.api.resources.BaseResourceDefinition.initializeDirectives : if r2 == null >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.initializeDirectives : $r8 = r0.<org.apache.ambari.server.api.resources.BaseResourceDefinition: java.util.Map directives>
org.apache.ambari.server.api.resources.BaseResourceDefinition.initializeDirectives : $r8 = r0.<org.apache.ambari.server.api.resources.BaseResourceDefinition: java.util.Map directives> >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.initializeDirectives : interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r4)
org.apache.ambari.server.api.resources.BaseResourceDefinition.initializeDirectives : interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r4) >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.getSubResourceDefinitions : $r1 = r0.<org.apache.ambari.server.api.resources.BaseResourceDefinition: java.util.Set subResourceDefinitions>
org.apache.ambari.server.api.resources.BaseResourceDefinition.getSubResourceDefinitions : $r1 = r0.<org.apache.ambari.server.api.resources.BaseResourceDefinition: java.util.Set subResourceDefinitions> >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.getSubResourceDefinitions : return $r1
org.apache.ambari.server.api.resources.BaseResourceDefinition.getSubResourceDefinitions : return $r1 >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : if r1 == null
org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : if r1 == null >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("default")
org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("default") >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : if $z0 == 0
org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : if $z0 == 0 >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("minimal")
org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("minimal") >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : if $z1 == 0
org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : if $z1 == 0 >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : $z2 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("null_padding")
org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : $z2 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("null_padding") >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : if $z2 != 0
org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : if $z2 != 0 >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : $z3 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("no_padding")
org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : $z3 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("no_padding") >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : if $z3 != 0
org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : if $z3 != 0 >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : $z4 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("zero_padding")
org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : $z4 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("zero_padding") >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : if $z4 == 0
org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : if $z4 == 0 >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : $r5 = new java.lang.IllegalArgumentException
org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : $r5 = new java.lang.IllegalArgumentException >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : $r6 = new java.lang.StringBuilder
org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : $r6 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid renderer name: ")
org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid renderer name: ") >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for resource of type: ")
org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for resource of type: ") >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : $r10 = r0.<org.apache.ambari.server.api.resources.BaseResourceDefinition: org.apache.ambari.server.controller.spi.Resource$Type m_type>
org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : $r10 = r0.<org.apache.ambari.server.api.resources.BaseResourceDefinition: org.apache.ambari.server.controller.spi.Resource$Type m_type> >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10)
org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10) >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.toString : $r1 = r0.<org.apache.ambari.server.controller.spi.Resource$Type: java.lang.String name>
org.apache.ambari.server.controller.spi.Resource$Type.toString : $r1 = r0.<org.apache.ambari.server.controller.spi.Resource$Type: java.lang.String name> >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.toString : return $r1
org.apache.ambari.server.controller.spi.Resource$Type.toString : return $r1 >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12)
org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12) >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : throw $r5
