org.apache.ambari.server.api.services.ViewUrlsService.updateUrl : $r5 = <org.apache.ambari.server.api.services.Request$Type: org.apache.ambari.server.api.services.Request$Type PUT> >>>>>>>> org.apache.ambari.server.api.services.ViewUrlsService.updateUrl : $r6 = staticinvoke <com.google.common.base.Optional: com.google.common.base.Optional of(java.lang.Object)>(r4)
org.apache.ambari.server.api.services.ViewUrlsService.updateUrl : $r6 = staticinvoke <com.google.common.base.Optional: com.google.common.base.Optional of(java.lang.Object)>(r4) >>>>>>>> org.apache.ambari.server.api.services.ViewUrlsService.updateUrl : $r7 = specialinvoke r0.<org.apache.ambari.server.api.services.ViewUrlsService: org.apache.ambari.server.api.resources.ResourceInstance createViewUrlResource(com.google.common.base.Optional)>($r6)
org.apache.ambari.server.api.services.ViewUrlsService.updateUrl : $r7 = specialinvoke r0.<org.apache.ambari.server.api.services.ViewUrlsService: org.apache.ambari.server.api.resources.ResourceInstance createViewUrlResource(com.google.common.base.Optional)>($r6) >>>>>>>> org.apache.ambari.server.api.services.ViewUrlsService.createViewUrlResource : $r3 = <org.apache.ambari.server.controller.spi.Resource$Type: org.apache.ambari.server.controller.spi.Resource$Type ViewURL>
org.apache.ambari.server.api.services.ViewUrlsService.createViewUrlResource : $r3 = <org.apache.ambari.server.controller.spi.Resource$Type: org.apache.ambari.server.controller.spi.Resource$Type ViewURL> >>>>>>>> org.apache.ambari.server.api.services.ViewUrlsService.createViewUrlResource : $r4 = <org.apache.ambari.server.controller.spi.Resource$Type: org.apache.ambari.server.controller.spi.Resource$Type ViewURL>
org.apache.ambari.server.api.services.ViewUrlsService.createViewUrlResource : $r4 = <org.apache.ambari.server.controller.spi.Resource$Type: org.apache.ambari.server.controller.spi.Resource$Type ViewURL> >>>>>>>> org.apache.ambari.server.api.services.ViewUrlsService.createViewUrlResource : $z0 = virtualinvoke r1.<com.google.common.base.Optional: boolean isPresent()>()
org.apache.ambari.server.api.services.ViewUrlsService.createViewUrlResource : $z0 = virtualinvoke r1.<com.google.common.base.Optional: boolean isPresent()>() >>>>>>>> org.apache.ambari.server.api.services.ViewUrlsService.createViewUrlResource : if $z0 == 0
org.apache.ambari.server.api.services.ViewUrlsService.createViewUrlResource : if $z0 == 0 >>>>>>>> org.apache.ambari.server.api.services.ViewUrlsService.createViewUrlResource : $r5 = virtualinvoke r1.<com.google.common.base.Optional: java.lang.Object get()>()
org.apache.ambari.server.api.services.ViewUrlsService.createViewUrlResource : $r5 = virtualinvoke r1.<com.google.common.base.Optional: java.lang.Object get()>() >>>>>>>> org.apache.ambari.server.api.services.ViewUrlsService.createViewUrlResource : $r6 = (java.lang.String) $r5
org.apache.ambari.server.api.services.ViewUrlsService.createViewUrlResource : $r6 = (java.lang.String) $r5 >>>>>>>> org.apache.ambari.server.api.services.ViewUrlsService.createViewUrlResource : $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String toString()>()
org.apache.ambari.server.api.services.ViewUrlsService.createViewUrlResource : $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.api.services.ViewUrlsService.createViewUrlResource : goto [?= $r8 = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>($r4, $r7)]
org.apache.ambari.server.api.services.ViewUrlsService.createViewUrlResource : goto [?= $r8 = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>($r4, $r7)] >>>>>>>> org.apache.ambari.server.api.services.ViewUrlsService.createViewUrlResource : $r8 = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>($r4, $r7)
org.apache.ambari.server.api.services.ViewUrlsService.createViewUrlResource : $r8 = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>($r4, $r7) >>>>>>>> org.apache.ambari.server.api.services.ViewUrlsService.createViewUrlResource : $r9 = virtualinvoke r0.<org.apache.ambari.server.api.services.ViewUrlsService: org.apache.ambari.server.api.resources.ResourceInstance createResource(org.apache.ambari.server.controller.spi.Resource$Type,java.util.Map)>($r3, $r8)
org.apache.ambari.server.api.services.ViewUrlsService.createViewUrlResource : $r9 = virtualinvoke r0.<org.apache.ambari.server.api.services.ViewUrlsService: org.apache.ambari.server.api.resources.ResourceInstance createResource(org.apache.ambari.server.controller.spi.Resource$Type,java.util.Map)>($r3, $r8) >>>>>>>> org.apache.ambari.server.api.services.BaseService.createResource : $r3 = r0.<org.apache.ambari.server.api.services.BaseService: org.apache.ambari.server.api.resources.ResourceInstanceFactory m_resourceFactory>
org.apache.ambari.server.api.services.BaseService.createResource : $r3 = r0.<org.apache.ambari.server.api.services.BaseService: org.apache.ambari.server.api.resources.ResourceInstanceFactory m_resourceFactory> >>>>>>>> org.apache.ambari.server.api.services.BaseService.createResource : $r4 = interfaceinvoke $r3.<org.apache.ambari.server.api.resources.ResourceInstanceFactory: org.apache.ambari.server.api.resources.ResourceInstance createResource(org.apache.ambari.server.controller.spi.Resource$Type,java.util.Map)>(r1, r2)
org.apache.ambari.server.api.services.BaseService.createResource : $r4 = interfaceinvoke $r3.<org.apache.ambari.server.api.resources.ResourceInstanceFactory: org.apache.ambari.server.api.resources.ResourceInstance createResource(org.apache.ambari.server.controller.spi.Resource$Type,java.util.Map)>(r1, r2) >>>>>>>> org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.createResource : $r3 = <org.apache.ambari.server.controller.spi.Resource$Type: org.apache.ambari.server.controller.spi.Resource$Type Host>
org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.createResource : $r3 = <org.apache.ambari.server.controller.spi.Resource$Type: org.apache.ambari.server.controller.spi.Resource$Type Host> >>>>>>>> org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.createResource : $z0 = interfaceinvoke r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r3)
org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.createResource : $z0 = interfaceinvoke r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r3) >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.equals : if r0 != r1
org.apache.ambari.server.controller.spi.Resource$Type.equals : if r0 != r1 >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.equals : if r1 == null
org.apache.ambari.server.controller.spi.Resource$Type.equals : if r1 == null >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.equals : $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>()
org.apache.ambari.server.controller.spi.Resource$Type.equals : $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.equals : $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>()
org.apache.ambari.server.controller.spi.Resource$Type.equals : $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.equals : if $r3 == $r4
org.apache.ambari.server.controller.spi.Resource$Type.equals : if $r3 == $r4 >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.equals : r2 = (org.apache.ambari.server.controller.spi.Resource$Type) r1
org.apache.ambari.server.controller.spi.Resource$Type.equals : r2 = (org.apache.ambari.server.controller.spi.Resource$Type) r1 >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.equals : $i0 = r0.<org.apache.ambari.server.controller.spi.Resource$Type: int ordinal>
org.apache.ambari.server.controller.spi.Resource$Type.equals : $i0 = r0.<org.apache.ambari.server.controller.spi.Resource$Type: int ordinal> >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.equals : $i1 = r2.<org.apache.ambari.server.controller.spi.Resource$Type: int ordinal>
org.apache.ambari.server.controller.spi.Resource$Type.equals : $i1 = r2.<org.apache.ambari.server.controller.spi.Resource$Type: int ordinal> >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.equals : if $i0 != $i1
org.apache.ambari.server.controller.spi.Resource$Type.equals : if $i0 != $i1 >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.equals : $z1 = 0
org.apache.ambari.server.controller.spi.Resource$Type.equals : $z1 = 0 >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.equals : return $z1
org.apache.ambari.server.controller.spi.Resource$Type.equals : return $z1 >>>>>>>> org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.createResource : if $z0 == 0
org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.createResource : if $z0 == 0 >>>>>>>> org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.createResource : goto [?= r18 = staticinvoke <org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl: org.apache.ambari.server.api.resources.ResourceDefinition getResourceDefinition(org.apache.ambari.server.controller.spi.Resource$Type,java.util.Map)>(r1, r2)]
org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.createResource : goto [?= r18 = staticinvoke <org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl: org.apache.ambari.server.api.resources.ResourceDefinition getResourceDefinition(org.apache.ambari.server.controller.spi.Resource$Type,java.util.Map)>(r1, r2)] >>>>>>>> org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.createResource : r18 = staticinvoke <org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl: org.apache.ambari.server.api.resources.ResourceDefinition getResourceDefinition(org.apache.ambari.server.controller.spi.Resource$Type,java.util.Map)>(r1, r2)
org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.createResource : r18 = staticinvoke <org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl: org.apache.ambari.server.api.resources.ResourceDefinition getResourceDefinition(org.apache.ambari.server.controller.spi.Resource$Type,java.util.Map)>(r1, r2) >>>>>>>> org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition : $r2 = <org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl: java.util.Map resourceDefinitions>
org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition : $r2 = <org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl: java.util.Map resourceDefinitions> >>>>>>>> org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition : $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r0)
org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition : $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r0) >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.hashCode : $r1 = r0.<org.apache.ambari.server.controller.spi.Resource$Type: java.lang.String name>
org.apache.ambari.server.controller.spi.Resource$Type.hashCode : $r1 = r0.<org.apache.ambari.server.controller.spi.Resource$Type: java.lang.String name> >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.hashCode : i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>()
org.apache.ambari.server.controller.spi.Resource$Type.hashCode : i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>() >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.hashCode : $i1 = 31 * i0
org.apache.ambari.server.controller.spi.Resource$Type.hashCode : $i1 = 31 * i0 >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.hashCode : $i2 = r0.<org.apache.ambari.server.controller.spi.Resource$Type: int ordinal>
org.apache.ambari.server.controller.spi.Resource$Type.hashCode : $i2 = r0.<org.apache.ambari.server.controller.spi.Resource$Type: int ordinal> >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.hashCode : i3 = $i1 + $i2
org.apache.ambari.server.controller.spi.Resource$Type.hashCode : i3 = $i1 + $i2 >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.hashCode : return i3
org.apache.ambari.server.controller.spi.Resource$Type.hashCode : return i3 >>>>>>>> org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition : if $z0 == 0
org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition : if $z0 == 0 >>>>>>>> org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition : $r11 = <org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl$1: int[] $SwitchMap$org$apache$ambari$server$controller$spi$Resource$InternalType>
org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition : $r11 = <org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl$1: int[] $SwitchMap$org$apache$ambari$server$controller$spi$Resource$InternalType> >>>>>>>> org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition : $r12 = virtualinvoke r0.<org.apache.ambari.server.controller.spi.Resource$Type: org.apache.ambari.server.controller.spi.Resource$InternalType getInternalType()>()
org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition : $r12 = virtualinvoke r0.<org.apache.ambari.server.controller.spi.Resource$Type: org.apache.ambari.server.controller.spi.Resource$InternalType getInternalType()>() >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.getInternalType : $z0 = virtualinvoke r0.<org.apache.ambari.server.controller.spi.Resource$Type: boolean isInternalType()>()
org.apache.ambari.server.controller.spi.Resource$Type.getInternalType : $z0 = virtualinvoke r0.<org.apache.ambari.server.controller.spi.Resource$Type: boolean isInternalType()>() >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.isInternalType : $i0 = r0.<org.apache.ambari.server.controller.spi.Resource$Type: int ordinal>
org.apache.ambari.server.controller.spi.Resource$Type.isInternalType : $i0 = r0.<org.apache.ambari.server.controller.spi.Resource$Type: int ordinal> >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.isInternalType : $r1 = staticinvoke <org.apache.ambari.server.controller.spi.Resource$InternalType: org.apache.ambari.server.controller.spi.Resource$InternalType[] values()>()
org.apache.ambari.server.controller.spi.Resource$Type.isInternalType : $r1 = staticinvoke <org.apache.ambari.server.controller.spi.Resource$InternalType: org.apache.ambari.server.controller.spi.Resource$InternalType[] values()>() >>>>>>>> org.apache.ambari.server.controller.spi.Resource$InternalType.values : $r0 = <org.apache.ambari.server.controller.spi.Resource$InternalType: org.apache.ambari.server.controller.spi.Resource$InternalType[] $VALUES>
org.apache.ambari.server.controller.spi.Resource$InternalType.values : $r0 = <org.apache.ambari.server.controller.spi.Resource$InternalType: org.apache.ambari.server.controller.spi.Resource$InternalType[] $VALUES> >>>>>>>> org.apache.ambari.server.controller.spi.Resource$InternalType.values : $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>()
org.apache.ambari.server.controller.spi.Resource$InternalType.values : $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> org.apache.ambari.server.controller.spi.Resource$InternalType.values : $r2 = (org.apache.ambari.server.controller.spi.Resource$InternalType[]) $r1
org.apache.ambari.server.controller.spi.Resource$InternalType.values : $r2 = (org.apache.ambari.server.controller.spi.Resource$InternalType[]) $r1 >>>>>>>> org.apache.ambari.server.controller.spi.Resource$InternalType.values : return $r2
org.apache.ambari.server.controller.spi.Resource$InternalType.values : return $r2 >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.isInternalType : $i1 = lengthof $r1
org.apache.ambari.server.controller.spi.Resource$Type.isInternalType : $i1 = lengthof $r1 >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.isInternalType : if $i0 >= $i1
org.apache.ambari.server.controller.spi.Resource$Type.isInternalType : if $i0 >= $i1 >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.isInternalType : $z0 = 1
org.apache.ambari.server.controller.spi.Resource$Type.isInternalType : $z0 = 1 >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.isInternalType : goto [?= return $z0]
org.apache.ambari.server.controller.spi.Resource$Type.isInternalType : goto [?= return $z0] >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.isInternalType : return $z0
org.apache.ambari.server.controller.spi.Resource$Type.isInternalType : return $z0 >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.getInternalType : if $z0 == 0
org.apache.ambari.server.controller.spi.Resource$Type.getInternalType : if $z0 == 0 >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.getInternalType : $r2 = staticinvoke <org.apache.ambari.server.controller.spi.Resource$InternalType: org.apache.ambari.server.controller.spi.Resource$InternalType[] values()>()
org.apache.ambari.server.controller.spi.Resource$Type.getInternalType : $r2 = staticinvoke <org.apache.ambari.server.controller.spi.Resource$InternalType: org.apache.ambari.server.controller.spi.Resource$InternalType[] values()>() >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.getInternalType : $i0 = r0.<org.apache.ambari.server.controller.spi.Resource$Type: int ordinal>
org.apache.ambari.server.controller.spi.Resource$Type.getInternalType : $i0 = r0.<org.apache.ambari.server.controller.spi.Resource$Type: int ordinal> >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.getInternalType : $r3 = $r2[$i0]
org.apache.ambari.server.controller.spi.Resource$Type.getInternalType : $r3 = $r2[$i0] >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.getInternalType : return $r3
org.apache.ambari.server.controller.spi.Resource$Type.getInternalType : return $r3 >>>>>>>> org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition : $i0 = virtualinvoke $r12.<org.apache.ambari.server.controller.spi.Resource$InternalType: int ordinal()>()
org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition : $i0 = virtualinvoke $r12.<org.apache.ambari.server.controller.spi.Resource$InternalType: int ordinal()>() >>>>>>>> org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition : $i1 = $r11[$i0]
org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition : $i1 = $r11[$i0] >>>>>>>> org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition : tableswitch($i1) {     case 1:
org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition : tableswitch($i1) {     case 1: >>>>>>>> org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition : r196 = new org.apache.ambari.server.api.resources.ViewUrlResourceDefinition
org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition : r196 = new org.apache.ambari.server.api.resources.ViewUrlResourceDefinition >>>>>>>> org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition : specialinvoke r196.<org.apache.ambari.server.api.resources.ViewUrlResourceDefinition: void <init>()>()
org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition : specialinvoke r196.<org.apache.ambari.server.api.resources.ViewUrlResourceDefinition: void <init>()>() >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.initializeDirectives : $r3 = new java.util.HashSet
org.apache.ambari.server.api.resources.BaseResourceDefinition.initializeDirectives : $r3 = new java.util.HashSet >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.initializeDirectives : specialinvoke $r3.<java.util.HashSet: void <init>()>()
org.apache.ambari.server.api.resources.BaseResourceDefinition.initializeDirectives : specialinvoke $r3.<java.util.HashSet: void <init>()>() >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.initializeDirectives : r4 = $r3
org.apache.ambari.server.api.resources.BaseResourceDefinition.initializeDirectives : r4 = $r3 >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.initializeDirectives : if r2 == null
org.apache.ambari.server.api.resources.BaseResourceDefinition.initializeDirectives : if r2 == null >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.initializeDirectives : $r8 = r0.<org.apache.ambari.server.api.resources.BaseResourceDefinition: java.util.Map directives>
org.apache.ambari.server.api.resources.BaseResourceDefinition.initializeDirectives : $r8 = r0.<org.apache.ambari.server.api.resources.BaseResourceDefinition: java.util.Map directives> >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.initializeDirectives : interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r4)
org.apache.ambari.server.api.resources.BaseResourceDefinition.initializeDirectives : interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r4) >>>>>>>> org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition : r3 = r196
org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition : r3 = r196 >>>>>>>> org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition : goto [?= return r3]
org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition : goto [?= return r3] >>>>>>>> org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition : return r3
org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition : return r3 >>>>>>>> org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.createResource : $r19 = new org.apache.ambari.server.api.query.QueryImpl
org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.createResource : $r19 = new org.apache.ambari.server.api.query.QueryImpl >>>>>>>> org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.createResource : $r5 = staticinvoke <org.apache.ambari.server.controller.utilities.ClusterControllerHelper: org.apache.ambari.server.controller.spi.ClusterController getClusterController()>()
org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.createResource : $r5 = staticinvoke <org.apache.ambari.server.controller.utilities.ClusterControllerHelper: org.apache.ambari.server.controller.spi.ClusterController getClusterController()>() >>>>>>>> org.apache.ambari.server.controller.utilities.ClusterControllerHelper.getClusterController : $r0 = <org.apache.ambari.server.controller.utilities.ClusterControllerHelper: org.apache.ambari.server.controller.spi.ClusterController controller>
org.apache.ambari.server.controller.utilities.ClusterControllerHelper.getClusterController : $r0 = <org.apache.ambari.server.controller.utilities.ClusterControllerHelper: org.apache.ambari.server.controller.spi.ClusterController controller> >>>>>>>> org.apache.ambari.server.controller.utilities.ClusterControllerHelper.getClusterController : if $r0 != null
org.apache.ambari.server.controller.utilities.ClusterControllerHelper.getClusterController : if $r0 != null >>>>>>>> org.apache.ambari.server.controller.utilities.ClusterControllerHelper.getClusterController : $r3 = <org.apache.ambari.server.controller.utilities.ClusterControllerHelper: java.lang.String PROVIDER_MODULE_CLASS>
org.apache.ambari.server.controller.utilities.ClusterControllerHelper.getClusterController : $r3 = <org.apache.ambari.server.controller.utilities.ClusterControllerHelper: java.lang.String PROVIDER_MODULE_CLASS> >>>>>>>> org.apache.ambari.server.controller.utilities.ClusterControllerHelper.getClusterController : r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r3)
