org.apache.ambari.server.utils.HTTPUtils.requestURL : r1 = "" >>>>>>>> org.apache.ambari.server.utils.HTTPUtils.requestURL : n0 = null
org.apache.ambari.server.utils.HTTPUtils.requestURL : n0 = null >>>>>>>> org.apache.ambari.server.utils.HTTPUtils.requestURL : r2 = r0
org.apache.ambari.server.utils.HTTPUtils.requestURL : r2 = r0 >>>>>>>> org.apache.ambari.server.utils.HTTPUtils.requestURL : $r8 = new org.apache.ambari.server.controller.internal.URLStreamProvider
org.apache.ambari.server.utils.HTTPUtils.requestURL : $r8 = new org.apache.ambari.server.controller.internal.URLStreamProvider >>>>>>>> org.apache.ambari.server.utils.HTTPUtils.requestURL : $r3 = staticinvoke <org.apache.ambari.server.configuration.ComponentSSLConfiguration: org.apache.ambari.server.configuration.ComponentSSLConfiguration instance()>()
org.apache.ambari.server.utils.HTTPUtils.requestURL : $r3 = staticinvoke <org.apache.ambari.server.configuration.ComponentSSLConfiguration: org.apache.ambari.server.configuration.ComponentSSLConfiguration instance()>() >>>>>>>> org.apache.ambari.server.configuration.ComponentSSLConfiguration.instance : $r0 = <org.apache.ambari.server.configuration.ComponentSSLConfiguration: org.apache.ambari.server.configuration.ComponentSSLConfiguration singleton>
org.apache.ambari.server.configuration.ComponentSSLConfiguration.instance : $r0 = <org.apache.ambari.server.configuration.ComponentSSLConfiguration: org.apache.ambari.server.configuration.ComponentSSLConfiguration singleton> >>>>>>>> org.apache.ambari.server.configuration.ComponentSSLConfiguration.instance : return $r0
org.apache.ambari.server.configuration.ComponentSSLConfiguration.instance : return $r0 >>>>>>>> org.apache.ambari.server.utils.HTTPUtils.requestURL : specialinvoke $r8.<org.apache.ambari.server.controller.internal.URLStreamProvider: void <init>(int,int,org.apache.ambari.server.configuration.ComponentSSLConfiguration)>(20000, 15000, $r3)
org.apache.ambari.server.utils.HTTPUtils.requestURL : specialinvoke $r8.<org.apache.ambari.server.controller.internal.URLStreamProvider: void <init>(int,int,org.apache.ambari.server.configuration.ComponentSSLConfiguration)>(20000, 15000, $r3) >>>>>>>> org.apache.ambari.server.configuration.ComponentSSLConfiguration.getTruststorePath : $r1 = r0.<org.apache.ambari.server.configuration.ComponentSSLConfiguration: java.lang.String truststorePath>
org.apache.ambari.server.configuration.ComponentSSLConfiguration.getTruststorePath : $r1 = r0.<org.apache.ambari.server.configuration.ComponentSSLConfiguration: java.lang.String truststorePath> >>>>>>>> org.apache.ambari.server.configuration.ComponentSSLConfiguration.getTruststorePath : return $r1
org.apache.ambari.server.configuration.ComponentSSLConfiguration.getTruststorePath : return $r1 >>>>>>>> org.apache.ambari.server.configuration.ComponentSSLConfiguration.getTruststorePassword : $r1 = r0.<org.apache.ambari.server.configuration.ComponentSSLConfiguration: java.lang.String truststorePassword>
org.apache.ambari.server.configuration.ComponentSSLConfiguration.getTruststorePassword : $r1 = r0.<org.apache.ambari.server.configuration.ComponentSSLConfiguration: java.lang.String truststorePassword> >>>>>>>> org.apache.ambari.server.configuration.ComponentSSLConfiguration.getTruststorePassword : return $r1
org.apache.ambari.server.configuration.ComponentSSLConfiguration.getTruststorePassword : return $r1 >>>>>>>> org.apache.ambari.server.configuration.ComponentSSLConfiguration.getTruststoreType : $r1 = r0.<org.apache.ambari.server.configuration.ComponentSSLConfiguration: java.lang.String truststoreType>
org.apache.ambari.server.configuration.ComponentSSLConfiguration.getTruststoreType : $r1 = r0.<org.apache.ambari.server.configuration.ComponentSSLConfiguration: java.lang.String truststoreType> >>>>>>>> org.apache.ambari.server.configuration.ComponentSSLConfiguration.getTruststoreType : return $r1
org.apache.ambari.server.configuration.ComponentSSLConfiguration.getTruststoreType : return $r1 >>>>>>>> org.apache.ambari.server.utils.HTTPUtils.requestURL : r4 = $r8
org.apache.ambari.server.utils.HTTPUtils.requestURL : r4 = $r8 >>>>>>>> org.apache.ambari.server.utils.HTTPUtils.requestURL : $r9 = new java.util.HashMap
org.apache.ambari.server.utils.HTTPUtils.requestURL : $r9 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.utils.HTTPUtils.requestURL : specialinvoke $r9.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.utils.HTTPUtils.requestURL : specialinvoke $r9.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.utils.HTTPUtils.requestURL : r5 = $r9
org.apache.ambari.server.utils.HTTPUtils.requestURL : r5 = $r9 >>>>>>>> org.apache.ambari.server.utils.HTTPUtils.requestURL : $r10 = (java.lang.String) null
org.apache.ambari.server.utils.HTTPUtils.requestURL : $r10 = (java.lang.String) null >>>>>>>> org.apache.ambari.server.utils.HTTPUtils.requestURL : r6 = virtualinvoke r4.<org.apache.ambari.server.controller.internal.URLStreamProvider: java.net.HttpURLConnection processURL(java.lang.String,java.lang.String,java.lang.String,java.util.Map)>(r2, "GET", $r10, r5)
org.apache.ambari.server.utils.HTTPUtils.requestURL : r6 = virtualinvoke r4.<org.apache.ambari.server.controller.internal.URLStreamProvider: java.net.HttpURLConnection processURL(java.lang.String,java.lang.String,java.lang.String,java.util.Map)>(r2, "GET", $r10, r5) >>>>>>>> org.apache.ambari.server.controller.internal.URLStreamProvider.processURL : if r3 != null
org.apache.ambari.server.controller.internal.URLStreamProvider.processURL : if r3 != null >>>>>>>> org.apache.ambari.server.controller.internal.URLStreamProvider.processURL : $r8 = null
org.apache.ambari.server.controller.internal.URLStreamProvider.processURL : $r8 = null >>>>>>>> org.apache.ambari.server.controller.internal.URLStreamProvider.processURL : goto [?= $r9 = virtualinvoke r0.<org.apache.ambari.server.controller.internal.URLStreamProvider: java.net.HttpURLConnection processURL(java.lang.String,java.lang.String,byte[],java.util.Map)>(r1, r2, $r8, r4)]
org.apache.ambari.server.controller.internal.URLStreamProvider.processURL : goto [?= $r9 = virtualinvoke r0.<org.apache.ambari.server.controller.internal.URLStreamProvider: java.net.HttpURLConnection processURL(java.lang.String,java.lang.String,byte[],java.util.Map)>(r1, r2, $r8, r4)] >>>>>>>> org.apache.ambari.server.controller.internal.URLStreamProvider.processURL : $r9 = virtualinvoke r0.<org.apache.ambari.server.controller.internal.URLStreamProvider: java.net.HttpURLConnection processURL(java.lang.String,java.lang.String,byte[],java.util.Map)>(r1, r2, $r8, r4)
org.apache.ambari.server.controller.internal.URLStreamProvider.processURL : $r9 = virtualinvoke r0.<org.apache.ambari.server.controller.internal.URLStreamProvider: java.net.HttpURLConnection processURL(java.lang.String,java.lang.String,byte[],java.util.Map)>(r1, r2, $r8, r4) >>>>>>>> org.apache.ambari.server.controller.internal.URLStreamProvider.processURL : $r5 = <org.apache.ambari.server.controller.internal.URLStreamProvider: org.apache.commons.logging.Log LOG>
org.apache.ambari.server.controller.internal.URLStreamProvider.processURL : $r5 = <org.apache.ambari.server.controller.internal.URLStreamProvider: org.apache.commons.logging.Log LOG> >>>>>>>> org.apache.ambari.server.controller.internal.URLStreamProvider.processURL : $z0 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()
org.apache.ambari.server.controller.internal.URLStreamProvider.processURL : $z0 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isDebugEnabled()>() >>>>>>>> org.apache.ambari.server.controller.internal.URLStreamProvider.processURL : if $z0 == 0
org.apache.ambari.server.controller.internal.URLStreamProvider.processURL : if $z0 == 0 >>>>>>>> org.apache.ambari.server.controller.internal.URLStreamProvider.processURL : $z1 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("https")
org.apache.ambari.server.controller.internal.URLStreamProvider.processURL : $z1 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>("https") >>>>>>>> org.apache.ambari.server.controller.internal.URLStreamProvider.processURL : if $z1 == 0
org.apache.ambari.server.controller.internal.URLStreamProvider.processURL : if $z1 == 0 >>>>>>>> org.apache.ambari.server.controller.internal.URLStreamProvider.processURL : $r17 = virtualinvoke r0.<org.apache.ambari.server.controller.internal.URLStreamProvider: java.net.HttpURLConnection getConnection(java.lang.String)>(r1)
org.apache.ambari.server.controller.internal.URLStreamProvider.processURL : $r17 = virtualinvoke r0.<org.apache.ambari.server.controller.internal.URLStreamProvider: java.net.HttpURLConnection getConnection(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.controller.internal.URLStreamProvider.getConnection : $r2 = new java.net.URL
org.apache.ambari.server.controller.internal.URLStreamProvider.getConnection : $r2 = new java.net.URL >>>>>>>> org.apache.ambari.server.controller.internal.URLStreamProvider.getConnection : specialinvoke $r2.<java.net.URL: void <init>(java.lang.String)>(r1)
org.apache.ambari.server.controller.internal.URLStreamProvider.getConnection : specialinvoke $r2.<java.net.URL: void <init>(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.utils.HTTPUtils.requestURL : r19 = $r18
org.apache.ambari.server.utils.HTTPUtils.requestURL : r19 = $r18 >>>>>>>> org.apache.ambari.server.utils.HTTPUtils.requestURL : virtualinvoke r19.<java.io.IOException: void printStackTrace()>()
org.apache.ambari.server.utils.HTTPUtils.requestURL : virtualinvoke r19.<java.io.IOException: void printStackTrace()>() >>>>>>>> org.apache.ambari.server.utils.HTTPUtils.requestURL : goto [?= return r1]
org.apache.ambari.server.utils.HTTPUtils.requestURL : goto [?= return r1] >>>>>>>> org.apache.ambari.server.utils.HTTPUtils.requestURL : return r1
