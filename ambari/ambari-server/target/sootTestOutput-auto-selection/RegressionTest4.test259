org.apache.ambari.server.utils.ShellCommandUtil.setFileGroup : $z0 = <org.apache.ambari.server.utils.ShellCommandUtil: boolean LINUX> >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileGroup : if $z0 == 0
org.apache.ambari.server.utils.ShellCommandUtil.setFileGroup : if $z0 == 0 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileGroup : $z1 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r1)
org.apache.ambari.server.utils.ShellCommandUtil.setFileGroup : $z1 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileGroup : if $z1 != 0
org.apache.ambari.server.utils.ShellCommandUtil.setFileGroup : if $z1 != 0 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileGroup : $r3 = newarray (java.lang.String)[3]
org.apache.ambari.server.utils.ShellCommandUtil.setFileGroup : $r3 = newarray (java.lang.String)[3] >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileGroup : $r3[0] = "chgrp"
org.apache.ambari.server.utils.ShellCommandUtil.setFileGroup : $r3[0] = "chgrp" >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileGroup : $r3[1] = r1
org.apache.ambari.server.utils.ShellCommandUtil.setFileGroup : $r3[1] = r1 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileGroup : $r3[2] = r0
org.apache.ambari.server.utils.ShellCommandUtil.setFileGroup : $r3[2] = r0 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileGroup : $r4 = staticinvoke <org.apache.ambari.server.utils.ShellCommandUtil: org.apache.ambari.server.utils.ShellCommandUtil$Result runCommand(java.lang.String[],java.util.Map,org.apache.ambari.server.utils.ShellCommandUtil$InteractiveHandler,boolean)>($r3, null, null, 1)
org.apache.ambari.server.utils.ShellCommandUtil.setFileGroup : $r4 = staticinvoke <org.apache.ambari.server.utils.ShellCommandUtil: org.apache.ambari.server.utils.ShellCommandUtil$Result runCommand(java.lang.String[],java.util.Map,org.apache.ambari.server.utils.ShellCommandUtil$InteractiveHandler,boolean)>($r3, null, null, 1) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : if z0 == 0
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : if z0 == 0 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : $i0 = lengthof r0
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : $i0 = lengthof r0 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : $i1 = $i0 + 1
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : $i1 = $i0 + 1 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : r3 = newarray (java.lang.String)[$i1]
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : r3 = newarray (java.lang.String)[$i1] >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : r3[0] = "ambari-sudo.sh"
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : r3[0] = "ambari-sudo.sh" >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : $i2 = lengthof r0
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : $i2 = lengthof r0 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r3, 1, $i2)
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r3, 1, $i2) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : goto [?= $r12 = new java.lang.ProcessBuilder]
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : goto [?= $r12 = new java.lang.ProcessBuilder] >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : $r12 = new java.lang.ProcessBuilder
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : $r12 = new java.lang.ProcessBuilder >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : specialinvoke $r12.<java.lang.ProcessBuilder: void <init>(java.lang.String[])>(r3)
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : specialinvoke $r12.<java.lang.ProcessBuilder: void <init>(java.lang.String[])>(r3) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : r4 = $r12
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : r4 = $r12 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : if r1 == null
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : if r1 == null >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : $z1 = <org.apache.ambari.server.utils.ShellCommandUtil: boolean WINDOWS>
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : $z1 = <org.apache.ambari.server.utils.ShellCommandUtil: boolean WINDOWS> >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : if $z1 == 0
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : if $z1 == 0 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : r14 = virtualinvoke r4.<java.lang.ProcessBuilder: java.lang.Process start()>()
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : r14 = virtualinvoke r4.<java.lang.ProcessBuilder: java.lang.Process start()>() >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileGroup : r2 = $r5
org.apache.ambari.server.utils.ShellCommandUtil.setFileGroup : r2 = $r5 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileGroup : $r6 = <org.apache.ambari.server.utils.ShellCommandUtil: org.apache.commons.logging.Log LOG>
org.apache.ambari.server.utils.ShellCommandUtil.setFileGroup : $r6 = <org.apache.ambari.server.utils.ShellCommandUtil: org.apache.commons.logging.Log LOG> >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileGroup : $r7 = newarray (java.lang.Object)[2]
org.apache.ambari.server.utils.ShellCommandUtil.setFileGroup : $r7 = newarray (java.lang.Object)[2] >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileGroup : $r7[0] = r1
org.apache.ambari.server.utils.ShellCommandUtil.setFileGroup : $r7[0] = r1 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileGroup : $r7[1] = r0
org.apache.ambari.server.utils.ShellCommandUtil.setFileGroup : $r7[1] = r0 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileGroup : $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Can not perform chgrp %s %s", $r7)
org.apache.ambari.server.utils.ShellCommandUtil.setFileGroup : $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Can not perform chgrp %s %s", $r7) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileGroup : interfaceinvoke $r6.<org.apache.commons.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>($r8, r2)
org.apache.ambari.server.utils.ShellCommandUtil.setFileGroup : interfaceinvoke $r6.<org.apache.commons.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>($r8, r2) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileGroup : $r9 = new org.apache.ambari.server.utils.ShellCommandUtil$Result
org.apache.ambari.server.utils.ShellCommandUtil.setFileGroup : $r9 = new org.apache.ambari.server.utils.ShellCommandUtil$Result >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileGroup : $r10 = new java.lang.StringBuilder
org.apache.ambari.server.utils.ShellCommandUtil.setFileGroup : $r10 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileGroup : specialinvoke $r10.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.utils.ShellCommandUtil.setFileGroup : specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileGroup : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot perform operation: ")
org.apache.ambari.server.utils.ShellCommandUtil.setFileGroup : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot perform operation: ") >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileGroup : $r12 = virtualinvoke r2.<java.io.IOException: java.lang.String getLocalizedMessage()>()
org.apache.ambari.server.utils.ShellCommandUtil.setFileGroup : $r12 = virtualinvoke r2.<java.io.IOException: java.lang.String getLocalizedMessage()>() >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileGroup : $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12)
org.apache.ambari.server.utils.ShellCommandUtil.setFileGroup : $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileGroup : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.utils.ShellCommandUtil.setFileGroup : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileGroup : specialinvoke $r9.<org.apache.ambari.server.utils.ShellCommandUtil$Result: void <init>(int,java.lang.String,java.lang.String)>(-1, "", $r14)
org.apache.ambari.server.utils.ShellCommandUtil.setFileGroup : specialinvoke $r9.<org.apache.ambari.server.utils.ShellCommandUtil$Result: void <init>(int,java.lang.String,java.lang.String)>(-1, "", $r14) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setFileGroup : return $r9
