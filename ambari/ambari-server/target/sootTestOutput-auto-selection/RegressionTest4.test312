org.apache.ambari.server.controller.HostsMap.setupMap : r1 = null >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : $r6 = <org.apache.ambari.server.controller.HostsMap: org.slf4j.Logger LOG>
org.apache.ambari.server.controller.HostsMap.setupMap : $r6 = <org.apache.ambari.server.controller.HostsMap: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : $r2 = new java.lang.StringBuilder
org.apache.ambari.server.controller.HostsMap.setupMap : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.controller.HostsMap.setupMap : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Using hostsmap file ")
org.apache.ambari.server.controller.HostsMap.setupMap : $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Using hostsmap file ") >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : $r8 = r0.<org.apache.ambari.server.controller.HostsMap: java.lang.String hostsMapFile>
org.apache.ambari.server.controller.HostsMap.setupMap : $r8 = r0.<org.apache.ambari.server.controller.HostsMap: java.lang.String hostsMapFile> >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)
org.apache.ambari.server.controller.HostsMap.setupMap : $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8) >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.controller.HostsMap.setupMap : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String)>($r10)
org.apache.ambari.server.controller.HostsMap.setupMap : interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String)>($r10) >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : $r11 = r0.<org.apache.ambari.server.controller.HostsMap: java.lang.String hostsMapFile>
org.apache.ambari.server.controller.HostsMap.setupMap : $r11 = r0.<org.apache.ambari.server.controller.HostsMap: java.lang.String hostsMapFile> >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : if $r11 == null
org.apache.ambari.server.controller.HostsMap.setupMap : if $r11 == null >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : $r12 = new java.util.Properties
org.apache.ambari.server.controller.HostsMap.setupMap : $r12 = new java.util.Properties >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : specialinvoke $r12.<java.util.Properties: void <init>()>()
org.apache.ambari.server.controller.HostsMap.setupMap : specialinvoke $r12.<java.util.Properties: void <init>()>() >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : r0.<org.apache.ambari.server.controller.HostsMap: java.util.Properties hostsMap> = $r12
org.apache.ambari.server.controller.HostsMap.setupMap : r0.<org.apache.ambari.server.controller.HostsMap: java.util.Properties hostsMap> = $r12 >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : $r13 = new java.io.FileInputStream
org.apache.ambari.server.controller.HostsMap.setupMap : $r13 = new java.io.FileInputStream >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : $r14 = new java.io.File
org.apache.ambari.server.controller.HostsMap.setupMap : $r14 = new java.io.File >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : $r15 = r0.<org.apache.ambari.server.controller.HostsMap: java.lang.String hostsMapFile>
org.apache.ambari.server.controller.HostsMap.setupMap : $r15 = r0.<org.apache.ambari.server.controller.HostsMap: java.lang.String hostsMapFile> >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : specialinvoke $r14.<java.io.File: void <init>(java.lang.String)>($r15)
org.apache.ambari.server.controller.HostsMap.setupMap : specialinvoke $r14.<java.io.File: void <init>(java.lang.String)>($r15) >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : specialinvoke $r13.<java.io.FileInputStream: void <init>(java.io.File)>($r14)
org.apache.ambari.server.controller.HostsMap.setupMap : specialinvoke $r13.<java.io.FileInputStream: void <init>(java.io.File)>($r14) >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : r19 = $r18
org.apache.ambari.server.controller.HostsMap.setupMap : r19 = $r18 >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : $r20 = <org.apache.ambari.server.controller.HostsMap: org.slf4j.Logger LOG>
org.apache.ambari.server.controller.HostsMap.setupMap : $r20 = <org.apache.ambari.server.controller.HostsMap: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : $r21 = new java.lang.StringBuilder
org.apache.ambari.server.controller.HostsMap.setupMap : $r21 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : specialinvoke $r21.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.controller.HostsMap.setupMap : specialinvoke $r21.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No configuration file ")
org.apache.ambari.server.controller.HostsMap.setupMap : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No configuration file ") >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : $r23 = r0.<org.apache.ambari.server.controller.HostsMap: java.lang.String hostsMapFile>
org.apache.ambari.server.controller.HostsMap.setupMap : $r23 = r0.<org.apache.ambari.server.controller.HostsMap: java.lang.String hostsMapFile> >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23)
org.apache.ambari.server.controller.HostsMap.setupMap : $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23) >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" found in classpath.")
org.apache.ambari.server.controller.HostsMap.setupMap : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" found in classpath.") >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.controller.HostsMap.setupMap : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : interfaceinvoke $r20.<org.slf4j.Logger: void info(java.lang.String,java.lang.Throwable)>($r26, r19)
org.apache.ambari.server.controller.HostsMap.setupMap : interfaceinvoke $r20.<org.slf4j.Logger: void info(java.lang.String,java.lang.Throwable)>($r26, r19) >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : if r1 == null
