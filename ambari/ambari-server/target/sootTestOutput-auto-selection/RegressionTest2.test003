org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping.getBuilder : $r1 = new org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping$ServiceCheckBuilder >>>>>>>> org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping.getBuilder : specialinvoke $r1.<org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping$ServiceCheckBuilder: void <init>(org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping,org.apache.ambari.server.state.stack.upgrade.Grouping)>(r0, r0)
org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping.getBuilder : specialinvoke $r1.<org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping$ServiceCheckBuilder: void <init>(org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping,org.apache.ambari.server.state.stack.upgrade.Grouping)>(r0, r0) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping.getBuilder : return $r1
org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping.getBuilder : return $r1 >>>>>>>> org.apache.ambari.server.state.UpgradeContext.setAutoSkipComponentFailures : r0.<org.apache.ambari.server.state.UpgradeContext: boolean m_autoSkipComponentFailures> = z0
org.apache.ambari.server.state.UpgradeContext.setAutoSkipComponentFailures : r0.<org.apache.ambari.server.state.UpgradeContext: boolean m_autoSkipComponentFailures> = z0 >>>>>>>> org.apache.ambari.server.state.UpgradeContext.addUnhealthy : $r2 = r0.<org.apache.ambari.server.state.UpgradeContext: java.util.List m_unhealthy>
org.apache.ambari.server.state.UpgradeContext.addUnhealthy : $r2 = r0.<org.apache.ambari.server.state.UpgradeContext: java.util.List m_unhealthy> >>>>>>>> org.apache.ambari.server.state.UpgradeContext.addUnhealthy : interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>(r1)
org.apache.ambari.server.state.UpgradeContext.addUnhealthy : interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>(r1) >>>>>>>> org.apache.ambari.server.state.UpgradeContext.isServiceSupported : $r2 = r0.<org.apache.ambari.server.state.UpgradeContext: java.util.Set m_supported>
org.apache.ambari.server.state.UpgradeContext.isServiceSupported : $r2 = r0.<org.apache.ambari.server.state.UpgradeContext: java.util.Set m_supported> >>>>>>>> org.apache.ambari.server.state.UpgradeContext.isServiceSupported : $z0 = interfaceinvoke $r2.<java.util.Set: boolean isEmpty()>()
org.apache.ambari.server.state.UpgradeContext.isServiceSupported : $z0 = interfaceinvoke $r2.<java.util.Set: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.state.UpgradeContext.isServiceSupported : if $z0 != 0
org.apache.ambari.server.state.UpgradeContext.isServiceSupported : if $z0 != 0 >>>>>>>> org.apache.ambari.server.state.UpgradeContext.isServiceSupported : return 1
org.apache.ambari.server.state.UpgradeContext.isServiceSupported : return 1 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.StageWrapper.getHosts : $r1 = new java.util.HashSet
org.apache.ambari.server.state.stack.upgrade.StageWrapper.getHosts : $r1 = new java.util.HashSet >>>>>>>> org.apache.ambari.server.state.stack.upgrade.StageWrapper.getHosts : specialinvoke $r1.<java.util.HashSet: void <init>()>()
org.apache.ambari.server.state.stack.upgrade.StageWrapper.getHosts : specialinvoke $r1.<java.util.HashSet: void <init>()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.StageWrapper.getHosts : r2 = $r1
org.apache.ambari.server.state.stack.upgrade.StageWrapper.getHosts : r2 = $r1 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.StageWrapper.getHosts : $r5 = r0.<org.apache.ambari.server.state.stack.upgrade.StageWrapper: java.util.List tasks>
org.apache.ambari.server.state.stack.upgrade.StageWrapper.getHosts : $r5 = r0.<org.apache.ambari.server.state.stack.upgrade.StageWrapper: java.util.List tasks> >>>>>>>> org.apache.ambari.server.state.stack.upgrade.StageWrapper.getHosts : r3 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.stack.upgrade.StageWrapper.getHosts : r3 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.StageWrapper.getHosts : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.upgrade.StageWrapper.getHosts : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.StageWrapper.getHosts : if $z0 == 0
org.apache.ambari.server.state.stack.upgrade.StageWrapper.getHosts : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.StageWrapper.getHosts : return r2
org.apache.ambari.server.state.stack.upgrade.StageWrapper.getHosts : return r2 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping$ServiceCheckBuilder.build : $r12 = virtualinvoke r1.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.state.Cluster getCluster()>()
org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping$ServiceCheckBuilder.build : $r12 = virtualinvoke r1.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.state.Cluster getCluster()>() >>>>>>>> org.apache.ambari.server.state.UpgradeContext.getCluster : $r1 = r0.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.state.Cluster m_cluster>
org.apache.ambari.server.state.UpgradeContext.getCluster : $r1 = r0.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.state.Cluster m_cluster> >>>>>>>> org.apache.ambari.server.state.UpgradeContext.getCluster : return $r1
org.apache.ambari.server.state.UpgradeContext.getCluster : return $r1 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping$ServiceCheckBuilder.build : r0.<org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping$ServiceCheckBuilder: org.apache.ambari.server.state.Cluster m_cluster> = $r12
org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping$ServiceCheckBuilder.build : r0.<org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping$ServiceCheckBuilder: org.apache.ambari.server.state.Cluster m_cluster> = $r12 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping$ServiceCheckBuilder.build : $r13 = virtualinvoke r1.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.api.services.AmbariMetaInfo getAmbariMetaInfo()>()
org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping$ServiceCheckBuilder.build : $r13 = virtualinvoke r1.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.api.services.AmbariMetaInfo getAmbariMetaInfo()>() >>>>>>>> org.apache.ambari.server.state.UpgradeContext.getAmbariMetaInfo : $r1 = r0.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.api.services.AmbariMetaInfo m_metaInfo>
org.apache.ambari.server.state.UpgradeContext.getAmbariMetaInfo : $r1 = r0.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.api.services.AmbariMetaInfo m_metaInfo> >>>>>>>> org.apache.ambari.server.state.UpgradeContext.getAmbariMetaInfo : return $r1
org.apache.ambari.server.state.UpgradeContext.getAmbariMetaInfo : return $r1 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping$ServiceCheckBuilder.build : r0.<org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping$ServiceCheckBuilder: org.apache.ambari.server.api.services.AmbariMetaInfo m_metaInfo> = $r13
org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping$ServiceCheckBuilder.build : r0.<org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping$ServiceCheckBuilder: org.apache.ambari.server.api.services.AmbariMetaInfo m_metaInfo> = $r13 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping$ServiceCheckBuilder.build : $r14 = new java.util.ArrayList
org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping$ServiceCheckBuilder.build : $r14 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping$ServiceCheckBuilder.build : specialinvoke $r14.<java.util.ArrayList: void <init>(java.util.Collection)>(r2)
org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping$ServiceCheckBuilder.build : specialinvoke $r14.<java.util.ArrayList: void <init>(java.util.Collection)>(r2) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping$ServiceCheckBuilder.build : r3 = $r14
org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping$ServiceCheckBuilder.build : r3 = $r14 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping$ServiceCheckBuilder.build : $r15 = virtualinvoke r1.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.state.stack.upgrade.Direction getDirection()>()
org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping$ServiceCheckBuilder.build : $r15 = virtualinvoke r1.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.state.stack.upgrade.Direction getDirection()>() >>>>>>>> org.apache.ambari.server.state.UpgradeContext.getDirection : $r1 = r0.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.state.stack.upgrade.Direction m_direction>
org.apache.ambari.server.state.UpgradeContext.getDirection : $r1 = r0.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.state.stack.upgrade.Direction m_direction> >>>>>>>> org.apache.ambari.server.state.UpgradeContext.getDirection : return $r1
org.apache.ambari.server.state.UpgradeContext.getDirection : return $r1 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping$ServiceCheckBuilder.build : $z0 = virtualinvoke $r15.<org.apache.ambari.server.state.stack.upgrade.Direction: boolean isDowngrade()>()
