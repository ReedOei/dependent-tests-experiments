org.apache.ambari.server.api.services.RequestBody.getPropertySets : r1 = virtualinvoke r0.<org.apache.ambari.server.api.services.RequestBody: java.util.Set getNamedPropertySets()>() >>>>>>>> org.apache.ambari.server.api.services.RequestBody.getNamedPropertySets : $r1 = r0.<org.apache.ambari.server.api.services.RequestBody: java.util.Set m_propertySets>
org.apache.ambari.server.api.services.RequestBody.getNamedPropertySets : $r1 = r0.<org.apache.ambari.server.api.services.RequestBody: java.util.Set m_propertySets> >>>>>>>> org.apache.ambari.server.api.services.RequestBody.getNamedPropertySets : return $r1
org.apache.ambari.server.api.services.RequestBody.getNamedPropertySets : return $r1 >>>>>>>> org.apache.ambari.server.api.services.RequestBody.getPropertySets : $r5 = new java.util.HashSet
org.apache.ambari.server.api.services.RequestBody.getPropertySets : $r5 = new java.util.HashSet >>>>>>>> org.apache.ambari.server.api.services.RequestBody.getPropertySets : $i0 = interfaceinvoke r1.<java.util.Set: int size()>()
org.apache.ambari.server.api.services.RequestBody.getPropertySets : $i0 = interfaceinvoke r1.<java.util.Set: int size()>() >>>>>>>> org.apache.ambari.server.api.services.RequestBody.getPropertySets : specialinvoke $r5.<java.util.HashSet: void <init>(int)>($i0)
org.apache.ambari.server.api.services.RequestBody.getPropertySets : specialinvoke $r5.<java.util.HashSet: void <init>(int)>($i0) >>>>>>>> org.apache.ambari.server.api.services.RequestBody.getPropertySets : r2 = $r5
org.apache.ambari.server.api.services.RequestBody.getPropertySets : r2 = $r5 >>>>>>>> org.apache.ambari.server.api.services.RequestBody.getPropertySets : r3 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.api.services.RequestBody.getPropertySets : r3 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.api.services.RequestBody.getPropertySets : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.api.services.RequestBody.getPropertySets : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.api.services.RequestBody.getPropertySets : if $z0 == 0
org.apache.ambari.server.api.services.RequestBody.getPropertySets : if $z0 == 0 >>>>>>>> org.apache.ambari.server.api.services.RequestBody.getPropertySets : return r2
org.apache.ambari.server.api.services.RequestBody.getPropertySets : return r2 >>>>>>>> org.apache.ambari.server.controller.internal.ScaleClusterRequest.getClusterId : $r1 = r0.<org.apache.ambari.server.controller.internal.ScaleClusterRequest: java.lang.Long clusterId>
org.apache.ambari.server.controller.internal.ScaleClusterRequest.getClusterId : $r1 = r0.<org.apache.ambari.server.controller.internal.ScaleClusterRequest: java.lang.Long clusterId> >>>>>>>> org.apache.ambari.server.controller.internal.ScaleClusterRequest.getClusterId : return $r1
org.apache.ambari.server.controller.internal.ScaleClusterRequest.getClusterId : return $r1 >>>>>>>> org.apache.ambari.server.controller.internal.BaseClusterRequest.getBlueprint : $r1 = r0.<org.apache.ambari.server.controller.internal.BaseClusterRequest: org.apache.ambari.server.topology.Blueprint blueprint>
org.apache.ambari.server.controller.internal.BaseClusterRequest.getBlueprint : $r1 = r0.<org.apache.ambari.server.controller.internal.BaseClusterRequest: org.apache.ambari.server.topology.Blueprint blueprint> >>>>>>>> org.apache.ambari.server.controller.internal.BaseClusterRequest.getBlueprint : return $r1
org.apache.ambari.server.controller.internal.BaseClusterRequest.getBlueprint : return $r1 >>>>>>>> org.apache.ambari.server.controller.internal.BaseClusterRequest.getConfiguration : $r1 = r0.<org.apache.ambari.server.controller.internal.BaseClusterRequest: org.apache.ambari.server.topology.Configuration configuration>
org.apache.ambari.server.controller.internal.BaseClusterRequest.getConfiguration : $r1 = r0.<org.apache.ambari.server.controller.internal.BaseClusterRequest: org.apache.ambari.server.topology.Configuration configuration> >>>>>>>> org.apache.ambari.server.controller.internal.BaseClusterRequest.getConfiguration : return $r1
org.apache.ambari.server.controller.internal.BaseClusterRequest.getConfiguration : return $r1 >>>>>>>> org.apache.ambari.server.controller.internal.BaseClusterRequest.getHostGroupInfo : $r1 = r0.<org.apache.ambari.server.controller.internal.BaseClusterRequest: java.util.Map hostGroupInfoMap>
org.apache.ambari.server.controller.internal.BaseClusterRequest.getHostGroupInfo : $r1 = r0.<org.apache.ambari.server.controller.internal.BaseClusterRequest: java.util.Map hostGroupInfoMap> >>>>>>>> org.apache.ambari.server.controller.internal.BaseClusterRequest.getHostGroupInfo : return $r1
org.apache.ambari.server.controller.internal.BaseClusterRequest.getHostGroupInfo : return $r1 >>>>>>>> org.apache.ambari.server.topology.ClusterTopologyImpl.registerHostGroupInfo : $r2 = <org.apache.ambari.server.topology.ClusterTopologyImpl: org.slf4j.Logger LOG>
org.apache.ambari.server.topology.ClusterTopologyImpl.registerHostGroupInfo : $r2 = <org.apache.ambari.server.topology.ClusterTopologyImpl: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.topology.ClusterTopologyImpl.registerHostGroupInfo : $i0 = interfaceinvoke r1.<java.util.Map: int size()>()
org.apache.ambari.server.topology.ClusterTopologyImpl.registerHostGroupInfo : $i0 = interfaceinvoke r1.<java.util.Map: int size()>() >>>>>>>> org.apache.ambari.server.topology.ClusterTopologyImpl.registerHostGroupInfo : $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0)
org.apache.ambari.server.topology.ClusterTopologyImpl.registerHostGroupInfo : $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) >>>>>>>> org.apache.ambari.server.topology.ClusterTopologyImpl.registerHostGroupInfo : interfaceinvoke $r2.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Registering requested host group information for {} hostgroups", $r10)
org.apache.ambari.server.topology.ClusterTopologyImpl.registerHostGroupInfo : interfaceinvoke $r2.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Registering requested host group information for {} hostgroups", $r10) >>>>>>>> org.apache.ambari.server.topology.ClusterTopologyImpl.registerHostGroupInfo : specialinvoke r0.<org.apache.ambari.server.topology.ClusterTopologyImpl: void checkForDuplicateHosts(java.util.Map)>(r1)
org.apache.ambari.server.topology.ClusterTopologyImpl.registerHostGroupInfo : specialinvoke r0.<org.apache.ambari.server.topology.ClusterTopologyImpl: void checkForDuplicateHosts(java.util.Map)>(r1) >>>>>>>> org.apache.ambari.server.topology.ClusterTopologyImpl.checkForDuplicateHosts : $r2 = new java.util.HashSet
org.apache.ambari.server.topology.ClusterTopologyImpl.checkForDuplicateHosts : $r2 = new java.util.HashSet >>>>>>>> org.apache.ambari.server.topology.ClusterTopologyImpl.checkForDuplicateHosts : specialinvoke $r2.<java.util.HashSet: void <init>()>()
org.apache.ambari.server.topology.ClusterTopologyImpl.checkForDuplicateHosts : specialinvoke $r2.<java.util.HashSet: void <init>()>() >>>>>>>> org.apache.ambari.server.topology.ClusterTopologyImpl.checkForDuplicateHosts : r3 = $r2
org.apache.ambari.server.topology.ClusterTopologyImpl.checkForDuplicateHosts : r3 = $r2 >>>>>>>> org.apache.ambari.server.topology.ClusterTopologyImpl.checkForDuplicateHosts : $r11 = new java.util.HashSet
org.apache.ambari.server.topology.ClusterTopologyImpl.checkForDuplicateHosts : $r11 = new java.util.HashSet >>>>>>>> org.apache.ambari.server.topology.ClusterTopologyImpl.checkForDuplicateHosts : specialinvoke $r11.<java.util.HashSet: void <init>()>()
org.apache.ambari.server.topology.ClusterTopologyImpl.checkForDuplicateHosts : specialinvoke $r11.<java.util.HashSet: void <init>()>() >>>>>>>> org.apache.ambari.server.topology.ClusterTopologyImpl.checkForDuplicateHosts : r4 = $r11
org.apache.ambari.server.topology.ClusterTopologyImpl.checkForDuplicateHosts : r4 = $r11 >>>>>>>> org.apache.ambari.server.topology.ClusterTopologyImpl.checkForDuplicateHosts : $r12 = interfaceinvoke r1.<java.util.Map: java.util.Collection values()>()
org.apache.ambari.server.topology.ClusterTopologyImpl.checkForDuplicateHosts : $r12 = interfaceinvoke r1.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.ambari.server.topology.ClusterTopologyImpl.checkForDuplicateHosts : r5 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.ambari.server.topology.ClusterTopologyImpl.checkForDuplicateHosts : r5 = interfaceinvoke $r12.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.topology.ClusterTopologyImpl.checkForDuplicateHosts : $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.topology.ClusterTopologyImpl.checkForDuplicateHosts : $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.topology.ClusterTopologyImpl.checkForDuplicateHosts : if $z0 == 0
org.apache.ambari.server.topology.ClusterTopologyImpl.checkForDuplicateHosts : if $z0 == 0 >>>>>>>> org.apache.ambari.server.topology.ClusterTopologyImpl.checkForDuplicateHosts : $z6 = interfaceinvoke r4.<java.util.Set: boolean isEmpty()>()
org.apache.ambari.server.topology.ClusterTopologyImpl.checkForDuplicateHosts : $z6 = interfaceinvoke r4.<java.util.Set: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.topology.ClusterTopologyImpl.checkForDuplicateHosts : if $z6 != 0
org.apache.ambari.server.topology.ClusterTopologyImpl.checkForDuplicateHosts : if $z6 != 0 >>>>>>>> org.apache.ambari.server.topology.ClusterTopologyImpl.registerHostGroupInfo : $r11 = interfaceinvoke r1.<java.util.Map: java.util.Collection values()>()
org.apache.ambari.server.topology.ClusterTopologyImpl.registerHostGroupInfo : $r11 = interfaceinvoke r1.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.ambari.server.topology.ClusterTopologyImpl.registerHostGroupInfo : r3 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.ambari.server.topology.ClusterTopologyImpl.registerHostGroupInfo : r3 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.topology.ClusterTopologyImpl.registerHostGroupInfo : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.topology.ClusterTopologyImpl.registerHostGroupInfo : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.topology.ClusterTopologyImpl.registerHostGroupInfo : if $z0 == 0
org.apache.ambari.server.topology.ClusterTopologyImpl.registerHostGroupInfo : if $z0 == 0 >>>>>>>> org.apache.ambari.server.controller.internal.ScaleClusterRequest.getTopologyValidators : $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>()
org.apache.ambari.server.controller.internal.ScaleClusterRequest.getTopologyValidators : $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>() >>>>>>>> org.apache.ambari.server.controller.internal.ScaleClusterRequest.getTopologyValidators : return $r1
org.apache.ambari.server.controller.internal.ScaleClusterRequest.getTopologyValidators : return $r1 >>>>>>>> org.apache.ambari.server.topology.ClusterTopologyImpl.validateTopology : r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.topology.ClusterTopologyImpl.validateTopology : r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.topology.ClusterTopologyImpl.validateTopology : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.topology.ClusterTopologyImpl.validateTopology : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.topology.ClusterTopologyImpl.validateTopology : if $z0 == 0
org.apache.ambari.server.topology.ClusterTopologyImpl.validateTopology : if $z0 == 0 >>>>>>>> org.apache.ambari.server.topology.ClusterTopologyImpl.validateTopology : $z1 = virtualinvoke r0.<org.apache.ambari.server.topology.ClusterTopologyImpl: boolean isNameNodeHAEnabled()>()
org.apache.ambari.server.topology.ClusterTopologyImpl.validateTopology : $z1 = virtualinvoke r0.<org.apache.ambari.server.topology.ClusterTopologyImpl: boolean isNameNodeHAEnabled()>() >>>>>>>> org.apache.ambari.server.topology.ClusterTopologyImpl.isNameNodeHAEnabled : $r1 = r0.<org.apache.ambari.server.topology.ClusterTopologyImpl: org.apache.ambari.server.topology.Configuration configuration>
org.apache.ambari.server.topology.ClusterTopologyImpl.isNameNodeHAEnabled : $r1 = r0.<org.apache.ambari.server.topology.ClusterTopologyImpl: org.apache.ambari.server.topology.Configuration configuration> >>>>>>>> org.apache.ambari.server.topology.ClusterTopologyImpl.isNameNodeHAEnabled : $r2 = virtualinvoke $r1.<org.apache.ambari.server.topology.Configuration: java.util.Map getFullProperties()>()
