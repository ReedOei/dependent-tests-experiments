org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForConfigsNotMappedToService : $r0 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForConfigsNotMappedToService : interfaceinvoke $r0.<org.slf4j.Logger: void info(java.lang.String)>("Checking for configs that are not mapped to any service")
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForConfigsNotMappedToService : interfaceinvoke $r0.<org.slf4j.Logger: void info(java.lang.String)>("Checking for configs that are not mapped to any service") >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForConfigsNotMappedToService : r1 = staticinvoke <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: java.util.List getNotMappedClusterConfigsToService()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForConfigsNotMappedToService : r1 = staticinvoke <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: java.util.List getNotMappedClusterConfigsToService()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.getNotMappedClusterConfigsToService : $r0 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: com.google.inject.Injector injector>
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.getNotMappedClusterConfigsToService : $r0 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: com.google.inject.Injector injector> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.getNotMappedClusterConfigsToService : r1 = interfaceinvoke $r0.<com.google.inject.Injector: com.google.inject.Provider getProvider(java.lang.Class)>(class "javax/persistence/EntityManager")
