org.apache.ambari.server.checks.AbstractCheckDescriptor.getDescription : $r1 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: org.apache.ambari.server.checks.CheckDescription m_description> >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getDescription : return $r1
org.apache.ambari.server.checks.AbstractCheckDescriptor.getDescription : return $r1 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.isApplicable : $z0 = specialinvoke r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: boolean isApplicable(org.apache.ambari.server.controller.PrereqCheckRequest)>(r1)
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.isApplicable : $z0 = specialinvoke r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: boolean isApplicable(org.apache.ambari.server.controller.PrereqCheckRequest)>(r1) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : return 1
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : return 1 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.isApplicable : if $z0 == 0
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.isApplicable : if $z0 == 0 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.isApplicable : $r2 = virtualinvoke r1.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getRepositoryVersion()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.isApplicable : $r2 = virtualinvoke r1.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getRepositoryVersion()>() >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getRepositoryVersion : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String m_repositoryVersion>
org.apache.ambari.server.controller.PrereqCheckRequest.getRepositoryVersion : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String m_repositoryVersion> >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getRepositoryVersion : return $r1
org.apache.ambari.server.controller.PrereqCheckRequest.getRepositoryVersion : return $r1 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.isApplicable : if $r2 == null
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.isApplicable : if $r2 == null >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.isApplicable : $z1 = 0
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.isApplicable : $z1 = 0 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.isApplicable : return $z1
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.isApplicable : return $z1 >>>>>>>> org.apache.ambari.server.checks.ServicesTezDistributedCacheCheck.isApplicable : $r3 = newarray (java.lang.String)[1]
org.apache.ambari.server.checks.ServicesTezDistributedCacheCheck.isApplicable : $r3 = newarray (java.lang.String)[1] >>>>>>>> org.apache.ambari.server.checks.ServicesTezDistributedCacheCheck.isApplicable : $r3[0] = "TEZ"
org.apache.ambari.server.checks.ServicesTezDistributedCacheCheck.isApplicable : $r3[0] = "TEZ" >>>>>>>> org.apache.ambari.server.checks.ServicesTezDistributedCacheCheck.isApplicable : $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3)
org.apache.ambari.server.checks.ServicesTezDistributedCacheCheck.isApplicable : $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3) >>>>>>>> org.apache.ambari.server.checks.ServicesTezDistributedCacheCheck.isApplicable : $z0 = specialinvoke r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: boolean isApplicable(org.apache.ambari.server.controller.PrereqCheckRequest,java.util.List,boolean)>(r1, $r4, 1)
org.apache.ambari.server.checks.ServicesTezDistributedCacheCheck.isApplicable : $z0 = specialinvoke r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: boolean isApplicable(org.apache.ambari.server.controller.PrereqCheckRequest,java.util.List,boolean)>(r1, $r4, 1) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r7 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: com.google.inject.Provider clustersProvider>
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r7 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: com.google.inject.Provider clustersProvider> >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r8 = interfaceinvoke $r7.<com.google.inject.Provider: java.lang.Object get()>()
