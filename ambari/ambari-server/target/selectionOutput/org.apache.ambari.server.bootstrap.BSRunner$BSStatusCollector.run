org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r1 = new org.apache.ambari.server.bootstrap.BSHostStatusCollector >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r5 = r0.<org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector: org.apache.ambari.server.bootstrap.BSRunner this$0>
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r5 = r0.<org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector: org.apache.ambari.server.bootstrap.BSRunner this$0> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r6 = staticinvoke <org.apache.ambari.server.bootstrap.BSRunner: java.io.File access$000(org.apache.ambari.server.bootstrap.BSRunner)>($r5)
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r6 = staticinvoke <org.apache.ambari.server.bootstrap.BSRunner: java.io.File access$000(org.apache.ambari.server.bootstrap.BSRunner)>($r5) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r7 = r0.<org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector: org.apache.ambari.server.bootstrap.BSRunner this$0>
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r7 = r0.<org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector: org.apache.ambari.server.bootstrap.BSRunner this$0> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r8 = staticinvoke <org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.SshHostInfo access$100(org.apache.ambari.server.bootstrap.BSRunner)>($r7)
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r8 = staticinvoke <org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.SshHostInfo access$100(org.apache.ambari.server.bootstrap.BSRunner)>($r7) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r9 = virtualinvoke $r8.<org.apache.ambari.server.bootstrap.SshHostInfo: java.util.List getHosts()>()
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r9 = virtualinvoke $r8.<org.apache.ambari.server.bootstrap.SshHostInfo: java.util.List getHosts()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : specialinvoke $r1.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: void <init>(java.io.File,java.util.List)>($r6, $r9)
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : specialinvoke $r1.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: void <init>(java.io.File,java.util.List)>($r6, $r9) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : r2 = $r1
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : r2 = $r1 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : virtualinvoke r2.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: void run()>()
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : virtualinvoke r2.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: void run()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : r3 = virtualinvoke r2.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: java.util.List getHostStatus()>()
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : r3 = virtualinvoke r2.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: java.util.List getHostStatus()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r10 = new org.apache.ambari.server.bootstrap.BootStrapStatus
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r10 = new org.apache.ambari.server.bootstrap.BootStrapStatus >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : specialinvoke $r10.<org.apache.ambari.server.bootstrap.BootStrapStatus: void <init>()>()
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : specialinvoke $r10.<org.apache.ambari.server.bootstrap.BootStrapStatus: void <init>()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : r4 = $r10
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : r4 = $r10 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : virtualinvoke r4.<org.apache.ambari.server.bootstrap.BootStrapStatus: void setHostsStatus(java.util.List)>(r3)
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : virtualinvoke r4.<org.apache.ambari.server.bootstrap.BootStrapStatus: void setHostsStatus(java.util.List)>(r3) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : virtualinvoke r4.<org.apache.ambari.server.bootstrap.BootStrapStatus: void setLog(java.lang.String)>("")
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : virtualinvoke r4.<org.apache.ambari.server.bootstrap.BootStrapStatus: void setLog(java.lang.String)>("") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r11 = <org.apache.ambari.server.bootstrap.BootStrapStatus$BSStat: org.apache.ambari.server.bootstrap.BootStrapStatus$BSStat RUNNING>
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r11 = <org.apache.ambari.server.bootstrap.BootStrapStatus$BSStat: org.apache.ambari.server.bootstrap.BootStrapStatus$BSStat RUNNING> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : virtualinvoke r4.<org.apache.ambari.server.bootstrap.BootStrapStatus: void setStatus(org.apache.ambari.server.bootstrap.BootStrapStatus$BSStat)>($r11)
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : virtualinvoke r4.<org.apache.ambari.server.bootstrap.BootStrapStatus: void setStatus(org.apache.ambari.server.bootstrap.BootStrapStatus$BSStat)>($r11) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r12 = r0.<org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector: org.apache.ambari.server.bootstrap.BSRunner this$0>
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r12 = r0.<org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector: org.apache.ambari.server.bootstrap.BSRunner this$0> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r13 = staticinvoke <org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.BootStrapImpl access$300(org.apache.ambari.server.bootstrap.BSRunner)>($r12)
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r13 = staticinvoke <org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.BootStrapImpl access$300(org.apache.ambari.server.bootstrap.BSRunner)>($r12) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r14 = r0.<org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector: org.apache.ambari.server.bootstrap.BSRunner this$0>
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r14 = r0.<org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector: org.apache.ambari.server.bootstrap.BSRunner this$0> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $i0 = staticinvoke <org.apache.ambari.server.bootstrap.BSRunner: int access$200(org.apache.ambari.server.bootstrap.BSRunner)>($r14)
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $i0 = staticinvoke <org.apache.ambari.server.bootstrap.BSRunner: int access$200(org.apache.ambari.server.bootstrap.BSRunner)>($r14) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $l1 = (long) $i0
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $l1 = (long) $i0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : virtualinvoke $r13.<org.apache.ambari.server.bootstrap.BootStrapImpl: void updateStatus(long,org.apache.ambari.server.bootstrap.BootStrapStatus)>($l1, r4)
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : virtualinvoke $r13.<org.apache.ambari.server.bootstrap.BootStrapImpl: void updateStatus(long,org.apache.ambari.server.bootstrap.BootStrapStatus)>($l1, r4) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : return
