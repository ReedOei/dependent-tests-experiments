org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : n0 = null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r11 = newarray (com.google.inject.Module)[2]
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : n0 = null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r26 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : r6 = $r32 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : staticinvoke <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: void closeConnection()>()
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : r6 = $r32 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r32 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : staticinvoke <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: void closeConnection()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $z7 = staticinvoke <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: boolean ifErrorsFound()>()
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $z7 = staticinvoke <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: boolean ifErrorsFound()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : if $z7 != 0
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : if $z7 != 0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $z8 = staticinvoke <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: boolean ifWarningsFound()>()
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : if $z7 != 0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : r7 = "ambari-server-check-database.log"
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : r7 = "ambari-server-check-database.log" >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r33 = <org.apache.ambari.server.checks.DatabaseConsistencyChecker: org.slf4j.Logger LOG>
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r33 = <org.apache.ambari.server.checks.DatabaseConsistencyChecker: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $z9 = $r33 instanceof org.slf4j.impl.Log4jLoggerAdapter
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $z9 = $r33 instanceof org.slf4j.impl.Log4jLoggerAdapter >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : if $z9 == 0
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : if $z9 == 0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : r8 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.Class)>(class "org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper")
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : if $z9 == 0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : r35 = virtualinvoke r7.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("//", "/")
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : r35 = virtualinvoke r7.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("//", "/") >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $z12 = staticinvoke <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: boolean ifErrorsFound()>()
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $z12 = staticinvoke <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: boolean ifErrorsFound()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : if $z12 == 0
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : if $z12 == 0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r36 = <java.lang.System: java.io.PrintStream out>
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : if $z12 == 0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r39 = <java.lang.System: java.io.PrintStream out>
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r39 = <java.lang.System: java.io.PrintStream out> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r40 = newarray (java.lang.Object)[1]
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r40 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r40[0] = r35
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r40[0] = r35 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r41 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("DB configs consistency check found warnings. See \"%s\" for more details.", $r40)
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r41 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("DB configs consistency check found warnings. See \"%s\" for more details.", $r40) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : virtualinvoke $r39.<java.io.PrintStream: void print(java.lang.String)>($r41)
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : virtualinvoke $r39.<java.io.PrintStream: void print(java.lang.String)>($r41) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : goto [?= throw r6]
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : goto [?= throw r6] >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : throw r6
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r36 = <java.lang.System: java.io.PrintStream out> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r37 = newarray (java.lang.Object)[1]
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r37 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r37[0] = r35
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r37[0] = r35 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r38 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("DB configs consistency check failed. Run \"ambari-server start --skip-database-check\" to skip. You may try --auto-fix-database flag to attempt to fix issues automatically. If you use this \"--skip-database-check\" option, do not make any changes to your cluster topology or perform a cluster upgrade until you correct the database consistency issues. See \"%s\" for more details on the consistency issues.", $r37)
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r38 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("DB configs consistency check failed. Run \"ambari-server start --skip-database-check\" to skip. You may try --auto-fix-database flag to attempt to fix issues automatically. If you use this \"--skip-database-check\" option, do not make any changes to your cluster topology or perform a cluster upgrade until you correct the database consistency issues. See \"%s\" for more details on the consistency issues.", $r37) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : virtualinvoke $r36.<java.io.PrintStream: void print(java.lang.String)>($r38)
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : virtualinvoke $r36.<java.io.PrintStream: void print(java.lang.String)>($r38) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : goto [?= (branch)]
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : goto [?= throw r6]
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : r8 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.Class)>(class "org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper") >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : r9 = virtualinvoke r8.<org.apache.log4j.Logger: java.util.Enumeration getAllAppenders()>()
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : r9 = virtualinvoke r8.<org.apache.log4j.Logger: java.util.Enumeration getAllAppenders()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $z10 = interfaceinvoke r9.<java.util.Enumeration: boolean hasMoreElements()>()
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $z10 = interfaceinvoke r9.<java.util.Enumeration: boolean hasMoreElements()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : if $z10 == 0
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : if $z10 == 0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : r10 = interfaceinvoke r9.<java.util.Enumeration: java.lang.Object nextElement()>()
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : if $z10 == 0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : r35 = virtualinvoke r7.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("//", "/")
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : r10 = interfaceinvoke r9.<java.util.Enumeration: java.lang.Object nextElement()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $z11 = r10 instanceof org.apache.log4j.FileAppender
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $z11 = r10 instanceof org.apache.log4j.FileAppender >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : if $z11 == 0
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : if $z11 == 0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r34 = (org.apache.log4j.FileAppender) r10
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : if $z11 == 0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : goto [?= $z10 = interfaceinvoke r9.<java.util.Enumeration: boolean hasMoreElements()>()]
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : goto [?= $z10 = interfaceinvoke r9.<java.util.Enumeration: boolean hasMoreElements()>()] >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $z10 = interfaceinvoke r9.<java.util.Enumeration: boolean hasMoreElements()>()
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r34 = (org.apache.log4j.FileAppender) r10 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : r7 = virtualinvoke $r34.<org.apache.log4j.FileAppender: java.lang.String getFile()>()
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : r7 = virtualinvoke $r34.<org.apache.log4j.FileAppender: java.lang.String getFile()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : goto [?= r35 = virtualinvoke r7.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("//", "/")]
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : goto [?= r35 = virtualinvoke r7.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("//", "/")] >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : r35 = virtualinvoke r7.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("//", "/")
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $z8 = staticinvoke <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: boolean ifWarningsFound()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : if $z8 == 0
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : if $z8 == 0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : r7 = "ambari-server-check-database.log"
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : if $z8 == 0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r42 = <java.lang.System: java.io.PrintStream out>
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r42 = <java.lang.System: java.io.PrintStream out> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : virtualinvoke $r42.<java.io.PrintStream: void print(java.lang.String)>("No errors and warnings were found.")
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : virtualinvoke $r42.<java.io.PrintStream: void print(java.lang.String)>("No errors and warnings were found.") >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : throw r6
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : r27 = $r26 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $z6 = r27 instanceof org.apache.ambari.server.AmbariException
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : r27 = $r26 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r32 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $z6 = r27 instanceof org.apache.ambari.server.AmbariException >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : if $z6 == 0
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $z6 = r27 instanceof org.apache.ambari.server.AmbariException >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r32 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : if $z6 == 0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r28 = <org.apache.ambari.server.checks.DatabaseConsistencyChecker: org.slf4j.Logger LOG>
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : if $z6 == 0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r30 = <org.apache.ambari.server.checks.DatabaseConsistencyChecker: org.slf4j.Logger LOG>
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : if $z6 == 0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r32 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r30 = <org.apache.ambari.server.checks.DatabaseConsistencyChecker: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : interfaceinvoke $r30.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Unexpected error, database check failed", r27)
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r30 = <org.apache.ambari.server.checks.DatabaseConsistencyChecker: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r32 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : interfaceinvoke $r30.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Unexpected error, database check failed", r27) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r31 = new java.lang.Exception
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : interfaceinvoke $r30.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Unexpected error, database check failed", r27) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r32 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r31 = new java.lang.Exception >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : specialinvoke $r31.<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected error, database check failed", r27)
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r31 = new java.lang.Exception >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r32 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : specialinvoke $r31.<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected error, database check failed", r27) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : throw $r31
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : specialinvoke $r31.<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>("Unexpected error, database check failed", r27) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r32 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : throw $r31 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r32 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r28 = <org.apache.ambari.server.checks.DatabaseConsistencyChecker: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : interfaceinvoke $r28.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Exception occurred during database check:", r27)
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r28 = <org.apache.ambari.server.checks.DatabaseConsistencyChecker: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r32 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : interfaceinvoke $r28.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Exception occurred during database check:", r27) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r29 = (org.apache.ambari.server.AmbariException) r27
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : interfaceinvoke $r28.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Exception occurred during database check:", r27) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r32 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r29 = (org.apache.ambari.server.AmbariException) r27 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : throw $r29
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r29 = (org.apache.ambari.server.AmbariException) r27 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r32 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : throw $r29 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r32 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r11 = newarray (com.google.inject.Module)[2] >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r1 = new org.apache.ambari.server.checks.DatabaseConsistencyChecker$CheckHelperControllerModule
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r11 = newarray (com.google.inject.Module)[2] >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r26 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r1 = new org.apache.ambari.server.checks.DatabaseConsistencyChecker$CheckHelperControllerModule >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : specialinvoke $r1.<org.apache.ambari.server.checks.DatabaseConsistencyChecker$CheckHelperControllerModule: void <init>()>()
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r1 = new org.apache.ambari.server.checks.DatabaseConsistencyChecker$CheckHelperControllerModule >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r26 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : specialinvoke $r1.<org.apache.ambari.server.checks.DatabaseConsistencyChecker$CheckHelperControllerModule: void <init>()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r11[0] = $r1
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : specialinvoke $r1.<org.apache.ambari.server.checks.DatabaseConsistencyChecker$CheckHelperControllerModule: void <init>()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r26 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r11[0] = $r1 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r12 = new org.apache.ambari.server.checks.DatabaseConsistencyChecker$CheckHelperAuditModule
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r11[0] = $r1 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r26 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r12 = new org.apache.ambari.server.checks.DatabaseConsistencyChecker$CheckHelperAuditModule >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : specialinvoke $r12.<org.apache.ambari.server.checks.DatabaseConsistencyChecker$CheckHelperAuditModule: void <init>()>()
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r12 = new org.apache.ambari.server.checks.DatabaseConsistencyChecker$CheckHelperAuditModule >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r26 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : specialinvoke $r12.<org.apache.ambari.server.checks.DatabaseConsistencyChecker$CheckHelperAuditModule: void <init>()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r11[1] = $r12
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : specialinvoke $r12.<org.apache.ambari.server.checks.DatabaseConsistencyChecker$CheckHelperAuditModule: void <init>()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r26 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r11[1] = $r12 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : r2 = staticinvoke <com.google.inject.Guice: com.google.inject.Injector createInjector(com.google.inject.Module[])>($r11)
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r11[1] = $r12 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r26 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : r2 = staticinvoke <com.google.inject.Guice: com.google.inject.Injector createInjector(com.google.inject.Module[])>($r11) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r13 = interfaceinvoke r2.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "org/apache/ambari/server/checks/DatabaseConsistencyChecker")
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : r2 = staticinvoke <com.google.inject.Guice: com.google.inject.Injector createInjector(com.google.inject.Module[])>($r11) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r26 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r13 = interfaceinvoke r2.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "org/apache/ambari/server/checks/DatabaseConsistencyChecker") >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : r14 = (org.apache.ambari.server.checks.DatabaseConsistencyChecker) $r13
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r13 = interfaceinvoke r2.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "org/apache/ambari/server/checks/DatabaseConsistencyChecker") >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r26 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : r14 = (org.apache.ambari.server.checks.DatabaseConsistencyChecker) $r13 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : virtualinvoke r14.<org.apache.ambari.server.checks.DatabaseConsistencyChecker: void startPersistenceService()>()
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : r14 = (org.apache.ambari.server.checks.DatabaseConsistencyChecker) $r13 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r26 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : virtualinvoke r14.<org.apache.ambari.server.checks.DatabaseConsistencyChecker: void startPersistenceService()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : staticinvoke <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: void runAllDBChecks()>()
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : virtualinvoke r14.<org.apache.ambari.server.checks.DatabaseConsistencyChecker: void startPersistenceService()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r26 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : staticinvoke <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: void runAllDBChecks()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : staticinvoke <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: void checkHostComponentStates()>()
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : staticinvoke <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: void runAllDBChecks()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r26 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : staticinvoke <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: void checkHostComponentStates()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : staticinvoke <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: void checkServiceConfigs()>()
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : staticinvoke <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: void checkHostComponentStates()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r26 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : staticinvoke <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: void checkServiceConfigs()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : virtualinvoke r14.<org.apache.ambari.server.checks.DatabaseConsistencyChecker: void stopPersistenceService()>()
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : staticinvoke <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: void checkServiceConfigs()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r26 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : virtualinvoke r14.<org.apache.ambari.server.checks.DatabaseConsistencyChecker: void stopPersistenceService()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : staticinvoke <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: void closeConnection()>()
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : virtualinvoke r14.<org.apache.ambari.server.checks.DatabaseConsistencyChecker: void stopPersistenceService()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r26 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : staticinvoke <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: void closeConnection()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $z0 = staticinvoke <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: boolean ifErrorsFound()>()
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $z0 = staticinvoke <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: boolean ifErrorsFound()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : if $z0 != 0
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : if $z0 != 0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $z1 = staticinvoke <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: boolean ifWarningsFound()>()
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : if $z0 != 0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : r15 = "ambari-server-check-database.log"
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : r15 = "ambari-server-check-database.log" >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r16 = <org.apache.ambari.server.checks.DatabaseConsistencyChecker: org.slf4j.Logger LOG>
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r16 = <org.apache.ambari.server.checks.DatabaseConsistencyChecker: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $z2 = $r16 instanceof org.slf4j.impl.Log4jLoggerAdapter
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $z2 = $r16 instanceof org.slf4j.impl.Log4jLoggerAdapter >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : if $z2 == 0
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : if $z2 == 0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : r3 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.Class)>(class "org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper")
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : if $z2 == 0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : r18 = virtualinvoke r15.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("//", "/")
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : r18 = virtualinvoke r15.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("//", "/") >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $z5 = staticinvoke <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: boolean ifErrorsFound()>()
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $z5 = staticinvoke <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: boolean ifErrorsFound()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : if $z5 == 0
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : if $z5 == 0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r19 = <java.lang.System: java.io.PrintStream out>
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : if $z5 == 0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r22 = <java.lang.System: java.io.PrintStream out>
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r22 = <java.lang.System: java.io.PrintStream out> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r23 = newarray (java.lang.Object)[1]
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r23 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r23[0] = r18
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r23[0] = r18 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r24 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("DB configs consistency check found warnings. See \"%s\" for more details.", $r23)
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r24 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("DB configs consistency check found warnings. See \"%s\" for more details.", $r23) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : virtualinvoke $r22.<java.io.PrintStream: void print(java.lang.String)>($r24)
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : virtualinvoke $r22.<java.io.PrintStream: void print(java.lang.String)>($r24) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : goto [?= return]
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : goto [?= return] >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : return
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r19 = <java.lang.System: java.io.PrintStream out> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r20 = newarray (java.lang.Object)[1]
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r20 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r20[0] = r18
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r20[0] = r18 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r21 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("DB configs consistency check failed. Run \"ambari-server start --skip-database-check\" to skip. You may try --auto-fix-database flag to attempt to fix issues automatically. If you use this \"--skip-database-check\" option, do not make any changes to your cluster topology or perform a cluster upgrade until you correct the database consistency issues. See \"%s\" for more details on the consistency issues.", $r20)
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r21 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("DB configs consistency check failed. Run \"ambari-server start --skip-database-check\" to skip. You may try --auto-fix-database flag to attempt to fix issues automatically. If you use this \"--skip-database-check\" option, do not make any changes to your cluster topology or perform a cluster upgrade until you correct the database consistency issues. See \"%s\" for more details on the consistency issues.", $r20) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : virtualinvoke $r19.<java.io.PrintStream: void print(java.lang.String)>($r21)
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : virtualinvoke $r19.<java.io.PrintStream: void print(java.lang.String)>($r21) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : goto [?= (branch)]
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : goto [?= return]
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : r3 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.Class)>(class "org/apache/ambari/server/checks/DatabaseConsistencyCheckHelper") >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : r4 = virtualinvoke r3.<org.apache.log4j.Logger: java.util.Enumeration getAllAppenders()>()
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : r4 = virtualinvoke r3.<org.apache.log4j.Logger: java.util.Enumeration getAllAppenders()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $z3 = interfaceinvoke r4.<java.util.Enumeration: boolean hasMoreElements()>()
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $z3 = interfaceinvoke r4.<java.util.Enumeration: boolean hasMoreElements()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : if $z3 == 0
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : if $z3 == 0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : r5 = interfaceinvoke r4.<java.util.Enumeration: java.lang.Object nextElement()>()
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : if $z3 == 0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : r18 = virtualinvoke r15.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("//", "/")
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : r5 = interfaceinvoke r4.<java.util.Enumeration: java.lang.Object nextElement()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $z4 = r5 instanceof org.apache.log4j.FileAppender
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $z4 = r5 instanceof org.apache.log4j.FileAppender >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : if $z4 == 0
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : if $z4 == 0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r17 = (org.apache.log4j.FileAppender) r5
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : if $z4 == 0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : goto [?= $z3 = interfaceinvoke r4.<java.util.Enumeration: boolean hasMoreElements()>()]
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : goto [?= $z3 = interfaceinvoke r4.<java.util.Enumeration: boolean hasMoreElements()>()] >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $z3 = interfaceinvoke r4.<java.util.Enumeration: boolean hasMoreElements()>()
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r17 = (org.apache.log4j.FileAppender) r5 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : r15 = virtualinvoke $r17.<org.apache.log4j.FileAppender: java.lang.String getFile()>()
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : r15 = virtualinvoke $r17.<org.apache.log4j.FileAppender: java.lang.String getFile()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : goto [?= r18 = virtualinvoke r15.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("//", "/")]
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : goto [?= r18 = virtualinvoke r15.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("//", "/")] >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : r18 = virtualinvoke r15.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("//", "/")
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $z1 = staticinvoke <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: boolean ifWarningsFound()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : if $z1 == 0
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : if $z1 == 0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : r15 = "ambari-server-check-database.log"
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : if $z1 == 0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r25 = <java.lang.System: java.io.PrintStream out>
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : $r25 = <java.lang.System: java.io.PrintStream out> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : virtualinvoke $r25.<java.io.PrintStream: void print(java.lang.String)>("No errors and warnings were found.")
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : virtualinvoke $r25.<java.io.PrintStream: void print(java.lang.String)>("No errors and warnings were found.") >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : goto [?= return]
org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : goto [?= return] >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyChecker.main : return
