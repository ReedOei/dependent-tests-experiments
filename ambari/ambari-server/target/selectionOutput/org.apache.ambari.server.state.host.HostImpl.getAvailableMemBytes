org.apache.ambari.server.state.host.HostImpl.getAvailableMemBytes : r1 = virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: org.apache.ambari.server.orm.entities.HostStateEntity getHostStateEntity()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getAvailableMemBytes : if r1 == null
org.apache.ambari.server.state.host.HostImpl.getAvailableMemBytes : if r1 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getAvailableMemBytes : $r2 = virtualinvoke r1.<org.apache.ambari.server.orm.entities.HostStateEntity: java.lang.Long getAvailableMem()>()
org.apache.ambari.server.state.host.HostImpl.getAvailableMemBytes : if r1 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getAvailableMemBytes : $l0 = 0L
org.apache.ambari.server.state.host.HostImpl.getAvailableMemBytes : $l0 = 0L >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getAvailableMemBytes : return $l0
org.apache.ambari.server.state.host.HostImpl.getAvailableMemBytes : $r2 = virtualinvoke r1.<org.apache.ambari.server.orm.entities.HostStateEntity: java.lang.Long getAvailableMem()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getAvailableMemBytes : $l0 = virtualinvoke $r2.<java.lang.Long: long longValue()>()
org.apache.ambari.server.state.host.HostImpl.getAvailableMemBytes : $l0 = virtualinvoke $r2.<java.lang.Long: long longValue()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getAvailableMemBytes : goto [?= return $l0]
org.apache.ambari.server.state.host.HostImpl.getAvailableMemBytes : goto [?= return $l0] >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getAvailableMemBytes : return $l0
