org.apache.ambari.server.controller.internal.BaseProvider.checkRegExp : $r5 = r0.<org.apache.ambari.server.controller.internal.BaseProvider: java.util.Map patterns> >>>>>>>> org.apache.ambari.server.controller.internal.BaseProvider.checkRegExp : $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Collection values()>()
org.apache.ambari.server.controller.internal.BaseProvider.checkRegExp : $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.ambari.server.controller.internal.BaseProvider.checkRegExp : r2 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.ambari.server.controller.internal.BaseProvider.checkRegExp : r2 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.controller.internal.BaseProvider.checkRegExp : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.controller.internal.BaseProvider.checkRegExp : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.controller.internal.BaseProvider.checkRegExp : if $z0 == 0
org.apache.ambari.server.controller.internal.BaseProvider.checkRegExp : if $z0 == 0 >>>>>>>> org.apache.ambari.server.controller.internal.BaseProvider.checkRegExp : $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.controller.internal.BaseProvider.checkRegExp : if $z0 == 0 >>>>>>>> org.apache.ambari.server.controller.internal.BaseProvider.checkRegExp : return 0
org.apache.ambari.server.controller.internal.BaseProvider.checkRegExp : $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.controller.internal.BaseProvider.checkRegExp : r3 = (java.util.regex.Pattern) $r7
org.apache.ambari.server.controller.internal.BaseProvider.checkRegExp : r3 = (java.util.regex.Pattern) $r7 >>>>>>>> org.apache.ambari.server.controller.internal.BaseProvider.checkRegExp : r4 = virtualinvoke r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1)
org.apache.ambari.server.controller.internal.BaseProvider.checkRegExp : r4 = virtualinvoke r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1) >>>>>>>> org.apache.ambari.server.controller.internal.BaseProvider.checkRegExp : $z1 = virtualinvoke r4.<java.util.regex.Matcher: boolean matches()>()
org.apache.ambari.server.controller.internal.BaseProvider.checkRegExp : $z1 = virtualinvoke r4.<java.util.regex.Matcher: boolean matches()>() >>>>>>>> org.apache.ambari.server.controller.internal.BaseProvider.checkRegExp : if $z1 == 0
org.apache.ambari.server.controller.internal.BaseProvider.checkRegExp : if $z1 == 0 >>>>>>>> org.apache.ambari.server.controller.internal.BaseProvider.checkRegExp : return 1
org.apache.ambari.server.controller.internal.BaseProvider.checkRegExp : if $z1 == 0 >>>>>>>> org.apache.ambari.server.controller.internal.BaseProvider.checkRegExp : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.controller.internal.BaseProvider.checkRegExp : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.controller.internal.BaseProvider.checkRegExp : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
