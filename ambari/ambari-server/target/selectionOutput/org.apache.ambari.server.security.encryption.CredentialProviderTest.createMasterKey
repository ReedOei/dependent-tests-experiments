org.apache.ambari.server.security.encryption.CredentialProviderTest.createMasterKey : $r3 = r0.<org.apache.ambari.server.security.encryption.CredentialProviderTest: org.junit.rules.TemporaryFolder tmpFolder> >>>>>>>> org.apache.ambari.server.security.encryption.CredentialProviderTest.createMasterKey : r1 = virtualinvoke $r3.<org.junit.rules.TemporaryFolder: java.io.File newFile(java.lang.String)>("master")
org.apache.ambari.server.security.encryption.CredentialProviderTest.createMasterKey : r1 = virtualinvoke $r3.<org.junit.rules.TemporaryFolder: java.io.File newFile(java.lang.String)>("master") >>>>>>>> org.apache.ambari.server.security.encryption.CredentialProviderTest.createMasterKey : $z0 = staticinvoke <org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: boolean initializeMasterKeyFile(java.io.File,java.lang.String)>(r1, "blahblah!")
org.apache.ambari.server.security.encryption.CredentialProviderTest.createMasterKey : $z0 = staticinvoke <org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: boolean initializeMasterKeyFile(java.io.File,java.lang.String)>(r1, "blahblah!") >>>>>>>> org.apache.ambari.server.security.encryption.CredentialProviderTest.createMasterKey : staticinvoke <junit.framework.Assert: void assertTrue(boolean)>($z0)
org.apache.ambari.server.security.encryption.CredentialProviderTest.createMasterKey : staticinvoke <junit.framework.Assert: void assertTrue(boolean)>($z0) >>>>>>>> org.apache.ambari.server.security.encryption.CredentialProviderTest.createMasterKey : $r4 = new org.apache.ambari.server.security.encryption.MasterKeyServiceImpl
org.apache.ambari.server.security.encryption.CredentialProviderTest.createMasterKey : $r4 = new org.apache.ambari.server.security.encryption.MasterKeyServiceImpl >>>>>>>> org.apache.ambari.server.security.encryption.CredentialProviderTest.createMasterKey : specialinvoke $r4.<org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: void <init>(java.io.File)>(r1)
org.apache.ambari.server.security.encryption.CredentialProviderTest.createMasterKey : specialinvoke $r4.<org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: void <init>(java.io.File)>(r1) >>>>>>>> org.apache.ambari.server.security.encryption.CredentialProviderTest.createMasterKey : r2 = $r4
org.apache.ambari.server.security.encryption.CredentialProviderTest.createMasterKey : r2 = $r4 >>>>>>>> org.apache.ambari.server.security.encryption.CredentialProviderTest.createMasterKey : $z1 = interfaceinvoke r2.<org.apache.ambari.server.security.encryption.MasterKeyService: boolean isMasterKeyInitialized()>()
org.apache.ambari.server.security.encryption.CredentialProviderTest.createMasterKey : $z1 = interfaceinvoke r2.<org.apache.ambari.server.security.encryption.MasterKeyService: boolean isMasterKeyInitialized()>() >>>>>>>> org.apache.ambari.server.security.encryption.CredentialProviderTest.createMasterKey : if $z1 != 0
org.apache.ambari.server.security.encryption.CredentialProviderTest.createMasterKey : if $z1 != 0 >>>>>>>> org.apache.ambari.server.security.encryption.CredentialProviderTest.createMasterKey : $r5 = new java.lang.ExceptionInInitializerError
org.apache.ambari.server.security.encryption.CredentialProviderTest.createMasterKey : if $z1 != 0 >>>>>>>> org.apache.ambari.server.security.encryption.CredentialProviderTest.createMasterKey : return
org.apache.ambari.server.security.encryption.CredentialProviderTest.createMasterKey : $r5 = new java.lang.ExceptionInInitializerError >>>>>>>> org.apache.ambari.server.security.encryption.CredentialProviderTest.createMasterKey : specialinvoke $r5.<java.lang.ExceptionInInitializerError: void <init>(java.lang.String)>("Cannot create master key.")
org.apache.ambari.server.security.encryption.CredentialProviderTest.createMasterKey : specialinvoke $r5.<java.lang.ExceptionInInitializerError: void <init>(java.lang.String)>("Cannot create master key.") >>>>>>>> org.apache.ambari.server.security.encryption.CredentialProviderTest.createMasterKey : throw $r5
