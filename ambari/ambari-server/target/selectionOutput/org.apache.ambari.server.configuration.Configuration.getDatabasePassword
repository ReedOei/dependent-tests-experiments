org.apache.ambari.server.configuration.Configuration.getDatabasePassword : $r4 = r0.<org.apache.ambari.server.configuration.Configuration: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getDatabasePassword : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SERVER_JDBC_USER_PASSWD>
org.apache.ambari.server.configuration.Configuration.getDatabasePassword : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SERVER_JDBC_USER_PASSWD> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getDatabasePassword : $r5 = virtualinvoke $r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.configuration.Configuration.getDatabasePassword : $r5 = virtualinvoke $r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.getDatabasePassword : r2 = virtualinvoke $r4.<java.util.Properties: java.lang.String getProperty(java.lang.String)>($r5)
org.apache.ambari.server.configuration.Configuration.getDatabasePassword : r2 = virtualinvoke $r4.<java.util.Properties: java.lang.String getProperty(java.lang.String)>($r5) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getDatabasePassword : r3 = null
org.apache.ambari.server.configuration.Configuration.getDatabasePassword : r3 = null >>>>>>>> org.apache.ambari.server.configuration.Configuration.getDatabasePassword : z0 = 0
org.apache.ambari.server.configuration.Configuration.getDatabasePassword : z0 = 0 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getDatabasePassword : $z1 = staticinvoke <org.apache.ambari.server.security.encryption.CredentialProvider: boolean isAliasString(java.lang.String)>(r2)
org.apache.ambari.server.configuration.Configuration.getDatabasePassword : $z1 = staticinvoke <org.apache.ambari.server.security.encryption.CredentialProvider: boolean isAliasString(java.lang.String)>(r2) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getDatabasePassword : if $z1 == 0
org.apache.ambari.server.configuration.Configuration.getDatabasePassword : if $z1 == 0 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getDatabasePassword : r3 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String readPasswordFromStore(java.lang.String)>(r2)
org.apache.ambari.server.configuration.Configuration.getDatabasePassword : if $z1 == 0 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getDatabasePassword : if r3 == null
org.apache.ambari.server.configuration.Configuration.getDatabasePassword : if r3 == null >>>>>>>> org.apache.ambari.server.configuration.Configuration.getDatabasePassword : return r3
org.apache.ambari.server.configuration.Configuration.getDatabasePassword : if r3 == null >>>>>>>> org.apache.ambari.server.configuration.Configuration.getDatabasePassword : if r3 != null
org.apache.ambari.server.configuration.Configuration.getDatabasePassword : if r3 != null >>>>>>>> org.apache.ambari.server.configuration.Configuration.getDatabasePassword : if z0 == 0
org.apache.ambari.server.configuration.Configuration.getDatabasePassword : if r3 != null >>>>>>>> org.apache.ambari.server.configuration.Configuration.getDatabasePassword : $r8 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SERVER_JDBC_USER_PASSWD>
org.apache.ambari.server.configuration.Configuration.getDatabasePassword : $r8 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SERVER_JDBC_USER_PASSWD> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getDatabasePassword : $r9 = virtualinvoke $r8.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object getDefaultValue()>()
org.apache.ambari.server.configuration.Configuration.getDatabasePassword : $r9 = virtualinvoke $r8.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object getDefaultValue()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.getDatabasePassword : $r10 = (java.lang.String) $r9
org.apache.ambari.server.configuration.Configuration.getDatabasePassword : $r10 = (java.lang.String) $r9 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getDatabasePassword : $r11 = specialinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String readPasswordFromFile(java.lang.String,java.lang.String)>(r2, $r10)
org.apache.ambari.server.configuration.Configuration.getDatabasePassword : $r11 = specialinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String readPasswordFromFile(java.lang.String,java.lang.String)>(r2, $r10) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getDatabasePassword : return $r11
org.apache.ambari.server.configuration.Configuration.getDatabasePassword : if z0 == 0 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getDatabasePassword : $r6 = <org.apache.ambari.server.configuration.Configuration: org.slf4j.Logger LOG>
org.apache.ambari.server.configuration.Configuration.getDatabasePassword : if z0 == 0 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getDatabasePassword : $r8 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SERVER_JDBC_USER_PASSWD>
org.apache.ambari.server.configuration.Configuration.getDatabasePassword : $r6 = <org.apache.ambari.server.configuration.Configuration: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getDatabasePassword : interfaceinvoke $r6.<org.slf4j.Logger: void error(java.lang.String)>("Can\'t read db password from keystore. Please, check master key was set correctly.")
org.apache.ambari.server.configuration.Configuration.getDatabasePassword : interfaceinvoke $r6.<org.slf4j.Logger: void error(java.lang.String)>("Can\'t read db password from keystore. Please, check master key was set correctly.") >>>>>>>> org.apache.ambari.server.configuration.Configuration.getDatabasePassword : $r7 = new java.lang.RuntimeException
org.apache.ambari.server.configuration.Configuration.getDatabasePassword : $r7 = new java.lang.RuntimeException >>>>>>>> org.apache.ambari.server.configuration.Configuration.getDatabasePassword : specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>("Can\'t read db password from keystore. Please, check master key was set correctly.")
org.apache.ambari.server.configuration.Configuration.getDatabasePassword : specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>("Can\'t read db password from keystore. Please, check master key was set correctly.") >>>>>>>> org.apache.ambari.server.configuration.Configuration.getDatabasePassword : throw $r7
org.apache.ambari.server.configuration.Configuration.getDatabasePassword : r3 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String readPasswordFromStore(java.lang.String)>(r2) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getDatabasePassword : z0 = 1
org.apache.ambari.server.configuration.Configuration.getDatabasePassword : z0 = 1 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getDatabasePassword : if r3 == null
