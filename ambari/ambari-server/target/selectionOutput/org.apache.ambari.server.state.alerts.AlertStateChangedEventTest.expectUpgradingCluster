org.apache.ambari.server.state.alerts.AlertStateChangedEventTest.expectUpgradingCluster : $r3 = r0.<org.apache.ambari.server.state.alerts.AlertStateChangedEventTest: com.google.inject.Injector injector> >>>>>>>> org.apache.ambari.server.state.alerts.AlertStateChangedEventTest.expectUpgradingCluster : $r4 = interfaceinvoke $r3.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "org/apache/ambari/server/state/Clusters")
org.apache.ambari.server.state.alerts.AlertStateChangedEventTest.expectUpgradingCluster : $r4 = interfaceinvoke $r3.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "org/apache/ambari/server/state/Clusters") >>>>>>>> org.apache.ambari.server.state.alerts.AlertStateChangedEventTest.expectUpgradingCluster : r1 = (org.apache.ambari.server.state.Clusters) $r4
org.apache.ambari.server.state.alerts.AlertStateChangedEventTest.expectUpgradingCluster : r1 = (org.apache.ambari.server.state.Clusters) $r4 >>>>>>>> org.apache.ambari.server.state.alerts.AlertStateChangedEventTest.expectUpgradingCluster : $r5 = virtualinvoke r0.<org.apache.ambari.server.state.alerts.AlertStateChangedEventTest: java.lang.Object createMock(java.lang.Class)>(class "org/apache/ambari/server/state/Cluster")
org.apache.ambari.server.state.alerts.AlertStateChangedEventTest.expectUpgradingCluster : $r5 = virtualinvoke r0.<org.apache.ambari.server.state.alerts.AlertStateChangedEventTest: java.lang.Object createMock(java.lang.Class)>(class "org/apache/ambari/server/state/Cluster") >>>>>>>> org.apache.ambari.server.state.alerts.AlertStateChangedEventTest.expectUpgradingCluster : r2 = (org.apache.ambari.server.state.Cluster) $r5
org.apache.ambari.server.state.alerts.AlertStateChangedEventTest.expectUpgradingCluster : r2 = (org.apache.ambari.server.state.Cluster) $r5 >>>>>>>> org.apache.ambari.server.state.alerts.AlertStateChangedEventTest.expectUpgradingCluster : $r6 = newarray (java.lang.Object)[1]
org.apache.ambari.server.state.alerts.AlertStateChangedEventTest.expectUpgradingCluster : $r6 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.ambari.server.state.alerts.AlertStateChangedEventTest.expectUpgradingCluster : $r6[0] = r1
org.apache.ambari.server.state.alerts.AlertStateChangedEventTest.expectUpgradingCluster : $r6[0] = r1 >>>>>>>> org.apache.ambari.server.state.alerts.AlertStateChangedEventTest.expectUpgradingCluster : staticinvoke <org.easymock.EasyMock: void reset(java.lang.Object[])>($r6)
org.apache.ambari.server.state.alerts.AlertStateChangedEventTest.expectUpgradingCluster : staticinvoke <org.easymock.EasyMock: void reset(java.lang.Object[])>($r6) >>>>>>>> org.apache.ambari.server.state.alerts.AlertStateChangedEventTest.expectUpgradingCluster : $l0 = staticinvoke <org.easymock.EasyMock: long anyLong()>()
org.apache.ambari.server.state.alerts.AlertStateChangedEventTest.expectUpgradingCluster : $l0 = staticinvoke <org.easymock.EasyMock: long anyLong()>() >>>>>>>> org.apache.ambari.server.state.alerts.AlertStateChangedEventTest.expectUpgradingCluster : $r7 = interfaceinvoke r1.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Cluster getClusterById(long)>($l0)
org.apache.ambari.server.state.alerts.AlertStateChangedEventTest.expectUpgradingCluster : $r7 = interfaceinvoke r1.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Cluster getClusterById(long)>($l0) >>>>>>>> org.apache.ambari.server.state.alerts.AlertStateChangedEventTest.expectUpgradingCluster : $r8 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r7)
org.apache.ambari.server.state.alerts.AlertStateChangedEventTest.expectUpgradingCluster : $r8 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r7) >>>>>>>> org.apache.ambari.server.state.alerts.AlertStateChangedEventTest.expectUpgradingCluster : $r9 = interfaceinvoke $r8.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r2)
org.apache.ambari.server.state.alerts.AlertStateChangedEventTest.expectUpgradingCluster : $r9 = interfaceinvoke $r8.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r2) >>>>>>>> org.apache.ambari.server.state.alerts.AlertStateChangedEventTest.expectUpgradingCluster : interfaceinvoke $r9.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters atLeastOnce()>()
org.apache.ambari.server.state.alerts.AlertStateChangedEventTest.expectUpgradingCluster : interfaceinvoke $r9.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters atLeastOnce()>() >>>>>>>> org.apache.ambari.server.state.alerts.AlertStateChangedEventTest.expectUpgradingCluster : $r11 = interfaceinvoke r2.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.orm.entities.UpgradeEntity getUpgradeEntity()>()
org.apache.ambari.server.state.alerts.AlertStateChangedEventTest.expectUpgradingCluster : $r11 = interfaceinvoke r2.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.orm.entities.UpgradeEntity getUpgradeEntity()>() >>>>>>>> org.apache.ambari.server.state.alerts.AlertStateChangedEventTest.expectUpgradingCluster : $r12 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r11)
org.apache.ambari.server.state.alerts.AlertStateChangedEventTest.expectUpgradingCluster : $r12 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r11) >>>>>>>> org.apache.ambari.server.state.alerts.AlertStateChangedEventTest.expectUpgradingCluster : $r13 = new org.apache.ambari.server.orm.entities.UpgradeEntity
org.apache.ambari.server.state.alerts.AlertStateChangedEventTest.expectUpgradingCluster : $r13 = new org.apache.ambari.server.orm.entities.UpgradeEntity >>>>>>>> org.apache.ambari.server.state.alerts.AlertStateChangedEventTest.expectUpgradingCluster : specialinvoke $r13.<org.apache.ambari.server.orm.entities.UpgradeEntity: void <init>()>()
org.apache.ambari.server.state.alerts.AlertStateChangedEventTest.expectUpgradingCluster : specialinvoke $r13.<org.apache.ambari.server.orm.entities.UpgradeEntity: void <init>()>() >>>>>>>> org.apache.ambari.server.state.alerts.AlertStateChangedEventTest.expectUpgradingCluster : $r14 = interfaceinvoke $r12.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r13)
org.apache.ambari.server.state.alerts.AlertStateChangedEventTest.expectUpgradingCluster : $r14 = interfaceinvoke $r12.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r13) >>>>>>>> org.apache.ambari.server.state.alerts.AlertStateChangedEventTest.expectUpgradingCluster : interfaceinvoke $r14.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.state.alerts.AlertStateChangedEventTest.expectUpgradingCluster : interfaceinvoke $r14.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.state.alerts.AlertStateChangedEventTest.expectUpgradingCluster : $z0 = interfaceinvoke r2.<org.apache.ambari.server.state.Cluster: boolean isUpgradeSuspended()>()
org.apache.ambari.server.state.alerts.AlertStateChangedEventTest.expectUpgradingCluster : $z0 = interfaceinvoke r2.<org.apache.ambari.server.state.Cluster: boolean isUpgradeSuspended()>() >>>>>>>> org.apache.ambari.server.state.alerts.AlertStateChangedEventTest.expectUpgradingCluster : $r16 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0)
org.apache.ambari.server.state.alerts.AlertStateChangedEventTest.expectUpgradingCluster : $r16 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) >>>>>>>> org.apache.ambari.server.state.alerts.AlertStateChangedEventTest.expectUpgradingCluster : $r17 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r16)
org.apache.ambari.server.state.alerts.AlertStateChangedEventTest.expectUpgradingCluster : $r17 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r16) >>>>>>>> org.apache.ambari.server.state.alerts.AlertStateChangedEventTest.expectUpgradingCluster : $r18 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0)
org.apache.ambari.server.state.alerts.AlertStateChangedEventTest.expectUpgradingCluster : $r18 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0) >>>>>>>> org.apache.ambari.server.state.alerts.AlertStateChangedEventTest.expectUpgradingCluster : $r19 = interfaceinvoke $r17.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r18)
org.apache.ambari.server.state.alerts.AlertStateChangedEventTest.expectUpgradingCluster : $r19 = interfaceinvoke $r17.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r18) >>>>>>>> org.apache.ambari.server.state.alerts.AlertStateChangedEventTest.expectUpgradingCluster : interfaceinvoke $r19.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.state.alerts.AlertStateChangedEventTest.expectUpgradingCluster : interfaceinvoke $r19.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.state.alerts.AlertStateChangedEventTest.expectUpgradingCluster : return
