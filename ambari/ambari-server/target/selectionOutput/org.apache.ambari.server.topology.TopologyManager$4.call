org.apache.ambari.server.topology.TopologyManager$4.call : $r1 = r0.<org.apache.ambari.server.topology.TopologyManager$4: org.apache.ambari.server.topology.TopologyManager this$0> >>>>>>>> org.apache.ambari.server.topology.TopologyManager$4.call : $r2 = staticinvoke <org.apache.ambari.server.topology.TopologyManager: org.apache.ambari.server.topology.PersistedState access$000(org.apache.ambari.server.topology.TopologyManager)>($r1)
org.apache.ambari.server.topology.TopologyManager$4.call : $r2 = staticinvoke <org.apache.ambari.server.topology.TopologyManager: org.apache.ambari.server.topology.PersistedState access$000(org.apache.ambari.server.topology.TopologyManager)>($r1) >>>>>>>> org.apache.ambari.server.topology.TopologyManager$4.call : $r3 = r0.<org.apache.ambari.server.topology.TopologyManager$4: org.apache.ambari.server.topology.HostOfferResponse val$response>
org.apache.ambari.server.topology.TopologyManager$4.call : $r3 = r0.<org.apache.ambari.server.topology.TopologyManager$4: org.apache.ambari.server.topology.HostOfferResponse val$response> >>>>>>>> org.apache.ambari.server.topology.TopologyManager$4.call : $l0 = virtualinvoke $r3.<org.apache.ambari.server.topology.HostOfferResponse: long getHostRequestId()>()
org.apache.ambari.server.topology.TopologyManager$4.call : $l0 = virtualinvoke $r3.<org.apache.ambari.server.topology.HostOfferResponse: long getHostRequestId()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager$4.call : $r4 = r0.<org.apache.ambari.server.topology.TopologyManager$4: java.lang.String val$hostName>
org.apache.ambari.server.topology.TopologyManager$4.call : $r4 = r0.<org.apache.ambari.server.topology.TopologyManager$4: java.lang.String val$hostName> >>>>>>>> org.apache.ambari.server.topology.TopologyManager$4.call : interfaceinvoke $r2.<org.apache.ambari.server.topology.PersistedState: void registerHostName(long,java.lang.String)>($l0, $r4)
org.apache.ambari.server.topology.TopologyManager$4.call : interfaceinvoke $r2.<org.apache.ambari.server.topology.PersistedState: void registerHostName(long,java.lang.String)>($l0, $r4) >>>>>>>> org.apache.ambari.server.topology.TopologyManager$4.call : $r5 = r0.<org.apache.ambari.server.topology.TopologyManager$4: org.apache.ambari.server.topology.TopologyManager this$0>
org.apache.ambari.server.topology.TopologyManager$4.call : $r5 = r0.<org.apache.ambari.server.topology.TopologyManager$4: org.apache.ambari.server.topology.TopologyManager this$0> >>>>>>>> org.apache.ambari.server.topology.TopologyManager$4.call : $r6 = staticinvoke <org.apache.ambari.server.topology.TopologyManager: org.apache.ambari.server.topology.PersistedState access$000(org.apache.ambari.server.topology.TopologyManager)>($r5)
org.apache.ambari.server.topology.TopologyManager$4.call : $r6 = staticinvoke <org.apache.ambari.server.topology.TopologyManager: org.apache.ambari.server.topology.PersistedState access$000(org.apache.ambari.server.topology.TopologyManager)>($r5) >>>>>>>> org.apache.ambari.server.topology.TopologyManager$4.call : $r7 = r0.<org.apache.ambari.server.topology.TopologyManager$4: org.apache.ambari.server.state.host.HostImpl val$host>
org.apache.ambari.server.topology.TopologyManager$4.call : $r7 = r0.<org.apache.ambari.server.topology.TopologyManager$4: org.apache.ambari.server.state.host.HostImpl val$host> >>>>>>>> org.apache.ambari.server.topology.TopologyManager$4.call : interfaceinvoke $r6.<org.apache.ambari.server.topology.PersistedState: void registerInTopologyHostInfo(org.apache.ambari.server.state.Host)>($r7)
org.apache.ambari.server.topology.TopologyManager$4.call : interfaceinvoke $r6.<org.apache.ambari.server.topology.PersistedState: void registerInTopologyHostInfo(org.apache.ambari.server.state.Host)>($r7) >>>>>>>> org.apache.ambari.server.topology.TopologyManager$4.call : return null
