org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.getTopologyRequiredHostGroups : r2 = $r4 >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.getTopologyRequiredHostGroups : $r5 = staticinvoke <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger access$300()>()
org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.getTopologyRequiredHostGroups : $r5 = staticinvoke <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger access$300()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.getTopologyRequiredHostGroups : interfaceinvoke $r5.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("TopologyManager.ConfigureClusterTask: An exception occurred while attempting to determine required host groups for config update ", r2)
org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.getTopologyRequiredHostGroups : interfaceinvoke $r5.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("TopologyManager.ConfigureClusterTask: An exception occurred while attempting to determine required host groups for config update ", r2) >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.getTopologyRequiredHostGroups : r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>()
org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.getTopologyRequiredHostGroups : r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.getTopologyRequiredHostGroups : return r1
org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.getTopologyRequiredHostGroups : $r3 = r0.<org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask: org.apache.ambari.server.topology.ClusterConfigurationRequest configRequest> >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.getTopologyRequiredHostGroups : r1 = virtualinvoke $r3.<org.apache.ambari.server.topology.ClusterConfigurationRequest: java.util.Collection getRequiredHostGroups()>()
org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.getTopologyRequiredHostGroups : $r3 = r0.<org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask: org.apache.ambari.server.topology.ClusterConfigurationRequest configRequest> >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.getTopologyRequiredHostGroups : $r4 := @caughtexception
org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.getTopologyRequiredHostGroups : r1 = virtualinvoke $r3.<org.apache.ambari.server.topology.ClusterConfigurationRequest: java.util.Collection getRequiredHostGroups()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.getTopologyRequiredHostGroups : goto [?= return r1]
org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.getTopologyRequiredHostGroups : r1 = virtualinvoke $r3.<org.apache.ambari.server.topology.ClusterConfigurationRequest: java.util.Collection getRequiredHostGroups()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.getTopologyRequiredHostGroups : $r4 := @caughtexception
org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.getTopologyRequiredHostGroups : goto [?= return r1] >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.getTopologyRequiredHostGroups : return r1
