org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r1 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : specialinvoke $r1.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : specialinvoke $r1.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r2 = $r1
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r2 = $r1 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r3 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r3 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z0 == 0
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z0 == 0 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r25 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z0 == 0 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r28 = new java.util.ArrayList
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r28 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : specialinvoke $r28.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : specialinvoke $r28.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r29 = $r28
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r29 = $r28 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r30 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r30 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $z4 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $z4 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z4 == 0
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z4 == 0 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r31 = interfaceinvoke r30.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z4 == 0 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r115 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap()>()
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r115 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r116 = interfaceinvoke r29.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r116 = interfaceinvoke r29.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $z25 = interfaceinvoke r116.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $z25 = interfaceinvoke r116.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z25 == 0
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z25 == 0 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r117 = interfaceinvoke r116.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z25 == 0 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : return r115
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r117 = interfaceinvoke r116.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r118 = (org.apache.ambari.server.orm.db.Table) $r117
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r118 = (org.apache.ambari.server.orm.db.Table) $r117 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r119 = r118.<org.apache.ambari.server.orm.db.Table: java.lang.String name>
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r119 = r118.<org.apache.ambari.server.orm.db.Table: java.lang.String name> >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $z26 = interfaceinvoke r115.<java.util.Map: boolean containsKey(java.lang.Object)>($r119)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $z26 = interfaceinvoke r115.<java.util.Map: boolean containsKey(java.lang.Object)>($r119) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z26 == 0
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z26 == 0 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r120 = new java.lang.IllegalStateException
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z26 == 0 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r126 = r118.<org.apache.ambari.server.orm.db.Table: java.lang.String name>
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r126 = r118.<org.apache.ambari.server.orm.db.Table: java.lang.String name> >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : interfaceinvoke r115.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r126, r118)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : interfaceinvoke r115.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r126, r118) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : goto [?= $z25 = interfaceinvoke r116.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : goto [?= $z25 = interfaceinvoke r116.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $z25 = interfaceinvoke r116.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r120 = new java.lang.IllegalStateException >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r121 = new java.lang.StringBuilder
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r121 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : specialinvoke $r121.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : specialinvoke $r121.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r122 = virtualinvoke $r121.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Duplicate table definition: ")
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r122 = virtualinvoke $r121.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Duplicate table definition: ") >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r123 = r118.<org.apache.ambari.server.orm.db.Table: java.lang.String name>
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r123 = r118.<org.apache.ambari.server.orm.db.Table: java.lang.String name> >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r124 = virtualinvoke $r122.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r123)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r124 = virtualinvoke $r122.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r123) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r125 = virtualinvoke $r124.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r125 = virtualinvoke $r124.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : specialinvoke $r120.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r125)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : specialinvoke $r120.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r125) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : throw $r120
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r31 = interfaceinvoke r30.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r32 = (java.lang.String) $r31
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r32 = (java.lang.String) $r31 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r33 = <org.apache.ambari.server.orm.db.DDLTestUtils: java.util.regex.Pattern TableName>
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r33 = <org.apache.ambari.server.orm.db.DDLTestUtils: java.util.regex.Pattern TableName> >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r34 = staticinvoke <org.apache.ambari.server.orm.db.DDLTestUtils: com.google.common.base.Optional firstMatchingGroup(java.util.regex.Pattern,java.lang.String)>($r33, r32)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r34 = staticinvoke <org.apache.ambari.server.orm.db.DDLTestUtils: com.google.common.base.Optional firstMatchingGroup(java.util.regex.Pattern,java.lang.String)>($r33, r32) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r35 = virtualinvoke $r34.<com.google.common.base.Optional: java.lang.Object get()>()
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r35 = virtualinvoke $r34.<com.google.common.base.Optional: java.lang.Object get()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r36 = (java.lang.String) $r35
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r36 = (java.lang.String) $r35 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r37 = staticinvoke <org.apache.ambari.server.orm.db.DDLTestUtils: java.lang.String stripPrefixQuotationAndBrackets(java.lang.String)>($r36)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r37 = staticinvoke <org.apache.ambari.server.orm.db.DDLTestUtils: java.lang.String stripPrefixQuotationAndBrackets(java.lang.String)>($r36) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r38 = new java.util.ArrayList
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r38 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : specialinvoke $r38.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : specialinvoke $r38.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r39 = $r38
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r39 = $r38 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r8 = staticinvoke <com.google.common.base.Optional: com.google.common.base.Optional absent()>()
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r8 = staticinvoke <com.google.common.base.Optional: com.google.common.base.Optional absent()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r40 = new java.util.ArrayList
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r40 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : specialinvoke $r40.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : specialinvoke $r40.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r9 = $r40
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r9 = $r40 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r41 = new java.util.ArrayList
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r41 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : specialinvoke $r41.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : specialinvoke $r41.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r10 = $r41
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r10 = $r41 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $i3 = virtualinvoke r32.<java.lang.String: int indexOf(int)>(40)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $i3 = virtualinvoke r32.<java.lang.String: int indexOf(int)>(40) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $i4 = $i3 + 1
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $i4 = $i3 + 1 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $i5 = virtualinvoke r32.<java.lang.String: int lastIndexOf(int)>(41)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $i5 = virtualinvoke r32.<java.lang.String: int lastIndexOf(int)>(41) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r11 = virtualinvoke r32.<java.lang.String: java.lang.String substring(int,int)>($i4, $i5)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r11 = virtualinvoke r32.<java.lang.String: java.lang.String substring(int,int)>($i4, $i5) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r42 = staticinvoke <com.google.common.base.Splitter: com.google.common.base.Splitter on(char)>(44)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r42 = staticinvoke <com.google.common.base.Splitter: com.google.common.base.Splitter on(char)>(44) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r43 = virtualinvoke $r42.<com.google.common.base.Splitter: java.lang.Iterable split(java.lang.CharSequence)>(r11)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r43 = virtualinvoke $r42.<com.google.common.base.Splitter: java.lang.Iterable split(java.lang.CharSequence)>(r11) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r12 = interfaceinvoke $r43.<java.lang.Iterable: java.util.Iterator iterator()>()
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r12 = interfaceinvoke $r43.<java.lang.Iterable: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $z5 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $z5 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z5 == 0
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z5 == 0 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r44 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z5 == 0 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $z23 = interfaceinvoke r39.<java.util.List: boolean isEmpty()>()
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $z23 = interfaceinvoke r39.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z23 == 0
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z23 == 0 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r102 = new java.lang.IllegalStateException
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z23 == 0 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r107 = new java.lang.StringBuilder
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r107 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : specialinvoke $r107.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : specialinvoke $r107.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r108 = virtualinvoke $r107.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("columns of table ")
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r108 = virtualinvoke $r107.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("columns of table ") >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r109 = virtualinvoke $r108.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r37)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r109 = virtualinvoke $r108.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r37) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r110 = virtualinvoke $r109.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r110 = virtualinvoke $r109.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : staticinvoke <org.apache.ambari.server.orm.db.DDLTestUtils: void checkDupes(java.lang.String,java.util.List)>($r110, r39)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : staticinvoke <org.apache.ambari.server.orm.db.DDLTestUtils: void checkDupes(java.lang.String,java.util.List)>($r110, r39) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r111 = new org.apache.ambari.server.orm.db.Table
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r111 = new org.apache.ambari.server.orm.db.Table >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r112 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet copyOf(java.util.Collection)>(r39)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r112 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet copyOf(java.util.Collection)>(r39) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r113 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet copyOf(java.util.Collection)>(r9)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r113 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet copyOf(java.util.Collection)>(r9) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r114 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet copyOf(java.util.Collection)>(r10)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r114 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet copyOf(java.util.Collection)>(r10) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : specialinvoke $r111.<org.apache.ambari.server.orm.db.Table: void <init>(java.lang.String,java.util.Set,com.google.common.base.Optional,java.util.Set,java.util.Set)>(r37, $r112, r8, $r113, $r114)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : specialinvoke $r111.<org.apache.ambari.server.orm.db.Table: void <init>(java.lang.String,java.util.Set,com.google.common.base.Optional,java.util.Set,java.util.Set)>(r37, $r112, r8, $r113, $r114) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : interfaceinvoke r29.<java.util.List: boolean add(java.lang.Object)>($r111)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : interfaceinvoke r29.<java.util.List: boolean add(java.lang.Object)>($r111) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : goto [?= $z4 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : goto [?= $z4 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $z4 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r102 = new java.lang.IllegalStateException >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r103 = new java.lang.StringBuilder
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r103 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : specialinvoke $r103.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : specialinvoke $r103.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r104 = virtualinvoke $r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No columns found in table ")
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r104 = virtualinvoke $r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No columns found in table ") >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r105 = virtualinvoke $r104.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r37)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r105 = virtualinvoke $r104.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r37) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r106 = virtualinvoke $r105.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r106 = virtualinvoke $r105.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : specialinvoke $r102.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r106)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : specialinvoke $r102.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r106) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : throw $r102
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r44 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r13 = (java.lang.String) $r44
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r13 = (java.lang.String) $r44 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r45 = virtualinvoke r13.<java.lang.String: java.lang.String trim()>()
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r45 = virtualinvoke r13.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : staticinvoke <org.apache.ambari.server.orm.db.DDLTestUtils: void assertNounnamedConstraint(java.lang.String,java.lang.String)>(r37, r45)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : staticinvoke <org.apache.ambari.server.orm.db.DDLTestUtils: void assertNounnamedConstraint(java.lang.String,java.lang.String)>(r37, r45) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r46 = <org.apache.ambari.server.orm.db.DDLTestUtils: java.util.regex.Pattern PK>
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r46 = <org.apache.ambari.server.orm.db.DDLTestUtils: java.util.regex.Pattern PK> >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r14 = virtualinvoke $r46.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r45)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r14 = virtualinvoke $r46.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r45) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r47 = <org.apache.ambari.server.orm.db.DDLTestUtils: java.util.regex.Pattern PKClustered>
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r47 = <org.apache.ambari.server.orm.db.DDLTestUtils: java.util.regex.Pattern PKClustered> >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r15 = virtualinvoke $r47.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r45)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r15 = virtualinvoke $r47.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r45) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r48 = <org.apache.ambari.server.orm.db.DDLTestUtils: java.util.regex.Pattern UnnamedPK>
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r48 = <org.apache.ambari.server.orm.db.DDLTestUtils: java.util.regex.Pattern UnnamedPK> >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r16 = virtualinvoke $r48.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r45)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r16 = virtualinvoke $r48.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r45) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r49 = <org.apache.ambari.server.orm.db.DDLTestUtils: java.util.regex.Pattern PKColumn>
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r49 = <org.apache.ambari.server.orm.db.DDLTestUtils: java.util.regex.Pattern PKColumn> >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r17 = virtualinvoke $r49.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r45)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r17 = virtualinvoke $r49.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r45) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r50 = <org.apache.ambari.server.orm.db.DDLTestUtils: java.util.regex.Pattern FK>
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r50 = <org.apache.ambari.server.orm.db.DDLTestUtils: java.util.regex.Pattern FK> >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r18 = virtualinvoke $r50.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r45)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r18 = virtualinvoke $r50.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r45) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r51 = <org.apache.ambari.server.orm.db.DDLTestUtils: java.util.regex.Pattern UQ>
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r51 = <org.apache.ambari.server.orm.db.DDLTestUtils: java.util.regex.Pattern UQ> >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r19 = virtualinvoke $r51.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r45)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r19 = virtualinvoke $r51.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r45) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r52 = <org.apache.ambari.server.orm.db.DDLTestUtils: java.util.regex.Pattern UnnamedFK>
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r52 = <org.apache.ambari.server.orm.db.DDLTestUtils: java.util.regex.Pattern UnnamedFK> >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r20 = virtualinvoke $r52.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r45)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r20 = virtualinvoke $r52.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r45) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r53 = <org.apache.ambari.server.orm.db.DDLTestUtils: java.util.regex.Pattern UnnamedUQ>
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r53 = <org.apache.ambari.server.orm.db.DDLTestUtils: java.util.regex.Pattern UnnamedUQ> >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r21 = virtualinvoke $r53.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r45)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r21 = virtualinvoke $r53.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r45) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r54 = <org.apache.ambari.server.orm.db.DDLTestUtils: java.util.regex.Pattern UQColumn>
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r54 = <org.apache.ambari.server.orm.db.DDLTestUtils: java.util.regex.Pattern UQColumn> >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r22 = virtualinvoke $r54.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r45)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r22 = virtualinvoke $r54.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r45) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r55 = <org.apache.ambari.server.orm.db.DDLTestUtils: java.util.regex.Pattern Col>
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r55 = <org.apache.ambari.server.orm.db.DDLTestUtils: java.util.regex.Pattern Col> >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r23 = virtualinvoke $r55.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r45)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r23 = virtualinvoke $r55.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r45) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $z6 = virtualinvoke r14.<java.util.regex.Matcher: boolean matches()>()
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $z6 = virtualinvoke r14.<java.util.regex.Matcher: boolean matches()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z6 == 0
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z6 == 0 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r56 = virtualinvoke r14.<java.util.regex.Matcher: java.lang.String group(int)>(1)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z6 == 0 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $z7 = virtualinvoke r14.<java.util.regex.Matcher: boolean matches()>()
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $z7 = virtualinvoke r14.<java.util.regex.Matcher: boolean matches()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z7 == 0
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z7 == 0 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r60 = virtualinvoke r14.<java.util.regex.Matcher: java.lang.String group(int)>(1)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z7 == 0 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $z8 = virtualinvoke r15.<java.util.regex.Matcher: boolean matches()>()
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $z8 = virtualinvoke r15.<java.util.regex.Matcher: boolean matches()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z8 == 0
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z8 == 0 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r65 = virtualinvoke r15.<java.util.regex.Matcher: java.lang.String group(int)>(1)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z8 == 0 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $z9 = virtualinvoke r16.<java.util.regex.Matcher: boolean matches()>()
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $z9 = virtualinvoke r16.<java.util.regex.Matcher: boolean matches()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z9 == 0
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z9 == 0 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r70 = virtualinvoke r16.<java.util.regex.Matcher: java.lang.String group(int)>(1)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z9 == 0 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $z10 = virtualinvoke r18.<java.util.regex.Matcher: boolean matches()>()
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $z10 = virtualinvoke r18.<java.util.regex.Matcher: boolean matches()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z10 == 0
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z10 == 0 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r73 = virtualinvoke r18.<java.util.regex.Matcher: java.lang.String group(int)>(1)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z10 == 0 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $z12 = virtualinvoke r20.<java.util.regex.Matcher: boolean matches()>()
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $z12 = virtualinvoke r20.<java.util.regex.Matcher: boolean matches()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z12 == 0
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z12 == 0 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r81 = virtualinvoke r20.<java.util.regex.Matcher: java.lang.String group(int)>(1)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z12 == 0 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $z14 = virtualinvoke r19.<java.util.regex.Matcher: boolean matches()>()
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $z14 = virtualinvoke r19.<java.util.regex.Matcher: boolean matches()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z14 == 0
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z14 == 0 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r88 = virtualinvoke r19.<java.util.regex.Matcher: java.lang.String group(int)>(1)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z14 == 0 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $z16 = virtualinvoke r21.<java.util.regex.Matcher: boolean matches()>()
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $z16 = virtualinvoke r21.<java.util.regex.Matcher: boolean matches()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z16 == 0
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z16 == 0 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r93 = virtualinvoke r21.<java.util.regex.Matcher: java.lang.String group(int)>(1)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z16 == 0 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $z18 = virtualinvoke r23.<java.util.regex.Matcher: boolean matches()>()
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $z18 = virtualinvoke r23.<java.util.regex.Matcher: boolean matches()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z18 == 0
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z18 == 0 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r96 = virtualinvoke r23.<java.util.regex.Matcher: java.lang.String group(int)>(1)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z18 == 0 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r101 = <org.apache.ambari.server.orm.db.DDLTestUtils: org.slf4j.Logger LOG>
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r101 = <org.apache.ambari.server.orm.db.DDLTestUtils: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : interfaceinvoke $r101.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>("Unexpected definition: {}, context: {}", r45, r32)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : interfaceinvoke $r101.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>("Unexpected definition: {}, context: {}", r45, r32) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : goto [?= $z5 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : goto [?= $z5 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $z5 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r96 = virtualinvoke r23.<java.util.regex.Matcher: java.lang.String group(int)>(1) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r24 = staticinvoke <org.apache.ambari.server.orm.db.DDLTestUtils: java.lang.String stripPrefixQuotationAndBrackets(java.lang.String)>($r96)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r24 = staticinvoke <org.apache.ambari.server.orm.db.DDLTestUtils: java.lang.String stripPrefixQuotationAndBrackets(java.lang.String)>($r96) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : interfaceinvoke r39.<java.util.List: boolean add(java.lang.Object)>(r24)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : interfaceinvoke r39.<java.util.List: boolean add(java.lang.Object)>(r24) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $z20 = virtualinvoke r17.<java.util.regex.Matcher: boolean matches()>()
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $z20 = virtualinvoke r17.<java.util.regex.Matcher: boolean matches()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z20 == 0
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z20 == 0 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r97 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(r24)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z20 == 0 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $z21 = virtualinvoke r22.<java.util.regex.Matcher: boolean matches()>()
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $z21 = virtualinvoke r22.<java.util.regex.Matcher: boolean matches()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z21 == 0
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z21 == 0 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r99 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(r24)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z21 == 0 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : goto [?= (branch)]
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : goto [?= $z5 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r99 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(r24) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r100 = staticinvoke <org.apache.ambari.server.orm.db.Constraint: org.apache.ambari.server.orm.db.SimpleConstraint uq(java.lang.String,java.util.Collection)>("<default>", $r99)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r100 = staticinvoke <org.apache.ambari.server.orm.db.Constraint: org.apache.ambari.server.orm.db.SimpleConstraint uq(java.lang.String,java.util.Collection)>("<default>", $r99) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : interfaceinvoke r10.<java.util.List: boolean add(java.lang.Object)>($r100)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : interfaceinvoke r10.<java.util.List: boolean add(java.lang.Object)>($r100) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : goto [?= (branch)]
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r97 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(r24) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r98 = staticinvoke <org.apache.ambari.server.orm.db.Constraint: org.apache.ambari.server.orm.db.SimpleConstraint pk(java.lang.String,java.util.Collection)>("<default>", $r97)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r98 = staticinvoke <org.apache.ambari.server.orm.db.Constraint: org.apache.ambari.server.orm.db.SimpleConstraint pk(java.lang.String,java.util.Collection)>("<default>", $r97) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r8 = staticinvoke <com.google.common.base.Optional: com.google.common.base.Optional of(java.lang.Object)>($r98)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r8 = staticinvoke <com.google.common.base.Optional: com.google.common.base.Optional of(java.lang.Object)>($r98) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : goto [?= (branch)]
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : goto [?= (branch)]
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r93 = virtualinvoke r21.<java.util.regex.Matcher: java.lang.String group(int)>(1) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r94 = staticinvoke <org.apache.ambari.server.orm.db.DDLTestUtils: java.util.Collection toColumns(java.lang.String)>($r93)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r94 = staticinvoke <org.apache.ambari.server.orm.db.DDLTestUtils: java.util.Collection toColumns(java.lang.String)>($r93) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r95 = staticinvoke <org.apache.ambari.server.orm.db.Constraint: org.apache.ambari.server.orm.db.SimpleConstraint uq(java.lang.String,java.util.Collection)>("<default>", $r94)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r95 = staticinvoke <org.apache.ambari.server.orm.db.Constraint: org.apache.ambari.server.orm.db.SimpleConstraint uq(java.lang.String,java.util.Collection)>("<default>", $r94) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : interfaceinvoke r10.<java.util.List: boolean add(java.lang.Object)>($r95)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : interfaceinvoke r10.<java.util.List: boolean add(java.lang.Object)>($r95) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : goto [?= (branch)]
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : goto [?= $z5 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r88 = virtualinvoke r19.<java.util.regex.Matcher: java.lang.String group(int)>(1) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r89 = staticinvoke <org.apache.ambari.server.orm.db.DDLTestUtils: java.lang.String stripPrefixQuotationAndBrackets(java.lang.String)>($r88)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r89 = staticinvoke <org.apache.ambari.server.orm.db.DDLTestUtils: java.lang.String stripPrefixQuotationAndBrackets(java.lang.String)>($r88) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r90 = virtualinvoke r19.<java.util.regex.Matcher: java.lang.String group(int)>(2)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r90 = virtualinvoke r19.<java.util.regex.Matcher: java.lang.String group(int)>(2) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r91 = staticinvoke <org.apache.ambari.server.orm.db.DDLTestUtils: java.util.Collection toColumns(java.lang.String)>($r90)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r91 = staticinvoke <org.apache.ambari.server.orm.db.DDLTestUtils: java.util.Collection toColumns(java.lang.String)>($r90) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r92 = staticinvoke <org.apache.ambari.server.orm.db.Constraint: org.apache.ambari.server.orm.db.SimpleConstraint uq(java.lang.String,java.util.Collection)>($r89, $r91)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r92 = staticinvoke <org.apache.ambari.server.orm.db.Constraint: org.apache.ambari.server.orm.db.SimpleConstraint uq(java.lang.String,java.util.Collection)>($r89, $r91) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : interfaceinvoke r10.<java.util.List: boolean add(java.lang.Object)>($r92)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : interfaceinvoke r10.<java.util.List: boolean add(java.lang.Object)>($r92) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : goto [?= (branch)]
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : goto [?= $z5 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r81 = virtualinvoke r20.<java.util.regex.Matcher: java.lang.String group(int)>(1) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r82 = staticinvoke <org.apache.ambari.server.orm.db.DDLTestUtils: java.util.Collection toColumns(java.lang.String)>($r81)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r82 = staticinvoke <org.apache.ambari.server.orm.db.DDLTestUtils: java.util.Collection toColumns(java.lang.String)>($r81) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r83 = virtualinvoke r20.<java.util.regex.Matcher: java.lang.String group(int)>(2)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r83 = virtualinvoke r20.<java.util.regex.Matcher: java.lang.String group(int)>(2) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r84 = staticinvoke <org.apache.ambari.server.orm.db.DDLTestUtils: java.lang.String stripPrefixQuotationAndBrackets(java.lang.String)>($r83)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r84 = staticinvoke <org.apache.ambari.server.orm.db.DDLTestUtils: java.lang.String stripPrefixQuotationAndBrackets(java.lang.String)>($r83) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r85 = virtualinvoke r20.<java.util.regex.Matcher: java.lang.String group(int)>(3)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r85 = virtualinvoke r20.<java.util.regex.Matcher: java.lang.String group(int)>(3) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r86 = staticinvoke <org.apache.ambari.server.orm.db.DDLTestUtils: java.util.Collection toColumns(java.lang.String)>($r85)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r86 = staticinvoke <org.apache.ambari.server.orm.db.DDLTestUtils: java.util.Collection toColumns(java.lang.String)>($r85) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r87 = staticinvoke <org.apache.ambari.server.orm.db.Constraint: org.apache.ambari.server.orm.db.FKConstraint fk(java.lang.String,java.util.Collection,java.lang.String,java.util.Collection)>("<default>", $r82, $r84, $r86)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r87 = staticinvoke <org.apache.ambari.server.orm.db.Constraint: org.apache.ambari.server.orm.db.FKConstraint fk(java.lang.String,java.util.Collection,java.lang.String,java.util.Collection)>("<default>", $r82, $r84, $r86) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : interfaceinvoke r9.<java.util.List: boolean add(java.lang.Object)>($r87)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : interfaceinvoke r9.<java.util.List: boolean add(java.lang.Object)>($r87) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : goto [?= (branch)]
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : goto [?= $z5 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r73 = virtualinvoke r18.<java.util.regex.Matcher: java.lang.String group(int)>(1) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r74 = virtualinvoke r18.<java.util.regex.Matcher: java.lang.String group(int)>(2)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r74 = virtualinvoke r18.<java.util.regex.Matcher: java.lang.String group(int)>(2) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r75 = staticinvoke <org.apache.ambari.server.orm.db.DDLTestUtils: java.util.Collection toColumns(java.lang.String)>($r74)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r75 = staticinvoke <org.apache.ambari.server.orm.db.DDLTestUtils: java.util.Collection toColumns(java.lang.String)>($r74) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r76 = virtualinvoke r18.<java.util.regex.Matcher: java.lang.String group(int)>(3)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r76 = virtualinvoke r18.<java.util.regex.Matcher: java.lang.String group(int)>(3) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r77 = staticinvoke <org.apache.ambari.server.orm.db.DDLTestUtils: java.lang.String stripPrefixQuotationAndBrackets(java.lang.String)>($r76)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r77 = staticinvoke <org.apache.ambari.server.orm.db.DDLTestUtils: java.lang.String stripPrefixQuotationAndBrackets(java.lang.String)>($r76) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r78 = virtualinvoke r18.<java.util.regex.Matcher: java.lang.String group(int)>(4)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r78 = virtualinvoke r18.<java.util.regex.Matcher: java.lang.String group(int)>(4) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r79 = staticinvoke <org.apache.ambari.server.orm.db.DDLTestUtils: java.util.Collection toColumns(java.lang.String)>($r78)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r79 = staticinvoke <org.apache.ambari.server.orm.db.DDLTestUtils: java.util.Collection toColumns(java.lang.String)>($r78) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r80 = staticinvoke <org.apache.ambari.server.orm.db.Constraint: org.apache.ambari.server.orm.db.FKConstraint fk(java.lang.String,java.util.Collection,java.lang.String,java.util.Collection)>($r73, $r75, $r77, $r79)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r80 = staticinvoke <org.apache.ambari.server.orm.db.Constraint: org.apache.ambari.server.orm.db.FKConstraint fk(java.lang.String,java.util.Collection,java.lang.String,java.util.Collection)>($r73, $r75, $r77, $r79) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : interfaceinvoke r9.<java.util.List: boolean add(java.lang.Object)>($r80)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : interfaceinvoke r9.<java.util.List: boolean add(java.lang.Object)>($r80) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : goto [?= (branch)]
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : goto [?= $z5 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r70 = virtualinvoke r16.<java.util.regex.Matcher: java.lang.String group(int)>(1) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r71 = staticinvoke <org.apache.ambari.server.orm.db.DDLTestUtils: java.util.Collection toColumns(java.lang.String)>($r70)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r71 = staticinvoke <org.apache.ambari.server.orm.db.DDLTestUtils: java.util.Collection toColumns(java.lang.String)>($r70) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r72 = staticinvoke <org.apache.ambari.server.orm.db.Constraint: org.apache.ambari.server.orm.db.SimpleConstraint pk(java.lang.String,java.util.Collection)>("<default>", $r71)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r72 = staticinvoke <org.apache.ambari.server.orm.db.Constraint: org.apache.ambari.server.orm.db.SimpleConstraint pk(java.lang.String,java.util.Collection)>("<default>", $r71) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r8 = staticinvoke <com.google.common.base.Optional: com.google.common.base.Optional of(java.lang.Object)>($r72)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r8 = staticinvoke <com.google.common.base.Optional: com.google.common.base.Optional of(java.lang.Object)>($r72) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : goto [?= (branch)]
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : goto [?= $z5 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r65 = virtualinvoke r15.<java.util.regex.Matcher: java.lang.String group(int)>(1) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r66 = staticinvoke <org.apache.ambari.server.orm.db.DDLTestUtils: java.lang.String stripPrefixQuotationAndBrackets(java.lang.String)>($r65)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r66 = staticinvoke <org.apache.ambari.server.orm.db.DDLTestUtils: java.lang.String stripPrefixQuotationAndBrackets(java.lang.String)>($r65) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r67 = virtualinvoke r15.<java.util.regex.Matcher: java.lang.String group(int)>(2)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r67 = virtualinvoke r15.<java.util.regex.Matcher: java.lang.String group(int)>(2) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r68 = staticinvoke <org.apache.ambari.server.orm.db.DDLTestUtils: java.util.Collection toColumns(java.lang.String)>($r67)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r68 = staticinvoke <org.apache.ambari.server.orm.db.DDLTestUtils: java.util.Collection toColumns(java.lang.String)>($r67) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r69 = staticinvoke <org.apache.ambari.server.orm.db.Constraint: org.apache.ambari.server.orm.db.SimpleConstraint pk(java.lang.String,java.util.Collection)>($r66, $r68)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r69 = staticinvoke <org.apache.ambari.server.orm.db.Constraint: org.apache.ambari.server.orm.db.SimpleConstraint pk(java.lang.String,java.util.Collection)>($r66, $r68) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r8 = staticinvoke <com.google.common.base.Optional: com.google.common.base.Optional of(java.lang.Object)>($r69)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r8 = staticinvoke <com.google.common.base.Optional: com.google.common.base.Optional of(java.lang.Object)>($r69) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : goto [?= (branch)]
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : goto [?= $z5 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r60 = virtualinvoke r14.<java.util.regex.Matcher: java.lang.String group(int)>(1) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r61 = staticinvoke <org.apache.ambari.server.orm.db.DDLTestUtils: java.lang.String stripPrefixQuotationAndBrackets(java.lang.String)>($r60)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r61 = staticinvoke <org.apache.ambari.server.orm.db.DDLTestUtils: java.lang.String stripPrefixQuotationAndBrackets(java.lang.String)>($r60) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r62 = virtualinvoke r14.<java.util.regex.Matcher: java.lang.String group(int)>(2)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r62 = virtualinvoke r14.<java.util.regex.Matcher: java.lang.String group(int)>(2) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r63 = staticinvoke <org.apache.ambari.server.orm.db.DDLTestUtils: java.util.Collection toColumns(java.lang.String)>($r62)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r63 = staticinvoke <org.apache.ambari.server.orm.db.DDLTestUtils: java.util.Collection toColumns(java.lang.String)>($r62) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r64 = staticinvoke <org.apache.ambari.server.orm.db.Constraint: org.apache.ambari.server.orm.db.SimpleConstraint pk(java.lang.String,java.util.Collection)>($r61, $r63)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r64 = staticinvoke <org.apache.ambari.server.orm.db.Constraint: org.apache.ambari.server.orm.db.SimpleConstraint pk(java.lang.String,java.util.Collection)>($r61, $r63) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r8 = staticinvoke <com.google.common.base.Optional: com.google.common.base.Optional of(java.lang.Object)>($r64)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r8 = staticinvoke <com.google.common.base.Optional: com.google.common.base.Optional of(java.lang.Object)>($r64) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : goto [?= (branch)]
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : goto [?= $z5 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r56 = virtualinvoke r14.<java.util.regex.Matcher: java.lang.String group(int)>(1) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r57 = virtualinvoke r14.<java.util.regex.Matcher: java.lang.String group(int)>(2)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r57 = virtualinvoke r14.<java.util.regex.Matcher: java.lang.String group(int)>(2) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r58 = staticinvoke <org.apache.ambari.server.orm.db.DDLTestUtils: java.util.Collection toColumns(java.lang.String)>($r57)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r58 = staticinvoke <org.apache.ambari.server.orm.db.DDLTestUtils: java.util.Collection toColumns(java.lang.String)>($r57) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r59 = staticinvoke <org.apache.ambari.server.orm.db.Constraint: org.apache.ambari.server.orm.db.SimpleConstraint pk(java.lang.String,java.util.Collection)>($r56, $r58)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r59 = staticinvoke <org.apache.ambari.server.orm.db.Constraint: org.apache.ambari.server.orm.db.SimpleConstraint pk(java.lang.String,java.util.Collection)>($r56, $r58) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r8 = staticinvoke <com.google.common.base.Optional: com.google.common.base.Optional of(java.lang.Object)>($r59)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r8 = staticinvoke <com.google.common.base.Optional: com.google.common.base.Optional of(java.lang.Object)>($r59) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : goto [?= (branch)]
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : goto [?= $z5 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r25 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r4 = (java.lang.String) $r25
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r4 = (java.lang.String) $r25 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $z1 = virtualinvoke r4.<java.lang.String: boolean matches(java.lang.String)>(".*create\\s+table.*")
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $z1 = virtualinvoke r4.<java.lang.String: boolean matches(java.lang.String)>(".*create\\s+table.*") >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z1 == 0
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z1 == 0 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $i0 = virtualinvoke r4.<java.lang.String: int indexOf(int)>(40)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z1 == 0 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $i0 = virtualinvoke r4.<java.lang.String: int indexOf(int)>(40) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $i1 = $i0 + 1
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $i1 = $i0 + 1 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $i2 = virtualinvoke r4.<java.lang.String: int lastIndexOf(int)>(41)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $i2 = virtualinvoke r4.<java.lang.String: int lastIndexOf(int)>(41) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r5 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int,int)>($i1, $i2)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r5 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int,int)>($i1, $i2) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r26 = <org.apache.ambari.server.orm.db.DDLTestUtils: java.util.regex.Pattern InnerList>
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r26 = <org.apache.ambari.server.orm.db.DDLTestUtils: java.util.regex.Pattern InnerList> >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r6 = virtualinvoke $r26.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r5)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r6 = virtualinvoke $r26.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r5) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $z2 = virtualinvoke r6.<java.util.regex.Matcher: boolean find()>()
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $z2 = virtualinvoke r6.<java.util.regex.Matcher: boolean find()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z2 == 0
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z2 == 0 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r7 = virtualinvoke r6.<java.util.regex.Matcher: java.lang.String group()>()
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : if $z2 == 0 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r4)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r4) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r7 = virtualinvoke r6.<java.util.regex.Matcher: java.lang.String group()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r27 = virtualinvoke r7.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\,", "|")
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $r27 = virtualinvoke r7.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\,", "|") >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r4 = virtualinvoke r4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(r7, $r27)
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : r4 = virtualinvoke r4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(r7, $r27) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : goto [?= $z2 = virtualinvoke r6.<java.util.regex.Matcher: boolean find()>()]
org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : goto [?= $z2 = virtualinvoke r6.<java.util.regex.Matcher: boolean find()>()] >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.parseTableDefs : $z2 = virtualinvoke r6.<java.util.regex.Matcher: boolean find()>()
