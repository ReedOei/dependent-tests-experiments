org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$MultipleHostTopologyUpdater.calculatePort : $z0 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>(":") >>>>>>>> org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$MultipleHostTopologyUpdater.calculatePort : if $z0 == 0
org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$MultipleHostTopologyUpdater.calculatePort : if $z0 == 0 >>>>>>>> org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$MultipleHostTopologyUpdater.calculatePort : $i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>(":")
org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$MultipleHostTopologyUpdater.calculatePort : if $z0 == 0 >>>>>>>> org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$MultipleHostTopologyUpdater.calculatePort : return null
org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$MultipleHostTopologyUpdater.calculatePort : $i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>(":") >>>>>>>> org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$MultipleHostTopologyUpdater.calculatePort : $i1 = $i0 + 1
org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$MultipleHostTopologyUpdater.calculatePort : $i1 = $i0 + 1 >>>>>>>> org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$MultipleHostTopologyUpdater.calculatePort : $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i1)
org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$MultipleHostTopologyUpdater.calculatePort : $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i1) >>>>>>>> org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$MultipleHostTopologyUpdater.calculatePort : return $r1
