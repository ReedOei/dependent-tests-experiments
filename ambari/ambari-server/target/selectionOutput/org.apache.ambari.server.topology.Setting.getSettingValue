org.apache.ambari.server.topology.Setting.getSettingValue : $r2 = r0.<org.apache.ambari.server.topology.Setting: java.util.Map properties> >>>>>>>> org.apache.ambari.server.topology.Setting.getSettingValue : $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1)
org.apache.ambari.server.topology.Setting.getSettingValue : $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.topology.Setting.getSettingValue : if $z0 == 0
org.apache.ambari.server.topology.Setting.getSettingValue : if $z0 == 0 >>>>>>>> org.apache.ambari.server.topology.Setting.getSettingValue : $r3 = r0.<org.apache.ambari.server.topology.Setting: java.util.Map properties>
org.apache.ambari.server.topology.Setting.getSettingValue : if $z0 == 0 >>>>>>>> org.apache.ambari.server.topology.Setting.getSettingValue : $r6 = staticinvoke <java.util.Collections: java.util.Set emptySet()>()
org.apache.ambari.server.topology.Setting.getSettingValue : $r6 = staticinvoke <java.util.Collections: java.util.Set emptySet()>() >>>>>>>> org.apache.ambari.server.topology.Setting.getSettingValue : return $r6
org.apache.ambari.server.topology.Setting.getSettingValue : $r3 = r0.<org.apache.ambari.server.topology.Setting: java.util.Map properties> >>>>>>>> org.apache.ambari.server.topology.Setting.getSettingValue : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.ambari.server.topology.Setting.getSettingValue : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.topology.Setting.getSettingValue : $r5 = (java.util.Set) $r4
org.apache.ambari.server.topology.Setting.getSettingValue : $r5 = (java.util.Set) $r4 >>>>>>>> org.apache.ambari.server.topology.Setting.getSettingValue : return $r5
