org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r0 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : interfaceinvoke $r0.<org.slf4j.Logger: void info(java.lang.String)>("Checking DB store version")
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : interfaceinvoke $r0.<org.slf4j.Logger: void info(java.lang.String)>("Checking DB store version") >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r10 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.apache.ambari.server.orm.dao.MetainfoDAO metainfoDAO>
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r10 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.apache.ambari.server.orm.dao.MetainfoDAO metainfoDAO> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : if $r10 != null
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : if $r10 != null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r11 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: com.google.inject.Injector injector>
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : if $r10 != null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r14 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.apache.ambari.server.orm.dao.MetainfoDAO metainfoDAO>
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r14 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.apache.ambari.server.orm.dao.MetainfoDAO metainfoDAO> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : r1 = virtualinvoke $r14.<org.apache.ambari.server.orm.dao.MetainfoDAO: org.apache.ambari.server.orm.entities.MetainfoEntity findByKey(java.lang.String)>("version")
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : r1 = virtualinvoke $r14.<org.apache.ambari.server.orm.dao.MetainfoDAO: org.apache.ambari.server.orm.entities.MetainfoEntity findByKey(java.lang.String)>("version") >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : r2 = null
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : r2 = null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : if r1 == null
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : if r1 == null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : r2 = virtualinvoke r1.<org.apache.ambari.server.orm.entities.MetainfoEntity: java.lang.String getMetainfoValue()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : if r1 == null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r15 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: com.google.inject.Injector injector>
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r15 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: com.google.inject.Injector injector> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r16 = interfaceinvoke $r15.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "org/apache/ambari/server/configuration/Configuration")
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r16 = interfaceinvoke $r15.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "org/apache/ambari/server/configuration/Configuration") >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : r3 = (org.apache.ambari.server.configuration.Configuration) $r16
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : r3 = (org.apache.ambari.server.configuration.Configuration) $r16 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r17 = new java.io.File
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r17 = new java.io.File >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r18 = virtualinvoke r3.<org.apache.ambari.server.configuration.Configuration: java.lang.String getServerVersionFilePath()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r18 = virtualinvoke r3.<org.apache.ambari.server.configuration.Configuration: java.lang.String getServerVersionFilePath()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : specialinvoke $r17.<java.io.File: void <init>(java.lang.String)>($r18)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : specialinvoke $r17.<java.io.File: void <init>(java.lang.String)>($r18) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : r4 = $r17
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : r4 = $r17 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $z0 = virtualinvoke r4.<java.io.File: boolean exists()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $z0 = virtualinvoke r4.<java.io.File: boolean exists()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : if $z0 != 0
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : if $z0 != 0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r19 = new org.apache.ambari.server.AmbariException
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : if $z0 != 0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : n0 = null
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : n0 = null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r20 = new java.util.Scanner
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : n0 = null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r28 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : r29 = $r28 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r30 = new org.apache.ambari.server.AmbariException
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r30 = new org.apache.ambari.server.AmbariException >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : specialinvoke $r30.<org.apache.ambari.server.AmbariException: void <init>(java.lang.String)>("Unable to read server version file.")
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : specialinvoke $r30.<org.apache.ambari.server.AmbariException: void <init>(java.lang.String)>("Unable to read server version file.") >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : throw $r30
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r20 = new java.util.Scanner >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : specialinvoke $r20.<java.util.Scanner: void <init>(java.io.File)>(r4)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r20 = new java.util.Scanner >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r28 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : specialinvoke $r20.<java.util.Scanner: void <init>(java.io.File)>(r4) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : r5 = $r20
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : specialinvoke $r20.<java.util.Scanner: void <init>(java.io.File)>(r4) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r28 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : r5 = $r20 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : r6 = null
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : r5 = $r20 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r28 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : r6 = null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r28 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : r6 = null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r24 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : r6 = null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r21 = virtualinvoke r5.<java.util.Scanner: java.util.Scanner useDelimiter(java.lang.String)>("\\Z")
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r21 = virtualinvoke r5.<java.util.Scanner: java.util.Scanner useDelimiter(java.lang.String)>("\\Z") >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r24 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r21 = virtualinvoke r5.<java.util.Scanner: java.util.Scanner useDelimiter(java.lang.String)>("\\Z") >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r28 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r21 = virtualinvoke r5.<java.util.Scanner: java.util.Scanner useDelimiter(java.lang.String)>("\\Z") >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : r22 = virtualinvoke $r21.<java.util.Scanner: java.lang.String next()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : r22 = virtualinvoke $r21.<java.util.Scanner: java.lang.String next()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r24 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : r22 = virtualinvoke $r21.<java.util.Scanner: java.lang.String next()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r28 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : r22 = virtualinvoke $r21.<java.util.Scanner: java.lang.String next()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : if r5 == null
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : if r5 == null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : if r6 == null
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : if r5 == null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : goto [?= (branch)]
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : if r5 == null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r28 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : if r1 == null
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : if r1 == null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $i0 = staticinvoke <org.apache.ambari.server.utils.VersionUtils: int compareVersions(java.lang.String,java.lang.String,int)>(r2, r22, 3)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : if r1 == null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r31 = new java.lang.StringBuilder
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r31 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : specialinvoke $r31.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : specialinvoke $r31.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Current database store version is not compatible with current server version, serverVersion=")
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Current database store version is not compatible with current server version, serverVersion=") >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r22)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r22) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", schemaVersion=")
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", schemaVersion=") >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r37 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.slf4j.Logger LOG>
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r37 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : interfaceinvoke $r37.<org.slf4j.Logger: void error(java.lang.String)>(r36)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : interfaceinvoke $r37.<org.slf4j.Logger: void error(java.lang.String)>(r36) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r38 = new org.apache.ambari.server.AmbariException
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r38 = new org.apache.ambari.server.AmbariException >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : specialinvoke $r38.<org.apache.ambari.server.AmbariException: void <init>(java.lang.String)>(r36)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : specialinvoke $r38.<org.apache.ambari.server.AmbariException: void <init>(java.lang.String)>(r36) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : throw $r38
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $i0 = staticinvoke <org.apache.ambari.server.utils.VersionUtils: int compareVersions(java.lang.String,java.lang.String,int)>(r2, r22, 3) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : if $i0 == 0
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : if $i0 == 0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r31 = new java.lang.StringBuilder
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : if $i0 == 0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r39 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.slf4j.Logger LOG>
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r39 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : interfaceinvoke $r39.<org.slf4j.Logger: void info(java.lang.String)>("DB store version is compatible")
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : interfaceinvoke $r39.<org.slf4j.Logger: void info(java.lang.String)>("DB store version is compatible") >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : return
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : if r6 == null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : virtualinvoke r5.<java.util.Scanner: void close()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : if r6 == null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : virtualinvoke r5.<java.util.Scanner: void close()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : if r6 == null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r28 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : if r6 == null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r23 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : r7 = $r23 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : virtualinvoke r6.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r7)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : r7 = $r23 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r28 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : virtualinvoke r6.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r7) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : goto [?= (branch)]
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : virtualinvoke r6.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r7) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r28 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : goto [?= (branch)]
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r28 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : virtualinvoke r5.<java.util.Scanner: void close()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : goto [?= (branch)]
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : virtualinvoke r5.<java.util.Scanner: void close()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r28 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : goto [?= (branch)]
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r28 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : virtualinvoke r5.<java.util.Scanner: void close()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r23 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : virtualinvoke r5.<java.util.Scanner: void close()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r28 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : virtualinvoke r5.<java.util.Scanner: void close()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : goto [?= (branch)]
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : goto [?= (branch)]
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r28 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : r25 = $r24 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : r6 = r25
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : r25 = $r24 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r26 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : r8 = $r26 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r26 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : r8 = $r26 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r28 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : r8 = $r26 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : if r5 == null
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : if r5 == null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : if r6 == null
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : if r5 == null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : throw r8
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : if r5 == null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r28 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : throw r8 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r28 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : if r6 == null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : virtualinvoke r5.<java.util.Scanner: void close()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : if r6 == null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : virtualinvoke r5.<java.util.Scanner: void close()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : if r6 == null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r28 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : if r6 == null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r27 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : r9 = $r27 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : virtualinvoke r6.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r9)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : r9 = $r27 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r28 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : virtualinvoke r6.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r9) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : goto [?= throw r8]
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : virtualinvoke r6.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r9) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r28 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : goto [?= throw r8] >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : throw r8
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : goto [?= throw r8] >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r28 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : virtualinvoke r5.<java.util.Scanner: void close()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : throw r8
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : virtualinvoke r5.<java.util.Scanner: void close()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r28 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : virtualinvoke r5.<java.util.Scanner: void close()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r27 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : virtualinvoke r5.<java.util.Scanner: void close()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r28 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : virtualinvoke r5.<java.util.Scanner: void close()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : goto [?= throw r8]
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : goto [?= throw r8] >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : throw r8
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : goto [?= throw r8] >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r28 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : r6 = r25 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : throw r25
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : r6 = r25 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r26 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : throw r25 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r26 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r19 = new org.apache.ambari.server.AmbariException >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : specialinvoke $r19.<org.apache.ambari.server.AmbariException: void <init>(java.lang.String)>("Server version file does not exist.")
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : specialinvoke $r19.<org.apache.ambari.server.AmbariException: void <init>(java.lang.String)>("Server version file does not exist.") >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : throw $r19
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : r2 = virtualinvoke r1.<org.apache.ambari.server.orm.entities.MetainfoEntity: java.lang.String getMetainfoValue()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r15 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: com.google.inject.Injector injector>
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r11 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: com.google.inject.Injector injector> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r12 = interfaceinvoke $r11.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "org/apache/ambari/server/orm/dao/MetainfoDAO")
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r12 = interfaceinvoke $r11.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "org/apache/ambari/server/orm/dao/MetainfoDAO") >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r13 = (org.apache.ambari.server.orm.dao.MetainfoDAO) $r12
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r13 = (org.apache.ambari.server.orm.dao.MetainfoDAO) $r12 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.apache.ambari.server.orm.dao.MetainfoDAO metainfoDAO> = $r13
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.apache.ambari.server.orm.dao.MetainfoDAO metainfoDAO> = $r13 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkDBVersionCompatible : $r14 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.apache.ambari.server.orm.dao.MetainfoDAO metainfoDAO>
