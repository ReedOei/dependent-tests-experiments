org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r3 = new java.util.HashSet >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : specialinvoke $r3.<java.util.HashSet: void <init>()>()
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : specialinvoke $r3.<java.util.HashSet: void <init>()>() >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : r4 = $r3
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : r4 = $r3 >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r9 = class "org/apache/ambari/server/cleanup/ClasspathScannerUtils"
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : r4 = $r3 >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r17 := @caughtexception
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : r18 = $r17 >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r19 = <org.apache.ambari.server.cleanup.ClasspathScannerUtils: org.slf4j.Logger LOGGER>
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r19 = <org.apache.ambari.server.cleanup.ClasspathScannerUtils: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : interfaceinvoke $r19.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Failure during configuring JUICE bindings.", r18)
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : interfaceinvoke $r19.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Failure during configuring JUICE bindings.", r18) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r20 = new java.lang.IllegalArgumentException
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r20 = new java.lang.IllegalArgumentException >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>(r18)
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>(r18) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : throw $r20
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r9 = class "org/apache/ambari/server/cleanup/ClasspathScannerUtils" >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.ClassLoader getClassLoader()>()
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r9 = class "org/apache/ambari/server/cleanup/ClasspathScannerUtils" >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r17 := @caughtexception
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.ClassLoader getClassLoader()>() >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : r5 = staticinvoke <com.google.common.reflect.ClassPath: com.google.common.reflect.ClassPath 'from'(java.lang.ClassLoader)>($r10)
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.ClassLoader getClassLoader()>() >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r17 := @caughtexception
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : r5 = staticinvoke <com.google.common.reflect.ClassPath: com.google.common.reflect.ClassPath 'from'(java.lang.ClassLoader)>($r10) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r11 = <org.apache.ambari.server.cleanup.ClasspathScannerUtils: org.slf4j.Logger LOGGER>
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : r5 = staticinvoke <com.google.common.reflect.ClassPath: com.google.common.reflect.ClassPath 'from'(java.lang.ClassLoader)>($r10) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r17 := @caughtexception
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r11 = <org.apache.ambari.server.cleanup.ClasspathScannerUtils: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : interfaceinvoke $r11.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Checking package [{}] for binding candidates.", r0)
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r11 = <org.apache.ambari.server.cleanup.ClasspathScannerUtils: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r17 := @caughtexception
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : interfaceinvoke $r11.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Checking package [{}] for binding candidates.", r0) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r12 = virtualinvoke r5.<com.google.common.reflect.ClassPath: com.google.common.collect.ImmutableSet getTopLevelClassesRecursive(java.lang.String)>(r0)
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : interfaceinvoke $r11.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Checking package [{}] for binding candidates.", r0) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r17 := @caughtexception
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r12 = virtualinvoke r5.<com.google.common.reflect.ClassPath: com.google.common.collect.ImmutableSet getTopLevelClassesRecursive(java.lang.String)>(r0) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : r6 = virtualinvoke $r12.<com.google.common.collect.ImmutableSet: java.util.Iterator iterator()>()
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r12 = virtualinvoke r5.<com.google.common.reflect.ClassPath: com.google.common.collect.ImmutableSet getTopLevelClassesRecursive(java.lang.String)>(r0) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r17 := @caughtexception
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : r6 = virtualinvoke $r12.<com.google.common.collect.ImmutableSet: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : r6 = virtualinvoke $r12.<com.google.common.collect.ImmutableSet: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r17 := @caughtexception
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : if $z0 == 0
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r17 := @caughtexception
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : if $z0 == 0 >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r13 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : if $z0 == 0 >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : goto [?= return r4]
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : if $z0 == 0 >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r17 := @caughtexception
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : goto [?= return r4] >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : return r4
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r13 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : r7 = (com.google.common.reflect.ClassPath$ClassInfo) $r13
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r13 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r17 := @caughtexception
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : r7 = (com.google.common.reflect.ClassPath$ClassInfo) $r13 >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : r8 = virtualinvoke r7.<com.google.common.reflect.ClassPath$ClassInfo: java.lang.Class load()>()
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : r7 = (com.google.common.reflect.ClassPath$ClassInfo) $r13 >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r17 := @caughtexception
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : r8 = virtualinvoke r7.<com.google.common.reflect.ClassPath$ClassInfo: java.lang.Class load()>() >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $z1 = interfaceinvoke r1.<java.util.List: boolean contains(java.lang.Object)>(r8)
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : r8 = virtualinvoke r7.<com.google.common.reflect.ClassPath$ClassInfo: java.lang.Class load()>() >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r17 := @caughtexception
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $z1 = interfaceinvoke r1.<java.util.List: boolean contains(java.lang.Object)>(r8) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : if $z1 == 0
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $z1 = interfaceinvoke r1.<java.util.List: boolean contains(java.lang.Object)>(r8) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r17 := @caughtexception
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : if $z1 == 0 >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r14 = <org.apache.ambari.server.cleanup.ClasspathScannerUtils: org.slf4j.Logger LOGGER>
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : if $z1 == 0 >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $z2 = staticinvoke <org.apache.ambari.server.cleanup.ClasspathScannerUtils: boolean isEligible(java.lang.Class,java.util.List)>(r8, r2)
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : if $z1 == 0 >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r17 := @caughtexception
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $z2 = staticinvoke <org.apache.ambari.server.cleanup.ClasspathScannerUtils: boolean isEligible(java.lang.Class,java.util.List)>(r8, r2) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : if $z2 == 0
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $z2 = staticinvoke <org.apache.ambari.server.cleanup.ClasspathScannerUtils: boolean isEligible(java.lang.Class,java.util.List)>(r8, r2) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r17 := @caughtexception
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : if $z2 == 0 >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r15 = <org.apache.ambari.server.cleanup.ClasspathScannerUtils: org.slf4j.Logger LOGGER>
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : if $z2 == 0 >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r16 = <org.apache.ambari.server.cleanup.ClasspathScannerUtils: org.slf4j.Logger LOGGER>
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : if $z2 == 0 >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r17 := @caughtexception
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r16 = <org.apache.ambari.server.cleanup.ClasspathScannerUtils: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : interfaceinvoke $r16.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Candidate [{}] doesn\'t match.", r8)
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r16 = <org.apache.ambari.server.cleanup.ClasspathScannerUtils: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r17 := @caughtexception
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : interfaceinvoke $r16.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Candidate [{}] doesn\'t match.", r8) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : goto [?= $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : interfaceinvoke $r16.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Candidate [{}] doesn\'t match.", r8) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r17 := @caughtexception
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : goto [?= $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : goto [?= $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r17 := @caughtexception
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r15 = <org.apache.ambari.server.cleanup.ClasspathScannerUtils: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : interfaceinvoke $r15.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Found class [{}]", r8)
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r15 = <org.apache.ambari.server.cleanup.ClasspathScannerUtils: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r17 := @caughtexception
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : interfaceinvoke $r15.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Found class [{}]", r8) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : interfaceinvoke r4.<java.util.Set: boolean add(java.lang.Object)>(r8)
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : interfaceinvoke $r15.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Found class [{}]", r8) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r17 := @caughtexception
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : interfaceinvoke r4.<java.util.Set: boolean add(java.lang.Object)>(r8) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : goto [?= (branch)]
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : interfaceinvoke r4.<java.util.Set: boolean add(java.lang.Object)>(r8) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r17 := @caughtexception
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : goto [?= $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r17 := @caughtexception
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r14 = <org.apache.ambari.server.cleanup.ClasspathScannerUtils: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : interfaceinvoke $r14.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Candidate [{}] is excluded excluded.", r8)
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r14 = <org.apache.ambari.server.cleanup.ClasspathScannerUtils: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r17 := @caughtexception
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : interfaceinvoke $r14.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Candidate [{}] is excluded excluded.", r8) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : goto [?= $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : interfaceinvoke $r14.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Candidate [{}] is excluded excluded.", r8) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r17 := @caughtexception
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : goto [?= $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : goto [?= $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r17 := @caughtexception
