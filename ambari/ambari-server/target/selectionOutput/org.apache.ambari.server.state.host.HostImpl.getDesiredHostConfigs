org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r48 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : specialinvoke r48.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : specialinvoke r48.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r4 = r48
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r4 = r48 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if null != r1
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if null != r1 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r49 = new java.util.HashMap
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if null != r1 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if null != r2
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if null != r2 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r2 = interfaceinvoke r1.<org.apache.ambari.server.state.Cluster: java.util.Map getDesiredConfigs()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if null != r2 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if r2 == null
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if r2 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r14 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if r2 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if r1 != null
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if r1 != null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r51 = new java.util.HashMap
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if r1 != null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r23 = virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: java.lang.String getHostName()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r23 = virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: java.lang.String getHostName()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r22 = interfaceinvoke r1.<org.apache.ambari.server.state.Cluster: java.util.Map getConfigGroupsByHostname(java.lang.String)>($r23)
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r22 = interfaceinvoke r1.<org.apache.ambari.server.state.Cluster: java.util.Map getConfigGroupsByHostname(java.lang.String)>($r23) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r24 = $r22
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r24 = $r22 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if r24 == null
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if r24 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $z1 = interfaceinvoke r24.<java.util.Map: boolean isEmpty()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if r24 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : return r4
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $z1 = interfaceinvoke r24.<java.util.Map: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if $z1 != 0
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if $z1 != 0 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r25 = interfaceinvoke r24.<java.util.Map: java.util.Collection values()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if $z1 != 0 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : return r4
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r25 = interfaceinvoke r24.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r26 = interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r26 = interfaceinvoke $r25.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $z2 = interfaceinvoke r26.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $z2 = interfaceinvoke r26.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if $z2 == 0
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if $z2 == 0 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r27 = interfaceinvoke r26.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if $z2 == 0 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : return r4
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r27 = interfaceinvoke r26.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r28 = (org.apache.ambari.server.state.configgroup.ConfigGroup) $r27
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r28 = (org.apache.ambari.server.state.configgroup.ConfigGroup) $r27 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r29 = interfaceinvoke r28.<org.apache.ambari.server.state.configgroup.ConfigGroup: java.util.Map getConfigurations()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r29 = interfaceinvoke r28.<org.apache.ambari.server.state.configgroup.ConfigGroup: java.util.Map getConfigurations()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r30 = interfaceinvoke $r29.<java.util.Map: java.util.Set entrySet()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r30 = interfaceinvoke $r29.<java.util.Map: java.util.Set entrySet()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r8 = interfaceinvoke $r30.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r8 = interfaceinvoke $r30.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $z3 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $z3 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if $z3 == 0
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if $z3 == 0 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r31 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if $z3 == 0 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : goto [?= $z2 = interfaceinvoke r26.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : goto [?= $z2 = interfaceinvoke r26.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $z2 = interfaceinvoke r26.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r31 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r9 = (java.util.Map$Entry) $r31
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r9 = (java.util.Map$Entry) $r31 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r32 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getKey()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r32 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getKey()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r10 = (java.lang.String) $r32
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r10 = (java.lang.String) $r32 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r33 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r10)
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r33 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r10) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r11 = (org.apache.ambari.server.state.HostConfig) $r33
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r11 = (org.apache.ambari.server.state.HostConfig) $r33 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if r11 != null
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if r11 != null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r52 = new org.apache.ambari.server.state.HostConfig
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if r11 != null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r42 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getValue()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r42 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getValue()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r43 = (org.apache.ambari.server.state.Config) $r42
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r43 = (org.apache.ambari.server.state.Config) $r42 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r44 = virtualinvoke r11.<org.apache.ambari.server.state.HostConfig: java.util.Map getConfigGroupOverrides()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r44 = virtualinvoke r11.<org.apache.ambari.server.state.HostConfig: java.util.Map getConfigGroupOverrides()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r45 = interfaceinvoke r28.<org.apache.ambari.server.state.configgroup.ConfigGroup: java.lang.Long getId()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r45 = interfaceinvoke r28.<org.apache.ambari.server.state.configgroup.ConfigGroup: java.lang.Long getId()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r46 = interfaceinvoke r43.<org.apache.ambari.server.state.Config: java.lang.String getTag()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r46 = interfaceinvoke r43.<org.apache.ambari.server.state.Config: java.lang.String getTag()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : interfaceinvoke $r44.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r45, $r46)
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : interfaceinvoke $r44.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r45, $r46) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : goto [?= $z3 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : goto [?= $z3 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $z3 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r52 = new org.apache.ambari.server.state.HostConfig >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : specialinvoke r52.<org.apache.ambari.server.state.HostConfig: void <init>()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : specialinvoke r52.<org.apache.ambari.server.state.HostConfig: void <init>()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r11 = r52
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r11 = r52 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r10, r11)
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r10, r11) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if r1 == null
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if r1 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r12 = interfaceinvoke r1.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.Config getDesiredConfigByType(java.lang.String)>(r10)
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if r1 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r42 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getValue()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r12 = interfaceinvoke r1.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.Config getDesiredConfigByType(java.lang.String)>(r10) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if r12 != null
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if r12 != null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r36 = <org.apache.ambari.server.state.host.HostImpl: org.slf4j.Logger LOG>
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if r12 != null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r41 = interfaceinvoke r12.<org.apache.ambari.server.state.Config: java.lang.String getTag()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r41 = interfaceinvoke r12.<org.apache.ambari.server.state.Config: java.lang.String getTag()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : virtualinvoke r11.<org.apache.ambari.server.state.HostConfig: void setDefaultVersionTag(java.lang.String)>($r41)
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : virtualinvoke r11.<org.apache.ambari.server.state.HostConfig: void setDefaultVersionTag(java.lang.String)>($r41) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r42 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getValue()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r36 = <org.apache.ambari.server.state.host.HostImpl: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r53 = new java.lang.StringBuilder
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r53 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : specialinvoke r53.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : specialinvoke r53.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r38 = virtualinvoke r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Config inconsistency exists: unknown configType=")
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r38 = virtualinvoke r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Config inconsistency exists: unknown configType=") >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10)
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : interfaceinvoke $r36.<org.slf4j.Logger: void error(java.lang.String)>($r40)
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : interfaceinvoke $r36.<org.slf4j.Logger: void error(java.lang.String)>($r40) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : goto [?= $r42 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getValue()>()]
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : goto [?= $r42 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getValue()>()] >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r42 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getValue()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r51 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r22 = r51
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r22 = r51 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : specialinvoke r51.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : specialinvoke r51.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : goto [?= r24 = $r22]
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : goto [?= r24 = $r22] >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r24 = $r22
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r14 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r5 = interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r5 = interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if $z0 == 0
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r15 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if r1 != null
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r15 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r6 = (java.util.Map$Entry) $r15
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r6 = (java.util.Map$Entry) $r15 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r50 = new org.apache.ambari.server.state.HostConfig
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r50 = new org.apache.ambari.server.state.HostConfig >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : specialinvoke r50.<org.apache.ambari.server.state.HostConfig: void <init>()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : specialinvoke r50.<org.apache.ambari.server.state.HostConfig: void <init>()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r7 = r50
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r7 = r50 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r17 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r17 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r18 = (org.apache.ambari.server.state.DesiredConfig) $r17
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r18 = (org.apache.ambari.server.state.DesiredConfig) $r17 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r19 = virtualinvoke $r18.<org.apache.ambari.server.state.DesiredConfig: java.lang.String getTag()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r19 = virtualinvoke $r18.<org.apache.ambari.server.state.DesiredConfig: java.lang.String getTag()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : virtualinvoke r7.<org.apache.ambari.server.state.HostConfig: void setDefaultVersionTag(java.lang.String)>($r19)
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : virtualinvoke r7.<org.apache.ambari.server.state.HostConfig: void setDefaultVersionTag(java.lang.String)>($r19) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r20 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r20 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, r7)
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, r7) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : goto [?= $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : goto [?= $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r2 = interfaceinvoke r1.<org.apache.ambari.server.state.Cluster: java.util.Map getDesiredConfigs()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if r2 == null
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r49 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : specialinvoke r49.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : specialinvoke r49.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r2 = r49
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r2 = r49 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if null != r2
