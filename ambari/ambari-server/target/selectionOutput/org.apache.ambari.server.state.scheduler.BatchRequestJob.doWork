org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r12 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("BatchRequestJob.ExecutionId") >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : if $r12 == null
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : if $r12 == null >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r13 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("BatchRequestJob.ExecutionId")
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : if $r12 == null >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r14 = null
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r14 = null >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : r2 = $r14
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : r2 = $r14 >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r15 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("BatchRequestJob.BatchId")
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r15 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("BatchRequestJob.BatchId") >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : if $r15 == null
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : if $r15 == null >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r16 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("BatchRequestJob.BatchId")
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : if $r15 == null >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r17 = null
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r17 = null >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : r3 = $r17
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : r3 = $r17 >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r18 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("BatchRequestJob.ClusterName")
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r18 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("BatchRequestJob.ClusterName") >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : r4 = (java.lang.String) $r18
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : r4 = (java.lang.String) $r18 >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : if r2 == null
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : if r2 == null >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : if r3 != null
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : if r2 == null >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r19 = new org.apache.ambari.server.AmbariException
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r19 = new org.apache.ambari.server.AmbariException >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r5 = new java.lang.StringBuilder
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r5 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r20 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to retrieve persisted batch request, execution_id = ")
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r20 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to retrieve persisted batch request, execution_id = ") >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2)
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2) >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", batch_id = ")
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", batch_id = ") >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3) >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : specialinvoke $r19.<org.apache.ambari.server.AmbariException: void <init>(java.lang.String)>($r24)
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : specialinvoke $r19.<org.apache.ambari.server.AmbariException: void <init>(java.lang.String)>($r24) >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : throw $r19
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : if r3 != null >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r19 = new org.apache.ambari.server.AmbariException
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : if r3 != null >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : r6 = specialinvoke r0.<org.apache.ambari.server.state.scheduler.BatchRequestJob: java.util.Map getTaskCountProperties(java.util.Map)>(r1)
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : r6 = specialinvoke r0.<org.apache.ambari.server.state.scheduler.BatchRequestJob: java.util.Map getTaskCountProperties(java.util.Map)>(r1) >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r25 = r0.<org.apache.ambari.server.state.scheduler.BatchRequestJob: org.apache.ambari.server.scheduler.ExecutionScheduleManager executionScheduleManager>
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r25 = r0.<org.apache.ambari.server.state.scheduler.BatchRequestJob: org.apache.ambari.server.scheduler.ExecutionScheduleManager executionScheduleManager> >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $l0 = virtualinvoke r2.<java.lang.Long: long longValue()>()
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $l0 = virtualinvoke r2.<java.lang.Long: long longValue()>() >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $l1 = virtualinvoke r3.<java.lang.Long: long longValue()>()
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $l1 = virtualinvoke r3.<java.lang.Long: long longValue()>() >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : r7 = virtualinvoke $r25.<org.apache.ambari.server.scheduler.ExecutionScheduleManager: java.lang.Long executeBatchRequest(long,long,java.lang.String)>($l0, $l1, r4)
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : r7 = virtualinvoke $r25.<org.apache.ambari.server.scheduler.ExecutionScheduleManager: java.lang.Long executeBatchRequest(long,long,java.lang.String)>($l0, $l1, r4) >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : if r7 == null
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : if r7 == null >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r26 = r0.<org.apache.ambari.server.state.scheduler.BatchRequestJob: org.apache.ambari.server.scheduler.ExecutionScheduleManager executionScheduleManager>
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : if r7 == null >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : return
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r26 = r0.<org.apache.ambari.server.state.scheduler.BatchRequestJob: org.apache.ambari.server.scheduler.ExecutionScheduleManager executionScheduleManager> >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : r8 = virtualinvoke $r26.<org.apache.ambari.server.scheduler.ExecutionScheduleManager: org.apache.ambari.server.state.scheduler.BatchRequestResponse getBatchRequestResponse(java.lang.Long,java.lang.String)>(r7, r4)
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : r8 = virtualinvoke $r26.<org.apache.ambari.server.scheduler.ExecutionScheduleManager: org.apache.ambari.server.state.scheduler.BatchRequestResponse getBatchRequestResponse(java.lang.Long,java.lang.String)>(r7, r4) >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r27 = virtualinvoke r8.<org.apache.ambari.server.state.scheduler.BatchRequestResponse: java.lang.String getStatus()>()
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r27 = virtualinvoke r8.<org.apache.ambari.server.state.scheduler.BatchRequestResponse: java.lang.String getStatus()>() >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : r9 = staticinvoke <org.apache.ambari.server.actionmanager.HostRoleStatus: org.apache.ambari.server.actionmanager.HostRoleStatus valueOf(java.lang.String)>($r27)
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : r9 = staticinvoke <org.apache.ambari.server.actionmanager.HostRoleStatus: org.apache.ambari.server.actionmanager.HostRoleStatus valueOf(java.lang.String)>($r27) >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r28 = r0.<org.apache.ambari.server.state.scheduler.BatchRequestJob: org.apache.ambari.server.scheduler.ExecutionScheduleManager executionScheduleManager>
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r28 = r0.<org.apache.ambari.server.state.scheduler.BatchRequestJob: org.apache.ambari.server.scheduler.ExecutionScheduleManager executionScheduleManager> >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $l2 = virtualinvoke r2.<java.lang.Long: long longValue()>()
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $l2 = virtualinvoke r2.<java.lang.Long: long longValue()>() >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $l3 = virtualinvoke r3.<java.lang.Long: long longValue()>()
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $l3 = virtualinvoke r3.<java.lang.Long: long longValue()>() >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : virtualinvoke $r28.<org.apache.ambari.server.scheduler.ExecutionScheduleManager: void updateBatchRequest(long,long,java.lang.String,org.apache.ambari.server.state.scheduler.BatchRequestResponse,boolean)>($l2, $l3, r4, r8, 1)
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : virtualinvoke $r28.<org.apache.ambari.server.scheduler.ExecutionScheduleManager: void updateBatchRequest(long,long,java.lang.String,org.apache.ambari.server.state.scheduler.BatchRequestResponse,boolean)>($l2, $l3, r4, r8, 1) >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $l4 = r0.<org.apache.ambari.server.state.scheduler.BatchRequestJob: long statusCheckInterval>
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : virtualinvoke $r28.<org.apache.ambari.server.scheduler.ExecutionScheduleManager: void updateBatchRequest(long,long,java.lang.String,org.apache.ambari.server.state.scheduler.BatchRequestResponse,boolean)>($l2, $l3, r4, r8, 1) >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r29 := @caughtexception
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : r10 = $r29 >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : r11 = "Job Thread interrupted"
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : r11 = "Job Thread interrupted" >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r30 = <org.apache.ambari.server.state.scheduler.BatchRequestJob: org.slf4j.Logger LOG>
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r30 = <org.apache.ambari.server.state.scheduler.BatchRequestJob: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : interfaceinvoke $r30.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>(r11, r10)
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : interfaceinvoke $r30.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>(r11, r10) >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r31 = new org.apache.ambari.server.AmbariException
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r31 = new org.apache.ambari.server.AmbariException >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : specialinvoke $r31.<org.apache.ambari.server.AmbariException: void <init>(java.lang.String,java.lang.Throwable)>(r11, r10)
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : specialinvoke $r31.<org.apache.ambari.server.AmbariException: void <init>(java.lang.String,java.lang.Throwable)>(r11, r10) >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : throw $r31
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $l4 = r0.<org.apache.ambari.server.state.scheduler.BatchRequestJob: long statusCheckInterval> >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : staticinvoke <java.lang.Thread: void sleep(long)>($l4)
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $l4 = r0.<org.apache.ambari.server.state.scheduler.BatchRequestJob: long statusCheckInterval> >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r29 := @caughtexception
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : staticinvoke <java.lang.Thread: void sleep(long)>($l4) >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : goto [?= $z0 = virtualinvoke r9.<org.apache.ambari.server.actionmanager.HostRoleStatus: boolean isCompletedState()>()]
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : staticinvoke <java.lang.Thread: void sleep(long)>($l4) >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r29 := @caughtexception
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : goto [?= $z0 = virtualinvoke r9.<org.apache.ambari.server.actionmanager.HostRoleStatus: boolean isCompletedState()>()] >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $z0 = virtualinvoke r9.<org.apache.ambari.server.actionmanager.HostRoleStatus: boolean isCompletedState()>()
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $z0 = virtualinvoke r9.<org.apache.ambari.server.actionmanager.HostRoleStatus: boolean isCompletedState()>() >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : if $z0 == 0
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : r32 = specialinvoke r0.<org.apache.ambari.server.state.scheduler.BatchRequestJob: java.util.Map addTaskCountToProperties(java.util.Map,java.util.Map,org.apache.ambari.server.state.scheduler.BatchRequestResponse)>(r1, r6, r8)
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r26 = r0.<org.apache.ambari.server.state.scheduler.BatchRequestJob: org.apache.ambari.server.scheduler.ExecutionScheduleManager executionScheduleManager>
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : r32 = specialinvoke r0.<org.apache.ambari.server.state.scheduler.BatchRequestJob: java.util.Map addTaskCountToProperties(java.util.Map,java.util.Map,org.apache.ambari.server.state.scheduler.BatchRequestResponse)>(r1, r6, r8) >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r33 = r0.<org.apache.ambari.server.state.scheduler.BatchRequestJob: org.apache.ambari.server.scheduler.ExecutionScheduleManager executionScheduleManager>
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r33 = r0.<org.apache.ambari.server.state.scheduler.BatchRequestJob: org.apache.ambari.server.scheduler.ExecutionScheduleManager executionScheduleManager> >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $z1 = virtualinvoke $r33.<org.apache.ambari.server.scheduler.ExecutionScheduleManager: boolean hasToleranceThresholdExceeded(java.lang.Long,java.lang.String,java.util.Map)>(r2, r4, r32)
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $z1 = virtualinvoke $r33.<org.apache.ambari.server.scheduler.ExecutionScheduleManager: boolean hasToleranceThresholdExceeded(java.lang.Long,java.lang.String,java.util.Map)>(r2, r4, r32) >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : if $z1 == 0
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : if $z1 == 0 >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r34 = new org.apache.ambari.server.AmbariException
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : if $z1 == 0 >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : return
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r34 = new org.apache.ambari.server.AmbariException >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r35 = new java.lang.StringBuilder
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r35 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : specialinvoke $r35.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : specialinvoke $r35.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Task failure tolerance limit exceeded, execution_id = ")
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Task failure tolerance limit exceeded, execution_id = ") >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2)
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2) >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", processed batch_id = ")
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", processed batch_id = ") >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3) >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", failed tasks = ")
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", failed tasks = ") >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r41 = interfaceinvoke r32.<java.util.Map: java.lang.Object get(java.lang.Object)>("BatchRequestJob.FailedTaskCount")
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r41 = interfaceinvoke r32.<java.util.Map: java.lang.Object get(java.lang.Object)>("BatchRequestJob.FailedTaskCount") >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r42 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r41)
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r42 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r41) >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", total tasks completed = ")
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", total tasks completed = ") >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r44 = interfaceinvoke r32.<java.util.Map: java.lang.Object get(java.lang.Object)>("BatchRequestJob.TotalTaskCount")
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r44 = interfaceinvoke r32.<java.util.Map: java.lang.Object get(java.lang.Object)>("BatchRequestJob.TotalTaskCount") >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r44)
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r44) >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : specialinvoke $r34.<org.apache.ambari.server.AmbariException: void <init>(java.lang.String)>($r46)
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : specialinvoke $r34.<org.apache.ambari.server.AmbariException: void <init>(java.lang.String)>($r46) >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : throw $r34
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r16 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("BatchRequestJob.BatchId") >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r17 = (java.lang.Long) $r16
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r17 = (java.lang.Long) $r16 >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : goto [?= r3 = $r17]
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : goto [?= r3 = $r17] >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : r3 = $r17
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r13 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("BatchRequestJob.ExecutionId") >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r14 = (java.lang.Long) $r13
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r14 = (java.lang.Long) $r13 >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : goto [?= r2 = $r14]
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : goto [?= r2 = $r14] >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : r2 = $r14
