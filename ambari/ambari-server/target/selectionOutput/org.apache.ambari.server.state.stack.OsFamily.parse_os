org.apache.ambari.server.state.stack.OsFamily.parse_os : $r2 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.parse_os : specialinvoke $r2.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.state.stack.OsFamily.parse_os : specialinvoke $r2.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.parse_os : r3 = $r2
org.apache.ambari.server.state.stack.OsFamily.parse_os : r3 = $r2 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.parse_os : r4 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("([\\D]+|(?:[\\D]+[\\d]+[\\D]+))([\\d]*)")
org.apache.ambari.server.state.stack.OsFamily.parse_os : r4 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("([\\D]+|(?:[\\D]+[\\d]+[\\D]+))([\\d]*)") >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.parse_os : r5 = virtualinvoke r4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1)
org.apache.ambari.server.state.stack.OsFamily.parse_os : r5 = virtualinvoke r4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1) >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.parse_os : $z0 = virtualinvoke r5.<java.util.regex.Matcher: boolean matches()>()
org.apache.ambari.server.state.stack.OsFamily.parse_os : $z0 = virtualinvoke r5.<java.util.regex.Matcher: boolean matches()>() >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.parse_os : if $z0 == 0
org.apache.ambari.server.state.stack.OsFamily.parse_os : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.parse_os : $r6 = virtualinvoke r5.<java.util.regex.Matcher: java.lang.String group(int)>(1)
org.apache.ambari.server.state.stack.OsFamily.parse_os : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.parse_os : interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("distro", r1)
org.apache.ambari.server.state.stack.OsFamily.parse_os : interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("distro", r1) >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.parse_os : interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("versions", "")
org.apache.ambari.server.state.stack.OsFamily.parse_os : interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("versions", "") >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.parse_os : return r3
org.apache.ambari.server.state.stack.OsFamily.parse_os : $r6 = virtualinvoke r5.<java.util.regex.Matcher: java.lang.String group(int)>(1) >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.parse_os : interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("distro", $r6)
org.apache.ambari.server.state.stack.OsFamily.parse_os : interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("distro", $r6) >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.parse_os : $r8 = virtualinvoke r5.<java.util.regex.Matcher: java.lang.String group(int)>(2)
org.apache.ambari.server.state.stack.OsFamily.parse_os : $r8 = virtualinvoke r5.<java.util.regex.Matcher: java.lang.String group(int)>(2) >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.parse_os : interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("versions", $r8)
org.apache.ambari.server.state.stack.OsFamily.parse_os : interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("versions", $r8) >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.parse_os : goto [?= return r3]
org.apache.ambari.server.state.stack.OsFamily.parse_os : goto [?= return r3] >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.parse_os : return r3
