org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r10 = newarray (java.lang.Object)[2] >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r10[0] = r1
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r10[0] = r1 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r10[1] = r2
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r10[1] = r2 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s-%s", $r10)
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s-%s", $r10) >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r11 = r0.<org.apache.ambari.server.controller.internal.AbstractProviderModule: java.util.Map clusterJmxProtocolMap>
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r11 = r0.<org.apache.ambari.server.controller.internal.AbstractProviderModule: java.util.Map clusterJmxProtocolMap> >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3)
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3) >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : r4 = (java.lang.String) $r12
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : r4 = (java.lang.String) $r12 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : if null == r4
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : if null == r4 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : return r4
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : if null == r4 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("NAMENODE")
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : if null == r4 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r24 := @caughtexception
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : r25 = $r24 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r26 = <org.apache.ambari.server.controller.internal.AbstractProviderModule: org.slf4j.Logger LOG>
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r26 = <org.apache.ambari.server.controller.internal.AbstractProviderModule: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r27 = new java.lang.StringBuilder
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r27 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : specialinvoke $r27.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : specialinvoke $r27.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception while detecting JMX protocol for clusterName = ")
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception while detecting JMX protocol for clusterName = ") >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", componentName = ")
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", componentName = ") >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : interfaceinvoke $r26.<org.slf4j.Logger: void info(java.lang.String,java.lang.Throwable)>($r32, r25)
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : interfaceinvoke $r26.<org.slf4j.Logger: void info(java.lang.String,java.lang.Throwable)>($r32, r25) >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r33 = <org.apache.ambari.server.controller.internal.AbstractProviderModule: org.slf4j.Logger LOG>
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r33 = <org.apache.ambari.server.controller.internal.AbstractProviderModule: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r34 = new java.lang.StringBuilder
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r34 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : specialinvoke $r34.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : specialinvoke $r34.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Defaulting JMX to HTTP protocol for  for clusterName = ")
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Defaulting JMX to HTTP protocol for  for clusterName = ") >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", componentName = ")
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", componentName = ") >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : interfaceinvoke $r33.<org.slf4j.Logger: void info(java.lang.String)>($r40)
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : interfaceinvoke $r33.<org.slf4j.Logger: void info(java.lang.String)>($r40) >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : r4 = "http"
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : r4 = "http" >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : if r4 != null
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : if r4 != null >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r41 = <org.apache.ambari.server.controller.internal.AbstractProviderModule: org.slf4j.Logger LOG>
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : if r4 != null >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r55 = <org.apache.ambari.server.controller.internal.AbstractProviderModule: org.slf4j.Logger LOG>
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r55 = <org.apache.ambari.server.controller.internal.AbstractProviderModule: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $z9 = interfaceinvoke $r55.<org.slf4j.Logger: boolean isDebugEnabled()>()
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $z9 = interfaceinvoke $r55.<org.slf4j.Logger: boolean isDebugEnabled()>() >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : if $z9 == 0
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : if $z9 == 0 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r56 = <org.apache.ambari.server.controller.internal.AbstractProviderModule: org.slf4j.Logger LOG>
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : if $z9 == 0 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r65 = r0.<org.apache.ambari.server.controller.internal.AbstractProviderModule: java.util.Map clusterJmxProtocolMap>
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r65 = r0.<org.apache.ambari.server.controller.internal.AbstractProviderModule: java.util.Map clusterJmxProtocolMap> >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : interfaceinvoke $r65.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r4)
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : interfaceinvoke $r65.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r4) >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : return r4
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r56 = <org.apache.ambari.server.controller.internal.AbstractProviderModule: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r57 = new java.lang.StringBuilder
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r57 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : specialinvoke $r57.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : specialinvoke $r57.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("JMXProtocol = ")
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("JMXProtocol = ") >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4)
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", for clusterName=")
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", for clusterName=") >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", componentName = ")
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", componentName = ") >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : interfaceinvoke $r56.<org.slf4j.Logger: void debug(java.lang.String)>($r64)
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : interfaceinvoke $r56.<org.slf4j.Logger: void debug(java.lang.String)>($r64) >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r65 = r0.<org.apache.ambari.server.controller.internal.AbstractProviderModule: java.util.Map clusterJmxProtocolMap>
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r41 = <org.apache.ambari.server.controller.internal.AbstractProviderModule: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r42 = new java.lang.StringBuilder
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r42 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : specialinvoke $r42.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : specialinvoke $r42.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Detected JMX protocol is null for clusterName = ")
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Detected JMX protocol is null for clusterName = ") >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", componentName = ")
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", componentName = ") >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : interfaceinvoke $r41.<org.slf4j.Logger: void debug(java.lang.String)>($r47)
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : interfaceinvoke $r41.<org.slf4j.Logger: void debug(java.lang.String)>($r47) >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r48 = <org.apache.ambari.server.controller.internal.AbstractProviderModule: org.slf4j.Logger LOG>
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r48 = <org.apache.ambari.server.controller.internal.AbstractProviderModule: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r49 = new java.lang.StringBuilder
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r49 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : specialinvoke $r49.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : specialinvoke $r49.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Defaulting JMX to HTTP protocol for  for clusterName = ")
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Defaulting JMX to HTTP protocol for  for clusterName = ") >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", componentName = ")
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", componentName = ") >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : interfaceinvoke $r48.<org.slf4j.Logger: void debug(java.lang.String)>($r54)
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : interfaceinvoke $r48.<org.slf4j.Logger: void debug(java.lang.String)>($r54) >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : r4 = "http"
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : r4 = "http" >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r55 = <org.apache.ambari.server.controller.internal.AbstractProviderModule: org.slf4j.Logger LOG>
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("NAMENODE") >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : if $z0 != 0
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("NAMENODE") >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r24 := @caughtexception
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : if $z0 != 0 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("DATANODE")
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : if $z0 != 0 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r13 = <org.apache.ambari.server.controller.internal.AbstractProviderModule: java.util.Map componentServiceMap>
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : if $z0 != 0 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r24 := @caughtexception
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r13 = <org.apache.ambari.server.controller.internal.AbstractProviderModule: java.util.Map componentServiceMap> >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2)
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r13 = <org.apache.ambari.server.controller.internal.AbstractProviderModule: java.util.Map componentServiceMap> >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r24 := @caughtexception
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : r5 = (org.apache.ambari.server.state.Service$Type) $r14
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r24 := @caughtexception
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : r5 = (org.apache.ambari.server.state.Service$Type) $r14 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r15 = <org.apache.ambari.server.controller.internal.AbstractProviderModule: java.util.Map serviceConfigTypes>
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : r5 = (org.apache.ambari.server.state.Service$Type) $r14 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r24 := @caughtexception
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r15 = <org.apache.ambari.server.controller.internal.AbstractProviderModule: java.util.Map serviceConfigTypes> >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r16 = interfaceinvoke $r15.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5)
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r15 = <org.apache.ambari.server.controller.internal.AbstractProviderModule: java.util.Map serviceConfigTypes> >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r24 := @caughtexception
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r16 = interfaceinvoke $r15.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5) >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : r6 = (java.lang.String) $r16
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r16 = interfaceinvoke $r15.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5) >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r24 := @caughtexception
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : r6 = (java.lang.String) $r16 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : r7 = specialinvoke r0.<org.apache.ambari.server.controller.internal.AbstractProviderModule: java.lang.String getDesiredConfigVersion(java.lang.String,java.lang.String)>(r1, r6)
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : r6 = (java.lang.String) $r16 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r24 := @caughtexception
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : r7 = specialinvoke r0.<org.apache.ambari.server.controller.internal.AbstractProviderModule: java.lang.String getDesiredConfigVersion(java.lang.String,java.lang.String)>(r1, r6) >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r17 = r0.<org.apache.ambari.server.controller.internal.AbstractProviderModule: java.util.Map clusterHdfsSiteConfigVersionMap>
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : r7 = specialinvoke r0.<org.apache.ambari.server.controller.internal.AbstractProviderModule: java.lang.String getDesiredConfigVersion(java.lang.String,java.lang.String)>(r1, r6) >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r24 := @caughtexception
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r17 = r0.<org.apache.ambari.server.controller.internal.AbstractProviderModule: java.util.Map clusterHdfsSiteConfigVersionMap> >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r18 = interfaceinvoke $r17.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r17 = r0.<org.apache.ambari.server.controller.internal.AbstractProviderModule: java.util.Map clusterHdfsSiteConfigVersionMap> >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r24 := @caughtexception
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r18 = interfaceinvoke $r17.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : r8 = (java.lang.String) $r18
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r18 = interfaceinvoke $r17.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r24 := @caughtexception
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : r8 = (java.lang.String) $r18 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $z8 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>(r8)
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : r8 = (java.lang.String) $r18 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r24 := @caughtexception
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $z8 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>(r8) >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : if $z8 != 0
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $z8 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>(r8) >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r24 := @caughtexception
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : if $z8 != 0 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r19 = <org.apache.ambari.server.controller.internal.AbstractProviderModule: java.util.Map jmxDesiredProperties>
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : if $z8 != 0 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : goto [?= (branch)]
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : if $z8 != 0 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r24 := @caughtexception
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : goto [?= (branch)]
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r24 := @caughtexception
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : if r4 != null
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r19 = <org.apache.ambari.server.controller.internal.AbstractProviderModule: java.util.Map jmxDesiredProperties> >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r20 = interfaceinvoke $r19.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2)
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r19 = <org.apache.ambari.server.controller.internal.AbstractProviderModule: java.util.Map jmxDesiredProperties> >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r24 := @caughtexception
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r20 = interfaceinvoke $r19.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r21 = (java.util.Map) $r20
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r20 = interfaceinvoke $r19.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r24 := @caughtexception
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r21 = (java.util.Map) $r20 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : r9 = specialinvoke r0.<org.apache.ambari.server.controller.internal.AbstractProviderModule: java.util.Map getDesiredConfigMap(java.lang.String,java.lang.String,java.lang.String,java.util.Map)>(r1, r7, r6, $r21)
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r21 = (java.util.Map) $r20 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r24 := @caughtexception
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : r9 = specialinvoke r0.<org.apache.ambari.server.controller.internal.AbstractProviderModule: java.util.Map getDesiredConfigMap(java.lang.String,java.lang.String,java.lang.String,java.util.Map)>(r1, r7, r6, $r21) >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r22 = interfaceinvoke r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2)
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : r9 = specialinvoke r0.<org.apache.ambari.server.controller.internal.AbstractProviderModule: java.util.Map getDesiredConfigMap(java.lang.String,java.lang.String,java.lang.String,java.util.Map)>(r1, r7, r6, $r21) >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r24 := @caughtexception
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r22 = interfaceinvoke r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r23 = (java.lang.String) $r22
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r22 = interfaceinvoke r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r24 := @caughtexception
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r23 = (java.lang.String) $r22 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : r4 = specialinvoke r0.<org.apache.ambari.server.controller.internal.AbstractProviderModule: java.lang.String getJMXProtocolString(java.lang.String)>($r23)
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r23 = (java.lang.String) $r22 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r24 := @caughtexception
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : r4 = specialinvoke r0.<org.apache.ambari.server.controller.internal.AbstractProviderModule: java.lang.String getJMXProtocolString(java.lang.String)>($r23) >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : goto [?= (branch)]
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : r4 = specialinvoke r0.<org.apache.ambari.server.controller.internal.AbstractProviderModule: java.lang.String getJMXProtocolString(java.lang.String)>($r23) >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r24 := @caughtexception
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("DATANODE") >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : if $z1 != 0
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("DATANODE") >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r24 := @caughtexception
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : if $z1 != 0 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $z2 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("RESOURCEMANAGER")
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : if $z1 != 0 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r13 = <org.apache.ambari.server.controller.internal.AbstractProviderModule: java.util.Map componentServiceMap>
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : if $z1 != 0 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r24 := @caughtexception
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $z2 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("RESOURCEMANAGER") >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : if $z2 != 0
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $z2 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("RESOURCEMANAGER") >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r24 := @caughtexception
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : if $z2 != 0 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $z3 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("NODEMANAGER")
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : if $z2 != 0 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r13 = <org.apache.ambari.server.controller.internal.AbstractProviderModule: java.util.Map componentServiceMap>
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : if $z2 != 0 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r24 := @caughtexception
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $z3 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("NODEMANAGER") >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : if $z3 != 0
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $z3 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("NODEMANAGER") >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r24 := @caughtexception
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : if $z3 != 0 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $z4 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("JOURNALNODE")
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : if $z3 != 0 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r13 = <org.apache.ambari.server.controller.internal.AbstractProviderModule: java.util.Map componentServiceMap>
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : if $z3 != 0 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r24 := @caughtexception
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $z4 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("JOURNALNODE") >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : if $z4 != 0
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $z4 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("JOURNALNODE") >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r24 := @caughtexception
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : if $z4 != 0 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $z5 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("HISTORYSERVER")
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : if $z4 != 0 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r13 = <org.apache.ambari.server.controller.internal.AbstractProviderModule: java.util.Map componentServiceMap>
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : if $z4 != 0 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r24 := @caughtexception
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $z5 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("HISTORYSERVER") >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : if $z5 != 0
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $z5 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("HISTORYSERVER") >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r24 := @caughtexception
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : if $z5 != 0 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $z6 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("HBASE_MASTER")
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : if $z5 != 0 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r13 = <org.apache.ambari.server.controller.internal.AbstractProviderModule: java.util.Map componentServiceMap>
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : if $z5 != 0 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r24 := @caughtexception
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $z6 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("HBASE_MASTER") >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : if $z6 != 0
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $z6 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("HBASE_MASTER") >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r24 := @caughtexception
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : if $z6 != 0 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $z7 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("HBASE_REGIONSERVER")
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : if $z6 != 0 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r13 = <org.apache.ambari.server.controller.internal.AbstractProviderModule: java.util.Map componentServiceMap>
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : if $z6 != 0 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r24 := @caughtexception
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $z7 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("HBASE_REGIONSERVER") >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : if $z7 == 0
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $z7 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("HBASE_REGIONSERVER") >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r24 := @caughtexception
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : if $z7 == 0 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r13 = <org.apache.ambari.server.controller.internal.AbstractProviderModule: java.util.Map componentServiceMap>
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : if $z7 == 0 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : r4 = "http"
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : if $z7 == 0 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r24 := @caughtexception
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : r4 = "http" >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : goto [?= (branch)]
org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : r4 = "http" >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getJMXProtocol : $r24 := @caughtexception
