org.apache.ambari.server.controller.internal.AbstractProviderModule.getMetricsServiceType : r1 = $r2 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getMetricsServiceType : $r3 = <org.apache.ambari.server.controller.internal.AbstractProviderModule: org.slf4j.Logger LOG>
org.apache.ambari.server.controller.internal.AbstractProviderModule.getMetricsServiceType : $r3 = <org.apache.ambari.server.controller.internal.AbstractProviderModule: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getMetricsServiceType : interfaceinvoke $r3.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Exception during checkInit.", r1)
org.apache.ambari.server.controller.internal.AbstractProviderModule.getMetricsServiceType : interfaceinvoke $r3.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Exception during checkInit.", r1) >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getMetricsServiceType : $r4 = r0.<org.apache.ambari.server.controller.internal.AbstractProviderModule: org.apache.ambari.server.controller.metrics.MetricsCollectorHAManager metricsCollectorHAManager>
org.apache.ambari.server.controller.internal.AbstractProviderModule.getMetricsServiceType : $r4 = r0.<org.apache.ambari.server.controller.internal.AbstractProviderModule: org.apache.ambari.server.controller.metrics.MetricsCollectorHAManager metricsCollectorHAManager> >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getMetricsServiceType : $z0 = virtualinvoke $r4.<org.apache.ambari.server.controller.metrics.MetricsCollectorHAManager: boolean isEmpty()>()
org.apache.ambari.server.controller.internal.AbstractProviderModule.getMetricsServiceType : $z0 = virtualinvoke $r4.<org.apache.ambari.server.controller.metrics.MetricsCollectorHAManager: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getMetricsServiceType : if $z0 != 0
org.apache.ambari.server.controller.internal.AbstractProviderModule.getMetricsServiceType : if $z0 != 0 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getMetricsServiceType : $r5 = <org.apache.ambari.server.controller.metrics.MetricsServiceProvider$MetricsService: org.apache.ambari.server.controller.metrics.MetricsServiceProvider$MetricsService TIMELINE_METRICS>
org.apache.ambari.server.controller.internal.AbstractProviderModule.getMetricsServiceType : if $z0 != 0 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getMetricsServiceType : $r6 = r0.<org.apache.ambari.server.controller.internal.AbstractProviderModule: java.util.Map clusterGangliaCollectorMap>
org.apache.ambari.server.controller.internal.AbstractProviderModule.getMetricsServiceType : $r6 = r0.<org.apache.ambari.server.controller.internal.AbstractProviderModule: java.util.Map clusterGangliaCollectorMap> >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getMetricsServiceType : $z1 = interfaceinvoke $r6.<java.util.Map: boolean isEmpty()>()
org.apache.ambari.server.controller.internal.AbstractProviderModule.getMetricsServiceType : $z1 = interfaceinvoke $r6.<java.util.Map: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getMetricsServiceType : if $z1 != 0
org.apache.ambari.server.controller.internal.AbstractProviderModule.getMetricsServiceType : if $z1 != 0 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getMetricsServiceType : $r7 = <org.apache.ambari.server.controller.metrics.MetricsServiceProvider$MetricsService: org.apache.ambari.server.controller.metrics.MetricsServiceProvider$MetricsService GANGLIA>
org.apache.ambari.server.controller.internal.AbstractProviderModule.getMetricsServiceType : if $z1 != 0 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getMetricsServiceType : return null
org.apache.ambari.server.controller.internal.AbstractProviderModule.getMetricsServiceType : $r7 = <org.apache.ambari.server.controller.metrics.MetricsServiceProvider$MetricsService: org.apache.ambari.server.controller.metrics.MetricsServiceProvider$MetricsService GANGLIA> >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getMetricsServiceType : return $r7
org.apache.ambari.server.controller.internal.AbstractProviderModule.getMetricsServiceType : $r5 = <org.apache.ambari.server.controller.metrics.MetricsServiceProvider$MetricsService: org.apache.ambari.server.controller.metrics.MetricsServiceProvider$MetricsService TIMELINE_METRICS> >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getMetricsServiceType : return $r5
org.apache.ambari.server.controller.internal.AbstractProviderModule.getMetricsServiceType : specialinvoke r0.<org.apache.ambari.server.controller.internal.AbstractProviderModule: void checkInit()>() >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getMetricsServiceType : goto [?= $r4 = r0.<org.apache.ambari.server.controller.internal.AbstractProviderModule: org.apache.ambari.server.controller.metrics.MetricsCollectorHAManager metricsCollectorHAManager>]
org.apache.ambari.server.controller.internal.AbstractProviderModule.getMetricsServiceType : specialinvoke r0.<org.apache.ambari.server.controller.internal.AbstractProviderModule: void checkInit()>() >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getMetricsServiceType : $r2 := @caughtexception
org.apache.ambari.server.controller.internal.AbstractProviderModule.getMetricsServiceType : goto [?= $r4 = r0.<org.apache.ambari.server.controller.internal.AbstractProviderModule: org.apache.ambari.server.controller.metrics.MetricsCollectorHAManager metricsCollectorHAManager>] >>>>>>>> org.apache.ambari.server.controller.internal.AbstractProviderModule.getMetricsServiceType : $r4 = r0.<org.apache.ambari.server.controller.internal.AbstractProviderModule: org.apache.ambari.server.controller.metrics.MetricsCollectorHAManager metricsCollectorHAManager>
