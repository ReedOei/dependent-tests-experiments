org.apache.ambari.server.stack.StackModule.orderGroups : $r3 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.stack.StackModule.orderGroups : specialinvoke $r3.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.stack.StackModule.orderGroups : specialinvoke $r3.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.orderGroups : r4 = $r3
org.apache.ambari.server.stack.StackModule.orderGroups : r4 = $r3 >>>>>>>> org.apache.ambari.server.stack.StackModule.orderGroups : $r8 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>()
org.apache.ambari.server.stack.StackModule.orderGroups : $r8 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.orderGroups : r5 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.stack.StackModule.orderGroups : r5 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.orderGroups : $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.stack.StackModule.orderGroups : $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.orderGroups : if $z1 == 0
org.apache.ambari.server.stack.StackModule.orderGroups : if $z1 == 0 >>>>>>>> org.apache.ambari.server.stack.StackModule.orderGroups : $r9 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.stack.StackModule.orderGroups : if $z1 == 0 >>>>>>>> org.apache.ambari.server.stack.StackModule.orderGroups : $z5 = interfaceinvoke r4.<java.util.Map: boolean isEmpty()>()
org.apache.ambari.server.stack.StackModule.orderGroups : $z5 = interfaceinvoke r4.<java.util.Map: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.orderGroups : if $z5 != 0
org.apache.ambari.server.stack.StackModule.orderGroups : if $z5 != 0 >>>>>>>> org.apache.ambari.server.stack.StackModule.orderGroups : $r18 = new org.apache.ambari.server.AmbariException
org.apache.ambari.server.stack.StackModule.orderGroups : if $z5 != 0 >>>>>>>> org.apache.ambari.server.stack.StackModule.orderGroups : return
org.apache.ambari.server.stack.StackModule.orderGroups : $r18 = new org.apache.ambari.server.AmbariException >>>>>>>> org.apache.ambari.server.stack.StackModule.orderGroups : $r19 = new java.lang.StringBuilder
org.apache.ambari.server.stack.StackModule.orderGroups : $r19 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.stack.StackModule.orderGroups : specialinvoke $r19.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.stack.StackModule.orderGroups : specialinvoke $r19.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.orderGroups : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing groups: ")
org.apache.ambari.server.stack.StackModule.orderGroups : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing groups: ") >>>>>>>> org.apache.ambari.server.stack.StackModule.orderGroups : $r21 = interfaceinvoke r4.<java.util.Map: java.util.Set keySet()>()
org.apache.ambari.server.stack.StackModule.orderGroups : $r21 = interfaceinvoke r4.<java.util.Map: java.util.Set keySet()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.orderGroups : $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21)
org.apache.ambari.server.stack.StackModule.orderGroups : $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21) >>>>>>>> org.apache.ambari.server.stack.StackModule.orderGroups : $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.stack.StackModule.orderGroups : $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.orderGroups : specialinvoke $r18.<org.apache.ambari.server.AmbariException: void <init>(java.lang.String)>($r23)
org.apache.ambari.server.stack.StackModule.orderGroups : specialinvoke $r18.<org.apache.ambari.server.AmbariException: void <init>(java.lang.String)>($r23) >>>>>>>> org.apache.ambari.server.stack.StackModule.orderGroups : throw $r18
org.apache.ambari.server.stack.StackModule.orderGroups : $r9 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.orderGroups : r6 = (java.util.Map$Entry) $r9
org.apache.ambari.server.stack.StackModule.orderGroups : r6 = (java.util.Map$Entry) $r9 >>>>>>>> org.apache.ambari.server.stack.StackModule.orderGroups : $r10 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>()
org.apache.ambari.server.stack.StackModule.orderGroups : $r10 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.orderGroups : r7 = (org.apache.ambari.server.state.stack.upgrade.Grouping) $r10
org.apache.ambari.server.stack.StackModule.orderGroups : r7 = (org.apache.ambari.server.state.stack.upgrade.Grouping) $r10 >>>>>>>> org.apache.ambari.server.stack.StackModule.orderGroups : $z2 = interfaceinvoke r1.<java.util.List: boolean contains(java.lang.Object)>(r7)
org.apache.ambari.server.stack.StackModule.orderGroups : $z2 = interfaceinvoke r1.<java.util.List: boolean contains(java.lang.Object)>(r7) >>>>>>>> org.apache.ambari.server.stack.StackModule.orderGroups : if $z2 != 0
org.apache.ambari.server.stack.StackModule.orderGroups : if $z2 != 0 >>>>>>>> org.apache.ambari.server.stack.StackModule.orderGroups : z0 = specialinvoke r0.<org.apache.ambari.server.stack.StackModule: boolean addGrouping(java.util.List,org.apache.ambari.server.state.stack.upgrade.Grouping)>(r1, r7)
org.apache.ambari.server.stack.StackModule.orderGroups : if $z2 != 0 >>>>>>>> org.apache.ambari.server.stack.StackModule.orderGroups : goto [?= $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.stack.StackModule.orderGroups : goto [?= $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.stack.StackModule.orderGroups : $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.stack.StackModule.orderGroups : z0 = specialinvoke r0.<org.apache.ambari.server.stack.StackModule: boolean addGrouping(java.util.List,org.apache.ambari.server.state.stack.upgrade.Grouping)>(r1, r7) >>>>>>>> org.apache.ambari.server.stack.StackModule.orderGroups : if z0 == 0
org.apache.ambari.server.stack.StackModule.orderGroups : if z0 == 0 >>>>>>>> org.apache.ambari.server.stack.StackModule.orderGroups : specialinvoke r0.<org.apache.ambari.server.stack.StackModule: void addSkippedGroup(java.util.List,java.util.Map,org.apache.ambari.server.state.stack.upgrade.Grouping)>(r1, r4, r7)
org.apache.ambari.server.stack.StackModule.orderGroups : if z0 == 0 >>>>>>>> org.apache.ambari.server.stack.StackModule.orderGroups : n0 = null
org.apache.ambari.server.stack.StackModule.orderGroups : n0 = null >>>>>>>> org.apache.ambari.server.stack.StackModule.orderGroups : $r11 = r7.<org.apache.ambari.server.state.stack.upgrade.Grouping: java.lang.String addAfterGroup>
org.apache.ambari.server.stack.StackModule.orderGroups : $r11 = r7.<org.apache.ambari.server.state.stack.upgrade.Grouping: java.lang.String addAfterGroup> >>>>>>>> org.apache.ambari.server.stack.StackModule.orderGroups : $z3 = interfaceinvoke r4.<java.util.Map: boolean containsKey(java.lang.Object)>($r11)
org.apache.ambari.server.stack.StackModule.orderGroups : $z3 = interfaceinvoke r4.<java.util.Map: boolean containsKey(java.lang.Object)>($r11) >>>>>>>> org.apache.ambari.server.stack.StackModule.orderGroups : if $z3 == 0
org.apache.ambari.server.stack.StackModule.orderGroups : if $z3 == 0 >>>>>>>> org.apache.ambari.server.stack.StackModule.orderGroups : $r12 = r7.<org.apache.ambari.server.state.stack.upgrade.Grouping: java.lang.String addAfterGroup>
org.apache.ambari.server.stack.StackModule.orderGroups : if $z3 == 0 >>>>>>>> org.apache.ambari.server.stack.StackModule.orderGroups : $r15 = new java.util.ArrayList
org.apache.ambari.server.stack.StackModule.orderGroups : $r15 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.stack.StackModule.orderGroups : specialinvoke $r15.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.stack.StackModule.orderGroups : specialinvoke $r15.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.orderGroups : r14 = $r15
org.apache.ambari.server.stack.StackModule.orderGroups : r14 = $r15 >>>>>>>> org.apache.ambari.server.stack.StackModule.orderGroups : $r16 = r7.<org.apache.ambari.server.state.stack.upgrade.Grouping: java.lang.String addAfterGroup>
org.apache.ambari.server.stack.StackModule.orderGroups : $r16 = r7.<org.apache.ambari.server.state.stack.upgrade.Grouping: java.lang.String addAfterGroup> >>>>>>>> org.apache.ambari.server.stack.StackModule.orderGroups : interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, r14)
org.apache.ambari.server.stack.StackModule.orderGroups : interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, r14) >>>>>>>> org.apache.ambari.server.stack.StackModule.orderGroups : interfaceinvoke r14.<java.util.List: boolean add(java.lang.Object)>(r7)
org.apache.ambari.server.stack.StackModule.orderGroups : interfaceinvoke r14.<java.util.List: boolean add(java.lang.Object)>(r7) >>>>>>>> org.apache.ambari.server.stack.StackModule.orderGroups : goto [?= $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.stack.StackModule.orderGroups : $r12 = r7.<org.apache.ambari.server.state.stack.upgrade.Grouping: java.lang.String addAfterGroup> >>>>>>>> org.apache.ambari.server.stack.StackModule.orderGroups : $r13 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r12)
org.apache.ambari.server.stack.StackModule.orderGroups : $r13 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r12) >>>>>>>> org.apache.ambari.server.stack.StackModule.orderGroups : r14 = (java.util.List) $r13
org.apache.ambari.server.stack.StackModule.orderGroups : r14 = (java.util.List) $r13 >>>>>>>> org.apache.ambari.server.stack.StackModule.orderGroups : goto [?= interfaceinvoke r14.<java.util.List: boolean add(java.lang.Object)>(r7)]
org.apache.ambari.server.stack.StackModule.orderGroups : goto [?= interfaceinvoke r14.<java.util.List: boolean add(java.lang.Object)>(r7)] >>>>>>>> org.apache.ambari.server.stack.StackModule.orderGroups : interfaceinvoke r14.<java.util.List: boolean add(java.lang.Object)>(r7)
org.apache.ambari.server.stack.StackModule.orderGroups : specialinvoke r0.<org.apache.ambari.server.stack.StackModule: void addSkippedGroup(java.util.List,java.util.Map,org.apache.ambari.server.state.stack.upgrade.Grouping)>(r1, r4, r7) >>>>>>>> org.apache.ambari.server.stack.StackModule.orderGroups : goto [?= (branch)]
org.apache.ambari.server.stack.StackModule.orderGroups : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.stack.StackModule.orderGroups : goto [?= $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]
