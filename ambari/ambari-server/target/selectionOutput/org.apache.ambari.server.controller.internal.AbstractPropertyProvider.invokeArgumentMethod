org.apache.ambari.server.controller.internal.AbstractPropertyProvider.invokeArgumentMethod : $r4 = class "java/lang/String" >>>>>>>> org.apache.ambari.server.controller.internal.AbstractPropertyProvider.invokeArgumentMethod : $i0 = interfaceinvoke r3.<java.util.List: int size()>()
org.apache.ambari.server.controller.internal.AbstractPropertyProvider.invokeArgumentMethod : $i0 = interfaceinvoke r3.<java.util.List: int size()>() >>>>>>>> org.apache.ambari.server.controller.internal.AbstractPropertyProvider.invokeArgumentMethod : $r6 = newarray (java.lang.Class)[$i0]
org.apache.ambari.server.controller.internal.AbstractPropertyProvider.invokeArgumentMethod : $r6 = newarray (java.lang.Class)[$i0] >>>>>>>> org.apache.ambari.server.controller.internal.AbstractPropertyProvider.invokeArgumentMethod : $r7 = interfaceinvoke r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r6)
org.apache.ambari.server.controller.internal.AbstractPropertyProvider.invokeArgumentMethod : $r7 = interfaceinvoke r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r6) >>>>>>>> org.apache.ambari.server.controller.internal.AbstractPropertyProvider.invokeArgumentMethod : $r8 = (java.lang.Class[]) $r7
org.apache.ambari.server.controller.internal.AbstractPropertyProvider.invokeArgumentMethod : $r8 = (java.lang.Class[]) $r7 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractPropertyProvider.invokeArgumentMethod : r5 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(r1, $r8)
org.apache.ambari.server.controller.internal.AbstractPropertyProvider.invokeArgumentMethod : r5 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(r1, $r8) >>>>>>>> org.apache.ambari.server.controller.internal.AbstractPropertyProvider.invokeArgumentMethod : $i1 = interfaceinvoke r2.<java.util.List: int size()>()
org.apache.ambari.server.controller.internal.AbstractPropertyProvider.invokeArgumentMethod : $i1 = interfaceinvoke r2.<java.util.List: int size()>() >>>>>>>> org.apache.ambari.server.controller.internal.AbstractPropertyProvider.invokeArgumentMethod : $r9 = newarray (java.lang.Object)[$i1]
org.apache.ambari.server.controller.internal.AbstractPropertyProvider.invokeArgumentMethod : $r9 = newarray (java.lang.Object)[$i1] >>>>>>>> org.apache.ambari.server.controller.internal.AbstractPropertyProvider.invokeArgumentMethod : $r10 = interfaceinvoke r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r9)
org.apache.ambari.server.controller.internal.AbstractPropertyProvider.invokeArgumentMethod : $r10 = interfaceinvoke r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r9) >>>>>>>> org.apache.ambari.server.controller.internal.AbstractPropertyProvider.invokeArgumentMethod : $r11 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r10)
org.apache.ambari.server.controller.internal.AbstractPropertyProvider.invokeArgumentMethod : $r11 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r0, $r10) >>>>>>>> org.apache.ambari.server.controller.internal.AbstractPropertyProvider.invokeArgumentMethod : $r12 = (java.lang.String) $r11
org.apache.ambari.server.controller.internal.AbstractPropertyProvider.invokeArgumentMethod : $r12 = (java.lang.String) $r11 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractPropertyProvider.invokeArgumentMethod : return $r12
