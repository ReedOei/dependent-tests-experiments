org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z0 = staticinvoke <org.apache.commons.collections.CollectionUtils: boolean isEmpty(java.util.Collection)>(r2) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z0 == 0
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r17 = staticinvoke <java.util.Collections: java.util.List emptyList()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r3 = virtualinvoke r1.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.state.Cluster getCluster()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r3 = virtualinvoke r1.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.state.Cluster getCluster()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r18 = new java.util.ArrayList
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r18 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r18.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r18.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r4 = $r18
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r4 = $r18 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r5 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r5 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z1 == 0
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z1 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r19 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z1 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : return r4
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r19 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r6 = (java.lang.String) $r19
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r6 = (java.lang.String) $r19 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r20 = new java.util.ArrayList
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r20 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r20.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r20.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r7 = $r20
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r7 = $r20 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r21 = new java.util.ArrayList
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r21 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r21.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r21.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r8 = $r21
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r8 = $r21 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r22 = interfaceinvoke r3.<org.apache.ambari.server.state.Cluster: java.util.List getServiceComponentHosts(java.lang.String)>(r6)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r22 = interfaceinvoke r3.<org.apache.ambari.server.state.Cluster: java.util.List getServiceComponentHosts(java.lang.String)>(r6) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r9 = interfaceinvoke $r22.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r9 = interfaceinvoke $r22.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z2 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z2 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z2 == 0
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z2 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r23 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z2 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z8 = interfaceinvoke r7.<java.util.List: boolean isEmpty()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z8 = interfaceinvoke r7.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z8 == 0
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z8 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z9 = interfaceinvoke r8.<java.util.List: boolean isEmpty()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z8 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r45 = new org.apache.ambari.server.state.stack.upgrade.StageWrapper
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r45 = new org.apache.ambari.server.state.stack.upgrade.StageWrapper >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r46 = <org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type: org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type STOP>
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r46 = <org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type: org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type STOP> >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r47 = newarray (java.lang.Object)[1]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r47 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r47[0] = r6
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r47[0] = r6 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r48 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Stop on %s", $r47)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r48 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Stop on %s", $r47) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $i0 = interfaceinvoke r7.<java.util.List: int size()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $i0 = interfaceinvoke r7.<java.util.List: int size()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r49 = newarray (org.apache.ambari.server.state.stack.upgrade.TaskWrapper)[$i0]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r49 = newarray (org.apache.ambari.server.state.stack.upgrade.TaskWrapper)[$i0] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r50 = interfaceinvoke r7.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r49)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r50 = interfaceinvoke r7.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r49) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r51 = (org.apache.ambari.server.state.stack.upgrade.TaskWrapper[]) $r50
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r51 = (org.apache.ambari.server.state.stack.upgrade.TaskWrapper[]) $r50 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r45.<org.apache.ambari.server.state.stack.upgrade.StageWrapper: void <init>(org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type,java.lang.String,org.apache.ambari.server.state.stack.upgrade.TaskWrapper[])>($r46, $r48, $r51)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r45.<org.apache.ambari.server.state.stack.upgrade.StageWrapper: void <init>(org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type,java.lang.String,org.apache.ambari.server.state.stack.upgrade.TaskWrapper[])>($r46, $r48, $r51) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r52 = $r45
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r52 = $r45 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r53 = new org.apache.ambari.server.state.stack.upgrade.StageWrapper
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r53 = new org.apache.ambari.server.state.stack.upgrade.StageWrapper >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r54 = <org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type: org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type RESTART>
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r54 = <org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type: org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type RESTART> >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r55 = newarray (java.lang.Object)[1]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r55 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r55[0] = r6
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r55[0] = r6 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r56 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Start on %s", $r55)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r56 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Start on %s", $r55) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $i1 = interfaceinvoke r8.<java.util.List: int size()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $i1 = interfaceinvoke r8.<java.util.List: int size()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r57 = newarray (org.apache.ambari.server.state.stack.upgrade.TaskWrapper)[$i1]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r57 = newarray (org.apache.ambari.server.state.stack.upgrade.TaskWrapper)[$i1] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r58 = interfaceinvoke r8.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r57)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r58 = interfaceinvoke r8.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r57) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r59 = (org.apache.ambari.server.state.stack.upgrade.TaskWrapper[]) $r58
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r59 = (org.apache.ambari.server.state.stack.upgrade.TaskWrapper[]) $r58 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r53.<org.apache.ambari.server.state.stack.upgrade.StageWrapper: void <init>(org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type,java.lang.String,org.apache.ambari.server.state.stack.upgrade.TaskWrapper[])>($r54, $r56, $r59)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r53.<org.apache.ambari.server.state.stack.upgrade.StageWrapper: void <init>(org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type,java.lang.String,org.apache.ambari.server.state.stack.upgrade.TaskWrapper[])>($r54, $r56, $r59) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r60 = $r53
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r60 = $r53 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r61 = newarray (java.lang.Object)[1]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r61 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r61[0] = r6
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r61[0] = r6 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r62 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Please acknowledge that host %s has been prepared.", $r61)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r62 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Please acknowledge that host %s has been prepared.", $r61) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r63 = new org.apache.ambari.server.state.stack.upgrade.ManualTask
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r63 = new org.apache.ambari.server.state.stack.upgrade.ManualTask >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r63.<org.apache.ambari.server.state.stack.upgrade.ManualTask: void <init>()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r63.<org.apache.ambari.server.state.stack.upgrade.ManualTask: void <init>()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r13 = $r63
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r13 = $r63 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r64 = r13.<org.apache.ambari.server.state.stack.upgrade.ManualTask: java.util.List messages>
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r64 = r13.<org.apache.ambari.server.state.stack.upgrade.ManualTask: java.util.List messages> >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke $r64.<java.util.List: boolean add(java.lang.Object)>(r62)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke $r64.<java.util.List: boolean add(java.lang.Object)>(r62) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r65 = new com.google.gson.JsonObject
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r65 = new com.google.gson.JsonObject >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r65.<com.google.gson.JsonObject: void <init>()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r65.<com.google.gson.JsonObject: void <init>()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r14 = $r65
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r14 = $r65 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r66 = <org.apache.ambari.server.state.stack.upgrade.HostOrderItem$HostOrderActionType: org.apache.ambari.server.state.stack.upgrade.HostOrderItem$HostOrderActionType HOST_UPGRADE>
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r66 = <org.apache.ambari.server.state.stack.upgrade.HostOrderItem$HostOrderActionType: org.apache.ambari.server.state.stack.upgrade.HostOrderItem$HostOrderActionType HOST_UPGRADE> >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r67 = virtualinvoke $r66.<org.apache.ambari.server.state.stack.upgrade.HostOrderItem$HostOrderActionType: java.lang.String toString()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r67 = virtualinvoke $r66.<org.apache.ambari.server.state.stack.upgrade.HostOrderItem$HostOrderActionType: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : virtualinvoke r14.<com.google.gson.JsonObject: void addProperty(java.lang.String,java.lang.String)>("type", $r67)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : virtualinvoke r14.<com.google.gson.JsonObject: void addProperty(java.lang.String,java.lang.String)>("type", $r67) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : virtualinvoke r14.<com.google.gson.JsonObject: void addProperty(java.lang.String,java.lang.String)>("host", r6)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : virtualinvoke r14.<com.google.gson.JsonObject: void addProperty(java.lang.String,java.lang.String)>("host", r6) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r68 = virtualinvoke r14.<com.google.gson.JsonObject: java.lang.String toString()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r68 = virtualinvoke r14.<com.google.gson.JsonObject: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r13.<org.apache.ambari.server.state.stack.upgrade.ManualTask: java.lang.String structuredOut> = $r68
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r13.<org.apache.ambari.server.state.stack.upgrade.ManualTask: java.lang.String structuredOut> = $r68 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r69 = new org.apache.ambari.server.state.stack.upgrade.StageWrapper
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r69 = new org.apache.ambari.server.state.stack.upgrade.StageWrapper >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r70 = <org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type: org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type SERVER_SIDE_ACTION>
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r70 = <org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type: org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type SERVER_SIDE_ACTION> >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r71 = newarray (org.apache.ambari.server.state.stack.upgrade.TaskWrapper)[1]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r71 = newarray (org.apache.ambari.server.state.stack.upgrade.TaskWrapper)[1] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r72 = new org.apache.ambari.server.state.stack.upgrade.TaskWrapper
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r72 = new org.apache.ambari.server.state.stack.upgrade.TaskWrapper >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r15 = staticinvoke <java.util.Collections: java.util.Set emptySet()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r15 = staticinvoke <java.util.Collections: java.util.Set emptySet()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r73 = newarray (org.apache.ambari.server.state.stack.upgrade.Task)[1]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r73 = newarray (org.apache.ambari.server.state.stack.upgrade.Task)[1] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r73[0] = r13
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r73[0] = r13 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r72.<org.apache.ambari.server.state.stack.upgrade.TaskWrapper: void <init>(java.lang.String,java.lang.String,java.util.Set,org.apache.ambari.server.state.stack.upgrade.Task[])>(null, null, $r15, $r73)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r72.<org.apache.ambari.server.state.stack.upgrade.TaskWrapper: void <init>(java.lang.String,java.lang.String,java.util.Set,org.apache.ambari.server.state.stack.upgrade.Task[])>(null, null, $r15, $r73) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r71[0] = $r72
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r71[0] = $r72 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r69.<org.apache.ambari.server.state.stack.upgrade.StageWrapper: void <init>(org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type,java.lang.String,org.apache.ambari.server.state.stack.upgrade.TaskWrapper[])>($r70, "Manual Confirmation", $r71)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r69.<org.apache.ambari.server.state.stack.upgrade.StageWrapper: void <init>(org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type,java.lang.String,org.apache.ambari.server.state.stack.upgrade.TaskWrapper[])>($r70, "Manual Confirmation", $r71) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r16 = $r69
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r16 = $r69 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r52)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r52) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r16)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r16) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r60)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r60) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : goto [?= $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : goto [?= $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z9 = interfaceinvoke r8.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z9 == 0
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z9 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r44 = staticinvoke <org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping: org.slf4j.Logger access$100()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z9 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r45 = new org.apache.ambari.server.state.stack.upgrade.StageWrapper
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r44 = staticinvoke <org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping: org.slf4j.Logger access$100()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke $r44.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("No tasks for {}", r6)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke $r44.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("No tasks for {}", r6) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : goto [?= $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : goto [?= $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r23 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r10 = (org.apache.ambari.server.state.ServiceComponentHost) $r23
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r10 = (org.apache.ambari.server.state.ServiceComponentHost) $r23 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z3 = specialinvoke r0.<org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder: boolean isVersionAdvertised(org.apache.ambari.server.state.UpgradeContext,org.apache.ambari.server.state.ServiceComponentHost)>(r1, r10)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z3 = specialinvoke r0.<org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder: boolean isVersionAdvertised(org.apache.ambari.server.state.UpgradeContext,org.apache.ambari.server.state.ServiceComponentHost)>(r1, r10) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z3 != 0
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z3 != 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : goto [?= $z2 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z3 != 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r24 = virtualinvoke r1.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.stack.MasterHostResolver getResolver()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r24 = virtualinvoke r1.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.stack.MasterHostResolver getResolver()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r25 = interfaceinvoke r10.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceName()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r25 = interfaceinvoke r10.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceName()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r26 = interfaceinvoke r10.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceComponentName()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r26 = interfaceinvoke r10.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceComponentName()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r11 = virtualinvoke $r24.<org.apache.ambari.server.stack.MasterHostResolver: org.apache.ambari.server.stack.HostsType getMasterAndHosts(java.lang.String,java.lang.String)>($r25, $r26)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r11 = virtualinvoke $r24.<org.apache.ambari.server.stack.MasterHostResolver: org.apache.ambari.server.stack.HostsType getMasterAndHosts(java.lang.String,java.lang.String)>($r25, $r26) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if null == r11
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if null == r11 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r27 = r11.<org.apache.ambari.server.stack.HostsType: java.util.LinkedHashSet hosts>
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if null == r11 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z5 = interfaceinvoke r10.<org.apache.ambari.server.state.ServiceComponentHost: boolean isClientComponent()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z5 = interfaceinvoke r10.<org.apache.ambari.server.state.ServiceComponentHost: boolean isClientComponent()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z5 != 0
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z5 != 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r33 = new org.apache.ambari.server.state.stack.upgrade.TaskWrapper
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z5 != 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r38 = new org.apache.ambari.server.state.stack.upgrade.TaskWrapper
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r38 = new org.apache.ambari.server.state.stack.upgrade.TaskWrapper >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r39 = interfaceinvoke r10.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceName()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r39 = interfaceinvoke r10.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceName()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r40 = interfaceinvoke r10.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceComponentName()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r40 = interfaceinvoke r10.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceComponentName()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r41 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(r6)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r41 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(r6) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r42 = newarray (org.apache.ambari.server.state.stack.upgrade.Task)[1]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r42 = newarray (org.apache.ambari.server.state.stack.upgrade.Task)[1] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r43 = new org.apache.ambari.server.state.stack.upgrade.RestartTask
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r43 = new org.apache.ambari.server.state.stack.upgrade.RestartTask >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r43.<org.apache.ambari.server.state.stack.upgrade.RestartTask: void <init>()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r43.<org.apache.ambari.server.state.stack.upgrade.RestartTask: void <init>()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r42[0] = $r43
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r42[0] = $r43 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r38.<org.apache.ambari.server.state.stack.upgrade.TaskWrapper: void <init>(java.lang.String,java.lang.String,java.util.Set,org.apache.ambari.server.state.stack.upgrade.Task[])>($r39, $r40, $r41, $r42)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r38.<org.apache.ambari.server.state.stack.upgrade.TaskWrapper: void <init>(java.lang.String,java.lang.String,java.util.Set,org.apache.ambari.server.state.stack.upgrade.Task[])>($r39, $r40, $r41, $r42) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke r8.<java.util.List: boolean add(java.lang.Object)>($r38)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke r8.<java.util.List: boolean add(java.lang.Object)>($r38) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : goto [?= $z2 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : goto [?= $z2 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z2 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r33 = new org.apache.ambari.server.state.stack.upgrade.TaskWrapper >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r34 = interfaceinvoke r10.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceName()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r34 = interfaceinvoke r10.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceName()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r35 = interfaceinvoke r10.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceComponentName()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r35 = interfaceinvoke r10.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceComponentName()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r36 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(r6)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r36 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(r6) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r37 = newarray (org.apache.ambari.server.state.stack.upgrade.Task)[1]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r37 = newarray (org.apache.ambari.server.state.stack.upgrade.Task)[1] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r12 = new org.apache.ambari.server.state.stack.upgrade.StopTask
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r12 = new org.apache.ambari.server.state.stack.upgrade.StopTask >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r12.<org.apache.ambari.server.state.stack.upgrade.StopTask: void <init>()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r12.<org.apache.ambari.server.state.stack.upgrade.StopTask: void <init>()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r37[0] = $r12
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r37[0] = $r12 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r33.<org.apache.ambari.server.state.stack.upgrade.TaskWrapper: void <init>(java.lang.String,java.lang.String,java.util.Set,org.apache.ambari.server.state.stack.upgrade.Task[])>($r34, $r35, $r36, $r37)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r33.<org.apache.ambari.server.state.stack.upgrade.TaskWrapper: void <init>(java.lang.String,java.lang.String,java.util.Set,org.apache.ambari.server.state.stack.upgrade.Task[])>($r34, $r35, $r36, $r37) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke r7.<java.util.List: boolean add(java.lang.Object)>($r33)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke r7.<java.util.List: boolean add(java.lang.Object)>($r33) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r38 = new org.apache.ambari.server.state.stack.upgrade.TaskWrapper
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r27 = r11.<org.apache.ambari.server.stack.HostsType: java.util.LinkedHashSet hosts> >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z4 = virtualinvoke $r27.<java.util.LinkedHashSet: boolean contains(java.lang.Object)>(r6)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z4 = virtualinvoke $r27.<java.util.LinkedHashSet: boolean contains(java.lang.Object)>(r6) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z4 != 0
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z4 != 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r28 = staticinvoke <org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping: org.slf4j.Logger access$100()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z4 != 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z5 = interfaceinvoke r10.<org.apache.ambari.server.state.ServiceComponentHost: boolean isClientComponent()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r28 = staticinvoke <org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping: org.slf4j.Logger access$100()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r29 = newarray (java.lang.Object)[4]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r29 = newarray (java.lang.Object)[4] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r29[0] = r6
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r29[0] = r6 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r30 = interfaceinvoke r10.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceName()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r30 = interfaceinvoke r10.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceName()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r29[1] = $r30
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r29[1] = $r30 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r31 = interfaceinvoke r10.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceComponentName()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r31 = interfaceinvoke r10.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceComponentName()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r29[2] = $r31
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r29[2] = $r31 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r32 = virtualinvoke r1.<org.apache.ambari.server.state.UpgradeContext: java.lang.String getVersion()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r32 = virtualinvoke r1.<org.apache.ambari.server.state.UpgradeContext: java.lang.String getVersion()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r29[3] = $r32
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r29[3] = $r32 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke $r28.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object[])>("Host {} could not be orchestrated. Either there are no components for {}/{} or the target version {} is already current.", $r29)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke $r28.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object[])>("Host {} could not be orchestrated. Either there are no components for {}/{} or the target version {} is already current.", $r29) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : goto [?= $z2 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : goto [?= $z2 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z2 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : goto [?= $z2 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z2 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r17 = staticinvoke <java.util.Collections: java.util.List emptyList()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : return $r17
