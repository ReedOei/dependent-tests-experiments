org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r3 = staticinvoke <org.apache.ambari.server.view.ViewURLStreamProvider: org.apache.commons.logging.Log access$000()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r4 = new java.lang.StringBuilder
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r4 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Checking host ")
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Checking host ") >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" port ")
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" port ") >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" against allowed list.")
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" against allowed list.") >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : interfaceinvoke $r3.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r12)
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : interfaceinvoke $r3.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r12) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isNotBlank(java.lang.String)>(r1)
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isNotBlank(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : if $z0 == 0
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : if $z0 == 0 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r13 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>()
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : if $z0 == 0 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : return 1
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r13 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : r5 = virtualinvoke $r13.<java.lang.String: java.lang.String toLowerCase()>()
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : r5 = virtualinvoke $r13.<java.lang.String: java.lang.String toLowerCase()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r14 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.util.Map allowedHostPorts>
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r14 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.util.Map allowedHostPorts> >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : if $r14 != null
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : if $r14 != null >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : specialinvoke r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: void initializeAllowedHostPorts()>()
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : if $r14 != null >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r15 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.lang.Boolean isProxyCallRestricted>
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r15 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.lang.Boolean isProxyCallRestricted> >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $z1 = virtualinvoke $r15.<java.lang.Boolean: boolean booleanValue()>()
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $z1 = virtualinvoke $r15.<java.lang.Boolean: boolean booleanValue()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : if $z1 == 0
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : if $z1 == 0 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r16 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.util.Map allowedHostPorts>
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : if $z1 == 0 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : return 1
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r16 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.util.Map allowedHostPorts> >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $z2 = interfaceinvoke $r16.<java.util.Map: boolean containsKey(java.lang.Object)>(r5)
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $z2 = interfaceinvoke $r16.<java.util.Map: boolean containsKey(java.lang.Object)>(r5) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : if $z2 == 0
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : if $z2 == 0 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r17 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.util.Map allowedHostPorts>
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : if $z2 == 0 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : return 0
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r17 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.util.Map allowedHostPorts> >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r18 = interfaceinvoke $r17.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5)
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r18 = interfaceinvoke $r17.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r19 = (java.util.HashSet) $r18
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r19 = (java.util.HashSet) $r18 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $z3 = virtualinvoke $r19.<java.util.HashSet: boolean contains(java.lang.Object)>("*")
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $z3 = virtualinvoke $r19.<java.util.HashSet: boolean contains(java.lang.Object)>("*") >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : if $z3 == 0
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : if $z3 == 0 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : return 1
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : if $z3 == 0 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : r6 = ""
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : r6 = "" >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $z4 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isNotBlank(java.lang.String)>(r2)
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $z4 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isNotBlank(java.lang.String)>(r2) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : if $z4 == 0
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : if $z4 == 0 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : r6 = virtualinvoke r2.<java.lang.String: java.lang.String trim()>()
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : if $z4 == 0 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r20 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.util.Map allowedHostPorts>
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r20 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.util.Map allowedHostPorts> >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r21 = interfaceinvoke $r20.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5)
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r21 = interfaceinvoke $r20.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r22 = (java.util.HashSet) $r21
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r22 = (java.util.HashSet) $r21 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $z5 = virtualinvoke $r22.<java.util.HashSet: boolean contains(java.lang.Object)>(r6)
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $z5 = virtualinvoke $r22.<java.util.HashSet: boolean contains(java.lang.Object)>(r6) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : if $z5 == 0
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : if $z5 == 0 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : return 1
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : if $z5 == 0 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : return 0
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : r6 = virtualinvoke r2.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r20 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.util.Map allowedHostPorts>
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : specialinvoke r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: void initializeAllowedHostPorts()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r15 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.lang.Boolean isProxyCallRestricted>
