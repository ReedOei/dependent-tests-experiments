org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.build : $r3 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.build : specialinvoke $r3.<java.util.ArrayList: void <init>(java.util.Collection)>(r2)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.build : specialinvoke $r3.<java.util.ArrayList: void <init>(java.util.Collection)>(r2) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.build : r4 = $r3
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.build : r4 = $r3 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.build : $r7 = r0.<org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder: java.util.List hostOrderItems>
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.build : $r7 = r0.<org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder: java.util.List hostOrderItems> >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.build : r5 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.build : r5 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.build : $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.build : $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.build : if $z0 == 0
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.build : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.build : $r8 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.build : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.build : return r4
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.build : $r8 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.build : r6 = (org.apache.ambari.server.state.stack.upgrade.HostOrderItem) $r8
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.build : r6 = (org.apache.ambari.server.state.stack.upgrade.HostOrderItem) $r8 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.build : $r9 = <org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$1: int[] $SwitchMap$org$apache$ambari$server$state$stack$upgrade$HostOrderItem$HostOrderActionType>
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.build : $r9 = <org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$1: int[] $SwitchMap$org$apache$ambari$server$state$stack$upgrade$HostOrderItem$HostOrderActionType> >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.build : $r10 = virtualinvoke r6.<org.apache.ambari.server.state.stack.upgrade.HostOrderItem: org.apache.ambari.server.state.stack.upgrade.HostOrderItem$HostOrderActionType getType()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.build : $r10 = virtualinvoke r6.<org.apache.ambari.server.state.stack.upgrade.HostOrderItem: org.apache.ambari.server.state.stack.upgrade.HostOrderItem$HostOrderActionType getType()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.build : $i0 = virtualinvoke $r10.<org.apache.ambari.server.state.stack.upgrade.HostOrderItem$HostOrderActionType: int ordinal()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.build : $i0 = virtualinvoke $r10.<org.apache.ambari.server.state.stack.upgrade.HostOrderItem$HostOrderActionType: int ordinal()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.build : $i1 = $r9[$i0]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.build : $i1 = $r9[$i0] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.build : lookupswitch($i1) {     case 1:
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.build : lookupswitch($i1) {     case 1: >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.build : $r11 = virtualinvoke r6.<org.apache.ambari.server.state.stack.upgrade.HostOrderItem: java.util.List getActionItems()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.build : lookupswitch($i1) {     case 1: >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.build : $r13 = virtualinvoke r6.<org.apache.ambari.server.state.stack.upgrade.HostOrderItem: java.util.List getActionItems()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.build : lookupswitch($i1) {     case 1: >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.build : goto [?= $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.build : goto [?= $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.build : $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.build : $r13 = virtualinvoke r6.<org.apache.ambari.server.state.stack.upgrade.HostOrderItem: java.util.List getActionItems()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.build : $r14 = specialinvoke r0.<org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder: java.util.List buildServiceChecks(org.apache.ambari.server.state.UpgradeContext,java.util.List)>(r1, $r13)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.build : $r14 = specialinvoke r0.<org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder: java.util.List buildServiceChecks(org.apache.ambari.server.state.UpgradeContext,java.util.List)>(r1, $r13) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.build : interfaceinvoke r4.<java.util.List: boolean addAll(java.util.Collection)>($r14)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.build : interfaceinvoke r4.<java.util.List: boolean addAll(java.util.Collection)>($r14) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.build : goto [?= $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.build : $r11 = virtualinvoke r6.<org.apache.ambari.server.state.stack.upgrade.HostOrderItem: java.util.List getActionItems()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.build : $r12 = specialinvoke r0.<org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder: java.util.List buildHosts(org.apache.ambari.server.state.UpgradeContext,java.util.List)>(r1, $r11)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.build : $r12 = specialinvoke r0.<org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder: java.util.List buildHosts(org.apache.ambari.server.state.UpgradeContext,java.util.List)>(r1, $r11) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.build : interfaceinvoke r4.<java.util.List: boolean addAll(java.util.Collection)>($r12)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.build : interfaceinvoke r4.<java.util.List: boolean addAll(java.util.Collection)>($r12) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.build : goto [?= (branch)]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.build : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.build : goto [?= $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]
