org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$MultipleHostTopologyUpdater.updateForClusterCreate : $r5 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$MultipleHostTopologyUpdater.updateForClusterCreate : specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$MultipleHostTopologyUpdater.updateForClusterCreate : specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$MultipleHostTopologyUpdater.updateForClusterCreate : r6 = $r5
org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$MultipleHostTopologyUpdater.updateForClusterCreate : r6 = $r5 >>>>>>>> org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$MultipleHostTopologyUpdater.updateForClusterCreate : $z0 = virtualinvoke r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("%HOSTGROUP")
org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$MultipleHostTopologyUpdater.updateForClusterCreate : $z0 = virtualinvoke r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("%HOSTGROUP") >>>>>>>> org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$MultipleHostTopologyUpdater.updateForClusterCreate : if $z0 != 0
org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$MultipleHostTopologyUpdater.updateForClusterCreate : if $z0 != 0 >>>>>>>> org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$MultipleHostTopologyUpdater.updateForClusterCreate : $z1 = virtualinvoke r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("localhost")
org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$MultipleHostTopologyUpdater.updateForClusterCreate : if $z0 != 0 >>>>>>>> org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$MultipleHostTopologyUpdater.updateForClusterCreate : r7 = staticinvoke <org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor: java.util.Collection access$500(java.lang.String,org.apache.ambari.server.topology.ClusterTopology)>(r2, r4)
org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$MultipleHostTopologyUpdater.updateForClusterCreate : r7 = staticinvoke <org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor: java.util.Collection access$500(java.lang.String,org.apache.ambari.server.topology.ClusterTopology)>(r2, r4) >>>>>>>> org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$MultipleHostTopologyUpdater.updateForClusterCreate : $r8 = specialinvoke r0.<org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$MultipleHostTopologyUpdater: java.util.Collection getHostStringsFromLocalhost(java.lang.String,org.apache.ambari.server.topology.ClusterTopology)>(r2, r4)
org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$MultipleHostTopologyUpdater.updateForClusterCreate : $r8 = specialinvoke r0.<org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$MultipleHostTopologyUpdater: java.util.Collection getHostStringsFromLocalhost(java.lang.String,org.apache.ambari.server.topology.ClusterTopology)>(r2, r4) >>>>>>>> org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$MultipleHostTopologyUpdater.updateForClusterCreate : interfaceinvoke r7.<java.util.Collection: boolean addAll(java.util.Collection)>($r8)
org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$MultipleHostTopologyUpdater.updateForClusterCreate : interfaceinvoke r7.<java.util.Collection: boolean addAll(java.util.Collection)>($r8) >>>>>>>> org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$MultipleHostTopologyUpdater.updateForClusterCreate : $r9 = virtualinvoke r0.<org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$MultipleHostTopologyUpdater: java.lang.String resolveHostGroupPlaceholder(java.lang.String,java.util.Collection)>(r2, r7)
org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$MultipleHostTopologyUpdater.updateForClusterCreate : $r9 = virtualinvoke r0.<org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$MultipleHostTopologyUpdater: java.lang.String resolveHostGroupPlaceholder(java.lang.String,java.util.Collection)>(r2, r7) >>>>>>>> org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$MultipleHostTopologyUpdater.updateForClusterCreate : return $r9
org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$MultipleHostTopologyUpdater.updateForClusterCreate : $z1 = virtualinvoke r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("localhost") >>>>>>>> org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$MultipleHostTopologyUpdater.updateForClusterCreate : if $z1 != 0
org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$MultipleHostTopologyUpdater.updateForClusterCreate : if $z1 != 0 >>>>>>>> org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$MultipleHostTopologyUpdater.updateForClusterCreate : return r2
org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$MultipleHostTopologyUpdater.updateForClusterCreate : if $z1 != 0 >>>>>>>> org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor$MultipleHostTopologyUpdater.updateForClusterCreate : r7 = staticinvoke <org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor: java.util.Collection access$500(java.lang.String,org.apache.ambari.server.topology.ClusterTopology)>(r2, r4)
