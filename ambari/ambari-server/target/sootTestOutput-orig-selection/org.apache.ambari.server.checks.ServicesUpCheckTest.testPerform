org.apache.ambari.server.state.StackId.parseStackIdHelper : if r2 == null >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $z0 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>()
org.apache.ambari.server.state.StackId.parseStackIdHelper : $z0 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : if $z0 == 0
org.apache.ambari.server.state.StackId.parseStackIdHelper : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : i0 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(45)
org.apache.ambari.server.state.StackId.parseStackIdHelper : i0 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(45) >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : if i0 == -1
org.apache.ambari.server.state.StackId.parseStackIdHelper : if i0 == -1 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $i1 = virtualinvoke r2.<java.lang.String: int length()>()
org.apache.ambari.server.state.StackId.parseStackIdHelper : $i1 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $i2 = i0 + 1
org.apache.ambari.server.state.StackId.parseStackIdHelper : $i2 = i0 + 1 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : if $i1 > $i2
org.apache.ambari.server.state.StackId.parseStackIdHelper : if $i1 > $i2 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $r8 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0)
org.apache.ambari.server.state.StackId.parseStackIdHelper : $r8 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0) >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : r1.<org.apache.ambari.server.state.StackId: java.lang.String stackName> = $r8
org.apache.ambari.server.state.StackId.parseStackIdHelper : r1.<org.apache.ambari.server.state.StackId: java.lang.String stackName> = $r8 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $i3 = i0 + 1
org.apache.ambari.server.state.StackId.parseStackIdHelper : $i3 = i0 + 1 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $r9 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i3)
org.apache.ambari.server.state.StackId.parseStackIdHelper : $r9 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i3) >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : r1.<org.apache.ambari.server.state.StackId: java.lang.String stackVersion> = $r9
org.apache.ambari.server.state.StackId.parseStackIdHelper : r1.<org.apache.ambari.server.state.StackId: java.lang.String stackVersion> = $r9 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : r3 = virtualinvoke r2.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getClusterName()>()
org.apache.ambari.server.checks.ServicesUpCheck.perform : r3 = virtualinvoke r2.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getClusterName()>() >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String m_clusterName>
org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String m_clusterName> >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : return $r1
org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : return $r1 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $r20 = r0.<org.apache.ambari.server.checks.ServicesUpCheck: com.google.inject.Provider clustersProvider>
org.apache.ambari.server.checks.ServicesUpCheck.perform : $r20 = r0.<org.apache.ambari.server.checks.ServicesUpCheck: com.google.inject.Provider clustersProvider> >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $r21 = interfaceinvoke $r20.<com.google.inject.Provider: java.lang.Object get()>()
org.apache.ambari.server.checks.ServicesUpCheck.perform : $r21 = interfaceinvoke $r20.<com.google.inject.Provider: java.lang.Object get()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheckTest$1.get : $r1 = virtualinvoke r0.<org.apache.ambari.server.checks.ServicesUpCheckTest$1: org.apache.ambari.server.state.Clusters get()>()
org.apache.ambari.server.checks.ServicesUpCheckTest$1.get : $r1 = virtualinvoke r0.<org.apache.ambari.server.checks.ServicesUpCheckTest$1: org.apache.ambari.server.state.Clusters get()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheckTest$1.get : $r1 = r0.<org.apache.ambari.server.checks.ServicesUpCheckTest$1: org.apache.ambari.server.checks.ServicesUpCheckTest this$0>
org.apache.ambari.server.checks.ServicesUpCheckTest$1.get : $r1 = r0.<org.apache.ambari.server.checks.ServicesUpCheckTest$1: org.apache.ambari.server.checks.ServicesUpCheckTest this$0> >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheckTest$1.get : $r2 = staticinvoke <org.apache.ambari.server.checks.ServicesUpCheckTest: org.apache.ambari.server.state.Clusters access$000(org.apache.ambari.server.checks.ServicesUpCheckTest)>($r1)
org.apache.ambari.server.checks.ServicesUpCheckTest$1.get : $r2 = staticinvoke <org.apache.ambari.server.checks.ServicesUpCheckTest: org.apache.ambari.server.state.Clusters access$000(org.apache.ambari.server.checks.ServicesUpCheckTest)>($r1) >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheckTest.access$000 : $r1 = r0.<org.apache.ambari.server.checks.ServicesUpCheckTest: org.apache.ambari.server.state.Clusters clusters>
org.apache.ambari.server.checks.ServicesUpCheckTest.access$000 : $r1 = r0.<org.apache.ambari.server.checks.ServicesUpCheckTest: org.apache.ambari.server.state.Clusters clusters> >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheckTest.access$000 : return $r1
org.apache.ambari.server.checks.ServicesUpCheckTest.access$000 : return $r1 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheckTest$1.get : return $r2
org.apache.ambari.server.checks.ServicesUpCheckTest$1.get : return $r2 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheckTest$1.get : return $r1
org.apache.ambari.server.checks.ServicesUpCheckTest$1.get : return $r1 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $r22 = (org.apache.ambari.server.state.Clusters) $r21
org.apache.ambari.server.checks.ServicesUpCheck.perform : $r22 = (org.apache.ambari.server.state.Clusters) $r21 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : r4 = interfaceinvoke $r22.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>(r3)
org.apache.ambari.server.checks.ServicesUpCheck.perform : r4 = interfaceinvoke $r22.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>(r3) >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $r23 = new java.util.ArrayList
org.apache.ambari.server.checks.ServicesUpCheck.perform : $r23 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : specialinvoke $r23.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.checks.ServicesUpCheck.perform : specialinvoke $r23.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : r5 = $r23
org.apache.ambari.server.checks.ServicesUpCheck.perform : r5 = $r23 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $r24 = new java.util.HashSet
org.apache.ambari.server.checks.ServicesUpCheck.perform : $r24 = new java.util.HashSet >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : specialinvoke $r24.<java.util.HashSet: void <init>()>()
org.apache.ambari.server.checks.ServicesUpCheck.perform : specialinvoke $r24.<java.util.HashSet: void <init>()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : r6 = $r24
org.apache.ambari.server.checks.ServicesUpCheck.perform : r6 = $r24 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : r7 = interfaceinvoke r4.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.StackId getCurrentStackVersion()>()
org.apache.ambari.server.checks.ServicesUpCheck.perform : r7 = interfaceinvoke r4.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.StackId getCurrentStackVersion()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $r25 = interfaceinvoke r4.<org.apache.ambari.server.state.Cluster: java.util.Map getServices()>()
org.apache.ambari.server.checks.ServicesUpCheck.perform : $r25 = interfaceinvoke r4.<org.apache.ambari.server.state.Cluster: java.util.Map getServices()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $r26 = interfaceinvoke $r25.<java.util.Map: java.util.Set entrySet()>()
org.apache.ambari.server.checks.ServicesUpCheck.perform : $r26 = interfaceinvoke $r25.<java.util.Map: java.util.Set entrySet()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : r8 = interfaceinvoke $r26.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.checks.ServicesUpCheck.perform : r8 = interfaceinvoke $r26.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $z1 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.checks.ServicesUpCheck.perform : $z1 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : if $z1 == 0
org.apache.ambari.server.checks.ServicesUpCheck.perform : if $z1 == 0 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $r27 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.checks.ServicesUpCheck.perform : $r27 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : r9 = (java.util.Map$Entry) $r27
org.apache.ambari.server.checks.ServicesUpCheck.perform : r9 = (java.util.Map$Entry) $r27 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $r28 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getValue()>()
org.apache.ambari.server.checks.ServicesUpCheck.perform : $r28 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getValue()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : r10 = (org.apache.ambari.server.state.Service) $r28
org.apache.ambari.server.checks.ServicesUpCheck.perform : r10 = (org.apache.ambari.server.state.Service) $r28 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $z2 = interfaceinvoke r10.<org.apache.ambari.server.state.Service: boolean isClientOnlyService()>()
org.apache.ambari.server.checks.ServicesUpCheck.perform : $z2 = interfaceinvoke r10.<org.apache.ambari.server.state.Service: boolean isClientOnlyService()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : if $z2 == 0
org.apache.ambari.server.checks.ServicesUpCheck.perform : if $z2 == 0 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : r11 = interfaceinvoke r10.<org.apache.ambari.server.state.Service: java.util.Map getServiceComponents()>()
org.apache.ambari.server.checks.ServicesUpCheck.perform : r11 = interfaceinvoke r10.<org.apache.ambari.server.state.Service: java.util.Map getServiceComponents()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $r29 = interfaceinvoke r11.<java.util.Map: java.util.Set entrySet()>()
org.apache.ambari.server.checks.ServicesUpCheck.perform : $r29 = interfaceinvoke r11.<java.util.Map: java.util.Set entrySet()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : r12 = interfaceinvoke $r29.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.checks.ServicesUpCheck.perform : r12 = interfaceinvoke $r29.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $z3 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.checks.ServicesUpCheck.perform : $z3 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : if $z3 == 0
org.apache.ambari.server.checks.ServicesUpCheck.perform : if $z3 == 0 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $r30 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.checks.ServicesUpCheck.perform : $r30 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : r13 = (java.util.Map$Entry) $r30
org.apache.ambari.server.checks.ServicesUpCheck.perform : r13 = (java.util.Map$Entry) $r30 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $r31 = interfaceinvoke r13.<java.util.Map$Entry: java.lang.Object getValue()>()
org.apache.ambari.server.checks.ServicesUpCheck.perform : $r31 = interfaceinvoke r13.<java.util.Map$Entry: java.lang.Object getValue()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : r14 = (org.apache.ambari.server.state.ServiceComponent) $r31
org.apache.ambari.server.checks.ServicesUpCheck.perform : r14 = (org.apache.ambari.server.state.ServiceComponent) $r31 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $z4 = interfaceinvoke r14.<org.apache.ambari.server.state.ServiceComponent: boolean isClientComponent()>()
org.apache.ambari.server.checks.ServicesUpCheck.perform : $z4 = interfaceinvoke r14.<org.apache.ambari.server.state.ServiceComponent: boolean isClientComponent()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : if $z4 == 0
org.apache.ambari.server.checks.ServicesUpCheck.perform : if $z4 == 0 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $z5 = interfaceinvoke r14.<org.apache.ambari.server.state.ServiceComponent: boolean isVersionAdvertised()>()
org.apache.ambari.server.checks.ServicesUpCheck.perform : $z5 = interfaceinvoke r14.<org.apache.ambari.server.state.ServiceComponent: boolean isVersionAdvertised()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : if $z5 != 0
org.apache.ambari.server.checks.ServicesUpCheck.perform : if $z5 != 0 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : goto [?= $z3 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.checks.ServicesUpCheck.perform : goto [?= $z3 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : goto [?= $z1 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.checks.ServicesUpCheck.perform : goto [?= $z1 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $r32 = interfaceinvoke r10.<org.apache.ambari.server.state.Service: java.lang.String getName()>()
org.apache.ambari.server.checks.ServicesUpCheck.perform : $r32 = interfaceinvoke r10.<org.apache.ambari.server.state.Service: java.lang.String getName()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $r33 = interfaceinvoke r14.<org.apache.ambari.server.state.ServiceComponent: java.lang.String getName()>()
org.apache.ambari.server.checks.ServicesUpCheck.perform : $r33 = interfaceinvoke r14.<org.apache.ambari.server.state.ServiceComponent: java.lang.String getName()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : r15 = staticinvoke <org.apache.ambari.server.orm.models.HostComponentSummary: java.util.List getHostComponentSummaries(java.lang.String,java.lang.String)>($r32, $r33)
org.apache.ambari.server.checks.ServicesUpCheck.perform : r15 = staticinvoke <org.apache.ambari.server.orm.models.HostComponentSummary: java.util.List getHostComponentSummaries(java.lang.String,java.lang.String)>($r32, $r33) >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $z6 = interfaceinvoke r15.<java.util.List: boolean isEmpty()>()
org.apache.ambari.server.checks.ServicesUpCheck.perform : $z6 = interfaceinvoke r15.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : if $z6 == 0
org.apache.ambari.server.checks.ServicesUpCheck.perform : if $z6 == 0 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : z0 = 0
org.apache.ambari.server.checks.ServicesUpCheck.perform : z0 = 0 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $z7 = interfaceinvoke r14.<org.apache.ambari.server.state.ServiceComponent: boolean isMasterComponent()>()
org.apache.ambari.server.checks.ServicesUpCheck.perform : $z7 = interfaceinvoke r14.<org.apache.ambari.server.state.ServiceComponent: boolean isMasterComponent()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : if $z7 != 0
org.apache.ambari.server.checks.ServicesUpCheck.perform : if $z7 != 0 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $r34 = r0.<org.apache.ambari.server.checks.ServicesUpCheck: com.google.inject.Provider ambariMetaInfo>
org.apache.ambari.server.checks.ServicesUpCheck.perform : $r34 = r0.<org.apache.ambari.server.checks.ServicesUpCheck: com.google.inject.Provider ambariMetaInfo> >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $r35 = interfaceinvoke $r34.<com.google.inject.Provider: java.lang.Object get()>()
org.apache.ambari.server.checks.ServicesUpCheck.perform : $r35 = interfaceinvoke $r34.<com.google.inject.Provider: java.lang.Object get()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheckTest$2.get : $r1 = virtualinvoke r0.<org.apache.ambari.server.checks.ServicesUpCheckTest$2: org.apache.ambari.server.api.services.AmbariMetaInfo get()>()
org.apache.ambari.server.checks.ServicesUpCheckTest$2.get : $r1 = virtualinvoke r0.<org.apache.ambari.server.checks.ServicesUpCheckTest$2: org.apache.ambari.server.api.services.AmbariMetaInfo get()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheckTest$2.get : $r1 = r0.<org.apache.ambari.server.checks.ServicesUpCheckTest$2: org.apache.ambari.server.checks.ServicesUpCheckTest this$0>
org.apache.ambari.server.checks.ServicesUpCheckTest$2.get : $r1 = r0.<org.apache.ambari.server.checks.ServicesUpCheckTest$2: org.apache.ambari.server.checks.ServicesUpCheckTest this$0> >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheckTest$2.get : $r2 = staticinvoke <org.apache.ambari.server.checks.ServicesUpCheckTest: org.apache.ambari.server.api.services.AmbariMetaInfo access$100(org.apache.ambari.server.checks.ServicesUpCheckTest)>($r1)
org.apache.ambari.server.checks.ServicesUpCheckTest$2.get : $r2 = staticinvoke <org.apache.ambari.server.checks.ServicesUpCheckTest: org.apache.ambari.server.api.services.AmbariMetaInfo access$100(org.apache.ambari.server.checks.ServicesUpCheckTest)>($r1) >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheckTest.access$100 : $r1 = r0.<org.apache.ambari.server.checks.ServicesUpCheckTest: org.apache.ambari.server.api.services.AmbariMetaInfo ambariMetaInfo>
org.apache.ambari.server.checks.ServicesUpCheckTest.access$100 : $r1 = r0.<org.apache.ambari.server.checks.ServicesUpCheckTest: org.apache.ambari.server.api.services.AmbariMetaInfo ambariMetaInfo> >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheckTest.access$100 : return $r1
org.apache.ambari.server.checks.ServicesUpCheckTest.access$100 : return $r1 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheckTest$2.get : return $r2
org.apache.ambari.server.checks.ServicesUpCheckTest$2.get : return $r2 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheckTest$2.get : return $r1
org.apache.ambari.server.checks.ServicesUpCheckTest$2.get : return $r1 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $r36 = (org.apache.ambari.server.api.services.AmbariMetaInfo) $r35
org.apache.ambari.server.checks.ServicesUpCheck.perform : $r36 = (org.apache.ambari.server.api.services.AmbariMetaInfo) $r35 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $r37 = virtualinvoke r7.<org.apache.ambari.server.state.StackId: java.lang.String getStackName()>()
org.apache.ambari.server.checks.ServicesUpCheck.perform : $r37 = virtualinvoke r7.<org.apache.ambari.server.state.StackId: java.lang.String getStackName()>() >>>>>>>> org.apache.ambari.server.state.StackId.getStackName : $r1 = r0.<org.apache.ambari.server.state.StackId: java.lang.String stackName>
org.apache.ambari.server.state.StackId.getStackName : $r1 = r0.<org.apache.ambari.server.state.StackId: java.lang.String stackName> >>>>>>>> org.apache.ambari.server.state.StackId.getStackName : return $r1
org.apache.ambari.server.state.StackId.getStackName : return $r1 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $r38 = virtualinvoke r7.<org.apache.ambari.server.state.StackId: java.lang.String getStackVersion()>()
org.apache.ambari.server.checks.ServicesUpCheck.perform : $r38 = virtualinvoke r7.<org.apache.ambari.server.state.StackId: java.lang.String getStackVersion()>() >>>>>>>> org.apache.ambari.server.state.StackId.getStackVersion : $r1 = r0.<org.apache.ambari.server.state.StackId: java.lang.String stackVersion>
org.apache.ambari.server.state.StackId.getStackVersion : $r1 = r0.<org.apache.ambari.server.state.StackId: java.lang.String stackVersion> >>>>>>>> org.apache.ambari.server.state.StackId.getStackVersion : return $r1
org.apache.ambari.server.state.StackId.getStackVersion : return $r1 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $r39 = interfaceinvoke r14.<org.apache.ambari.server.state.ServiceComponent: java.lang.String getServiceName()>()
org.apache.ambari.server.checks.ServicesUpCheck.perform : $r39 = interfaceinvoke r14.<org.apache.ambari.server.state.ServiceComponent: java.lang.String getServiceName()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $r40 = interfaceinvoke r14.<org.apache.ambari.server.state.ServiceComponent: java.lang.String getName()>()
org.apache.ambari.server.checks.ServicesUpCheck.perform : $r40 = interfaceinvoke r14.<org.apache.ambari.server.state.ServiceComponent: java.lang.String getName()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : r16 = virtualinvoke $r36.<org.apache.ambari.server.api.services.AmbariMetaInfo: org.apache.ambari.server.state.ComponentInfo getComponent(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r37, $r38, $r39, $r40)
org.apache.ambari.server.checks.ServicesUpCheck.perform : r16 = virtualinvoke $r36.<org.apache.ambari.server.api.services.AmbariMetaInfo: org.apache.ambari.server.state.ComponentInfo getComponent(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r37, $r38, $r39, $r40) >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheckTest$3.answer : $r2 = virtualinvoke r0.<org.apache.ambari.server.checks.ServicesUpCheckTest$3: org.apache.ambari.server.state.ComponentInfo answer(org.mockito.invocation.InvocationOnMock)>(r1)
org.apache.ambari.server.checks.ServicesUpCheckTest$3.answer : $r2 = virtualinvoke r0.<org.apache.ambari.server.checks.ServicesUpCheckTest$3: org.apache.ambari.server.state.ComponentInfo answer(org.mockito.invocation.InvocationOnMock)>(r1) >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheckTest$3.answer : $r3 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "org/apache/ambari/server/state/ComponentInfo")
org.apache.ambari.server.checks.ServicesUpCheckTest$3.answer : $r3 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "org/apache/ambari/server/state/ComponentInfo") >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheckTest$3.answer : r2 = (org.apache.ambari.server.state.ComponentInfo) $r3
org.apache.ambari.server.checks.ServicesUpCheckTest$3.answer : r2 = (org.apache.ambari.server.state.ComponentInfo) $r3 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheckTest$3.answer : $r4 = interfaceinvoke r1.<org.mockito.invocation.InvocationOnMock: java.lang.Object[] getArguments()>()
org.apache.ambari.server.checks.ServicesUpCheckTest$3.answer : $r4 = interfaceinvoke r1.<org.mockito.invocation.InvocationOnMock: java.lang.Object[] getArguments()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheckTest$3.answer : $i0 = lengthof $r4
org.apache.ambari.server.checks.ServicesUpCheckTest$3.answer : $i0 = lengthof $r4 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheckTest$3.answer : if $i0 <= 3
org.apache.ambari.server.checks.ServicesUpCheckTest$3.answer : if $i0 <= 3 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheckTest$3.answer : $r5 = "DATANODE"
org.apache.ambari.server.checks.ServicesUpCheckTest$3.answer : $r5 = "DATANODE" >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheckTest$3.answer : $r6 = interfaceinvoke r1.<org.mockito.invocation.InvocationOnMock: java.lang.Object[] getArguments()>()
org.apache.ambari.server.checks.ServicesUpCheckTest$3.answer : $r6 = interfaceinvoke r1.<org.mockito.invocation.InvocationOnMock: java.lang.Object[] getArguments()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheckTest$3.answer : $r7 = $r6[3]
org.apache.ambari.server.checks.ServicesUpCheckTest$3.answer : $r7 = $r6[3] >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheckTest$3.answer : $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r7)
org.apache.ambari.server.checks.ServicesUpCheckTest$3.answer : $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r7) >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheckTest$3.answer : if $z0 == 0
org.apache.ambari.server.checks.ServicesUpCheckTest$3.answer : if $z0 == 0 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheckTest$3.answer : $r8 = virtualinvoke r2.<org.apache.ambari.server.state.ComponentInfo: java.lang.String getCardinality()>()
org.apache.ambari.server.checks.ServicesUpCheckTest$3.answer : $r8 = virtualinvoke r2.<org.apache.ambari.server.state.ComponentInfo: java.lang.String getCardinality()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheckTest$3.answer : $r9 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r8)
org.apache.ambari.server.checks.ServicesUpCheckTest$3.answer : $r9 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r8) >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheckTest$3.answer : interfaceinvoke $r9.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>("1+")
org.apache.ambari.server.checks.ServicesUpCheckTest$3.answer : interfaceinvoke $r9.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>("1+") >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheckTest$3.answer : goto [?= return r2]
org.apache.ambari.server.checks.ServicesUpCheckTest$3.answer : goto [?= return r2] >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheckTest$3.answer : return r2
org.apache.ambari.server.checks.ServicesUpCheckTest$3.answer : return r2 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheckTest$3.answer : return $r2
org.apache.ambari.server.checks.ServicesUpCheckTest$3.answer : return $r2 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : r17 = virtualinvoke r16.<org.apache.ambari.server.state.ComponentInfo: java.lang.String getCardinality()>()
org.apache.ambari.server.checks.ServicesUpCheck.perform : r17 = virtualinvoke r16.<org.apache.ambari.server.state.ComponentInfo: java.lang.String getCardinality()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : if null == r17
org.apache.ambari.server.checks.ServicesUpCheck.perform : if null == r17 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $z8 = virtualinvoke r17.<java.lang.String: boolean equals(java.lang.Object)>("ALL")
org.apache.ambari.server.checks.ServicesUpCheck.perform : $z8 = virtualinvoke r17.<java.lang.String: boolean equals(java.lang.Object)>("ALL") >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : if $z8 != 0
org.apache.ambari.server.checks.ServicesUpCheck.perform : if $z8 != 0 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $z9 = virtualinvoke r17.<java.lang.String: boolean matches(java.lang.String)>("[1-9].*")
org.apache.ambari.server.checks.ServicesUpCheck.perform : $z9 = virtualinvoke r17.<java.lang.String: boolean matches(java.lang.String)>("[1-9].*") >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : if $z9 == 0
org.apache.ambari.server.checks.ServicesUpCheck.perform : if $z9 == 0 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : z0 = 1
org.apache.ambari.server.checks.ServicesUpCheck.perform : z0 = 1 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : if z0 == 0
org.apache.ambari.server.checks.ServicesUpCheck.perform : if z0 == 0 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : i1 = interfaceinvoke r15.<java.util.List: int size()>()
org.apache.ambari.server.checks.ServicesUpCheck.perform : i1 = interfaceinvoke r15.<java.util.List: int size()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : i2 = 0
org.apache.ambari.server.checks.ServicesUpCheck.perform : i2 = 0 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : i0 = 0
org.apache.ambari.server.checks.ServicesUpCheck.perform : i0 = 0 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : r18 = interfaceinvoke r15.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.checks.ServicesUpCheck.perform : r18 = interfaceinvoke r15.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $z10 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.checks.ServicesUpCheck.perform : $z10 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : if $z10 == 0
org.apache.ambari.server.checks.ServicesUpCheck.perform : if $z10 == 0 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $r41 = interfaceinvoke r18.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.checks.ServicesUpCheck.perform : $r41 = interfaceinvoke r18.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : r19 = (org.apache.ambari.server.orm.models.HostComponentSummary) $r41
org.apache.ambari.server.checks.ServicesUpCheck.perform : r19 = (org.apache.ambari.server.orm.models.HostComponentSummary) $r41 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $z11 = specialinvoke r0.<org.apache.ambari.server.checks.ServicesUpCheck: boolean isConsideredDown(org.apache.ambari.server.state.Cluster,org.apache.ambari.server.state.ServiceComponent,org.apache.ambari.server.orm.models.HostComponentSummary)>(r4, r14, r19)
org.apache.ambari.server.checks.ServicesUpCheck.perform : $z11 = specialinvoke r0.<org.apache.ambari.server.checks.ServicesUpCheck: boolean isConsideredDown(org.apache.ambari.server.state.Cluster,org.apache.ambari.server.state.ServiceComponent,org.apache.ambari.server.orm.models.HostComponentSummary)>(r4, r14, r19) >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $r8 = r0.<org.apache.ambari.server.checks.ServicesUpCheck: com.google.inject.Provider clustersProvider>
org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $r8 = r0.<org.apache.ambari.server.checks.ServicesUpCheck: com.google.inject.Provider clustersProvider> >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $r9 = interfaceinvoke $r8.<com.google.inject.Provider: java.lang.Object get()>()
org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $r9 = interfaceinvoke $r8.<com.google.inject.Provider: java.lang.Object get()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $r10 = (org.apache.ambari.server.state.Clusters) $r9
org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $r10 = (org.apache.ambari.server.state.Clusters) $r9 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $l0 = virtualinvoke r3.<org.apache.ambari.server.orm.models.HostComponentSummary: long getHostId()>()
org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $l0 = virtualinvoke r3.<org.apache.ambari.server.orm.models.HostComponentSummary: long getHostId()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0)
org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : r4 = interfaceinvoke $r10.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Host getHostById(java.lang.Long)>($r11)
org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : r4 = interfaceinvoke $r10.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Host getHostById(java.lang.Long)>($r11) >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $l1 = interfaceinvoke r1.<org.apache.ambari.server.state.Cluster: long getClusterId()>()
org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $l1 = interfaceinvoke r1.<org.apache.ambari.server.state.Cluster: long getClusterId()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : r5 = interfaceinvoke r4.<org.apache.ambari.server.state.Host: org.apache.ambari.server.state.MaintenanceState getMaintenanceState(long)>($l1)
org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : r5 = interfaceinvoke r4.<org.apache.ambari.server.state.Host: org.apache.ambari.server.state.MaintenanceState getMaintenanceState(long)>($l1) >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $r12 = <org.apache.ambari.server.state.MaintenanceState: org.apache.ambari.server.state.MaintenanceState ON>
org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $r12 = <org.apache.ambari.server.state.MaintenanceState: org.apache.ambari.server.state.MaintenanceState ON> >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : if r5 != $r12
org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : if r5 != $r12 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : r6 = virtualinvoke r3.<org.apache.ambari.server.orm.models.HostComponentSummary: org.apache.ambari.server.state.State getDesiredState()>()
org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : r6 = virtualinvoke r3.<org.apache.ambari.server.orm.models.HostComponentSummary: org.apache.ambari.server.state.State getDesiredState()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : r7 = virtualinvoke r3.<org.apache.ambari.server.orm.models.HostComponentSummary: org.apache.ambari.server.state.State getCurrentState()>()
org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : r7 = virtualinvoke r3.<org.apache.ambari.server.orm.models.HostComponentSummary: org.apache.ambari.server.state.State getCurrentState()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $r13 = <org.apache.ambari.server.checks.ServicesUpCheck$1: int[] $SwitchMap$org$apache$ambari$server$state$State>
org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $r13 = <org.apache.ambari.server.checks.ServicesUpCheck$1: int[] $SwitchMap$org$apache$ambari$server$state$State> >>>>>>>> org.apache.ambari.server.state.State.values : $r0 = <org.apache.ambari.server.state.State: org.apache.ambari.server.state.State[] $VALUES>
org.apache.ambari.server.state.State.values : $r0 = <org.apache.ambari.server.state.State: org.apache.ambari.server.state.State[] $VALUES> >>>>>>>> org.apache.ambari.server.state.State.values : $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>()
org.apache.ambari.server.state.State.values : $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> org.apache.ambari.server.state.State.values : $r2 = (org.apache.ambari.server.state.State[]) $r1
org.apache.ambari.server.state.State.values : $r2 = (org.apache.ambari.server.state.State[]) $r1 >>>>>>>> org.apache.ambari.server.state.State.values : return $r2
org.apache.ambari.server.state.State.values : return $r2 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $i2 = virtualinvoke r6.<org.apache.ambari.server.state.State: int ordinal()>()
org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $i2 = virtualinvoke r6.<org.apache.ambari.server.state.State: int ordinal()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $i3 = $r13[$i2]
org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $i3 = $r13[$i2] >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : lookupswitch($i3) {     case 1:
org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : lookupswitch($i3) {     case 1: >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $r14 = <org.apache.ambari.server.state.State: org.apache.ambari.server.state.State STARTED>
org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $r14 = <org.apache.ambari.server.state.State: org.apache.ambari.server.state.State STARTED> >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : if r7 == $r14
org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : if r7 == $r14 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $z1 = 0
org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $z1 = 0 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : return $z1
org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : return $z1 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : if $z11 == 0
org.apache.ambari.server.checks.ServicesUpCheck.perform : if $z11 == 0 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : i2 = i2 + 1
org.apache.ambari.server.checks.ServicesUpCheck.perform : i2 = i2 + 1 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : goto [?= $z10 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.checks.ServicesUpCheck.perform : goto [?= $z10 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $f0 = (float) i0
org.apache.ambari.server.checks.ServicesUpCheck.perform : $f0 = (float) i0 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $f1 = (float) i1
org.apache.ambari.server.checks.ServicesUpCheck.perform : $f1 = (float) i1 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $f2 = $f0 / $f1
org.apache.ambari.server.checks.ServicesUpCheck.perform : $f2 = $f0 / $f1 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $b3 = $f2 cmpl 0.5F
org.apache.ambari.server.checks.ServicesUpCheck.perform : $b3 = $f2 cmpl 0.5F >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : if $b3 <= 0
org.apache.ambari.server.checks.ServicesUpCheck.perform : if $b3 <= 0 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : goto [?= (branch)]
org.apache.ambari.server.checks.ServicesUpCheck.perform : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : r50 = interfaceinvoke r15.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.checks.ServicesUpCheck.perform : r50 = interfaceinvoke r15.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $z14 = interfaceinvoke r50.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.checks.ServicesUpCheck.perform : $z14 = interfaceinvoke r50.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : if $z14 == 0
org.apache.ambari.server.checks.ServicesUpCheck.perform : if $z14 == 0 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $r51 = interfaceinvoke r50.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.checks.ServicesUpCheck.perform : $r51 = interfaceinvoke r50.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : r52 = (org.apache.ambari.server.orm.models.HostComponentSummary) $r51
org.apache.ambari.server.checks.ServicesUpCheck.perform : r52 = (org.apache.ambari.server.orm.models.HostComponentSummary) $r51 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $z15 = specialinvoke r0.<org.apache.ambari.server.checks.ServicesUpCheck: boolean isConsideredDown(org.apache.ambari.server.state.Cluster,org.apache.ambari.server.state.ServiceComponent,org.apache.ambari.server.orm.models.HostComponentSummary)>(r4, r14, r52)
org.apache.ambari.server.checks.ServicesUpCheck.perform : $z15 = specialinvoke r0.<org.apache.ambari.server.checks.ServicesUpCheck: boolean isConsideredDown(org.apache.ambari.server.state.Cluster,org.apache.ambari.server.state.ServiceComponent,org.apache.ambari.server.orm.models.HostComponentSummary)>(r4, r14, r52) >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : if $z15 == 0
org.apache.ambari.server.checks.ServicesUpCheck.perform : if $z15 == 0 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : goto [?= $z14 = interfaceinvoke r50.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.checks.ServicesUpCheck.perform : goto [?= $z14 = interfaceinvoke r50.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $z18 = interfaceinvoke r5.<java.util.List: boolean isEmpty()>()
org.apache.ambari.server.checks.ServicesUpCheck.perform : $z18 = interfaceinvoke r5.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : if $z18 != 0
org.apache.ambari.server.checks.ServicesUpCheck.perform : if $z18 != 0 >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.getStatus : $r1 = r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: org.apache.ambari.server.state.stack.PrereqCheckStatus m_status>
org.apache.ambari.server.state.stack.PrerequisiteCheck.getStatus : $r1 = r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: org.apache.ambari.server.state.stack.PrereqCheckStatus m_status> >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.getStatus : return $r1
org.apache.ambari.server.state.stack.PrerequisiteCheck.getStatus : return $r1 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $z1 = 1
org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $z1 = 1 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : goto [?= return $z1]
org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : goto [?= return $z1] >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : i0 = i0 + 1
org.apache.ambari.server.checks.ServicesUpCheck.perform : i0 = i0 + 1 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $r53 = interfaceinvoke r10.<org.apache.ambari.server.state.Service: java.lang.String getName()>()
org.apache.ambari.server.checks.ServicesUpCheck.perform : $r53 = interfaceinvoke r10.<org.apache.ambari.server.state.Service: java.lang.String getName()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : interfaceinvoke r6.<java.util.Set: boolean add(java.lang.Object)>($r53)
org.apache.ambari.server.checks.ServicesUpCheck.perform : interfaceinvoke r6.<java.util.Set: boolean add(java.lang.Object)>($r53) >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $r54 = newarray (java.lang.Object)[4]
org.apache.ambari.server.checks.ServicesUpCheck.perform : $r54 = newarray (java.lang.Object)[4] >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $r55 = interfaceinvoke r10.<org.apache.ambari.server.state.Service: java.lang.String getName()>()
org.apache.ambari.server.checks.ServicesUpCheck.perform : $r55 = interfaceinvoke r10.<org.apache.ambari.server.state.Service: java.lang.String getName()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $r54[0] = $r55
org.apache.ambari.server.checks.ServicesUpCheck.perform : $r54[0] = $r55 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $r56 = interfaceinvoke r14.<org.apache.ambari.server.state.ServiceComponent: java.lang.String getName()>()
org.apache.ambari.server.checks.ServicesUpCheck.perform : $r56 = interfaceinvoke r14.<org.apache.ambari.server.state.ServiceComponent: java.lang.String getName()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $r54[1] = $r56
org.apache.ambari.server.checks.ServicesUpCheck.perform : $r54[1] = $r56 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $r57 = virtualinvoke r52.<org.apache.ambari.server.orm.models.HostComponentSummary: org.apache.ambari.server.state.State getCurrentState()>()
org.apache.ambari.server.checks.ServicesUpCheck.perform : $r57 = virtualinvoke r52.<org.apache.ambari.server.orm.models.HostComponentSummary: org.apache.ambari.server.state.State getCurrentState()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $r54[2] = $r57
org.apache.ambari.server.checks.ServicesUpCheck.perform : $r54[2] = $r57 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $r58 = virtualinvoke r52.<org.apache.ambari.server.orm.models.HostComponentSummary: java.lang.String getHostName()>()
org.apache.ambari.server.checks.ServicesUpCheck.perform : $r58 = virtualinvoke r52.<org.apache.ambari.server.orm.models.HostComponentSummary: java.lang.String getHostName()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $r54[3] = $r58
org.apache.ambari.server.checks.ServicesUpCheck.perform : $r54[3] = $r58 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : r59 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>("{0}: {1} (in {2} on host {3})", $r54)
org.apache.ambari.server.checks.ServicesUpCheck.perform : r59 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>("{0}: {1} (in {2} on host {3})", $r54) >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>(r59)
org.apache.ambari.server.checks.ServicesUpCheck.perform : interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>(r59) >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $r60 = new java.util.LinkedHashSet
org.apache.ambari.server.checks.ServicesUpCheck.perform : $r60 = new java.util.LinkedHashSet >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : specialinvoke $r60.<java.util.LinkedHashSet: void <init>(java.util.Collection)>(r6)
org.apache.ambari.server.checks.ServicesUpCheck.perform : specialinvoke $r60.<java.util.LinkedHashSet: void <init>(java.util.Collection)>(r6) >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void setFailedOn(java.util.LinkedHashSet)>($r60)
org.apache.ambari.server.checks.ServicesUpCheck.perform : virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void setFailedOn(java.util.LinkedHashSet)>($r60) >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.setFailedOn : r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet m_failedOn> = r1
org.apache.ambari.server.state.stack.PrerequisiteCheck.setFailedOn : r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet m_failedOn> = r1 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $r61 = <org.apache.ambari.server.state.stack.PrereqCheckStatus: org.apache.ambari.server.state.stack.PrereqCheckStatus FAIL>
org.apache.ambari.server.checks.ServicesUpCheck.perform : $r61 = <org.apache.ambari.server.state.stack.PrereqCheckStatus: org.apache.ambari.server.state.stack.PrereqCheckStatus FAIL> >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void setStatus(org.apache.ambari.server.state.stack.PrereqCheckStatus)>($r61)
org.apache.ambari.server.checks.ServicesUpCheck.perform : virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void setStatus(org.apache.ambari.server.state.stack.PrereqCheckStatus)>($r61) >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.setStatus : r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: org.apache.ambari.server.state.stack.PrereqCheckStatus m_status> = r1
org.apache.ambari.server.state.stack.PrerequisiteCheck.setStatus : r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: org.apache.ambari.server.state.stack.PrereqCheckStatus m_status> = r1 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $r62 = new java.lang.StringBuilder
org.apache.ambari.server.checks.ServicesUpCheck.perform : $r62 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : specialinvoke $r62.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.checks.ServicesUpCheck.perform : specialinvoke $r62.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The following Service Components should be in a started state.  Please invoke a service Stop and full Start and try again. ")
org.apache.ambari.server.checks.ServicesUpCheck.perform : $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The following Service Components should be in a started state.  Please invoke a service Stop and full Start and try again. ") >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $r64 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String join(java.util.Collection,java.lang.String)>(r5, ", ")
org.apache.ambari.server.checks.ServicesUpCheck.perform : $r64 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String join(java.util.Collection,java.lang.String)>(r5, ", ") >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $r65 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r64)
org.apache.ambari.server.checks.ServicesUpCheck.perform : $r65 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r64) >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.checks.ServicesUpCheck.perform : $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void setFailReason(java.lang.String)>($r66)
org.apache.ambari.server.checks.ServicesUpCheck.perform : virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void setFailReason(java.lang.String)>($r66) >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.setFailReason : r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.lang.String m_failReason> = r1
org.apache.ambari.server.state.stack.PrerequisiteCheck.setFailReason : r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.lang.String m_failReason> = r1 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $r42 = interfaceinvoke r10.<org.apache.ambari.server.state.Service: java.lang.String getName()>()
org.apache.ambari.server.checks.ServicesUpCheck.perform : $r42 = interfaceinvoke r10.<org.apache.ambari.server.state.Service: java.lang.String getName()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : interfaceinvoke r6.<java.util.Set: boolean add(java.lang.Object)>($r42)
org.apache.ambari.server.checks.ServicesUpCheck.perform : interfaceinvoke r6.<java.util.Set: boolean add(java.lang.Object)>($r42) >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $r43 = newarray (java.lang.Object)[5]
org.apache.ambari.server.checks.ServicesUpCheck.perform : $r43 = newarray (java.lang.Object)[5] >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $r44 = interfaceinvoke r10.<org.apache.ambari.server.state.Service: java.lang.String getName()>()
org.apache.ambari.server.checks.ServicesUpCheck.perform : $r44 = interfaceinvoke r10.<org.apache.ambari.server.state.Service: java.lang.String getName()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $r43[0] = $r44
org.apache.ambari.server.checks.ServicesUpCheck.perform : $r43[0] = $r44 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $r45 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2)
org.apache.ambari.server.checks.ServicesUpCheck.perform : $r45 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2) >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $r43[1] = $r45
org.apache.ambari.server.checks.ServicesUpCheck.perform : $r43[1] = $r45 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $r46 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1)
org.apache.ambari.server.checks.ServicesUpCheck.perform : $r46 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1) >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $r43[2] = $r46
org.apache.ambari.server.checks.ServicesUpCheck.perform : $r43[2] = $r46 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $r47 = interfaceinvoke r14.<org.apache.ambari.server.state.ServiceComponent: java.lang.String getName()>()
org.apache.ambari.server.checks.ServicesUpCheck.perform : $r47 = interfaceinvoke r14.<org.apache.ambari.server.state.ServiceComponent: java.lang.String getName()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $r43[3] = $r47
org.apache.ambari.server.checks.ServicesUpCheck.perform : $r43[3] = $r47 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $r48 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.5F)
org.apache.ambari.server.checks.ServicesUpCheck.perform : $r48 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.5F) >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : $r43[4] = $r48
org.apache.ambari.server.checks.ServicesUpCheck.perform : $r43[4] = $r48 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : r49 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>("{0}: {1} out of {2} {3} are started; there should be {4,number,percent} started before upgrading.", $r43)
org.apache.ambari.server.checks.ServicesUpCheck.perform : r49 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>("{0}: {1} out of {2} {3} are started; there should be {4,number,percent} started before upgrading.", $r43) >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.perform : interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>(r49)
org.apache.ambari.server.checks.ServicesUpCheck.perform : interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>(r49) >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.getFailReason : $r1 = r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.lang.String m_failReason>
org.apache.ambari.server.state.stack.PrerequisiteCheck.getFailReason : $r1 = r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.lang.String m_failReason> >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.getFailReason : return $r1
org.apache.ambari.server.state.stack.PrerequisiteCheck.getFailReason : return $r1 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $z0 = interfaceinvoke r2.<org.apache.ambari.server.state.ServiceComponent: boolean isMasterComponent()>()
org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $z0 = interfaceinvoke r2.<org.apache.ambari.server.state.ServiceComponent: boolean isMasterComponent()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : if $z0 != 0
org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : if $z0 != 0 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : return 0
