org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorTest.createFromFile : $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorTest.createFromFile : $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.ClassLoader getClassLoader()>()
org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorTest.createFromFile : $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.ClassLoader getClassLoader()>() >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorTest.createFromFile : r1 = virtualinvoke $r4.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>("service_level_kerberos.json")
org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorTest.createFromFile : r1 = virtualinvoke $r4.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>("service_level_kerberos.json") >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorTest.createFromFile : if r1 != null
org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorTest.createFromFile : if r1 != null >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorTest.createFromFile : $r5 = null
org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorTest.createFromFile : $r5 = null >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorTest.createFromFile : goto [?= r2 = $r5]
org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorTest.createFromFile : goto [?= r2 = $r5] >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorTest.createFromFile : r2 = $r5
org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorTest.createFromFile : r2 = $r5 >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorTest.createFromFile : $r7 = <org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorTest: org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorFactory KERBEROS_SERVICE_DESCRIPTOR_FACTORY>
org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorTest.createFromFile : $r7 = <org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorTest: org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorFactory KERBEROS_SERVICE_DESCRIPTOR_FACTORY> >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorTest.createFromFile : $r8 = virtualinvoke $r7.<org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorFactory: org.apache.ambari.server.state.kerberos.KerberosServiceDescriptor[] createInstances(java.io.File)>(r2)
org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorTest.createFromFile : $r8 = virtualinvoke $r7.<org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorFactory: org.apache.ambari.server.state.kerberos.KerberosServiceDescriptor[] createInstances(java.io.File)>(r2) >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorFactory.createInstances : $r3 = virtualinvoke r0.<org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorFactory: java.util.Map parseFile(java.io.File)>(r1)
org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorFactory.createInstances : $r3 = virtualinvoke r0.<org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorFactory: java.util.Map parseFile(java.io.File)>(r1) >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorFactory.parseFile : if r1 != null
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorFactory.parseFile : if r1 != null >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorFactory.parseFile : $r3 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>()
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorFactory.parseFile : $r3 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>() >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorFactory.parseFile : return $r3
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorFactory.parseFile : return $r3 >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorFactory.createInstances : $r4 = virtualinvoke r0.<org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorFactory: org.apache.ambari.server.state.kerberos.KerberosServiceDescriptor[] createInstances(java.util.Map)>($r3)
org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorFactory.createInstances : $r4 = virtualinvoke r0.<org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorFactory: org.apache.ambari.server.state.kerberos.KerberosServiceDescriptor[] createInstances(java.util.Map)>($r3) >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorFactory.createInstances : $r2 = new java.util.ArrayList
org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorFactory.createInstances : $r2 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorFactory.createInstances : specialinvoke $r2.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorFactory.createInstances : specialinvoke $r2.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorFactory.createInstances : r3 = $r2
org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorFactory.createInstances : r3 = $r2 >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorFactory.createInstances : if r1 == null
org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorFactory.createInstances : if r1 == null >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorFactory.createInstances : r4 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("services")
org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorFactory.createInstances : r4 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("services") >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorFactory.createInstances : if r4 != null
org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorFactory.createInstances : if r4 != null >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorFactory.createInstances : $r7 = new org.apache.ambari.server.AmbariException
org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorFactory.createInstances : $r7 = new org.apache.ambari.server.AmbariException >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorFactory.createInstances : specialinvoke $r7.<org.apache.ambari.server.AmbariException: void <init>(java.lang.String)>("Missing top-level \"services\" property in service-level Kerberos descriptor data")
org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorFactory.createInstances : specialinvoke $r7.<org.apache.ambari.server.AmbariException: void <init>(java.lang.String)>("Missing top-level \"services\" property in service-level Kerberos descriptor data") >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorFactory.createInstances : throw $r7
org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorFactory.createInstances : throw $r7 >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorFactory.createInstances : r2 = $r5
org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorFactory.createInstances : r2 = $r5 >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorFactory.createInstances : $r6 = new org.apache.ambari.server.AmbariException
org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorFactory.createInstances : $r6 = new org.apache.ambari.server.AmbariException >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorFactory.createInstances : $r7 = newarray (java.lang.Object)[1]
org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorFactory.createInstances : $r7 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosServiceDescriptorFactory.createInstances : $r8 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>()
