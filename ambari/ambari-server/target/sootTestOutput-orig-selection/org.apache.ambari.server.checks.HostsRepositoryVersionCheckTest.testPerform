org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r3 = virtualinvoke r2.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getClusterName()>() >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String m_clusterName>
org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String m_clusterName> >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : return $r1
org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : return $r1 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r13 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheck: com.google.inject.Provider clustersProvider>
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r13 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheck: com.google.inject.Provider clustersProvider> >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r14 = interfaceinvoke $r13.<com.google.inject.Provider: java.lang.Object get()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r14 = interfaceinvoke $r13.<com.google.inject.Provider: java.lang.Object get()>() >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$1.get : $r1 = virtualinvoke r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$1: org.apache.ambari.server.state.Clusters get()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$1.get : $r1 = virtualinvoke r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$1: org.apache.ambari.server.state.Clusters get()>() >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$1.get : $r1 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$1: org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest this$0>
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$1.get : $r1 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$1: org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest this$0> >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$1.get : $r2 = staticinvoke <org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest: org.apache.ambari.server.state.Clusters access$000(org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest)>($r1)
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$1.get : $r2 = staticinvoke <org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest: org.apache.ambari.server.state.Clusters access$000(org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest)>($r1) >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest.access$000 : $r1 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest: org.apache.ambari.server.state.Clusters clusters>
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest.access$000 : $r1 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest: org.apache.ambari.server.state.Clusters clusters> >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest.access$000 : return $r1
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest.access$000 : return $r1 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$1.get : return $r2
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$1.get : return $r2 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$1.get : return $r1
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$1.get : return $r1 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r15 = (org.apache.ambari.server.state.Clusters) $r14
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r15 = (org.apache.ambari.server.state.Clusters) $r14 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r4 = interfaceinvoke $r15.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>(r3)
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r4 = interfaceinvoke $r15.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>(r3) >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r16 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheck: com.google.inject.Provider clustersProvider>
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r16 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheck: com.google.inject.Provider clustersProvider> >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r17 = interfaceinvoke $r16.<com.google.inject.Provider: java.lang.Object get()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r17 = interfaceinvoke $r16.<com.google.inject.Provider: java.lang.Object get()>() >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r18 = (org.apache.ambari.server.state.Clusters) $r17
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r18 = (org.apache.ambari.server.state.Clusters) $r17 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r5 = interfaceinvoke $r18.<org.apache.ambari.server.state.Clusters: java.util.Map getHostsForCluster(java.lang.String)>(r3)
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r5 = interfaceinvoke $r18.<org.apache.ambari.server.state.Clusters: java.util.Map getHostsForCluster(java.lang.String)>(r3) >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r6 = interfaceinvoke r4.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.StackId getDesiredStackVersion()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r6 = interfaceinvoke r4.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.StackId getDesiredStackVersion()>() >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r19 = interfaceinvoke r5.<java.util.Map: java.util.Collection values()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r19 = interfaceinvoke r5.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r7 = interfaceinvoke $r19.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r7 = interfaceinvoke $r19.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : if $z1 == 0
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : if $z1 == 0 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r20 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r20 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r8 = (org.apache.ambari.server.state.Host) $r20
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r8 = (org.apache.ambari.server.state.Host) $r20 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $l0 = interfaceinvoke r4.<org.apache.ambari.server.state.Cluster: long getClusterId()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $l0 = interfaceinvoke r4.<org.apache.ambari.server.state.Cluster: long getClusterId()>() >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r9 = interfaceinvoke r8.<org.apache.ambari.server.state.Host: org.apache.ambari.server.state.MaintenanceState getMaintenanceState(long)>($l0)
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r9 = interfaceinvoke r8.<org.apache.ambari.server.state.Host: org.apache.ambari.server.state.MaintenanceState getMaintenanceState(long)>($l0) >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r21 = <org.apache.ambari.server.state.MaintenanceState: org.apache.ambari.server.state.MaintenanceState OFF>
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r21 = <org.apache.ambari.server.state.MaintenanceState: org.apache.ambari.server.state.MaintenanceState OFF> >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : if r9 == $r21
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : if r9 == $r21 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r22 = virtualinvoke r2.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getRepositoryVersion()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r22 = virtualinvoke r2.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getRepositoryVersion()>() >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getRepositoryVersion : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String m_repositoryVersion>
org.apache.ambari.server.controller.PrereqCheckRequest.getRepositoryVersion : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String m_repositoryVersion> >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getRepositoryVersion : return $r1
org.apache.ambari.server.controller.PrereqCheckRequest.getRepositoryVersion : return $r1 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : if null == $r22
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : if null == $r22 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r38 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheck: com.google.inject.Provider repositoryVersionDaoProvider>
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r38 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheck: com.google.inject.Provider repositoryVersionDaoProvider> >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r39 = interfaceinvoke $r38.<com.google.inject.Provider: java.lang.Object get()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r39 = interfaceinvoke $r38.<com.google.inject.Provider: java.lang.Object get()>() >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$2.get : $r1 = virtualinvoke r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$2: org.apache.ambari.server.orm.dao.RepositoryVersionDAO get()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$2.get : $r1 = virtualinvoke r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$2: org.apache.ambari.server.orm.dao.RepositoryVersionDAO get()>() >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$2.get : $r1 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$2: org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest this$0>
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$2.get : $r1 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$2: org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest this$0> >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$2.get : $r2 = staticinvoke <org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest: org.apache.ambari.server.orm.dao.RepositoryVersionDAO access$100(org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest)>($r1)
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$2.get : $r2 = staticinvoke <org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest: org.apache.ambari.server.orm.dao.RepositoryVersionDAO access$100(org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest)>($r1) >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest.access$100 : $r1 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest: org.apache.ambari.server.orm.dao.RepositoryVersionDAO repositoryVersionDAO>
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest.access$100 : $r1 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest: org.apache.ambari.server.orm.dao.RepositoryVersionDAO repositoryVersionDAO> >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest.access$100 : return $r1
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest.access$100 : return $r1 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$2.get : return $r2
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$2.get : return $r2 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$2.get : return $r1
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$2.get : return $r1 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r40 = (org.apache.ambari.server.orm.dao.RepositoryVersionDAO) $r39
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r40 = (org.apache.ambari.server.orm.dao.RepositoryVersionDAO) $r39 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r41 = virtualinvoke r2.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getRepositoryVersion()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r41 = virtualinvoke r2.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getRepositoryVersion()>() >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r42 = virtualinvoke $r40.<org.apache.ambari.server.orm.dao.RepositoryVersionDAO: org.apache.ambari.server.orm.entities.RepositoryVersionEntity findByStackAndVersion(org.apache.ambari.server.state.StackId,java.lang.String)>(r6, $r41)
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r42 = virtualinvoke $r40.<org.apache.ambari.server.orm.dao.RepositoryVersionDAO: org.apache.ambari.server.orm.entities.RepositoryVersionEntity findByStackAndVersion(org.apache.ambari.server.state.StackId,java.lang.String)>(r6, $r41) >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : if r42 != null
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : if r42 != null >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r43 = <org.apache.ambari.server.state.stack.PrereqCheckStatus: org.apache.ambari.server.state.stack.PrereqCheckStatus FAIL>
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r43 = <org.apache.ambari.server.state.stack.PrereqCheckStatus: org.apache.ambari.server.state.stack.PrereqCheckStatus FAIL> >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void setStatus(org.apache.ambari.server.state.stack.PrereqCheckStatus)>($r43)
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void setStatus(org.apache.ambari.server.state.stack.PrereqCheckStatus)>($r43) >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.setStatus : r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: org.apache.ambari.server.state.stack.PrereqCheckStatus m_status> = r1
org.apache.ambari.server.state.stack.PrerequisiteCheck.setStatus : r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: org.apache.ambari.server.state.stack.PrereqCheckStatus m_status> = r1 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r44 = virtualinvoke r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheck: java.lang.String getFailReason(java.lang.String,org.apache.ambari.server.state.stack.PrerequisiteCheck,org.apache.ambari.server.controller.PrereqCheckRequest)>("no_repo_version", r1, r2)
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r44 = virtualinvoke r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheck: java.lang.String getFailReason(java.lang.String,org.apache.ambari.server.state.stack.PrerequisiteCheck,org.apache.ambari.server.controller.PrereqCheckRequest)>("no_repo_version", r1, r2) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $r13 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: org.apache.ambari.server.checks.CheckDescription m_description>
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $r13 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: org.apache.ambari.server.checks.CheckDescription m_description> >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : r4 = virtualinvoke $r13.<org.apache.ambari.server.checks.CheckDescription: java.lang.String getFail(java.lang.String)>(r1)
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : r4 = virtualinvoke $r13.<org.apache.ambari.server.checks.CheckDescription: java.lang.String getFail(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : $r2 = r0.<org.apache.ambari.server.checks.CheckDescription: java.util.Map m_fails>
org.apache.ambari.server.checks.CheckDescription.getFail : $r2 = r0.<org.apache.ambari.server.checks.CheckDescription: java.util.Map m_fails> >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1)
org.apache.ambari.server.checks.CheckDescription.getFail : $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : if $z0 == 0
org.apache.ambari.server.checks.CheckDescription.getFail : if $z0 == 0 >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : $r3 = r0.<org.apache.ambari.server.checks.CheckDescription: java.util.Map m_fails>
org.apache.ambari.server.checks.CheckDescription.getFail : $r3 = r0.<org.apache.ambari.server.checks.CheckDescription: java.util.Map m_fails> >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.ambari.server.checks.CheckDescription.getFail : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : $r5 = (java.lang.String) $r4
org.apache.ambari.server.checks.CheckDescription.getFail : $r5 = (java.lang.String) $r4 >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : goto [?= return $r5]
org.apache.ambari.server.checks.CheckDescription.getFail : goto [?= return $r5] >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : return $r5
org.apache.ambari.server.checks.CheckDescription.getFail : return $r5 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $z0 = virtualinvoke r4.<java.lang.String: boolean contains(java.lang.CharSequence)>("{{version}}")
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $z0 = virtualinvoke r4.<java.lang.String: boolean contains(java.lang.CharSequence)>("{{version}}") >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : if $z0 == 0
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : if $z0 == 0 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $r14 = virtualinvoke r3.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getRepositoryVersion()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $r14 = virtualinvoke r3.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getRepositoryVersion()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : if null == $r14
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : if null == $r14 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $z1 = virtualinvoke r4.<java.lang.String: boolean contains(java.lang.CharSequence)>("{{fails}}")
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $z1 = virtualinvoke r4.<java.lang.String: boolean contains(java.lang.CharSequence)>("{{fails}}") >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : if $z1 == 0
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : if $z1 == 0 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : return r4
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : return r4 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void setFailReason(java.lang.String)>($r44)
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void setFailReason(java.lang.String)>($r44) >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.setFailReason : r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.lang.String m_failReason> = r1
org.apache.ambari.server.state.stack.PrerequisiteCheck.setFailReason : r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.lang.String m_failReason> = r1 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r45 = virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet getFailedOn()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r45 = virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet getFailedOn()>() >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.getFailedOn : $r1 = r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet m_failedOn>
org.apache.ambari.server.state.stack.PrerequisiteCheck.getFailedOn : $r1 = r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet m_failedOn> >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.getFailedOn : return $r1
org.apache.ambari.server.state.stack.PrerequisiteCheck.getFailedOn : return $r1 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r46 = interfaceinvoke r5.<java.util.Map: java.util.Set keySet()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r46 = interfaceinvoke r5.<java.util.Map: java.util.Set keySet()>() >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : virtualinvoke $r45.<java.util.LinkedHashSet: boolean addAll(java.util.Collection)>($r46)
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : virtualinvoke $r45.<java.util.LinkedHashSet: boolean addAll(java.util.Collection)>($r46) >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.getStatus : $r1 = r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: org.apache.ambari.server.state.stack.PrereqCheckStatus m_status>
org.apache.ambari.server.state.stack.PrerequisiteCheck.getStatus : $r1 = r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: org.apache.ambari.server.state.stack.PrereqCheckStatus m_status> >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.getStatus : return $r1
org.apache.ambari.server.state.stack.PrerequisiteCheck.getStatus : return $r1 >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity.setStackName : virtualinvoke r0.<org.apache.ambari.server.orm.entities.StackEntity: void _persistence_set_stackName(java.lang.String)>(r1)
org.apache.ambari.server.orm.entities.StackEntity.setStackName : virtualinvoke r0.<org.apache.ambari.server.orm.entities.StackEntity: void _persistence_set_stackName(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity._persistence_set_stackName : virtualinvoke r0.<org.apache.ambari.server.orm.entities.StackEntity: void _persistence_checkFetchedForSet(java.lang.String)>("stackName")
org.apache.ambari.server.orm.entities.StackEntity._persistence_set_stackName : virtualinvoke r0.<org.apache.ambari.server.orm.entities.StackEntity: void _persistence_checkFetchedForSet(java.lang.String)>("stackName") >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity._persistence_checkFetchedForSet : $z0 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.StackEntity: boolean _persistence_isAttributeFetched(java.lang.String)>(r1)
org.apache.ambari.server.orm.entities.StackEntity._persistence_checkFetchedForSet : $z0 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.StackEntity: boolean _persistence_isAttributeFetched(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity._persistence_isAttributeFetched : $r2 = r0.<org.apache.ambari.server.orm.entities.StackEntity: org.eclipse.persistence.queries.FetchGroup _persistence_fetchGroup>
org.apache.ambari.server.orm.entities.StackEntity._persistence_isAttributeFetched : $r2 = r0.<org.apache.ambari.server.orm.entities.StackEntity: org.eclipse.persistence.queries.FetchGroup _persistence_fetchGroup> >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity._persistence_isAttributeFetched : if $r2 == null
org.apache.ambari.server.orm.entities.StackEntity._persistence_isAttributeFetched : if $r2 == null >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity._persistence_isAttributeFetched : $z1 = 1
org.apache.ambari.server.orm.entities.StackEntity._persistence_isAttributeFetched : $z1 = 1 >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity._persistence_isAttributeFetched : goto [?= return $z1]
org.apache.ambari.server.orm.entities.StackEntity._persistence_isAttributeFetched : goto [?= return $z1] >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity._persistence_isAttributeFetched : return $z1
org.apache.ambari.server.orm.entities.StackEntity._persistence_isAttributeFetched : return $z1 >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity._persistence_checkFetchedForSet : if $z0 != 0
org.apache.ambari.server.orm.entities.StackEntity._persistence_checkFetchedForSet : if $z0 != 0 >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity._persistence_set_stackName : $r2 = r0.<org.apache.ambari.server.orm.entities.StackEntity: java.lang.String stackName>
org.apache.ambari.server.orm.entities.StackEntity._persistence_set_stackName : $r2 = r0.<org.apache.ambari.server.orm.entities.StackEntity: java.lang.String stackName> >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity._persistence_set_stackName : virtualinvoke r0.<org.apache.ambari.server.orm.entities.StackEntity: void _persistence_propertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("stackName", $r2, r1)
org.apache.ambari.server.orm.entities.StackEntity._persistence_set_stackName : virtualinvoke r0.<org.apache.ambari.server.orm.entities.StackEntity: void _persistence_propertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("stackName", $r2, r1) >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity._persistence_propertyChange : $r4 = r0.<org.apache.ambari.server.orm.entities.StackEntity: java.beans.PropertyChangeListener _persistence_listener>
org.apache.ambari.server.orm.entities.StackEntity._persistence_propertyChange : $r4 = r0.<org.apache.ambari.server.orm.entities.StackEntity: java.beans.PropertyChangeListener _persistence_listener> >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity._persistence_propertyChange : if $r4 == null
org.apache.ambari.server.orm.entities.StackEntity._persistence_propertyChange : if $r4 == null >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity._persistence_set_stackName : r0.<org.apache.ambari.server.orm.entities.StackEntity: java.lang.String stackName> = r1
org.apache.ambari.server.orm.entities.StackEntity._persistence_set_stackName : r0.<org.apache.ambari.server.orm.entities.StackEntity: java.lang.String stackName> = r1 >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity.setStackVersion : virtualinvoke r0.<org.apache.ambari.server.orm.entities.StackEntity: void _persistence_set_stackVersion(java.lang.String)>(r1)
org.apache.ambari.server.orm.entities.StackEntity.setStackVersion : virtualinvoke r0.<org.apache.ambari.server.orm.entities.StackEntity: void _persistence_set_stackVersion(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity._persistence_set_stackVersion : virtualinvoke r0.<org.apache.ambari.server.orm.entities.StackEntity: void _persistence_checkFetchedForSet(java.lang.String)>("stackVersion")
org.apache.ambari.server.orm.entities.StackEntity._persistence_set_stackVersion : virtualinvoke r0.<org.apache.ambari.server.orm.entities.StackEntity: void _persistence_checkFetchedForSet(java.lang.String)>("stackVersion") >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity._persistence_set_stackVersion : $r2 = r0.<org.apache.ambari.server.orm.entities.StackEntity: java.lang.String stackVersion>
org.apache.ambari.server.orm.entities.StackEntity._persistence_set_stackVersion : $r2 = r0.<org.apache.ambari.server.orm.entities.StackEntity: java.lang.String stackVersion> >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity._persistence_set_stackVersion : virtualinvoke r0.<org.apache.ambari.server.orm.entities.StackEntity: void _persistence_propertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("stackVersion", $r2, r1)
org.apache.ambari.server.orm.entities.StackEntity._persistence_set_stackVersion : virtualinvoke r0.<org.apache.ambari.server.orm.entities.StackEntity: void _persistence_propertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("stackVersion", $r2, r1) >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity._persistence_set_stackVersion : r0.<org.apache.ambari.server.orm.entities.StackEntity: java.lang.String stackVersion> = r1
org.apache.ambari.server.orm.entities.StackEntity._persistence_set_stackVersion : r0.<org.apache.ambari.server.orm.entities.StackEntity: java.lang.String stackVersion> = r1 >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity.setStack : virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: void _persistence_set_stack(org.apache.ambari.server.orm.entities.StackEntity)>(r1)
org.apache.ambari.server.orm.entities.RepositoryVersionEntity.setStack : virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: void _persistence_set_stack(org.apache.ambari.server.orm.entities.StackEntity)>(r1) >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_set_stack : virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: void _persistence_checkFetchedForSet(java.lang.String)>("stack")
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_set_stack : virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: void _persistence_checkFetchedForSet(java.lang.String)>("stack") >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_checkFetchedForSet : $z0 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: boolean _persistence_isAttributeFetched(java.lang.String)>(r1)
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_checkFetchedForSet : $z0 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: boolean _persistence_isAttributeFetched(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_isAttributeFetched : $r2 = r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: org.eclipse.persistence.queries.FetchGroup _persistence_fetchGroup>
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_isAttributeFetched : $r2 = r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: org.eclipse.persistence.queries.FetchGroup _persistence_fetchGroup> >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_isAttributeFetched : if $r2 == null
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_isAttributeFetched : if $r2 == null >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_isAttributeFetched : $z1 = 1
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_isAttributeFetched : $z1 = 1 >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_isAttributeFetched : goto [?= return $z1]
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_isAttributeFetched : goto [?= return $z1] >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_isAttributeFetched : return $z1
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_isAttributeFetched : return $z1 >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_checkFetchedForSet : if $z0 != 0
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_checkFetchedForSet : if $z0 != 0 >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_set_stack : $r2 = r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: org.apache.ambari.server.orm.entities.StackEntity stack>
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_set_stack : $r2 = r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: org.apache.ambari.server.orm.entities.StackEntity stack> >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_set_stack : virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: void _persistence_propertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("stack", $r2, r1)
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_set_stack : virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: void _persistence_propertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("stack", $r2, r1) >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_propertyChange : $r4 = r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: java.beans.PropertyChangeListener _persistence_listener>
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_propertyChange : $r4 = r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: java.beans.PropertyChangeListener _persistence_listener> >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_propertyChange : if $r4 == null
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_propertyChange : if $r4 == null >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_set_stack : r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: org.apache.ambari.server.orm.entities.StackEntity stack> = r1
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_set_stack : r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: org.apache.ambari.server.orm.entities.StackEntity stack> = r1 >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity.setState : virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: void _persistence_set_state(org.apache.ambari.server.state.RepositoryVersionState)>(r1)
org.apache.ambari.server.orm.entities.HostVersionEntity.setState : virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: void _persistence_set_state(org.apache.ambari.server.state.RepositoryVersionState)>(r1) >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_set_state : virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: void _persistence_checkFetchedForSet(java.lang.String)>("state")
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_set_state : virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: void _persistence_checkFetchedForSet(java.lang.String)>("state") >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_checkFetchedForSet : $z0 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: boolean _persistence_isAttributeFetched(java.lang.String)>(r1)
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_checkFetchedForSet : $z0 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: boolean _persistence_isAttributeFetched(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_isAttributeFetched : $r2 = r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: org.eclipse.persistence.queries.FetchGroup _persistence_fetchGroup>
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_isAttributeFetched : $r2 = r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: org.eclipse.persistence.queries.FetchGroup _persistence_fetchGroup> >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_isAttributeFetched : if $r2 == null
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_isAttributeFetched : if $r2 == null >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_isAttributeFetched : $z1 = 1
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_isAttributeFetched : $z1 = 1 >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_isAttributeFetched : goto [?= return $z1]
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_isAttributeFetched : goto [?= return $z1] >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_isAttributeFetched : return $z1
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_isAttributeFetched : return $z1 >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_checkFetchedForSet : if $z0 != 0
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_checkFetchedForSet : if $z0 != 0 >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_set_state : $r2 = r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: org.apache.ambari.server.state.RepositoryVersionState state>
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_set_state : $r2 = r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: org.apache.ambari.server.state.RepositoryVersionState state> >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_set_state : virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: void _persistence_propertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("state", $r2, r1)
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_set_state : virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: void _persistence_propertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("state", $r2, r1) >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_propertyChange : $r4 = r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: java.beans.PropertyChangeListener _persistence_listener>
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_propertyChange : $r4 = r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: java.beans.PropertyChangeListener _persistence_listener> >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_propertyChange : if $r4 == null
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_propertyChange : if $r4 == null >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_set_state : r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: org.apache.ambari.server.state.RepositoryVersionState state> = r1
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_set_state : r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: org.apache.ambari.server.state.RepositoryVersionState state> = r1 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r47 = virtualinvoke r42.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: org.apache.ambari.server.orm.entities.StackEntity getStack()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r47 = virtualinvoke r42.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: org.apache.ambari.server.orm.entities.StackEntity getStack()>() >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity.getStack : $r1 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: org.apache.ambari.server.orm.entities.StackEntity _persistence_get_stack()>()
org.apache.ambari.server.orm.entities.RepositoryVersionEntity.getStack : $r1 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: org.apache.ambari.server.orm.entities.StackEntity _persistence_get_stack()>() >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_get_stack : virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: void _persistence_checkFetched(java.lang.String)>("stack")
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_get_stack : virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: void _persistence_checkFetched(java.lang.String)>("stack") >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_checkFetched : $z0 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: boolean _persistence_isAttributeFetched(java.lang.String)>(r1)
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_checkFetched : $z0 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: boolean _persistence_isAttributeFetched(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_checkFetched : if $z0 != 0
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_checkFetched : if $z0 != 0 >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_get_stack : $r1 = r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: org.apache.ambari.server.orm.entities.StackEntity stack>
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_get_stack : $r1 = r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: org.apache.ambari.server.orm.entities.StackEntity stack> >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_get_stack : return $r1
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_get_stack : return $r1 >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity.getStack : return $r1
org.apache.ambari.server.orm.entities.RepositoryVersionEntity.getStack : return $r1 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r48 = new org.apache.ambari.server.state.StackId
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r48 = new org.apache.ambari.server.state.StackId >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r49 = virtualinvoke r47.<org.apache.ambari.server.orm.entities.StackEntity: java.lang.String getStackName()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r49 = virtualinvoke r47.<org.apache.ambari.server.orm.entities.StackEntity: java.lang.String getStackName()>() >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity.getStackName : $r1 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.StackEntity: java.lang.String _persistence_get_stackName()>()
org.apache.ambari.server.orm.entities.StackEntity.getStackName : $r1 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.StackEntity: java.lang.String _persistence_get_stackName()>() >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity._persistence_get_stackName : virtualinvoke r0.<org.apache.ambari.server.orm.entities.StackEntity: void _persistence_checkFetched(java.lang.String)>("stackName")
org.apache.ambari.server.orm.entities.StackEntity._persistence_get_stackName : virtualinvoke r0.<org.apache.ambari.server.orm.entities.StackEntity: void _persistence_checkFetched(java.lang.String)>("stackName") >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity._persistence_checkFetched : $z0 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.StackEntity: boolean _persistence_isAttributeFetched(java.lang.String)>(r1)
org.apache.ambari.server.orm.entities.StackEntity._persistence_checkFetched : $z0 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.StackEntity: boolean _persistence_isAttributeFetched(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity._persistence_checkFetched : if $z0 != 0
org.apache.ambari.server.orm.entities.StackEntity._persistence_checkFetched : if $z0 != 0 >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity._persistence_get_stackName : $r1 = r0.<org.apache.ambari.server.orm.entities.StackEntity: java.lang.String stackName>
org.apache.ambari.server.orm.entities.StackEntity._persistence_get_stackName : $r1 = r0.<org.apache.ambari.server.orm.entities.StackEntity: java.lang.String stackName> >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity._persistence_get_stackName : return $r1
org.apache.ambari.server.orm.entities.StackEntity._persistence_get_stackName : return $r1 >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity.getStackName : return $r1
org.apache.ambari.server.orm.entities.StackEntity.getStackName : return $r1 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r50 = virtualinvoke r47.<org.apache.ambari.server.orm.entities.StackEntity: java.lang.String getStackVersion()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r50 = virtualinvoke r47.<org.apache.ambari.server.orm.entities.StackEntity: java.lang.String getStackVersion()>() >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity.getStackVersion : $r1 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.StackEntity: java.lang.String _persistence_get_stackVersion()>()
org.apache.ambari.server.orm.entities.StackEntity.getStackVersion : $r1 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.StackEntity: java.lang.String _persistence_get_stackVersion()>() >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity._persistence_get_stackVersion : virtualinvoke r0.<org.apache.ambari.server.orm.entities.StackEntity: void _persistence_checkFetched(java.lang.String)>("stackVersion")
org.apache.ambari.server.orm.entities.StackEntity._persistence_get_stackVersion : virtualinvoke r0.<org.apache.ambari.server.orm.entities.StackEntity: void _persistence_checkFetched(java.lang.String)>("stackVersion") >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity._persistence_get_stackVersion : $r1 = r0.<org.apache.ambari.server.orm.entities.StackEntity: java.lang.String stackVersion>
org.apache.ambari.server.orm.entities.StackEntity._persistence_get_stackVersion : $r1 = r0.<org.apache.ambari.server.orm.entities.StackEntity: java.lang.String stackVersion> >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity._persistence_get_stackVersion : return $r1
org.apache.ambari.server.orm.entities.StackEntity._persistence_get_stackVersion : return $r1 >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity.getStackVersion : return $r1
org.apache.ambari.server.orm.entities.StackEntity.getStackVersion : return $r1 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : specialinvoke $r48.<org.apache.ambari.server.state.StackId: void <init>(java.lang.String,java.lang.String)>($r49, $r50)
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : specialinvoke $r48.<org.apache.ambari.server.state.StackId: void <init>(java.lang.String,java.lang.String)>($r49, $r50) >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : if r2 == null
org.apache.ambari.server.state.StackId.parseStackIdHelper : if r2 == null >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $z0 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>()
org.apache.ambari.server.state.StackId.parseStackIdHelper : $z0 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : if $z0 == 0
org.apache.ambari.server.state.StackId.parseStackIdHelper : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : i0 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(45)
org.apache.ambari.server.state.StackId.parseStackIdHelper : i0 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(45) >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : if i0 == -1
org.apache.ambari.server.state.StackId.parseStackIdHelper : if i0 == -1 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $i1 = virtualinvoke r2.<java.lang.String: int length()>()
org.apache.ambari.server.state.StackId.parseStackIdHelper : $i1 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $i2 = i0 + 1
org.apache.ambari.server.state.StackId.parseStackIdHelper : $i2 = i0 + 1 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : if $i1 > $i2
org.apache.ambari.server.state.StackId.parseStackIdHelper : if $i1 > $i2 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $r8 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0)
org.apache.ambari.server.state.StackId.parseStackIdHelper : $r8 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0) >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : r1.<org.apache.ambari.server.state.StackId: java.lang.String stackName> = $r8
org.apache.ambari.server.state.StackId.parseStackIdHelper : r1.<org.apache.ambari.server.state.StackId: java.lang.String stackName> = $r8 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $i3 = i0 + 1
org.apache.ambari.server.state.StackId.parseStackIdHelper : $i3 = i0 + 1 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $r9 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i3)
org.apache.ambari.server.state.StackId.parseStackIdHelper : $r9 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i3) >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : r1.<org.apache.ambari.server.state.StackId: java.lang.String stackVersion> = $r9
org.apache.ambari.server.state.StackId.parseStackIdHelper : r1.<org.apache.ambari.server.state.StackId: java.lang.String stackVersion> = $r9 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r51 = $r48
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r51 = $r48 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r52 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheck: com.google.inject.Provider hostVersionDaoProvider>
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r52 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheck: com.google.inject.Provider hostVersionDaoProvider> >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r53 = interfaceinvoke $r52.<com.google.inject.Provider: java.lang.Object get()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r53 = interfaceinvoke $r52.<com.google.inject.Provider: java.lang.Object get()>() >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$3.get : $r1 = virtualinvoke r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$3: org.apache.ambari.server.orm.dao.HostVersionDAO get()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$3.get : $r1 = virtualinvoke r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$3: org.apache.ambari.server.orm.dao.HostVersionDAO get()>() >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$3.get : $r1 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$3: org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest this$0>
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$3.get : $r1 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$3: org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest this$0> >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$3.get : $r2 = staticinvoke <org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest: org.apache.ambari.server.orm.dao.HostVersionDAO access$200(org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest)>($r1)
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$3.get : $r2 = staticinvoke <org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest: org.apache.ambari.server.orm.dao.HostVersionDAO access$200(org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest)>($r1) >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest.access$200 : $r1 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest: org.apache.ambari.server.orm.dao.HostVersionDAO hostVersionDAO>
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest.access$200 : $r1 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest: org.apache.ambari.server.orm.dao.HostVersionDAO hostVersionDAO> >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest.access$200 : return $r1
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest.access$200 : return $r1 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$3.get : return $r2
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$3.get : return $r2 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$3.get : return $r1
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$3.get : return $r1 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r54 = (org.apache.ambari.server.orm.dao.HostVersionDAO) $r53
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r54 = (org.apache.ambari.server.orm.dao.HostVersionDAO) $r53 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r55 = virtualinvoke r42.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: java.lang.String getVersion()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r55 = virtualinvoke r42.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: java.lang.String getVersion()>() >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity.getVersion : $r1 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: java.lang.String _persistence_get_version()>()
org.apache.ambari.server.orm.entities.RepositoryVersionEntity.getVersion : $r1 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: java.lang.String _persistence_get_version()>() >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_get_version : virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: void _persistence_checkFetched(java.lang.String)>("version")
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_get_version : virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: void _persistence_checkFetched(java.lang.String)>("version") >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_get_version : $r1 = r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: java.lang.String version>
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_get_version : $r1 = r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: java.lang.String version> >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_get_version : return $r1
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_get_version : return $r1 >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity.getVersion : return $r1
org.apache.ambari.server.orm.entities.RepositoryVersionEntity.getVersion : return $r1 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r56 = interfaceinvoke r8.<org.apache.ambari.server.state.Host: java.lang.String getHostName()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r56 = interfaceinvoke r8.<org.apache.ambari.server.state.Host: java.lang.String getHostName()>() >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r12 = virtualinvoke $r54.<org.apache.ambari.server.orm.dao.HostVersionDAO: org.apache.ambari.server.orm.entities.HostVersionEntity findByClusterStackVersionAndHost(java.lang.String,org.apache.ambari.server.state.StackId,java.lang.String,java.lang.String)>(r3, r51, $r55, $r56)
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r12 = virtualinvoke $r54.<org.apache.ambari.server.orm.dao.HostVersionDAO: org.apache.ambari.server.orm.entities.HostVersionEntity findByClusterStackVersionAndHost(java.lang.String,org.apache.ambari.server.state.StackId,java.lang.String,java.lang.String)>(r3, r51, $r55, $r56) >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : if r12 == null
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : if r12 == null >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r57 = virtualinvoke r12.<org.apache.ambari.server.orm.entities.HostVersionEntity: org.apache.ambari.server.state.RepositoryVersionState getState()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r57 = virtualinvoke r12.<org.apache.ambari.server.orm.entities.HostVersionEntity: org.apache.ambari.server.state.RepositoryVersionState getState()>() >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity.getState : $r1 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: org.apache.ambari.server.state.RepositoryVersionState _persistence_get_state()>()
org.apache.ambari.server.orm.entities.HostVersionEntity.getState : $r1 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: org.apache.ambari.server.state.RepositoryVersionState _persistence_get_state()>() >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_get_state : virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: void _persistence_checkFetched(java.lang.String)>("state")
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_get_state : virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: void _persistence_checkFetched(java.lang.String)>("state") >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_checkFetched : $z0 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: boolean _persistence_isAttributeFetched(java.lang.String)>(r1)
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_checkFetched : $z0 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: boolean _persistence_isAttributeFetched(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_checkFetched : if $z0 != 0
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_checkFetched : if $z0 != 0 >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_get_state : $r1 = r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: org.apache.ambari.server.state.RepositoryVersionState state>
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_get_state : $r1 = r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: org.apache.ambari.server.state.RepositoryVersionState state> >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_get_state : return $r1
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_get_state : return $r1 >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity.getState : return $r1
org.apache.ambari.server.orm.entities.HostVersionEntity.getState : return $r1 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r58 = <org.apache.ambari.server.state.RepositoryVersionState: org.apache.ambari.server.state.RepositoryVersionState INSTALLED>
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r58 = <org.apache.ambari.server.state.RepositoryVersionState: org.apache.ambari.server.state.RepositoryVersionState INSTALLED> >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : if $r57 == $r58
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : if $r57 == $r58 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : goto [?= $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : goto [?= $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r61 = virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet getFailedOn()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r61 = virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet getFailedOn()>() >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $z7 = virtualinvoke $r61.<java.util.LinkedHashSet: boolean isEmpty()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $z7 = virtualinvoke $r61.<java.util.LinkedHashSet: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : if $z7 != 0
