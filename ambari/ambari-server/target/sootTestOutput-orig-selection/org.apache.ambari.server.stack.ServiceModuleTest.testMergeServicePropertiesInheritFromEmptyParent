org.apache.ambari.server.state.ServiceInfo.ensureMandatoryServiceProperties : $r2 = specialinvoke r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Map ensureVisibilityServiceProperties(java.util.Map)>(r1) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r2 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_INSTALLABLE_PROPERTY>
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r2 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_INSTALLABLE_PROPERTY> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r4 = virtualinvoke $r2.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>()
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r4 = virtualinvoke $r2.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $z0 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r4)
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $z0 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r4) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : if $z0 != 0
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : if $z0 != 0 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r5 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_INSTALLABLE_PROPERTY>
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r5 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_INSTALLABLE_PROPERTY> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r6 = virtualinvoke $r5.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>()
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r6 = virtualinvoke $r5.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r3 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_INSTALLABLE_PROPERTY>
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r3 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_INSTALLABLE_PROPERTY> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r7 = virtualinvoke $r3.<java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>()
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r7 = virtualinvoke $r3.<java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7)
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r9 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MANAGED_PROPERTY>
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r9 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MANAGED_PROPERTY> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r10 = virtualinvoke $r9.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>()
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r10 = virtualinvoke $r9.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $z1 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r10)
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $z1 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r10) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : if $z1 != 0
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : if $z1 != 0 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r11 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MANAGED_PROPERTY>
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r11 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MANAGED_PROPERTY> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r12 = virtualinvoke $r11.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>()
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r12 = virtualinvoke $r11.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r13 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MANAGED_PROPERTY>
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r13 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MANAGED_PROPERTY> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r14 = virtualinvoke $r13.<java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>()
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r14 = virtualinvoke $r13.<java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r14)
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r14) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r16 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MONITORED_PROPERTY>
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r16 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MONITORED_PROPERTY> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r17 = virtualinvoke $r16.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>()
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r17 = virtualinvoke $r16.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $z2 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r17)
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $z2 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r17) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : if $z2 != 0
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : if $z2 != 0 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r18 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MONITORED_PROPERTY>
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r18 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MONITORED_PROPERTY> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r19 = virtualinvoke $r18.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>()
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r19 = virtualinvoke $r18.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r20 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MONITORED_PROPERTY>
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r20 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MONITORED_PROPERTY> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r21 = virtualinvoke $r20.<java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>()
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r21 = virtualinvoke $r20.<java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, $r21)
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, $r21) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : return r1
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : return r1 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureMandatoryServiceProperties : return $r2
org.apache.ambari.server.state.ServiceInfo.ensureMandatoryServiceProperties : return $r2 >>>>>>>> org.apache.ambari.server.state.ServicePropertyInfo.setName : r0.<org.apache.ambari.server.state.ServicePropertyInfo: java.lang.String name> = r1
org.apache.ambari.server.state.ServicePropertyInfo.setName : r0.<org.apache.ambari.server.state.ServicePropertyInfo: java.lang.String name> = r1 >>>>>>>> org.apache.ambari.server.state.ServicePropertyInfo.setValue : r0.<org.apache.ambari.server.state.ServicePropertyInfo: java.lang.String value> = r1
org.apache.ambari.server.state.ServicePropertyInfo.setValue : r0.<org.apache.ambari.server.state.ServicePropertyInfo: java.lang.String value> = r1 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setServicePropertyList : r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List servicePropertyList> = r1
org.apache.ambari.server.state.ServiceInfo.setServicePropertyList : r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List servicePropertyList> = r1 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setServicePropertyList : specialinvoke r0.<org.apache.ambari.server.state.ServiceInfo: void afterServicePropertyListSet()>()
org.apache.ambari.server.state.ServiceInfo.setServicePropertyList : specialinvoke r0.<org.apache.ambari.server.state.ServiceInfo: void afterServicePropertyListSet()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.afterServicePropertyListSet : specialinvoke r0.<org.apache.ambari.server.state.ServiceInfo: void validateServiceProperties()>()
org.apache.ambari.server.state.ServiceInfo.afterServicePropertyListSet : specialinvoke r0.<org.apache.ambari.server.state.ServiceInfo: void validateServiceProperties()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $r7 = virtualinvoke r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List getServicePropertyList()>()
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $r7 = virtualinvoke r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List getServicePropertyList()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getServicePropertyList : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List servicePropertyList>
org.apache.ambari.server.state.ServiceInfo.getServicePropertyList : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List servicePropertyList> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getServicePropertyList : return $r1
org.apache.ambari.server.state.ServiceInfo.getServicePropertyList : return $r1 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $r1 = new org.apache.ambari.server.state.ServiceInfo$1
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $r1 = new org.apache.ambari.server.state.ServiceInfo$1 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : specialinvoke $r1.<org.apache.ambari.server.state.ServiceInfo$1: void <init>(org.apache.ambari.server.state.ServiceInfo)>(r0)
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : specialinvoke $r1.<org.apache.ambari.server.state.ServiceInfo$1: void <init>(org.apache.ambari.server.state.ServiceInfo)>(r0) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : r2 = staticinvoke <com.google.common.collect.Multimaps: com.google.common.collect.ImmutableListMultimap index(java.lang.Iterable,com.google.common.base.Function)>($r7, $r1)
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : r2 = staticinvoke <com.google.common.collect.Multimaps: com.google.common.collect.ImmutableListMultimap index(java.lang.Iterable,com.google.common.base.Function)>($r7, $r1) >>>>>>>> org.apache.ambari.server.state.ServiceInfo$1.apply : $r2 = (org.apache.ambari.server.state.ServicePropertyInfo) r1
org.apache.ambari.server.state.ServiceInfo$1.apply : $r2 = (org.apache.ambari.server.state.ServicePropertyInfo) r1 >>>>>>>> org.apache.ambari.server.state.ServiceInfo$1.apply : $r3 = virtualinvoke r0.<org.apache.ambari.server.state.ServiceInfo$1: java.lang.String apply(org.apache.ambari.server.state.ServicePropertyInfo)>($r2)
org.apache.ambari.server.state.ServiceInfo$1.apply : $r3 = virtualinvoke r0.<org.apache.ambari.server.state.ServiceInfo$1: java.lang.String apply(org.apache.ambari.server.state.ServicePropertyInfo)>($r2) >>>>>>>> org.apache.ambari.server.state.ServiceInfo$1.apply : $r2 = virtualinvoke r1.<org.apache.ambari.server.state.ServicePropertyInfo: java.lang.String getName()>()
org.apache.ambari.server.state.ServiceInfo$1.apply : $r2 = virtualinvoke r1.<org.apache.ambari.server.state.ServicePropertyInfo: java.lang.String getName()>() >>>>>>>> org.apache.ambari.server.state.ServicePropertyInfo.getName : $r1 = r0.<org.apache.ambari.server.state.ServicePropertyInfo: java.lang.String name>
org.apache.ambari.server.state.ServicePropertyInfo.getName : $r1 = r0.<org.apache.ambari.server.state.ServicePropertyInfo: java.lang.String name> >>>>>>>> org.apache.ambari.server.state.ServicePropertyInfo.getName : return $r1
org.apache.ambari.server.state.ServicePropertyInfo.getName : return $r1 >>>>>>>> org.apache.ambari.server.state.ServiceInfo$1.apply : return $r2
org.apache.ambari.server.state.ServiceInfo$1.apply : return $r2 >>>>>>>> org.apache.ambari.server.state.ServiceInfo$1.apply : return $r3
org.apache.ambari.server.state.ServiceInfo$1.apply : return $r3 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $r8 = interfaceinvoke r2.<com.google.common.collect.Multimap: java.util.Set keySet()>()
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $r8 = interfaceinvoke r2.<com.google.common.collect.Multimap: java.util.Set keySet()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : r3 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : r3 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : if $z0 == 0
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : r4 = (java.lang.String) $r9
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : r4 = (java.lang.String) $r9 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $r10 = interfaceinvoke r2.<com.google.common.collect.Multimap: java.util.Collection get(java.lang.Object)>(r4)
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $r10 = interfaceinvoke r2.<com.google.common.collect.Multimap: java.util.Collection get(java.lang.Object)>(r4) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $i1 = interfaceinvoke $r10.<java.util.Collection: int size()>()
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $i1 = interfaceinvoke $r10.<java.util.Collection: int size()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : if $i1 <= 1
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : if $i1 <= 1 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $r22 = virtualinvoke r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List getComponents()>()
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $r22 = virtualinvoke r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List getComponents()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getComponents : $r2 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List components>
org.apache.ambari.server.state.ServiceInfo.getComponents : $r2 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List components> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getComponents : if $r2 != null
org.apache.ambari.server.state.ServiceInfo.getComponents : if $r2 != null >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getComponents : $r1 = new java.util.ArrayList
org.apache.ambari.server.state.ServiceInfo.getComponents : $r1 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getComponents : specialinvoke $r1.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.state.ServiceInfo.getComponents : specialinvoke $r1.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getComponents : r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List components> = $r1
org.apache.ambari.server.state.ServiceInfo.getComponents : r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List components> = $r1 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getComponents : $r3 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List components>
org.apache.ambari.server.state.ServiceInfo.getComponents : $r3 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List components> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getComponents : return $r3
org.apache.ambari.server.state.ServiceInfo.getComponents : return $r3 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : r23 = interfaceinvoke $r22.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : r23 = interfaceinvoke $r22.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $z1 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $z1 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : if $z1 == 0
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : if $z1 == 0 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $r33 = r0.<org.apache.ambari.server.state.ServiceInfo: org.apache.ambari.server.state.CredentialStoreInfo credentialStoreInfo>
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $r33 = r0.<org.apache.ambari.server.state.ServiceInfo: org.apache.ambari.server.state.CredentialStoreInfo credentialStoreInfo> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : if $r33 == null
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : if $r33 == null >>>>>>>> org.apache.ambari.server.state.ServiceInfo.afterServicePropertyListSet : specialinvoke r0.<org.apache.ambari.server.state.ServiceInfo: void buildServiceProperties()>()
org.apache.ambari.server.state.ServiceInfo.afterServicePropertyListSet : specialinvoke r0.<org.apache.ambari.server.state.ServiceInfo: void buildServiceProperties()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.buildServiceProperties : $z0 = virtualinvoke r0.<org.apache.ambari.server.state.ServiceInfo: boolean isValid()>()
org.apache.ambari.server.state.ServiceInfo.buildServiceProperties : $z0 = virtualinvoke r0.<org.apache.ambari.server.state.ServiceInfo: boolean isValid()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.isValid : $z0 = r0.<org.apache.ambari.server.state.ServiceInfo: boolean valid>
org.apache.ambari.server.state.ServiceInfo.isValid : $z0 = r0.<org.apache.ambari.server.state.ServiceInfo: boolean valid> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.isValid : return $z0
org.apache.ambari.server.state.ServiceInfo.isValid : return $z0 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.buildServiceProperties : if $z0 == 0
org.apache.ambari.server.state.ServiceInfo.buildServiceProperties : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.buildServiceProperties : r1 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap()>()
org.apache.ambari.server.state.ServiceInfo.buildServiceProperties : r1 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.buildServiceProperties : $r4 = virtualinvoke r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List getServicePropertyList()>()
org.apache.ambari.server.state.ServiceInfo.buildServiceProperties : $r4 = virtualinvoke r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List getServicePropertyList()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.buildServiceProperties : r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.ServiceInfo.buildServiceProperties : r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.buildServiceProperties : $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.ServiceInfo.buildServiceProperties : $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.buildServiceProperties : if $z1 == 0
org.apache.ambari.server.state.ServiceInfo.buildServiceProperties : if $z1 == 0 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.buildServiceProperties : $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.ServiceInfo.buildServiceProperties : $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.buildServiceProperties : r3 = (org.apache.ambari.server.state.ServicePropertyInfo) $r5
org.apache.ambari.server.state.ServiceInfo.buildServiceProperties : r3 = (org.apache.ambari.server.state.ServicePropertyInfo) $r5 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.buildServiceProperties : $r6 = virtualinvoke r3.<org.apache.ambari.server.state.ServicePropertyInfo: java.lang.String getName()>()
org.apache.ambari.server.state.ServiceInfo.buildServiceProperties : $r6 = virtualinvoke r3.<org.apache.ambari.server.state.ServicePropertyInfo: java.lang.String getName()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.buildServiceProperties : $r7 = virtualinvoke r3.<org.apache.ambari.server.state.ServicePropertyInfo: java.lang.String getValue()>()
org.apache.ambari.server.state.ServiceInfo.buildServiceProperties : $r7 = virtualinvoke r3.<org.apache.ambari.server.state.ServicePropertyInfo: java.lang.String getValue()>() >>>>>>>> org.apache.ambari.server.state.ServicePropertyInfo.getValue : $r1 = r0.<org.apache.ambari.server.state.ServicePropertyInfo: java.lang.String value>
org.apache.ambari.server.state.ServicePropertyInfo.getValue : $r1 = r0.<org.apache.ambari.server.state.ServicePropertyInfo: java.lang.String value> >>>>>>>> org.apache.ambari.server.state.ServicePropertyInfo.getValue : return $r1
org.apache.ambari.server.state.ServicePropertyInfo.getValue : return $r1 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.buildServiceProperties : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7)
org.apache.ambari.server.state.ServiceInfo.buildServiceProperties : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.buildServiceProperties : goto [?= $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.ServiceInfo.buildServiceProperties : goto [?= $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.ServiceInfo.buildServiceProperties : $r9 = specialinvoke r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Map ensureMandatoryServiceProperties(java.util.Map)>(r1)
org.apache.ambari.server.state.ServiceInfo.buildServiceProperties : $r9 = specialinvoke r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Map ensureMandatoryServiceProperties(java.util.Map)>(r1) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.buildServiceProperties : $r10 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap copyOf(java.util.Map)>($r9)
org.apache.ambari.server.state.ServiceInfo.buildServiceProperties : $r10 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap copyOf(java.util.Map)>($r9) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.buildServiceProperties : r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Map servicePropertyMap> = $r10
org.apache.ambari.server.state.ServiceInfo.buildServiceProperties : r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Map servicePropertyMap> = $r10 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.buildServiceProperties : goto [?= return]
org.apache.ambari.server.state.ServiceInfo.buildServiceProperties : goto [?= return] >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.resolveService : r3 = specialinvoke r0.<org.apache.ambari.server.stack.ServiceModuleTest: org.apache.ambari.server.stack.ServiceModule createServiceModule(org.apache.ambari.server.state.ServiceInfo)>(r1)
org.apache.ambari.server.stack.ServiceModuleTest.resolveService : r3 = specialinvoke r0.<org.apache.ambari.server.stack.ServiceModuleTest: org.apache.ambari.server.stack.ServiceModule createServiceModule(org.apache.ambari.server.state.ServiceInfo)>(r1) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : r2 = "type1"
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : r2 = "type1" >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : $r8 = virtualinvoke r1.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getName()>()
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : $r8 = virtualinvoke r1.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getName()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getName : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String name>
org.apache.ambari.server.state.ServiceInfo.getName : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String name> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getName : return $r1
org.apache.ambari.server.state.ServiceInfo.getName : return $r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : if $r8 != null
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : if $r8 != null >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : virtualinvoke r1.<org.apache.ambari.server.state.ServiceInfo: void setName(java.lang.String)>("service1")
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : virtualinvoke r1.<org.apache.ambari.server.state.ServiceInfo: void setName(java.lang.String)>("service1") >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setName : r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String name> = r1
org.apache.ambari.server.state.ServiceInfo.setName : r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String name> = r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : $r9 = virtualinvoke r1.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getName()>()
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : $r9 = virtualinvoke r1.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getName()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : r3 = specialinvoke r0.<org.apache.ambari.server.stack.ServiceModuleTest: org.apache.ambari.server.stack.StackContext createStackContext(java.lang.String,boolean)>($r9, 1)
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : r3 = specialinvoke r0.<org.apache.ambari.server.stack.ServiceModuleTest: org.apache.ambari.server.stack.StackContext createStackContext(java.lang.String,boolean)>($r9, 1) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : $r3 = staticinvoke <org.easymock.EasyMock: java.lang.Object createStrictMock(java.lang.Class)>(class "org/apache/ambari/server/stack/StackContext")
org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : $r3 = staticinvoke <org.easymock.EasyMock: java.lang.Object createStrictMock(java.lang.Class)>(class "org/apache/ambari/server/stack/StackContext") >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : r2 = (org.apache.ambari.server.stack.StackContext) $r3
org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : r2 = (org.apache.ambari.server.stack.StackContext) $r3 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : if z0 == 0
org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : if z0 == 0 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : virtualinvoke r2.<org.apache.ambari.server.stack.StackContext: void registerServiceCheck(java.lang.String)>(r1)
org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : virtualinvoke r2.<org.apache.ambari.server.stack.StackContext: void registerServiceCheck(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : $r4 = newarray (java.lang.Object)[1]
org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : $r4 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : $r4[0] = r2
org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : $r4[0] = r2 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : staticinvoke <org.easymock.EasyMock: void replay(java.lang.Object[])>($r4)
org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : staticinvoke <org.easymock.EasyMock: void replay(java.lang.Object[])>($r4) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : return r2
org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : return r2 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : $r10 = staticinvoke <java.util.Collections: java.util.List emptyList()>()
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : $r10 = staticinvoke <java.util.Collections: java.util.List emptyList()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : $r11 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>()
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : $r11 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : r4 = specialinvoke r0.<org.apache.ambari.server.stack.ServiceModuleTest: org.apache.ambari.server.stack.ConfigurationInfo createConfigurationInfo(java.util.Collection,java.util.Map)>($r10, $r11)
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : r4 = specialinvoke r0.<org.apache.ambari.server.stack.ServiceModuleTest: org.apache.ambari.server.stack.ConfigurationInfo createConfigurationInfo(java.util.Collection,java.util.Map)>($r10, $r11) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationInfo : $r3 = new org.apache.ambari.server.stack.ConfigurationInfo
org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationInfo : $r3 = new org.apache.ambari.server.stack.ConfigurationInfo >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationInfo : specialinvoke $r3.<org.apache.ambari.server.stack.ConfigurationInfo: void <init>(java.util.Collection,java.util.Map)>(r1, r2)
org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationInfo : specialinvoke $r3.<org.apache.ambari.server.stack.ConfigurationInfo: void <init>(java.util.Collection,java.util.Map)>(r1, r2) >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : $r2 = new java.util.HashMap
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : $r2 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : specialinvoke $r2.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : specialinvoke $r2.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : r3 = $r2
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : r3 = $r2 >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : $r9 = new java.util.HashMap
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : $r9 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : specialinvoke $r9.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : specialinvoke $r9.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : r4 = $r9
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : r4 = $r9 >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("supports", r4)
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("supports", r4) >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : $r11 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>()
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : $r11 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : r5 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : r5 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : if $z0 == 0
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : if $z0 == 0 >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : r0.<org.apache.ambari.server.stack.ConfigurationInfo: java.util.Map attributes> = r3
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : r0.<org.apache.ambari.server.stack.ConfigurationInfo: java.util.Map attributes> = r3 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationInfo : return $r3
org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationInfo : return $r3 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : r5 = specialinvoke r0.<org.apache.ambari.server.stack.ServiceModuleTest: org.apache.ambari.server.stack.ConfigurationModule createConfigurationModule(java.lang.String,org.apache.ambari.server.stack.ConfigurationInfo)>(r2, r4)
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : r5 = specialinvoke r0.<org.apache.ambari.server.stack.ServiceModuleTest: org.apache.ambari.server.stack.ConfigurationModule createConfigurationModule(java.lang.String,org.apache.ambari.server.stack.ConfigurationInfo)>(r2, r4) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationModule : $r3 = new org.apache.ambari.server.stack.ConfigurationModule
org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationModule : $r3 = new org.apache.ambari.server.stack.ConfigurationModule >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationModule : specialinvoke $r3.<org.apache.ambari.server.stack.ConfigurationModule: void <init>(java.lang.String,org.apache.ambari.server.stack.ConfigurationInfo)>(r1, r2)
org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationModule : specialinvoke $r3.<org.apache.ambari.server.stack.ConfigurationModule: void <init>(java.lang.String,org.apache.ambari.server.stack.ConfigurationInfo)>(r1, r2) >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.isValid : $z0 = r0.<org.apache.ambari.server.stack.ConfigurationInfo: boolean valid>
org.apache.ambari.server.stack.ConfigurationInfo.isValid : $z0 = r0.<org.apache.ambari.server.stack.ConfigurationInfo: boolean valid> >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.isValid : return $z0
org.apache.ambari.server.stack.ConfigurationInfo.isValid : return $z0 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationModule : return $r3
org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationModule : return $r3 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : $r12 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r5)
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : $r12 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r5) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : r6 = specialinvoke r0.<org.apache.ambari.server.stack.ServiceModuleTest: org.apache.ambari.server.stack.ConfigurationDirectory createConfigurationDirectory(java.util.Collection)>($r12)
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : r6 = specialinvoke r0.<org.apache.ambari.server.stack.ServiceModuleTest: org.apache.ambari.server.stack.ConfigurationDirectory createConfigurationDirectory(java.util.Collection)>($r12) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationDirectory : $r3 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/stack/ConfigurationDirectory")
