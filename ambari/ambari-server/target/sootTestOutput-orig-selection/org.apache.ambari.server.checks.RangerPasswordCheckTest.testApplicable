org.apache.ambari.server.state.SecurityState.values : $r0 = <org.apache.ambari.server.state.SecurityState: org.apache.ambari.server.state.SecurityState[] $VALUES> >>>>>>>> org.apache.ambari.server.state.SecurityState.values : $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>()
org.apache.ambari.server.state.SecurityState.values : $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> org.apache.ambari.server.state.SecurityState.values : $r2 = (org.apache.ambari.server.state.SecurityState[]) $r1
org.apache.ambari.server.state.SecurityState.values : $r2 = (org.apache.ambari.server.state.SecurityState[]) $r1 >>>>>>>> org.apache.ambari.server.state.SecurityState.values : return $r2
org.apache.ambari.server.state.SecurityState.values : return $r2 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : if r2 == null
org.apache.ambari.server.state.StackId.parseStackIdHelper : if r2 == null >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $z0 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>()
org.apache.ambari.server.state.StackId.parseStackIdHelper : $z0 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : if $z0 == 0
org.apache.ambari.server.state.StackId.parseStackIdHelper : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : i0 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(45)
org.apache.ambari.server.state.StackId.parseStackIdHelper : i0 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(45) >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : if i0 == -1
org.apache.ambari.server.state.StackId.parseStackIdHelper : if i0 == -1 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $i1 = virtualinvoke r2.<java.lang.String: int length()>()
org.apache.ambari.server.state.StackId.parseStackIdHelper : $i1 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $i2 = i0 + 1
org.apache.ambari.server.state.StackId.parseStackIdHelper : $i2 = i0 + 1 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : if $i1 > $i2
org.apache.ambari.server.state.StackId.parseStackIdHelper : if $i1 > $i2 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $r8 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0)
org.apache.ambari.server.state.StackId.parseStackIdHelper : $r8 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0) >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : r1.<org.apache.ambari.server.state.StackId: java.lang.String stackName> = $r8
org.apache.ambari.server.state.StackId.parseStackIdHelper : r1.<org.apache.ambari.server.state.StackId: java.lang.String stackName> = $r8 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $i3 = i0 + 1
org.apache.ambari.server.state.StackId.parseStackIdHelper : $i3 = i0 + 1 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $r9 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i3)
org.apache.ambari.server.state.StackId.parseStackIdHelper : $r9 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i3) >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : r1.<org.apache.ambari.server.state.StackId: java.lang.String stackVersion> = $r9
org.apache.ambari.server.state.StackId.parseStackIdHelper : r1.<org.apache.ambari.server.state.StackId: java.lang.String stackVersion> = $r9 >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.setSourceStackId : r0.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.state.StackId m_sourceStackId> = r1
org.apache.ambari.server.controller.PrereqCheckRequest.setSourceStackId : r0.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.state.StackId m_sourceStackId> = r1 >>>>>>>> org.apache.ambari.server.checks.RangerPasswordCheck.isApplicable : $r5 = newarray (java.lang.String)[1]
org.apache.ambari.server.checks.RangerPasswordCheck.isApplicable : $r5 = newarray (java.lang.String)[1] >>>>>>>> org.apache.ambari.server.checks.RangerPasswordCheck.isApplicable : $r5[0] = "RANGER"
org.apache.ambari.server.checks.RangerPasswordCheck.isApplicable : $r5[0] = "RANGER" >>>>>>>> org.apache.ambari.server.checks.RangerPasswordCheck.isApplicable : $r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5)
org.apache.ambari.server.checks.RangerPasswordCheck.isApplicable : $r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5) >>>>>>>> org.apache.ambari.server.checks.RangerPasswordCheck.isApplicable : $z0 = specialinvoke r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: boolean isApplicable(org.apache.ambari.server.controller.PrereqCheckRequest,java.util.List,boolean)>(r1, $r6, 1)
org.apache.ambari.server.checks.RangerPasswordCheck.isApplicable : $z0 = specialinvoke r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: boolean isApplicable(org.apache.ambari.server.controller.PrereqCheckRequest,java.util.List,boolean)>(r1, $r6, 1) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r7 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: com.google.inject.Provider clustersProvider>
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r7 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: com.google.inject.Provider clustersProvider> >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r8 = interfaceinvoke $r7.<com.google.inject.Provider: java.lang.Object get()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r8 = interfaceinvoke $r7.<com.google.inject.Provider: java.lang.Object get()>() >>>>>>>> org.apache.ambari.server.checks.RangerPasswordCheckTest$1.get : $r1 = virtualinvoke r0.<org.apache.ambari.server.checks.RangerPasswordCheckTest$1: org.apache.ambari.server.state.Clusters get()>()
org.apache.ambari.server.checks.RangerPasswordCheckTest$1.get : $r1 = virtualinvoke r0.<org.apache.ambari.server.checks.RangerPasswordCheckTest$1: org.apache.ambari.server.state.Clusters get()>() >>>>>>>> org.apache.ambari.server.checks.RangerPasswordCheckTest$1.get : $r1 = r0.<org.apache.ambari.server.checks.RangerPasswordCheckTest$1: org.apache.ambari.server.checks.RangerPasswordCheckTest this$0>
org.apache.ambari.server.checks.RangerPasswordCheckTest$1.get : $r1 = r0.<org.apache.ambari.server.checks.RangerPasswordCheckTest$1: org.apache.ambari.server.checks.RangerPasswordCheckTest this$0> >>>>>>>> org.apache.ambari.server.checks.RangerPasswordCheckTest$1.get : $r2 = staticinvoke <org.apache.ambari.server.checks.RangerPasswordCheckTest: org.apache.ambari.server.state.Clusters access$000(org.apache.ambari.server.checks.RangerPasswordCheckTest)>($r1)
org.apache.ambari.server.checks.RangerPasswordCheckTest$1.get : $r2 = staticinvoke <org.apache.ambari.server.checks.RangerPasswordCheckTest: org.apache.ambari.server.state.Clusters access$000(org.apache.ambari.server.checks.RangerPasswordCheckTest)>($r1) >>>>>>>> org.apache.ambari.server.checks.RangerPasswordCheckTest.access$000 : $r1 = r0.<org.apache.ambari.server.checks.RangerPasswordCheckTest: org.apache.ambari.server.state.Clusters m_clusters>
org.apache.ambari.server.checks.RangerPasswordCheckTest.access$000 : $r1 = r0.<org.apache.ambari.server.checks.RangerPasswordCheckTest: org.apache.ambari.server.state.Clusters m_clusters> >>>>>>>> org.apache.ambari.server.checks.RangerPasswordCheckTest.access$000 : return $r1
org.apache.ambari.server.checks.RangerPasswordCheckTest.access$000 : return $r1 >>>>>>>> org.apache.ambari.server.checks.RangerPasswordCheckTest$1.get : return $r2
org.apache.ambari.server.checks.RangerPasswordCheckTest$1.get : return $r2 >>>>>>>> org.apache.ambari.server.checks.RangerPasswordCheckTest$1.get : return $r1
org.apache.ambari.server.checks.RangerPasswordCheckTest$1.get : return $r1 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r9 = (org.apache.ambari.server.state.Clusters) $r8
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r9 = (org.apache.ambari.server.state.Clusters) $r8 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r10 = virtualinvoke r1.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getClusterName()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r10 = virtualinvoke r1.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getClusterName()>() >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String m_clusterName>
org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String m_clusterName> >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : return $r1
org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : return $r1 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : r3 = interfaceinvoke $r9.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>($r10)
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : r3 = interfaceinvoke $r9.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>($r10) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r11 = interfaceinvoke r3.<org.apache.ambari.server.state.Cluster: java.util.Map getServices()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r11 = interfaceinvoke r3.<org.apache.ambari.server.state.Cluster: java.util.Map getServices()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : r4 = interfaceinvoke $r11.<java.util.Map: java.util.Set keySet()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : r4 = interfaceinvoke $r11.<java.util.Map: java.util.Set keySet()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : if z0 == 0
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : if z0 == 0 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $z2 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $z2 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : if $z2 != 0
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : if $z2 != 0 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $z3 = 1
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $z3 = 1 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : goto [?= z1 = $z3]
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : goto [?= z1 = $z3] >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : z1 = $z3
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : z1 = $z3 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : r5 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : r5 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $z4 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $z4 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : if $z4 == 0
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : if $z4 == 0 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r12 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r12 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : r6 = (java.lang.String) $r12
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : r6 = (java.lang.String) $r12 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $z5 = interfaceinvoke r4.<java.util.Set: boolean contains(java.lang.Object)>(r6)
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $z5 = interfaceinvoke r4.<java.util.Set: boolean contains(java.lang.Object)>(r6) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : if $z5 == 0
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : if $z5 == 0 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : if z0 != 0
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : if z0 != 0 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $z6 = interfaceinvoke r4.<java.util.Set: boolean contains(java.lang.Object)>(r6)
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $z6 = interfaceinvoke r4.<java.util.Set: boolean contains(java.lang.Object)>(r6) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : if $z6 != 0
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : if $z6 != 0 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : goto [?= $z4 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : goto [?= $z4 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : return z1
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : return z1 >>>>>>>> org.apache.ambari.server.checks.RangerPasswordCheck.isApplicable : if $z0 != 0
org.apache.ambari.server.checks.RangerPasswordCheck.isApplicable : if $z0 != 0 >>>>>>>> org.apache.ambari.server.checks.RangerPasswordCheck.isApplicable : $r7 = r0.<org.apache.ambari.server.checks.RangerPasswordCheck: com.google.inject.Provider clustersProvider>
org.apache.ambari.server.checks.RangerPasswordCheck.isApplicable : $r7 = r0.<org.apache.ambari.server.checks.RangerPasswordCheck: com.google.inject.Provider clustersProvider> >>>>>>>> org.apache.ambari.server.checks.RangerPasswordCheck.isApplicable : $r8 = interfaceinvoke $r7.<com.google.inject.Provider: java.lang.Object get()>()
org.apache.ambari.server.checks.RangerPasswordCheck.isApplicable : $r8 = interfaceinvoke $r7.<com.google.inject.Provider: java.lang.Object get()>() >>>>>>>> org.apache.ambari.server.checks.RangerPasswordCheck.isApplicable : $r9 = (org.apache.ambari.server.state.Clusters) $r8
org.apache.ambari.server.checks.RangerPasswordCheck.isApplicable : $r9 = (org.apache.ambari.server.state.Clusters) $r8 >>>>>>>> org.apache.ambari.server.checks.RangerPasswordCheck.isApplicable : $r10 = virtualinvoke r1.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getClusterName()>()
org.apache.ambari.server.checks.RangerPasswordCheck.isApplicable : $r10 = virtualinvoke r1.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getClusterName()>() >>>>>>>> org.apache.ambari.server.checks.RangerPasswordCheck.isApplicable : r2 = interfaceinvoke $r9.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>($r10)
org.apache.ambari.server.checks.RangerPasswordCheck.isApplicable : r2 = interfaceinvoke $r9.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>($r10) >>>>>>>> org.apache.ambari.server.checks.RangerPasswordCheck.isApplicable : r3 = interfaceinvoke r2.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.StackId getCurrentStackVersion()>()
org.apache.ambari.server.checks.RangerPasswordCheck.isApplicable : r3 = interfaceinvoke r2.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.StackId getCurrentStackVersion()>() >>>>>>>> org.apache.ambari.server.checks.RangerPasswordCheck.isApplicable : $r11 = virtualinvoke r3.<org.apache.ambari.server.state.StackId: java.lang.String getStackName()>()
org.apache.ambari.server.checks.RangerPasswordCheck.isApplicable : $r11 = virtualinvoke r3.<org.apache.ambari.server.state.StackId: java.lang.String getStackName()>() >>>>>>>> org.apache.ambari.server.state.StackId.getStackName : $r1 = r0.<org.apache.ambari.server.state.StackId: java.lang.String stackName>
org.apache.ambari.server.state.StackId.getStackName : $r1 = r0.<org.apache.ambari.server.state.StackId: java.lang.String stackName> >>>>>>>> org.apache.ambari.server.state.StackId.getStackName : return $r1
org.apache.ambari.server.state.StackId.getStackName : return $r1 >>>>>>>> org.apache.ambari.server.checks.RangerPasswordCheck.isApplicable : $z1 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("HDP")
org.apache.ambari.server.checks.RangerPasswordCheck.isApplicable : $z1 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("HDP") >>>>>>>> org.apache.ambari.server.checks.RangerPasswordCheck.isApplicable : if $z1 == 0
org.apache.ambari.server.checks.RangerPasswordCheck.isApplicable : if $z1 == 0 >>>>>>>> org.apache.ambari.server.checks.RangerPasswordCheck.isApplicable : $r12 = virtualinvoke r1.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.state.StackId getSourceStackId()>()
org.apache.ambari.server.checks.RangerPasswordCheck.isApplicable : $r12 = virtualinvoke r1.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.state.StackId getSourceStackId()>() >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getSourceStackId : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.state.StackId m_sourceStackId>
org.apache.ambari.server.controller.PrereqCheckRequest.getSourceStackId : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.state.StackId m_sourceStackId> >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getSourceStackId : return $r1
org.apache.ambari.server.controller.PrereqCheckRequest.getSourceStackId : return $r1 >>>>>>>> org.apache.ambari.server.checks.RangerPasswordCheck.isApplicable : r4 = virtualinvoke $r12.<org.apache.ambari.server.state.StackId: java.lang.String getStackVersion()>()
org.apache.ambari.server.checks.RangerPasswordCheck.isApplicable : r4 = virtualinvoke $r12.<org.apache.ambari.server.state.StackId: java.lang.String getStackVersion()>() >>>>>>>> org.apache.ambari.server.state.StackId.getStackVersion : $r1 = r0.<org.apache.ambari.server.state.StackId: java.lang.String stackVersion>
org.apache.ambari.server.state.StackId.getStackVersion : $r1 = r0.<org.apache.ambari.server.state.StackId: java.lang.String stackVersion> >>>>>>>> org.apache.ambari.server.state.StackId.getStackVersion : return $r1
org.apache.ambari.server.state.StackId.getStackVersion : return $r1 >>>>>>>> org.apache.ambari.server.checks.RangerPasswordCheck.isApplicable : $i0 = staticinvoke <org.apache.ambari.server.utils.VersionUtils: int compareVersions(java.lang.String,java.lang.String)>(r4, "2.3.0.0")
org.apache.ambari.server.checks.RangerPasswordCheck.isApplicable : $i0 = staticinvoke <org.apache.ambari.server.utils.VersionUtils: int compareVersions(java.lang.String,java.lang.String)>(r4, "2.3.0.0") >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $i0 = staticinvoke <org.apache.ambari.server.utils.VersionUtils: int compareVersions(java.lang.String,java.lang.String,int)>(r0, r1, 0)
org.apache.ambari.server.utils.VersionUtils.compareVersions : $i0 = staticinvoke <org.apache.ambari.server.utils.VersionUtils: int compareVersions(java.lang.String,java.lang.String,int)>(r0, r1, 0) >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : if r0 != null
org.apache.ambari.server.utils.VersionUtils.compareVersions : if r0 != null >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : if r1 != null
org.apache.ambari.server.utils.VersionUtils.compareVersions : if r1 != null >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : r9 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String trim(java.lang.String)>(r0)
org.apache.ambari.server.utils.VersionUtils.compareVersions : r9 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String trim(java.lang.String)>(r0) >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : r10 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String trim(java.lang.String)>(r1)
org.apache.ambari.server.utils.VersionUtils.compareVersions : r10 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String trim(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $i4 = virtualinvoke r9.<java.lang.String: int indexOf(int)>(45)
org.apache.ambari.server.utils.VersionUtils.compareVersions : $i4 = virtualinvoke r9.<java.lang.String: int indexOf(int)>(45) >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : if $i4 < 0
org.apache.ambari.server.utils.VersionUtils.compareVersions : if $i4 < 0 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $i6 = virtualinvoke r10.<java.lang.String: int indexOf(int)>(45)
org.apache.ambari.server.utils.VersionUtils.compareVersions : $i6 = virtualinvoke r10.<java.lang.String: int indexOf(int)>(45) >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : if $i6 < 0
org.apache.ambari.server.utils.VersionUtils.compareVersions : if $i6 < 0 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $z0 = virtualinvoke r9.<java.lang.String: boolean isEmpty()>()
org.apache.ambari.server.utils.VersionUtils.compareVersions : $z0 = virtualinvoke r9.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : if $z0 == 0
org.apache.ambari.server.utils.VersionUtils.compareVersions : if $z0 == 0 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $z1 = virtualinvoke r10.<java.lang.String: boolean isEmpty()>()
org.apache.ambari.server.utils.VersionUtils.compareVersions : $z1 = virtualinvoke r10.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : if $z1 == 0
org.apache.ambari.server.utils.VersionUtils.compareVersions : if $z1 == 0 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : if i0 >= 0
org.apache.ambari.server.utils.VersionUtils.compareVersions : if i0 >= 0 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $r14 = "${ambariVersion}"
org.apache.ambari.server.utils.VersionUtils.compareVersions : $r14 = "${ambariVersion}" >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $r15 = virtualinvoke r9.<java.lang.String: java.lang.String trim()>()
org.apache.ambari.server.utils.VersionUtils.compareVersions : $r15 = virtualinvoke r9.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $z2 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r15)
org.apache.ambari.server.utils.VersionUtils.compareVersions : $z2 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r15) >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : if $z2 == 0
org.apache.ambari.server.utils.VersionUtils.compareVersions : if $z2 == 0 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : r2 = virtualinvoke r9.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\.")
org.apache.ambari.server.utils.VersionUtils.compareVersions : r2 = virtualinvoke r9.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\.") >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : r3 = virtualinvoke r10.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\.")
org.apache.ambari.server.utils.VersionUtils.compareVersions : r3 = virtualinvoke r10.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\.") >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $i8 = lengthof r2
org.apache.ambari.server.utils.VersionUtils.compareVersions : $i8 = lengthof r2 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $i9 = lengthof r3
org.apache.ambari.server.utils.VersionUtils.compareVersions : $i9 = lengthof r3 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : i1 = staticinvoke <java.lang.Math: int max(int,int)>($i8, $i9)
org.apache.ambari.server.utils.VersionUtils.compareVersions : i1 = staticinvoke <java.lang.Math: int max(int,int)>($i8, $i9) >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : if i0 == 0
org.apache.ambari.server.utils.VersionUtils.compareVersions : if i0 == 0 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $i10 = i1
org.apache.ambari.server.utils.VersionUtils.compareVersions : $i10 = i1 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : goto [?= i11 = $i10]
org.apache.ambari.server.utils.VersionUtils.compareVersions : goto [?= i11 = $i10] >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : i11 = $i10
org.apache.ambari.server.utils.VersionUtils.compareVersions : i11 = $i10 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $r16 = new java.util.ArrayList
org.apache.ambari.server.utils.VersionUtils.compareVersions : $r16 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : specialinvoke $r16.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.utils.VersionUtils.compareVersions : specialinvoke $r16.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : r4 = $r16
org.apache.ambari.server.utils.VersionUtils.compareVersions : r4 = $r16 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $r17 = new java.util.ArrayList
org.apache.ambari.server.utils.VersionUtils.compareVersions : $r17 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : specialinvoke $r17.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.utils.VersionUtils.compareVersions : specialinvoke $r17.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : r5 = $r17
org.apache.ambari.server.utils.VersionUtils.compareVersions : r5 = $r17 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : i2 = 0
org.apache.ambari.server.utils.VersionUtils.compareVersions : i2 = 0 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : if i2 >= i11
org.apache.ambari.server.utils.VersionUtils.compareVersions : if i2 >= i11 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $i12 = lengthof r2
org.apache.ambari.server.utils.VersionUtils.compareVersions : $i12 = lengthof r2 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : if i2 >= $i12
org.apache.ambari.server.utils.VersionUtils.compareVersions : if i2 >= $i12 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $r18 = r2[i2]
org.apache.ambari.server.utils.VersionUtils.compareVersions : $r18 = r2[i2] >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $i13 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r18)
org.apache.ambari.server.utils.VersionUtils.compareVersions : $i13 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r18) >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : goto [?= i3 = $i13]
org.apache.ambari.server.utils.VersionUtils.compareVersions : goto [?= i3 = $i13] >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : i3 = $i13
org.apache.ambari.server.utils.VersionUtils.compareVersions : i3 = $i13 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3)
org.apache.ambari.server.utils.VersionUtils.compareVersions : $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3) >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r19)
org.apache.ambari.server.utils.VersionUtils.compareVersions : interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r19) >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : goto [?= $i14 = lengthof r3]
org.apache.ambari.server.utils.VersionUtils.compareVersions : goto [?= $i14 = lengthof r3] >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $i14 = lengthof r3
org.apache.ambari.server.utils.VersionUtils.compareVersions : $i14 = lengthof r3 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : if i2 >= $i14
org.apache.ambari.server.utils.VersionUtils.compareVersions : if i2 >= $i14 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $r23 = r3[i2]
org.apache.ambari.server.utils.VersionUtils.compareVersions : $r23 = r3[i2] >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $i15 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r23)
org.apache.ambari.server.utils.VersionUtils.compareVersions : $i15 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r23) >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : goto [?= i16 = $i15]
org.apache.ambari.server.utils.VersionUtils.compareVersions : goto [?= i16 = $i15] >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : i16 = $i15
org.apache.ambari.server.utils.VersionUtils.compareVersions : i16 = $i15 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i16)
org.apache.ambari.server.utils.VersionUtils.compareVersions : $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i16) >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r24)
org.apache.ambari.server.utils.VersionUtils.compareVersions : interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r24) >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : goto [?= i2 = i2 + 1]
org.apache.ambari.server.utils.VersionUtils.compareVersions : goto [?= i2 = i2 + 1] >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : i2 = i2 + 1
org.apache.ambari.server.utils.VersionUtils.compareVersions : i2 = i2 + 1 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : goto [?= (branch)]
org.apache.ambari.server.utils.VersionUtils.compareVersions : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $i13 = 0
org.apache.ambari.server.utils.VersionUtils.compareVersions : $i13 = 0 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $i17 = interfaceinvoke r4.<java.util.List: int size()>()
org.apache.ambari.server.utils.VersionUtils.compareVersions : $i17 = interfaceinvoke r4.<java.util.List: int size()>() >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $i18 = interfaceinvoke r5.<java.util.List: int size()>()
org.apache.ambari.server.utils.VersionUtils.compareVersions : $i18 = interfaceinvoke r5.<java.util.List: int size()>() >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : i19 = staticinvoke <java.lang.Math: int max(int,int)>($i17, $i18)
org.apache.ambari.server.utils.VersionUtils.compareVersions : i19 = staticinvoke <java.lang.Math: int max(int,int)>($i17, $i18) >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : i20 = 0
org.apache.ambari.server.utils.VersionUtils.compareVersions : i20 = 0 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : if i20 >= i19
org.apache.ambari.server.utils.VersionUtils.compareVersions : if i20 >= i19 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $r28 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i20)
org.apache.ambari.server.utils.VersionUtils.compareVersions : $r28 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i20) >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : r29 = (java.lang.Integer) $r28
org.apache.ambari.server.utils.VersionUtils.compareVersions : r29 = (java.lang.Integer) $r28 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $r30 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(i20)
org.apache.ambari.server.utils.VersionUtils.compareVersions : $r30 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(i20) >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : r6 = (java.lang.Integer) $r30
org.apache.ambari.server.utils.VersionUtils.compareVersions : r6 = (java.lang.Integer) $r30 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $i21 = virtualinvoke r29.<java.lang.Integer: int intValue()>()
org.apache.ambari.server.utils.VersionUtils.compareVersions : $i21 = virtualinvoke r29.<java.lang.Integer: int intValue()>() >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $i22 = virtualinvoke r6.<java.lang.Integer: int intValue()>()
org.apache.ambari.server.utils.VersionUtils.compareVersions : $i22 = virtualinvoke r6.<java.lang.Integer: int intValue()>() >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : if $i21 >= $i22
org.apache.ambari.server.utils.VersionUtils.compareVersions : if $i21 >= $i22 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $i23 = virtualinvoke r29.<java.lang.Integer: int intValue()>()
org.apache.ambari.server.utils.VersionUtils.compareVersions : $i23 = virtualinvoke r29.<java.lang.Integer: int intValue()>() >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $i24 = virtualinvoke r6.<java.lang.Integer: int intValue()>()
org.apache.ambari.server.utils.VersionUtils.compareVersions : $i24 = virtualinvoke r6.<java.lang.Integer: int intValue()>() >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : if $i23 <= $i24
org.apache.ambari.server.utils.VersionUtils.compareVersions : if $i23 <= $i24 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : i20 = i20 + 1
org.apache.ambari.server.utils.VersionUtils.compareVersions : i20 = i20 + 1 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : return 0
org.apache.ambari.server.utils.VersionUtils.compareVersions : return 0 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : return $i0
org.apache.ambari.server.utils.VersionUtils.compareVersions : return $i0 >>>>>>>> org.apache.ambari.server.checks.RangerPasswordCheck.isApplicable : if $i0 < 0
org.apache.ambari.server.checks.RangerPasswordCheck.isApplicable : if $i0 < 0 >>>>>>>> org.apache.ambari.server.checks.RangerPasswordCheck.isApplicable : $z2 = 1
org.apache.ambari.server.checks.RangerPasswordCheck.isApplicable : $z2 = 1 >>>>>>>> org.apache.ambari.server.checks.RangerPasswordCheck.isApplicable : goto [?= return $z2]
org.apache.ambari.server.checks.RangerPasswordCheck.isApplicable : goto [?= return $z2] >>>>>>>> org.apache.ambari.server.checks.RangerPasswordCheck.isApplicable : return $z2
org.apache.ambari.server.checks.RangerPasswordCheck.isApplicable : return $z2 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : return -1
org.apache.ambari.server.utils.VersionUtils.compareVersions : return -1 >>>>>>>> org.apache.ambari.server.checks.RangerPasswordCheck.isApplicable : $z2 = 0
org.apache.ambari.server.checks.RangerPasswordCheck.isApplicable : $z2 = 0 >>>>>>>> org.apache.ambari.server.checks.RangerPasswordCheck.isApplicable : return 1
