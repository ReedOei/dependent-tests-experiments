org.apache.ambari.server.checks.VersionMismatchCheck.perform : r3 = virtualinvoke r2.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getClusterName()>() >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String m_clusterName>
org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String m_clusterName> >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : return $r1
org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : return $r1 >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.perform : $r9 = r0.<org.apache.ambari.server.checks.VersionMismatchCheck: com.google.inject.Provider clustersProvider>
org.apache.ambari.server.checks.VersionMismatchCheck.perform : $r9 = r0.<org.apache.ambari.server.checks.VersionMismatchCheck: com.google.inject.Provider clustersProvider> >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.perform : $r10 = interfaceinvoke $r9.<com.google.inject.Provider: java.lang.Object get()>()
org.apache.ambari.server.checks.VersionMismatchCheck.perform : $r10 = interfaceinvoke $r9.<com.google.inject.Provider: java.lang.Object get()>() >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheckTest$1.get : $r1 = virtualinvoke r0.<org.apache.ambari.server.checks.VersionMismatchCheckTest$1: org.apache.ambari.server.state.Clusters get()>()
org.apache.ambari.server.checks.VersionMismatchCheckTest$1.get : $r1 = virtualinvoke r0.<org.apache.ambari.server.checks.VersionMismatchCheckTest$1: org.apache.ambari.server.state.Clusters get()>() >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheckTest$1.get : $r1 = r0.<org.apache.ambari.server.checks.VersionMismatchCheckTest$1: org.apache.ambari.server.state.Clusters val$clusters>
org.apache.ambari.server.checks.VersionMismatchCheckTest$1.get : $r1 = r0.<org.apache.ambari.server.checks.VersionMismatchCheckTest$1: org.apache.ambari.server.state.Clusters val$clusters> >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheckTest$1.get : return $r1
org.apache.ambari.server.checks.VersionMismatchCheckTest$1.get : return $r1 >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.perform : $r11 = (org.apache.ambari.server.state.Clusters) $r10
org.apache.ambari.server.checks.VersionMismatchCheck.perform : $r11 = (org.apache.ambari.server.state.Clusters) $r10 >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.perform : r4 = interfaceinvoke $r11.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>(r3)
org.apache.ambari.server.checks.VersionMismatchCheck.perform : r4 = interfaceinvoke $r11.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>(r3) >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.perform : r5 = interfaceinvoke r4.<org.apache.ambari.server.state.Cluster: java.util.Map getServices()>()
org.apache.ambari.server.checks.VersionMismatchCheck.perform : r5 = interfaceinvoke r4.<org.apache.ambari.server.state.Cluster: java.util.Map getServices()>() >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.perform : $r12 = new java.util.ArrayList
org.apache.ambari.server.checks.VersionMismatchCheck.perform : $r12 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.perform : specialinvoke $r12.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.checks.VersionMismatchCheck.perform : specialinvoke $r12.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.perform : r6 = $r12
org.apache.ambari.server.checks.VersionMismatchCheck.perform : r6 = $r12 >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.perform : $r13 = interfaceinvoke r5.<java.util.Map: java.util.Collection values()>()
org.apache.ambari.server.checks.VersionMismatchCheck.perform : $r13 = interfaceinvoke r5.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.perform : r7 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.ambari.server.checks.VersionMismatchCheck.perform : r7 = interfaceinvoke $r13.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.perform : $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.checks.VersionMismatchCheck.perform : $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.perform : if $z0 == 0
org.apache.ambari.server.checks.VersionMismatchCheck.perform : if $z0 == 0 >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.perform : $r14 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.checks.VersionMismatchCheck.perform : $r14 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.perform : r8 = (org.apache.ambari.server.state.Service) $r14
org.apache.ambari.server.checks.VersionMismatchCheck.perform : r8 = (org.apache.ambari.server.state.Service) $r14 >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.perform : specialinvoke r0.<org.apache.ambari.server.checks.VersionMismatchCheck: void validateService(org.apache.ambari.server.state.Service,org.apache.ambari.server.state.stack.PrerequisiteCheck,java.util.List)>(r8, r1, r6)
org.apache.ambari.server.checks.VersionMismatchCheck.perform : specialinvoke r0.<org.apache.ambari.server.checks.VersionMismatchCheck: void validateService(org.apache.ambari.server.state.Service,org.apache.ambari.server.state.stack.PrerequisiteCheck,java.util.List)>(r8, r1, r6) >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.validateService : r4 = interfaceinvoke r1.<org.apache.ambari.server.state.Service: java.util.Map getServiceComponents()>()
org.apache.ambari.server.checks.VersionMismatchCheck.validateService : r4 = interfaceinvoke r1.<org.apache.ambari.server.state.Service: java.util.Map getServiceComponents()>() >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.validateService : $r7 = interfaceinvoke r4.<java.util.Map: java.util.Collection values()>()
org.apache.ambari.server.checks.VersionMismatchCheck.validateService : $r7 = interfaceinvoke r4.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.validateService : r5 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.ambari.server.checks.VersionMismatchCheck.validateService : r5 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.validateService : $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.checks.VersionMismatchCheck.validateService : $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.validateService : if $z0 == 0
org.apache.ambari.server.checks.VersionMismatchCheck.validateService : if $z0 == 0 >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.validateService : $r8 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.checks.VersionMismatchCheck.validateService : $r8 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.validateService : r6 = (org.apache.ambari.server.state.ServiceComponent) $r8
org.apache.ambari.server.checks.VersionMismatchCheck.validateService : r6 = (org.apache.ambari.server.state.ServiceComponent) $r8 >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.validateService : specialinvoke r0.<org.apache.ambari.server.checks.VersionMismatchCheck: void validateServiceComponent(org.apache.ambari.server.state.ServiceComponent,org.apache.ambari.server.state.stack.PrerequisiteCheck,java.util.List)>(r6, r2, r3)
org.apache.ambari.server.checks.VersionMismatchCheck.validateService : specialinvoke r0.<org.apache.ambari.server.checks.VersionMismatchCheck: void validateServiceComponent(org.apache.ambari.server.state.ServiceComponent,org.apache.ambari.server.state.stack.PrerequisiteCheck,java.util.List)>(r6, r2, r3) >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.validateServiceComponent : r4 = interfaceinvoke r1.<org.apache.ambari.server.state.ServiceComponent: java.util.Map getServiceComponentHosts()>()
org.apache.ambari.server.checks.VersionMismatchCheck.validateServiceComponent : r4 = interfaceinvoke r1.<org.apache.ambari.server.state.ServiceComponent: java.util.Map getServiceComponentHosts()>() >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.validateServiceComponent : $r7 = interfaceinvoke r4.<java.util.Map: java.util.Collection values()>()
org.apache.ambari.server.checks.VersionMismatchCheck.validateServiceComponent : $r7 = interfaceinvoke r4.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.validateServiceComponent : r5 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.ambari.server.checks.VersionMismatchCheck.validateServiceComponent : r5 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.validateServiceComponent : $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.checks.VersionMismatchCheck.validateServiceComponent : $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.validateServiceComponent : if $z0 == 0
org.apache.ambari.server.checks.VersionMismatchCheck.validateServiceComponent : if $z0 == 0 >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.validateServiceComponent : $r8 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.checks.VersionMismatchCheck.validateServiceComponent : $r8 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.validateServiceComponent : r6 = (org.apache.ambari.server.state.ServiceComponentHost) $r8
org.apache.ambari.server.checks.VersionMismatchCheck.validateServiceComponent : r6 = (org.apache.ambari.server.state.ServiceComponentHost) $r8 >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.validateServiceComponent : specialinvoke r0.<org.apache.ambari.server.checks.VersionMismatchCheck: void validateServiceComponentHost(org.apache.ambari.server.state.ServiceComponent,org.apache.ambari.server.state.ServiceComponentHost,org.apache.ambari.server.state.stack.PrerequisiteCheck,java.util.List)>(r1, r6, r2, r3)
org.apache.ambari.server.checks.VersionMismatchCheck.validateServiceComponent : specialinvoke r0.<org.apache.ambari.server.checks.VersionMismatchCheck: void validateServiceComponentHost(org.apache.ambari.server.state.ServiceComponent,org.apache.ambari.server.state.ServiceComponentHost,org.apache.ambari.server.state.stack.PrerequisiteCheck,java.util.List)>(r1, r6, r2, r3) >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.validateServiceComponentHost : $r11 = interfaceinvoke r2.<org.apache.ambari.server.state.ServiceComponentHost: org.apache.ambari.server.state.UpgradeState getUpgradeState()>()
org.apache.ambari.server.checks.VersionMismatchCheck.validateServiceComponentHost : $r11 = interfaceinvoke r2.<org.apache.ambari.server.state.ServiceComponentHost: org.apache.ambari.server.state.UpgradeState getUpgradeState()>() >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.validateServiceComponentHost : $r5 = <org.apache.ambari.server.state.UpgradeState: org.apache.ambari.server.state.UpgradeState VERSION_MISMATCH>
org.apache.ambari.server.checks.VersionMismatchCheck.validateServiceComponentHost : $r5 = <org.apache.ambari.server.state.UpgradeState: org.apache.ambari.server.state.UpgradeState VERSION_MISMATCH> >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.validateServiceComponentHost : $z0 = virtualinvoke $r11.<org.apache.ambari.server.state.UpgradeState: boolean equals(java.lang.Object)>($r5)
org.apache.ambari.server.checks.VersionMismatchCheck.validateServiceComponentHost : $z0 = virtualinvoke $r11.<org.apache.ambari.server.state.UpgradeState: boolean equals(java.lang.Object)>($r5) >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.validateServiceComponentHost : if $z0 == 0
org.apache.ambari.server.checks.VersionMismatchCheck.validateServiceComponentHost : if $z0 == 0 >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.validateServiceComponent : goto [?= $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.checks.VersionMismatchCheck.validateServiceComponent : goto [?= $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.validateService : goto [?= $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.checks.VersionMismatchCheck.validateService : goto [?= $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.perform : goto [?= $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.checks.VersionMismatchCheck.perform : goto [?= $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.perform : $r15 = virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet getFailedOn()>()
org.apache.ambari.server.checks.VersionMismatchCheck.perform : $r15 = virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet getFailedOn()>() >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.getFailedOn : $r1 = r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet m_failedOn>
org.apache.ambari.server.state.stack.PrerequisiteCheck.getFailedOn : $r1 = r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet m_failedOn> >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.getFailedOn : return $r1
org.apache.ambari.server.state.stack.PrerequisiteCheck.getFailedOn : return $r1 >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.perform : $z1 = virtualinvoke $r15.<java.util.LinkedHashSet: boolean isEmpty()>()
org.apache.ambari.server.checks.VersionMismatchCheck.perform : $z1 = virtualinvoke $r15.<java.util.LinkedHashSet: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.checks.VersionMismatchCheck.perform : if $z1 != 0
org.apache.ambari.server.checks.VersionMismatchCheck.perform : if $z1 != 0 >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.getStatus : $r1 = r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: org.apache.ambari.server.state.stack.PrereqCheckStatus m_status>
org.apache.ambari.server.state.stack.PrerequisiteCheck.getStatus : $r1 = r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: org.apache.ambari.server.state.stack.PrereqCheckStatus m_status> >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.getStatus : return $r1
