org.apache.ambari.server.orm.entities.RepositoryVersionEntity.setVersion : virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: void _persistence_set_version(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_set_version : virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: void _persistence_checkFetchedForSet(java.lang.String)>("version")
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_set_version : virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: void _persistence_checkFetchedForSet(java.lang.String)>("version") >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_checkFetchedForSet : $z0 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: boolean _persistence_isAttributeFetched(java.lang.String)>(r1)
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_checkFetchedForSet : $z0 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: boolean _persistence_isAttributeFetched(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_isAttributeFetched : $r2 = r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: org.eclipse.persistence.queries.FetchGroup _persistence_fetchGroup>
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_isAttributeFetched : $r2 = r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: org.eclipse.persistence.queries.FetchGroup _persistence_fetchGroup> >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_isAttributeFetched : if $r2 == null
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_isAttributeFetched : if $r2 == null >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_isAttributeFetched : $z1 = 1
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_isAttributeFetched : $z1 = 1 >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_isAttributeFetched : goto [?= return $z1]
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_isAttributeFetched : goto [?= return $z1] >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_isAttributeFetched : return $z1
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_isAttributeFetched : return $z1 >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_checkFetchedForSet : if $z0 != 0
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_checkFetchedForSet : if $z0 != 0 >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_set_version : $r2 = r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: java.lang.String version>
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_set_version : $r2 = r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: java.lang.String version> >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_set_version : virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: void _persistence_propertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("version", $r2, r1)
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_set_version : virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: void _persistence_propertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("version", $r2, r1) >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_propertyChange : $r4 = r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: java.beans.PropertyChangeListener _persistence_listener>
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_propertyChange : $r4 = r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: java.beans.PropertyChangeListener _persistence_listener> >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_propertyChange : if $r4 == null
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_propertyChange : if $r4 == null >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_set_version : r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: java.lang.String version> = r1
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_set_version : r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: java.lang.String version> = r1 >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity.setRepositoryVersion : virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: void _persistence_set_repositoryVersion(org.apache.ambari.server.orm.entities.RepositoryVersionEntity)>(r1)
org.apache.ambari.server.orm.entities.HostVersionEntity.setRepositoryVersion : virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: void _persistence_set_repositoryVersion(org.apache.ambari.server.orm.entities.RepositoryVersionEntity)>(r1) >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_set_repositoryVersion : virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: void _persistence_checkFetchedForSet(java.lang.String)>("repositoryVersion")
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_set_repositoryVersion : virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: void _persistence_checkFetchedForSet(java.lang.String)>("repositoryVersion") >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_checkFetchedForSet : $z0 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: boolean _persistence_isAttributeFetched(java.lang.String)>(r1)
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_checkFetchedForSet : $z0 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: boolean _persistence_isAttributeFetched(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_isAttributeFetched : $r2 = r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: org.eclipse.persistence.queries.FetchGroup _persistence_fetchGroup>
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_isAttributeFetched : $r2 = r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: org.eclipse.persistence.queries.FetchGroup _persistence_fetchGroup> >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_isAttributeFetched : if $r2 == null
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_isAttributeFetched : if $r2 == null >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_isAttributeFetched : $z1 = 1
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_isAttributeFetched : $z1 = 1 >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_isAttributeFetched : goto [?= return $z1]
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_isAttributeFetched : goto [?= return $z1] >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_isAttributeFetched : return $z1
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_isAttributeFetched : return $z1 >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_checkFetchedForSet : if $z0 != 0
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_checkFetchedForSet : if $z0 != 0 >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_set_repositoryVersion : $r2 = r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: org.apache.ambari.server.orm.entities.RepositoryVersionEntity repositoryVersion>
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_set_repositoryVersion : $r2 = r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: org.apache.ambari.server.orm.entities.RepositoryVersionEntity repositoryVersion> >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_set_repositoryVersion : virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: void _persistence_propertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("repositoryVersion", $r2, r1)
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_set_repositoryVersion : virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: void _persistence_propertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("repositoryVersion", $r2, r1) >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_propertyChange : $r4 = r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: java.beans.PropertyChangeListener _persistence_listener>
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_propertyChange : $r4 = r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: java.beans.PropertyChangeListener _persistence_listener> >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_propertyChange : if $r4 == null
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_propertyChange : if $r4 == null >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_set_repositoryVersion : r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: org.apache.ambari.server.orm.entities.RepositoryVersionEntity repositoryVersion> = r1
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_set_repositoryVersion : r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: org.apache.ambari.server.orm.entities.RepositoryVersionEntity repositoryVersion> = r1 >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity.setState : virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: void _persistence_set_state(org.apache.ambari.server.state.RepositoryVersionState)>(r1)
org.apache.ambari.server.orm.entities.HostVersionEntity.setState : virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: void _persistence_set_state(org.apache.ambari.server.state.RepositoryVersionState)>(r1) >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_set_state : virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: void _persistence_checkFetchedForSet(java.lang.String)>("state")
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_set_state : virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: void _persistence_checkFetchedForSet(java.lang.String)>("state") >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_set_state : $r2 = r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: org.apache.ambari.server.state.RepositoryVersionState state>
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_set_state : $r2 = r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: org.apache.ambari.server.state.RepositoryVersionState state> >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_set_state : virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: void _persistence_propertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("state", $r2, r1)
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_set_state : virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: void _persistence_propertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("state", $r2, r1) >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_set_state : r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: org.apache.ambari.server.state.RepositoryVersionState state> = r1
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_set_state : r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: org.apache.ambari.server.state.RepositoryVersionState state> = r1 >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.setRepositoryVersion : r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String m_repositoryVersion> = r1
org.apache.ambari.server.controller.PrereqCheckRequest.setRepositoryVersion : r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String m_repositoryVersion> = r1 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r3 = virtualinvoke r2.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getClusterName()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r3 = virtualinvoke r2.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getClusterName()>() >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String m_clusterName>
org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String m_clusterName> >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : return $r1
org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : return $r1 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r13 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheck: com.google.inject.Provider clustersProvider>
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r13 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheck: com.google.inject.Provider clustersProvider> >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r14 = interfaceinvoke $r13.<com.google.inject.Provider: java.lang.Object get()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r14 = interfaceinvoke $r13.<com.google.inject.Provider: java.lang.Object get()>() >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$7.get : $r1 = virtualinvoke r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$7: org.apache.ambari.server.state.Clusters get()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$7.get : $r1 = virtualinvoke r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$7: org.apache.ambari.server.state.Clusters get()>() >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$7.get : $r1 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$7: org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest this$0>
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$7.get : $r1 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$7: org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest this$0> >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$7.get : $r2 = staticinvoke <org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest: org.apache.ambari.server.state.Clusters access$000(org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest)>($r1)
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$7.get : $r2 = staticinvoke <org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest: org.apache.ambari.server.state.Clusters access$000(org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest)>($r1) >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest.access$000 : $r1 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest: org.apache.ambari.server.state.Clusters clusters>
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest.access$000 : $r1 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest: org.apache.ambari.server.state.Clusters clusters> >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest.access$000 : return $r1
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest.access$000 : return $r1 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$7.get : return $r2
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$7.get : return $r2 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$7.get : return $r1
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$7.get : return $r1 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r15 = (org.apache.ambari.server.state.Clusters) $r14
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r15 = (org.apache.ambari.server.state.Clusters) $r14 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r4 = interfaceinvoke $r15.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>(r3)
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r4 = interfaceinvoke $r15.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>(r3) >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r16 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheck: com.google.inject.Provider clustersProvider>
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r16 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheck: com.google.inject.Provider clustersProvider> >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r17 = interfaceinvoke $r16.<com.google.inject.Provider: java.lang.Object get()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r17 = interfaceinvoke $r16.<com.google.inject.Provider: java.lang.Object get()>() >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r18 = (org.apache.ambari.server.state.Clusters) $r17
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r18 = (org.apache.ambari.server.state.Clusters) $r17 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r5 = interfaceinvoke $r18.<org.apache.ambari.server.state.Clusters: java.util.Map getHostsForCluster(java.lang.String)>(r3)
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r5 = interfaceinvoke $r18.<org.apache.ambari.server.state.Clusters: java.util.Map getHostsForCluster(java.lang.String)>(r3) >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r6 = interfaceinvoke r4.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.StackId getDesiredStackVersion()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r6 = interfaceinvoke r4.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.StackId getDesiredStackVersion()>() >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r19 = interfaceinvoke r5.<java.util.Map: java.util.Collection values()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r19 = interfaceinvoke r5.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r7 = interfaceinvoke $r19.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r7 = interfaceinvoke $r19.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : if $z1 == 0
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : if $z1 == 0 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r20 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r20 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r8 = (org.apache.ambari.server.state.Host) $r20
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r8 = (org.apache.ambari.server.state.Host) $r20 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $l0 = interfaceinvoke r4.<org.apache.ambari.server.state.Cluster: long getClusterId()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $l0 = interfaceinvoke r4.<org.apache.ambari.server.state.Cluster: long getClusterId()>() >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r9 = interfaceinvoke r8.<org.apache.ambari.server.state.Host: org.apache.ambari.server.state.MaintenanceState getMaintenanceState(long)>($l0)
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r9 = interfaceinvoke r8.<org.apache.ambari.server.state.Host: org.apache.ambari.server.state.MaintenanceState getMaintenanceState(long)>($l0) >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r21 = <org.apache.ambari.server.state.MaintenanceState: org.apache.ambari.server.state.MaintenanceState OFF>
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r21 = <org.apache.ambari.server.state.MaintenanceState: org.apache.ambari.server.state.MaintenanceState OFF> >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : if r9 == $r21
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : if r9 == $r21 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r22 = virtualinvoke r2.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getRepositoryVersion()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r22 = virtualinvoke r2.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getRepositoryVersion()>() >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getRepositoryVersion : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String m_repositoryVersion>
org.apache.ambari.server.controller.PrereqCheckRequest.getRepositoryVersion : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String m_repositoryVersion> >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getRepositoryVersion : return $r1
org.apache.ambari.server.controller.PrereqCheckRequest.getRepositoryVersion : return $r1 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : if null == $r22
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : if null == $r22 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : z0 = 0
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : z0 = 0 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r23 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheck: com.google.inject.Provider hostVersionDaoProvider>
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r23 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheck: com.google.inject.Provider hostVersionDaoProvider> >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r24 = interfaceinvoke $r23.<com.google.inject.Provider: java.lang.Object get()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r24 = interfaceinvoke $r23.<com.google.inject.Provider: java.lang.Object get()>() >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$9.get : $r1 = virtualinvoke r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$9: org.apache.ambari.server.orm.dao.HostVersionDAO get()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$9.get : $r1 = virtualinvoke r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$9: org.apache.ambari.server.orm.dao.HostVersionDAO get()>() >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$9.get : $r1 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$9: org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest this$0>
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$9.get : $r1 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$9: org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest this$0> >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$9.get : $r2 = staticinvoke <org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest: org.apache.ambari.server.orm.dao.HostVersionDAO access$200(org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest)>($r1)
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$9.get : $r2 = staticinvoke <org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest: org.apache.ambari.server.orm.dao.HostVersionDAO access$200(org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest)>($r1) >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest.access$200 : $r1 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest: org.apache.ambari.server.orm.dao.HostVersionDAO hostVersionDAO>
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest.access$200 : $r1 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest: org.apache.ambari.server.orm.dao.HostVersionDAO hostVersionDAO> >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest.access$200 : return $r1
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest.access$200 : return $r1 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$9.get : return $r2
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$9.get : return $r2 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$9.get : return $r1
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$9.get : return $r1 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r25 = (org.apache.ambari.server.orm.dao.HostVersionDAO) $r24
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r25 = (org.apache.ambari.server.orm.dao.HostVersionDAO) $r24 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r26 = interfaceinvoke r8.<org.apache.ambari.server.state.Host: java.lang.String getHostName()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r26 = interfaceinvoke r8.<org.apache.ambari.server.state.Host: java.lang.String getHostName()>() >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r27 = virtualinvoke $r25.<org.apache.ambari.server.orm.dao.HostVersionDAO: java.util.List findByHost(java.lang.String)>($r26)
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r27 = virtualinvoke $r25.<org.apache.ambari.server.orm.dao.HostVersionDAO: java.util.List findByHost(java.lang.String)>($r26) >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r10 = interfaceinvoke $r27.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r10 = interfaceinvoke $r27.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $z2 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $z2 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : if $z2 == 0
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : if $z2 == 0 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r28 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r28 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r11 = (org.apache.ambari.server.orm.entities.HostVersionEntity) $r28
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r11 = (org.apache.ambari.server.orm.entities.HostVersionEntity) $r28 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r29 = virtualinvoke r11.<org.apache.ambari.server.orm.entities.HostVersionEntity: org.apache.ambari.server.orm.entities.RepositoryVersionEntity getRepositoryVersion()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r29 = virtualinvoke r11.<org.apache.ambari.server.orm.entities.HostVersionEntity: org.apache.ambari.server.orm.entities.RepositoryVersionEntity getRepositoryVersion()>() >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity.getRepositoryVersion : $r1 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: org.apache.ambari.server.orm.entities.RepositoryVersionEntity _persistence_get_repositoryVersion()>()
org.apache.ambari.server.orm.entities.HostVersionEntity.getRepositoryVersion : $r1 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: org.apache.ambari.server.orm.entities.RepositoryVersionEntity _persistence_get_repositoryVersion()>() >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_get_repositoryVersion : virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: void _persistence_checkFetched(java.lang.String)>("repositoryVersion")
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_get_repositoryVersion : virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: void _persistence_checkFetched(java.lang.String)>("repositoryVersion") >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_checkFetched : $z0 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: boolean _persistence_isAttributeFetched(java.lang.String)>(r1)
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_checkFetched : $z0 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: boolean _persistence_isAttributeFetched(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_checkFetched : if $z0 != 0
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_checkFetched : if $z0 != 0 >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_get_repositoryVersion : $r1 = r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: org.apache.ambari.server.orm.entities.RepositoryVersionEntity repositoryVersion>
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_get_repositoryVersion : $r1 = r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: org.apache.ambari.server.orm.entities.RepositoryVersionEntity repositoryVersion> >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_get_repositoryVersion : return $r1
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_get_repositoryVersion : return $r1 >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity.getRepositoryVersion : return $r1
org.apache.ambari.server.orm.entities.HostVersionEntity.getRepositoryVersion : return $r1 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r30 = virtualinvoke $r29.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: java.lang.String getVersion()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r30 = virtualinvoke $r29.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: java.lang.String getVersion()>() >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity.getVersion : $r1 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: java.lang.String _persistence_get_version()>()
org.apache.ambari.server.orm.entities.RepositoryVersionEntity.getVersion : $r1 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: java.lang.String _persistence_get_version()>() >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_get_version : virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: void _persistence_checkFetched(java.lang.String)>("version")
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_get_version : virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: void _persistence_checkFetched(java.lang.String)>("version") >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_checkFetched : $z0 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: boolean _persistence_isAttributeFetched(java.lang.String)>(r1)
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_checkFetched : $z0 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: boolean _persistence_isAttributeFetched(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_checkFetched : if $z0 != 0
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_checkFetched : if $z0 != 0 >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_get_version : $r1 = r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: java.lang.String version>
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_get_version : $r1 = r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: java.lang.String version> >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_get_version : return $r1
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_get_version : return $r1 >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity.getVersion : return $r1
org.apache.ambari.server.orm.entities.RepositoryVersionEntity.getVersion : return $r1 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r31 = virtualinvoke r2.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getRepositoryVersion()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r31 = virtualinvoke r2.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getRepositoryVersion()>() >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $z3 = virtualinvoke $r30.<java.lang.String: boolean equals(java.lang.Object)>($r31)
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $z3 = virtualinvoke $r30.<java.lang.String: boolean equals(java.lang.Object)>($r31) >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : if $z3 == 0
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : if $z3 == 0 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r32 = virtualinvoke r11.<org.apache.ambari.server.orm.entities.HostVersionEntity: org.apache.ambari.server.state.RepositoryVersionState getState()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r32 = virtualinvoke r11.<org.apache.ambari.server.orm.entities.HostVersionEntity: org.apache.ambari.server.state.RepositoryVersionState getState()>() >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity.getState : $r1 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: org.apache.ambari.server.state.RepositoryVersionState _persistence_get_state()>()
org.apache.ambari.server.orm.entities.HostVersionEntity.getState : $r1 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: org.apache.ambari.server.state.RepositoryVersionState _persistence_get_state()>() >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_get_state : virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: void _persistence_checkFetched(java.lang.String)>("state")
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_get_state : virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: void _persistence_checkFetched(java.lang.String)>("state") >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_get_state : $r1 = r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: org.apache.ambari.server.state.RepositoryVersionState state>
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_get_state : $r1 = r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: org.apache.ambari.server.state.RepositoryVersionState state> >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_get_state : return $r1
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_get_state : return $r1 >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity.getState : return $r1
org.apache.ambari.server.orm.entities.HostVersionEntity.getState : return $r1 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r33 = <org.apache.ambari.server.state.RepositoryVersionState: org.apache.ambari.server.state.RepositoryVersionState INSTALLED>
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r33 = <org.apache.ambari.server.state.RepositoryVersionState: org.apache.ambari.server.state.RepositoryVersionState INSTALLED> >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : if $r32 == $r33
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : if $r32 == $r33 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r34 = virtualinvoke r11.<org.apache.ambari.server.orm.entities.HostVersionEntity: org.apache.ambari.server.state.RepositoryVersionState getState()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r34 = virtualinvoke r11.<org.apache.ambari.server.orm.entities.HostVersionEntity: org.apache.ambari.server.state.RepositoryVersionState getState()>() >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r35 = <org.apache.ambari.server.state.RepositoryVersionState: org.apache.ambari.server.state.RepositoryVersionState NOT_REQUIRED>
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r35 = <org.apache.ambari.server.state.RepositoryVersionState: org.apache.ambari.server.state.RepositoryVersionState NOT_REQUIRED> >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : if $r34 != $r35
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : if $r34 != $r35 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : z0 = 1
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : z0 = 1 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : goto [?= (branch)]
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : if z0 != 0
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : if z0 != 0 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : goto [?= $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : goto [?= $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r61 = virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet getFailedOn()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r61 = virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet getFailedOn()>() >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.getFailedOn : $r1 = r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet m_failedOn>
org.apache.ambari.server.state.stack.PrerequisiteCheck.getFailedOn : $r1 = r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet m_failedOn> >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.getFailedOn : return $r1
org.apache.ambari.server.state.stack.PrerequisiteCheck.getFailedOn : return $r1 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $z7 = virtualinvoke $r61.<java.util.LinkedHashSet: boolean isEmpty()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $z7 = virtualinvoke $r61.<java.util.LinkedHashSet: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : if $z7 != 0
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : if $z7 != 0 >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.getStatus : $r1 = r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: org.apache.ambari.server.state.stack.PrereqCheckStatus m_status>
org.apache.ambari.server.state.stack.PrerequisiteCheck.getStatus : $r1 = r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: org.apache.ambari.server.state.stack.PrereqCheckStatus m_status> >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.getStatus : return $r1
