org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r3 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/api/services/AmbariMetaInfo") >>>>>>>> org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : r1 = (org.apache.ambari.server.api.services.AmbariMetaInfo) $r3
org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : r1 = (org.apache.ambari.server.api.services.AmbariMetaInfo) $r3 >>>>>>>> org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r4 = staticinvoke <org.easymock.EasyMock: java.lang.Object createStrictMock(java.lang.Class)>(class "org/apache/ambari/server/controller/spi/ClusterController")
org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r4 = staticinvoke <org.easymock.EasyMock: java.lang.Object createStrictMock(java.lang.Class)>(class "org/apache/ambari/server/controller/spi/ClusterController") >>>>>>>> org.apache.ambari.server.controller.spi.Resource$InternalType.access$200 : $r1 = specialinvoke r0.<org.apache.ambari.server.controller.spi.Resource$InternalType: org.apache.ambari.server.controller.spi.Resource$Type getType()>()
org.apache.ambari.server.controller.spi.Resource$InternalType.access$200 : $r1 = specialinvoke r0.<org.apache.ambari.server.controller.spi.Resource$InternalType: org.apache.ambari.server.controller.spi.Resource$Type getType()>() >>>>>>>> org.apache.ambari.server.controller.spi.Resource$InternalType.getType : r1 = virtualinvoke r0.<org.apache.ambari.server.controller.spi.Resource$InternalType: java.lang.String name()>()
org.apache.ambari.server.controller.spi.Resource$InternalType.getType : r1 = virtualinvoke r0.<org.apache.ambari.server.controller.spi.Resource$InternalType: java.lang.String name()>() >>>>>>>> org.apache.ambari.server.controller.spi.Resource$InternalType.getType : r2 = staticinvoke <org.apache.ambari.server.controller.spi.Resource$Type: org.apache.ambari.server.controller.spi.Resource$Type access$000(java.lang.String)>(r1)
org.apache.ambari.server.controller.spi.Resource$InternalType.getType : r2 = staticinvoke <org.apache.ambari.server.controller.spi.Resource$Type: org.apache.ambari.server.controller.spi.Resource$Type access$000(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.access$000 : $r1 = staticinvoke <org.apache.ambari.server.controller.spi.Resource$Type: org.apache.ambari.server.controller.spi.Resource$Type getType(java.lang.String)>(r0)
org.apache.ambari.server.controller.spi.Resource$Type.access$000 : $r1 = staticinvoke <org.apache.ambari.server.controller.spi.Resource$Type: org.apache.ambari.server.controller.spi.Resource$Type getType(java.lang.String)>(r0) >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.getType : $r1 = <org.apache.ambari.server.controller.spi.Resource$Type: java.util.Map types>
org.apache.ambari.server.controller.spi.Resource$Type.getType : $r1 = <org.apache.ambari.server.controller.spi.Resource$Type: java.util.Map types> >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.getType : $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0)
org.apache.ambari.server.controller.spi.Resource$Type.getType : $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.getType : $r3 = (org.apache.ambari.server.controller.spi.Resource$Type) $r2
org.apache.ambari.server.controller.spi.Resource$Type.getType : $r3 = (org.apache.ambari.server.controller.spi.Resource$Type) $r2 >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.getType : return $r3
org.apache.ambari.server.controller.spi.Resource$Type.getType : return $r3 >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.access$000 : return $r1
org.apache.ambari.server.controller.spi.Resource$Type.access$000 : return $r1 >>>>>>>> org.apache.ambari.server.controller.spi.Resource$InternalType.getType : if r2 != null
org.apache.ambari.server.controller.spi.Resource$InternalType.getType : if r2 != null >>>>>>>> org.apache.ambari.server.controller.spi.Resource$InternalType.getType : $r3 = new org.apache.ambari.server.controller.spi.Resource$Type
org.apache.ambari.server.controller.spi.Resource$InternalType.getType : $r3 = new org.apache.ambari.server.controller.spi.Resource$Type >>>>>>>> org.apache.ambari.server.controller.spi.Resource$InternalType.getType : $r4 = virtualinvoke r0.<org.apache.ambari.server.controller.spi.Resource$InternalType: java.lang.String name()>()
org.apache.ambari.server.controller.spi.Resource$InternalType.getType : $r4 = virtualinvoke r0.<org.apache.ambari.server.controller.spi.Resource$InternalType: java.lang.String name()>() >>>>>>>> org.apache.ambari.server.controller.spi.Resource$InternalType.getType : $i0 = virtualinvoke r0.<org.apache.ambari.server.controller.spi.Resource$InternalType: int ordinal()>()
org.apache.ambari.server.controller.spi.Resource$InternalType.getType : $i0 = virtualinvoke r0.<org.apache.ambari.server.controller.spi.Resource$InternalType: int ordinal()>() >>>>>>>> org.apache.ambari.server.controller.spi.Resource$InternalType.getType : specialinvoke $r3.<org.apache.ambari.server.controller.spi.Resource$Type: void <init>(java.lang.String,int,org.apache.ambari.server.controller.spi.Resource$1)>($r4, $i0, null)
org.apache.ambari.server.controller.spi.Resource$InternalType.getType : specialinvoke $r3.<org.apache.ambari.server.controller.spi.Resource$Type: void <init>(java.lang.String,int,org.apache.ambari.server.controller.spi.Resource$1)>($r4, $i0, null) >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.setType : $r2 = <org.apache.ambari.server.controller.spi.Resource$Type: java.util.Map types>
org.apache.ambari.server.controller.spi.Resource$Type.setType : $r2 = <org.apache.ambari.server.controller.spi.Resource$Type: java.util.Map types> >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.setType : interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1)
org.apache.ambari.server.controller.spi.Resource$Type.setType : interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1) >>>>>>>> org.apache.ambari.server.controller.spi.Resource$InternalType.getType : goto [?= return $r3]
org.apache.ambari.server.controller.spi.Resource$InternalType.getType : goto [?= return $r3] >>>>>>>> org.apache.ambari.server.controller.spi.Resource$InternalType.getType : return $r3
org.apache.ambari.server.controller.spi.Resource$InternalType.getType : return $r3 >>>>>>>> org.apache.ambari.server.controller.spi.Resource$InternalType.access$200 : return $r1
org.apache.ambari.server.controller.spi.Resource$InternalType.access$200 : return $r1 >>>>>>>> org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : r2 = (org.apache.ambari.server.controller.spi.ClusterController) $r4
org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : r2 = (org.apache.ambari.server.controller.spi.ClusterController) $r4 >>>>>>>> org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r5 = virtualinvoke r0.<org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "javax/persistence/EntityManager")
org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r5 = virtualinvoke r0.<org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "javax/persistence/EntityManager") >>>>>>>> org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r6 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "javax/persistence/EntityManager")
org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r6 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "javax/persistence/EntityManager") >>>>>>>> org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : interfaceinvoke $r5.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r6)
org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : interfaceinvoke $r5.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r6) >>>>>>>> org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r7 = virtualinvoke r0.<org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "org/apache/ambari/server/orm/DBAccessor")
org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r7 = virtualinvoke r0.<org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "org/apache/ambari/server/orm/DBAccessor") >>>>>>>> org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r8 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/orm/DBAccessor")
org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r8 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/orm/DBAccessor") >>>>>>>> org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : interfaceinvoke $r7.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r8)
org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : interfaceinvoke $r7.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r8) >>>>>>>> org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r9 = virtualinvoke r0.<org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "org/apache/ambari/server/state/cluster/ClusterFactory")
org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r9 = virtualinvoke r0.<org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "org/apache/ambari/server/state/cluster/ClusterFactory") >>>>>>>> org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r10 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/state/cluster/ClusterFactory")
org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r10 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/state/cluster/ClusterFactory") >>>>>>>> org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : interfaceinvoke $r9.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r10)
org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : interfaceinvoke $r9.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r10) >>>>>>>> org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r11 = virtualinvoke r0.<org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "org/apache/ambari/server/state/host/HostFactory")
org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r11 = virtualinvoke r0.<org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "org/apache/ambari/server/state/host/HostFactory") >>>>>>>> org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r12 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/state/host/HostFactory")
org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r12 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/state/host/HostFactory") >>>>>>>> org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : interfaceinvoke $r11.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r12)
org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : interfaceinvoke $r11.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r12) >>>>>>>> org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r13 = virtualinvoke r0.<org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "org/apache/ambari/server/security/SecurityHelper")
org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r13 = virtualinvoke r0.<org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "org/apache/ambari/server/security/SecurityHelper") >>>>>>>> org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r14 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/security/SecurityHelper")
org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r14 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/security/SecurityHelper") >>>>>>>> org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : interfaceinvoke $r13.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r14)
org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : interfaceinvoke $r13.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r14) >>>>>>>> org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r15 = virtualinvoke r0.<org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "org/apache/ambari/server/state/stack/OsFamily")
org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r15 = virtualinvoke r0.<org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "org/apache/ambari/server/state/stack/OsFamily") >>>>>>>> org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r16 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/state/stack/OsFamily")
org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r16 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/state/stack/OsFamily") >>>>>>>> org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : interfaceinvoke $r15.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r16)
org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : interfaceinvoke $r15.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r16) >>>>>>>> org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r17 = virtualinvoke r0.<org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper")
org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r17 = virtualinvoke r0.<org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper") >>>>>>>> org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r18 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper")
org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r18 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper") >>>>>>>> org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : interfaceinvoke $r17.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r18)
org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : interfaceinvoke $r17.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r18) >>>>>>>> org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r19 = virtualinvoke r0.<org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "org/apache/ambari/server/controller/AmbariManagementController")
org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r19 = virtualinvoke r0.<org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "org/apache/ambari/server/controller/AmbariManagementController") >>>>>>>> org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r20 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/controller/AmbariManagementController")
org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r20 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/controller/AmbariManagementController") >>>>>>>> org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : interfaceinvoke $r19.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r20)
org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : interfaceinvoke $r19.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r20) >>>>>>>> org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r21 = virtualinvoke r0.<org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "org/apache/ambari/server/api/services/AmbariMetaInfo")
org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r21 = virtualinvoke r0.<org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "org/apache/ambari/server/api/services/AmbariMetaInfo") >>>>>>>> org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : interfaceinvoke $r21.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>(r1)
org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : interfaceinvoke $r21.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r22 = virtualinvoke r0.<org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "org/apache/ambari/server/actionmanager/RequestFactory")
org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r22 = virtualinvoke r0.<org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "org/apache/ambari/server/actionmanager/RequestFactory") >>>>>>>> org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r23 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/actionmanager/RequestFactory")
org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r23 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/actionmanager/RequestFactory") >>>>>>>> org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : interfaceinvoke $r22.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r23)
org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : interfaceinvoke $r22.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r23) >>>>>>>> org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r24 = virtualinvoke r0.<org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "org/apache/ambari/server/state/Clusters")
org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r24 = virtualinvoke r0.<org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "org/apache/ambari/server/state/Clusters") >>>>>>>> org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r25 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/state/Clusters")
org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r25 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/state/Clusters") >>>>>>>> org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : interfaceinvoke $r24.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r25)
org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : interfaceinvoke $r24.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r25) >>>>>>>> org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r26 = virtualinvoke r0.<org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "org/apache/ambari/server/controller/spi/ClusterController")
org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r26 = virtualinvoke r0.<org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "org/apache/ambari/server/controller/spi/ClusterController") >>>>>>>> org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : interfaceinvoke $r26.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>(r2)
org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : interfaceinvoke $r26.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>(r2) >>>>>>>> org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r27 = virtualinvoke r0.<org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "org/apache/ambari/server/stack/StackManagerFactory")
org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r27 = virtualinvoke r0.<org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "org/apache/ambari/server/stack/StackManagerFactory") >>>>>>>> org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r28 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/stack/StackManagerFactory")
org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r28 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/stack/StackManagerFactory") >>>>>>>> org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : interfaceinvoke $r27.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r28)
org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : interfaceinvoke $r27.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r28) >>>>>>>> org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r29 = virtualinvoke r0.<org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "org/apache/ambari/server/orm/dao/HostRoleCommandDAO")
org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r29 = virtualinvoke r0.<org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "org/apache/ambari/server/orm/dao/HostRoleCommandDAO") >>>>>>>> org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r30 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/orm/dao/HostRoleCommandDAO")
org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : $r30 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/orm/dao/HostRoleCommandDAO") >>>>>>>> org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : interfaceinvoke $r29.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r30)
org.apache.ambari.server.state.ConfigHelperTest$RunWithCustomModule$1.configure : interfaceinvoke $r29.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r30) >>>>>>>> org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getKey : $r1 = r0.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String m_key>
org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getKey : $r1 = r0.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String m_key> >>>>>>>> org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getKey : return $r1
org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getKey : return $r1 >>>>>>>> org.apache.ambari.annotations.TransactionalLock$LockArea.values : $r0 = <org.apache.ambari.annotations.TransactionalLock$LockArea: org.apache.ambari.annotations.TransactionalLock$LockArea[] $VALUES>
org.apache.ambari.annotations.TransactionalLock$LockArea.values : $r0 = <org.apache.ambari.annotations.TransactionalLock$LockArea: org.apache.ambari.annotations.TransactionalLock$LockArea[] $VALUES> >>>>>>>> org.apache.ambari.annotations.TransactionalLock$LockArea.values : $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>()
org.apache.ambari.annotations.TransactionalLock$LockArea.values : $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> org.apache.ambari.annotations.TransactionalLock$LockArea.values : $r2 = (org.apache.ambari.annotations.TransactionalLock$LockArea[]) $r1
org.apache.ambari.annotations.TransactionalLock$LockArea.values : $r2 = (org.apache.ambari.annotations.TransactionalLock$LockArea[]) $r1 >>>>>>>> org.apache.ambari.annotations.TransactionalLock$LockArea.values : return $r2
org.apache.ambari.annotations.TransactionalLock$LockArea.values : return $r2 >>>>>>>> org.apache.ambari.annotations.TransactionalLock$LockType.values : $r0 = <org.apache.ambari.annotations.TransactionalLock$LockType: org.apache.ambari.annotations.TransactionalLock$LockType[] $VALUES>
org.apache.ambari.annotations.TransactionalLock$LockType.values : $r0 = <org.apache.ambari.annotations.TransactionalLock$LockType: org.apache.ambari.annotations.TransactionalLock$LockType[] $VALUES> >>>>>>>> org.apache.ambari.annotations.TransactionalLock$LockType.values : $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>()
org.apache.ambari.annotations.TransactionalLock$LockType.values : $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> org.apache.ambari.annotations.TransactionalLock$LockType.values : $r2 = (org.apache.ambari.annotations.TransactionalLock$LockType[]) $r1
org.apache.ambari.annotations.TransactionalLock$LockType.values : $r2 = (org.apache.ambari.annotations.TransactionalLock$LockType[]) $r1 >>>>>>>> org.apache.ambari.annotations.TransactionalLock$LockType.values : return $r2
org.apache.ambari.annotations.TransactionalLock$LockType.values : return $r2 >>>>>>>> org.apache.ambari.server.configuration.Configuration.readConfigFile : $r0 = new java.util.Properties
org.apache.ambari.server.configuration.Configuration.readConfigFile : $r0 = new java.util.Properties >>>>>>>> org.apache.ambari.server.configuration.Configuration.readConfigFile : specialinvoke $r0.<java.util.Properties: void <init>()>()
org.apache.ambari.server.configuration.Configuration.readConfigFile : specialinvoke $r0.<java.util.Properties: void <init>()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.readConfigFile : r1 = $r0
org.apache.ambari.server.configuration.Configuration.readConfigFile : r1 = $r0 >>>>>>>> org.apache.ambari.server.configuration.Configuration.readConfigFile : $r4 = class "org/apache/ambari/server/configuration/Configuration"
org.apache.ambari.server.configuration.Configuration.readConfigFile : $r4 = class "org/apache/ambari/server/configuration/Configuration" >>>>>>>> org.apache.ambari.server.configuration.Configuration.readConfigFile : $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.ClassLoader getClassLoader()>()
org.apache.ambari.server.configuration.Configuration.readConfigFile : $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.ClassLoader getClassLoader()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.readConfigFile : r2 = virtualinvoke $r5.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>("ambari.properties")
org.apache.ambari.server.configuration.Configuration.readConfigFile : r2 = virtualinvoke $r5.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>("ambari.properties") >>>>>>>> org.apache.ambari.server.configuration.Configuration.readConfigFile : if r2 != null
org.apache.ambari.server.configuration.Configuration.readConfigFile : if r2 != null >>>>>>>> org.apache.ambari.server.configuration.Configuration.readConfigFile : $r6 = new java.lang.RuntimeException
org.apache.ambari.server.configuration.Configuration.readConfigFile : $r6 = new java.lang.RuntimeException >>>>>>>> org.apache.ambari.server.configuration.Configuration.readConfigFile : specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>("ambari.properties not found in classpath")
org.apache.ambari.server.configuration.Configuration.readConfigFile : specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>("ambari.properties not found in classpath") >>>>>>>> org.apache.ambari.server.configuration.Configuration.readConfigFile : throw $r6
org.apache.ambari.server.configuration.Configuration.readConfigFile : throw $r6 >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r2 = r0.<org.apache.ambari.server.metadata.ActionMetadata: java.util.Map serviceClients>
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r2 = r0.<org.apache.ambari.server.metadata.ActionMetadata: java.util.Map serviceClients> >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r1 = <org.apache.ambari.server.Role: org.apache.ambari.server.Role HDFS_CLIENT>
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r1 = <org.apache.ambari.server.Role: org.apache.ambari.server.Role HDFS_CLIENT> >>>>>>>> org.apache.ambari.server.Role.valueOf : $r1 = <org.apache.ambari.server.Role: java.util.Map roles>
org.apache.ambari.server.Role.valueOf : $r1 = <org.apache.ambari.server.Role: java.util.Map roles> >>>>>>>> org.apache.ambari.server.Role.valueOf : $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r0)
org.apache.ambari.server.Role.valueOf : $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r0) >>>>>>>> org.apache.ambari.server.Role.valueOf : if $z0 == 0
org.apache.ambari.server.Role.valueOf : if $z0 == 0 >>>>>>>> org.apache.ambari.server.Role.valueOf : $r6 = new org.apache.ambari.server.Role
org.apache.ambari.server.Role.valueOf : $r6 = new org.apache.ambari.server.Role >>>>>>>> org.apache.ambari.server.Role.valueOf : specialinvoke $r6.<org.apache.ambari.server.Role: void <init>(java.lang.String)>(r0)
org.apache.ambari.server.Role.valueOf : specialinvoke $r6.<org.apache.ambari.server.Role: void <init>(java.lang.String)>(r0) >>>>>>>> org.apache.ambari.server.Role.valueOf : r2 = $r6
org.apache.ambari.server.Role.valueOf : r2 = $r6 >>>>>>>> org.apache.ambari.server.Role.valueOf : $r7 = <org.apache.ambari.server.Role: java.util.Map roles>
org.apache.ambari.server.Role.valueOf : $r7 = <org.apache.ambari.server.Role: java.util.Map roles> >>>>>>>> org.apache.ambari.server.Role.valueOf : interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r2)
org.apache.ambari.server.Role.valueOf : interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r2) >>>>>>>> org.apache.ambari.server.Role.valueOf : return r2
org.apache.ambari.server.Role.valueOf : return r2 >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r3 = virtualinvoke $r1.<org.apache.ambari.server.Role: java.lang.String toString()>()
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r3 = virtualinvoke $r1.<org.apache.ambari.server.Role: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.Role.toString : $r1 = r0.<org.apache.ambari.server.Role: java.lang.String name>
org.apache.ambari.server.Role.toString : $r1 = r0.<org.apache.ambari.server.Role: java.lang.String name> >>>>>>>> org.apache.ambari.server.Role.toString : return $r1
org.apache.ambari.server.Role.toString : return $r1 >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("hdfs", $r3)
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("hdfs", $r3) >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r5 = r0.<org.apache.ambari.server.metadata.ActionMetadata: java.util.Map serviceClients>
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r5 = r0.<org.apache.ambari.server.metadata.ActionMetadata: java.util.Map serviceClients> >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r6 = <org.apache.ambari.server.Role: org.apache.ambari.server.Role GLUSTERFS_CLIENT>
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r6 = <org.apache.ambari.server.Role: org.apache.ambari.server.Role GLUSTERFS_CLIENT> >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r7 = virtualinvoke $r6.<org.apache.ambari.server.Role: java.lang.String toString()>()
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r7 = virtualinvoke $r6.<org.apache.ambari.server.Role: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("glusterfs", $r7)
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("glusterfs", $r7) >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r9 = r0.<org.apache.ambari.server.metadata.ActionMetadata: java.util.Map serviceClients>
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r9 = r0.<org.apache.ambari.server.metadata.ActionMetadata: java.util.Map serviceClients> >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r10 = <org.apache.ambari.server.Role: org.apache.ambari.server.Role HBASE_CLIENT>
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r10 = <org.apache.ambari.server.Role: org.apache.ambari.server.Role HBASE_CLIENT> >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r11 = virtualinvoke $r10.<org.apache.ambari.server.Role: java.lang.String toString()>()
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r11 = virtualinvoke $r10.<org.apache.ambari.server.Role: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("hbase", $r11)
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("hbase", $r11) >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r13 = r0.<org.apache.ambari.server.metadata.ActionMetadata: java.util.Map serviceClients>
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r13 = r0.<org.apache.ambari.server.metadata.ActionMetadata: java.util.Map serviceClients> >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r14 = <org.apache.ambari.server.Role: org.apache.ambari.server.Role MAPREDUCE_CLIENT>
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r14 = <org.apache.ambari.server.Role: org.apache.ambari.server.Role MAPREDUCE_CLIENT> >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r15 = virtualinvoke $r14.<org.apache.ambari.server.Role: java.lang.String toString()>()
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r15 = virtualinvoke $r14.<org.apache.ambari.server.Role: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("mapreduce", $r15)
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("mapreduce", $r15) >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r17 = r0.<org.apache.ambari.server.metadata.ActionMetadata: java.util.Map serviceClients>
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r17 = r0.<org.apache.ambari.server.metadata.ActionMetadata: java.util.Map serviceClients> >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r18 = <org.apache.ambari.server.Role: org.apache.ambari.server.Role ZOOKEEPER_CLIENT>
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r18 = <org.apache.ambari.server.Role: org.apache.ambari.server.Role ZOOKEEPER_CLIENT> >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r19 = virtualinvoke $r18.<org.apache.ambari.server.Role: java.lang.String toString()>()
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r19 = virtualinvoke $r18.<org.apache.ambari.server.Role: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("zookeeper", $r19)
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("zookeeper", $r19) >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r21 = r0.<org.apache.ambari.server.metadata.ActionMetadata: java.util.Map serviceClients>
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r21 = r0.<org.apache.ambari.server.metadata.ActionMetadata: java.util.Map serviceClients> >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r22 = <org.apache.ambari.server.Role: org.apache.ambari.server.Role HIVE_CLIENT>
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r22 = <org.apache.ambari.server.Role: org.apache.ambari.server.Role HIVE_CLIENT> >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r23 = virtualinvoke $r22.<org.apache.ambari.server.Role: java.lang.String toString()>()
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r23 = virtualinvoke $r22.<org.apache.ambari.server.Role: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : interfaceinvoke $r21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("hive", $r23)
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : interfaceinvoke $r21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("hive", $r23) >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r25 = r0.<org.apache.ambari.server.metadata.ActionMetadata: java.util.Map serviceClients>
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r25 = r0.<org.apache.ambari.server.metadata.ActionMetadata: java.util.Map serviceClients> >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r26 = <org.apache.ambari.server.Role: org.apache.ambari.server.Role HCAT>
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r26 = <org.apache.ambari.server.Role: org.apache.ambari.server.Role HCAT> >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r27 = virtualinvoke $r26.<org.apache.ambari.server.Role: java.lang.String toString()>()
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r27 = virtualinvoke $r26.<org.apache.ambari.server.Role: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : interfaceinvoke $r25.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("hcat", $r27)
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : interfaceinvoke $r25.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("hcat", $r27) >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r29 = r0.<org.apache.ambari.server.metadata.ActionMetadata: java.util.Map serviceClients>
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r29 = r0.<org.apache.ambari.server.metadata.ActionMetadata: java.util.Map serviceClients> >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r30 = <org.apache.ambari.server.Role: org.apache.ambari.server.Role OOZIE_CLIENT>
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r30 = <org.apache.ambari.server.Role: org.apache.ambari.server.Role OOZIE_CLIENT> >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r31 = virtualinvoke $r30.<org.apache.ambari.server.Role: java.lang.String toString()>()
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r31 = virtualinvoke $r30.<org.apache.ambari.server.Role: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : interfaceinvoke $r29.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("oozie", $r31)
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : interfaceinvoke $r29.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("oozie", $r31) >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r33 = r0.<org.apache.ambari.server.metadata.ActionMetadata: java.util.Map serviceClients>
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r33 = r0.<org.apache.ambari.server.metadata.ActionMetadata: java.util.Map serviceClients> >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r34 = <org.apache.ambari.server.Role: org.apache.ambari.server.Role PIG>
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r34 = <org.apache.ambari.server.Role: org.apache.ambari.server.Role PIG> >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r35 = virtualinvoke $r34.<org.apache.ambari.server.Role: java.lang.String toString()>()
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r35 = virtualinvoke $r34.<org.apache.ambari.server.Role: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : interfaceinvoke $r33.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pig", $r35)
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : interfaceinvoke $r33.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pig", $r35) >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r37 = r0.<org.apache.ambari.server.metadata.ActionMetadata: java.util.Map serviceClients>
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r37 = r0.<org.apache.ambari.server.metadata.ActionMetadata: java.util.Map serviceClients> >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r38 = <org.apache.ambari.server.Role: org.apache.ambari.server.Role MAHOUT>
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r38 = <org.apache.ambari.server.Role: org.apache.ambari.server.Role MAHOUT> >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r39 = virtualinvoke $r38.<org.apache.ambari.server.Role: java.lang.String toString()>()
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r39 = virtualinvoke $r38.<org.apache.ambari.server.Role: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : interfaceinvoke $r37.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("mahout", $r39)
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : interfaceinvoke $r37.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("mahout", $r39) >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r41 = r0.<org.apache.ambari.server.metadata.ActionMetadata: java.util.Map serviceClients>
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r41 = r0.<org.apache.ambari.server.metadata.ActionMetadata: java.util.Map serviceClients> >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r42 = <org.apache.ambari.server.Role: org.apache.ambari.server.Role SQOOP>
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r42 = <org.apache.ambari.server.Role: org.apache.ambari.server.Role SQOOP> >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r43 = virtualinvoke $r42.<org.apache.ambari.server.Role: java.lang.String toString()>()
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r43 = virtualinvoke $r42.<org.apache.ambari.server.Role: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : interfaceinvoke $r41.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sqoop", $r43)
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : interfaceinvoke $r41.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sqoop", $r43) >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r45 = r0.<org.apache.ambari.server.metadata.ActionMetadata: java.util.Map serviceClients>
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r45 = r0.<org.apache.ambari.server.metadata.ActionMetadata: java.util.Map serviceClients> >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r46 = <org.apache.ambari.server.Role: org.apache.ambari.server.Role YARN_CLIENT>
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r46 = <org.apache.ambari.server.Role: org.apache.ambari.server.Role YARN_CLIENT> >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r47 = virtualinvoke $r46.<org.apache.ambari.server.Role: java.lang.String toString()>()
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r47 = virtualinvoke $r46.<org.apache.ambari.server.Role: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : interfaceinvoke $r45.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("yarn", $r47)
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : interfaceinvoke $r45.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("yarn", $r47) >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r49 = r0.<org.apache.ambari.server.metadata.ActionMetadata: java.util.Map serviceClients>
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r49 = r0.<org.apache.ambari.server.metadata.ActionMetadata: java.util.Map serviceClients> >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r50 = <org.apache.ambari.server.Role: org.apache.ambari.server.Role KERBEROS_CLIENT>
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r50 = <org.apache.ambari.server.Role: org.apache.ambari.server.Role KERBEROS_CLIENT> >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r51 = virtualinvoke $r50.<org.apache.ambari.server.Role: java.lang.String toString()>()
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r51 = virtualinvoke $r50.<org.apache.ambari.server.Role: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : interfaceinvoke $r49.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("kerberos", $r51)
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : interfaceinvoke $r49.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("kerberos", $r51) >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r53 = r0.<org.apache.ambari.server.metadata.ActionMetadata: java.util.Map serviceClients>
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r53 = r0.<org.apache.ambari.server.metadata.ActionMetadata: java.util.Map serviceClients> >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r54 = <org.apache.ambari.server.Role: org.apache.ambari.server.Role ACCUMULO_CLIENT>
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r54 = <org.apache.ambari.server.Role: org.apache.ambari.server.Role ACCUMULO_CLIENT> >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r55 = virtualinvoke $r54.<org.apache.ambari.server.Role: java.lang.String toString()>()
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : $r55 = virtualinvoke $r54.<org.apache.ambari.server.Role: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : interfaceinvoke $r53.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("accumulo", $r55)
org.apache.ambari.server.metadata.ActionMetadata.fillServiceClients : interfaceinvoke $r53.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("accumulo", $r55) >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillHostComponentCommands : $r1 = r0.<org.apache.ambari.server.metadata.ActionMetadata: java.util.List defaultHostComponentCommands>
org.apache.ambari.server.metadata.ActionMetadata.fillHostComponentCommands : $r1 = r0.<org.apache.ambari.server.metadata.ActionMetadata: java.util.List defaultHostComponentCommands> >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillHostComponentCommands : interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>("RESTART")
org.apache.ambari.server.metadata.ActionMetadata.fillHostComponentCommands : interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>("RESTART") >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillHostComponentCommands : $r2 = r0.<org.apache.ambari.server.metadata.ActionMetadata: java.util.List defaultHostComponentCommands>
org.apache.ambari.server.metadata.ActionMetadata.fillHostComponentCommands : $r2 = r0.<org.apache.ambari.server.metadata.ActionMetadata: java.util.List defaultHostComponentCommands> >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillHostComponentCommands : interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>("START")
org.apache.ambari.server.metadata.ActionMetadata.fillHostComponentCommands : interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>("START") >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillHostComponentCommands : $r3 = r0.<org.apache.ambari.server.metadata.ActionMetadata: java.util.List defaultHostComponentCommands>
org.apache.ambari.server.metadata.ActionMetadata.fillHostComponentCommands : $r3 = r0.<org.apache.ambari.server.metadata.ActionMetadata: java.util.List defaultHostComponentCommands> >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillHostComponentCommands : interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>("STOP")
org.apache.ambari.server.metadata.ActionMetadata.fillHostComponentCommands : interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>("STOP") >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillHostComponentCommands : $r4 = r0.<org.apache.ambari.server.metadata.ActionMetadata: java.util.List defaultHostComponentCommands>
org.apache.ambari.server.metadata.ActionMetadata.fillHostComponentCommands : $r4 = r0.<org.apache.ambari.server.metadata.ActionMetadata: java.util.List defaultHostComponentCommands> >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillHostComponentCommands : interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>("INSTALL")
org.apache.ambari.server.metadata.ActionMetadata.fillHostComponentCommands : interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>("INSTALL") >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillHostComponentCommands : $r5 = r0.<org.apache.ambari.server.metadata.ActionMetadata: java.util.List defaultHostComponentCommands>
org.apache.ambari.server.metadata.ActionMetadata.fillHostComponentCommands : $r5 = r0.<org.apache.ambari.server.metadata.ActionMetadata: java.util.List defaultHostComponentCommands> >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillHostComponentCommands : interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>("CONFIGURE")
org.apache.ambari.server.metadata.ActionMetadata.fillHostComponentCommands : interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>("CONFIGURE") >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillHostComponentCommands : $r6 = r0.<org.apache.ambari.server.metadata.ActionMetadata: java.util.List defaultHostComponentCommands>
org.apache.ambari.server.metadata.ActionMetadata.fillHostComponentCommands : $r6 = r0.<org.apache.ambari.server.metadata.ActionMetadata: java.util.List defaultHostComponentCommands> >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillHostComponentCommands : interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>("CONFIGURE_FUNCTION")
org.apache.ambari.server.metadata.ActionMetadata.fillHostComponentCommands : interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>("CONFIGURE_FUNCTION") >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillHostComponentCommands : $r7 = r0.<org.apache.ambari.server.metadata.ActionMetadata: java.util.List defaultHostComponentCommands>
org.apache.ambari.server.metadata.ActionMetadata.fillHostComponentCommands : $r7 = r0.<org.apache.ambari.server.metadata.ActionMetadata: java.util.List defaultHostComponentCommands> >>>>>>>> org.apache.ambari.server.metadata.ActionMetadata.fillHostComponentCommands : interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>("DISABLE_SECURITY")
org.apache.ambari.server.metadata.ActionMetadata.fillHostComponentCommands : interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>("DISABLE_SECURITY") >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : if r2 == null
org.apache.ambari.server.state.StackId.parseStackIdHelper : if r2 == null >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $z0 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>()
org.apache.ambari.server.state.StackId.parseStackIdHelper : $z0 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : if $z0 == 0
org.apache.ambari.server.state.StackId.parseStackIdHelper : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : i0 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(45)
org.apache.ambari.server.state.StackId.parseStackIdHelper : i0 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(45) >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : if i0 == -1
org.apache.ambari.server.state.StackId.parseStackIdHelper : if i0 == -1 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $i1 = virtualinvoke r2.<java.lang.String: int length()>()
org.apache.ambari.server.state.StackId.parseStackIdHelper : $i1 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $i2 = i0 + 1
org.apache.ambari.server.state.StackId.parseStackIdHelper : $i2 = i0 + 1 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : if $i1 > $i2
org.apache.ambari.server.state.StackId.parseStackIdHelper : if $i1 > $i2 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $r8 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0)
org.apache.ambari.server.state.StackId.parseStackIdHelper : $r8 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0) >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : r1.<org.apache.ambari.server.state.StackId: java.lang.String stackName> = $r8
org.apache.ambari.server.state.StackId.parseStackIdHelper : r1.<org.apache.ambari.server.state.StackId: java.lang.String stackName> = $r8 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $i3 = i0 + 1
org.apache.ambari.server.state.StackId.parseStackIdHelper : $i3 = i0 + 1 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $r9 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i3)
org.apache.ambari.server.state.StackId.parseStackIdHelper : $r9 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i3) >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : r1.<org.apache.ambari.server.state.StackId: java.lang.String stackVersion> = $r9
org.apache.ambari.server.state.StackId.parseStackIdHelper : r1.<org.apache.ambari.server.state.StackId: java.lang.String stackVersion> = $r9 >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r1 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/state/ConfigHelper")
org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r1 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/state/ConfigHelper") >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r2 = (org.apache.ambari.server.state.ConfigHelper) $r1
org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r2 = (org.apache.ambari.server.state.ConfigHelper) $r1 >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : r0.<org.apache.ambari.server.state.UpgradeHelperTest: org.apache.ambari.server.state.ConfigHelper m_configHelper> = $r2
org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : r0.<org.apache.ambari.server.state.UpgradeHelperTest: org.apache.ambari.server.state.ConfigHelper m_configHelper> = $r2 >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r3 = r0.<org.apache.ambari.server.state.UpgradeHelperTest: org.apache.ambari.server.state.ConfigHelper m_configHelper>
org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r3 = r0.<org.apache.ambari.server.state.UpgradeHelperTest: org.apache.ambari.server.state.ConfigHelper m_configHelper> >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r4 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "org/apache/ambari/server/state/Cluster")
org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r4 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "org/apache/ambari/server/state/Cluster") >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r5 = (org.apache.ambari.server.state.Cluster) $r4
org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r5 = (org.apache.ambari.server.state.Cluster) $r4 >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r6 = staticinvoke <org.easymock.EasyMock: java.lang.Object eq(java.lang.Object)>("{{foo/bar}}")
org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r6 = staticinvoke <org.easymock.EasyMock: java.lang.Object eq(java.lang.Object)>("{{foo/bar}}") >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r7 = (java.lang.String) $r6
org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r7 = (java.lang.String) $r6 >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r8 = virtualinvoke $r3.<org.apache.ambari.server.state.ConfigHelper: java.lang.String getPlaceholderValueFromDesiredConfigurations(org.apache.ambari.server.state.Cluster,java.lang.String)>($r5, $r7)
org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r8 = virtualinvoke $r3.<org.apache.ambari.server.state.ConfigHelper: java.lang.String getPlaceholderValueFromDesiredConfigurations(org.apache.ambari.server.state.Cluster,java.lang.String)>($r5, $r7) >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r9 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r8)
org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r9 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r8) >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r10 = interfaceinvoke $r9.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("placeholder-rendered-properly")
org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r10 = interfaceinvoke $r9.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("placeholder-rendered-properly") >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : interfaceinvoke $r10.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : interfaceinvoke $r10.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r12 = r0.<org.apache.ambari.server.state.UpgradeHelperTest: org.apache.ambari.server.state.ConfigHelper m_configHelper>
org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r12 = r0.<org.apache.ambari.server.state.UpgradeHelperTest: org.apache.ambari.server.state.ConfigHelper m_configHelper> >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r13 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "org/apache/ambari/server/state/Cluster")
org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r13 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "org/apache/ambari/server/state/Cluster") >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r14 = (org.apache.ambari.server.state.Cluster) $r13
org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r14 = (org.apache.ambari.server.state.Cluster) $r13 >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r15 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "java/lang/String")
org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r15 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "java/lang/String") >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r16 = (java.lang.String) $r15
org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r16 = (java.lang.String) $r15 >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r17 = virtualinvoke $r12.<org.apache.ambari.server.state.ConfigHelper: java.util.Map getEffectiveDesiredTags(org.apache.ambari.server.state.Cluster,java.lang.String)>($r14, $r16)
org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r17 = virtualinvoke $r12.<org.apache.ambari.server.state.ConfigHelper: java.util.Map getEffectiveDesiredTags(org.apache.ambari.server.state.Cluster,java.lang.String)>($r14, $r16) >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r18 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r17)
org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r18 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r17) >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r19 = new java.util.HashMap
org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r19 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : specialinvoke $r19.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : specialinvoke $r19.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r20 = interfaceinvoke $r18.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r19)
org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r20 = interfaceinvoke $r18.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r19) >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : interfaceinvoke $r20.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : interfaceinvoke $r20.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest$1.configure : specialinvoke r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: void configure()>()
org.apache.ambari.server.state.UpgradeHelperTest$1.configure : specialinvoke r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: void configure()>() >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : r1 = "src/test/resources/stacks"
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : r1 = "src/test/resources/stacks" >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : r2 = "src/test/resources/version"
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : r2 = "src/test/resources/version" >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : r3 = "src/test/resources/"
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : r3 = "src/test/resources/" >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : r4 = "src/test/resources/"
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : r4 = "src/test/resources/" >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r8 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name")
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r8 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name") >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z0 = virtualinvoke $r8.<java.lang.String: boolean contains(java.lang.CharSequence)>("Windows")
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z0 = virtualinvoke $r8.<java.lang.String: boolean contains(java.lang.CharSequence)>("Windows") >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z0 == 0
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z0 == 0 >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r17 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r17 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r18 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SERVER_PERSISTENCE_TYPE>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r18 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SERVER_PERSISTENCE_TYPE> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r19 = virtualinvoke $r18.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r19 = virtualinvoke $r18.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z1 = virtualinvoke $r17.<java.util.Properties: boolean containsKey(java.lang.Object)>($r19)
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z1 = virtualinvoke $r17.<java.util.Properties: boolean containsKey(java.lang.Object)>($r19) >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z1 != 0
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z1 != 0 >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r20 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r20 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r21 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SERVER_PERSISTENCE_TYPE>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r21 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SERVER_PERSISTENCE_TYPE> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r22 = virtualinvoke $r21.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r22 = virtualinvoke $r21.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : virtualinvoke $r20.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r22, "in-memory")
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : virtualinvoke $r20.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r22, "in-memory") >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r24 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r24 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r25 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty METADATA_DIR_PATH>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r25 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty METADATA_DIR_PATH> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r26 = virtualinvoke $r25.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r26 = virtualinvoke $r25.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z2 = virtualinvoke $r24.<java.util.Properties: boolean containsKey(java.lang.Object)>($r26)
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z2 = virtualinvoke $r24.<java.util.Properties: boolean containsKey(java.lang.Object)>($r26) >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z2 != 0
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z2 != 0 >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r27 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r27 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r28 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty METADATA_DIR_PATH>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r28 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty METADATA_DIR_PATH> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r29 = virtualinvoke $r28.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r29 = virtualinvoke $r28.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : virtualinvoke $r27.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r29, r1)
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : virtualinvoke $r27.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r29, r1) >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r31 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r31 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r32 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SERVER_VERSION_FILE>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r32 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SERVER_VERSION_FILE> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r33 = virtualinvoke $r32.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r33 = virtualinvoke $r32.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z3 = virtualinvoke $r31.<java.util.Properties: boolean containsKey(java.lang.Object)>($r33)
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z3 = virtualinvoke $r31.<java.util.Properties: boolean containsKey(java.lang.Object)>($r33) >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z3 != 0
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z3 != 0 >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r34 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r34 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r35 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SERVER_VERSION_FILE>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r35 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SERVER_VERSION_FILE> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r36 = virtualinvoke $r35.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r36 = virtualinvoke $r35.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : virtualinvoke $r34.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r36, r2)
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : virtualinvoke $r34.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r36, r2) >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r38 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r38 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r39 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty OS_VERSION>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r39 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty OS_VERSION> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r40 = virtualinvoke $r39.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r40 = virtualinvoke $r39.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z4 = virtualinvoke $r38.<java.util.Properties: boolean containsKey(java.lang.Object)>($r40)
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z4 = virtualinvoke $r38.<java.util.Properties: boolean containsKey(java.lang.Object)>($r40) >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z4 != 0
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z4 != 0 >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r41 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r41 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r42 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty OS_VERSION>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r42 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty OS_VERSION> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r43 = virtualinvoke $r42.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r43 = virtualinvoke $r42.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : virtualinvoke $r41.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r43, "centos5")
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : virtualinvoke $r41.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r43, "centos5") >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r45 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r45 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r46 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SHARED_RESOURCES_DIR>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r46 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SHARED_RESOURCES_DIR> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r47 = virtualinvoke $r46.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r47 = virtualinvoke $r46.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z5 = virtualinvoke $r45.<java.util.Properties: boolean containsKey(java.lang.Object)>($r47)
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z5 = virtualinvoke $r45.<java.util.Properties: boolean containsKey(java.lang.Object)>($r47) >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z5 != 0
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z5 != 0 >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r48 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r48 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r49 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SHARED_RESOURCES_DIR>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r49 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SHARED_RESOURCES_DIR> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r50 = virtualinvoke $r49.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r50 = virtualinvoke $r49.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : virtualinvoke $r48.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r50, r3)
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : virtualinvoke $r48.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r50, r3) >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r52 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r52 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r53 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty RESOURCES_DIR>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r53 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty RESOURCES_DIR> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r54 = virtualinvoke $r53.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r54 = virtualinvoke $r53.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z6 = virtualinvoke $r52.<java.util.Properties: boolean containsKey(java.lang.Object)>($r54)
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z6 = virtualinvoke $r52.<java.util.Properties: boolean containsKey(java.lang.Object)>($r54) >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z6 != 0
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z6 != 0 >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r55 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r55 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r56 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty RESOURCES_DIR>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r56 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty RESOURCES_DIR> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r57 = virtualinvoke $r56.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r57 = virtualinvoke $r56.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : virtualinvoke $r55.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r57, r4)
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : virtualinvoke $r55.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r57, r4) >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r59 = newarray (com.google.inject.Module)[1]
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r59 = newarray (com.google.inject.Module)[1] >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r60 = new org.apache.ambari.server.orm.InMemoryDefaultTestModule$BeanDefinitionsCachingTestControllerModule
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r60 = new org.apache.ambari.server.orm.InMemoryDefaultTestModule$BeanDefinitionsCachingTestControllerModule >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r61 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r61 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : specialinvoke $r60.<org.apache.ambari.server.orm.InMemoryDefaultTestModule$BeanDefinitionsCachingTestControllerModule: void <init>(java.util.Properties)>($r61)
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : specialinvoke $r60.<org.apache.ambari.server.orm.InMemoryDefaultTestModule$BeanDefinitionsCachingTestControllerModule: void <init>(java.util.Properties)>($r61) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : r2 = null
org.apache.ambari.server.configuration.Configuration.getProperty : r2 = null >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : $r3 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object getDefaultValue()>()
org.apache.ambari.server.configuration.Configuration.getProperty : $r3 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object getDefaultValue()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getDefaultValue : $r1 = r0.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object m_defaultValue>
org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getDefaultValue : $r1 = r0.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object m_defaultValue> >>>>>>>> org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getDefaultValue : return $r1
org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getDefaultValue : return $r1 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : if null == $r3
org.apache.ambari.server.configuration.Configuration.getProperty : if null == $r3 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : $r4 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object getDefaultValue()>()
org.apache.ambari.server.configuration.Configuration.getProperty : $r4 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object getDefaultValue()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4)
org.apache.ambari.server.configuration.Configuration.getProperty : r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : $r5 = r0.<org.apache.ambari.server.configuration.Configuration: java.util.Properties properties>
org.apache.ambari.server.configuration.Configuration.getProperty : $r5 = r0.<org.apache.ambari.server.configuration.Configuration: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : $r6 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.configuration.Configuration.getProperty : $r6 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : $r7 = virtualinvoke $r5.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>($r6, r2)
org.apache.ambari.server.configuration.Configuration.getProperty : $r7 = virtualinvoke $r5.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>($r6, r2) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : return $r7
org.apache.ambari.server.configuration.Configuration.getProperty : return $r7 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty API_USE_SSL>
org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty API_USE_SSL> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1)
org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r2)
org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r2) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : return $z0
org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : return $z0 >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r1 = new org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r1 = new org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : specialinvoke $r1.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: void <init>()>()
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : specialinvoke $r1.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: void <init>()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : r2 = $r1
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : r2 = $r1 >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r3 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty KERBEROS_AUTH_ENABLED>
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r3 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty KERBEROS_AUTH_ENABLED> >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r13 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r3)
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r13 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r3) >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r13)
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r13) >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $z0 = virtualinvoke $r14.<java.lang.Boolean: boolean booleanValue()>()
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $z0 = virtualinvoke $r14.<java.lang.Boolean: boolean booleanValue()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : virtualinvoke r2.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: void setKerberosAuthenticationEnabled(boolean)>($z0)
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : virtualinvoke r2.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: void setKerberosAuthenticationEnabled(boolean)>($z0) >>>>>>>> org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.setKerberosAuthenticationEnabled : r0.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean kerberosAuthenticationEnabled> = z0
org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.setKerberosAuthenticationEnabled : r0.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean kerberosAuthenticationEnabled> = z0 >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $z1 = virtualinvoke r2.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean isKerberosAuthenticationEnabled()>()
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $z1 = virtualinvoke r2.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean isKerberosAuthenticationEnabled()>() >>>>>>>> org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.isKerberosAuthenticationEnabled : $z0 = r0.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean kerberosAuthenticationEnabled>
org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.isKerberosAuthenticationEnabled : $z0 = r0.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean kerberosAuthenticationEnabled> >>>>>>>> org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.isKerberosAuthenticationEnabled : return $z0
org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.isKerberosAuthenticationEnabled : return $z0 >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : if $z1 != 0
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : if $z1 != 0 >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : return r2
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : return r2 >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_PATH>
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_PATH> >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r4 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1)
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r4 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1) >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : if $r4 == null
org.apache.ambari.server.configuration.Configuration.loadSSLParams : if $r4 == null >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r7 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_PASSWORD>
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r7 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_PASSWORD> >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r8 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r7)
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r8 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r7) >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : if $r8 == null
org.apache.ambari.server.configuration.Configuration.loadSSLParams : if $r8 == null >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r15 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_TYPE>
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r15 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_TYPE> >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r16 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r15)
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r16 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r15) >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : if $r16 == null
org.apache.ambari.server.configuration.Configuration.loadSSLParams : if $r16 == null >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r1 = <org.apache.ambari.server.configuration.Configuration: org.slf4j.Logger LOG>
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r1 = <org.apache.ambari.server.configuration.Configuration: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r2 = new java.lang.StringBuilder
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Hosts Mapping File ")
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Hosts Mapping File ") >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r3 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SRVR_HOSTS_MAPPING>
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r3 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SRVR_HOSTS_MAPPING> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r5 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r3)
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r5 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r3) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5)
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : interfaceinvoke $r1.<org.slf4j.Logger: void info(java.lang.String)>($r7)
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : interfaceinvoke $r1.<org.slf4j.Logger: void info(java.lang.String)>($r7) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r8 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SRVR_HOSTS_MAPPING>
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r8 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SRVR_HOSTS_MAPPING> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r9 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r8)
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r9 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r8) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : return $r9
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : return $r9 >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : r1 = null
org.apache.ambari.server.controller.HostsMap.setupMap : r1 = null >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : $r6 = <org.apache.ambari.server.controller.HostsMap: org.slf4j.Logger LOG>
org.apache.ambari.server.controller.HostsMap.setupMap : $r6 = <org.apache.ambari.server.controller.HostsMap: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : $r2 = new java.lang.StringBuilder
org.apache.ambari.server.controller.HostsMap.setupMap : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.controller.HostsMap.setupMap : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Using hostsmap file ")
org.apache.ambari.server.controller.HostsMap.setupMap : $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Using hostsmap file ") >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : $r8 = r0.<org.apache.ambari.server.controller.HostsMap: java.lang.String hostsMapFile>
org.apache.ambari.server.controller.HostsMap.setupMap : $r8 = r0.<org.apache.ambari.server.controller.HostsMap: java.lang.String hostsMapFile> >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)
org.apache.ambari.server.controller.HostsMap.setupMap : $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8) >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.controller.HostsMap.setupMap : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String)>($r10)
org.apache.ambari.server.controller.HostsMap.setupMap : interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String)>($r10) >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : $r11 = r0.<org.apache.ambari.server.controller.HostsMap: java.lang.String hostsMapFile>
org.apache.ambari.server.controller.HostsMap.setupMap : $r11 = r0.<org.apache.ambari.server.controller.HostsMap: java.lang.String hostsMapFile> >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : if $r11 == null
org.apache.ambari.server.controller.HostsMap.setupMap : if $r11 == null >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : if r1 == null
org.apache.ambari.server.controller.HostsMap.setupMap : if r1 == null >>>>>>>> org.apache.ambari.server.configuration.Configuration.getSharedResourcesDirPath : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SHARED_RESOURCES_DIR>
org.apache.ambari.server.configuration.Configuration.getSharedResourcesDirPath : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SHARED_RESOURCES_DIR> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getSharedResourcesDirPath : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1)
org.apache.ambari.server.configuration.Configuration.getSharedResourcesDirPath : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getSharedResourcesDirPath : return $r2
org.apache.ambari.server.configuration.Configuration.getSharedResourcesDirPath : return $r2 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : r2 = null
org.apache.ambari.server.state.stack.OsFamily.init : r2 = null >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : $r8 = new java.io.File
org.apache.ambari.server.state.stack.OsFamily.init : $r8 = new java.io.File >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : specialinvoke $r8.<java.io.File: void <init>(java.lang.String,java.lang.String)>(r1, "os_family.json")
org.apache.ambari.server.state.stack.OsFamily.init : specialinvoke $r8.<java.io.File: void <init>(java.lang.String,java.lang.String)>(r1, "os_family.json") >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : r3 = $r8
org.apache.ambari.server.state.stack.OsFamily.init : r3 = $r8 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : $z0 = virtualinvoke r3.<java.io.File: boolean exists()>()
org.apache.ambari.server.state.stack.OsFamily.init : $z0 = virtualinvoke r3.<java.io.File: boolean exists()>() >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : if $z0 != 0
org.apache.ambari.server.state.stack.OsFamily.init : if $z0 != 0 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : $r9 = new java.lang.Exception
org.apache.ambari.server.state.stack.OsFamily.init : $r9 = new java.lang.Exception >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : specialinvoke $r9.<java.lang.Exception: void <init>()>()
org.apache.ambari.server.state.stack.OsFamily.init : specialinvoke $r9.<java.lang.Exception: void <init>()>() >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : throw $r9
org.apache.ambari.server.state.stack.OsFamily.init : throw $r9 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : r19 = $r18
org.apache.ambari.server.state.stack.OsFamily.init : r19 = $r18 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : $r20 = r0.<org.apache.ambari.server.state.stack.OsFamily: org.slf4j.Logger LOG>
org.apache.ambari.server.state.stack.OsFamily.init : $r20 = r0.<org.apache.ambari.server.state.stack.OsFamily: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : $r21 = newarray (java.lang.Object)[1]
org.apache.ambari.server.state.stack.OsFamily.init : $r21 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : $r6 = new java.io.File
org.apache.ambari.server.state.stack.OsFamily.init : $r6 = new java.io.File >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : specialinvoke $r6.<java.io.File: void <init>(java.lang.String,java.lang.String)>(r1, "os_family.json")
org.apache.ambari.server.state.stack.OsFamily.init : specialinvoke $r6.<java.io.File: void <init>(java.lang.String,java.lang.String)>(r1, "os_family.json") >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : $r22 = virtualinvoke $r6.<java.io.File: java.lang.String toString()>()
org.apache.ambari.server.state.stack.OsFamily.init : $r22 = virtualinvoke $r6.<java.io.File: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : $r21[0] = $r22
org.apache.ambari.server.state.stack.OsFamily.init : $r21[0] = $r22 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : $r23 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Could not load OS family definition from %s file", $r21)
org.apache.ambari.server.state.stack.OsFamily.init : $r23 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Could not load OS family definition from %s file", $r21) >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : interfaceinvoke $r20.<org.slf4j.Logger: void error(java.lang.String)>($r23)
org.apache.ambari.server.state.stack.OsFamily.init : interfaceinvoke $r20.<org.slf4j.Logger: void error(java.lang.String)>($r23) >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : $r24 = new java.lang.RuntimeException
org.apache.ambari.server.state.stack.OsFamily.init : $r24 = new java.lang.RuntimeException >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : specialinvoke $r24.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r19)
org.apache.ambari.server.state.stack.OsFamily.init : specialinvoke $r24.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r19) >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : throw $r24
org.apache.ambari.server.state.stack.OsFamily.init : throw $r24 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : r7 = $r25
org.apache.ambari.server.state.stack.OsFamily.init : r7 = $r25 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r2)
org.apache.ambari.server.state.stack.OsFamily.init : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r2) >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : throw r7
org.apache.ambari.server.state.stack.OsFamily.init : throw r7 >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : r74 = $r73
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : r74 = $r73 >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r75 = new java.lang.RuntimeException
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r75 = new java.lang.RuntimeException >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : specialinvoke $r75.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r74)
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : specialinvoke $r75.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r74) >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : throw $r75
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : throw $r75 >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest$MockModule.configure : $r2 = interfaceinvoke r1.<com.google.inject.Binder: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "org/apache/ambari/server/state/ConfigHelper")
org.apache.ambari.server.state.UpgradeHelperTest$MockModule.configure : $r2 = interfaceinvoke r1.<com.google.inject.Binder: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "org/apache/ambari/server/state/ConfigHelper") >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest$MockModule.configure : $r3 = r0.<org.apache.ambari.server.state.UpgradeHelperTest$MockModule: org.apache.ambari.server.state.UpgradeHelperTest this$0>
org.apache.ambari.server.state.UpgradeHelperTest$MockModule.configure : $r3 = r0.<org.apache.ambari.server.state.UpgradeHelperTest$MockModule: org.apache.ambari.server.state.UpgradeHelperTest this$0> >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest$MockModule.configure : $r4 = staticinvoke <org.apache.ambari.server.state.UpgradeHelperTest: org.apache.ambari.server.state.ConfigHelper access$100(org.apache.ambari.server.state.UpgradeHelperTest)>($r3)
org.apache.ambari.server.state.UpgradeHelperTest$MockModule.configure : $r4 = staticinvoke <org.apache.ambari.server.state.UpgradeHelperTest: org.apache.ambari.server.state.ConfigHelper access$100(org.apache.ambari.server.state.UpgradeHelperTest)>($r3) >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest.access$100 : $r1 = r0.<org.apache.ambari.server.state.UpgradeHelperTest: org.apache.ambari.server.state.ConfigHelper m_configHelper>
org.apache.ambari.server.state.UpgradeHelperTest.access$100 : $r1 = r0.<org.apache.ambari.server.state.UpgradeHelperTest: org.apache.ambari.server.state.ConfigHelper m_configHelper> >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest.access$100 : return $r1
org.apache.ambari.server.state.UpgradeHelperTest.access$100 : return $r1 >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest$MockModule.configure : interfaceinvoke $r2.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r4)
