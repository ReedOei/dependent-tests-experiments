org.apache.ambari.server.stack.RepoUtilTest.repoInfo : $r3 = new org.apache.ambari.server.state.RepositoryInfo >>>>>>>> org.apache.ambari.server.stack.RepoUtilTest.repoInfo : specialinvoke $r3.<org.apache.ambari.server.state.RepositoryInfo: void <init>()>()
org.apache.ambari.server.stack.RepoUtilTest.repoInfo : specialinvoke $r3.<org.apache.ambari.server.state.RepositoryInfo: void <init>()>() >>>>>>>> org.apache.ambari.server.stack.RepoUtilTest.repoInfo : r4 = $r3
org.apache.ambari.server.stack.RepoUtilTest.repoInfo : r4 = $r3 >>>>>>>> org.apache.ambari.server.stack.RepoUtilTest.repoInfo : virtualinvoke r4.<org.apache.ambari.server.state.RepositoryInfo: void setRepoName(java.lang.String)>(r0)
org.apache.ambari.server.stack.RepoUtilTest.repoInfo : virtualinvoke r4.<org.apache.ambari.server.state.RepositoryInfo: void setRepoName(java.lang.String)>(r0) >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.setRepoName : r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String repoName> = r1
org.apache.ambari.server.state.RepositoryInfo.setRepoName : r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String repoName> = r1 >>>>>>>> org.apache.ambari.server.stack.RepoUtilTest.repoInfo : virtualinvoke r4.<org.apache.ambari.server.state.RepositoryInfo: void setRepoId(java.lang.String)>(r1)
org.apache.ambari.server.stack.RepoUtilTest.repoInfo : virtualinvoke r4.<org.apache.ambari.server.state.RepositoryInfo: void setRepoId(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.setRepoId : r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String repoId> = r1
org.apache.ambari.server.state.RepositoryInfo.setRepoId : r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String repoId> = r1 >>>>>>>> org.apache.ambari.server.stack.RepoUtilTest.repoInfo : virtualinvoke r4.<org.apache.ambari.server.state.RepositoryInfo: void setOsType(java.lang.String)>(r2)
org.apache.ambari.server.stack.RepoUtilTest.repoInfo : virtualinvoke r4.<org.apache.ambari.server.state.RepositoryInfo: void setOsType(java.lang.String)>(r2) >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.setOsType : r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String osType> = r1
org.apache.ambari.server.state.RepositoryInfo.setOsType : r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String osType> = r1 >>>>>>>> org.apache.ambari.server.stack.RepoUtilTest.repoInfo : return r4
org.apache.ambari.server.stack.RepoUtilTest.repoInfo : return r4 >>>>>>>> org.apache.ambari.server.state.RepositoryInfo$4.apply : $r2 = (org.apache.ambari.server.state.RepositoryInfo) r1
org.apache.ambari.server.state.RepositoryInfo$4.apply : $r2 = (org.apache.ambari.server.state.RepositoryInfo) r1 >>>>>>>> org.apache.ambari.server.state.RepositoryInfo$4.apply : $r3 = virtualinvoke r0.<org.apache.ambari.server.state.RepositoryInfo$4: java.lang.String apply(org.apache.ambari.server.state.RepositoryInfo)>($r2)
org.apache.ambari.server.state.RepositoryInfo$4.apply : $r3 = virtualinvoke r0.<org.apache.ambari.server.state.RepositoryInfo$4: java.lang.String apply(org.apache.ambari.server.state.RepositoryInfo)>($r2) >>>>>>>> org.apache.ambari.server.state.RepositoryInfo$4.apply : $r2 = staticinvoke <org.apache.ambari.server.state.RepositoryInfo: java.lang.String access$300(org.apache.ambari.server.state.RepositoryInfo)>(r1)
org.apache.ambari.server.state.RepositoryInfo$4.apply : $r2 = staticinvoke <org.apache.ambari.server.state.RepositoryInfo: java.lang.String access$300(org.apache.ambari.server.state.RepositoryInfo)>(r1) >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.access$300 : $r1 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String osType>
org.apache.ambari.server.state.RepositoryInfo.access$300 : $r1 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String osType> >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.access$300 : return $r1
org.apache.ambari.server.state.RepositoryInfo.access$300 : return $r1 >>>>>>>> org.apache.ambari.server.state.RepositoryInfo$4.apply : return $r2
org.apache.ambari.server.state.RepositoryInfo$4.apply : return $r2 >>>>>>>> org.apache.ambari.server.state.RepositoryInfo$4.apply : return $r3
org.apache.ambari.server.state.RepositoryInfo$4.apply : return $r3 >>>>>>>> org.apache.ambari.server.stack.RepoUtil.getServiceRepos : $r2 = new java.util.HashSet
org.apache.ambari.server.stack.RepoUtil.getServiceRepos : $r2 = new java.util.HashSet >>>>>>>> org.apache.ambari.server.stack.RepoUtil.getServiceRepos : specialinvoke $r2.<java.util.HashSet: void <init>()>()
org.apache.ambari.server.stack.RepoUtil.getServiceRepos : specialinvoke $r2.<java.util.HashSet: void <init>()>() >>>>>>>> org.apache.ambari.server.stack.RepoUtil.getServiceRepos : r3 = $r2
org.apache.ambari.server.stack.RepoUtil.getServiceRepos : r3 = $r2 >>>>>>>> org.apache.ambari.server.stack.RepoUtil.getServiceRepos : $r11 = new java.util.ArrayList
org.apache.ambari.server.stack.RepoUtil.getServiceRepos : $r11 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.stack.RepoUtil.getServiceRepos : specialinvoke $r11.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.stack.RepoUtil.getServiceRepos : specialinvoke $r11.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.stack.RepoUtil.getServiceRepos : r4 = $r11
org.apache.ambari.server.stack.RepoUtil.getServiceRepos : r4 = $r11 >>>>>>>> org.apache.ambari.server.stack.RepoUtil.getServiceRepos : $r12 = <org.apache.ambari.server.state.RepositoryInfo: com.google.common.base.Function GET_OSTYPE_FUNCTION>
org.apache.ambari.server.stack.RepoUtil.getServiceRepos : $r12 = <org.apache.ambari.server.state.RepositoryInfo: com.google.common.base.Function GET_OSTYPE_FUNCTION> >>>>>>>> org.apache.ambari.server.stack.RepoUtil.getServiceRepos : r5 = staticinvoke <com.google.common.collect.Multimaps: com.google.common.collect.ImmutableListMultimap index(java.lang.Iterable,com.google.common.base.Function)>(r0, $r12)
org.apache.ambari.server.stack.RepoUtil.getServiceRepos : r5 = staticinvoke <com.google.common.collect.Multimaps: com.google.common.collect.ImmutableListMultimap index(java.lang.Iterable,com.google.common.base.Function)>(r0, $r12) >>>>>>>> org.apache.ambari.server.stack.RepoUtil.getServiceRepos : $r13 = interfaceinvoke r5.<com.google.common.collect.ListMultimap: java.util.Set keySet()>()
org.apache.ambari.server.stack.RepoUtil.getServiceRepos : $r13 = interfaceinvoke r5.<com.google.common.collect.ListMultimap: java.util.Set keySet()>() >>>>>>>> org.apache.ambari.server.stack.RepoUtil.getServiceRepos : r6 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.stack.RepoUtil.getServiceRepos : r6 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.stack.RepoUtil.getServiceRepos : $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.stack.RepoUtil.getServiceRepos : $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.stack.RepoUtil.getServiceRepos : if $z0 == 0
org.apache.ambari.server.stack.RepoUtil.getServiceRepos : if $z0 == 0 >>>>>>>> org.apache.ambari.server.stack.RepoUtil.getServiceRepos : $r14 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.stack.RepoUtil.getServiceRepos : $r14 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.stack.RepoUtil.getServiceRepos : r7 = (java.lang.String) $r14
org.apache.ambari.server.stack.RepoUtil.getServiceRepos : r7 = (java.lang.String) $r14 >>>>>>>> org.apache.ambari.server.stack.RepoUtil.getServiceRepos : $r15 = interfaceinvoke r5.<com.google.common.collect.ListMultimap: java.util.List get(java.lang.Object)>(r7)
org.apache.ambari.server.stack.RepoUtil.getServiceRepos : $r15 = interfaceinvoke r5.<com.google.common.collect.ListMultimap: java.util.List get(java.lang.Object)>(r7) >>>>>>>> org.apache.ambari.server.stack.RepoUtil.getServiceRepos : $r16 = <org.apache.ambari.server.state.RepositoryInfo: com.google.common.base.Function GET_REPO_NAME_FUNCTION>
org.apache.ambari.server.stack.RepoUtil.getServiceRepos : $r16 = <org.apache.ambari.server.state.RepositoryInfo: com.google.common.base.Function GET_REPO_NAME_FUNCTION> >>>>>>>> org.apache.ambari.server.stack.RepoUtil.getServiceRepos : $r17 = staticinvoke <com.google.common.collect.Lists: java.util.List transform(java.util.List,com.google.common.base.Function)>($r15, $r16)
org.apache.ambari.server.stack.RepoUtil.getServiceRepos : $r17 = staticinvoke <com.google.common.collect.Lists: java.util.List transform(java.util.List,com.google.common.base.Function)>($r15, $r16) >>>>>>>> org.apache.ambari.server.stack.RepoUtil.getServiceRepos : r8 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet(java.lang.Iterable)>($r17)
org.apache.ambari.server.stack.RepoUtil.getServiceRepos : r8 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet(java.lang.Iterable)>($r17) >>>>>>>> org.apache.ambari.server.state.RepositoryInfo$1.apply : $r2 = (org.apache.ambari.server.state.RepositoryInfo) r1
org.apache.ambari.server.state.RepositoryInfo$1.apply : $r2 = (org.apache.ambari.server.state.RepositoryInfo) r1 >>>>>>>> org.apache.ambari.server.state.RepositoryInfo$1.apply : $r3 = virtualinvoke r0.<org.apache.ambari.server.state.RepositoryInfo$1: java.lang.String apply(org.apache.ambari.server.state.RepositoryInfo)>($r2)
org.apache.ambari.server.state.RepositoryInfo$1.apply : $r3 = virtualinvoke r0.<org.apache.ambari.server.state.RepositoryInfo$1: java.lang.String apply(org.apache.ambari.server.state.RepositoryInfo)>($r2) >>>>>>>> org.apache.ambari.server.state.RepositoryInfo$1.apply : $r2 = staticinvoke <org.apache.ambari.server.state.RepositoryInfo: java.lang.String access$000(org.apache.ambari.server.state.RepositoryInfo)>(r1)
org.apache.ambari.server.state.RepositoryInfo$1.apply : $r2 = staticinvoke <org.apache.ambari.server.state.RepositoryInfo: java.lang.String access$000(org.apache.ambari.server.state.RepositoryInfo)>(r1) >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.access$000 : $r1 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String repoName>
org.apache.ambari.server.state.RepositoryInfo.access$000 : $r1 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String repoName> >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.access$000 : return $r1
org.apache.ambari.server.state.RepositoryInfo.access$000 : return $r1 >>>>>>>> org.apache.ambari.server.state.RepositoryInfo$1.apply : return $r2
org.apache.ambari.server.state.RepositoryInfo$1.apply : return $r2 >>>>>>>> org.apache.ambari.server.state.RepositoryInfo$1.apply : return $r3
org.apache.ambari.server.state.RepositoryInfo$1.apply : return $r3 >>>>>>>> org.apache.ambari.server.stack.RepoUtil.getServiceRepos : $r18 = interfaceinvoke r1.<com.google.common.collect.ListMultimap: java.util.List get(java.lang.Object)>(r7)
org.apache.ambari.server.stack.RepoUtil.getServiceRepos : $r18 = interfaceinvoke r1.<com.google.common.collect.ListMultimap: java.util.List get(java.lang.Object)>(r7) >>>>>>>> org.apache.ambari.server.stack.RepoUtil.getServiceRepos : r9 = interfaceinvoke $r18.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.stack.RepoUtil.getServiceRepos : r9 = interfaceinvoke $r18.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.stack.RepoUtil.getServiceRepos : $z1 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.stack.RepoUtil.getServiceRepos : $z1 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.stack.RepoUtil.getServiceRepos : if $z1 == 0
org.apache.ambari.server.stack.RepoUtil.getServiceRepos : if $z1 == 0 >>>>>>>> org.apache.ambari.server.stack.RepoUtil.getServiceRepos : $r19 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.stack.RepoUtil.getServiceRepos : $r19 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.stack.RepoUtil.getServiceRepos : r10 = (org.apache.ambari.server.state.RepositoryInfo) $r19
org.apache.ambari.server.stack.RepoUtil.getServiceRepos : r10 = (org.apache.ambari.server.state.RepositoryInfo) $r19 >>>>>>>> org.apache.ambari.server.stack.RepoUtil.getServiceRepos : $r20 = virtualinvoke r10.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String getRepoName()>()
org.apache.ambari.server.stack.RepoUtil.getServiceRepos : $r20 = virtualinvoke r10.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String getRepoName()>() >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.getRepoName : $r1 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String repoName>
org.apache.ambari.server.state.RepositoryInfo.getRepoName : $r1 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String repoName> >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.getRepoName : return $r1
org.apache.ambari.server.state.RepositoryInfo.getRepoName : return $r1 >>>>>>>> org.apache.ambari.server.stack.RepoUtil.getServiceRepos : $z2 = interfaceinvoke r8.<java.util.Set: boolean contains(java.lang.Object)>($r20)
org.apache.ambari.server.stack.RepoUtil.getServiceRepos : $z2 = interfaceinvoke r8.<java.util.Set: boolean contains(java.lang.Object)>($r20) >>>>>>>> org.apache.ambari.server.stack.RepoUtil.getServiceRepos : if $z2 != 0
org.apache.ambari.server.stack.RepoUtil.getServiceRepos : if $z2 != 0 >>>>>>>> org.apache.ambari.server.stack.RepoUtil.getServiceRepos : goto [?= $z1 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.stack.RepoUtil.getServiceRepos : goto [?= $z1 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.stack.RepoUtil.getServiceRepos : interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r10)
org.apache.ambari.server.stack.RepoUtil.getServiceRepos : interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r10) >>>>>>>> org.apache.ambari.server.stack.RepoUtil.getServiceRepos : $r21 = virtualinvoke r10.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String getRepoId()>()
org.apache.ambari.server.stack.RepoUtil.getServiceRepos : $r21 = virtualinvoke r10.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String getRepoId()>() >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.getRepoId : $r1 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String repoId>
org.apache.ambari.server.state.RepositoryInfo.getRepoId : $r1 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String repoId> >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.getRepoId : return $r1
org.apache.ambari.server.state.RepositoryInfo.getRepoId : return $r1 >>>>>>>> org.apache.ambari.server.stack.RepoUtil.getServiceRepos : interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>($r21)
org.apache.ambari.server.stack.RepoUtil.getServiceRepos : interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>($r21) >>>>>>>> org.apache.ambari.server.stack.RepoUtil.getServiceRepos : goto [?= $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.stack.RepoUtil.getServiceRepos : goto [?= $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.stack.RepoUtil.getServiceRepos : $r22 = <org.apache.ambari.server.stack.RepoUtil: org.slf4j.Logger LOG>
org.apache.ambari.server.stack.RepoUtil.getServiceRepos : $r22 = <org.apache.ambari.server.stack.RepoUtil: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.stack.RepoUtil.getServiceRepos : $i0 = interfaceinvoke r3.<java.util.Set: int size()>()
org.apache.ambari.server.stack.RepoUtil.getServiceRepos : $i0 = interfaceinvoke r3.<java.util.Set: int size()>() >>>>>>>> org.apache.ambari.server.stack.RepoUtil.getServiceRepos : $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0)
org.apache.ambari.server.stack.RepoUtil.getServiceRepos : $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) >>>>>>>> org.apache.ambari.server.stack.RepoUtil.getServiceRepos : $r24 = staticinvoke <com.google.common.collect.Iterables: java.lang.String toString(java.lang.Iterable)>(r3)
org.apache.ambari.server.stack.RepoUtil.getServiceRepos : $r24 = staticinvoke <com.google.common.collect.Iterables: java.lang.String toString(java.lang.Iterable)>(r3) >>>>>>>> org.apache.ambari.server.stack.RepoUtil.getServiceRepos : interfaceinvoke $r22.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Found {} service repos: {}", $r23, $r24)
org.apache.ambari.server.stack.RepoUtil.getServiceRepos : interfaceinvoke $r22.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Found {} service repos: {}", $r23, $r24) >>>>>>>> org.apache.ambari.server.stack.RepoUtil.getServiceRepos : return r4
