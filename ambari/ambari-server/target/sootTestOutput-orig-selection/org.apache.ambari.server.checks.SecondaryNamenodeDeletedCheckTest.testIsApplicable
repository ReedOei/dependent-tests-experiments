org.apache.ambari.server.checks.SecondaryNamenodeDeletedCheck.isApplicable : $r4 = newarray (java.lang.String)[1] >>>>>>>> org.apache.ambari.server.checks.SecondaryNamenodeDeletedCheck.isApplicable : $r2 = <org.apache.ambari.server.checks.SecondaryNamenodeDeletedCheck: java.lang.String HDFS_SERVICE_NAME>
org.apache.ambari.server.checks.SecondaryNamenodeDeletedCheck.isApplicable : $r2 = <org.apache.ambari.server.checks.SecondaryNamenodeDeletedCheck: java.lang.String HDFS_SERVICE_NAME> >>>>>>>> org.apache.ambari.server.checks.SecondaryNamenodeDeletedCheck.isApplicable : $r4[0] = $r2
org.apache.ambari.server.checks.SecondaryNamenodeDeletedCheck.isApplicable : $r4[0] = $r2 >>>>>>>> org.apache.ambari.server.checks.SecondaryNamenodeDeletedCheck.isApplicable : $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4)
org.apache.ambari.server.checks.SecondaryNamenodeDeletedCheck.isApplicable : $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r4) >>>>>>>> org.apache.ambari.server.checks.SecondaryNamenodeDeletedCheck.isApplicable : $z0 = specialinvoke r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: boolean isApplicable(org.apache.ambari.server.controller.PrereqCheckRequest,java.util.List,boolean)>(r1, $r5, 1)
org.apache.ambari.server.checks.SecondaryNamenodeDeletedCheck.isApplicable : $z0 = specialinvoke r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: boolean isApplicable(org.apache.ambari.server.controller.PrereqCheckRequest,java.util.List,boolean)>(r1, $r5, 1) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r7 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: com.google.inject.Provider clustersProvider>
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r7 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: com.google.inject.Provider clustersProvider> >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r8 = interfaceinvoke $r7.<com.google.inject.Provider: java.lang.Object get()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r8 = interfaceinvoke $r7.<com.google.inject.Provider: java.lang.Object get()>() >>>>>>>> org.apache.ambari.server.checks.SecondaryNamenodeDeletedCheckTest$1.get : $r1 = virtualinvoke r0.<org.apache.ambari.server.checks.SecondaryNamenodeDeletedCheckTest$1: org.apache.ambari.server.state.Clusters get()>()
org.apache.ambari.server.checks.SecondaryNamenodeDeletedCheckTest$1.get : $r1 = virtualinvoke r0.<org.apache.ambari.server.checks.SecondaryNamenodeDeletedCheckTest$1: org.apache.ambari.server.state.Clusters get()>() >>>>>>>> org.apache.ambari.server.checks.SecondaryNamenodeDeletedCheckTest$1.get : $r1 = r0.<org.apache.ambari.server.checks.SecondaryNamenodeDeletedCheckTest$1: org.apache.ambari.server.checks.SecondaryNamenodeDeletedCheckTest this$0>
org.apache.ambari.server.checks.SecondaryNamenodeDeletedCheckTest$1.get : $r1 = r0.<org.apache.ambari.server.checks.SecondaryNamenodeDeletedCheckTest$1: org.apache.ambari.server.checks.SecondaryNamenodeDeletedCheckTest this$0> >>>>>>>> org.apache.ambari.server.checks.SecondaryNamenodeDeletedCheckTest$1.get : $r2 = staticinvoke <org.apache.ambari.server.checks.SecondaryNamenodeDeletedCheckTest: org.apache.ambari.server.state.Clusters access$000(org.apache.ambari.server.checks.SecondaryNamenodeDeletedCheckTest)>($r1)
org.apache.ambari.server.checks.SecondaryNamenodeDeletedCheckTest$1.get : $r2 = staticinvoke <org.apache.ambari.server.checks.SecondaryNamenodeDeletedCheckTest: org.apache.ambari.server.state.Clusters access$000(org.apache.ambari.server.checks.SecondaryNamenodeDeletedCheckTest)>($r1) >>>>>>>> org.apache.ambari.server.checks.SecondaryNamenodeDeletedCheckTest.access$000 : $r1 = r0.<org.apache.ambari.server.checks.SecondaryNamenodeDeletedCheckTest: org.apache.ambari.server.state.Clusters clusters>
org.apache.ambari.server.checks.SecondaryNamenodeDeletedCheckTest.access$000 : $r1 = r0.<org.apache.ambari.server.checks.SecondaryNamenodeDeletedCheckTest: org.apache.ambari.server.state.Clusters clusters> >>>>>>>> org.apache.ambari.server.checks.SecondaryNamenodeDeletedCheckTest.access$000 : return $r1
org.apache.ambari.server.checks.SecondaryNamenodeDeletedCheckTest.access$000 : return $r1 >>>>>>>> org.apache.ambari.server.checks.SecondaryNamenodeDeletedCheckTest$1.get : return $r2
org.apache.ambari.server.checks.SecondaryNamenodeDeletedCheckTest$1.get : return $r2 >>>>>>>> org.apache.ambari.server.checks.SecondaryNamenodeDeletedCheckTest$1.get : return $r1
org.apache.ambari.server.checks.SecondaryNamenodeDeletedCheckTest$1.get : return $r1 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r9 = (org.apache.ambari.server.state.Clusters) $r8
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r9 = (org.apache.ambari.server.state.Clusters) $r8 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r10 = virtualinvoke r1.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getClusterName()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r10 = virtualinvoke r1.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getClusterName()>() >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String m_clusterName>
org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String m_clusterName> >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : return $r1
org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : return $r1 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : r3 = interfaceinvoke $r9.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>($r10)
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : r3 = interfaceinvoke $r9.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>($r10) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r11 = interfaceinvoke r3.<org.apache.ambari.server.state.Cluster: java.util.Map getServices()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r11 = interfaceinvoke r3.<org.apache.ambari.server.state.Cluster: java.util.Map getServices()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : r4 = interfaceinvoke $r11.<java.util.Map: java.util.Set keySet()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : r4 = interfaceinvoke $r11.<java.util.Map: java.util.Set keySet()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : if z0 == 0
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : if z0 == 0 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $z2 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $z2 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : if $z2 != 0
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : if $z2 != 0 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $z3 = 1
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $z3 = 1 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : goto [?= z1 = $z3]
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : goto [?= z1 = $z3] >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : z1 = $z3
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : z1 = $z3 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : r5 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : r5 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $z4 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $z4 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : if $z4 == 0
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : if $z4 == 0 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r12 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r12 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : r6 = (java.lang.String) $r12
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : r6 = (java.lang.String) $r12 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $z5 = interfaceinvoke r4.<java.util.Set: boolean contains(java.lang.Object)>(r6)
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $z5 = interfaceinvoke r4.<java.util.Set: boolean contains(java.lang.Object)>(r6) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : if $z5 == 0
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : if $z5 == 0 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : if z0 != 0
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : if z0 != 0 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $z6 = interfaceinvoke r4.<java.util.Set: boolean contains(java.lang.Object)>(r6)
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $z6 = interfaceinvoke r4.<java.util.Set: boolean contains(java.lang.Object)>(r6) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : if $z6 != 0
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : if $z6 != 0 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : goto [?= $z4 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : goto [?= $z4 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : return z1
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : return z1 >>>>>>>> org.apache.ambari.server.checks.SecondaryNamenodeDeletedCheck.isApplicable : if $z0 != 0
org.apache.ambari.server.checks.SecondaryNamenodeDeletedCheck.isApplicable : if $z0 != 0 >>>>>>>> org.apache.ambari.server.checks.SecondaryNamenodeDeletedCheck.isApplicable : $r6 = <org.apache.ambari.server.checks.CheckDescription: org.apache.ambari.server.checks.CheckDescription SERVICES_NAMENODE_HA>
org.apache.ambari.server.checks.SecondaryNamenodeDeletedCheck.isApplicable : $r6 = <org.apache.ambari.server.checks.CheckDescription: org.apache.ambari.server.checks.CheckDescription SERVICES_NAMENODE_HA> >>>>>>>> org.apache.ambari.server.checks.SecondaryNamenodeDeletedCheck.isApplicable : r3 = virtualinvoke r1.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.state.stack.PrereqCheckStatus getResult(org.apache.ambari.server.checks.CheckDescription)>($r6)
org.apache.ambari.server.checks.SecondaryNamenodeDeletedCheck.isApplicable : r3 = virtualinvoke r1.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.state.stack.PrereqCheckStatus getResult(org.apache.ambari.server.checks.CheckDescription)>($r6) >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getResult : $r2 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.util.Map m_results>
org.apache.ambari.server.controller.PrereqCheckRequest.getResult : $r2 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.util.Map m_results> >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getResult : $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.ambari.server.controller.PrereqCheckRequest.getResult : $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getResult : $r4 = (org.apache.ambari.server.state.stack.PrereqCheckStatus) $r3
org.apache.ambari.server.controller.PrereqCheckRequest.getResult : $r4 = (org.apache.ambari.server.state.stack.PrereqCheckStatus) $r3 >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getResult : return $r4
org.apache.ambari.server.controller.PrereqCheckRequest.getResult : return $r4 >>>>>>>> org.apache.ambari.server.checks.SecondaryNamenodeDeletedCheck.isApplicable : if null == r3
org.apache.ambari.server.checks.SecondaryNamenodeDeletedCheck.isApplicable : if null == r3 >>>>>>>> org.apache.ambari.server.checks.SecondaryNamenodeDeletedCheck.isApplicable : return 1
org.apache.ambari.server.checks.SecondaryNamenodeDeletedCheck.isApplicable : return 1 >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.addResult : $r3 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.util.Map m_results>
org.apache.ambari.server.controller.PrereqCheckRequest.addResult : $r3 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.util.Map m_results> >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.addResult : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
org.apache.ambari.server.controller.PrereqCheckRequest.addResult : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> org.apache.ambari.server.checks.SecondaryNamenodeDeletedCheck.isApplicable : $r7 = <org.apache.ambari.server.state.stack.PrereqCheckStatus: org.apache.ambari.server.state.stack.PrereqCheckStatus FAIL>
org.apache.ambari.server.checks.SecondaryNamenodeDeletedCheck.isApplicable : $r7 = <org.apache.ambari.server.state.stack.PrereqCheckStatus: org.apache.ambari.server.state.stack.PrereqCheckStatus FAIL> >>>>>>>> org.apache.ambari.server.checks.SecondaryNamenodeDeletedCheck.isApplicable : if r3 != $r7
org.apache.ambari.server.checks.SecondaryNamenodeDeletedCheck.isApplicable : if r3 != $r7 >>>>>>>> org.apache.ambari.server.checks.SecondaryNamenodeDeletedCheck.isApplicable : return 0
org.apache.ambari.server.checks.SecondaryNamenodeDeletedCheck.isApplicable : return 0 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : z1 = 0
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : z1 = 0 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : goto [?= return z1]
