org.apache.ambari.server.utils.ShellCommandUtil.copyFile : $r2 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.copyFile : specialinvoke $r2.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.utils.ShellCommandUtil.copyFile : specialinvoke $r2.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.copyFile : r3 = $r2
org.apache.ambari.server.utils.ShellCommandUtil.copyFile : r3 = $r2 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.copyFile : $z2 = <org.apache.ambari.server.utils.ShellCommandUtil: boolean WINDOWS>
org.apache.ambari.server.utils.ShellCommandUtil.copyFile : $z2 = <org.apache.ambari.server.utils.ShellCommandUtil: boolean WINDOWS> >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.copyFile : if $z2 == 0
org.apache.ambari.server.utils.ShellCommandUtil.copyFile : if $z2 == 0 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.copyFile : virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>("cp")
org.apache.ambari.server.utils.ShellCommandUtil.copyFile : virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>("cp") >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.copyFile : virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>("-p")
org.apache.ambari.server.utils.ShellCommandUtil.copyFile : virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>("-p") >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.copyFile : if z0 == 0
org.apache.ambari.server.utils.ShellCommandUtil.copyFile : if z0 == 0 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.copyFile : virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r0)
org.apache.ambari.server.utils.ShellCommandUtil.copyFile : virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r0) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.copyFile : virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r1)
org.apache.ambari.server.utils.ShellCommandUtil.copyFile : virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.copyFile : $r4 = staticinvoke <org.apache.ambari.server.utils.ShellCommandUtil: org.apache.ambari.server.utils.ShellCommandUtil$Result runCommand(java.util.List,java.util.Map,org.apache.ambari.server.utils.ShellCommandUtil$InteractiveHandler,boolean)>(r3, null, null, z1)
org.apache.ambari.server.utils.ShellCommandUtil.copyFile : $r4 = staticinvoke <org.apache.ambari.server.utils.ShellCommandUtil: org.apache.ambari.server.utils.ShellCommandUtil$Result runCommand(java.util.List,java.util.Map,org.apache.ambari.server.utils.ShellCommandUtil$InteractiveHandler,boolean)>(r3, null, null, z1) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : $i0 = interfaceinvoke r0.<java.util.List: int size()>()
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : $i0 = interfaceinvoke r0.<java.util.List: int size()>() >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : $r3 = newarray (java.lang.String)[$i0]
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : $r3 = newarray (java.lang.String)[$i0] >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : $r4 = interfaceinvoke r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r3)
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : $r4 = interfaceinvoke r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r3) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : $r5 = (java.lang.String[]) $r4
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : $r5 = (java.lang.String[]) $r4 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : $r6 = staticinvoke <org.apache.ambari.server.utils.ShellCommandUtil: org.apache.ambari.server.utils.ShellCommandUtil$Result runCommand(java.lang.String[],java.util.Map,org.apache.ambari.server.utils.ShellCommandUtil$InteractiveHandler,boolean)>($r5, r1, r2, z0)
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : $r6 = staticinvoke <org.apache.ambari.server.utils.ShellCommandUtil: org.apache.ambari.server.utils.ShellCommandUtil$Result runCommand(java.lang.String[],java.util.Map,org.apache.ambari.server.utils.ShellCommandUtil$InteractiveHandler,boolean)>($r5, r1, r2, z0) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : if z0 == 0
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : if z0 == 0 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : r3 = r0
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : r3 = r0 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : $r12 = new java.lang.ProcessBuilder
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : $r12 = new java.lang.ProcessBuilder >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : specialinvoke $r12.<java.lang.ProcessBuilder: void <init>(java.lang.String[])>(r3)
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : specialinvoke $r12.<java.lang.ProcessBuilder: void <init>(java.lang.String[])>(r3) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : r4 = $r12
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : r4 = $r12 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : if r1 == null
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : if r1 == null >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : $z1 = <org.apache.ambari.server.utils.ShellCommandUtil: boolean WINDOWS>
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : $z1 = <org.apache.ambari.server.utils.ShellCommandUtil: boolean WINDOWS> >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : if $z1 == 0
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : if $z1 == 0 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : r14 = virtualinvoke r4.<java.lang.ProcessBuilder: java.lang.Process start()>()
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : r14 = virtualinvoke r4.<java.lang.ProcessBuilder: java.lang.Process start()>() >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : r16 = virtualinvoke r14.<java.lang.Process: java.io.InputStream getInputStream()>()
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : r16 = virtualinvoke r14.<java.lang.Process: java.io.InputStream getInputStream()>() >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : if r2 == null
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : if r2 == null >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : virtualinvoke r14.<java.lang.Process: int waitFor()>()
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : virtualinvoke r14.<java.lang.Process: int waitFor()>() >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : r29 = staticinvoke <org.apache.ambari.server.utils.ShellCommandUtil: java.lang.String streamToString(java.io.InputStream)>(r16)
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : r29 = staticinvoke <org.apache.ambari.server.utils.ShellCommandUtil: java.lang.String streamToString(java.io.InputStream)>(r16) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.streamToString : $r1 = new java.io.InputStreamReader
org.apache.ambari.server.utils.ShellCommandUtil.streamToString : $r1 = new java.io.InputStreamReader >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.streamToString : specialinvoke $r1.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r0)
org.apache.ambari.server.utils.ShellCommandUtil.streamToString : specialinvoke $r1.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r0) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.streamToString : r2 = $r1
org.apache.ambari.server.utils.ShellCommandUtil.streamToString : r2 = $r1 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.streamToString : $r5 = new java.io.BufferedReader
org.apache.ambari.server.utils.ShellCommandUtil.streamToString : $r5 = new java.io.BufferedReader >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.streamToString : specialinvoke $r5.<java.io.BufferedReader: void <init>(java.io.Reader)>(r2)
org.apache.ambari.server.utils.ShellCommandUtil.streamToString : specialinvoke $r5.<java.io.BufferedReader: void <init>(java.io.Reader)>(r2) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.streamToString : r3 = $r5
org.apache.ambari.server.utils.ShellCommandUtil.streamToString : r3 = $r5 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.streamToString : $r6 = new java.lang.StringBuilder
org.apache.ambari.server.utils.ShellCommandUtil.streamToString : $r6 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.streamToString : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.utils.ShellCommandUtil.streamToString : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.streamToString : r4 = $r6
org.apache.ambari.server.utils.ShellCommandUtil.streamToString : r4 = $r6 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.streamToString : n0 = null
org.apache.ambari.server.utils.ShellCommandUtil.streamToString : n0 = null >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.streamToString : $r7 = virtualinvoke r3.<java.io.BufferedReader: java.lang.String readLine()>()
org.apache.ambari.server.utils.ShellCommandUtil.streamToString : $r7 = virtualinvoke r3.<java.io.BufferedReader: java.lang.String readLine()>() >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.streamToString : r8 = $r7
org.apache.ambari.server.utils.ShellCommandUtil.streamToString : r8 = $r7 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.streamToString : if $r7 == null
org.apache.ambari.server.utils.ShellCommandUtil.streamToString : if $r7 == null >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.streamToString : $r11 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.utils.ShellCommandUtil.streamToString : $r11 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.streamToString : return $r11
org.apache.ambari.server.utils.ShellCommandUtil.streamToString : return $r11 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : $r30 = virtualinvoke r14.<java.lang.Process: java.io.InputStream getErrorStream()>()
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : $r30 = virtualinvoke r14.<java.lang.Process: java.io.InputStream getErrorStream()>() >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : r31 = staticinvoke <org.apache.ambari.server.utils.ShellCommandUtil: java.lang.String streamToString(java.io.InputStream)>($r30)
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : r31 = staticinvoke <org.apache.ambari.server.utils.ShellCommandUtil: java.lang.String streamToString(java.io.InputStream)>($r30) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : i6 = virtualinvoke r14.<java.lang.Process: int exitValue()>()
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : i6 = virtualinvoke r14.<java.lang.Process: int exitValue()>() >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : $r32 = new org.apache.ambari.server.utils.ShellCommandUtil$Result
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : $r32 = new org.apache.ambari.server.utils.ShellCommandUtil$Result >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : specialinvoke $r32.<org.apache.ambari.server.utils.ShellCommandUtil$Result: void <init>(int,java.lang.String,java.lang.String)>(i6, r29, r31)
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : specialinvoke $r32.<org.apache.ambari.server.utils.ShellCommandUtil$Result: void <init>(int,java.lang.String,java.lang.String)>(i6, r29, r31) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : return $r32
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : return $r32 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : return $r6
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : return $r6 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.copyFile : return $r4
org.apache.ambari.server.utils.ShellCommandUtil.copyFile : return $r4 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil$Result.isSuccessful : $i0 = r0.<org.apache.ambari.server.utils.ShellCommandUtil$Result: int exitCode>
org.apache.ambari.server.utils.ShellCommandUtil$Result.isSuccessful : $i0 = r0.<org.apache.ambari.server.utils.ShellCommandUtil$Result: int exitCode> >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil$Result.isSuccessful : if $i0 != 0
org.apache.ambari.server.utils.ShellCommandUtil$Result.isSuccessful : if $i0 != 0 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil$Result.isSuccessful : $z0 = 1
org.apache.ambari.server.utils.ShellCommandUtil$Result.isSuccessful : $z0 = 1 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil$Result.isSuccessful : goto [?= return $z0]
org.apache.ambari.server.utils.ShellCommandUtil$Result.isSuccessful : goto [?= return $z0] >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil$Result.isSuccessful : return $z0
