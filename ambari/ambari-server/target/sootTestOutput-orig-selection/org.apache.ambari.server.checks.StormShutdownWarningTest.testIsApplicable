org.apache.ambari.server.state.StackId.parseStackIdHelper : if r2 == null >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $z0 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>()
org.apache.ambari.server.state.StackId.parseStackIdHelper : $z0 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : if $z0 == 0
org.apache.ambari.server.state.StackId.parseStackIdHelper : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : i0 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(45)
org.apache.ambari.server.state.StackId.parseStackIdHelper : i0 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(45) >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : if i0 == -1
org.apache.ambari.server.state.StackId.parseStackIdHelper : if i0 == -1 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $i1 = virtualinvoke r2.<java.lang.String: int length()>()
org.apache.ambari.server.state.StackId.parseStackIdHelper : $i1 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $i2 = i0 + 1
org.apache.ambari.server.state.StackId.parseStackIdHelper : $i2 = i0 + 1 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : if $i1 > $i2
org.apache.ambari.server.state.StackId.parseStackIdHelper : if $i1 > $i2 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $r8 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0)
org.apache.ambari.server.state.StackId.parseStackIdHelper : $r8 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0) >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : r1.<org.apache.ambari.server.state.StackId: java.lang.String stackName> = $r8
org.apache.ambari.server.state.StackId.parseStackIdHelper : r1.<org.apache.ambari.server.state.StackId: java.lang.String stackName> = $r8 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $i3 = i0 + 1
org.apache.ambari.server.state.StackId.parseStackIdHelper : $i3 = i0 + 1 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $r9 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i3)
org.apache.ambari.server.state.StackId.parseStackIdHelper : $r9 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i3) >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : r1.<org.apache.ambari.server.state.StackId: java.lang.String stackVersion> = $r9
org.apache.ambari.server.state.StackId.parseStackIdHelper : r1.<org.apache.ambari.server.state.StackId: java.lang.String stackVersion> = $r9 >>>>>>>> org.apache.ambari.server.checks.StormShutdownWarning.isApplicable : $r2 = newarray (java.lang.String)[1]
org.apache.ambari.server.checks.StormShutdownWarning.isApplicable : $r2 = newarray (java.lang.String)[1] >>>>>>>> org.apache.ambari.server.checks.StormShutdownWarning.isApplicable : $r2[0] = "STORM"
org.apache.ambari.server.checks.StormShutdownWarning.isApplicable : $r2[0] = "STORM" >>>>>>>> org.apache.ambari.server.checks.StormShutdownWarning.isApplicable : $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2)
org.apache.ambari.server.checks.StormShutdownWarning.isApplicable : $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2) >>>>>>>> org.apache.ambari.server.checks.StormShutdownWarning.isApplicable : z0 = specialinvoke r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: boolean isApplicable(org.apache.ambari.server.controller.PrereqCheckRequest,java.util.List,boolean)>(r1, $r3, 1)
org.apache.ambari.server.checks.StormShutdownWarning.isApplicable : z0 = specialinvoke r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: boolean isApplicable(org.apache.ambari.server.controller.PrereqCheckRequest,java.util.List,boolean)>(r1, $r3, 1) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r7 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: com.google.inject.Provider clustersProvider>
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r7 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: com.google.inject.Provider clustersProvider> >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r8 = interfaceinvoke $r7.<com.google.inject.Provider: java.lang.Object get()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r8 = interfaceinvoke $r7.<com.google.inject.Provider: java.lang.Object get()>() >>>>>>>> org.apache.ambari.server.checks.StormShutdownWarningTest$1.get : $r1 = virtualinvoke r0.<org.apache.ambari.server.checks.StormShutdownWarningTest$1: org.apache.ambari.server.state.Clusters get()>()
org.apache.ambari.server.checks.StormShutdownWarningTest$1.get : $r1 = virtualinvoke r0.<org.apache.ambari.server.checks.StormShutdownWarningTest$1: org.apache.ambari.server.state.Clusters get()>() >>>>>>>> org.apache.ambari.server.checks.StormShutdownWarningTest$1.get : $r1 = r0.<org.apache.ambari.server.checks.StormShutdownWarningTest$1: org.apache.ambari.server.checks.StormShutdownWarningTest this$0>
org.apache.ambari.server.checks.StormShutdownWarningTest$1.get : $r1 = r0.<org.apache.ambari.server.checks.StormShutdownWarningTest$1: org.apache.ambari.server.checks.StormShutdownWarningTest this$0> >>>>>>>> org.apache.ambari.server.checks.StormShutdownWarningTest$1.get : $r2 = staticinvoke <org.apache.ambari.server.checks.StormShutdownWarningTest: org.apache.ambari.server.state.Clusters access$000(org.apache.ambari.server.checks.StormShutdownWarningTest)>($r1)
org.apache.ambari.server.checks.StormShutdownWarningTest$1.get : $r2 = staticinvoke <org.apache.ambari.server.checks.StormShutdownWarningTest: org.apache.ambari.server.state.Clusters access$000(org.apache.ambari.server.checks.StormShutdownWarningTest)>($r1) >>>>>>>> org.apache.ambari.server.checks.StormShutdownWarningTest.access$000 : $r1 = r0.<org.apache.ambari.server.checks.StormShutdownWarningTest: org.apache.ambari.server.state.Clusters m_clusters>
org.apache.ambari.server.checks.StormShutdownWarningTest.access$000 : $r1 = r0.<org.apache.ambari.server.checks.StormShutdownWarningTest: org.apache.ambari.server.state.Clusters m_clusters> >>>>>>>> org.apache.ambari.server.checks.StormShutdownWarningTest.access$000 : return $r1
org.apache.ambari.server.checks.StormShutdownWarningTest.access$000 : return $r1 >>>>>>>> org.apache.ambari.server.checks.StormShutdownWarningTest$1.get : return $r2
org.apache.ambari.server.checks.StormShutdownWarningTest$1.get : return $r2 >>>>>>>> org.apache.ambari.server.checks.StormShutdownWarningTest$1.get : return $r1
org.apache.ambari.server.checks.StormShutdownWarningTest$1.get : return $r1 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r9 = (org.apache.ambari.server.state.Clusters) $r8
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r9 = (org.apache.ambari.server.state.Clusters) $r8 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r10 = virtualinvoke r1.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getClusterName()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r10 = virtualinvoke r1.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getClusterName()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : r3 = interfaceinvoke $r9.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>($r10)
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : r3 = interfaceinvoke $r9.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>($r10) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r11 = interfaceinvoke r3.<org.apache.ambari.server.state.Cluster: java.util.Map getServices()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r11 = interfaceinvoke r3.<org.apache.ambari.server.state.Cluster: java.util.Map getServices()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : r4 = interfaceinvoke $r11.<java.util.Map: java.util.Set keySet()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : r4 = interfaceinvoke $r11.<java.util.Map: java.util.Set keySet()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : if z0 == 0
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : if z0 == 0 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $z2 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $z2 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : if $z2 != 0
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : if $z2 != 0 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $z3 = 1
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $z3 = 1 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : goto [?= z1 = $z3]
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : goto [?= z1 = $z3] >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : z1 = $z3
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : z1 = $z3 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : r5 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : r5 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $z4 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $z4 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : if $z4 == 0
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : if $z4 == 0 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r12 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r12 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : r6 = (java.lang.String) $r12
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : r6 = (java.lang.String) $r12 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $z5 = interfaceinvoke r4.<java.util.Set: boolean contains(java.lang.Object)>(r6)
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $z5 = interfaceinvoke r4.<java.util.Set: boolean contains(java.lang.Object)>(r6) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : if $z5 == 0
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : if $z5 == 0 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : if z0 != 0
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : if z0 != 0 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $z6 = interfaceinvoke r4.<java.util.Set: boolean contains(java.lang.Object)>(r6)
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $z6 = interfaceinvoke r4.<java.util.Set: boolean contains(java.lang.Object)>(r6) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : if $z6 != 0
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : if $z6 != 0 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : goto [?= $z4 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : goto [?= $z4 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : return z1
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : return z1 >>>>>>>> org.apache.ambari.server.checks.StormShutdownWarning.isApplicable : if z0 == 0
org.apache.ambari.server.checks.StormShutdownWarning.isApplicable : if z0 == 0 >>>>>>>> org.apache.ambari.server.checks.StormShutdownWarning.isApplicable : $r4 = virtualinvoke r1.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.state.stack.upgrade.UpgradeType getUpgradeType()>()
org.apache.ambari.server.checks.StormShutdownWarning.isApplicable : $r4 = virtualinvoke r1.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.state.stack.upgrade.UpgradeType getUpgradeType()>() >>>>>>>> org.apache.ambari.server.checks.StormShutdownWarning.isApplicable : $r5 = <org.apache.ambari.server.state.stack.upgrade.UpgradeType: org.apache.ambari.server.state.stack.upgrade.UpgradeType ROLLING>
org.apache.ambari.server.checks.StormShutdownWarning.isApplicable : $r5 = <org.apache.ambari.server.state.stack.upgrade.UpgradeType: org.apache.ambari.server.state.stack.upgrade.UpgradeType ROLLING> >>>>>>>> org.apache.ambari.server.checks.StormShutdownWarning.isApplicable : if $r4 != $r5
org.apache.ambari.server.checks.StormShutdownWarning.isApplicable : if $r4 != $r5 >>>>>>>> org.apache.ambari.server.checks.StormShutdownWarning.isApplicable : $z1 = 1
org.apache.ambari.server.checks.StormShutdownWarning.isApplicable : $z1 = 1 >>>>>>>> org.apache.ambari.server.checks.StormShutdownWarning.isApplicable : goto [?= return $z1]
org.apache.ambari.server.checks.StormShutdownWarning.isApplicable : goto [?= return $z1] >>>>>>>> org.apache.ambari.server.checks.StormShutdownWarning.isApplicable : return $z1
