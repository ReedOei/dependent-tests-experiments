org.apache.ambari.server.audit.AuditLoggerModule.configure : $r5 = virtualinvoke r0.<org.apache.ambari.server.audit.AuditLoggerModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "org/apache/ambari/server/audit/AuditLogger") >>>>>>>> org.apache.ambari.server.audit.AuditLoggerModule.configure : interfaceinvoke $r5.<com.google.inject.binder.AnnotatedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder 'to'(java.lang.Class)>(class "org/apache/ambari/server/audit/AsyncAuditLogger")
org.apache.ambari.server.audit.AuditLoggerModule.configure : interfaceinvoke $r5.<com.google.inject.binder.AnnotatedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder 'to'(java.lang.Class)>(class "org/apache/ambari/server/audit/AsyncAuditLogger") >>>>>>>> org.apache.ambari.server.audit.AuditLoggerModule.configure : $r7 = virtualinvoke r0.<org.apache.ambari.server.audit.AuditLoggerModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "org/apache/ambari/server/audit/AuditLogger")
org.apache.ambari.server.audit.AuditLoggerModule.configure : $r7 = virtualinvoke r0.<org.apache.ambari.server.audit.AuditLoggerModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "org/apache/ambari/server/audit/AuditLogger") >>>>>>>> org.apache.ambari.server.audit.AuditLoggerModule.configure : $r8 = staticinvoke <com.google.inject.name.Names: com.google.inject.name.Named named(java.lang.String)>("AsyncAuditLogger")
org.apache.ambari.server.audit.AuditLoggerModule.configure : $r8 = staticinvoke <com.google.inject.name.Names: com.google.inject.name.Named named(java.lang.String)>("AsyncAuditLogger") >>>>>>>> org.apache.ambari.server.audit.AuditLoggerModule.configure : $r9 = interfaceinvoke $r7.<com.google.inject.binder.AnnotatedBindingBuilder: com.google.inject.binder.LinkedBindingBuilder annotatedWith(java.lang.annotation.Annotation)>($r8)
org.apache.ambari.server.audit.AuditLoggerModule.configure : $r9 = interfaceinvoke $r7.<com.google.inject.binder.AnnotatedBindingBuilder: com.google.inject.binder.LinkedBindingBuilder annotatedWith(java.lang.annotation.Annotation)>($r8) >>>>>>>> org.apache.ambari.server.audit.AuditLoggerModule.configure : interfaceinvoke $r9.<com.google.inject.binder.LinkedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder 'to'(java.lang.Class)>(class "org/apache/ambari/server/audit/AuditLoggerDefaultImpl")
org.apache.ambari.server.audit.AuditLoggerModule.configure : interfaceinvoke $r9.<com.google.inject.binder.LinkedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder 'to'(java.lang.Class)>(class "org/apache/ambari/server/audit/AuditLoggerDefaultImpl") >>>>>>>> org.apache.ambari.server.audit.AuditLoggerModule.configure : $r11 = virtualinvoke r0.<org.apache.ambari.server.audit.AuditLoggerModule: com.google.inject.Binder binder()>()
org.apache.ambari.server.audit.AuditLoggerModule.configure : $r11 = virtualinvoke r0.<org.apache.ambari.server.audit.AuditLoggerModule: com.google.inject.Binder binder()>() >>>>>>>> org.apache.ambari.server.audit.AuditLoggerModule.configure : r1 = staticinvoke <com.google.inject.multibindings.Multibinder: com.google.inject.multibindings.Multibinder newSetBinder(com.google.inject.Binder,java.lang.Class)>($r11, class "org/apache/ambari/server/audit/request/eventcreator/RequestAuditEventCreator")
org.apache.ambari.server.audit.AuditLoggerModule.configure : r1 = staticinvoke <com.google.inject.multibindings.Multibinder: com.google.inject.multibindings.Multibinder newSetBinder(com.google.inject.Binder,java.lang.Class)>($r11, class "org/apache/ambari/server/audit/request/eventcreator/RequestAuditEventCreator") >>>>>>>> org.apache.ambari.server.audit.AuditLoggerModule.configure : $r12 = virtualinvoke r0.<org.apache.ambari.server.audit.AuditLoggerModule: java.lang.String getPackageToScan()>()
org.apache.ambari.server.audit.AuditLoggerModule.configure : $r12 = virtualinvoke r0.<org.apache.ambari.server.audit.AuditLoggerModule: java.lang.String getPackageToScan()>() >>>>>>>> org.apache.ambari.server.audit.AuditLoggerModule.getPackageToScan : $r1 = class "org/apache/ambari/server/audit/request/eventcreator/RequestAuditEventCreator"
org.apache.ambari.server.audit.AuditLoggerModule.getPackageToScan : $r1 = class "org/apache/ambari/server/audit/request/eventcreator/RequestAuditEventCreator" >>>>>>>> org.apache.ambari.server.audit.AuditLoggerModule.getPackageToScan : $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Package getPackage()>()
org.apache.ambari.server.audit.AuditLoggerModule.getPackageToScan : $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Package getPackage()>() >>>>>>>> org.apache.ambari.server.audit.AuditLoggerModule.getPackageToScan : $r3 = virtualinvoke $r2.<java.lang.Package: java.lang.String getName()>()
org.apache.ambari.server.audit.AuditLoggerModule.getPackageToScan : $r3 = virtualinvoke $r2.<java.lang.Package: java.lang.String getName()>() >>>>>>>> org.apache.ambari.server.audit.AuditLoggerModule.getPackageToScan : return $r3
org.apache.ambari.server.audit.AuditLoggerModule.getPackageToScan : return $r3 >>>>>>>> org.apache.ambari.server.audit.AuditLoggerModule.configure : $r13 = virtualinvoke r0.<org.apache.ambari.server.audit.AuditLoggerModule: java.util.List getExclusions()>()
org.apache.ambari.server.audit.AuditLoggerModule.configure : $r13 = virtualinvoke r0.<org.apache.ambari.server.audit.AuditLoggerModule: java.util.List getExclusions()>() >>>>>>>> org.apache.ambari.server.audit.AuditLoggerModule.getExclusions : $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>()
org.apache.ambari.server.audit.AuditLoggerModule.getExclusions : $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>() >>>>>>>> org.apache.ambari.server.audit.AuditLoggerModule.getExclusions : return $r1
org.apache.ambari.server.audit.AuditLoggerModule.getExclusions : return $r1 >>>>>>>> org.apache.ambari.server.audit.AuditLoggerModule.configure : $r14 = virtualinvoke r0.<org.apache.ambari.server.audit.AuditLoggerModule: java.util.List getSelectors()>()
org.apache.ambari.server.audit.AuditLoggerModule.configure : $r14 = virtualinvoke r0.<org.apache.ambari.server.audit.AuditLoggerModule: java.util.List getSelectors()>() >>>>>>>> org.apache.ambari.server.audit.AuditLoggerModule.getSelectors : $r1 = new java.util.ArrayList
org.apache.ambari.server.audit.AuditLoggerModule.getSelectors : $r1 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.audit.AuditLoggerModule.getSelectors : specialinvoke $r1.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.audit.AuditLoggerModule.getSelectors : specialinvoke $r1.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.audit.AuditLoggerModule.getSelectors : r2 = $r1
org.apache.ambari.server.audit.AuditLoggerModule.getSelectors : r2 = $r1 >>>>>>>> org.apache.ambari.server.audit.AuditLoggerModule.getSelectors : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(class "org/apache/ambari/server/audit/request/eventcreator/RequestAuditEventCreator")
org.apache.ambari.server.audit.AuditLoggerModule.getSelectors : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(class "org/apache/ambari/server/audit/request/eventcreator/RequestAuditEventCreator") >>>>>>>> org.apache.ambari.server.audit.AuditLoggerModule.getSelectors : return r2
org.apache.ambari.server.audit.AuditLoggerModule.getSelectors : return r2 >>>>>>>> org.apache.ambari.server.audit.AuditLoggerModule.configure : r2 = staticinvoke <org.apache.ambari.server.cleanup.ClasspathScannerUtils: java.util.Set findOnClassPath(java.lang.String,java.util.List,java.util.List)>($r12, $r13, $r14)
org.apache.ambari.server.audit.AuditLoggerModule.configure : r2 = staticinvoke <org.apache.ambari.server.cleanup.ClasspathScannerUtils: java.util.Set findOnClassPath(java.lang.String,java.util.List,java.util.List)>($r12, $r13, $r14) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r3 = new java.util.HashSet
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r3 = new java.util.HashSet >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : specialinvoke $r3.<java.util.HashSet: void <init>()>()
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : specialinvoke $r3.<java.util.HashSet: void <init>()>() >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : r4 = $r3
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : r4 = $r3 >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r9 = class "org/apache/ambari/server/cleanup/ClasspathScannerUtils"
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r9 = class "org/apache/ambari/server/cleanup/ClasspathScannerUtils" >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.ClassLoader getClassLoader()>()
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.ClassLoader getClassLoader()>() >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : r5 = staticinvoke <com.google.common.reflect.ClassPath: com.google.common.reflect.ClassPath 'from'(java.lang.ClassLoader)>($r10)
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : r5 = staticinvoke <com.google.common.reflect.ClassPath: com.google.common.reflect.ClassPath 'from'(java.lang.ClassLoader)>($r10) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r11 = <org.apache.ambari.server.cleanup.ClasspathScannerUtils: org.slf4j.Logger LOGGER>
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r11 = <org.apache.ambari.server.cleanup.ClasspathScannerUtils: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : interfaceinvoke $r11.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Checking package [{}] for binding candidates.", r0)
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : interfaceinvoke $r11.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Checking package [{}] for binding candidates.", r0) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r12 = virtualinvoke r5.<com.google.common.reflect.ClassPath: com.google.common.collect.ImmutableSet getTopLevelClassesRecursive(java.lang.String)>(r0)
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r12 = virtualinvoke r5.<com.google.common.reflect.ClassPath: com.google.common.collect.ImmutableSet getTopLevelClassesRecursive(java.lang.String)>(r0) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : r6 = virtualinvoke $r12.<com.google.common.collect.ImmutableSet: java.util.Iterator iterator()>()
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : r6 = virtualinvoke $r12.<com.google.common.collect.ImmutableSet: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : if $z0 == 0
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : if $z0 == 0 >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r13 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r13 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : r7 = (com.google.common.reflect.ClassPath$ClassInfo) $r13
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : r7 = (com.google.common.reflect.ClassPath$ClassInfo) $r13 >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : r8 = virtualinvoke r7.<com.google.common.reflect.ClassPath$ClassInfo: java.lang.Class load()>()
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : r8 = virtualinvoke r7.<com.google.common.reflect.ClassPath$ClassInfo: java.lang.Class load()>() >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $z1 = interfaceinvoke r1.<java.util.List: boolean contains(java.lang.Object)>(r8)
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $z1 = interfaceinvoke r1.<java.util.List: boolean contains(java.lang.Object)>(r8) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : if $z1 == 0
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : if $z1 == 0 >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $z2 = staticinvoke <org.apache.ambari.server.cleanup.ClasspathScannerUtils: boolean isEligible(java.lang.Class,java.util.List)>(r8, r2)
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $z2 = staticinvoke <org.apache.ambari.server.cleanup.ClasspathScannerUtils: boolean isEligible(java.lang.Class,java.util.List)>(r8, r2) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.isEligible : $z0 = staticinvoke <org.apache.ambari.server.cleanup.ClasspathScannerUtils: boolean checkSubClasses(java.lang.Class,java.util.List)>(r0, r1)
org.apache.ambari.server.cleanup.ClasspathScannerUtils.isEligible : $z0 = staticinvoke <org.apache.ambari.server.cleanup.ClasspathScannerUtils: boolean checkSubClasses(java.lang.Class,java.util.List)>(r0, r1) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkSubClasses : z0 = 0
org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkSubClasses : z0 = 0 >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkSubClasses : $r5 = <org.apache.ambari.server.cleanup.ClasspathScannerUtils: org.slf4j.Logger LOGGER>
org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkSubClasses : $r5 = <org.apache.ambari.server.cleanup.ClasspathScannerUtils: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkSubClasses : interfaceinvoke $r5.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Checking interfaces for: [{}]", r0)
org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkSubClasses : interfaceinvoke $r5.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Checking interfaces for: [{}]", r0) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkSubClasses : r2 = staticinvoke <org.apache.commons.lang.ClassUtils: java.util.List getAllInterfaces(java.lang.Class)>(r0)
org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkSubClasses : r2 = staticinvoke <org.apache.commons.lang.ClassUtils: java.util.List getAllInterfaces(java.lang.Class)>(r0) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkSubClasses : r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkSubClasses : r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkSubClasses : $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkSubClasses : $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkSubClasses : if $z1 == 0
org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkSubClasses : if $z1 == 0 >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkSubClasses : $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkSubClasses : $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkSubClasses : r4 = (java.lang.Class) $r6
org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkSubClasses : r4 = (java.lang.Class) $r6 >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkSubClasses : $z2 = interfaceinvoke r2.<java.util.List: boolean contains(java.lang.Object)>(r4)
org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkSubClasses : $z2 = interfaceinvoke r2.<java.util.List: boolean contains(java.lang.Object)>(r4) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkSubClasses : if $z2 == 0
org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkSubClasses : if $z2 == 0 >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkSubClasses : $r7 = <org.apache.ambari.server.cleanup.ClasspathScannerUtils: org.slf4j.Logger LOGGER>
org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkSubClasses : $r7 = <org.apache.ambari.server.cleanup.ClasspathScannerUtils: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkSubClasses : interfaceinvoke $r7.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Checking candidate for subclassing interface: ", r4)
org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkSubClasses : interfaceinvoke $r7.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Checking candidate for subclassing interface: ", r4) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkSubClasses : $r8 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>()
org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkSubClasses : $r8 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkSubClasses : $r9 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>()
org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkSubClasses : $r9 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkSubClasses : $z3 = virtualinvoke $r8.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r9)
org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkSubClasses : $z3 = virtualinvoke $r8.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r9) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkSubClasses : if $z3 == 0
org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkSubClasses : if $z3 == 0 >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkSubClasses : z0 = 1
org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkSubClasses : z0 = 1 >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkSubClasses : goto [?= return z0]
org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkSubClasses : goto [?= return z0] >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkSubClasses : return z0
org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkSubClasses : return z0 >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.isEligible : if $z0 != 0
org.apache.ambari.server.cleanup.ClasspathScannerUtils.isEligible : if $z0 != 0 >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.isEligible : $z2 = 1
org.apache.ambari.server.cleanup.ClasspathScannerUtils.isEligible : $z2 = 1 >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.isEligible : goto [?= return $z2]
org.apache.ambari.server.cleanup.ClasspathScannerUtils.isEligible : goto [?= return $z2] >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.isEligible : return $z2
org.apache.ambari.server.cleanup.ClasspathScannerUtils.isEligible : return $z2 >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : if $z2 == 0
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : if $z2 == 0 >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r15 = <org.apache.ambari.server.cleanup.ClasspathScannerUtils: org.slf4j.Logger LOGGER>
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r15 = <org.apache.ambari.server.cleanup.ClasspathScannerUtils: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : interfaceinvoke $r15.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Found class [{}]", r8)
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : interfaceinvoke $r15.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Found class [{}]", r8) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : interfaceinvoke r4.<java.util.Set: boolean add(java.lang.Object)>(r8)
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : interfaceinvoke r4.<java.util.Set: boolean add(java.lang.Object)>(r8) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : goto [?= (branch)]
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : goto [?= $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : goto [?= $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkSubClasses : goto [?= $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkSubClasses : goto [?= $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.isEligible : $z1 = staticinvoke <org.apache.ambari.server.cleanup.ClasspathScannerUtils: boolean checkAnnotations(java.lang.Class,java.util.List)>(r0, r1)
org.apache.ambari.server.cleanup.ClasspathScannerUtils.isEligible : $z1 = staticinvoke <org.apache.ambari.server.cleanup.ClasspathScannerUtils: boolean checkAnnotations(java.lang.Class,java.util.List)>(r0, r1) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkAnnotations : $r2 = <org.apache.ambari.server.cleanup.ClasspathScannerUtils: org.slf4j.Logger LOGGER>
org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkAnnotations : $r2 = <org.apache.ambari.server.cleanup.ClasspathScannerUtils: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkAnnotations : interfaceinvoke $r2.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Checking annotations for: [{}]", r0)
org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkAnnotations : interfaceinvoke $r2.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Checking annotations for: [{}]", r0) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkAnnotations : z0 = 0
org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkAnnotations : z0 = 0 >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkAnnotations : r3 = virtualinvoke r0.<java.lang.Class: java.lang.annotation.Annotation[] getDeclaredAnnotations()>()
org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkAnnotations : r3 = virtualinvoke r0.<java.lang.Class: java.lang.annotation.Annotation[] getDeclaredAnnotations()>() >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkAnnotations : i0 = lengthof r3
org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkAnnotations : i0 = lengthof r3 >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkAnnotations : i1 = 0
org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkAnnotations : i1 = 0 >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkAnnotations : if i1 >= i0
org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkAnnotations : if i1 >= i0 >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkAnnotations : return z0
org.apache.ambari.server.cleanup.ClasspathScannerUtils.checkAnnotations : return z0 >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.isEligible : if $z1 == 0
org.apache.ambari.server.cleanup.ClasspathScannerUtils.isEligible : if $z1 == 0 >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.isEligible : $z2 = 0
org.apache.ambari.server.cleanup.ClasspathScannerUtils.isEligible : $z2 = 0 >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r16 = <org.apache.ambari.server.cleanup.ClasspathScannerUtils: org.slf4j.Logger LOGGER>
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : $r16 = <org.apache.ambari.server.cleanup.ClasspathScannerUtils: org.slf4j.Logger LOGGER> >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : interfaceinvoke $r16.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Candidate [{}] doesn\'t match.", r8)
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : interfaceinvoke $r16.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Candidate [{}] doesn\'t match.", r8) >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : goto [?= return r4]
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : goto [?= return r4] >>>>>>>> org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : return r4
org.apache.ambari.server.cleanup.ClasspathScannerUtils.findOnClassPath : return r4 >>>>>>>> org.apache.ambari.server.audit.AuditLoggerModule.configure : r3 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.audit.AuditLoggerModule.configure : r3 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.audit.AuditLoggerModule.configure : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.audit.AuditLoggerModule.configure : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.audit.AuditLoggerModule.configure : if $z0 == 0
org.apache.ambari.server.audit.AuditLoggerModule.configure : if $z0 == 0 >>>>>>>> org.apache.ambari.server.audit.AuditLoggerModule.configure : $r15 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.audit.AuditLoggerModule.configure : $r15 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.audit.AuditLoggerModule.configure : r4 = (java.lang.Class) $r15
org.apache.ambari.server.audit.AuditLoggerModule.configure : r4 = (java.lang.Class) $r15 >>>>>>>> org.apache.ambari.server.audit.AuditLoggerModule.configure : $r16 = virtualinvoke r1.<com.google.inject.multibindings.Multibinder: com.google.inject.binder.LinkedBindingBuilder addBinding()>()
org.apache.ambari.server.audit.AuditLoggerModule.configure : $r16 = virtualinvoke r1.<com.google.inject.multibindings.Multibinder: com.google.inject.binder.LinkedBindingBuilder addBinding()>() >>>>>>>> org.apache.ambari.server.audit.AuditLoggerModule.configure : $r17 = interfaceinvoke $r16.<com.google.inject.binder.LinkedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder 'to'(java.lang.Class)>(r4)
org.apache.ambari.server.audit.AuditLoggerModule.configure : $r17 = interfaceinvoke $r16.<com.google.inject.binder.LinkedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder 'to'(java.lang.Class)>(r4) >>>>>>>> org.apache.ambari.server.audit.AuditLoggerModule.configure : $r18 = <com.google.inject.Scopes: com.google.inject.Scope SINGLETON>
org.apache.ambari.server.audit.AuditLoggerModule.configure : $r18 = <com.google.inject.Scopes: com.google.inject.Scope SINGLETON> >>>>>>>> org.apache.ambari.server.audit.AuditLoggerModule.configure : interfaceinvoke $r17.<com.google.inject.binder.ScopedBindingBuilder: void in(com.google.inject.Scope)>($r18)
org.apache.ambari.server.audit.AuditLoggerModule.configure : interfaceinvoke $r17.<com.google.inject.binder.ScopedBindingBuilder: void in(com.google.inject.Scope)>($r18) >>>>>>>> org.apache.ambari.server.audit.AuditLoggerModule.configure : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.audit.AuditLoggerModule.configure : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.audit.AuditLoggerModule.configure : $r19 = virtualinvoke r0.<org.apache.ambari.server.audit.AuditLoggerModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "org/apache/ambari/server/audit/request/RequestAuditLogger")
org.apache.ambari.server.audit.AuditLoggerModule.configure : $r19 = virtualinvoke r0.<org.apache.ambari.server.audit.AuditLoggerModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "org/apache/ambari/server/audit/request/RequestAuditLogger") >>>>>>>> org.apache.ambari.server.audit.AuditLoggerModule.configure : interfaceinvoke $r19.<com.google.inject.binder.AnnotatedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder 'to'(java.lang.Class)>(class "org/apache/ambari/server/audit/request/RequestAuditLoggerImpl")
org.apache.ambari.server.audit.AuditLoggerModule.configure : interfaceinvoke $r19.<com.google.inject.binder.AnnotatedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder 'to'(java.lang.Class)>(class "org/apache/ambari/server/audit/request/RequestAuditLoggerImpl") >>>>>>>> org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : $r1 = new java.util.Properties
org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : $r1 = new java.util.Properties >>>>>>>> org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : specialinvoke $r1.<java.util.Properties: void <init>()>()
org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : specialinvoke $r1.<java.util.Properties: void <init>()>() >>>>>>>> org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : r2 = $r1
org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : r2 = $r1 >>>>>>>> org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : $r4 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty CLIENT_SECURITY>
org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : $r4 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty CLIENT_SECURITY> >>>>>>>> org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : $r5 = virtualinvoke $r4.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : $r5 = virtualinvoke $r4.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getKey : $r1 = r0.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String m_key>
org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getKey : $r1 = r0.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String m_key> >>>>>>>> org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getKey : return $r1
org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getKey : return $r1 >>>>>>>> org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : virtualinvoke r2.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r5, "ldap")
org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : virtualinvoke r2.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r5, "ldap") >>>>>>>> org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : $r7 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SERVER_PERSISTENCE_TYPE>
org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : $r7 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SERVER_PERSISTENCE_TYPE> >>>>>>>> org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : $r8 = virtualinvoke $r7.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : $r8 = virtualinvoke $r7.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : virtualinvoke r2.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r8, "in-memory")
org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : virtualinvoke r2.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r8, "in-memory") >>>>>>>> org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : $r10 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty METADATA_DIR_PATH>
org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : $r10 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty METADATA_DIR_PATH> >>>>>>>> org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : $r11 = virtualinvoke $r10.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : $r11 = virtualinvoke $r10.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : virtualinvoke r2.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r11, "src/test/resources/stacks")
org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : virtualinvoke r2.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r11, "src/test/resources/stacks") >>>>>>>> org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : $r13 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SERVER_VERSION_FILE>
org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : $r13 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SERVER_VERSION_FILE> >>>>>>>> org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : $r14 = virtualinvoke $r13.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : $r14 = virtualinvoke $r13.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : virtualinvoke r2.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r14, "src/test/resources/version")
org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : virtualinvoke r2.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r14, "src/test/resources/version") >>>>>>>> org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : $r16 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty OS_VERSION>
org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : $r16 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty OS_VERSION> >>>>>>>> org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : $r17 = virtualinvoke $r16.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : $r17 = virtualinvoke $r16.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : virtualinvoke r2.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r17, "centos5")
org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : virtualinvoke r2.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r17, "centos5") >>>>>>>> org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : $r19 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SHARED_RESOURCES_DIR>
org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : $r19 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SHARED_RESOURCES_DIR> >>>>>>>> org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : $r20 = virtualinvoke $r19.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : $r20 = virtualinvoke $r19.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : virtualinvoke r2.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r20, "src/test/resources/")
org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : virtualinvoke r2.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r20, "src/test/resources/") >>>>>>>> org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : $r22 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty LDAP_GROUP_BASE>
org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : $r22 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty LDAP_GROUP_BASE> >>>>>>>> org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : $r23 = virtualinvoke $r22.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : $r23 = virtualinvoke $r22.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : virtualinvoke r2.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r23, "ou=groups,dc=ambari,dc=apache,dc=org")
org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : virtualinvoke r2.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r23, "ou=groups,dc=ambari,dc=apache,dc=org") >>>>>>>> org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : $r25 = new org.apache.ambari.server.controller.ControllerModule
org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : $r25 = new org.apache.ambari.server.controller.ControllerModule >>>>>>>> org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : specialinvoke $r25.<org.apache.ambari.server.controller.ControllerModule: void <init>(java.util.Properties)>(r2)
org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : specialinvoke $r25.<org.apache.ambari.server.controller.ControllerModule: void <init>(java.util.Properties)>(r2) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : r2 = null
org.apache.ambari.server.configuration.Configuration.getProperty : r2 = null >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : $r3 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object getDefaultValue()>()
org.apache.ambari.server.configuration.Configuration.getProperty : $r3 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object getDefaultValue()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getDefaultValue : $r1 = r0.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object m_defaultValue>
org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getDefaultValue : $r1 = r0.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object m_defaultValue> >>>>>>>> org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getDefaultValue : return $r1
org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getDefaultValue : return $r1 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : if null == $r3
org.apache.ambari.server.configuration.Configuration.getProperty : if null == $r3 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : $r4 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object getDefaultValue()>()
org.apache.ambari.server.configuration.Configuration.getProperty : $r4 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object getDefaultValue()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4)
org.apache.ambari.server.configuration.Configuration.getProperty : r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : $r5 = r0.<org.apache.ambari.server.configuration.Configuration: java.util.Properties properties>
org.apache.ambari.server.configuration.Configuration.getProperty : $r5 = r0.<org.apache.ambari.server.configuration.Configuration: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : $r6 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.configuration.Configuration.getProperty : $r6 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : $r7 = virtualinvoke $r5.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>($r6, r2)
org.apache.ambari.server.configuration.Configuration.getProperty : $r7 = virtualinvoke $r5.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>($r6, r2) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : return $r7
org.apache.ambari.server.configuration.Configuration.getProperty : return $r7 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty API_USE_SSL>
org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty API_USE_SSL> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1)
org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r2)
org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r2) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : return $z0
org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : return $z0 >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r1 = new org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r1 = new org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : specialinvoke $r1.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: void <init>()>()
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : specialinvoke $r1.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: void <init>()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : r2 = $r1
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : r2 = $r1 >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r3 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty KERBEROS_AUTH_ENABLED>
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r3 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty KERBEROS_AUTH_ENABLED> >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r13 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r3)
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r13 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r3) >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r13)
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r13) >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $z0 = virtualinvoke $r14.<java.lang.Boolean: boolean booleanValue()>()
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $z0 = virtualinvoke $r14.<java.lang.Boolean: boolean booleanValue()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : virtualinvoke r2.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: void setKerberosAuthenticationEnabled(boolean)>($z0)
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : virtualinvoke r2.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: void setKerberosAuthenticationEnabled(boolean)>($z0) >>>>>>>> org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.setKerberosAuthenticationEnabled : r0.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean kerberosAuthenticationEnabled> = z0
org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.setKerberosAuthenticationEnabled : r0.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean kerberosAuthenticationEnabled> = z0 >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $z1 = virtualinvoke r2.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean isKerberosAuthenticationEnabled()>()
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $z1 = virtualinvoke r2.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean isKerberosAuthenticationEnabled()>() >>>>>>>> org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.isKerberosAuthenticationEnabled : $z0 = r0.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean kerberosAuthenticationEnabled>
org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.isKerberosAuthenticationEnabled : $z0 = r0.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean kerberosAuthenticationEnabled> >>>>>>>> org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.isKerberosAuthenticationEnabled : return $z0
org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.isKerberosAuthenticationEnabled : return $z0 >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : if $z1 != 0
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : if $z1 != 0 >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : return r2
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : return r2 >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_PATH>
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_PATH> >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r4 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1)
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r4 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1) >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : if $r4 == null
org.apache.ambari.server.configuration.Configuration.loadSSLParams : if $r4 == null >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r7 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_PASSWORD>
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r7 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_PASSWORD> >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r8 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r7)
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r8 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r7) >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : if $r8 == null
org.apache.ambari.server.configuration.Configuration.loadSSLParams : if $r8 == null >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r15 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_TYPE>
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r15 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_TYPE> >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r16 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r15)
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r16 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r15) >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : if $r16 == null
org.apache.ambari.server.configuration.Configuration.loadSSLParams : if $r16 == null >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r1 = <org.apache.ambari.server.configuration.Configuration: org.slf4j.Logger LOG>
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r1 = <org.apache.ambari.server.configuration.Configuration: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r2 = new java.lang.StringBuilder
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Hosts Mapping File ")
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Hosts Mapping File ") >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r3 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SRVR_HOSTS_MAPPING>
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r3 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SRVR_HOSTS_MAPPING> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r5 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r3)
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r5 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r3) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5)
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : interfaceinvoke $r1.<org.slf4j.Logger: void info(java.lang.String)>($r7)
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : interfaceinvoke $r1.<org.slf4j.Logger: void info(java.lang.String)>($r7) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r8 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SRVR_HOSTS_MAPPING>
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r8 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SRVR_HOSTS_MAPPING> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r9 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r8)
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r9 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r8) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : return $r9
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : return $r9 >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : r1 = null
org.apache.ambari.server.controller.HostsMap.setupMap : r1 = null >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : $r6 = <org.apache.ambari.server.controller.HostsMap: org.slf4j.Logger LOG>
org.apache.ambari.server.controller.HostsMap.setupMap : $r6 = <org.apache.ambari.server.controller.HostsMap: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : $r2 = new java.lang.StringBuilder
org.apache.ambari.server.controller.HostsMap.setupMap : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.controller.HostsMap.setupMap : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Using hostsmap file ")
org.apache.ambari.server.controller.HostsMap.setupMap : $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Using hostsmap file ") >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : $r8 = r0.<org.apache.ambari.server.controller.HostsMap: java.lang.String hostsMapFile>
org.apache.ambari.server.controller.HostsMap.setupMap : $r8 = r0.<org.apache.ambari.server.controller.HostsMap: java.lang.String hostsMapFile> >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)
org.apache.ambari.server.controller.HostsMap.setupMap : $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8) >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.controller.HostsMap.setupMap : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String)>($r10)
org.apache.ambari.server.controller.HostsMap.setupMap : interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String)>($r10) >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : $r11 = r0.<org.apache.ambari.server.controller.HostsMap: java.lang.String hostsMapFile>
org.apache.ambari.server.controller.HostsMap.setupMap : $r11 = r0.<org.apache.ambari.server.controller.HostsMap: java.lang.String hostsMapFile> >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : if $r11 == null
org.apache.ambari.server.controller.HostsMap.setupMap : if $r11 == null >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : if r1 == null
org.apache.ambari.server.controller.HostsMap.setupMap : if r1 == null >>>>>>>> org.apache.ambari.server.configuration.Configuration.getSharedResourcesDirPath : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SHARED_RESOURCES_DIR>
org.apache.ambari.server.configuration.Configuration.getSharedResourcesDirPath : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SHARED_RESOURCES_DIR> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getSharedResourcesDirPath : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1)
org.apache.ambari.server.configuration.Configuration.getSharedResourcesDirPath : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getSharedResourcesDirPath : return $r2
org.apache.ambari.server.configuration.Configuration.getSharedResourcesDirPath : return $r2 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : r2 = null
org.apache.ambari.server.state.stack.OsFamily.init : r2 = null >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : $r8 = new java.io.File
org.apache.ambari.server.state.stack.OsFamily.init : $r8 = new java.io.File >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : specialinvoke $r8.<java.io.File: void <init>(java.lang.String,java.lang.String)>(r1, "os_family.json")
org.apache.ambari.server.state.stack.OsFamily.init : specialinvoke $r8.<java.io.File: void <init>(java.lang.String,java.lang.String)>(r1, "os_family.json") >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : r3 = $r8
org.apache.ambari.server.state.stack.OsFamily.init : r3 = $r8 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : $z0 = virtualinvoke r3.<java.io.File: boolean exists()>()
org.apache.ambari.server.state.stack.OsFamily.init : $z0 = virtualinvoke r3.<java.io.File: boolean exists()>() >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : if $z0 != 0
org.apache.ambari.server.state.stack.OsFamily.init : if $z0 != 0 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : $r9 = new java.lang.Exception
org.apache.ambari.server.state.stack.OsFamily.init : $r9 = new java.lang.Exception >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : specialinvoke $r9.<java.lang.Exception: void <init>()>()
org.apache.ambari.server.state.stack.OsFamily.init : specialinvoke $r9.<java.lang.Exception: void <init>()>() >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : throw $r9
org.apache.ambari.server.state.stack.OsFamily.init : throw $r9 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : r19 = $r18
org.apache.ambari.server.state.stack.OsFamily.init : r19 = $r18 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : $r20 = r0.<org.apache.ambari.server.state.stack.OsFamily: org.slf4j.Logger LOG>
org.apache.ambari.server.state.stack.OsFamily.init : $r20 = r0.<org.apache.ambari.server.state.stack.OsFamily: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : $r21 = newarray (java.lang.Object)[1]
org.apache.ambari.server.state.stack.OsFamily.init : $r21 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : $r6 = new java.io.File
org.apache.ambari.server.state.stack.OsFamily.init : $r6 = new java.io.File >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : specialinvoke $r6.<java.io.File: void <init>(java.lang.String,java.lang.String)>(r1, "os_family.json")
org.apache.ambari.server.state.stack.OsFamily.init : specialinvoke $r6.<java.io.File: void <init>(java.lang.String,java.lang.String)>(r1, "os_family.json") >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : $r22 = virtualinvoke $r6.<java.io.File: java.lang.String toString()>()
org.apache.ambari.server.state.stack.OsFamily.init : $r22 = virtualinvoke $r6.<java.io.File: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : $r21[0] = $r22
org.apache.ambari.server.state.stack.OsFamily.init : $r21[0] = $r22 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : $r23 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Could not load OS family definition from %s file", $r21)
org.apache.ambari.server.state.stack.OsFamily.init : $r23 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Could not load OS family definition from %s file", $r21) >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : interfaceinvoke $r20.<org.slf4j.Logger: void error(java.lang.String)>($r23)
org.apache.ambari.server.state.stack.OsFamily.init : interfaceinvoke $r20.<org.slf4j.Logger: void error(java.lang.String)>($r23) >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : $r24 = new java.lang.RuntimeException
org.apache.ambari.server.state.stack.OsFamily.init : $r24 = new java.lang.RuntimeException >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : specialinvoke $r24.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r19)
org.apache.ambari.server.state.stack.OsFamily.init : specialinvoke $r24.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r19) >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : throw $r24
org.apache.ambari.server.state.stack.OsFamily.init : throw $r24 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : r7 = $r25
org.apache.ambari.server.state.stack.OsFamily.init : r7 = $r25 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r2)
org.apache.ambari.server.state.stack.OsFamily.init : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r2) >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : throw r7
org.apache.ambari.server.state.stack.OsFamily.init : throw r7 >>>>>>>> org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : r3 = $r26
org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : r3 = $r26 >>>>>>>> org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : $r27 = new java.lang.RuntimeException
org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : $r27 = new java.lang.RuntimeException >>>>>>>> org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : specialinvoke $r27.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r3)
org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : specialinvoke $r27.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r3) >>>>>>>> org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : throw $r27
org.apache.ambari.server.security.authorization.AuthorizationTestModule.configure : throw $r27 >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : $r2 = r0.<org.apache.ambari.server.security.encryption.AESEncryptor: byte[] salt>
org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : $r2 = r0.<org.apache.ambari.server.security.encryption.AESEncryptor: byte[] salt> >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : $r3 = virtualinvoke r0.<org.apache.ambari.server.security.encryption.AESEncryptor: javax.crypto.SecretKey getKeyFromPassword(java.lang.String,byte[])>(r1, $r2)
org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : $r3 = virtualinvoke r0.<org.apache.ambari.server.security.encryption.AESEncryptor: javax.crypto.SecretKey getKeyFromPassword(java.lang.String,byte[])>(r1, $r2) >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : r3 = null
org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : r3 = null >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : r4 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>("PBKDF2WithHmacSHA1")
org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : r4 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>("PBKDF2WithHmacSHA1") >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : $r6 = new javax.crypto.spec.PBEKeySpec
org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : $r6 = new javax.crypto.spec.PBEKeySpec >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : $r7 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>()
org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : $r7 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>() >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : specialinvoke $r6.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r7, r2, 65536, 128)
org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : specialinvoke $r6.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r7, r2, 65536, 128) >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : r5 = $r6
org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : r5 = $r6 >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : r3 = virtualinvoke r4.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r5)
org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : r3 = virtualinvoke r4.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r5) >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : goto [?= return r3]
org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : goto [?= return r3] >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : return r3
org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : return r3 >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : return $r3
org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : return $r3 >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r2 = new org.apache.ambari.server.security.encryption.EncryptionResult
org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r2 = new org.apache.ambari.server.security.encryption.EncryptionResult >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r4 = r0.<org.apache.ambari.server.security.encryption.AESEncryptor: byte[] salt>
org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r4 = r0.<org.apache.ambari.server.security.encryption.AESEncryptor: byte[] salt> >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r5 = r0.<org.apache.ambari.server.security.encryption.AESEncryptor: javax.crypto.Cipher ecipher>
org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r5 = r0.<org.apache.ambari.server.security.encryption.AESEncryptor: javax.crypto.Cipher ecipher> >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r6 = virtualinvoke $r5.<javax.crypto.Cipher: java.security.AlgorithmParameters getParameters()>()
org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r6 = virtualinvoke $r5.<javax.crypto.Cipher: java.security.AlgorithmParameters getParameters()>() >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r7 = virtualinvoke $r6.<java.security.AlgorithmParameters: java.security.spec.AlgorithmParameterSpec getParameterSpec(java.lang.Class)>(class "javax/crypto/spec/IvParameterSpec")
org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r7 = virtualinvoke $r6.<java.security.AlgorithmParameters: java.security.spec.AlgorithmParameterSpec getParameterSpec(java.lang.Class)>(class "javax/crypto/spec/IvParameterSpec") >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r8 = (javax.crypto.spec.IvParameterSpec) $r7
org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r8 = (javax.crypto.spec.IvParameterSpec) $r7 >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r9 = virtualinvoke $r8.<javax.crypto.spec.IvParameterSpec: byte[] getIV()>()
org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r9 = virtualinvoke $r8.<javax.crypto.spec.IvParameterSpec: byte[] getIV()>() >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r10 = r0.<org.apache.ambari.server.security.encryption.AESEncryptor: javax.crypto.Cipher ecipher>
org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r10 = r0.<org.apache.ambari.server.security.encryption.AESEncryptor: javax.crypto.Cipher ecipher> >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r11 = virtualinvoke $r10.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r1)
org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r11 = virtualinvoke $r10.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r1) >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : specialinvoke $r2.<org.apache.ambari.server.security.encryption.EncryptionResult: void <init>(byte[],byte[],byte[])>($r4, $r9, $r11)
org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : specialinvoke $r2.<org.apache.ambari.server.security.encryption.EncryptionResult: void <init>(byte[],byte[],byte[])>($r4, $r9, $r11) >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : r3 = $r2
org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : r3 = $r2 >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : return r3
org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : return r3 >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r4 = new java.lang.String
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r4 = new java.lang.String >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r6 = r0.<org.apache.ambari.server.security.encryption.AESEncryptor: char[] passPhrase>
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r6 = r0.<org.apache.ambari.server.security.encryption.AESEncryptor: char[] passPhrase> >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : specialinvoke $r4.<java.lang.String: void <init>(char[])>($r6)
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : specialinvoke $r4.<java.lang.String: void <init>(char[])>($r6) >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : r5 = virtualinvoke r0.<org.apache.ambari.server.security.encryption.AESEncryptor: javax.crypto.SecretKey getKeyFromPassword(java.lang.String,byte[])>($r4, r1)
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : r5 = virtualinvoke r0.<org.apache.ambari.server.security.encryption.AESEncryptor: javax.crypto.SecretKey getKeyFromPassword(java.lang.String,byte[])>($r4, r1) >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r7 = new javax.crypto.spec.SecretKeySpec
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r7 = new javax.crypto.spec.SecretKeySpec >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r8 = interfaceinvoke r5.<javax.crypto.SecretKey: byte[] getEncoded()>()
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r8 = interfaceinvoke r5.<javax.crypto.SecretKey: byte[] getEncoded()>() >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r8, "AES")
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r8, "AES") >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : r0.<org.apache.ambari.server.security.encryption.AESEncryptor: javax.crypto.SecretKey secret> = $r7
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : r0.<org.apache.ambari.server.security.encryption.AESEncryptor: javax.crypto.SecretKey secret> = $r7 >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r9 = r0.<org.apache.ambari.server.security.encryption.AESEncryptor: javax.crypto.Cipher dcipher>
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r9 = r0.<org.apache.ambari.server.security.encryption.AESEncryptor: javax.crypto.Cipher dcipher> >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r10 = r0.<org.apache.ambari.server.security.encryption.AESEncryptor: javax.crypto.SecretKey secret>
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r10 = r0.<org.apache.ambari.server.security.encryption.AESEncryptor: javax.crypto.SecretKey secret> >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r11 = new javax.crypto.spec.IvParameterSpec
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r11 = new javax.crypto.spec.IvParameterSpec >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : specialinvoke $r11.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>(r2)
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : specialinvoke $r11.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>(r2) >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : virtualinvoke $r9.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(2, $r10, $r11)
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : virtualinvoke $r9.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(2, $r10, $r11) >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r12 = r0.<org.apache.ambari.server.security.encryption.AESEncryptor: javax.crypto.Cipher dcipher>
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r12 = r0.<org.apache.ambari.server.security.encryption.AESEncryptor: javax.crypto.Cipher dcipher> >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r13 = virtualinvoke $r12.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r3)
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r13 = virtualinvoke $r12.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r3) >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : return $r13
