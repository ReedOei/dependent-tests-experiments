org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : $r10 = r0.<org.apache.ambari.server.security.encryption.CredentialStoreTest: org.junit.rules.TemporaryFolder tmpFolder> >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : r3 = virtualinvoke $r10.<org.junit.rules.TemporaryFolder: java.io.File getRoot()>()
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : r3 = virtualinvoke $r10.<org.junit.rules.TemporaryFolder: java.io.File getRoot()>() >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : r4 = "ThisIsSomeSecretPassPhrase1234"
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : r4 = "ThisIsSomeSecretPassPhrase1234" >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : $r11 = new java.io.File
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : $r11 = new java.io.File >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : specialinvoke $r11.<java.io.File: void <init>(java.io.File,java.lang.String)>(r3, "master")
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : specialinvoke $r11.<java.io.File: void <init>(java.io.File,java.lang.String)>(r3, "master") >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : r5 = $r11
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : r5 = $r11 >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : r6 = interfaceinvoke r2.<org.apache.ambari.server.security.encryption.CredentialStoreTest$MasterKeyServiceFactory: org.apache.ambari.server.security.encryption.MasterKeyService createPersisted(java.io.File,java.lang.String)>(r5, r4)
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : r6 = interfaceinvoke r2.<org.apache.ambari.server.security.encryption.CredentialStoreTest$MasterKeyServiceFactory: org.apache.ambari.server.security.encryption.MasterKeyService createPersisted(java.io.File,java.lang.String)>(r5, r4) >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest$DefaultMasterKeyServiceFactory.createPersisted : staticinvoke <org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: boolean initializeMasterKeyFile(java.io.File,java.lang.String)>(r1, r2)
org.apache.ambari.server.security.encryption.CredentialStoreTest$DefaultMasterKeyServiceFactory.createPersisted : staticinvoke <org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: boolean initializeMasterKeyFile(java.io.File,java.lang.String)>(r1, r2) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r2 = <org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: org.apache.commons.logging.Log LOG>
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r2 = <org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: org.apache.commons.logging.Log LOG> >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r8 = newarray (java.lang.Object)[1]
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r8 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r9 = virtualinvoke r0.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r9 = virtualinvoke r0.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r8[0] = $r9
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r8[0] = $r9 >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Persisting master key into %s", $r8)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Persisting master key into %s", $r8) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : interfaceinvoke $r2.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r10)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : interfaceinvoke $r2.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r10) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : r3 = null
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : r3 = null >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : if r1 == null
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : if r1 == null >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r11 = <org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: org.apache.ambari.server.security.encryption.AESEncryptor aes>
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r11 = <org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: org.apache.ambari.server.security.encryption.AESEncryptor aes> >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : r3 = virtualinvoke $r11.<org.apache.ambari.server.security.encryption.AESEncryptor: org.apache.ambari.server.security.encryption.EncryptionResult encrypt(java.lang.String)>(r1)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : r3 = virtualinvoke $r11.<org.apache.ambari.server.security.encryption.AESEncryptor: org.apache.ambari.server.security.encryption.EncryptionResult encrypt(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : r2 = virtualinvoke r1.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF8")
org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : r2 = virtualinvoke r1.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF8") >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : r3 = virtualinvoke r0.<org.apache.ambari.server.security.encryption.AESEncryptor: org.apache.ambari.server.security.encryption.EncryptionResult encrypt(byte[])>(r2)
org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : r3 = virtualinvoke r0.<org.apache.ambari.server.security.encryption.AESEncryptor: org.apache.ambari.server.security.encryption.EncryptionResult encrypt(byte[])>(r2) >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r2 = new org.apache.ambari.server.security.encryption.EncryptionResult
org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r2 = new org.apache.ambari.server.security.encryption.EncryptionResult >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r4 = r0.<org.apache.ambari.server.security.encryption.AESEncryptor: byte[] salt>
org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r4 = r0.<org.apache.ambari.server.security.encryption.AESEncryptor: byte[] salt> >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r5 = r0.<org.apache.ambari.server.security.encryption.AESEncryptor: javax.crypto.Cipher ecipher>
org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r5 = r0.<org.apache.ambari.server.security.encryption.AESEncryptor: javax.crypto.Cipher ecipher> >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r6 = virtualinvoke $r5.<javax.crypto.Cipher: java.security.AlgorithmParameters getParameters()>()
org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r6 = virtualinvoke $r5.<javax.crypto.Cipher: java.security.AlgorithmParameters getParameters()>() >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r7 = virtualinvoke $r6.<java.security.AlgorithmParameters: java.security.spec.AlgorithmParameterSpec getParameterSpec(java.lang.Class)>(class "javax/crypto/spec/IvParameterSpec")
org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r7 = virtualinvoke $r6.<java.security.AlgorithmParameters: java.security.spec.AlgorithmParameterSpec getParameterSpec(java.lang.Class)>(class "javax/crypto/spec/IvParameterSpec") >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r8 = (javax.crypto.spec.IvParameterSpec) $r7
org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r8 = (javax.crypto.spec.IvParameterSpec) $r7 >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r9 = virtualinvoke $r8.<javax.crypto.spec.IvParameterSpec: byte[] getIV()>()
org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r9 = virtualinvoke $r8.<javax.crypto.spec.IvParameterSpec: byte[] getIV()>() >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r10 = r0.<org.apache.ambari.server.security.encryption.AESEncryptor: javax.crypto.Cipher ecipher>
org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r10 = r0.<org.apache.ambari.server.security.encryption.AESEncryptor: javax.crypto.Cipher ecipher> >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r11 = virtualinvoke $r10.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r1)
org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r11 = virtualinvoke $r10.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r1) >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : specialinvoke $r2.<org.apache.ambari.server.security.encryption.EncryptionResult: void <init>(byte[],byte[],byte[])>($r4, $r9, $r11)
org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : specialinvoke $r2.<org.apache.ambari.server.security.encryption.EncryptionResult: void <init>(byte[],byte[],byte[])>($r4, $r9, $r11) >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : r3 = $r2
org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : r3 = $r2 >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : return r3
org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : return r3 >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : goto [?= $z0 = virtualinvoke r0.<java.io.File: boolean exists()>()]
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : goto [?= $z0 = virtualinvoke r0.<java.io.File: boolean exists()>()] >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $z0 = virtualinvoke r0.<java.io.File: boolean exists()>()
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $z0 = virtualinvoke r0.<java.io.File: boolean exists()>() >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : if $z0 == 0
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : if $z0 == 0 >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : if r3 == null
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : if r3 == null >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r49 = new java.util.ArrayList
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r49 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : specialinvoke $r49.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : specialinvoke $r49.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : r50 = $r49
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : r50 = $r49 >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r51 = new java.lang.StringBuilder
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r51 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : specialinvoke $r51.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : specialinvoke $r51.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#1.0# ")
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#1.0# ") >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r53 = staticinvoke <org.apache.commons.net.ntp.TimeStamp: org.apache.commons.net.ntp.TimeStamp getCurrentTime()>()
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r53 = staticinvoke <org.apache.commons.net.ntp.TimeStamp: org.apache.commons.net.ntp.TimeStamp getCurrentTime()>() >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r54 = virtualinvoke $r53.<org.apache.commons.net.ntp.TimeStamp: java.lang.String toDateString()>()
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r54 = virtualinvoke $r53.<org.apache.commons.net.ntp.TimeStamp: java.lang.String toDateString()>() >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r55 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r54)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r55 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r54) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : virtualinvoke r50.<java.util.ArrayList: boolean add(java.lang.Object)>($r56)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : virtualinvoke r50.<java.util.ArrayList: boolean add(java.lang.Object)>($r56) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r57 = new java.lang.StringBuilder
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r57 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : specialinvoke $r57.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : specialinvoke $r57.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r58 = r3.<org.apache.ambari.server.security.encryption.EncryptionResult: byte[] salt>
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r58 = r3.<org.apache.ambari.server.security.encryption.EncryptionResult: byte[] salt> >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r59 = staticinvoke <org.apache.commons.codec.binary.Base64: java.lang.String encodeBase64String(byte[])>($r58)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r59 = staticinvoke <org.apache.commons.codec.binary.Base64: java.lang.String encodeBase64String(byte[])>($r58) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r60 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r59)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r60 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r59) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("::")
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("::") >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r62 = r3.<org.apache.ambari.server.security.encryption.EncryptionResult: byte[] iv>
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r62 = r3.<org.apache.ambari.server.security.encryption.EncryptionResult: byte[] iv> >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r63 = staticinvoke <org.apache.commons.codec.binary.Base64: java.lang.String encodeBase64String(byte[])>($r62)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r63 = staticinvoke <org.apache.commons.codec.binary.Base64: java.lang.String encodeBase64String(byte[])>($r62) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r64 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r63)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r64 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r63) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("::")
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("::") >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r66 = r3.<org.apache.ambari.server.security.encryption.EncryptionResult: byte[] cipher>
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r66 = r3.<org.apache.ambari.server.security.encryption.EncryptionResult: byte[] cipher> >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r67 = staticinvoke <org.apache.commons.codec.binary.Base64: java.lang.String encodeBase64String(byte[])>($r66)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r67 = staticinvoke <org.apache.commons.codec.binary.Base64: java.lang.String encodeBase64String(byte[])>($r66) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r68 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r67)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r68 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r67) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r70 = virtualinvoke $r69.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF8")
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r70 = virtualinvoke $r69.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF8") >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : r71 = staticinvoke <org.apache.commons.codec.binary.Base64: java.lang.String encodeBase64String(byte[])>($r70)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : r71 = staticinvoke <org.apache.commons.codec.binary.Base64: java.lang.String encodeBase64String(byte[])>($r70) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : virtualinvoke r50.<java.util.ArrayList: boolean add(java.lang.Object)>(r71)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : virtualinvoke r50.<java.util.ArrayList: boolean add(java.lang.Object)>(r71) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : staticinvoke <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection)>(r0, "UTF8", r50)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : staticinvoke <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection)>(r0, "UTF8", r50) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : staticinvoke <org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: void protectAccess(java.io.File)>(r0)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : staticinvoke <org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: void protectAccess(java.io.File)>(r0) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : $z0 = virtualinvoke r0.<java.io.File: boolean exists()>()
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : $z0 = virtualinvoke r0.<java.io.File: boolean exists()>() >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : if $z0 == 0
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : if $z0 == 0 >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : $z1 = virtualinvoke r0.<java.io.File: boolean setReadable(boolean,boolean)>(0, 0)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : $z1 = virtualinvoke r0.<java.io.File: boolean setReadable(boolean,boolean)>(0, 0) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : if $z1 == 0
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : if $z1 == 0 >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : $z2 = virtualinvoke r0.<java.io.File: boolean setReadable(boolean,boolean)>(1, 1)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : $z2 = virtualinvoke r0.<java.io.File: boolean setReadable(boolean,boolean)>(1, 1) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : if $z2 != 0
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : if $z2 != 0 >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : $z3 = virtualinvoke r0.<java.io.File: boolean setWritable(boolean,boolean)>(0, 0)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : $z3 = virtualinvoke r0.<java.io.File: boolean setWritable(boolean,boolean)>(0, 0) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : if $z3 == 0
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : if $z3 == 0 >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : $z4 = virtualinvoke r0.<java.io.File: boolean setWritable(boolean,boolean)>(1, 1)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : $z4 = virtualinvoke r0.<java.io.File: boolean setWritable(boolean,boolean)>(1, 1) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : if $z4 != 0
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : if $z4 != 0 >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : $z5 = virtualinvoke r0.<java.io.File: boolean isDirectory()>()
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : $z5 = virtualinvoke r0.<java.io.File: boolean isDirectory()>() >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : if $z5 == 0
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : if $z5 == 0 >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : $z8 = virtualinvoke r0.<java.io.File: boolean setExecutable(boolean,boolean)>(0, 0)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : $z8 = virtualinvoke r0.<java.io.File: boolean setExecutable(boolean,boolean)>(0, 0) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : if $z8 != 0
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : if $z8 != 0 >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : goto [?= return 1]
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : goto [?= return 1] >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : return 1
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : return 1 >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest$DefaultMasterKeyServiceFactory.createPersisted : $r3 = new org.apache.ambari.server.security.encryption.MasterKeyServiceImpl
org.apache.ambari.server.security.encryption.CredentialStoreTest$DefaultMasterKeyServiceFactory.createPersisted : $r3 = new org.apache.ambari.server.security.encryption.MasterKeyServiceImpl >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest$DefaultMasterKeyServiceFactory.createPersisted : specialinvoke $r3.<org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: void <init>(java.io.File)>(r1)
org.apache.ambari.server.security.encryption.CredentialStoreTest$DefaultMasterKeyServiceFactory.createPersisted : specialinvoke $r3.<org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: void <init>(java.io.File)>(r1) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : r1 = null
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : r1 = null >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : $r6 = new java.io.FileReader
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : $r6 = new java.io.FileReader >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : specialinvoke $r6.<java.io.FileReader: void <init>(java.io.File)>(r0)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : specialinvoke $r6.<java.io.FileReader: void <init>(java.io.File)>(r0) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : r1 = $r6
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : r1 = $r6 >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : $r7 = "#1.0# "
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : $r7 = "#1.0# " >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : $i0 = virtualinvoke $r7.<java.lang.String: int length()>()
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : $i0 = virtualinvoke $r7.<java.lang.String: int length()>() >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : r2 = newarray (char)[$i0]
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : r2 = newarray (char)[$i0] >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : $i1 = virtualinvoke r1.<java.io.FileReader: int read(char[])>(r2)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : $i1 = virtualinvoke r1.<java.io.FileReader: int read(char[])>(r2) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : $i2 = lengthof r2
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : $i2 = lengthof r2 >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : if $i1 != $i2
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : if $i1 != $i2 >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : $r8 = "#1.0# "
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : $r8 = "#1.0# " >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : $r9 = virtualinvoke $r8.<java.lang.String: char[] toCharArray()>()
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : $r9 = virtualinvoke $r8.<java.lang.String: char[] toCharArray()>() >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : $z1 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>(r2, $r9)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : $z1 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>(r2, $r9) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : if $z1 == 0
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : if $z1 == 0 >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : $z2 = 1
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : $z2 = 1 >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : goto [?= z0 = $z2]
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : goto [?= z0 = $z2] >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : z0 = $z2
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : z0 = $z2 >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : if r1 == null
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : if r1 == null >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : virtualinvoke r1.<java.io.FileReader: void close()>()
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : virtualinvoke r1.<java.io.FileReader: void close()>() >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : goto [?= return z0]
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : goto [?= return z0] >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : return z0
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : return z0 >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : r2 = staticinvoke <org.apache.commons.io.FileUtils: java.util.List readLines(java.io.File,java.lang.String)>(r1, "UTF8")
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : r2 = staticinvoke <org.apache.commons.io.FileUtils: java.util.List readLines(java.io.File,java.lang.String)>(r1, "UTF8") >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r6 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(0)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r6 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(0) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : r3 = (java.lang.String) $r6
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : r3 = (java.lang.String) $r6 >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r7 = <org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: org.apache.commons.logging.Log LOG>
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r7 = <org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: org.apache.commons.logging.Log LOG> >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r8 = new java.lang.StringBuilder
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r8 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : specialinvoke $r8.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Loading from persistent master: ")
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Loading from persistent master: ") >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : interfaceinvoke $r7.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r11)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : interfaceinvoke $r7.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r11) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r12 = new java.lang.String
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r12 = new java.lang.String >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r13 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(1)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r13 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(1) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r14 = (java.lang.String) $r13
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r14 = (java.lang.String) $r13 >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r15 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(java.lang.String)>($r14)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r15 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(java.lang.String)>($r14) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : specialinvoke $r12.<java.lang.String: void <init>(byte[])>($r15)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : specialinvoke $r12.<java.lang.String: void <init>(byte[])>($r15) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : r4 = $r12
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : r4 = $r12 >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : r5 = virtualinvoke r4.<java.lang.String: java.lang.String[] split(java.lang.String)>("::")
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : r5 = virtualinvoke r4.<java.lang.String: java.lang.String[] split(java.lang.String)>("::") >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r16 = new java.lang.String
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r16 = new java.lang.String >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r17 = <org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: org.apache.ambari.server.security.encryption.AESEncryptor aes>
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r17 = <org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: org.apache.ambari.server.security.encryption.AESEncryptor aes> >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r18 = r5[0]
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r18 = r5[0] >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r19 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(java.lang.String)>($r18)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r19 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(java.lang.String)>($r18) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r20 = r5[1]
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r20 = r5[1] >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r21 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(java.lang.String)>($r20)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r21 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(java.lang.String)>($r20) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r22 = r5[2]
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r22 = r5[2] >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r23 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(java.lang.String)>($r22)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r23 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(java.lang.String)>($r22) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r24 = virtualinvoke $r17.<org.apache.ambari.server.security.encryption.AESEncryptor: byte[] decrypt(byte[],byte[],byte[])>($r19, $r21, $r23)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r24 = virtualinvoke $r17.<org.apache.ambari.server.security.encryption.AESEncryptor: byte[] decrypt(byte[],byte[],byte[])>($r19, $r21, $r23) >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r4 = new java.lang.String
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r4 = new java.lang.String >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r6 = r0.<org.apache.ambari.server.security.encryption.AESEncryptor: char[] passPhrase>
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r6 = r0.<org.apache.ambari.server.security.encryption.AESEncryptor: char[] passPhrase> >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : specialinvoke $r4.<java.lang.String: void <init>(char[])>($r6)
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : specialinvoke $r4.<java.lang.String: void <init>(char[])>($r6) >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : r5 = virtualinvoke r0.<org.apache.ambari.server.security.encryption.AESEncryptor: javax.crypto.SecretKey getKeyFromPassword(java.lang.String,byte[])>($r4, r1)
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : r5 = virtualinvoke r0.<org.apache.ambari.server.security.encryption.AESEncryptor: javax.crypto.SecretKey getKeyFromPassword(java.lang.String,byte[])>($r4, r1) >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : r3 = null
org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : r3 = null >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : r4 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>("PBKDF2WithHmacSHA1")
org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : r4 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>("PBKDF2WithHmacSHA1") >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : $r6 = new javax.crypto.spec.PBEKeySpec
org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : $r6 = new javax.crypto.spec.PBEKeySpec >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : $r7 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>()
org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : $r7 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>() >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : specialinvoke $r6.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r7, r2, 65536, 128)
org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : specialinvoke $r6.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r7, r2, 65536, 128) >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : r5 = $r6
org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : r5 = $r6 >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : r3 = virtualinvoke r4.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r5)
org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : r3 = virtualinvoke r4.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>(r5) >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : goto [?= return r3]
org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : goto [?= return r3] >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : return r3
org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : return r3 >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r7 = new javax.crypto.spec.SecretKeySpec
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r7 = new javax.crypto.spec.SecretKeySpec >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r8 = interfaceinvoke r5.<javax.crypto.SecretKey: byte[] getEncoded()>()
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r8 = interfaceinvoke r5.<javax.crypto.SecretKey: byte[] getEncoded()>() >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r8, "AES")
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r8, "AES") >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : r0.<org.apache.ambari.server.security.encryption.AESEncryptor: javax.crypto.SecretKey secret> = $r7
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : r0.<org.apache.ambari.server.security.encryption.AESEncryptor: javax.crypto.SecretKey secret> = $r7 >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r9 = r0.<org.apache.ambari.server.security.encryption.AESEncryptor: javax.crypto.Cipher dcipher>
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r9 = r0.<org.apache.ambari.server.security.encryption.AESEncryptor: javax.crypto.Cipher dcipher> >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r10 = r0.<org.apache.ambari.server.security.encryption.AESEncryptor: javax.crypto.SecretKey secret>
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r10 = r0.<org.apache.ambari.server.security.encryption.AESEncryptor: javax.crypto.SecretKey secret> >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r11 = new javax.crypto.spec.IvParameterSpec
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r11 = new javax.crypto.spec.IvParameterSpec >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : specialinvoke $r11.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>(r2)
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : specialinvoke $r11.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>(r2) >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : virtualinvoke $r9.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(2, $r10, $r11)
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : virtualinvoke $r9.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(2, $r10, $r11) >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r12 = r0.<org.apache.ambari.server.security.encryption.AESEncryptor: javax.crypto.Cipher dcipher>
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r12 = r0.<org.apache.ambari.server.security.encryption.AESEncryptor: javax.crypto.Cipher dcipher> >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r13 = virtualinvoke $r12.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r3)
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r13 = virtualinvoke $r12.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r3) >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : return $r13
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : return $r13 >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : specialinvoke $r16.<java.lang.String: void <init>(byte[],java.lang.String)>($r24, "UTF8")
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : specialinvoke $r16.<java.lang.String: void <init>(byte[],java.lang.String)>($r24, "UTF8") >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r25 = virtualinvoke $r16.<java.lang.String: char[] toCharArray()>()
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r25 = virtualinvoke $r16.<java.lang.String: char[] toCharArray()>() >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : r0.<org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: char[] master> = $r25
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : r0.<org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: char[] master> = $r25 >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : goto [?= return]
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : goto [?= return] >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest$DefaultMasterKeyServiceFactory.createPersisted : return $r3
org.apache.ambari.server.security.encryption.CredentialStoreTest$DefaultMasterKeyServiceFactory.createPersisted : return $r3 >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : r7 = interfaceinvoke r1.<org.apache.ambari.server.security.encryption.CredentialStoreTest$CredentialStoreServiceFactory: org.apache.ambari.server.security.encryption.CredentialStore create(java.io.File,org.apache.ambari.server.security.encryption.MasterKeyService)>(r3, r6)
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : r7 = interfaceinvoke r1.<org.apache.ambari.server.security.encryption.CredentialStoreTest$CredentialStoreServiceFactory: org.apache.ambari.server.security.encryption.CredentialStore create(java.io.File,org.apache.ambari.server.security.encryption.MasterKeyService)>(r3, r6) >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest$InMemoryCredentialStoreServiceFactory.create : $r3 = new org.apache.ambari.server.security.encryption.InMemoryCredentialStore
org.apache.ambari.server.security.encryption.CredentialStoreTest$InMemoryCredentialStoreServiceFactory.create : $r3 = new org.apache.ambari.server.security.encryption.InMemoryCredentialStore >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest$InMemoryCredentialStoreServiceFactory.create : $r4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>
org.apache.ambari.server.security.encryption.CredentialStoreTest$InMemoryCredentialStoreServiceFactory.create : $r4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS> >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest$InMemoryCredentialStoreServiceFactory.create : specialinvoke $r3.<org.apache.ambari.server.security.encryption.InMemoryCredentialStore: void <init>(long,java.util.concurrent.TimeUnit,boolean)>(500L, $r4, 1)
org.apache.ambari.server.security.encryption.CredentialStoreTest$InMemoryCredentialStoreServiceFactory.create : specialinvoke $r3.<org.apache.ambari.server.security.encryption.InMemoryCredentialStore: void <init>(long,java.util.concurrent.TimeUnit,boolean)>(500L, $r4, 1) >>>>>>>> org.apache.ambari.server.security.encryption.InMemoryCredentialStore$1.newThread : $r2 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ThreadFactory defaultThreadFactory()>()
org.apache.ambari.server.security.encryption.InMemoryCredentialStore$1.newThread : $r2 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ThreadFactory defaultThreadFactory()>() >>>>>>>> org.apache.ambari.server.security.encryption.InMemoryCredentialStore$1.newThread : r3 = interfaceinvoke $r2.<java.util.concurrent.ThreadFactory: java.lang.Thread newThread(java.lang.Runnable)>(r1)
org.apache.ambari.server.security.encryption.InMemoryCredentialStore$1.newThread : r3 = interfaceinvoke $r2.<java.util.concurrent.ThreadFactory: java.lang.Thread newThread(java.lang.Runnable)>(r1) >>>>>>>> org.apache.ambari.server.security.encryption.InMemoryCredentialStore$1.newThread : if r3 == null
org.apache.ambari.server.security.encryption.InMemoryCredentialStore$1.newThread : if r3 == null >>>>>>>> org.apache.ambari.server.security.encryption.InMemoryCredentialStore$1.newThread : $r5 = newarray (java.lang.Object)[1]
org.apache.ambari.server.security.encryption.InMemoryCredentialStore$1.newThread : $r5 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.ambari.server.security.encryption.InMemoryCredentialStore$1.newThread : $r4 = class "org/apache/ambari/server/security/encryption/InMemoryCredentialStore"
org.apache.ambari.server.security.encryption.InMemoryCredentialStore$1.newThread : $r4 = class "org/apache/ambari/server/security/encryption/InMemoryCredentialStore" >>>>>>>> org.apache.ambari.server.security.encryption.InMemoryCredentialStore$1.newThread : $r6 = virtualinvoke $r4.<java.lang.Class: java.lang.String getSimpleName()>()
org.apache.ambari.server.security.encryption.InMemoryCredentialStore$1.newThread : $r6 = virtualinvoke $r4.<java.lang.Class: java.lang.String getSimpleName()>() >>>>>>>> org.apache.ambari.server.security.encryption.InMemoryCredentialStore$1.newThread : $r5[0] = $r6
org.apache.ambari.server.security.encryption.InMemoryCredentialStore$1.newThread : $r5[0] = $r6 >>>>>>>> org.apache.ambari.server.security.encryption.InMemoryCredentialStore$1.newThread : $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s active cleanup timer", $r5)
org.apache.ambari.server.security.encryption.InMemoryCredentialStore$1.newThread : $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s active cleanup timer", $r5) >>>>>>>> org.apache.ambari.server.security.encryption.InMemoryCredentialStore$1.newThread : virtualinvoke r3.<java.lang.Thread: void setName(java.lang.String)>($r7)
org.apache.ambari.server.security.encryption.InMemoryCredentialStore$1.newThread : virtualinvoke r3.<java.lang.Thread: void setName(java.lang.String)>($r7) >>>>>>>> org.apache.ambari.server.security.encryption.InMemoryCredentialStore$1.newThread : virtualinvoke r3.<java.lang.Thread: void setDaemon(boolean)>(1)
org.apache.ambari.server.security.encryption.InMemoryCredentialStore$1.newThread : virtualinvoke r3.<java.lang.Thread: void setDaemon(boolean)>(1) >>>>>>>> org.apache.ambari.server.security.encryption.InMemoryCredentialStore$1.newThread : return r3
org.apache.ambari.server.security.encryption.InMemoryCredentialStore$1.newThread : return r3 >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest$InMemoryCredentialStoreServiceFactory.create : r5 = $r3
org.apache.ambari.server.security.encryption.CredentialStoreTest$InMemoryCredentialStoreServiceFactory.create : r5 = $r3 >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest$InMemoryCredentialStoreServiceFactory.create : interfaceinvoke r5.<org.apache.ambari.server.security.encryption.CredentialStore: void setMasterKeyService(org.apache.ambari.server.security.encryption.MasterKeyService)>(r2)
org.apache.ambari.server.security.encryption.CredentialStoreTest$InMemoryCredentialStoreServiceFactory.create : interfaceinvoke r5.<org.apache.ambari.server.security.encryption.CredentialStore: void setMasterKeyService(org.apache.ambari.server.security.encryption.MasterKeyService)>(r2) >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.setMasterKeyService : r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: org.apache.ambari.server.security.encryption.MasterKeyService masterKeyService> = r1
org.apache.ambari.server.security.encryption.AbstractCredentialStore.setMasterKeyService : r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: org.apache.ambari.server.security.encryption.MasterKeyService masterKeyService> = r1 >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest$InMemoryCredentialStoreServiceFactory.create : return r5
org.apache.ambari.server.security.encryption.CredentialStoreTest$InMemoryCredentialStoreServiceFactory.create : return r5 >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : r8 = "mypassword"
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : r8 = "mypassword" >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : $r12 = new org.apache.ambari.server.security.credential.GenericKeyCredential
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : $r12 = new org.apache.ambari.server.security.credential.GenericKeyCredential >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : $r13 = virtualinvoke r8.<java.lang.String: char[] toCharArray()>()
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : $r13 = virtualinvoke r8.<java.lang.String: char[] toCharArray()>() >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : specialinvoke $r12.<org.apache.ambari.server.security.credential.GenericKeyCredential: void <init>(char[])>($r13)
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : specialinvoke $r12.<org.apache.ambari.server.security.credential.GenericKeyCredential: void <init>(char[])>($r13) >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : interfaceinvoke r7.<org.apache.ambari.server.security.encryption.CredentialStore: void addCredential(java.lang.String,org.apache.ambari.server.security.credential.Credential)>("myalias", $r12)
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : interfaceinvoke r7.<org.apache.ambari.server.security.encryption.CredentialStore: void addCredential(java.lang.String,org.apache.ambari.server.security.credential.Credential)>("myalias", $r12) >>>>>>>> org.apache.ambari.server.security.encryption.InMemoryCredentialStore.addCredential : if r1 == null
org.apache.ambari.server.security.encryption.InMemoryCredentialStore.addCredential : if r1 == null >>>>>>>> org.apache.ambari.server.security.encryption.InMemoryCredentialStore.addCredential : $z0 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>()
org.apache.ambari.server.security.encryption.InMemoryCredentialStore.addCredential : $z0 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.security.encryption.InMemoryCredentialStore.addCredential : if $z0 == 0
org.apache.ambari.server.security.encryption.InMemoryCredentialStore.addCredential : if $z0 == 0 >>>>>>>> org.apache.ambari.server.security.encryption.InMemoryCredentialStore.addCredential : r3 = virtualinvoke r0.<org.apache.ambari.server.security.encryption.InMemoryCredentialStore: java.util.concurrent.locks.Lock getLock()>()
org.apache.ambari.server.security.encryption.InMemoryCredentialStore.addCredential : r3 = virtualinvoke r0.<org.apache.ambari.server.security.encryption.InMemoryCredentialStore: java.util.concurrent.locks.Lock getLock()>() >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.getLock : $r1 = r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: java.util.concurrent.locks.Lock lock>
org.apache.ambari.server.security.encryption.AbstractCredentialStore.getLock : $r1 = r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: java.util.concurrent.locks.Lock lock> >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.getLock : return $r1
org.apache.ambari.server.security.encryption.AbstractCredentialStore.getLock : return $r1 >>>>>>>> org.apache.ambari.server.security.encryption.InMemoryCredentialStore.addCredential : interfaceinvoke r3.<java.util.concurrent.locks.Lock: void lock()>()
org.apache.ambari.server.security.encryption.InMemoryCredentialStore.addCredential : interfaceinvoke r3.<java.util.concurrent.locks.Lock: void lock()>() >>>>>>>> org.apache.ambari.server.security.encryption.InMemoryCredentialStore.addCredential : r4 = virtualinvoke r0.<org.apache.ambari.server.security.encryption.InMemoryCredentialStore: java.security.KeyStore loadKeyStore(java.io.InputStream,java.lang.String)>(null, "JCEKS")
org.apache.ambari.server.security.encryption.InMemoryCredentialStore.addCredential : r4 = virtualinvoke r0.<org.apache.ambari.server.security.encryption.InMemoryCredentialStore: java.security.KeyStore loadKeyStore(java.io.InputStream,java.lang.String)>(null, "JCEKS") >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.loadKeyStore : $r5 = r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: org.apache.ambari.server.security.encryption.MasterKeyService masterKeyService>
org.apache.ambari.server.security.encryption.AbstractCredentialStore.loadKeyStore : $r5 = r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: org.apache.ambari.server.security.encryption.MasterKeyService masterKeyService> >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.loadKeyStore : if $r5 != null
org.apache.ambari.server.security.encryption.AbstractCredentialStore.loadKeyStore : if $r5 != null >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.loadKeyStore : r3 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(r2)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.loadKeyStore : r3 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(r2) >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.loadKeyStore : goto [?= $r11 = r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: org.apache.ambari.server.security.encryption.MasterKeyService masterKeyService>]
org.apache.ambari.server.security.encryption.AbstractCredentialStore.loadKeyStore : goto [?= $r11 = r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: org.apache.ambari.server.security.encryption.MasterKeyService masterKeyService>] >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.loadKeyStore : $r11 = r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: org.apache.ambari.server.security.encryption.MasterKeyService masterKeyService>
org.apache.ambari.server.security.encryption.AbstractCredentialStore.loadKeyStore : $r11 = r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: org.apache.ambari.server.security.encryption.MasterKeyService masterKeyService> >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.loadKeyStore : $r12 = interfaceinvoke $r11.<org.apache.ambari.server.security.encryption.MasterKeyService: char[] getMasterSecret()>()
org.apache.ambari.server.security.encryption.AbstractCredentialStore.loadKeyStore : $r12 = interfaceinvoke $r11.<org.apache.ambari.server.security.encryption.MasterKeyService: char[] getMasterSecret()>() >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.getMasterSecret : $r1 = r0.<org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: char[] master>
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.getMasterSecret : $r1 = r0.<org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: char[] master> >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.getMasterSecret : return $r1
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.getMasterSecret : return $r1 >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.loadKeyStore : virtualinvoke r3.<java.security.KeyStore: void load(java.io.InputStream,char[])>(r1, $r12)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.loadKeyStore : virtualinvoke r3.<java.security.KeyStore: void load(java.io.InputStream,char[])>(r1, $r12) >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.loadKeyStore : goto [?= return r3]
org.apache.ambari.server.security.encryption.AbstractCredentialStore.loadKeyStore : goto [?= return r3] >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.loadKeyStore : return r3
org.apache.ambari.server.security.encryption.AbstractCredentialStore.loadKeyStore : return r3 >>>>>>>> org.apache.ambari.server.security.encryption.InMemoryCredentialStore.addCredential : virtualinvoke r0.<org.apache.ambari.server.security.encryption.InMemoryCredentialStore: void addCredential(java.security.KeyStore,java.lang.String,org.apache.ambari.server.security.credential.Credential)>(r4, r1, r2)
org.apache.ambari.server.security.encryption.InMemoryCredentialStore.addCredential : virtualinvoke r0.<org.apache.ambari.server.security.encryption.InMemoryCredentialStore: void addCredential(java.security.KeyStore,java.lang.String,org.apache.ambari.server.security.credential.Credential)>(r4, r1, r2) >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : if r1 == null
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : if r1 == null >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : if r3 != null
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : if r3 != null >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : $r6 = interfaceinvoke r3.<org.apache.ambari.server.security.credential.Credential: char[] toValue()>()
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : $r6 = interfaceinvoke r3.<org.apache.ambari.server.security.credential.Credential: char[] toValue()>() >>>>>>>> org.apache.ambari.server.security.credential.GenericKeyCredential.toValue : $r1 = r0.<org.apache.ambari.server.security.credential.GenericKeyCredential: char[] key>
org.apache.ambari.server.security.credential.GenericKeyCredential.toValue : $r1 = r0.<org.apache.ambari.server.security.credential.GenericKeyCredential: char[] key> >>>>>>>> org.apache.ambari.server.security.credential.GenericKeyCredential.toValue : return $r1
org.apache.ambari.server.security.credential.GenericKeyCredential.toValue : return $r1 >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : r4 = $r6
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : r4 = $r6 >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : if r4 == null
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : if r4 == null >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : $i0 = lengthof r4
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : $i0 = lengthof r4 >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : if $i0 != 0
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : if $i0 != 0 >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : $r7 = new javax.crypto.spec.SecretKeySpec
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : $r7 = new javax.crypto.spec.SecretKeySpec >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : $r8 = virtualinvoke r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: byte[] toBytes(char[])>(r4)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : $r8 = virtualinvoke r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: byte[] toBytes(char[])>(r4) >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : if r1 != null
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : if r1 != null >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : r2 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(char[])>(r1)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : r2 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(char[])>(r1) >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : $r5 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8")
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : $r5 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8") >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : r3 = virtualinvoke $r5.<java.nio.charset.Charset: java.nio.ByteBuffer encode(java.nio.CharBuffer)>(r2)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : r3 = virtualinvoke $r5.<java.nio.charset.Charset: java.nio.ByteBuffer encode(java.nio.CharBuffer)>(r2) >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : $r6 = virtualinvoke r3.<java.nio.ByteBuffer: byte[] array()>()
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : $r6 = virtualinvoke r3.<java.nio.ByteBuffer: byte[] array()>() >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : $i0 = virtualinvoke r3.<java.nio.ByteBuffer: int position()>()
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : $i0 = virtualinvoke r3.<java.nio.ByteBuffer: int position()>() >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : $i1 = virtualinvoke r3.<java.nio.ByteBuffer: int limit()>()
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : $i1 = virtualinvoke r3.<java.nio.ByteBuffer: int limit()>() >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : r4 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>($r6, $i0, $i1)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : r4 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>($r6, $i0, $i1) >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : $r7 = virtualinvoke r2.<java.nio.CharBuffer: char[] array()>()
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : $r7 = virtualinvoke r2.<java.nio.CharBuffer: char[] array()>() >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : staticinvoke <java.util.Arrays: void fill(char[],char)>($r7, 0)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : staticinvoke <java.util.Arrays: void fill(char[],char)>($r7, 0) >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : $r8 = virtualinvoke r3.<java.nio.ByteBuffer: byte[] array()>()
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : $r8 = virtualinvoke r3.<java.nio.ByteBuffer: byte[] array()>() >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r8, 0)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r8, 0) >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : return r4
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : return r4 >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r8, "AES")
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r8, "AES") >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : r5 = $r7
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : r5 = $r7 >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : $r9 = r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: org.apache.ambari.server.security.encryption.MasterKeyService masterKeyService>
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : $r9 = r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: org.apache.ambari.server.security.encryption.MasterKeyService masterKeyService> >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : $r10 = interfaceinvoke $r9.<org.apache.ambari.server.security.encryption.MasterKeyService: char[] getMasterSecret()>()
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : $r10 = interfaceinvoke $r9.<org.apache.ambari.server.security.encryption.MasterKeyService: char[] getMasterSecret()>() >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : virtualinvoke r1.<java.security.KeyStore: void setKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate[])>(r2, r5, $r10, null)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : virtualinvoke r1.<java.security.KeyStore: void setKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate[])>(r2, r5, $r10, null) >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : goto [?= return]
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : goto [?= return] >>>>>>>> org.apache.ambari.server.security.encryption.InMemoryCredentialStore.addCredential : $r7 = r0.<org.apache.ambari.server.security.encryption.InMemoryCredentialStore: com.google.common.cache.Cache cache>
org.apache.ambari.server.security.encryption.InMemoryCredentialStore.addCredential : $r7 = r0.<org.apache.ambari.server.security.encryption.InMemoryCredentialStore: com.google.common.cache.Cache cache> >>>>>>>> org.apache.ambari.server.security.encryption.InMemoryCredentialStore.addCredential : interfaceinvoke $r7.<com.google.common.cache.Cache: void put(java.lang.Object,java.lang.Object)>(r1, r4)
org.apache.ambari.server.security.encryption.InMemoryCredentialStore.addCredential : interfaceinvoke $r7.<com.google.common.cache.Cache: void put(java.lang.Object,java.lang.Object)>(r1, r4) >>>>>>>> org.apache.ambari.server.security.encryption.InMemoryCredentialStore.addCredential : interfaceinvoke r3.<java.util.concurrent.locks.Lock: void unlock()>()
org.apache.ambari.server.security.encryption.InMemoryCredentialStore.addCredential : interfaceinvoke r3.<java.util.concurrent.locks.Lock: void unlock()>() >>>>>>>> org.apache.ambari.server.security.encryption.InMemoryCredentialStore.addCredential : goto [?= return]
org.apache.ambari.server.security.encryption.InMemoryCredentialStore.addCredential : goto [?= return] >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : r9 = interfaceinvoke r7.<org.apache.ambari.server.security.encryption.CredentialStore: org.apache.ambari.server.security.credential.Credential getCredential(java.lang.String)>("myalias")
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : r9 = interfaceinvoke r7.<org.apache.ambari.server.security.encryption.CredentialStore: org.apache.ambari.server.security.credential.Credential getCredential(java.lang.String)>("myalias") >>>>>>>> org.apache.ambari.server.security.encryption.InMemoryCredentialStore.getCredential : r2 = null
org.apache.ambari.server.security.encryption.InMemoryCredentialStore.getCredential : r2 = null >>>>>>>> org.apache.ambari.server.security.encryption.InMemoryCredentialStore.getCredential : if r1 == null
org.apache.ambari.server.security.encryption.InMemoryCredentialStore.getCredential : if r1 == null >>>>>>>> org.apache.ambari.server.security.encryption.InMemoryCredentialStore.getCredential : $z0 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>()
org.apache.ambari.server.security.encryption.InMemoryCredentialStore.getCredential : $z0 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.security.encryption.InMemoryCredentialStore.getCredential : if $z0 != 0
org.apache.ambari.server.security.encryption.InMemoryCredentialStore.getCredential : if $z0 != 0 >>>>>>>> org.apache.ambari.server.security.encryption.InMemoryCredentialStore.getCredential : r3 = virtualinvoke r0.<org.apache.ambari.server.security.encryption.InMemoryCredentialStore: java.util.concurrent.locks.Lock getLock()>()
org.apache.ambari.server.security.encryption.InMemoryCredentialStore.getCredential : r3 = virtualinvoke r0.<org.apache.ambari.server.security.encryption.InMemoryCredentialStore: java.util.concurrent.locks.Lock getLock()>() >>>>>>>> org.apache.ambari.server.security.encryption.InMemoryCredentialStore.getCredential : interfaceinvoke r3.<java.util.concurrent.locks.Lock: void lock()>()
org.apache.ambari.server.security.encryption.InMemoryCredentialStore.getCredential : interfaceinvoke r3.<java.util.concurrent.locks.Lock: void lock()>() >>>>>>>> org.apache.ambari.server.security.encryption.InMemoryCredentialStore.getCredential : $r6 = r0.<org.apache.ambari.server.security.encryption.InMemoryCredentialStore: com.google.common.cache.Cache cache>
org.apache.ambari.server.security.encryption.InMemoryCredentialStore.getCredential : $r6 = r0.<org.apache.ambari.server.security.encryption.InMemoryCredentialStore: com.google.common.cache.Cache cache> >>>>>>>> org.apache.ambari.server.security.encryption.InMemoryCredentialStore.getCredential : $r7 = interfaceinvoke $r6.<com.google.common.cache.Cache: java.lang.Object getIfPresent(java.lang.Object)>(r1)
org.apache.ambari.server.security.encryption.InMemoryCredentialStore.getCredential : $r7 = interfaceinvoke $r6.<com.google.common.cache.Cache: java.lang.Object getIfPresent(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.security.encryption.InMemoryCredentialStore.getCredential : r4 = (java.security.KeyStore) $r7
org.apache.ambari.server.security.encryption.InMemoryCredentialStore.getCredential : r4 = (java.security.KeyStore) $r7 >>>>>>>> org.apache.ambari.server.security.encryption.InMemoryCredentialStore.getCredential : if r4 == null
org.apache.ambari.server.security.encryption.InMemoryCredentialStore.getCredential : if r4 == null >>>>>>>> org.apache.ambari.server.security.encryption.InMemoryCredentialStore.getCredential : r2 = virtualinvoke r0.<org.apache.ambari.server.security.encryption.InMemoryCredentialStore: org.apache.ambari.server.security.credential.Credential getCredential(java.security.KeyStore,java.lang.String)>(r4, r1)
org.apache.ambari.server.security.encryption.InMemoryCredentialStore.getCredential : r2 = virtualinvoke r0.<org.apache.ambari.server.security.encryption.InMemoryCredentialStore: org.apache.ambari.server.security.credential.Credential getCredential(java.security.KeyStore,java.lang.String)>(r4, r1) >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : r3 = null
org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : r3 = null >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : if r1 == null
org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : if r1 == null >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : $r5 = r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: org.apache.ambari.server.security.encryption.MasterKeyService masterKeyService>
org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : $r5 = r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: org.apache.ambari.server.security.encryption.MasterKeyService masterKeyService> >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : $r6 = interfaceinvoke $r5.<org.apache.ambari.server.security.encryption.MasterKeyService: char[] getMasterSecret()>()
org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : $r6 = interfaceinvoke $r5.<org.apache.ambari.server.security.encryption.MasterKeyService: char[] getMasterSecret()>() >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : r4 = virtualinvoke r1.<java.security.KeyStore: java.security.Key getKey(java.lang.String,char[])>(r2, $r6)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : r4 = virtualinvoke r1.<java.security.KeyStore: java.security.Key getKey(java.lang.String,char[])>(r2, $r6) >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : if r4 == null
org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : if r4 == null >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : $r7 = interfaceinvoke r4.<java.security.Key: byte[] getEncoded()>()
org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : $r7 = interfaceinvoke r4.<java.security.Key: byte[] getEncoded()>() >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : r3 = virtualinvoke r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: char[] toChars(byte[])>($r7)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : r3 = virtualinvoke r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: char[] toChars(byte[])>($r7) >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : if r1 != null
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : if r1 != null >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r1)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r1) >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : $r5 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8")
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : $r5 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8") >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : r3 = virtualinvoke $r5.<java.nio.charset.Charset: java.nio.CharBuffer decode(java.nio.ByteBuffer)>(r2)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : r3 = virtualinvoke $r5.<java.nio.charset.Charset: java.nio.CharBuffer decode(java.nio.ByteBuffer)>(r2) >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : $r6 = virtualinvoke r3.<java.nio.CharBuffer: char[] array()>()
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : $r6 = virtualinvoke r3.<java.nio.CharBuffer: char[] array()>() >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : $i0 = virtualinvoke r3.<java.nio.CharBuffer: int position()>()
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : $i0 = virtualinvoke r3.<java.nio.CharBuffer: int position()>() >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : $i1 = virtualinvoke r3.<java.nio.CharBuffer: int limit()>()
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : $i1 = virtualinvoke r3.<java.nio.CharBuffer: int limit()>() >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : r4 = staticinvoke <java.util.Arrays: char[] copyOfRange(char[],int,int)>($r6, $i0, $i1)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : r4 = staticinvoke <java.util.Arrays: char[] copyOfRange(char[],int,int)>($r6, $i0, $i1) >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : $r7 = virtualinvoke r3.<java.nio.CharBuffer: char[] array()>()
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : $r7 = virtualinvoke r3.<java.nio.CharBuffer: char[] array()>() >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : staticinvoke <java.util.Arrays: void fill(char[],char)>($r7, 0)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : staticinvoke <java.util.Arrays: void fill(char[],char)>($r7, 0) >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : $r8 = virtualinvoke r2.<java.nio.ByteBuffer: byte[] array()>()
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : $r8 = virtualinvoke r2.<java.nio.ByteBuffer: byte[] array()>() >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r8, 0)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r8, 0) >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : return r4
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : return r4 >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : goto [?= $r17 = staticinvoke <org.apache.ambari.server.security.credential.CredentialFactory: org.apache.ambari.server.security.credential.Credential createCredential(char[])>(r3)]
org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : goto [?= $r17 = staticinvoke <org.apache.ambari.server.security.credential.CredentialFactory: org.apache.ambari.server.security.credential.Credential createCredential(char[])>(r3)] >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : $r17 = staticinvoke <org.apache.ambari.server.security.credential.CredentialFactory: org.apache.ambari.server.security.credential.Credential createCredential(char[])>(r3)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : $r17 = staticinvoke <org.apache.ambari.server.security.credential.CredentialFactory: org.apache.ambari.server.security.credential.Credential createCredential(char[])>(r3) >>>>>>>> org.apache.ambari.server.security.credential.CredentialFactory.createCredential : if r0 != null
org.apache.ambari.server.security.credential.CredentialFactory.createCredential : if r0 != null >>>>>>>> org.apache.ambari.server.security.credential.CredentialFactory.createCredential : r1 = staticinvoke <java.lang.String: java.lang.String valueOf(char[])>(r0)
org.apache.ambari.server.security.credential.CredentialFactory.createCredential : r1 = staticinvoke <java.lang.String: java.lang.String valueOf(char[])>(r0) >>>>>>>> org.apache.ambari.server.security.credential.CredentialFactory.createCredential : $z0 = staticinvoke <org.apache.ambari.server.security.credential.PrincipalKeyCredential: boolean isValidValue(java.lang.String)>(r1)
org.apache.ambari.server.security.credential.CredentialFactory.createCredential : $z0 = staticinvoke <org.apache.ambari.server.security.credential.PrincipalKeyCredential: boolean isValidValue(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.security.credential.PrincipalKeyCredential.isValidValue : if r0 == null
org.apache.ambari.server.security.credential.PrincipalKeyCredential.isValidValue : if r0 == null >>>>>>>> org.apache.ambari.server.security.credential.PrincipalKeyCredential.isValidValue : $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("PrincipalKeyCredential")
org.apache.ambari.server.security.credential.PrincipalKeyCredential.isValidValue : $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("PrincipalKeyCredential") >>>>>>>> org.apache.ambari.server.security.credential.PrincipalKeyCredential.isValidValue : if $z0 == 0
org.apache.ambari.server.security.credential.PrincipalKeyCredential.isValidValue : if $z0 == 0 >>>>>>>> org.apache.ambari.server.security.credential.PrincipalKeyCredential.isValidValue : $z1 = 0
org.apache.ambari.server.security.credential.PrincipalKeyCredential.isValidValue : $z1 = 0 >>>>>>>> org.apache.ambari.server.security.credential.PrincipalKeyCredential.isValidValue : return $z1
org.apache.ambari.server.security.credential.PrincipalKeyCredential.isValidValue : return $z1 >>>>>>>> org.apache.ambari.server.security.credential.CredentialFactory.createCredential : if $z0 == 0
org.apache.ambari.server.security.credential.CredentialFactory.createCredential : if $z0 == 0 >>>>>>>> org.apache.ambari.server.security.credential.CredentialFactory.createCredential : $r3 = staticinvoke <org.apache.ambari.server.security.credential.GenericKeyCredential: org.apache.ambari.server.security.credential.GenericKeyCredential fromValue(java.lang.String)>(r1)
org.apache.ambari.server.security.credential.CredentialFactory.createCredential : $r3 = staticinvoke <org.apache.ambari.server.security.credential.GenericKeyCredential: org.apache.ambari.server.security.credential.GenericKeyCredential fromValue(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.security.credential.GenericKeyCredential.fromValue : $r1 = new org.apache.ambari.server.security.credential.GenericKeyCredential
org.apache.ambari.server.security.credential.GenericKeyCredential.fromValue : $r1 = new org.apache.ambari.server.security.credential.GenericKeyCredential >>>>>>>> org.apache.ambari.server.security.credential.GenericKeyCredential.fromValue : if r0 != null
org.apache.ambari.server.security.credential.GenericKeyCredential.fromValue : if r0 != null >>>>>>>> org.apache.ambari.server.security.credential.GenericKeyCredential.fromValue : $r3 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>()
org.apache.ambari.server.security.credential.GenericKeyCredential.fromValue : $r3 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>() >>>>>>>> org.apache.ambari.server.security.credential.GenericKeyCredential.fromValue : specialinvoke $r1.<org.apache.ambari.server.security.credential.GenericKeyCredential: void <init>(char[])>($r3)
org.apache.ambari.server.security.credential.GenericKeyCredential.fromValue : specialinvoke $r1.<org.apache.ambari.server.security.credential.GenericKeyCredential: void <init>(char[])>($r3) >>>>>>>> org.apache.ambari.server.security.credential.GenericKeyCredential.fromValue : return $r1
org.apache.ambari.server.security.credential.GenericKeyCredential.fromValue : return $r1 >>>>>>>> org.apache.ambari.server.security.credential.CredentialFactory.createCredential : return $r3
org.apache.ambari.server.security.credential.CredentialFactory.createCredential : return $r3 >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : return $r17
org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : return $r17 >>>>>>>> org.apache.ambari.server.security.encryption.InMemoryCredentialStore.getCredential : interfaceinvoke r3.<java.util.concurrent.locks.Lock: void unlock()>()
org.apache.ambari.server.security.encryption.InMemoryCredentialStore.getCredential : interfaceinvoke r3.<java.util.concurrent.locks.Lock: void unlock()>() >>>>>>>> org.apache.ambari.server.security.encryption.InMemoryCredentialStore.getCredential : goto [?= return r2]
org.apache.ambari.server.security.encryption.InMemoryCredentialStore.getCredential : goto [?= return r2] >>>>>>>> org.apache.ambari.server.security.encryption.InMemoryCredentialStore.getCredential : return r2
org.apache.ambari.server.security.encryption.InMemoryCredentialStore.getCredential : return r2 >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : $r14 = new java.lang.String
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : $r14 = new java.lang.String >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : $r15 = interfaceinvoke r9.<org.apache.ambari.server.security.credential.Credential: char[] toValue()>()
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : $r15 = interfaceinvoke r9.<org.apache.ambari.server.security.credential.Credential: char[] toValue()>() >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : specialinvoke $r14.<java.lang.String: void <init>(char[])>($r15)
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : specialinvoke $r14.<java.lang.String: void <init>(char[])>($r15) >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.String)>(r8, $r14)
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.String)>(r8, $r14) >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : $z0 = virtualinvoke r5.<java.io.File: boolean exists()>()
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : $z0 = virtualinvoke r5.<java.io.File: boolean exists()>() >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : staticinvoke <junit.framework.Assert: void assertTrue(boolean)>($z0)
