org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : r1 = "src/test/resources/stacks" >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : r2 = "src/test/resources/version"
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : r2 = "src/test/resources/version" >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : r3 = "src/test/resources/"
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : r3 = "src/test/resources/" >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : r4 = "src/test/resources/"
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : r4 = "src/test/resources/" >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r8 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name")
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r8 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name") >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z0 = virtualinvoke $r8.<java.lang.String: boolean contains(java.lang.CharSequence)>("Windows")
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z0 = virtualinvoke $r8.<java.lang.String: boolean contains(java.lang.CharSequence)>("Windows") >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z0 == 0
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z0 == 0 >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r17 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r17 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r18 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SERVER_PERSISTENCE_TYPE>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r18 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SERVER_PERSISTENCE_TYPE> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r19 = virtualinvoke $r18.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r19 = virtualinvoke $r18.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getKey : $r1 = r0.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String m_key>
org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getKey : $r1 = r0.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String m_key> >>>>>>>> org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getKey : return $r1
org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getKey : return $r1 >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z1 = virtualinvoke $r17.<java.util.Properties: boolean containsKey(java.lang.Object)>($r19)
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z1 = virtualinvoke $r17.<java.util.Properties: boolean containsKey(java.lang.Object)>($r19) >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z1 != 0
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z1 != 0 >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r20 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r20 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r21 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SERVER_PERSISTENCE_TYPE>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r21 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SERVER_PERSISTENCE_TYPE> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r22 = virtualinvoke $r21.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r22 = virtualinvoke $r21.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : virtualinvoke $r20.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r22, "in-memory")
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : virtualinvoke $r20.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r22, "in-memory") >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r24 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r24 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r25 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty METADATA_DIR_PATH>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r25 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty METADATA_DIR_PATH> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r26 = virtualinvoke $r25.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r26 = virtualinvoke $r25.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z2 = virtualinvoke $r24.<java.util.Properties: boolean containsKey(java.lang.Object)>($r26)
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z2 = virtualinvoke $r24.<java.util.Properties: boolean containsKey(java.lang.Object)>($r26) >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z2 != 0
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z2 != 0 >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r27 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r27 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r28 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty METADATA_DIR_PATH>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r28 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty METADATA_DIR_PATH> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r29 = virtualinvoke $r28.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r29 = virtualinvoke $r28.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : virtualinvoke $r27.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r29, r1)
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : virtualinvoke $r27.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r29, r1) >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r31 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r31 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r32 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SERVER_VERSION_FILE>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r32 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SERVER_VERSION_FILE> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r33 = virtualinvoke $r32.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r33 = virtualinvoke $r32.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z3 = virtualinvoke $r31.<java.util.Properties: boolean containsKey(java.lang.Object)>($r33)
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z3 = virtualinvoke $r31.<java.util.Properties: boolean containsKey(java.lang.Object)>($r33) >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z3 != 0
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z3 != 0 >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r34 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r34 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r35 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SERVER_VERSION_FILE>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r35 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SERVER_VERSION_FILE> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r36 = virtualinvoke $r35.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r36 = virtualinvoke $r35.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : virtualinvoke $r34.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r36, r2)
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : virtualinvoke $r34.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r36, r2) >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r38 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r38 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r39 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty OS_VERSION>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r39 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty OS_VERSION> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r40 = virtualinvoke $r39.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r40 = virtualinvoke $r39.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z4 = virtualinvoke $r38.<java.util.Properties: boolean containsKey(java.lang.Object)>($r40)
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z4 = virtualinvoke $r38.<java.util.Properties: boolean containsKey(java.lang.Object)>($r40) >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z4 != 0
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z4 != 0 >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r41 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r41 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r42 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty OS_VERSION>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r42 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty OS_VERSION> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r43 = virtualinvoke $r42.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r43 = virtualinvoke $r42.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : virtualinvoke $r41.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r43, "centos5")
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : virtualinvoke $r41.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r43, "centos5") >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r45 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r45 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r46 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SHARED_RESOURCES_DIR>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r46 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SHARED_RESOURCES_DIR> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r47 = virtualinvoke $r46.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r47 = virtualinvoke $r46.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z5 = virtualinvoke $r45.<java.util.Properties: boolean containsKey(java.lang.Object)>($r47)
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z5 = virtualinvoke $r45.<java.util.Properties: boolean containsKey(java.lang.Object)>($r47) >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z5 != 0
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z5 != 0 >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r48 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r48 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r49 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SHARED_RESOURCES_DIR>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r49 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SHARED_RESOURCES_DIR> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r50 = virtualinvoke $r49.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r50 = virtualinvoke $r49.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : virtualinvoke $r48.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r50, r3)
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : virtualinvoke $r48.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r50, r3) >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r52 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r52 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r53 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty RESOURCES_DIR>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r53 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty RESOURCES_DIR> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r54 = virtualinvoke $r53.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r54 = virtualinvoke $r53.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z6 = virtualinvoke $r52.<java.util.Properties: boolean containsKey(java.lang.Object)>($r54)
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z6 = virtualinvoke $r52.<java.util.Properties: boolean containsKey(java.lang.Object)>($r54) >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z6 != 0
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z6 != 0 >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r55 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r55 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r56 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty RESOURCES_DIR>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r56 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty RESOURCES_DIR> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r57 = virtualinvoke $r56.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r57 = virtualinvoke $r56.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : virtualinvoke $r55.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r57, r4)
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : virtualinvoke $r55.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r57, r4) >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r59 = newarray (com.google.inject.Module)[1]
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r59 = newarray (com.google.inject.Module)[1] >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r60 = new org.apache.ambari.server.orm.InMemoryDefaultTestModule$BeanDefinitionsCachingTestControllerModule
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r60 = new org.apache.ambari.server.orm.InMemoryDefaultTestModule$BeanDefinitionsCachingTestControllerModule >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r61 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r61 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : specialinvoke $r60.<org.apache.ambari.server.orm.InMemoryDefaultTestModule$BeanDefinitionsCachingTestControllerModule: void <init>(java.util.Properties)>($r61)
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : specialinvoke $r60.<org.apache.ambari.server.orm.InMemoryDefaultTestModule$BeanDefinitionsCachingTestControllerModule: void <init>(java.util.Properties)>($r61) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : r2 = null
org.apache.ambari.server.configuration.Configuration.getProperty : r2 = null >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : $r3 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object getDefaultValue()>()
org.apache.ambari.server.configuration.Configuration.getProperty : $r3 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object getDefaultValue()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getDefaultValue : $r1 = r0.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object m_defaultValue>
org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getDefaultValue : $r1 = r0.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object m_defaultValue> >>>>>>>> org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getDefaultValue : return $r1
org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getDefaultValue : return $r1 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : if null == $r3
org.apache.ambari.server.configuration.Configuration.getProperty : if null == $r3 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : $r4 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object getDefaultValue()>()
org.apache.ambari.server.configuration.Configuration.getProperty : $r4 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object getDefaultValue()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4)
org.apache.ambari.server.configuration.Configuration.getProperty : r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : $r5 = r0.<org.apache.ambari.server.configuration.Configuration: java.util.Properties properties>
org.apache.ambari.server.configuration.Configuration.getProperty : $r5 = r0.<org.apache.ambari.server.configuration.Configuration: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : $r6 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.configuration.Configuration.getProperty : $r6 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : $r7 = virtualinvoke $r5.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>($r6, r2)
org.apache.ambari.server.configuration.Configuration.getProperty : $r7 = virtualinvoke $r5.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>($r6, r2) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : return $r7
org.apache.ambari.server.configuration.Configuration.getProperty : return $r7 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty API_USE_SSL>
org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty API_USE_SSL> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1)
org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r2)
org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r2) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : return $z0
org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : return $z0 >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r1 = new org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r1 = new org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : specialinvoke $r1.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: void <init>()>()
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : specialinvoke $r1.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: void <init>()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : r2 = $r1
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : r2 = $r1 >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r3 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty KERBEROS_AUTH_ENABLED>
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r3 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty KERBEROS_AUTH_ENABLED> >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r13 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r3)
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r13 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r3) >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r13)
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r13) >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $z0 = virtualinvoke $r14.<java.lang.Boolean: boolean booleanValue()>()
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $z0 = virtualinvoke $r14.<java.lang.Boolean: boolean booleanValue()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : virtualinvoke r2.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: void setKerberosAuthenticationEnabled(boolean)>($z0)
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : virtualinvoke r2.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: void setKerberosAuthenticationEnabled(boolean)>($z0) >>>>>>>> org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.setKerberosAuthenticationEnabled : r0.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean kerberosAuthenticationEnabled> = z0
org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.setKerberosAuthenticationEnabled : r0.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean kerberosAuthenticationEnabled> = z0 >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $z1 = virtualinvoke r2.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean isKerberosAuthenticationEnabled()>()
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $z1 = virtualinvoke r2.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean isKerberosAuthenticationEnabled()>() >>>>>>>> org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.isKerberosAuthenticationEnabled : $z0 = r0.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean kerberosAuthenticationEnabled>
org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.isKerberosAuthenticationEnabled : $z0 = r0.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean kerberosAuthenticationEnabled> >>>>>>>> org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.isKerberosAuthenticationEnabled : return $z0
org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.isKerberosAuthenticationEnabled : return $z0 >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : if $z1 != 0
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : if $z1 != 0 >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : return r2
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : return r2 >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_PATH>
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_PATH> >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r4 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1)
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r4 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1) >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : if $r4 == null
org.apache.ambari.server.configuration.Configuration.loadSSLParams : if $r4 == null >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r7 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_PASSWORD>
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r7 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_PASSWORD> >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r8 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r7)
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r8 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r7) >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : if $r8 == null
org.apache.ambari.server.configuration.Configuration.loadSSLParams : if $r8 == null >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r15 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_TYPE>
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r15 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_TYPE> >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r16 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r15)
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r16 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r15) >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : if $r16 == null
org.apache.ambari.server.configuration.Configuration.loadSSLParams : if $r16 == null >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r1 = <org.apache.ambari.server.configuration.Configuration: org.slf4j.Logger LOG>
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r1 = <org.apache.ambari.server.configuration.Configuration: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r2 = new java.lang.StringBuilder
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Hosts Mapping File ")
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Hosts Mapping File ") >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r3 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SRVR_HOSTS_MAPPING>
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r3 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SRVR_HOSTS_MAPPING> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r5 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r3)
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r5 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r3) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5)
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : interfaceinvoke $r1.<org.slf4j.Logger: void info(java.lang.String)>($r7)
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : interfaceinvoke $r1.<org.slf4j.Logger: void info(java.lang.String)>($r7) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r8 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SRVR_HOSTS_MAPPING>
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r8 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SRVR_HOSTS_MAPPING> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r9 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r8)
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r9 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r8) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : return $r9
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : return $r9 >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : r1 = null
org.apache.ambari.server.controller.HostsMap.setupMap : r1 = null >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : $r6 = <org.apache.ambari.server.controller.HostsMap: org.slf4j.Logger LOG>
org.apache.ambari.server.controller.HostsMap.setupMap : $r6 = <org.apache.ambari.server.controller.HostsMap: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : $r2 = new java.lang.StringBuilder
org.apache.ambari.server.controller.HostsMap.setupMap : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.controller.HostsMap.setupMap : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Using hostsmap file ")
org.apache.ambari.server.controller.HostsMap.setupMap : $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Using hostsmap file ") >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : $r8 = r0.<org.apache.ambari.server.controller.HostsMap: java.lang.String hostsMapFile>
org.apache.ambari.server.controller.HostsMap.setupMap : $r8 = r0.<org.apache.ambari.server.controller.HostsMap: java.lang.String hostsMapFile> >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)
org.apache.ambari.server.controller.HostsMap.setupMap : $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8) >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.controller.HostsMap.setupMap : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String)>($r10)
org.apache.ambari.server.controller.HostsMap.setupMap : interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String)>($r10) >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : $r11 = r0.<org.apache.ambari.server.controller.HostsMap: java.lang.String hostsMapFile>
org.apache.ambari.server.controller.HostsMap.setupMap : $r11 = r0.<org.apache.ambari.server.controller.HostsMap: java.lang.String hostsMapFile> >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : if $r11 == null
org.apache.ambari.server.controller.HostsMap.setupMap : if $r11 == null >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : if r1 == null
org.apache.ambari.server.controller.HostsMap.setupMap : if r1 == null >>>>>>>> org.apache.ambari.server.configuration.Configuration.getSharedResourcesDirPath : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SHARED_RESOURCES_DIR>
org.apache.ambari.server.configuration.Configuration.getSharedResourcesDirPath : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SHARED_RESOURCES_DIR> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getSharedResourcesDirPath : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1)
org.apache.ambari.server.configuration.Configuration.getSharedResourcesDirPath : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getSharedResourcesDirPath : return $r2
org.apache.ambari.server.configuration.Configuration.getSharedResourcesDirPath : return $r2 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : r2 = null
org.apache.ambari.server.state.stack.OsFamily.init : r2 = null >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : $r8 = new java.io.File
org.apache.ambari.server.state.stack.OsFamily.init : $r8 = new java.io.File >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : specialinvoke $r8.<java.io.File: void <init>(java.lang.String,java.lang.String)>(r1, "os_family.json")
org.apache.ambari.server.state.stack.OsFamily.init : specialinvoke $r8.<java.io.File: void <init>(java.lang.String,java.lang.String)>(r1, "os_family.json") >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : r3 = $r8
org.apache.ambari.server.state.stack.OsFamily.init : r3 = $r8 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : $z0 = virtualinvoke r3.<java.io.File: boolean exists()>()
org.apache.ambari.server.state.stack.OsFamily.init : $z0 = virtualinvoke r3.<java.io.File: boolean exists()>() >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : if $z0 != 0
org.apache.ambari.server.state.stack.OsFamily.init : if $z0 != 0 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : $r9 = new java.lang.Exception
org.apache.ambari.server.state.stack.OsFamily.init : $r9 = new java.lang.Exception >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : specialinvoke $r9.<java.lang.Exception: void <init>()>()
org.apache.ambari.server.state.stack.OsFamily.init : specialinvoke $r9.<java.lang.Exception: void <init>()>() >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : throw $r9
org.apache.ambari.server.state.stack.OsFamily.init : throw $r9 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : r19 = $r18
org.apache.ambari.server.state.stack.OsFamily.init : r19 = $r18 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : $r20 = r0.<org.apache.ambari.server.state.stack.OsFamily: org.slf4j.Logger LOG>
org.apache.ambari.server.state.stack.OsFamily.init : $r20 = r0.<org.apache.ambari.server.state.stack.OsFamily: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : $r21 = newarray (java.lang.Object)[1]
org.apache.ambari.server.state.stack.OsFamily.init : $r21 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : $r6 = new java.io.File
org.apache.ambari.server.state.stack.OsFamily.init : $r6 = new java.io.File >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : specialinvoke $r6.<java.io.File: void <init>(java.lang.String,java.lang.String)>(r1, "os_family.json")
org.apache.ambari.server.state.stack.OsFamily.init : specialinvoke $r6.<java.io.File: void <init>(java.lang.String,java.lang.String)>(r1, "os_family.json") >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : $r22 = virtualinvoke $r6.<java.io.File: java.lang.String toString()>()
org.apache.ambari.server.state.stack.OsFamily.init : $r22 = virtualinvoke $r6.<java.io.File: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : $r21[0] = $r22
org.apache.ambari.server.state.stack.OsFamily.init : $r21[0] = $r22 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : $r23 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Could not load OS family definition from %s file", $r21)
org.apache.ambari.server.state.stack.OsFamily.init : $r23 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Could not load OS family definition from %s file", $r21) >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : interfaceinvoke $r20.<org.slf4j.Logger: void error(java.lang.String)>($r23)
org.apache.ambari.server.state.stack.OsFamily.init : interfaceinvoke $r20.<org.slf4j.Logger: void error(java.lang.String)>($r23) >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : $r24 = new java.lang.RuntimeException
org.apache.ambari.server.state.stack.OsFamily.init : $r24 = new java.lang.RuntimeException >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : specialinvoke $r24.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r19)
org.apache.ambari.server.state.stack.OsFamily.init : specialinvoke $r24.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r19) >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : throw $r24
org.apache.ambari.server.state.stack.OsFamily.init : throw $r24 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : r7 = $r25
org.apache.ambari.server.state.stack.OsFamily.init : r7 = $r25 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r2)
org.apache.ambari.server.state.stack.OsFamily.init : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r2) >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : throw r7
org.apache.ambari.server.state.stack.OsFamily.init : throw r7 >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : r74 = $r73
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : r74 = $r73 >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r75 = new java.lang.RuntimeException
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r75 = new java.lang.RuntimeException >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : specialinvoke $r75.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r74)
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : specialinvoke $r75.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r74) >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : throw $r75
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : throw $r75 >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.AlertMaintenanceModeListenerTest$MockModule.configure : $r3 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/state/Cluster")
org.apache.ambari.server.events.listeners.upgrade.AlertMaintenanceModeListenerTest$MockModule.configure : $r3 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/state/Cluster") >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.AlertMaintenanceModeListenerTest$MockModule.configure : r2 = (org.apache.ambari.server.state.Cluster) $r3
org.apache.ambari.server.events.listeners.upgrade.AlertMaintenanceModeListenerTest$MockModule.configure : r2 = (org.apache.ambari.server.state.Cluster) $r3 >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.AlertMaintenanceModeListenerTest$MockModule.configure : $r4 = interfaceinvoke r1.<com.google.inject.Binder: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "org/apache/ambari/server/state/Clusters")
org.apache.ambari.server.events.listeners.upgrade.AlertMaintenanceModeListenerTest$MockModule.configure : $r4 = interfaceinvoke r1.<com.google.inject.Binder: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "org/apache/ambari/server/state/Clusters") >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.AlertMaintenanceModeListenerTest$MockModule.configure : $r5 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/state/Clusters")
org.apache.ambari.server.events.listeners.upgrade.AlertMaintenanceModeListenerTest$MockModule.configure : $r5 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/state/Clusters") >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.AlertMaintenanceModeListenerTest$MockModule.configure : interfaceinvoke $r4.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r5)
org.apache.ambari.server.events.listeners.upgrade.AlertMaintenanceModeListenerTest$MockModule.configure : interfaceinvoke $r4.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r5) >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.AlertMaintenanceModeListenerTest$MockModule.configure : $r6 = interfaceinvoke r1.<com.google.inject.Binder: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "org/apache/ambari/server/orm/DBAccessor")
org.apache.ambari.server.events.listeners.upgrade.AlertMaintenanceModeListenerTest$MockModule.configure : $r6 = interfaceinvoke r1.<com.google.inject.Binder: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "org/apache/ambari/server/orm/DBAccessor") >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.AlertMaintenanceModeListenerTest$MockModule.configure : $r7 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/orm/DBAccessor")
org.apache.ambari.server.events.listeners.upgrade.AlertMaintenanceModeListenerTest$MockModule.configure : $r7 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/orm/DBAccessor") >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.AlertMaintenanceModeListenerTest$MockModule.configure : interfaceinvoke $r6.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r7)
org.apache.ambari.server.events.listeners.upgrade.AlertMaintenanceModeListenerTest$MockModule.configure : interfaceinvoke $r6.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r7) >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.AlertMaintenanceModeListenerTest$MockModule.configure : $r8 = interfaceinvoke r1.<com.google.inject.Binder: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "org/apache/ambari/server/state/Cluster")
org.apache.ambari.server.events.listeners.upgrade.AlertMaintenanceModeListenerTest$MockModule.configure : $r8 = interfaceinvoke r1.<com.google.inject.Binder: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "org/apache/ambari/server/state/Cluster") >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.AlertMaintenanceModeListenerTest$MockModule.configure : interfaceinvoke $r8.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>(r2)
org.apache.ambari.server.events.listeners.upgrade.AlertMaintenanceModeListenerTest$MockModule.configure : interfaceinvoke $r8.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>(r2) >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.AlertMaintenanceModeListenerTest$MockModule.configure : $r9 = interfaceinvoke r1.<com.google.inject.Binder: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "org/apache/ambari/server/orm/dao/AlertDefinitionDAO")
org.apache.ambari.server.events.listeners.upgrade.AlertMaintenanceModeListenerTest$MockModule.configure : $r9 = interfaceinvoke r1.<com.google.inject.Binder: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "org/apache/ambari/server/orm/dao/AlertDefinitionDAO") >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.AlertMaintenanceModeListenerTest$MockModule.configure : $r10 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/orm/dao/AlertDefinitionDAO")
org.apache.ambari.server.events.listeners.upgrade.AlertMaintenanceModeListenerTest$MockModule.configure : $r10 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/orm/dao/AlertDefinitionDAO") >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.AlertMaintenanceModeListenerTest$MockModule.configure : interfaceinvoke $r9.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r10)
org.apache.ambari.server.events.listeners.upgrade.AlertMaintenanceModeListenerTest$MockModule.configure : interfaceinvoke $r9.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r10) >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.AlertMaintenanceModeListenerTest$MockModule.configure : $r11 = interfaceinvoke r1.<com.google.inject.Binder: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "org/apache/ambari/server/orm/dao/AlertsDAO")
org.apache.ambari.server.events.listeners.upgrade.AlertMaintenanceModeListenerTest$MockModule.configure : $r11 = interfaceinvoke r1.<com.google.inject.Binder: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "org/apache/ambari/server/orm/dao/AlertsDAO") >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.AlertMaintenanceModeListenerTest$MockModule.configure : $r12 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/orm/dao/AlertsDAO")
org.apache.ambari.server.events.listeners.upgrade.AlertMaintenanceModeListenerTest$MockModule.configure : $r12 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/orm/dao/AlertsDAO") >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.AlertMaintenanceModeListenerTest$MockModule.configure : interfaceinvoke $r11.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r12)
org.apache.ambari.server.events.listeners.upgrade.AlertMaintenanceModeListenerTest$MockModule.configure : interfaceinvoke $r11.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r12) >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.AlertMaintenanceModeListenerTest$MockModule.configure : $r13 = interfaceinvoke r1.<com.google.inject.Binder: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "javax/persistence/EntityManager")
org.apache.ambari.server.events.listeners.upgrade.AlertMaintenanceModeListenerTest$MockModule.configure : $r13 = interfaceinvoke r1.<com.google.inject.Binder: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "javax/persistence/EntityManager") >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.AlertMaintenanceModeListenerTest$MockModule.configure : $r14 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "javax/persistence/EntityManager")
org.apache.ambari.server.events.listeners.upgrade.AlertMaintenanceModeListenerTest$MockModule.configure : $r14 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "javax/persistence/EntityManager") >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.AlertMaintenanceModeListenerTest$MockModule.configure : interfaceinvoke $r13.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r14)
org.apache.ambari.server.events.listeners.upgrade.AlertMaintenanceModeListenerTest$MockModule.configure : interfaceinvoke $r13.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r14) >>>>>>>> org.apache.ambari.server.events.publishers.VersionEventPublisher.register : $r2 = r0.<org.apache.ambari.server.events.publishers.VersionEventPublisher: com.google.common.eventbus.EventBus m_eventBus>
org.apache.ambari.server.events.publishers.VersionEventPublisher.register : $r2 = r0.<org.apache.ambari.server.events.publishers.VersionEventPublisher: com.google.common.eventbus.EventBus m_eventBus> >>>>>>>> org.apache.ambari.server.events.publishers.VersionEventPublisher.register : virtualinvoke $r2.<com.google.common.eventbus.EventBus: void register(java.lang.Object)>(r1)
org.apache.ambari.server.events.publishers.VersionEventPublisher.register : virtualinvoke $r2.<com.google.common.eventbus.EventBus: void register(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListenerTest.sendEventAndVerify : $r2 = new org.apache.ambari.server.events.HostComponentVersionAdvertisedEvent
org.apache.ambari.server.events.listeners.upgrade.StackVersionListenerTest.sendEventAndVerify : $r2 = new org.apache.ambari.server.events.HostComponentVersionAdvertisedEvent >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListenerTest.sendEventAndVerify : $r4 = r0.<org.apache.ambari.server.events.listeners.upgrade.StackVersionListenerTest: org.apache.ambari.server.state.Cluster cluster>
org.apache.ambari.server.events.listeners.upgrade.StackVersionListenerTest.sendEventAndVerify : $r4 = r0.<org.apache.ambari.server.events.listeners.upgrade.StackVersionListenerTest: org.apache.ambari.server.state.Cluster cluster> >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListenerTest.sendEventAndVerify : $r5 = r0.<org.apache.ambari.server.events.listeners.upgrade.StackVersionListenerTest: org.apache.ambari.server.state.ServiceComponentHost sch>
org.apache.ambari.server.events.listeners.upgrade.StackVersionListenerTest.sendEventAndVerify : $r5 = r0.<org.apache.ambari.server.events.listeners.upgrade.StackVersionListenerTest: org.apache.ambari.server.state.ServiceComponentHost sch> >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListenerTest.sendEventAndVerify : specialinvoke $r2.<org.apache.ambari.server.events.HostComponentVersionAdvertisedEvent: void <init>(org.apache.ambari.server.state.Cluster,org.apache.ambari.server.state.ServiceComponentHost,java.lang.String)>($r4, $r5, r1)
org.apache.ambari.server.events.listeners.upgrade.StackVersionListenerTest.sendEventAndVerify : specialinvoke $r2.<org.apache.ambari.server.events.HostComponentVersionAdvertisedEvent: void <init>(org.apache.ambari.server.state.Cluster,org.apache.ambari.server.state.ServiceComponentHost,java.lang.String)>($r4, $r5, r1) >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListenerTest.sendEventAndVerify : r3 = $r2
org.apache.ambari.server.events.listeners.upgrade.StackVersionListenerTest.sendEventAndVerify : r3 = $r2 >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListenerTest.sendEventAndVerify : $r6 = r0.<org.apache.ambari.server.events.listeners.upgrade.StackVersionListenerTest: org.apache.ambari.server.events.listeners.upgrade.StackVersionListener listener>
org.apache.ambari.server.events.listeners.upgrade.StackVersionListenerTest.sendEventAndVerify : $r6 = r0.<org.apache.ambari.server.events.listeners.upgrade.StackVersionListenerTest: org.apache.ambari.server.events.listeners.upgrade.StackVersionListener listener> >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListenerTest.sendEventAndVerify : virtualinvoke $r6.<org.apache.ambari.server.events.listeners.upgrade.StackVersionListener: void onAmbariEvent(org.apache.ambari.server.events.HostComponentVersionAdvertisedEvent)>(r3)
org.apache.ambari.server.events.listeners.upgrade.StackVersionListenerTest.sendEventAndVerify : virtualinvoke $r6.<org.apache.ambari.server.events.listeners.upgrade.StackVersionListener: void onAmbariEvent(org.apache.ambari.server.events.HostComponentVersionAdvertisedEvent)>(r3) >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : $r2 = <org.apache.ambari.server.events.listeners.upgrade.StackVersionListener: org.slf4j.Logger LOG>
org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : $r2 = <org.apache.ambari.server.events.listeners.upgrade.StackVersionListener: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : interfaceinvoke $r2.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Received event {}", r1)
org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : interfaceinvoke $r2.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Received event {}", r1) >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : r3 = virtualinvoke r1.<org.apache.ambari.server.events.HostComponentVersionAdvertisedEvent: org.apache.ambari.server.state.Cluster getCluster()>()
org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : r3 = virtualinvoke r1.<org.apache.ambari.server.events.HostComponentVersionAdvertisedEvent: org.apache.ambari.server.state.Cluster getCluster()>() >>>>>>>> org.apache.ambari.server.events.HostComponentVersionAdvertisedEvent.getCluster : $r1 = r0.<org.apache.ambari.server.events.HostComponentVersionAdvertisedEvent: org.apache.ambari.server.state.Cluster cluster>
org.apache.ambari.server.events.HostComponentVersionAdvertisedEvent.getCluster : $r1 = r0.<org.apache.ambari.server.events.HostComponentVersionAdvertisedEvent: org.apache.ambari.server.state.Cluster cluster> >>>>>>>> org.apache.ambari.server.events.HostComponentVersionAdvertisedEvent.getCluster : return $r1
org.apache.ambari.server.events.HostComponentVersionAdvertisedEvent.getCluster : return $r1 >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : r4 = virtualinvoke r1.<org.apache.ambari.server.events.HostComponentVersionAdvertisedEvent: org.apache.ambari.server.state.ServiceComponentHost getServiceComponentHost()>()
org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : r4 = virtualinvoke r1.<org.apache.ambari.server.events.HostComponentVersionAdvertisedEvent: org.apache.ambari.server.state.ServiceComponentHost getServiceComponentHost()>() >>>>>>>> org.apache.ambari.server.events.HostComponentVersionAdvertisedEvent.getServiceComponentHost : $r1 = r0.<org.apache.ambari.server.events.HostComponentVersionAdvertisedEvent: org.apache.ambari.server.state.ServiceComponentHost sch>
org.apache.ambari.server.events.HostComponentVersionAdvertisedEvent.getServiceComponentHost : $r1 = r0.<org.apache.ambari.server.events.HostComponentVersionAdvertisedEvent: org.apache.ambari.server.state.ServiceComponentHost sch> >>>>>>>> org.apache.ambari.server.events.HostComponentVersionAdvertisedEvent.getServiceComponentHost : return $r1
org.apache.ambari.server.events.HostComponentVersionAdvertisedEvent.getServiceComponentHost : return $r1 >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : r5 = virtualinvoke r1.<org.apache.ambari.server.events.HostComponentVersionAdvertisedEvent: java.lang.String getVersion()>()
org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : r5 = virtualinvoke r1.<org.apache.ambari.server.events.HostComponentVersionAdvertisedEvent: java.lang.String getVersion()>() >>>>>>>> org.apache.ambari.server.events.HostComponentVersionAdvertisedEvent.getVersion : $r1 = r0.<org.apache.ambari.server.events.HostComponentVersionAdvertisedEvent: java.lang.String version>
org.apache.ambari.server.events.HostComponentVersionAdvertisedEvent.getVersion : $r1 = r0.<org.apache.ambari.server.events.HostComponentVersionAdvertisedEvent: java.lang.String version> >>>>>>>> org.apache.ambari.server.events.HostComponentVersionAdvertisedEvent.getVersion : return $r1
org.apache.ambari.server.events.HostComponentVersionAdvertisedEvent.getVersion : return $r1 >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r5)
org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r5) >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : if $z0 == 0
org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : if $z0 == 0 >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : $r10 = r0.<org.apache.ambari.server.events.listeners.upgrade.StackVersionListener: java.util.concurrent.locks.Lock m_stackVersionLock>
org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : $r10 = r0.<org.apache.ambari.server.events.listeners.upgrade.StackVersionListener: java.util.concurrent.locks.Lock m_stackVersionLock> >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : interfaceinvoke $r10.<java.util.concurrent.locks.Lock: void lock()>()
org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : interfaceinvoke $r10.<java.util.concurrent.locks.Lock: void lock()>() >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : $r11 = virtualinvoke r1.<org.apache.ambari.server.events.HostComponentVersionAdvertisedEvent: java.lang.Long getRepositoryVersionId()>()
org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : $r11 = virtualinvoke r1.<org.apache.ambari.server.events.HostComponentVersionAdvertisedEvent: java.lang.Long getRepositoryVersionId()>() >>>>>>>> org.apache.ambari.server.events.HostComponentVersionAdvertisedEvent.getRepositoryVersionId : $r1 = r0.<org.apache.ambari.server.events.HostComponentVersionAdvertisedEvent: java.lang.Long repoVersionId>
org.apache.ambari.server.events.HostComponentVersionAdvertisedEvent.getRepositoryVersionId : $r1 = r0.<org.apache.ambari.server.events.HostComponentVersionAdvertisedEvent: java.lang.Long repoVersionId> >>>>>>>> org.apache.ambari.server.events.HostComponentVersionAdvertisedEvent.getRepositoryVersionId : return $r1
org.apache.ambari.server.events.HostComponentVersionAdvertisedEvent.getRepositoryVersionId : return $r1 >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : if null == $r11
org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : if null == $r11 >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : $r18 = r0.<org.apache.ambari.server.events.listeners.upgrade.StackVersionListener: com.google.inject.Provider ambariMetaInfo>
org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : $r18 = r0.<org.apache.ambari.server.events.listeners.upgrade.StackVersionListener: com.google.inject.Provider ambariMetaInfo> >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : $r19 = interfaceinvoke $r18.<com.google.inject.Provider: java.lang.Object get()>()
org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : $r19 = interfaceinvoke $r18.<com.google.inject.Provider: java.lang.Object get()>() >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : r20 = (org.apache.ambari.server.api.services.AmbariMetaInfo) $r19
org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : r20 = (org.apache.ambari.server.api.services.AmbariMetaInfo) $r19 >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : $r21 = interfaceinvoke r3.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.StackId getDesiredStackVersion()>()
org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : $r21 = interfaceinvoke r3.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.StackId getDesiredStackVersion()>() >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : $r22 = virtualinvoke $r21.<org.apache.ambari.server.state.StackId: java.lang.String getStackName()>()
org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : $r22 = virtualinvoke $r21.<org.apache.ambari.server.state.StackId: java.lang.String getStackName()>() >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : $r23 = interfaceinvoke r3.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.StackId getDesiredStackVersion()>()
org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : $r23 = interfaceinvoke r3.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.StackId getDesiredStackVersion()>() >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : $r24 = virtualinvoke $r23.<org.apache.ambari.server.state.StackId: java.lang.String getStackVersion()>()
org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : $r24 = virtualinvoke $r23.<org.apache.ambari.server.state.StackId: java.lang.String getStackVersion()>() >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : $r25 = interfaceinvoke r4.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceName()>()
org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : $r25 = interfaceinvoke r4.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceName()>() >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : $r26 = interfaceinvoke r4.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceComponentName()>()
org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : $r26 = interfaceinvoke r4.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceComponentName()>() >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : r27 = virtualinvoke r20.<org.apache.ambari.server.api.services.AmbariMetaInfo: org.apache.ambari.server.state.ComponentInfo getComponent(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r22, $r24, $r25, $r26)
org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : r27 = virtualinvoke r20.<org.apache.ambari.server.api.services.AmbariMetaInfo: org.apache.ambari.server.state.ComponentInfo getComponent(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r22, $r24, $r25, $r26) >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : $r28 = interfaceinvoke r4.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceName()>()
org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : $r28 = interfaceinvoke r4.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceName()>() >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : $r29 = interfaceinvoke r3.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.Service getService(java.lang.String)>($r28)
org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : $r29 = interfaceinvoke r3.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.Service getService(java.lang.String)>($r28) >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : $r30 = interfaceinvoke r4.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceComponentName()>()
org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : $r30 = interfaceinvoke r4.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceComponentName()>() >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : r8 = interfaceinvoke $r29.<org.apache.ambari.server.state.Service: org.apache.ambari.server.state.ServiceComponent getServiceComponent(java.lang.String)>($r30)
org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : r8 = interfaceinvoke $r29.<org.apache.ambari.server.state.Service: org.apache.ambari.server.state.ServiceComponent getServiceComponent(java.lang.String)>($r30) >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : $z2 = virtualinvoke r27.<org.apache.ambari.server.state.ComponentInfo: boolean isVersionAdvertised()>()
org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : $z2 = virtualinvoke r27.<org.apache.ambari.server.state.ComponentInfo: boolean isVersionAdvertised()>() >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : if $z2 == 0
org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : if $z2 == 0 >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : $z5 = interfaceinvoke r8.<org.apache.ambari.server.state.ServiceComponent: boolean isVersionAdvertised()>()
org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : $z5 = interfaceinvoke r8.<org.apache.ambari.server.state.ServiceComponent: boolean isVersionAdvertised()>() >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : if $z5 != 0
org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : if $z5 != 0 >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : $r38 = <org.apache.ambari.server.events.listeners.upgrade.StackVersionListener: java.lang.String UNKNOWN_VERSION>
org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : $r38 = <org.apache.ambari.server.events.listeners.upgrade.StackVersionListener: java.lang.String UNKNOWN_VERSION> >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : $r39 = interfaceinvoke r8.<org.apache.ambari.server.state.ServiceComponent: java.lang.String getDesiredVersion()>()
org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : $r39 = interfaceinvoke r8.<org.apache.ambari.server.state.ServiceComponent: java.lang.String getDesiredVersion()>() >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : $z8 = virtualinvoke $r38.<java.lang.String: boolean equals(java.lang.Object)>($r39)
org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : $z8 = virtualinvoke $r38.<java.lang.String: boolean equals(java.lang.Object)>($r39) >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : if $z8 == 0
org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : if $z8 == 0 >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : specialinvoke r0.<org.apache.ambari.server.events.listeners.upgrade.StackVersionListener: void processComponentAdvertisedVersion(org.apache.ambari.server.state.Cluster,org.apache.ambari.server.state.ServiceComponentHost,java.lang.String,org.apache.ambari.server.state.ServiceComponent)>(r3, r4, r5, r8)
org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : specialinvoke r0.<org.apache.ambari.server.events.listeners.upgrade.StackVersionListener: void processComponentAdvertisedVersion(org.apache.ambari.server.state.Cluster,org.apache.ambari.server.state.ServiceComponentHost,java.lang.String,org.apache.ambari.server.state.ServiceComponent)>(r3, r4, r5, r8) >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.processComponentAdvertisedVersion : $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isBlank(java.lang.String)>(r3)
org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.processComponentAdvertisedVersion : $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isBlank(java.lang.String)>(r3) >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.processComponentAdvertisedVersion : if $z0 == 0
org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.processComponentAdvertisedVersion : if $z0 == 0 >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.processComponentAdvertisedVersion : r5 = interfaceinvoke r2.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getVersion()>()
org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.processComponentAdvertisedVersion : r5 = interfaceinvoke r2.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getVersion()>() >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.processComponentAdvertisedVersion : if r5 == null
org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.processComponentAdvertisedVersion : if r5 == null >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.processComponentAdvertisedVersion : $r7 = <org.apache.ambari.server.state.UpgradeState: org.apache.ambari.server.state.UpgradeState NONE>
org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.processComponentAdvertisedVersion : $r7 = <org.apache.ambari.server.state.UpgradeState: org.apache.ambari.server.state.UpgradeState NONE> >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.processComponentAdvertisedVersion : interfaceinvoke r2.<org.apache.ambari.server.state.ServiceComponentHost: void setUpgradeState(org.apache.ambari.server.state.UpgradeState)>($r7)
org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.processComponentAdvertisedVersion : interfaceinvoke r2.<org.apache.ambari.server.state.ServiceComponentHost: void setUpgradeState(org.apache.ambari.server.state.UpgradeState)>($r7) >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.processComponentAdvertisedVersion : interfaceinvoke r2.<org.apache.ambari.server.state.ServiceComponentHost: void setVersion(java.lang.String)>(r3)
org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.processComponentAdvertisedVersion : interfaceinvoke r2.<org.apache.ambari.server.state.ServiceComponentHost: void setVersion(java.lang.String)>(r3) >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.processComponentAdvertisedVersion : specialinvoke r0.<org.apache.ambari.server.events.listeners.upgrade.StackVersionListener: void bootstrapVersion(org.apache.ambari.server.state.Cluster,org.apache.ambari.server.state.ServiceComponentHost)>(r1, r2)
org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.processComponentAdvertisedVersion : specialinvoke r0.<org.apache.ambari.server.events.listeners.upgrade.StackVersionListener: void bootstrapVersion(org.apache.ambari.server.state.Cluster,org.apache.ambari.server.state.ServiceComponentHost)>(r1, r2) >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.bootstrapVersion : r3 = interfaceinvoke r2.<org.apache.ambari.server.state.ServiceComponentHost: org.apache.ambari.server.orm.entities.RepositoryVersionEntity recalculateHostVersionState()>()
org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.bootstrapVersion : r3 = interfaceinvoke r2.<org.apache.ambari.server.state.ServiceComponentHost: org.apache.ambari.server.orm.entities.RepositoryVersionEntity recalculateHostVersionState()>() >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.bootstrapVersion : if null == r3
org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.bootstrapVersion : if null == r3 >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.processComponentAdvertisedVersion : goto [?= return]
org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.processComponentAdvertisedVersion : goto [?= return] >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : $r40 = r0.<org.apache.ambari.server.events.listeners.upgrade.StackVersionListener: java.util.concurrent.locks.Lock m_stackVersionLock>
org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : $r40 = r0.<org.apache.ambari.server.events.listeners.upgrade.StackVersionListener: java.util.concurrent.locks.Lock m_stackVersionLock> >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : interfaceinvoke $r40.<java.util.concurrent.locks.Lock: void unlock()>()
org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : interfaceinvoke $r40.<java.util.concurrent.locks.Lock: void unlock()>() >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : goto [?= return]
org.apache.ambari.server.events.listeners.upgrade.StackVersionListener.onAmbariEvent : goto [?= return] >>>>>>>> org.apache.ambari.server.events.listeners.upgrade.StackVersionListenerTest.sendEventAndVerify : virtualinvoke r0.<org.apache.ambari.server.events.listeners.upgrade.StackVersionListenerTest: void verifyAll()>()
