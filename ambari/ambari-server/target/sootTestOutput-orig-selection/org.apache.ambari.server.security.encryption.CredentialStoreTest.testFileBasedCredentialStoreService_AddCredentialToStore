org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : $r10 = r0.<org.apache.ambari.server.security.encryption.CredentialStoreTest: org.junit.rules.TemporaryFolder tmpFolder> >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : r3 = virtualinvoke $r10.<org.junit.rules.TemporaryFolder: java.io.File getRoot()>()
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : r3 = virtualinvoke $r10.<org.junit.rules.TemporaryFolder: java.io.File getRoot()>() >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : r4 = "ThisIsSomeSecretPassPhrase1234"
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : r4 = "ThisIsSomeSecretPassPhrase1234" >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : $r11 = new java.io.File
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : $r11 = new java.io.File >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : specialinvoke $r11.<java.io.File: void <init>(java.io.File,java.lang.String)>(r3, "master")
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : specialinvoke $r11.<java.io.File: void <init>(java.io.File,java.lang.String)>(r3, "master") >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : r5 = $r11
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : r5 = $r11 >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : r6 = interfaceinvoke r2.<org.apache.ambari.server.security.encryption.CredentialStoreTest$MasterKeyServiceFactory: org.apache.ambari.server.security.encryption.MasterKeyService create(java.lang.String)>(r4)
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : r6 = interfaceinvoke r2.<org.apache.ambari.server.security.encryption.CredentialStoreTest$MasterKeyServiceFactory: org.apache.ambari.server.security.encryption.MasterKeyService create(java.lang.String)>(r4) >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest$DefaultMasterKeyServiceFactory.create : $r2 = new org.apache.ambari.server.security.encryption.MasterKeyServiceImpl
org.apache.ambari.server.security.encryption.CredentialStoreTest$DefaultMasterKeyServiceFactory.create : $r2 = new org.apache.ambari.server.security.encryption.MasterKeyServiceImpl >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest$DefaultMasterKeyServiceFactory.create : specialinvoke $r2.<org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: void <init>(java.lang.String)>(r1)
org.apache.ambari.server.security.encryption.CredentialStoreTest$DefaultMasterKeyServiceFactory.create : specialinvoke $r2.<org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: void <init>(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest$DefaultMasterKeyServiceFactory.create : return $r2
org.apache.ambari.server.security.encryption.CredentialStoreTest$DefaultMasterKeyServiceFactory.create : return $r2 >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : r7 = interfaceinvoke r1.<org.apache.ambari.server.security.encryption.CredentialStoreTest$CredentialStoreServiceFactory: org.apache.ambari.server.security.encryption.CredentialStore create(java.io.File,org.apache.ambari.server.security.encryption.MasterKeyService)>(r3, r6)
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : r7 = interfaceinvoke r1.<org.apache.ambari.server.security.encryption.CredentialStoreTest$CredentialStoreServiceFactory: org.apache.ambari.server.security.encryption.CredentialStore create(java.io.File,org.apache.ambari.server.security.encryption.MasterKeyService)>(r3, r6) >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest$FileBasedCredentialStoreServiceFactory.create : $r3 = new org.apache.ambari.server.security.encryption.FileBasedCredentialStore
org.apache.ambari.server.security.encryption.CredentialStoreTest$FileBasedCredentialStoreServiceFactory.create : $r3 = new org.apache.ambari.server.security.encryption.FileBasedCredentialStore >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest$FileBasedCredentialStoreServiceFactory.create : specialinvoke $r3.<org.apache.ambari.server.security.encryption.FileBasedCredentialStore: void <init>(java.io.File)>(r1)
org.apache.ambari.server.security.encryption.CredentialStoreTest$FileBasedCredentialStoreServiceFactory.create : specialinvoke $r3.<org.apache.ambari.server.security.encryption.FileBasedCredentialStore: void <init>(java.io.File)>(r1) >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest$FileBasedCredentialStoreServiceFactory.create : r4 = $r3
org.apache.ambari.server.security.encryption.CredentialStoreTest$FileBasedCredentialStoreServiceFactory.create : r4 = $r3 >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest$FileBasedCredentialStoreServiceFactory.create : interfaceinvoke r4.<org.apache.ambari.server.security.encryption.CredentialStore: void setMasterKeyService(org.apache.ambari.server.security.encryption.MasterKeyService)>(r2)
org.apache.ambari.server.security.encryption.CredentialStoreTest$FileBasedCredentialStoreServiceFactory.create : interfaceinvoke r4.<org.apache.ambari.server.security.encryption.CredentialStore: void setMasterKeyService(org.apache.ambari.server.security.encryption.MasterKeyService)>(r2) >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.setMasterKeyService : r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: org.apache.ambari.server.security.encryption.MasterKeyService masterKeyService> = r1
org.apache.ambari.server.security.encryption.AbstractCredentialStore.setMasterKeyService : r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: org.apache.ambari.server.security.encryption.MasterKeyService masterKeyService> = r1 >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest$FileBasedCredentialStoreServiceFactory.create : return r4
org.apache.ambari.server.security.encryption.CredentialStoreTest$FileBasedCredentialStoreServiceFactory.create : return r4 >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : r8 = "mypassword"
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : r8 = "mypassword" >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : $r12 = new org.apache.ambari.server.security.credential.GenericKeyCredential
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : $r12 = new org.apache.ambari.server.security.credential.GenericKeyCredential >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : $r13 = virtualinvoke r8.<java.lang.String: char[] toCharArray()>()
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : $r13 = virtualinvoke r8.<java.lang.String: char[] toCharArray()>() >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : specialinvoke $r12.<org.apache.ambari.server.security.credential.GenericKeyCredential: void <init>(char[])>($r13)
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : specialinvoke $r12.<org.apache.ambari.server.security.credential.GenericKeyCredential: void <init>(char[])>($r13) >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : interfaceinvoke r7.<org.apache.ambari.server.security.encryption.CredentialStore: void addCredential(java.lang.String,org.apache.ambari.server.security.credential.Credential)>("password", $r12)
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : interfaceinvoke r7.<org.apache.ambari.server.security.encryption.CredentialStore: void addCredential(java.lang.String,org.apache.ambari.server.security.credential.Credential)>("password", $r12) >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : if r1 == null
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : if r1 == null >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : $z0 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>()
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : $z0 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : if $z0 == 0
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : if $z0 == 0 >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : $r6 = r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: java.util.concurrent.locks.Lock lock>
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : $r6 = r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: java.util.concurrent.locks.Lock lock> >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : interfaceinvoke $r6.<java.util.concurrent.locks.Lock: void lock()>()
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : interfaceinvoke $r6.<java.util.concurrent.locks.Lock: void lock()>() >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : r3 = virtualinvoke r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: java.security.KeyStore loadCredentialStore()>()
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : r3 = virtualinvoke r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: java.security.KeyStore loadCredentialStore()>() >>>>>>>> org.apache.ambari.server.security.encryption.FileBasedCredentialStore.loadCredentialStore : $r1 = r0.<org.apache.ambari.server.security.encryption.FileBasedCredentialStore: java.io.File keyStoreFile>
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.loadCredentialStore : $r1 = r0.<org.apache.ambari.server.security.encryption.FileBasedCredentialStore: java.io.File keyStoreFile> >>>>>>>> org.apache.ambari.server.security.encryption.FileBasedCredentialStore.loadCredentialStore : $r2 = specialinvoke r0.<org.apache.ambari.server.security.encryption.FileBasedCredentialStore: java.security.KeyStore getKeyStore(java.io.File,java.lang.String)>($r1, "JCEKS")
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.loadCredentialStore : $r2 = specialinvoke r0.<org.apache.ambari.server.security.encryption.FileBasedCredentialStore: java.security.KeyStore getKeyStore(java.io.File,java.lang.String)>($r1, "JCEKS") >>>>>>>> org.apache.ambari.server.security.encryption.FileBasedCredentialStore.getKeyStore : $z0 = virtualinvoke r1.<java.io.File: boolean exists()>()
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.getKeyStore : $z0 = virtualinvoke r1.<java.io.File: boolean exists()>() >>>>>>>> org.apache.ambari.server.security.encryption.FileBasedCredentialStore.getKeyStore : if $z0 == 0
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.getKeyStore : if $z0 == 0 >>>>>>>> org.apache.ambari.server.security.encryption.FileBasedCredentialStore.getKeyStore : $r17 = <org.apache.ambari.server.security.encryption.FileBasedCredentialStore: org.slf4j.Logger LOG>
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.getKeyStore : $r17 = <org.apache.ambari.server.security.encryption.FileBasedCredentialStore: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.security.encryption.FileBasedCredentialStore.getKeyStore : $r18 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.getKeyStore : $r18 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.ambari.server.security.encryption.FileBasedCredentialStore.getKeyStore : interfaceinvoke $r17.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Key store file not found in {}. Returning new (non-persisted) KeyStore", $r18)
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.getKeyStore : interfaceinvoke $r17.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Key store file not found in {}. Returning new (non-persisted) KeyStore", $r18) >>>>>>>> org.apache.ambari.server.security.encryption.FileBasedCredentialStore.getKeyStore : r3 = null
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.getKeyStore : r3 = null >>>>>>>> org.apache.ambari.server.security.encryption.FileBasedCredentialStore.getKeyStore : r5 = virtualinvoke r0.<org.apache.ambari.server.security.encryption.FileBasedCredentialStore: java.security.KeyStore loadKeyStore(java.io.InputStream,java.lang.String)>(r3, r2)
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.getKeyStore : r5 = virtualinvoke r0.<org.apache.ambari.server.security.encryption.FileBasedCredentialStore: java.security.KeyStore loadKeyStore(java.io.InputStream,java.lang.String)>(r3, r2) >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.loadKeyStore : $r5 = r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: org.apache.ambari.server.security.encryption.MasterKeyService masterKeyService>
org.apache.ambari.server.security.encryption.AbstractCredentialStore.loadKeyStore : $r5 = r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: org.apache.ambari.server.security.encryption.MasterKeyService masterKeyService> >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.loadKeyStore : if $r5 != null
org.apache.ambari.server.security.encryption.AbstractCredentialStore.loadKeyStore : if $r5 != null >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.loadKeyStore : r3 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(r2)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.loadKeyStore : r3 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(r2) >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.loadKeyStore : goto [?= $r11 = r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: org.apache.ambari.server.security.encryption.MasterKeyService masterKeyService>]
org.apache.ambari.server.security.encryption.AbstractCredentialStore.loadKeyStore : goto [?= $r11 = r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: org.apache.ambari.server.security.encryption.MasterKeyService masterKeyService>] >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.loadKeyStore : $r11 = r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: org.apache.ambari.server.security.encryption.MasterKeyService masterKeyService>
org.apache.ambari.server.security.encryption.AbstractCredentialStore.loadKeyStore : $r11 = r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: org.apache.ambari.server.security.encryption.MasterKeyService masterKeyService> >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.loadKeyStore : $r12 = interfaceinvoke $r11.<org.apache.ambari.server.security.encryption.MasterKeyService: char[] getMasterSecret()>()
org.apache.ambari.server.security.encryption.AbstractCredentialStore.loadKeyStore : $r12 = interfaceinvoke $r11.<org.apache.ambari.server.security.encryption.MasterKeyService: char[] getMasterSecret()>() >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.getMasterSecret : $r1 = r0.<org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: char[] master>
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.getMasterSecret : $r1 = r0.<org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: char[] master> >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.getMasterSecret : return $r1
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.getMasterSecret : return $r1 >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.loadKeyStore : virtualinvoke r3.<java.security.KeyStore: void load(java.io.InputStream,char[])>(r1, $r12)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.loadKeyStore : virtualinvoke r3.<java.security.KeyStore: void load(java.io.InputStream,char[])>(r1, $r12) >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.loadKeyStore : goto [?= return r3]
org.apache.ambari.server.security.encryption.AbstractCredentialStore.loadKeyStore : goto [?= return r3] >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.loadKeyStore : return r3
org.apache.ambari.server.security.encryption.AbstractCredentialStore.loadKeyStore : return r3 >>>>>>>> org.apache.ambari.server.security.encryption.FileBasedCredentialStore.getKeyStore : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r3)
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.getKeyStore : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r3) >>>>>>>> org.apache.ambari.server.security.encryption.FileBasedCredentialStore.getKeyStore : goto [?= return r5]
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.getKeyStore : goto [?= return r5] >>>>>>>> org.apache.ambari.server.security.encryption.FileBasedCredentialStore.getKeyStore : return r5
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.getKeyStore : return r5 >>>>>>>> org.apache.ambari.server.security.encryption.FileBasedCredentialStore.loadCredentialStore : return $r2
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.loadCredentialStore : return $r2 >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : virtualinvoke r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: void addCredential(java.security.KeyStore,java.lang.String,org.apache.ambari.server.security.credential.Credential)>(r3, r1, r2)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : virtualinvoke r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: void addCredential(java.security.KeyStore,java.lang.String,org.apache.ambari.server.security.credential.Credential)>(r3, r1, r2) >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : if r3 != null
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : if r3 != null >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : $r6 = interfaceinvoke r3.<org.apache.ambari.server.security.credential.Credential: char[] toValue()>()
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : $r6 = interfaceinvoke r3.<org.apache.ambari.server.security.credential.Credential: char[] toValue()>() >>>>>>>> org.apache.ambari.server.security.credential.GenericKeyCredential.toValue : $r1 = r0.<org.apache.ambari.server.security.credential.GenericKeyCredential: char[] key>
org.apache.ambari.server.security.credential.GenericKeyCredential.toValue : $r1 = r0.<org.apache.ambari.server.security.credential.GenericKeyCredential: char[] key> >>>>>>>> org.apache.ambari.server.security.credential.GenericKeyCredential.toValue : return $r1
org.apache.ambari.server.security.credential.GenericKeyCredential.toValue : return $r1 >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : r4 = $r6
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : r4 = $r6 >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : if r4 == null
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : if r4 == null >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : $i0 = lengthof r4
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : $i0 = lengthof r4 >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : if $i0 != 0
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : if $i0 != 0 >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : $r7 = new javax.crypto.spec.SecretKeySpec
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : $r7 = new javax.crypto.spec.SecretKeySpec >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : $r8 = virtualinvoke r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: byte[] toBytes(char[])>(r4)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : $r8 = virtualinvoke r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: byte[] toBytes(char[])>(r4) >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : if r1 != null
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : if r1 != null >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : r2 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(char[])>(r1)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : r2 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(char[])>(r1) >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : $r5 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8")
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : $r5 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8") >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : r3 = virtualinvoke $r5.<java.nio.charset.Charset: java.nio.ByteBuffer encode(java.nio.CharBuffer)>(r2)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : r3 = virtualinvoke $r5.<java.nio.charset.Charset: java.nio.ByteBuffer encode(java.nio.CharBuffer)>(r2) >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : $r6 = virtualinvoke r3.<java.nio.ByteBuffer: byte[] array()>()
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : $r6 = virtualinvoke r3.<java.nio.ByteBuffer: byte[] array()>() >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : $i0 = virtualinvoke r3.<java.nio.ByteBuffer: int position()>()
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : $i0 = virtualinvoke r3.<java.nio.ByteBuffer: int position()>() >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : $i1 = virtualinvoke r3.<java.nio.ByteBuffer: int limit()>()
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : $i1 = virtualinvoke r3.<java.nio.ByteBuffer: int limit()>() >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : r4 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>($r6, $i0, $i1)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : r4 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>($r6, $i0, $i1) >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : $r7 = virtualinvoke r2.<java.nio.CharBuffer: char[] array()>()
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : $r7 = virtualinvoke r2.<java.nio.CharBuffer: char[] array()>() >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : staticinvoke <java.util.Arrays: void fill(char[],char)>($r7, 0)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : staticinvoke <java.util.Arrays: void fill(char[],char)>($r7, 0) >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : $r8 = virtualinvoke r3.<java.nio.ByteBuffer: byte[] array()>()
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : $r8 = virtualinvoke r3.<java.nio.ByteBuffer: byte[] array()>() >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r8, 0)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r8, 0) >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : return r4
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : return r4 >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r8, "AES")
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r8, "AES") >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : r5 = $r7
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : r5 = $r7 >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : $r9 = r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: org.apache.ambari.server.security.encryption.MasterKeyService masterKeyService>
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : $r9 = r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: org.apache.ambari.server.security.encryption.MasterKeyService masterKeyService> >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : $r10 = interfaceinvoke $r9.<org.apache.ambari.server.security.encryption.MasterKeyService: char[] getMasterSecret()>()
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : $r10 = interfaceinvoke $r9.<org.apache.ambari.server.security.encryption.MasterKeyService: char[] getMasterSecret()>() >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : virtualinvoke r1.<java.security.KeyStore: void setKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate[])>(r2, r5, $r10, null)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : virtualinvoke r1.<java.security.KeyStore: void setKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate[])>(r2, r5, $r10, null) >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : goto [?= return]
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : goto [?= return] >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : virtualinvoke r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: void persistCredentialStore(java.security.KeyStore)>(r3)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : virtualinvoke r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: void persistCredentialStore(java.security.KeyStore)>(r3) >>>>>>>> org.apache.ambari.server.security.encryption.FileBasedCredentialStore.persistCredentialStore : $r2 = r0.<org.apache.ambari.server.security.encryption.FileBasedCredentialStore: java.io.File keyStoreFile>
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.persistCredentialStore : $r2 = r0.<org.apache.ambari.server.security.encryption.FileBasedCredentialStore: java.io.File keyStoreFile> >>>>>>>> org.apache.ambari.server.security.encryption.FileBasedCredentialStore.persistCredentialStore : specialinvoke r0.<org.apache.ambari.server.security.encryption.FileBasedCredentialStore: void putKeyStore(java.security.KeyStore,java.io.File)>(r1, $r2)
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.persistCredentialStore : specialinvoke r0.<org.apache.ambari.server.security.encryption.FileBasedCredentialStore: void putKeyStore(java.security.KeyStore,java.io.File)>(r1, $r2) >>>>>>>> org.apache.ambari.server.security.encryption.FileBasedCredentialStore.putKeyStore : $r3 = <org.apache.ambari.server.security.encryption.FileBasedCredentialStore: org.slf4j.Logger LOG>
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.putKeyStore : $r3 = <org.apache.ambari.server.security.encryption.FileBasedCredentialStore: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.security.encryption.FileBasedCredentialStore.putKeyStore : $r7 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.putKeyStore : $r7 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.ambari.server.security.encryption.FileBasedCredentialStore.putKeyStore : interfaceinvoke $r3.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Writing key store to {}", $r7)
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.putKeyStore : interfaceinvoke $r3.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Writing key store to {}", $r7) >>>>>>>> org.apache.ambari.server.security.encryption.FileBasedCredentialStore.putKeyStore : r4 = null
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.putKeyStore : r4 = null >>>>>>>> org.apache.ambari.server.security.encryption.FileBasedCredentialStore.putKeyStore : $r8 = new java.io.FileOutputStream
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.putKeyStore : $r8 = new java.io.FileOutputStream >>>>>>>> org.apache.ambari.server.security.encryption.FileBasedCredentialStore.putKeyStore : $r9 = r0.<org.apache.ambari.server.security.encryption.FileBasedCredentialStore: java.io.File keyStoreFile>
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.putKeyStore : $r9 = r0.<org.apache.ambari.server.security.encryption.FileBasedCredentialStore: java.io.File keyStoreFile> >>>>>>>> org.apache.ambari.server.security.encryption.FileBasedCredentialStore.putKeyStore : specialinvoke $r8.<java.io.FileOutputStream: void <init>(java.io.File)>($r9)
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.putKeyStore : specialinvoke $r8.<java.io.FileOutputStream: void <init>(java.io.File)>($r9) >>>>>>>> org.apache.ambari.server.security.encryption.FileBasedCredentialStore.putKeyStore : r4 = $r8
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.putKeyStore : r4 = $r8 >>>>>>>> org.apache.ambari.server.security.encryption.FileBasedCredentialStore.putKeyStore : virtualinvoke r0.<org.apache.ambari.server.security.encryption.FileBasedCredentialStore: void writeKeyStore(java.security.KeyStore,java.io.OutputStream)>(r1, r4)
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.putKeyStore : virtualinvoke r0.<org.apache.ambari.server.security.encryption.FileBasedCredentialStore: void writeKeyStore(java.security.KeyStore,java.io.OutputStream)>(r1, r4) >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.writeKeyStore : $r4 = r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: org.apache.ambari.server.security.encryption.MasterKeyService masterKeyService>
org.apache.ambari.server.security.encryption.AbstractCredentialStore.writeKeyStore : $r4 = r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: org.apache.ambari.server.security.encryption.MasterKeyService masterKeyService> >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.writeKeyStore : if $r4 != null
org.apache.ambari.server.security.encryption.AbstractCredentialStore.writeKeyStore : if $r4 != null >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.writeKeyStore : $r6 = r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: org.apache.ambari.server.security.encryption.MasterKeyService masterKeyService>
org.apache.ambari.server.security.encryption.AbstractCredentialStore.writeKeyStore : $r6 = r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: org.apache.ambari.server.security.encryption.MasterKeyService masterKeyService> >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.writeKeyStore : $r7 = interfaceinvoke $r6.<org.apache.ambari.server.security.encryption.MasterKeyService: char[] getMasterSecret()>()
org.apache.ambari.server.security.encryption.AbstractCredentialStore.writeKeyStore : $r7 = interfaceinvoke $r6.<org.apache.ambari.server.security.encryption.MasterKeyService: char[] getMasterSecret()>() >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.writeKeyStore : virtualinvoke r1.<java.security.KeyStore: void store(java.io.OutputStream,char[])>(r2, $r7)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.writeKeyStore : virtualinvoke r1.<java.security.KeyStore: void store(java.io.OutputStream,char[])>(r2, $r7) >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.writeKeyStore : goto [?= return]
org.apache.ambari.server.security.encryption.AbstractCredentialStore.writeKeyStore : goto [?= return] >>>>>>>> org.apache.ambari.server.security.encryption.FileBasedCredentialStore.putKeyStore : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r4)
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.putKeyStore : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.OutputStream)>(r4) >>>>>>>> org.apache.ambari.server.security.encryption.FileBasedCredentialStore.putKeyStore : goto [?= return]
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.putKeyStore : goto [?= return] >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : $r7 = r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: java.util.concurrent.locks.Lock lock>
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : $r7 = r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: java.util.concurrent.locks.Lock lock> >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : interfaceinvoke $r7.<java.util.concurrent.locks.Lock: void unlock()>()
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : interfaceinvoke $r7.<java.util.concurrent.locks.Lock: void unlock()>() >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : r9 = interfaceinvoke r7.<org.apache.ambari.server.security.encryption.CredentialStore: org.apache.ambari.server.security.credential.Credential getCredential(java.lang.String)>("password")
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : r9 = interfaceinvoke r7.<org.apache.ambari.server.security.encryption.CredentialStore: org.apache.ambari.server.security.credential.Credential getCredential(java.lang.String)>("password") >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : if r1 != null
org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : if r1 != null >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : $r4 = r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: java.util.concurrent.locks.Lock lock>
org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : $r4 = r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: java.util.concurrent.locks.Lock lock> >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void lock()>()
org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void lock()>() >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : $r5 = virtualinvoke r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: java.security.KeyStore loadCredentialStore()>()
org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : $r5 = virtualinvoke r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: java.security.KeyStore loadCredentialStore()>() >>>>>>>> org.apache.ambari.server.security.encryption.FileBasedCredentialStore.getKeyStore : $l0 = virtualinvoke r1.<java.io.File: long length()>()
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.getKeyStore : $l0 = virtualinvoke r1.<java.io.File: long length()>() >>>>>>>> org.apache.ambari.server.security.encryption.FileBasedCredentialStore.getKeyStore : $b1 = $l0 cmp 0L
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.getKeyStore : $b1 = $l0 cmp 0L >>>>>>>> org.apache.ambari.server.security.encryption.FileBasedCredentialStore.getKeyStore : if $b1 <= 0
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.getKeyStore : if $b1 <= 0 >>>>>>>> org.apache.ambari.server.security.encryption.FileBasedCredentialStore.getKeyStore : $r7 = <org.apache.ambari.server.security.encryption.FileBasedCredentialStore: org.slf4j.Logger LOG>
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.getKeyStore : $r7 = <org.apache.ambari.server.security.encryption.FileBasedCredentialStore: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.security.encryption.FileBasedCredentialStore.getKeyStore : $r8 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.getKeyStore : $r8 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.ambari.server.security.encryption.FileBasedCredentialStore.getKeyStore : interfaceinvoke $r7.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Reading key store from {}", $r8)
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.getKeyStore : interfaceinvoke $r7.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Reading key store from {}", $r8) >>>>>>>> org.apache.ambari.server.security.encryption.FileBasedCredentialStore.getKeyStore : $r9 = new java.io.FileInputStream
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.getKeyStore : $r9 = new java.io.FileInputStream >>>>>>>> org.apache.ambari.server.security.encryption.FileBasedCredentialStore.getKeyStore : specialinvoke $r9.<java.io.FileInputStream: void <init>(java.io.File)>(r1)
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.getKeyStore : specialinvoke $r9.<java.io.FileInputStream: void <init>(java.io.File)>(r1) >>>>>>>> org.apache.ambari.server.security.encryption.FileBasedCredentialStore.getKeyStore : r3 = $r9
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.getKeyStore : r3 = $r9 >>>>>>>> org.apache.ambari.server.security.encryption.FileBasedCredentialStore.getKeyStore : goto [?= r5 = virtualinvoke r0.<org.apache.ambari.server.security.encryption.FileBasedCredentialStore: java.security.KeyStore loadKeyStore(java.io.InputStream,java.lang.String)>(r3, r2)]
org.apache.ambari.server.security.encryption.FileBasedCredentialStore.getKeyStore : goto [?= r5 = virtualinvoke r0.<org.apache.ambari.server.security.encryption.FileBasedCredentialStore: java.security.KeyStore loadKeyStore(java.io.InputStream,java.lang.String)>(r3, r2)] >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : r2 = virtualinvoke r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: org.apache.ambari.server.security.credential.Credential getCredential(java.security.KeyStore,java.lang.String)>($r5, r1)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : r2 = virtualinvoke r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: org.apache.ambari.server.security.credential.Credential getCredential(java.security.KeyStore,java.lang.String)>($r5, r1) >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : r3 = null
org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : r3 = null >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : if r1 == null
org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : if r1 == null >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : $r5 = r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: org.apache.ambari.server.security.encryption.MasterKeyService masterKeyService>
org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : $r5 = r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: org.apache.ambari.server.security.encryption.MasterKeyService masterKeyService> >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : $r6 = interfaceinvoke $r5.<org.apache.ambari.server.security.encryption.MasterKeyService: char[] getMasterSecret()>()
org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : $r6 = interfaceinvoke $r5.<org.apache.ambari.server.security.encryption.MasterKeyService: char[] getMasterSecret()>() >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : r4 = virtualinvoke r1.<java.security.KeyStore: java.security.Key getKey(java.lang.String,char[])>(r2, $r6)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : r4 = virtualinvoke r1.<java.security.KeyStore: java.security.Key getKey(java.lang.String,char[])>(r2, $r6) >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : if r4 == null
org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : if r4 == null >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : $r7 = interfaceinvoke r4.<java.security.Key: byte[] getEncoded()>()
org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : $r7 = interfaceinvoke r4.<java.security.Key: byte[] getEncoded()>() >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : r3 = virtualinvoke r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: char[] toChars(byte[])>($r7)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : r3 = virtualinvoke r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: char[] toChars(byte[])>($r7) >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : if r1 != null
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : if r1 != null >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r1)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r1) >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : $r5 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8")
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : $r5 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8") >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : r3 = virtualinvoke $r5.<java.nio.charset.Charset: java.nio.CharBuffer decode(java.nio.ByteBuffer)>(r2)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : r3 = virtualinvoke $r5.<java.nio.charset.Charset: java.nio.CharBuffer decode(java.nio.ByteBuffer)>(r2) >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : $r6 = virtualinvoke r3.<java.nio.CharBuffer: char[] array()>()
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : $r6 = virtualinvoke r3.<java.nio.CharBuffer: char[] array()>() >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : $i0 = virtualinvoke r3.<java.nio.CharBuffer: int position()>()
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : $i0 = virtualinvoke r3.<java.nio.CharBuffer: int position()>() >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : $i1 = virtualinvoke r3.<java.nio.CharBuffer: int limit()>()
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : $i1 = virtualinvoke r3.<java.nio.CharBuffer: int limit()>() >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : r4 = staticinvoke <java.util.Arrays: char[] copyOfRange(char[],int,int)>($r6, $i0, $i1)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : r4 = staticinvoke <java.util.Arrays: char[] copyOfRange(char[],int,int)>($r6, $i0, $i1) >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : $r7 = virtualinvoke r3.<java.nio.CharBuffer: char[] array()>()
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : $r7 = virtualinvoke r3.<java.nio.CharBuffer: char[] array()>() >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : staticinvoke <java.util.Arrays: void fill(char[],char)>($r7, 0)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : staticinvoke <java.util.Arrays: void fill(char[],char)>($r7, 0) >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : $r8 = virtualinvoke r2.<java.nio.ByteBuffer: byte[] array()>()
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : $r8 = virtualinvoke r2.<java.nio.ByteBuffer: byte[] array()>() >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r8, 0)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r8, 0) >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : return r4
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : return r4 >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : goto [?= $r17 = staticinvoke <org.apache.ambari.server.security.credential.CredentialFactory: org.apache.ambari.server.security.credential.Credential createCredential(char[])>(r3)]
org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : goto [?= $r17 = staticinvoke <org.apache.ambari.server.security.credential.CredentialFactory: org.apache.ambari.server.security.credential.Credential createCredential(char[])>(r3)] >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : $r17 = staticinvoke <org.apache.ambari.server.security.credential.CredentialFactory: org.apache.ambari.server.security.credential.Credential createCredential(char[])>(r3)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : $r17 = staticinvoke <org.apache.ambari.server.security.credential.CredentialFactory: org.apache.ambari.server.security.credential.Credential createCredential(char[])>(r3) >>>>>>>> org.apache.ambari.server.security.credential.CredentialFactory.createCredential : if r0 != null
org.apache.ambari.server.security.credential.CredentialFactory.createCredential : if r0 != null >>>>>>>> org.apache.ambari.server.security.credential.CredentialFactory.createCredential : r1 = staticinvoke <java.lang.String: java.lang.String valueOf(char[])>(r0)
org.apache.ambari.server.security.credential.CredentialFactory.createCredential : r1 = staticinvoke <java.lang.String: java.lang.String valueOf(char[])>(r0) >>>>>>>> org.apache.ambari.server.security.credential.CredentialFactory.createCredential : $z0 = staticinvoke <org.apache.ambari.server.security.credential.PrincipalKeyCredential: boolean isValidValue(java.lang.String)>(r1)
org.apache.ambari.server.security.credential.CredentialFactory.createCredential : $z0 = staticinvoke <org.apache.ambari.server.security.credential.PrincipalKeyCredential: boolean isValidValue(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.security.credential.PrincipalKeyCredential.isValidValue : if r0 == null
org.apache.ambari.server.security.credential.PrincipalKeyCredential.isValidValue : if r0 == null >>>>>>>> org.apache.ambari.server.security.credential.PrincipalKeyCredential.isValidValue : $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("PrincipalKeyCredential")
org.apache.ambari.server.security.credential.PrincipalKeyCredential.isValidValue : $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("PrincipalKeyCredential") >>>>>>>> org.apache.ambari.server.security.credential.PrincipalKeyCredential.isValidValue : if $z0 == 0
org.apache.ambari.server.security.credential.PrincipalKeyCredential.isValidValue : if $z0 == 0 >>>>>>>> org.apache.ambari.server.security.credential.PrincipalKeyCredential.isValidValue : $z1 = 0
org.apache.ambari.server.security.credential.PrincipalKeyCredential.isValidValue : $z1 = 0 >>>>>>>> org.apache.ambari.server.security.credential.PrincipalKeyCredential.isValidValue : return $z1
org.apache.ambari.server.security.credential.PrincipalKeyCredential.isValidValue : return $z1 >>>>>>>> org.apache.ambari.server.security.credential.CredentialFactory.createCredential : if $z0 == 0
org.apache.ambari.server.security.credential.CredentialFactory.createCredential : if $z0 == 0 >>>>>>>> org.apache.ambari.server.security.credential.CredentialFactory.createCredential : $r3 = staticinvoke <org.apache.ambari.server.security.credential.GenericKeyCredential: org.apache.ambari.server.security.credential.GenericKeyCredential fromValue(java.lang.String)>(r1)
org.apache.ambari.server.security.credential.CredentialFactory.createCredential : $r3 = staticinvoke <org.apache.ambari.server.security.credential.GenericKeyCredential: org.apache.ambari.server.security.credential.GenericKeyCredential fromValue(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.security.credential.GenericKeyCredential.fromValue : $r1 = new org.apache.ambari.server.security.credential.GenericKeyCredential
org.apache.ambari.server.security.credential.GenericKeyCredential.fromValue : $r1 = new org.apache.ambari.server.security.credential.GenericKeyCredential >>>>>>>> org.apache.ambari.server.security.credential.GenericKeyCredential.fromValue : if r0 != null
org.apache.ambari.server.security.credential.GenericKeyCredential.fromValue : if r0 != null >>>>>>>> org.apache.ambari.server.security.credential.GenericKeyCredential.fromValue : $r3 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>()
org.apache.ambari.server.security.credential.GenericKeyCredential.fromValue : $r3 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>() >>>>>>>> org.apache.ambari.server.security.credential.GenericKeyCredential.fromValue : specialinvoke $r1.<org.apache.ambari.server.security.credential.GenericKeyCredential: void <init>(char[])>($r3)
org.apache.ambari.server.security.credential.GenericKeyCredential.fromValue : specialinvoke $r1.<org.apache.ambari.server.security.credential.GenericKeyCredential: void <init>(char[])>($r3) >>>>>>>> org.apache.ambari.server.security.credential.GenericKeyCredential.fromValue : return $r1
org.apache.ambari.server.security.credential.GenericKeyCredential.fromValue : return $r1 >>>>>>>> org.apache.ambari.server.security.credential.CredentialFactory.createCredential : return $r3
org.apache.ambari.server.security.credential.CredentialFactory.createCredential : return $r3 >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : return $r17
org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : return $r17 >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : $r6 = r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: java.util.concurrent.locks.Lock lock>
org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : $r6 = r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: java.util.concurrent.locks.Lock lock> >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : interfaceinvoke $r6.<java.util.concurrent.locks.Lock: void unlock()>()
org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : interfaceinvoke $r6.<java.util.concurrent.locks.Lock: void unlock()>() >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : return r2
org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : return r2 >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : $r14 = new java.lang.String
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : $r14 = new java.lang.String >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : $r15 = interfaceinvoke r9.<org.apache.ambari.server.security.credential.Credential: char[] toValue()>()
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : $r15 = interfaceinvoke r9.<org.apache.ambari.server.security.credential.Credential: char[] toValue()>() >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : specialinvoke $r14.<java.lang.String: void <init>(char[])>($r15)
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : specialinvoke $r14.<java.lang.String: void <init>(char[])>($r15) >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.String)>(r8, $r14)
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.String)>(r8, $r14) >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : interfaceinvoke r7.<org.apache.ambari.server.security.encryption.CredentialStore: void addCredential(java.lang.String,org.apache.ambari.server.security.credential.Credential)>("null_password", null)
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : interfaceinvoke r7.<org.apache.ambari.server.security.encryption.CredentialStore: void addCredential(java.lang.String,org.apache.ambari.server.security.credential.Credential)>("null_password", null) >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : $r6 = null
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : $r6 = null >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : goto [?= r4 = $r6]
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : goto [?= r4 = $r6] >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : r5 = null
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : r5 = null >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : goto [?= $r9 = r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: org.apache.ambari.server.security.encryption.MasterKeyService masterKeyService>]
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : goto [?= $r9 = r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: org.apache.ambari.server.security.encryption.MasterKeyService masterKeyService>] >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : $r16 = interfaceinvoke r7.<org.apache.ambari.server.security.encryption.CredentialStore: org.apache.ambari.server.security.credential.Credential getCredential(java.lang.String)>("null_password")
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : $r16 = interfaceinvoke r7.<org.apache.ambari.server.security.encryption.CredentialStore: org.apache.ambari.server.security.credential.Credential getCredential(java.lang.String)>("null_password") >>>>>>>> org.apache.ambari.server.security.credential.CredentialFactory.createCredential : return null
org.apache.ambari.server.security.credential.CredentialFactory.createCredential : return null >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : staticinvoke <junit.framework.Assert: void assertNull(java.lang.Object)>($r16)
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : staticinvoke <junit.framework.Assert: void assertNull(java.lang.Object)>($r16) >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : $r17 = new org.apache.ambari.server.security.credential.GenericKeyCredential
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : $r17 = new org.apache.ambari.server.security.credential.GenericKeyCredential >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : $r18 = newarray (char)[0]
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : $r18 = newarray (char)[0] >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : specialinvoke $r17.<org.apache.ambari.server.security.credential.GenericKeyCredential: void <init>(char[])>($r18)
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : specialinvoke $r17.<org.apache.ambari.server.security.credential.GenericKeyCredential: void <init>(char[])>($r18) >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : interfaceinvoke r7.<org.apache.ambari.server.security.encryption.CredentialStore: void addCredential(java.lang.String,org.apache.ambari.server.security.credential.Credential)>("empty_password", $r17)
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : interfaceinvoke r7.<org.apache.ambari.server.security.encryption.CredentialStore: void addCredential(java.lang.String,org.apache.ambari.server.security.credential.Credential)>("empty_password", $r17) >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : $r19 = interfaceinvoke r7.<org.apache.ambari.server.security.encryption.CredentialStore: org.apache.ambari.server.security.credential.Credential getCredential(java.lang.String)>("empty_password")
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : $r19 = interfaceinvoke r7.<org.apache.ambari.server.security.encryption.CredentialStore: org.apache.ambari.server.security.credential.Credential getCredential(java.lang.String)>("empty_password") >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : staticinvoke <junit.framework.Assert: void assertNull(java.lang.Object)>($r19)
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : staticinvoke <junit.framework.Assert: void assertNull(java.lang.Object)>($r19) >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : $z0 = virtualinvoke r5.<java.io.File: boolean exists()>()
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : $z0 = virtualinvoke r5.<java.io.File: boolean exists()>() >>>>>>>> org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreTest : staticinvoke <junit.framework.Assert: void assertFalse(boolean)>($z0)
