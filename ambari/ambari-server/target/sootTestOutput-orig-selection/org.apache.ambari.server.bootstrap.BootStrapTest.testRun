org.apache.ambari.server.state.StackId.parseStackIdHelper : if r2 == null >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $z0 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>()
org.apache.ambari.server.state.StackId.parseStackIdHelper : $z0 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : if $z0 == 0
org.apache.ambari.server.state.StackId.parseStackIdHelper : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : i0 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(45)
org.apache.ambari.server.state.StackId.parseStackIdHelper : i0 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(45) >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : if i0 == -1
org.apache.ambari.server.state.StackId.parseStackIdHelper : if i0 == -1 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $i1 = virtualinvoke r2.<java.lang.String: int length()>()
org.apache.ambari.server.state.StackId.parseStackIdHelper : $i1 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $i2 = i0 + 1
org.apache.ambari.server.state.StackId.parseStackIdHelper : $i2 = i0 + 1 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : if $i1 > $i2
org.apache.ambari.server.state.StackId.parseStackIdHelper : if $i1 > $i2 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $r8 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0)
org.apache.ambari.server.state.StackId.parseStackIdHelper : $r8 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0) >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : r1.<org.apache.ambari.server.state.StackId: java.lang.String stackName> = $r8
org.apache.ambari.server.state.StackId.parseStackIdHelper : r1.<org.apache.ambari.server.state.StackId: java.lang.String stackName> = $r8 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $i3 = i0 + 1
org.apache.ambari.server.state.StackId.parseStackIdHelper : $i3 = i0 + 1 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $r9 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i3)
org.apache.ambari.server.state.StackId.parseStackIdHelper : $r9 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i3) >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : r1.<org.apache.ambari.server.state.StackId: java.lang.String stackVersion> = $r9
org.apache.ambari.server.state.StackId.parseStackIdHelper : r1.<org.apache.ambari.server.state.StackId: java.lang.String stackVersion> = $r9 >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : r1 = "src/test/resources/stacks"
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : r1 = "src/test/resources/stacks" >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : r2 = "src/test/resources/version"
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : r2 = "src/test/resources/version" >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : r3 = "src/test/resources/"
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : r3 = "src/test/resources/" >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : r4 = "src/test/resources/"
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : r4 = "src/test/resources/" >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r8 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name")
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r8 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name") >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z0 = virtualinvoke $r8.<java.lang.String: boolean contains(java.lang.CharSequence)>("Windows")
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z0 = virtualinvoke $r8.<java.lang.String: boolean contains(java.lang.CharSequence)>("Windows") >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z0 == 0
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z0 == 0 >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r17 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r17 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r18 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SERVER_PERSISTENCE_TYPE>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r18 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SERVER_PERSISTENCE_TYPE> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r19 = virtualinvoke $r18.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r19 = virtualinvoke $r18.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getKey : $r1 = r0.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String m_key>
org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getKey : $r1 = r0.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String m_key> >>>>>>>> org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getKey : return $r1
org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getKey : return $r1 >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z1 = virtualinvoke $r17.<java.util.Properties: boolean containsKey(java.lang.Object)>($r19)
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z1 = virtualinvoke $r17.<java.util.Properties: boolean containsKey(java.lang.Object)>($r19) >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z1 != 0
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z1 != 0 >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r20 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r20 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r21 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SERVER_PERSISTENCE_TYPE>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r21 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SERVER_PERSISTENCE_TYPE> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r22 = virtualinvoke $r21.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r22 = virtualinvoke $r21.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : virtualinvoke $r20.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r22, "in-memory")
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : virtualinvoke $r20.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r22, "in-memory") >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r24 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r24 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r25 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty METADATA_DIR_PATH>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r25 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty METADATA_DIR_PATH> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r26 = virtualinvoke $r25.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r26 = virtualinvoke $r25.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z2 = virtualinvoke $r24.<java.util.Properties: boolean containsKey(java.lang.Object)>($r26)
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z2 = virtualinvoke $r24.<java.util.Properties: boolean containsKey(java.lang.Object)>($r26) >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z2 != 0
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z2 != 0 >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r27 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r27 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r28 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty METADATA_DIR_PATH>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r28 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty METADATA_DIR_PATH> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r29 = virtualinvoke $r28.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r29 = virtualinvoke $r28.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : virtualinvoke $r27.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r29, r1)
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : virtualinvoke $r27.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r29, r1) >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r31 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r31 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r32 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SERVER_VERSION_FILE>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r32 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SERVER_VERSION_FILE> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r33 = virtualinvoke $r32.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r33 = virtualinvoke $r32.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z3 = virtualinvoke $r31.<java.util.Properties: boolean containsKey(java.lang.Object)>($r33)
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z3 = virtualinvoke $r31.<java.util.Properties: boolean containsKey(java.lang.Object)>($r33) >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z3 != 0
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z3 != 0 >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r34 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r34 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r35 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SERVER_VERSION_FILE>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r35 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SERVER_VERSION_FILE> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r36 = virtualinvoke $r35.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r36 = virtualinvoke $r35.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : virtualinvoke $r34.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r36, r2)
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : virtualinvoke $r34.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r36, r2) >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r38 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r38 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r39 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty OS_VERSION>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r39 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty OS_VERSION> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r40 = virtualinvoke $r39.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r40 = virtualinvoke $r39.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z4 = virtualinvoke $r38.<java.util.Properties: boolean containsKey(java.lang.Object)>($r40)
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z4 = virtualinvoke $r38.<java.util.Properties: boolean containsKey(java.lang.Object)>($r40) >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z4 != 0
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z4 != 0 >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r41 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r41 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r42 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty OS_VERSION>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r42 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty OS_VERSION> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r43 = virtualinvoke $r42.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r43 = virtualinvoke $r42.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : virtualinvoke $r41.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r43, "centos5")
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : virtualinvoke $r41.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r43, "centos5") >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r45 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r45 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r46 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SHARED_RESOURCES_DIR>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r46 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SHARED_RESOURCES_DIR> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r47 = virtualinvoke $r46.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r47 = virtualinvoke $r46.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z5 = virtualinvoke $r45.<java.util.Properties: boolean containsKey(java.lang.Object)>($r47)
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z5 = virtualinvoke $r45.<java.util.Properties: boolean containsKey(java.lang.Object)>($r47) >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z5 != 0
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z5 != 0 >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r48 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r48 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r49 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SHARED_RESOURCES_DIR>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r49 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SHARED_RESOURCES_DIR> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r50 = virtualinvoke $r49.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r50 = virtualinvoke $r49.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : virtualinvoke $r48.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r50, r3)
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : virtualinvoke $r48.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r50, r3) >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r52 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r52 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r53 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty RESOURCES_DIR>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r53 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty RESOURCES_DIR> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r54 = virtualinvoke $r53.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r54 = virtualinvoke $r53.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z6 = virtualinvoke $r52.<java.util.Properties: boolean containsKey(java.lang.Object)>($r54)
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z6 = virtualinvoke $r52.<java.util.Properties: boolean containsKey(java.lang.Object)>($r54) >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z6 != 0
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z6 != 0 >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r55 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r55 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r56 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty RESOURCES_DIR>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r56 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty RESOURCES_DIR> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r57 = virtualinvoke $r56.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r57 = virtualinvoke $r56.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : virtualinvoke $r55.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r57, r4)
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : virtualinvoke $r55.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r57, r4) >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r59 = newarray (com.google.inject.Module)[1]
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r59 = newarray (com.google.inject.Module)[1] >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r60 = new org.apache.ambari.server.orm.InMemoryDefaultTestModule$BeanDefinitionsCachingTestControllerModule
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r60 = new org.apache.ambari.server.orm.InMemoryDefaultTestModule$BeanDefinitionsCachingTestControllerModule >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r61 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r61 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : specialinvoke $r60.<org.apache.ambari.server.orm.InMemoryDefaultTestModule$BeanDefinitionsCachingTestControllerModule: void <init>(java.util.Properties)>($r61)
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : specialinvoke $r60.<org.apache.ambari.server.orm.InMemoryDefaultTestModule$BeanDefinitionsCachingTestControllerModule: void <init>(java.util.Properties)>($r61) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : r2 = null
org.apache.ambari.server.configuration.Configuration.getProperty : r2 = null >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : $r3 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object getDefaultValue()>()
org.apache.ambari.server.configuration.Configuration.getProperty : $r3 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object getDefaultValue()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getDefaultValue : $r1 = r0.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object m_defaultValue>
org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getDefaultValue : $r1 = r0.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object m_defaultValue> >>>>>>>> org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getDefaultValue : return $r1
org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getDefaultValue : return $r1 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : if null == $r3
org.apache.ambari.server.configuration.Configuration.getProperty : if null == $r3 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : $r4 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object getDefaultValue()>()
org.apache.ambari.server.configuration.Configuration.getProperty : $r4 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object getDefaultValue()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4)
org.apache.ambari.server.configuration.Configuration.getProperty : r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : $r5 = r0.<org.apache.ambari.server.configuration.Configuration: java.util.Properties properties>
org.apache.ambari.server.configuration.Configuration.getProperty : $r5 = r0.<org.apache.ambari.server.configuration.Configuration: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : $r6 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.configuration.Configuration.getProperty : $r6 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : $r7 = virtualinvoke $r5.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>($r6, r2)
org.apache.ambari.server.configuration.Configuration.getProperty : $r7 = virtualinvoke $r5.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>($r6, r2) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : return $r7
org.apache.ambari.server.configuration.Configuration.getProperty : return $r7 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty API_USE_SSL>
org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty API_USE_SSL> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1)
org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r2)
org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r2) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : return $z0
org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : return $z0 >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r1 = new org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r1 = new org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : specialinvoke $r1.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: void <init>()>()
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : specialinvoke $r1.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: void <init>()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : r2 = $r1
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : r2 = $r1 >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r3 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty KERBEROS_AUTH_ENABLED>
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r3 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty KERBEROS_AUTH_ENABLED> >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r13 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r3)
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r13 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r3) >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r13)
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r13) >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $z0 = virtualinvoke $r14.<java.lang.Boolean: boolean booleanValue()>()
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $z0 = virtualinvoke $r14.<java.lang.Boolean: boolean booleanValue()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : virtualinvoke r2.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: void setKerberosAuthenticationEnabled(boolean)>($z0)
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : virtualinvoke r2.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: void setKerberosAuthenticationEnabled(boolean)>($z0) >>>>>>>> org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.setKerberosAuthenticationEnabled : r0.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean kerberosAuthenticationEnabled> = z0
org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.setKerberosAuthenticationEnabled : r0.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean kerberosAuthenticationEnabled> = z0 >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $z1 = virtualinvoke r2.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean isKerberosAuthenticationEnabled()>()
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $z1 = virtualinvoke r2.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean isKerberosAuthenticationEnabled()>() >>>>>>>> org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.isKerberosAuthenticationEnabled : $z0 = r0.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean kerberosAuthenticationEnabled>
org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.isKerberosAuthenticationEnabled : $z0 = r0.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean kerberosAuthenticationEnabled> >>>>>>>> org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.isKerberosAuthenticationEnabled : return $z0
org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.isKerberosAuthenticationEnabled : return $z0 >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : if $z1 != 0
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : if $z1 != 0 >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : return r2
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : return r2 >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_PATH>
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_PATH> >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r4 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1)
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r4 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1) >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : if $r4 == null
org.apache.ambari.server.configuration.Configuration.loadSSLParams : if $r4 == null >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r7 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_PASSWORD>
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r7 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_PASSWORD> >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r8 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r7)
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r8 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r7) >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : if $r8 == null
org.apache.ambari.server.configuration.Configuration.loadSSLParams : if $r8 == null >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r15 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_TYPE>
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r15 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_TYPE> >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r16 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r15)
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r16 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r15) >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : if $r16 == null
org.apache.ambari.server.configuration.Configuration.loadSSLParams : if $r16 == null >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r1 = <org.apache.ambari.server.configuration.Configuration: org.slf4j.Logger LOG>
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r1 = <org.apache.ambari.server.configuration.Configuration: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r2 = new java.lang.StringBuilder
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Hosts Mapping File ")
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Hosts Mapping File ") >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r3 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SRVR_HOSTS_MAPPING>
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r3 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SRVR_HOSTS_MAPPING> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r5 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r3)
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r5 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r3) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5)
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : interfaceinvoke $r1.<org.slf4j.Logger: void info(java.lang.String)>($r7)
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : interfaceinvoke $r1.<org.slf4j.Logger: void info(java.lang.String)>($r7) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r8 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SRVR_HOSTS_MAPPING>
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r8 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SRVR_HOSTS_MAPPING> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r9 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r8)
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r9 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r8) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : return $r9
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : return $r9 >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : r1 = null
org.apache.ambari.server.controller.HostsMap.setupMap : r1 = null >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : $r6 = <org.apache.ambari.server.controller.HostsMap: org.slf4j.Logger LOG>
org.apache.ambari.server.controller.HostsMap.setupMap : $r6 = <org.apache.ambari.server.controller.HostsMap: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : $r2 = new java.lang.StringBuilder
org.apache.ambari.server.controller.HostsMap.setupMap : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.controller.HostsMap.setupMap : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Using hostsmap file ")
org.apache.ambari.server.controller.HostsMap.setupMap : $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Using hostsmap file ") >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : $r8 = r0.<org.apache.ambari.server.controller.HostsMap: java.lang.String hostsMapFile>
org.apache.ambari.server.controller.HostsMap.setupMap : $r8 = r0.<org.apache.ambari.server.controller.HostsMap: java.lang.String hostsMapFile> >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)
org.apache.ambari.server.controller.HostsMap.setupMap : $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8) >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.controller.HostsMap.setupMap : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String)>($r10)
org.apache.ambari.server.controller.HostsMap.setupMap : interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String)>($r10) >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : $r11 = r0.<org.apache.ambari.server.controller.HostsMap: java.lang.String hostsMapFile>
org.apache.ambari.server.controller.HostsMap.setupMap : $r11 = r0.<org.apache.ambari.server.controller.HostsMap: java.lang.String hostsMapFile> >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : if $r11 == null
org.apache.ambari.server.controller.HostsMap.setupMap : if $r11 == null >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : if r1 == null
org.apache.ambari.server.controller.HostsMap.setupMap : if r1 == null >>>>>>>> org.apache.ambari.server.configuration.Configuration.getSharedResourcesDirPath : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SHARED_RESOURCES_DIR>
org.apache.ambari.server.configuration.Configuration.getSharedResourcesDirPath : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SHARED_RESOURCES_DIR> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getSharedResourcesDirPath : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1)
org.apache.ambari.server.configuration.Configuration.getSharedResourcesDirPath : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getSharedResourcesDirPath : return $r2
org.apache.ambari.server.configuration.Configuration.getSharedResourcesDirPath : return $r2 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : r2 = null
org.apache.ambari.server.state.stack.OsFamily.init : r2 = null >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : $r8 = new java.io.File
org.apache.ambari.server.state.stack.OsFamily.init : $r8 = new java.io.File >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : specialinvoke $r8.<java.io.File: void <init>(java.lang.String,java.lang.String)>(r1, "os_family.json")
org.apache.ambari.server.state.stack.OsFamily.init : specialinvoke $r8.<java.io.File: void <init>(java.lang.String,java.lang.String)>(r1, "os_family.json") >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : r3 = $r8
org.apache.ambari.server.state.stack.OsFamily.init : r3 = $r8 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : $z0 = virtualinvoke r3.<java.io.File: boolean exists()>()
org.apache.ambari.server.state.stack.OsFamily.init : $z0 = virtualinvoke r3.<java.io.File: boolean exists()>() >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : if $z0 != 0
org.apache.ambari.server.state.stack.OsFamily.init : if $z0 != 0 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : $r9 = new java.lang.Exception
org.apache.ambari.server.state.stack.OsFamily.init : $r9 = new java.lang.Exception >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : specialinvoke $r9.<java.lang.Exception: void <init>()>()
org.apache.ambari.server.state.stack.OsFamily.init : specialinvoke $r9.<java.lang.Exception: void <init>()>() >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : throw $r9
org.apache.ambari.server.state.stack.OsFamily.init : throw $r9 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : r19 = $r18
org.apache.ambari.server.state.stack.OsFamily.init : r19 = $r18 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : $r20 = r0.<org.apache.ambari.server.state.stack.OsFamily: org.slf4j.Logger LOG>
org.apache.ambari.server.state.stack.OsFamily.init : $r20 = r0.<org.apache.ambari.server.state.stack.OsFamily: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : $r21 = newarray (java.lang.Object)[1]
org.apache.ambari.server.state.stack.OsFamily.init : $r21 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : $r6 = new java.io.File
org.apache.ambari.server.state.stack.OsFamily.init : $r6 = new java.io.File >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : specialinvoke $r6.<java.io.File: void <init>(java.lang.String,java.lang.String)>(r1, "os_family.json")
org.apache.ambari.server.state.stack.OsFamily.init : specialinvoke $r6.<java.io.File: void <init>(java.lang.String,java.lang.String)>(r1, "os_family.json") >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : $r22 = virtualinvoke $r6.<java.io.File: java.lang.String toString()>()
org.apache.ambari.server.state.stack.OsFamily.init : $r22 = virtualinvoke $r6.<java.io.File: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : $r21[0] = $r22
org.apache.ambari.server.state.stack.OsFamily.init : $r21[0] = $r22 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : $r23 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Could not load OS family definition from %s file", $r21)
org.apache.ambari.server.state.stack.OsFamily.init : $r23 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Could not load OS family definition from %s file", $r21) >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : interfaceinvoke $r20.<org.slf4j.Logger: void error(java.lang.String)>($r23)
org.apache.ambari.server.state.stack.OsFamily.init : interfaceinvoke $r20.<org.slf4j.Logger: void error(java.lang.String)>($r23) >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : $r24 = new java.lang.RuntimeException
org.apache.ambari.server.state.stack.OsFamily.init : $r24 = new java.lang.RuntimeException >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : specialinvoke $r24.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r19)
org.apache.ambari.server.state.stack.OsFamily.init : specialinvoke $r24.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r19) >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : throw $r24
org.apache.ambari.server.state.stack.OsFamily.init : throw $r24 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : r7 = $r25
org.apache.ambari.server.state.stack.OsFamily.init : r7 = $r25 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r2)
org.apache.ambari.server.state.stack.OsFamily.init : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r2) >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : throw r7
org.apache.ambari.server.state.stack.OsFamily.init : throw r7 >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : r74 = $r73
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : r74 = $r73 >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r75 = new java.lang.RuntimeException
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r75 = new java.lang.RuntimeException >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : specialinvoke $r75.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r74)
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : specialinvoke $r75.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r74) >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : throw $r75
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : throw $r75 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getMetadataPath : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty METADATA_DIR_PATH>
org.apache.ambari.server.configuration.Configuration.getMetadataPath : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty METADATA_DIR_PATH> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getMetadataPath : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1)
org.apache.ambari.server.configuration.Configuration.getMetadataPath : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getMetadataPath : return $r2
org.apache.ambari.server.configuration.Configuration.getMetadataPath : return $r2 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getCommonServicesPath : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty COMMON_SERVICES_DIR_PATH>
org.apache.ambari.server.configuration.Configuration.getCommonServicesPath : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty COMMON_SERVICES_DIR_PATH> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getCommonServicesPath : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1)
org.apache.ambari.server.configuration.Configuration.getCommonServicesPath : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getCommonServicesPath : return $r2
org.apache.ambari.server.configuration.Configuration.getCommonServicesPath : return $r2 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getExtensionsPath : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty EXTENSIONS_DIR_PATH>
org.apache.ambari.server.configuration.Configuration.getExtensionsPath : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty EXTENSIONS_DIR_PATH> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getExtensionsPath : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1)
org.apache.ambari.server.configuration.Configuration.getExtensionsPath : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getExtensionsPath : return $r2
org.apache.ambari.server.configuration.Configuration.getExtensionsPath : return $r2 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getServerVersionFilePath : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SERVER_VERSION_FILE>
org.apache.ambari.server.configuration.Configuration.getServerVersionFilePath : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SERVER_VERSION_FILE> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getServerVersionFilePath : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1)
org.apache.ambari.server.configuration.Configuration.getServerVersionFilePath : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getServerVersionFilePath : return $r2
org.apache.ambari.server.configuration.Configuration.getServerVersionFilePath : return $r2 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getCustomActionDefinitionPath : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty CUSTOM_ACTION_DEFINITION>
org.apache.ambari.server.configuration.Configuration.getCustomActionDefinitionPath : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty CUSTOM_ACTION_DEFINITION> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getCustomActionDefinitionPath : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1)
org.apache.ambari.server.configuration.Configuration.getCustomActionDefinitionPath : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getCustomActionDefinitionPath : return $r2
org.apache.ambari.server.configuration.Configuration.getCustomActionDefinitionPath : return $r2 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getBootStrapDir : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty BOOTSTRAP_DIRECTORY>
org.apache.ambari.server.configuration.Configuration.getBootStrapDir : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty BOOTSTRAP_DIRECTORY> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getBootStrapDir : r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1)
org.apache.ambari.server.configuration.Configuration.getBootStrapDir : r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getBootStrapDir : $r3 = new java.io.File
org.apache.ambari.server.configuration.Configuration.getBootStrapDir : $r3 = new java.io.File >>>>>>>> org.apache.ambari.server.configuration.Configuration.getBootStrapDir : specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>(r2)
org.apache.ambari.server.configuration.Configuration.getBootStrapDir : specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>(r2) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getBootStrapDir : return $r3
org.apache.ambari.server.configuration.Configuration.getBootStrapDir : return $r3 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getBootStrapScript : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty BOOTSTRAP_SCRIPT>
org.apache.ambari.server.configuration.Configuration.getBootStrapScript : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty BOOTSTRAP_SCRIPT> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getBootStrapScript : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1)
org.apache.ambari.server.configuration.Configuration.getBootStrapScript : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getBootStrapScript : return $r2
org.apache.ambari.server.configuration.Configuration.getBootStrapScript : return $r2 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getBootSetupAgentScript : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty BOOTSTRAP_SETUP_AGENT_SCRIPT>
org.apache.ambari.server.configuration.Configuration.getBootSetupAgentScript : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty BOOTSTRAP_SETUP_AGENT_SCRIPT> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getBootSetupAgentScript : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1)
org.apache.ambari.server.configuration.Configuration.getBootSetupAgentScript : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getBootSetupAgentScript : return $r2
org.apache.ambari.server.configuration.Configuration.getBootSetupAgentScript : return $r2 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getBootSetupAgentPassword : $r3 = r0.<org.apache.ambari.server.configuration.Configuration: java.util.Map configsMap>
org.apache.ambari.server.configuration.Configuration.getBootSetupAgentPassword : $r3 = r0.<org.apache.ambari.server.configuration.Configuration: java.util.Map configsMap> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getBootSetupAgentPassword : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty PASSPHRASE>
org.apache.ambari.server.configuration.Configuration.getBootSetupAgentPassword : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty PASSPHRASE> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getBootSetupAgentPassword : $r4 = virtualinvoke $r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.configuration.Configuration.getBootSetupAgentPassword : $r4 = virtualinvoke $r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.getBootSetupAgentPassword : $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4)
org.apache.ambari.server.configuration.Configuration.getBootSetupAgentPassword : $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getBootSetupAgentPassword : r2 = (java.lang.String) $r5
org.apache.ambari.server.configuration.Configuration.getBootSetupAgentPassword : r2 = (java.lang.String) $r5 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getBootSetupAgentPassword : if null == r2
org.apache.ambari.server.configuration.Configuration.getBootSetupAgentPassword : if null == r2 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getBootSetupAgentPassword : $r6 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty BOOTSTRAP_SETUP_AGENT_PASSWORD>
org.apache.ambari.server.configuration.Configuration.getBootSetupAgentPassword : $r6 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty BOOTSTRAP_SETUP_AGENT_PASSWORD> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getBootSetupAgentPassword : $r7 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r6)
org.apache.ambari.server.configuration.Configuration.getBootSetupAgentPassword : $r7 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r6) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getBootSetupAgentPassword : return $r7
org.apache.ambari.server.configuration.Configuration.getBootSetupAgentPassword : return $r7 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getMasterHostname : $r3 = r0.<org.apache.ambari.server.configuration.Configuration: java.util.Properties properties>
org.apache.ambari.server.configuration.Configuration.getMasterHostname : $r3 = r0.<org.apache.ambari.server.configuration.Configuration: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getMasterHostname : $r2 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty BOOTSTRAP_MASTER_HOSTNAME>
org.apache.ambari.server.configuration.Configuration.getMasterHostname : $r2 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty BOOTSTRAP_MASTER_HOSTNAME> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getMasterHostname : $r4 = virtualinvoke $r2.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.configuration.Configuration.getMasterHostname : $r4 = virtualinvoke $r2.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.getMasterHostname : $r5 = virtualinvoke $r3.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>($r4, r1)
org.apache.ambari.server.configuration.Configuration.getMasterHostname : $r5 = virtualinvoke $r3.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>($r4, r1) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getMasterHostname : return $r5
org.apache.ambari.server.configuration.Configuration.getMasterHostname : return $r5 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getServerOsType : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty OS_VERSION>
org.apache.ambari.server.configuration.Configuration.getServerOsType : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty OS_VERSION> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getServerOsType : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1)
org.apache.ambari.server.configuration.Configuration.getServerOsType : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getServerOsType : return $r2
org.apache.ambari.server.configuration.Configuration.getServerOsType : return $r2 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getServerOsFamily : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty OS_FAMILY>
org.apache.ambari.server.configuration.Configuration.getServerOsFamily : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty OS_FAMILY> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getServerOsFamily : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1)
org.apache.ambari.server.configuration.Configuration.getServerOsFamily : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getServerOsFamily : return $r2
org.apache.ambari.server.configuration.Configuration.getServerOsFamily : return $r2 >>>>>>>> org.apache.ambari.server.api.services.AmbariMetaInfo.getServerVersion : $r1 = r0.<org.apache.ambari.server.api.services.AmbariMetaInfo: java.lang.String serverVersion>
org.apache.ambari.server.api.services.AmbariMetaInfo.getServerVersion : $r1 = r0.<org.apache.ambari.server.api.services.AmbariMetaInfo: java.lang.String serverVersion> >>>>>>>> org.apache.ambari.server.api.services.AmbariMetaInfo.getServerVersion : return $r1
org.apache.ambari.server.api.services.AmbariMetaInfo.getServerVersion : return $r1 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getClientApiPort : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty CLIENT_API_PORT>
org.apache.ambari.server.configuration.Configuration.getClientApiPort : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty CLIENT_API_PORT> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getClientApiPort : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1)
org.apache.ambari.server.configuration.Configuration.getClientApiPort : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getClientApiPort : $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2)
org.apache.ambari.server.configuration.Configuration.getClientApiPort : $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getClientApiPort : return $i0
org.apache.ambari.server.configuration.Configuration.getClientApiPort : return $i0 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.init : $r2 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: java.io.File bootStrapDir>
org.apache.ambari.server.bootstrap.BootStrapImpl.init : $r2 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: java.io.File bootStrapDir> >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.init : $z1 = virtualinvoke $r2.<java.io.File: boolean exists()>()
org.apache.ambari.server.bootstrap.BootStrapImpl.init : $z1 = virtualinvoke $r2.<java.io.File: boolean exists()>() >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.init : if $z1 != 0
org.apache.ambari.server.bootstrap.BootStrapImpl.init : if $z1 != 0 >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.setSshKey : r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String sshKey> = r1
org.apache.ambari.server.bootstrap.SshHostInfo.setSshKey : r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String sshKey> = r1 >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.setUserRunAs : r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String userRunAs> = r1
org.apache.ambari.server.bootstrap.SshHostInfo.setUserRunAs : r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String userRunAs> = r1 >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.setHosts : r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.util.List hosts> = r1
org.apache.ambari.server.bootstrap.SshHostInfo.setHosts : r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.util.List hosts> = r1 >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.setUser : r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String user> = r1
org.apache.ambari.server.bootstrap.SshHostInfo.setUser : r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String user> = r1 >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.setPassword : r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String password> = r1
org.apache.ambari.server.bootstrap.SshHostInfo.setPassword : r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String password> = r1 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r2 = new org.apache.ambari.server.bootstrap.BSResponse
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r2 = new org.apache.ambari.server.bootstrap.BSResponse >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : specialinvoke $r2.<org.apache.ambari.server.bootstrap.BSResponse: void <init>()>()
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : specialinvoke $r2.<org.apache.ambari.server.bootstrap.BSResponse: void <init>()>() >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : r3 = $r2
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : r3 = $r2 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r5 = <org.apache.ambari.server.bootstrap.BootStrapImpl: org.apache.commons.logging.Log LOG>
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r5 = <org.apache.ambari.server.bootstrap.BootStrapImpl: org.apache.commons.logging.Log LOG> >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r6 = new java.lang.StringBuilder
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r6 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BootStrapping hosts ")
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BootStrapping hosts ") >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r8 = virtualinvoke r1.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String hostListAsString()>()
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r8 = virtualinvoke r1.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String hostListAsString()>() >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : $r1 = new java.lang.StringBuilder
org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : $r1 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : r2 = $r1
org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : r2 = $r1 >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : $r5 = r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.util.List hosts>
org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : $r5 = r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.util.List hosts> >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : if $r5 != null
org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : if $r5 != null >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : $r6 = r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.util.List hosts>
org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : $r6 = r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.util.List hosts> >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : r3 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : r3 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : if $z0 == 0
org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : if $z0 == 0 >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : r4 = (java.lang.String) $r7
org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : r4 = (java.lang.String) $r7 >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : $r8 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4)
org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : $r8 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":")
org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":") >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : $r10 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : $r10 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : return $r10
org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : return $r10 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8) >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : interfaceinvoke $r5.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r10)
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : interfaceinvoke $r5.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r10) >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r11 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: org.apache.ambari.server.bootstrap.BSRunner bsRunner>
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r11 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: org.apache.ambari.server.bootstrap.BSRunner bsRunner> >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : if $r11 == null
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : if $r11 == null >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $i0 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: int requestId>
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $i0 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: int requestId> >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $i1 = $i0 + 1
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $i1 = $i0 + 1 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: int requestId> = $i1
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: int requestId> = $i1 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r14 = virtualinvoke r1.<org.apache.ambari.server.bootstrap.SshHostInfo: java.util.List getHosts()>()
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r14 = virtualinvoke r1.<org.apache.ambari.server.bootstrap.SshHostInfo: java.util.List getHosts()>() >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.getHosts : $r1 = r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.util.List hosts>
org.apache.ambari.server.bootstrap.SshHostInfo.getHosts : $r1 = r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.util.List hosts> >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.getHosts : return $r1
org.apache.ambari.server.bootstrap.SshHostInfo.getHosts : return $r1 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : if $r14 == null
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : if $r14 == null >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r15 = virtualinvoke r1.<org.apache.ambari.server.bootstrap.SshHostInfo: java.util.List getHosts()>()
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r15 = virtualinvoke r1.<org.apache.ambari.server.bootstrap.SshHostInfo: java.util.List getHosts()>() >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $z0 = interfaceinvoke $r15.<java.util.List: boolean isEmpty()>()
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $z0 = interfaceinvoke $r15.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : if $z0 == 0
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : if $z0 == 0 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r20 = new org.apache.ambari.server.bootstrap.BSRunner
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r20 = new org.apache.ambari.server.bootstrap.BSRunner >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r21 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: java.io.File bootStrapDir>
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r21 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: java.io.File bootStrapDir> >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r22 = virtualinvoke $r21.<java.io.File: java.lang.String toString()>()
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r22 = virtualinvoke $r21.<java.io.File: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r23 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: java.lang.String bootScript>
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r23 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: java.lang.String bootScript> >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r24 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: java.lang.String bootSetupAgentScript>
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r24 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: java.lang.String bootSetupAgentScript> >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r25 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: java.lang.String bootSetupAgentPassword>
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r25 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: java.lang.String bootSetupAgentPassword> >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $i6 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: int requestId>
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $i6 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: int requestId> >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r26 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: java.lang.String masterHostname>
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r26 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: java.lang.String masterHostname> >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $z1 = virtualinvoke r1.<org.apache.ambari.server.bootstrap.SshHostInfo: boolean isVerbose()>()
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $z1 = virtualinvoke r1.<org.apache.ambari.server.bootstrap.SshHostInfo: boolean isVerbose()>() >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.isVerbose : $z0 = r0.<org.apache.ambari.server.bootstrap.SshHostInfo: boolean verbose>
org.apache.ambari.server.bootstrap.SshHostInfo.isVerbose : $z0 = r0.<org.apache.ambari.server.bootstrap.SshHostInfo: boolean verbose> >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.isVerbose : return $z0
org.apache.ambari.server.bootstrap.SshHostInfo.isVerbose : return $z0 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r27 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: java.lang.String clusterOsFamily>
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r27 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: java.lang.String clusterOsFamily> >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r28 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: java.lang.String projectVersion>
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r28 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: java.lang.String projectVersion> >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $i7 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: int serverPort>
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $i7 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: int serverPort> >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : specialinvoke $r20.<org.apache.ambari.server.bootstrap.BSRunner: void <init>(org.apache.ambari.server.bootstrap.BootStrapImpl,org.apache.ambari.server.bootstrap.SshHostInfo,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,long,java.lang.String,boolean,java.lang.String,java.lang.String,int)>(r0, r1, $r22, $r23, $r24, $r25, $i6, 0L, $r26, $z1, $r27, $r28, $i7)
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : specialinvoke $r20.<org.apache.ambari.server.bootstrap.BSRunner: void <init>(org.apache.ambari.server.bootstrap.BootStrapImpl,org.apache.ambari.server.bootstrap.SshHostInfo,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,long,java.lang.String,boolean,java.lang.String,java.lang.String,int)>(r0, r1, $r22, $r23, $r24, $r25, $i6, 0L, $r26, $z1, $r27, $r28, $i7) >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapStatus.setLog : r0.<org.apache.ambari.server.bootstrap.BootStrapStatus: java.lang.String log> = r1
org.apache.ambari.server.bootstrap.BootStrapStatus.setLog : r0.<org.apache.ambari.server.bootstrap.BootStrapStatus: java.lang.String log> = r1 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapStatus.setStatus : r0.<org.apache.ambari.server.bootstrap.BootStrapStatus: org.apache.ambari.server.bootstrap.BootStrapStatus$BSStat status> = r1
org.apache.ambari.server.bootstrap.BootStrapStatus.setStatus : r0.<org.apache.ambari.server.bootstrap.BootStrapStatus: org.apache.ambari.server.bootstrap.BootStrapStatus$BSStat status> = r1 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.updateStatus : $r2 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: org.apache.ambari.server.bootstrap.FifoLinkedHashMap bsStatus>
org.apache.ambari.server.bootstrap.BootStrapImpl.updateStatus : $r2 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: org.apache.ambari.server.bootstrap.FifoLinkedHashMap bsStatus> >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.updateStatus : $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0)
org.apache.ambari.server.bootstrap.BootStrapImpl.updateStatus : $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0) >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.updateStatus : virtualinvoke $r2.<org.apache.ambari.server.bootstrap.FifoLinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1)
org.apache.ambari.server.bootstrap.BootStrapImpl.updateStatus : virtualinvoke $r2.<org.apache.ambari.server.bootstrap.FifoLinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1) >>>>>>>> org.apache.ambari.server.bootstrap.FifoLinkedHashMap.removeEldestEntry : $i0 = virtualinvoke r0.<org.apache.ambari.server.bootstrap.FifoLinkedHashMap: int size()>()
org.apache.ambari.server.bootstrap.FifoLinkedHashMap.removeEldestEntry : $i0 = virtualinvoke r0.<org.apache.ambari.server.bootstrap.FifoLinkedHashMap: int size()>() >>>>>>>> org.apache.ambari.server.bootstrap.FifoLinkedHashMap.removeEldestEntry : if $i0 <= 100
org.apache.ambari.server.bootstrap.FifoLinkedHashMap.removeEldestEntry : if $i0 <= 100 >>>>>>>> org.apache.ambari.server.bootstrap.FifoLinkedHashMap.removeEldestEntry : $z0 = 0
org.apache.ambari.server.bootstrap.FifoLinkedHashMap.removeEldestEntry : $z0 = 0 >>>>>>>> org.apache.ambari.server.bootstrap.FifoLinkedHashMap.removeEldestEntry : return $z0
org.apache.ambari.server.bootstrap.FifoLinkedHashMap.removeEldestEntry : return $z0 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: org.apache.ambari.server.bootstrap.BSRunner bsRunner> = $r20
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: org.apache.ambari.server.bootstrap.BSRunner bsRunner> = $r20 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r29 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: org.apache.ambari.server.bootstrap.BSRunner bsRunner>
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r29 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: org.apache.ambari.server.bootstrap.BSRunner bsRunner> >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : virtualinvoke $r29.<org.apache.ambari.server.bootstrap.BSRunner: void start()>()
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : virtualinvoke $r29.<org.apache.ambari.server.bootstrap.BSRunner: void start()>() >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r30 = <org.apache.ambari.server.bootstrap.BSResponse$BSRunStat: org.apache.ambari.server.bootstrap.BSResponse$BSRunStat OK>
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r30 = <org.apache.ambari.server.bootstrap.BSResponse$BSRunStat: org.apache.ambari.server.bootstrap.BSResponse$BSRunStat OK> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r34 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.SshHostInfo sshHostInfo>
org.apache.ambari.server.bootstrap.BSRunner.run : $r34 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.SshHostInfo sshHostInfo> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r35 = virtualinvoke $r34.<org.apache.ambari.server.bootstrap.SshHostInfo: java.util.List getHosts()>()
org.apache.ambari.server.bootstrap.BSRunner.run : $r35 = virtualinvoke $r34.<org.apache.ambari.server.bootstrap.SshHostInfo: java.util.List getHosts()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r1 = specialinvoke r0.<org.apache.ambari.server.bootstrap.BSRunner: java.lang.String createHostString(java.util.List)>($r35)
org.apache.ambari.server.bootstrap.BSRunner.run : r1 = specialinvoke r0.<org.apache.ambari.server.bootstrap.BSRunner: java.lang.String createHostString(java.util.List)>($r35) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createHostString : $r2 = new java.lang.StringBuilder
org.apache.ambari.server.bootstrap.BSRunner.createHostString : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createHostString : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.bootstrap.BSRunner.createHostString : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createHostString : r3 = $r2
org.apache.ambari.server.bootstrap.BSRunner.createHostString : r3 = $r2 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createHostString : if r1 != null
org.apache.ambari.server.bootstrap.BSRunner.createHostString : if r1 != null >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createHostString : i0 = 0
org.apache.ambari.server.bootstrap.BSRunner.createHostString : i0 = 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createHostString : r4 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.bootstrap.BSRunner.createHostString : r4 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createHostString : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.bootstrap.BSRunner.createHostString : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createHostString : if $z0 == 0
org.apache.ambari.server.bootstrap.BSRunner.createHostString : if $z0 == 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createHostString : $r6 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.bootstrap.BSRunner.createHostString : $r6 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createHostString : r5 = (java.lang.String) $r6
org.apache.ambari.server.bootstrap.BSRunner.createHostString : r5 = (java.lang.String) $r6 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createHostString : virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5)
org.apache.ambari.server.bootstrap.BSRunner.createHostString : virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createHostString : $i1 = i0
org.apache.ambari.server.bootstrap.BSRunner.createHostString : $i1 = i0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createHostString : i0 = i0 + 1
org.apache.ambari.server.bootstrap.BSRunner.createHostString : i0 = i0 + 1 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createHostString : $i2 = interfaceinvoke r1.<java.util.List: int size()>()
org.apache.ambari.server.bootstrap.BSRunner.createHostString : $i2 = interfaceinvoke r1.<java.util.List: int size()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createHostString : $i3 = $i2 - 1
org.apache.ambari.server.bootstrap.BSRunner.createHostString : $i3 = $i2 - 1 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createHostString : if $i1 == $i3
org.apache.ambari.server.bootstrap.BSRunner.createHostString : if $i1 == $i3 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createHostString : virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",")
org.apache.ambari.server.bootstrap.BSRunner.createHostString : virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createHostString : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.bootstrap.BSRunner.createHostString : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createHostString : $r9 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.bootstrap.BSRunner.createHostString : $r9 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createHostString : return $r9
org.apache.ambari.server.bootstrap.BSRunner.createHostString : return $r9 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r36 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.SshHostInfo sshHostInfo>
org.apache.ambari.server.bootstrap.BSRunner.run : $r36 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.SshHostInfo sshHostInfo> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r37 = virtualinvoke $r36.<org.apache.ambari.server.bootstrap.SshHostInfo: java.util.List getHosts()>()
org.apache.ambari.server.bootstrap.BSRunner.run : $r37 = virtualinvoke $r36.<org.apache.ambari.server.bootstrap.SshHostInfo: java.util.List getHosts()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $i2 = interfaceinvoke $r37.<java.util.List: int size()>()
org.apache.ambari.server.bootstrap.BSRunner.run : $i2 = interfaceinvoke $r37.<java.util.List: int size()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : l0 = specialinvoke r0.<org.apache.ambari.server.bootstrap.BSRunner: long calculateBSTimeout(int)>($i2)
org.apache.ambari.server.bootstrap.BSRunner.run : l0 = specialinvoke r0.<org.apache.ambari.server.bootstrap.BSRunner: long calculateBSTimeout(int)>($i2) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.calculateBSTimeout : b1 = 20
org.apache.ambari.server.bootstrap.BSRunner.calculateBSTimeout : b1 = 20 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.calculateBSTimeout : l2 = 300000L
org.apache.ambari.server.bootstrap.BSRunner.calculateBSTimeout : l2 = 300000L >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.calculateBSTimeout : $l3 = (long) i0
org.apache.ambari.server.bootstrap.BSRunner.calculateBSTimeout : $l3 = (long) i0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.calculateBSTimeout : $l4 = 300000L * $l3
org.apache.ambari.server.bootstrap.BSRunner.calculateBSTimeout : $l4 = 300000L * $l3 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.calculateBSTimeout : $l5 = $l4 / 20L
org.apache.ambari.server.bootstrap.BSRunner.calculateBSTimeout : $l5 = $l4 / 20L >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.calculateBSTimeout : $l6 = staticinvoke <java.lang.Math: long max(long,long)>(300000L, $l5)
org.apache.ambari.server.bootstrap.BSRunner.calculateBSTimeout : $l6 = staticinvoke <java.lang.Math: long max(long,long)>(300000L, $l5) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.calculateBSTimeout : return $l6
org.apache.ambari.server.bootstrap.BSRunner.calculateBSTimeout : return $l6 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r2 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newScheduledThreadPool(int)>(1)
org.apache.ambari.server.bootstrap.BSRunner.run : r2 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newScheduledThreadPool(int)>(1) >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : virtualinvoke r3.<org.apache.ambari.server.bootstrap.BSResponse: void setStatus(org.apache.ambari.server.bootstrap.BSResponse$BSRunStat)>($r30)
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : virtualinvoke r3.<org.apache.ambari.server.bootstrap.BSResponse: void setStatus(org.apache.ambari.server.bootstrap.BSResponse$BSRunStat)>($r30) >>>>>>>> org.apache.ambari.server.bootstrap.BSResponse.setStatus : r0.<org.apache.ambari.server.bootstrap.BSResponse: org.apache.ambari.server.bootstrap.BSResponse$BSRunStat status> = r1
org.apache.ambari.server.bootstrap.BSResponse.setStatus : r0.<org.apache.ambari.server.bootstrap.BSResponse: org.apache.ambari.server.bootstrap.BSResponse$BSRunStat status> = r1 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : virtualinvoke r3.<org.apache.ambari.server.bootstrap.BSResponse: void setLog(java.lang.String)>("Running Bootstrap now.")
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : virtualinvoke r3.<org.apache.ambari.server.bootstrap.BSResponse: void setLog(java.lang.String)>("Running Bootstrap now.") >>>>>>>> org.apache.ambari.server.bootstrap.BSResponse.setLog : r0.<org.apache.ambari.server.bootstrap.BSResponse: java.lang.String log> = r1
org.apache.ambari.server.bootstrap.BSResponse.setLog : r0.<org.apache.ambari.server.bootstrap.BSResponse: java.lang.String log> = r1 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $i8 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: int requestId>
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $i8 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: int requestId> >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $l9 = (long) $i8
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $l9 = (long) $i8 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : virtualinvoke r3.<org.apache.ambari.server.bootstrap.BSResponse: void setRequestId(long)>($l9)
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : virtualinvoke r3.<org.apache.ambari.server.bootstrap.BSResponse: void setRequestId(long)>($l9) >>>>>>>> org.apache.ambari.server.bootstrap.BSResponse.setRequestId : r0.<org.apache.ambari.server.bootstrap.BSResponse: long requestId> = l0
org.apache.ambari.server.bootstrap.BSResponse.setRequestId : r0.<org.apache.ambari.server.bootstrap.BSResponse: long requestId> = l0 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : return r3
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : return r3 >>>>>>>> org.apache.ambari.server.bootstrap.BSResponse.getRequestId : $l0 = r0.<org.apache.ambari.server.bootstrap.BSResponse: long requestId>
org.apache.ambari.server.bootstrap.BSResponse.getRequestId : $l0 = r0.<org.apache.ambari.server.bootstrap.BSResponse: long requestId> >>>>>>>> org.apache.ambari.server.bootstrap.BSResponse.getRequestId : return $l0
org.apache.ambari.server.bootstrap.BSResponse.getRequestId : return $l0 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.getStatus : $r1 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: org.apache.ambari.server.bootstrap.FifoLinkedHashMap bsStatus>
org.apache.ambari.server.bootstrap.BootStrapImpl.getStatus : $r1 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: org.apache.ambari.server.bootstrap.FifoLinkedHashMap bsStatus> >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.getStatus : $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0)
org.apache.ambari.server.bootstrap.BootStrapImpl.getStatus : $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0) >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.getStatus : $z0 = virtualinvoke $r1.<org.apache.ambari.server.bootstrap.FifoLinkedHashMap: boolean containsKey(java.lang.Object)>($r2)
org.apache.ambari.server.bootstrap.BootStrapImpl.getStatus : $z0 = virtualinvoke $r1.<org.apache.ambari.server.bootstrap.FifoLinkedHashMap: boolean containsKey(java.lang.Object)>($r2) >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.getStatus : if $z0 != 0
org.apache.ambari.server.bootstrap.BootStrapImpl.getStatus : if $z0 != 0 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.getStatus : $r3 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: org.apache.ambari.server.bootstrap.FifoLinkedHashMap bsStatus>
org.apache.ambari.server.bootstrap.BootStrapImpl.getStatus : $r3 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: org.apache.ambari.server.bootstrap.FifoLinkedHashMap bsStatus> >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.getStatus : $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0)
org.apache.ambari.server.bootstrap.BootStrapImpl.getStatus : $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0) >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.getStatus : $r5 = virtualinvoke $r3.<org.apache.ambari.server.bootstrap.FifoLinkedHashMap: java.lang.Object get(java.lang.Object)>($r4)
org.apache.ambari.server.bootstrap.BootStrapImpl.getStatus : $r5 = virtualinvoke $r3.<org.apache.ambari.server.bootstrap.FifoLinkedHashMap: java.lang.Object get(java.lang.Object)>($r4) >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.getStatus : $r6 = (org.apache.ambari.server.bootstrap.BootStrapStatus) $r5
org.apache.ambari.server.bootstrap.BootStrapImpl.getStatus : $r6 = (org.apache.ambari.server.bootstrap.BootStrapStatus) $r5 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.getStatus : return $r6
org.apache.ambari.server.bootstrap.BootStrapImpl.getStatus : return $r6 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapStatus.getStatus : $r1 = r0.<org.apache.ambari.server.bootstrap.BootStrapStatus: org.apache.ambari.server.bootstrap.BootStrapStatus$BSStat status>
org.apache.ambari.server.bootstrap.BootStrapStatus.getStatus : $r1 = r0.<org.apache.ambari.server.bootstrap.BootStrapStatus: org.apache.ambari.server.bootstrap.BootStrapStatus$BSStat status> >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapStatus.getStatus : return $r1
org.apache.ambari.server.bootstrap.BootStrapStatus.getStatus : return $r1 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r38 = new org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector
org.apache.ambari.server.bootstrap.BSRunner.run : $r38 = new org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r38.<org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector: void <init>(org.apache.ambari.server.bootstrap.BSRunner,org.apache.ambari.server.bootstrap.BSRunner$1)>(r0, null)
org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r38.<org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector: void <init>(org.apache.ambari.server.bootstrap.BSRunner,org.apache.ambari.server.bootstrap.BSRunner$1)>(r0, null) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r3 = $r38
org.apache.ambari.server.bootstrap.BSRunner.run : r3 = $r38 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>
org.apache.ambari.server.bootstrap.BSRunner.run : $r4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r5 = interfaceinvoke r2.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>(r3, 0L, 10L, $r4)
org.apache.ambari.server.bootstrap.BSRunner.run : r5 = interfaceinvoke r2.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>(r3, 0L, 10L, $r4) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r39 = <org.apache.ambari.server.bootstrap.BSRunner: org.apache.commons.logging.Log LOG>
org.apache.ambari.server.bootstrap.BSRunner.run : $r39 = <org.apache.ambari.server.bootstrap.BSRunner: org.apache.commons.logging.Log LOG> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r40 = new java.lang.StringBuilder
org.apache.ambari.server.bootstrap.BSRunner.run : $r40 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r40.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r40.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Kicking off the scheduler for polling on logs in ")
org.apache.ambari.server.bootstrap.BSRunner.run : $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Kicking off the scheduler for polling on logs in ") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r42 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File requestIdDir>
org.apache.ambari.server.bootstrap.BSRunner.run : $r42 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File requestIdDir> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r42)
org.apache.ambari.server.bootstrap.BSRunner.run : $r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r42) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.bootstrap.BSRunner.run : $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : interfaceinvoke $r39.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r44)
org.apache.ambari.server.bootstrap.BSRunner.run : interfaceinvoke $r39.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r44) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r45 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.SshHostInfo sshHostInfo>
org.apache.ambari.server.bootstrap.BSRunner.run : $r45 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.SshHostInfo sshHostInfo> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r6 = virtualinvoke $r45.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String getUser()>()
org.apache.ambari.server.bootstrap.BSRunner.run : r6 = virtualinvoke $r45.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String getUser()>() >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.getUser : $r1 = r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String user>
org.apache.ambari.server.bootstrap.SshHostInfo.getUser : $r1 = r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String user> >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.getUser : return $r1
org.apache.ambari.server.bootstrap.SshHostInfo.getUser : return $r1 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r46 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.SshHostInfo sshHostInfo>
org.apache.ambari.server.bootstrap.BSRunner.run : $r46 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.SshHostInfo sshHostInfo> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r7 = virtualinvoke $r46.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String getUserRunAs()>()
org.apache.ambari.server.bootstrap.BSRunner.run : r7 = virtualinvoke $r46.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String getUserRunAs()>() >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.getUserRunAs : $r1 = r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String userRunAs>
org.apache.ambari.server.bootstrap.SshHostInfo.getUserRunAs : $r1 = r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String userRunAs> >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.getUserRunAs : return $r1
org.apache.ambari.server.bootstrap.SshHostInfo.getUserRunAs : return $r1 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : if r6 == null
org.apache.ambari.server.bootstrap.BSRunner.run : if r6 == null >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $z2 = virtualinvoke r6.<java.lang.String: boolean isEmpty()>()
org.apache.ambari.server.bootstrap.BSRunner.run : $z2 = virtualinvoke r6.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : if $z2 == 0
org.apache.ambari.server.bootstrap.BSRunner.run : if $z2 == 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r47 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.SshHostInfo sshHostInfo>
org.apache.ambari.server.bootstrap.BSRunner.run : $r47 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.SshHostInfo sshHostInfo> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r8 = virtualinvoke $r47.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String getSshPort()>()
org.apache.ambari.server.bootstrap.BSRunner.run : r8 = virtualinvoke $r47.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String getSshPort()>() >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.getSshPort : $r1 = r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String sshPort>
org.apache.ambari.server.bootstrap.SshHostInfo.getSshPort : $r1 = r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String sshPort> >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.getSshPort : return $r1
org.apache.ambari.server.bootstrap.SshHostInfo.getSshPort : return $r1 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : if r8 == null
org.apache.ambari.server.bootstrap.BSRunner.run : if r8 == null >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r8 = "22"
org.apache.ambari.server.bootstrap.BSRunner.run : r8 = "22" >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r9 = newarray (java.lang.String)[13]
org.apache.ambari.server.bootstrap.BSRunner.run : r9 = newarray (java.lang.String)[13] >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r10 = <org.apache.ambari.server.bootstrap.BootStrapStatus$BSStat: org.apache.ambari.server.bootstrap.BootStrapStatus$BSStat RUNNING>
org.apache.ambari.server.bootstrap.BSRunner.run : r10 = <org.apache.ambari.server.bootstrap.BootStrapStatus$BSStat: org.apache.ambari.server.bootstrap.BootStrapStatus$BSStat RUNNING> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r11 = ""
org.apache.ambari.server.bootstrap.BSRunner.run : r11 = "" >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke r0.<org.apache.ambari.server.bootstrap.BSRunner: void createRunDir()>()
org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke r0.<org.apache.ambari.server.bootstrap.BSRunner: void createRunDir()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createRunDir : $r2 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File bootDir>
org.apache.ambari.server.bootstrap.BSRunner.createRunDir : $r2 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File bootDir> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createRunDir : $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>()
org.apache.ambari.server.bootstrap.BSRunner.createRunDir : $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createRunDir : if $z0 != 0
org.apache.ambari.server.bootstrap.BSRunner.createRunDir : if $z0 != 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createRunDir : $r9 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File requestIdDir>
org.apache.ambari.server.bootstrap.BSRunner.createRunDir : $r9 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File requestIdDir> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createRunDir : $z2 = virtualinvoke $r9.<java.io.File: boolean exists()>()
org.apache.ambari.server.bootstrap.BSRunner.createRunDir : $z2 = virtualinvoke $r9.<java.io.File: boolean exists()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createRunDir : if $z2 == 0
org.apache.ambari.server.bootstrap.BSRunner.createRunDir : if $z2 == 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createRunDir : $r11 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File requestIdDir>
org.apache.ambari.server.bootstrap.BSRunner.createRunDir : $r11 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File requestIdDir> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createRunDir : $z3 = virtualinvoke $r11.<java.io.File: boolean mkdirs()>()
org.apache.ambari.server.bootstrap.BSRunner.createRunDir : $z3 = virtualinvoke $r11.<java.io.File: boolean mkdirs()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r1 = new org.apache.ambari.server.bootstrap.BSHostStatusCollector
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r1 = new org.apache.ambari.server.bootstrap.BSHostStatusCollector >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createRunDir : if $z3 != 0
org.apache.ambari.server.bootstrap.BSRunner.createRunDir : if $z3 != 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r48 = <org.apache.ambari.server.bootstrap.BSRunner: org.apache.commons.logging.Log LOG>
org.apache.ambari.server.bootstrap.BSRunner.run : $r48 = <org.apache.ambari.server.bootstrap.BSRunner: org.apache.commons.logging.Log LOG> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $z4 = interfaceinvoke $r48.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()
org.apache.ambari.server.bootstrap.BSRunner.run : $z4 = interfaceinvoke $r48.<org.apache.commons.logging.Log: boolean isDebugEnabled()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : if $z4 == 0
org.apache.ambari.server.bootstrap.BSRunner.run : if $z4 == 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r57 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.SshHostInfo sshHostInfo>
org.apache.ambari.server.bootstrap.BSRunner.run : $r57 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.SshHostInfo sshHostInfo> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r12 = virtualinvoke $r57.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String getPassword()>()
org.apache.ambari.server.bootstrap.BSRunner.run : r12 = virtualinvoke $r57.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String getPassword()>() >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.getPassword : $r1 = r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String password>
org.apache.ambari.server.bootstrap.SshHostInfo.getPassword : $r1 = r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String password> >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.getPassword : return $r1
org.apache.ambari.server.bootstrap.SshHostInfo.getPassword : return $r1 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : if r12 == null
org.apache.ambari.server.bootstrap.BSRunner.run : if r12 == null >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $z5 = virtualinvoke r12.<java.lang.String: boolean isEmpty()>()
org.apache.ambari.server.bootstrap.BSRunner.run : $z5 = virtualinvoke r12.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : if $z5 != 0
org.apache.ambari.server.bootstrap.BSRunner.run : if $z5 != 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r58 = new java.io.File
org.apache.ambari.server.bootstrap.BSRunner.run : $r58 = new java.io.File >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r59 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File requestIdDir>
org.apache.ambari.server.bootstrap.BSRunner.run : $r59 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File requestIdDir> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r58.<java.io.File: void <init>(java.io.File,java.lang.String)>($r59, "host_pass")
org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r58.<java.io.File: void <init>(java.io.File,java.lang.String)>($r59, "host_pass") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File passwordFile> = $r58
org.apache.ambari.server.bootstrap.BSRunner.run : r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File passwordFile> = $r58 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r13 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator")
org.apache.ambari.server.bootstrap.BSRunner.run : r13 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r60 = new java.lang.StringBuilder
org.apache.ambari.server.bootstrap.BSRunner.run : $r60 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r60.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r60.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12)
org.apache.ambari.server.bootstrap.BSRunner.run : $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13)
org.apache.ambari.server.bootstrap.BSRunner.run : $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.bootstrap.BSRunner.run : r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke r0.<org.apache.ambari.server.bootstrap.BSRunner: void writePasswordFile(java.lang.String)>(r63)
org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke r0.<org.apache.ambari.server.bootstrap.BSRunner: void writePasswordFile(java.lang.String)>(r63) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.writePasswordFile : $r2 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File passwordFile>
org.apache.ambari.server.bootstrap.BSRunner.writePasswordFile : $r2 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File passwordFile> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.writePasswordFile : staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String)>($r2, r1)
org.apache.ambari.server.bootstrap.BSRunner.writePasswordFile : staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String)>($r2, r1) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r64 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.SshHostInfo sshHostInfo>
org.apache.ambari.server.bootstrap.BSRunner.run : $r64 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.SshHostInfo sshHostInfo> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r65 = virtualinvoke $r64.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String getSshKey()>()
org.apache.ambari.server.bootstrap.BSRunner.run : $r65 = virtualinvoke $r64.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String getSshKey()>() >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.getSshKey : $r1 = r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String sshKey>
org.apache.ambari.server.bootstrap.SshHostInfo.getSshKey : $r1 = r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String sshKey> >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.getSshKey : return $r1
org.apache.ambari.server.bootstrap.SshHostInfo.getSshKey : return $r1 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke r0.<org.apache.ambari.server.bootstrap.BSRunner: void writeSshKeyFile(java.lang.String)>($r65)
org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke r0.<org.apache.ambari.server.bootstrap.BSRunner: void writeSshKeyFile(java.lang.String)>($r65) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.writeSshKeyFile : $r2 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File sshKeyFile>
org.apache.ambari.server.bootstrap.BSRunner.writeSshKeyFile : $r2 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File sshKeyFile> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.writeSshKeyFile : staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String)>($r2, r1)
org.apache.ambari.server.bootstrap.BSRunner.writeSshKeyFile : staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String)>($r2, r1) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r66 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.lang.String bsScript>
org.apache.ambari.server.bootstrap.BSRunner.run : $r66 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.lang.String bsScript> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r9[0] = $r66
org.apache.ambari.server.bootstrap.BSRunner.run : r9[0] = $r66 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r9[1] = r1
org.apache.ambari.server.bootstrap.BSRunner.run : r9[1] = r1 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r67 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File requestIdDir>
org.apache.ambari.server.bootstrap.BSRunner.run : $r67 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File requestIdDir> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r68 = virtualinvoke $r67.<java.io.File: java.lang.String toString()>()
org.apache.ambari.server.bootstrap.BSRunner.run : $r68 = virtualinvoke $r67.<java.io.File: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r9[2] = $r68
org.apache.ambari.server.bootstrap.BSRunner.run : r9[2] = $r68 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r9[3] = r6
org.apache.ambari.server.bootstrap.BSRunner.run : r9[3] = r6 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r9[4] = r8
org.apache.ambari.server.bootstrap.BSRunner.run : r9[4] = r8 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r69 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File sshKeyFile>
org.apache.ambari.server.bootstrap.BSRunner.run : $r69 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File sshKeyFile> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r70 = virtualinvoke $r69.<java.io.File: java.lang.String toString()>()
org.apache.ambari.server.bootstrap.BSRunner.run : $r70 = virtualinvoke $r69.<java.io.File: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r9[5] = $r70
org.apache.ambari.server.bootstrap.BSRunner.run : r9[5] = $r70 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r71 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.lang.String agentSetupScript>
org.apache.ambari.server.bootstrap.BSRunner.run : $r71 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.lang.String agentSetupScript> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r72 = virtualinvoke $r71.<java.lang.String: java.lang.String toString()>()
org.apache.ambari.server.bootstrap.BSRunner.run : $r72 = virtualinvoke $r71.<java.lang.String: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r9[6] = $r72
org.apache.ambari.server.bootstrap.BSRunner.run : r9[6] = $r72 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r73 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.lang.String ambariHostname>
org.apache.ambari.server.bootstrap.BSRunner.run : $r73 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.lang.String ambariHostname> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r9[7] = $r73
org.apache.ambari.server.bootstrap.BSRunner.run : r9[7] = $r73 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r74 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.lang.String clusterOsFamily>
org.apache.ambari.server.bootstrap.BSRunner.run : $r74 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.lang.String clusterOsFamily> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r9[8] = $r74
org.apache.ambari.server.bootstrap.BSRunner.run : r9[8] = $r74 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r75 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.lang.String projectVersion>
org.apache.ambari.server.bootstrap.BSRunner.run : $r75 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.lang.String projectVersion> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r9[9] = $r75
org.apache.ambari.server.bootstrap.BSRunner.run : r9[9] = $r75 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r76 = new java.lang.StringBuilder
org.apache.ambari.server.bootstrap.BSRunner.run : $r76 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r76.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r76.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $i3 = r0.<org.apache.ambari.server.bootstrap.BSRunner: int serverPort>
org.apache.ambari.server.bootstrap.BSRunner.run : $i3 = r0.<org.apache.ambari.server.bootstrap.BSRunner: int serverPort> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r77 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3)
org.apache.ambari.server.bootstrap.BSRunner.run : $r77 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("")
org.apache.ambari.server.bootstrap.BSRunner.run : $r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r79 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.bootstrap.BSRunner.run : $r79 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r9[10] = $r79
org.apache.ambari.server.bootstrap.BSRunner.run : r9[10] = $r79 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r9[11] = r7
org.apache.ambari.server.bootstrap.BSRunner.run : r9[11] = r7 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r80 = r9
org.apache.ambari.server.bootstrap.BSRunner.run : $r80 = r9 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $b4 = 12
org.apache.ambari.server.bootstrap.BSRunner.run : $b4 = 12 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r81 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File passwordFile>
org.apache.ambari.server.bootstrap.BSRunner.run : $r81 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File passwordFile> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : if $r81 != null
org.apache.ambari.server.bootstrap.BSRunner.run : if $r81 != null >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r83 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File passwordFile>
org.apache.ambari.server.bootstrap.BSRunner.run : $r83 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File passwordFile> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r82 = virtualinvoke $r83.<java.io.File: java.lang.String toString()>()
org.apache.ambari.server.bootstrap.BSRunner.run : $r82 = virtualinvoke $r83.<java.io.File: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r80[$b4] = $r82
org.apache.ambari.server.bootstrap.BSRunner.run : $r80[$b4] = $r82 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r84 = new java.util.HashMap
org.apache.ambari.server.bootstrap.BSRunner.run : $r84 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r84.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r84.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r85 = $r84
org.apache.ambari.server.bootstrap.BSRunner.run : r85 = $r84 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r86 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name")
org.apache.ambari.server.bootstrap.BSRunner.run : $r86 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $z6 = virtualinvoke $r86.<java.lang.String: boolean contains(java.lang.CharSequence)>("Windows")
org.apache.ambari.server.bootstrap.BSRunner.run : $z6 = virtualinvoke $r86.<java.lang.String: boolean contains(java.lang.CharSequence)>("Windows") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : if $z6 == 0
org.apache.ambari.server.bootstrap.BSRunner.run : if $z6 == 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r87 = <org.apache.ambari.server.bootstrap.BSRunner: org.apache.commons.logging.Log LOG>
org.apache.ambari.server.bootstrap.BSRunner.run : $r87 = <org.apache.ambari.server.bootstrap.BSRunner: org.apache.commons.logging.Log LOG> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r88 = new java.lang.StringBuilder
org.apache.ambari.server.bootstrap.BSRunner.run : $r88 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r88.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r88.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r89 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Host= ")
org.apache.ambari.server.bootstrap.BSRunner.run : $r89 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Host= ") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r90 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.ambari.server.bootstrap.BSRunner.run : $r90 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r91 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bs=")
org.apache.ambari.server.bootstrap.BSRunner.run : $r91 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bs=") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r92 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.lang.String bsScript>
org.apache.ambari.server.bootstrap.BSRunner.run : $r92 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.lang.String bsScript> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r93 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r92)
org.apache.ambari.server.bootstrap.BSRunner.run : $r93 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r92) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r94 = virtualinvoke $r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" requestDir=")
org.apache.ambari.server.bootstrap.BSRunner.run : $r94 = virtualinvoke $r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" requestDir=") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r95 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File requestIdDir>
org.apache.ambari.server.bootstrap.BSRunner.run : $r95 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File requestIdDir> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r96 = virtualinvoke $r94.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r95)
org.apache.ambari.server.bootstrap.BSRunner.run : $r96 = virtualinvoke $r94.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r95) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r97 = virtualinvoke $r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" user=")
org.apache.ambari.server.bootstrap.BSRunner.run : $r97 = virtualinvoke $r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" user=") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r98 = virtualinvoke $r97.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6)
org.apache.ambari.server.bootstrap.BSRunner.run : $r98 = virtualinvoke $r97.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r99 = virtualinvoke $r98.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" sshPort=")
org.apache.ambari.server.bootstrap.BSRunner.run : $r99 = virtualinvoke $r98.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" sshPort=") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r100 = virtualinvoke $r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8)
org.apache.ambari.server.bootstrap.BSRunner.run : $r100 = virtualinvoke $r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r101 = virtualinvoke $r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" keyfile=")
org.apache.ambari.server.bootstrap.BSRunner.run : $r101 = virtualinvoke $r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" keyfile=") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r102 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File sshKeyFile>
org.apache.ambari.server.bootstrap.BSRunner.run : $r102 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File sshKeyFile> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r103 = virtualinvoke $r101.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r102)
org.apache.ambari.server.bootstrap.BSRunner.run : $r103 = virtualinvoke $r101.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r102) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r104 = virtualinvoke $r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" passwordFile ")
org.apache.ambari.server.bootstrap.BSRunner.run : $r104 = virtualinvoke $r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" passwordFile ") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r105 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File passwordFile>
org.apache.ambari.server.bootstrap.BSRunner.run : $r105 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File passwordFile> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r106 = virtualinvoke $r104.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r105)
org.apache.ambari.server.bootstrap.BSRunner.run : $r106 = virtualinvoke $r104.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r105) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r107 = virtualinvoke $r106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" server=")
org.apache.ambari.server.bootstrap.BSRunner.run : $r107 = virtualinvoke $r106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" server=") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r108 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.lang.String ambariHostname>
org.apache.ambari.server.bootstrap.BSRunner.run : $r108 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.lang.String ambariHostname> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r109 = virtualinvoke $r107.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r108)
org.apache.ambari.server.bootstrap.BSRunner.run : $r109 = virtualinvoke $r107.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r108) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r110 = virtualinvoke $r109.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" version=")
org.apache.ambari.server.bootstrap.BSRunner.run : $r110 = virtualinvoke $r109.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" version=") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r111 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.lang.String projectVersion>
org.apache.ambari.server.bootstrap.BSRunner.run : $r111 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.lang.String projectVersion> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r112 = virtualinvoke $r110.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r111)
org.apache.ambari.server.bootstrap.BSRunner.run : $r112 = virtualinvoke $r110.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r111) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r113 = virtualinvoke $r112.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" serverPort=")
org.apache.ambari.server.bootstrap.BSRunner.run : $r113 = virtualinvoke $r112.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" serverPort=") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $i8 = r0.<org.apache.ambari.server.bootstrap.BSRunner: int serverPort>
org.apache.ambari.server.bootstrap.BSRunner.run : $i8 = r0.<org.apache.ambari.server.bootstrap.BSRunner: int serverPort> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r114 = virtualinvoke $r113.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8)
org.apache.ambari.server.bootstrap.BSRunner.run : $r114 = virtualinvoke $r113.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r115 = virtualinvoke $r114.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" userRunAs=")
org.apache.ambari.server.bootstrap.BSRunner.run : $r115 = virtualinvoke $r114.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" userRunAs=") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r116 = virtualinvoke $r115.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7)
org.apache.ambari.server.bootstrap.BSRunner.run : $r116 = virtualinvoke $r115.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r117 = virtualinvoke $r116.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" timeout=")
org.apache.ambari.server.bootstrap.BSRunner.run : $r117 = virtualinvoke $r116.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" timeout=") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $l9 = l0 / 1000L
org.apache.ambari.server.bootstrap.BSRunner.run : $l9 = l0 / 1000L >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r118 = virtualinvoke $r117.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l9)
org.apache.ambari.server.bootstrap.BSRunner.run : $r118 = virtualinvoke $r117.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l9) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r119 = virtualinvoke $r118.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.bootstrap.BSRunner.run : $r119 = virtualinvoke $r118.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : interfaceinvoke $r87.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r119)
org.apache.ambari.server.bootstrap.BSRunner.run : interfaceinvoke $r87.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r119) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r120 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.lang.String agentSetupPassword>
org.apache.ambari.server.bootstrap.BSRunner.run : $r120 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.lang.String agentSetupPassword> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : interfaceinvoke r85.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("AMBARI_PASSPHRASE", $r120)
org.apache.ambari.server.bootstrap.BSRunner.run : interfaceinvoke r85.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("AMBARI_PASSPHRASE", $r120) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $z7 = r0.<org.apache.ambari.server.bootstrap.BSRunner: boolean verbose>
org.apache.ambari.server.bootstrap.BSRunner.run : $z7 = r0.<org.apache.ambari.server.bootstrap.BSRunner: boolean verbose> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : if $z7 == 0
org.apache.ambari.server.bootstrap.BSRunner.run : if $z7 == 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r123 = <org.apache.ambari.server.bootstrap.BSRunner: org.apache.commons.logging.Log LOG>
org.apache.ambari.server.bootstrap.BSRunner.run : $r123 = <org.apache.ambari.server.bootstrap.BSRunner: org.apache.commons.logging.Log LOG> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $z8 = interfaceinvoke $r123.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()
org.apache.ambari.server.bootstrap.BSRunner.run : $z8 = interfaceinvoke $r123.<org.apache.commons.logging.Log: boolean isDebugEnabled()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : if $z8 == 0
org.apache.ambari.server.bootstrap.BSRunner.run : if $z8 == 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r126 = new java.lang.StringBuilder
org.apache.ambari.server.bootstrap.BSRunner.run : $r126 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r126.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r126.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r127 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File requestIdDir>
org.apache.ambari.server.bootstrap.BSRunner.run : $r127 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File requestIdDir> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r128 = virtualinvoke $r126.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r127)
org.apache.ambari.server.bootstrap.BSRunner.run : $r128 = virtualinvoke $r126.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r127) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r129 = <java.io.File: java.lang.String separator>
org.apache.ambari.server.bootstrap.BSRunner.run : $r129 = <java.io.File: java.lang.String separator> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r130 = virtualinvoke $r128.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r129)
org.apache.ambari.server.bootstrap.BSRunner.run : $r130 = virtualinvoke $r128.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r129) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r131 = virtualinvoke $r130.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bootstrap.out")
org.apache.ambari.server.bootstrap.BSRunner.run : $r131 = virtualinvoke $r130.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bootstrap.out") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r132 = virtualinvoke $r131.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.bootstrap.BSRunner.run : r132 = virtualinvoke $r131.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r133 = new java.lang.StringBuilder
org.apache.ambari.server.bootstrap.BSRunner.run : $r133 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r133.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r133.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r134 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File requestIdDir>
org.apache.ambari.server.bootstrap.BSRunner.run : $r134 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File requestIdDir> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r135 = virtualinvoke $r133.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r134)
org.apache.ambari.server.bootstrap.BSRunner.run : $r135 = virtualinvoke $r133.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r134) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r136 = <java.io.File: java.lang.String separator>
org.apache.ambari.server.bootstrap.BSRunner.run : $r136 = <java.io.File: java.lang.String separator> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r137 = virtualinvoke $r135.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r136)
org.apache.ambari.server.bootstrap.BSRunner.run : $r137 = virtualinvoke $r135.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r136) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r138 = virtualinvoke $r137.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bootstrap.err")
org.apache.ambari.server.bootstrap.BSRunner.run : $r138 = virtualinvoke $r137.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bootstrap.err") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r139 = virtualinvoke $r138.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.bootstrap.BSRunner.run : r139 = virtualinvoke $r138.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r140 = new java.lang.ProcessBuilder
org.apache.ambari.server.bootstrap.BSRunner.run : $r140 = new java.lang.ProcessBuilder >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r140.<java.lang.ProcessBuilder: void <init>(java.lang.String[])>(r9)
org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r140.<java.lang.ProcessBuilder: void <init>(java.lang.String[])>(r9) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r16 = $r140
org.apache.ambari.server.bootstrap.BSRunner.run : r16 = $r140 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r141 = new java.io.File
org.apache.ambari.server.bootstrap.BSRunner.run : $r141 = new java.io.File >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r141.<java.io.File: void <init>(java.lang.String)>(r132)
org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r141.<java.io.File: void <init>(java.lang.String)>(r132) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : virtualinvoke r16.<java.lang.ProcessBuilder: java.lang.ProcessBuilder redirectOutput(java.io.File)>($r141)
org.apache.ambari.server.bootstrap.BSRunner.run : virtualinvoke r16.<java.lang.ProcessBuilder: java.lang.ProcessBuilder redirectOutput(java.io.File)>($r141) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r5 = r0.<org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector: org.apache.ambari.server.bootstrap.BSRunner this$0>
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r5 = r0.<org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector: org.apache.ambari.server.bootstrap.BSRunner this$0> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r6 = staticinvoke <org.apache.ambari.server.bootstrap.BSRunner: java.io.File access$000(org.apache.ambari.server.bootstrap.BSRunner)>($r5)
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r6 = staticinvoke <org.apache.ambari.server.bootstrap.BSRunner: java.io.File access$000(org.apache.ambari.server.bootstrap.BSRunner)>($r5) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.access$000 : $r1 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File requestIdDir>
org.apache.ambari.server.bootstrap.BSRunner.access$000 : $r1 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File requestIdDir> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.access$000 : return $r1
org.apache.ambari.server.bootstrap.BSRunner.access$000 : return $r1 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r7 = r0.<org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector: org.apache.ambari.server.bootstrap.BSRunner this$0>
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r7 = r0.<org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector: org.apache.ambari.server.bootstrap.BSRunner this$0> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r8 = staticinvoke <org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.SshHostInfo access$100(org.apache.ambari.server.bootstrap.BSRunner)>($r7)
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r8 = staticinvoke <org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.SshHostInfo access$100(org.apache.ambari.server.bootstrap.BSRunner)>($r7) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.access$100 : $r1 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.SshHostInfo sshHostInfo>
org.apache.ambari.server.bootstrap.BSRunner.access$100 : $r1 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.SshHostInfo sshHostInfo> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.access$100 : return $r1
org.apache.ambari.server.bootstrap.BSRunner.access$100 : return $r1 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r9 = virtualinvoke $r8.<org.apache.ambari.server.bootstrap.SshHostInfo: java.util.List getHosts()>()
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r9 = virtualinvoke $r8.<org.apache.ambari.server.bootstrap.SshHostInfo: java.util.List getHosts()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : specialinvoke $r1.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: void <init>(java.io.File,java.util.List)>($r6, $r9)
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : specialinvoke $r1.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: void <init>(java.io.File,java.util.List)>($r6, $r9) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : r2 = $r1
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : r2 = $r1 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : virtualinvoke r2.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: void run()>()
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : virtualinvoke r2.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: void run()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r1 = <org.apache.ambari.server.bootstrap.BSHostStatusCollector: org.apache.commons.logging.Log LOG>
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r1 = <org.apache.ambari.server.bootstrap.BSHostStatusCollector: org.apache.commons.logging.Log LOG> >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r2 = new java.lang.StringBuilder
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r13 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Request directory ")
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r13 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Request directory ") >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r14 = r0.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: java.io.File requestIdDir>
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r14 = r0.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: java.io.File requestIdDir> >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14)
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14) >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : interfaceinvoke $r1.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r16)
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : interfaceinvoke $r1.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r16) >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r17 = new java.util.ArrayList
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r17 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : specialinvoke $r17.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : specialinvoke $r17.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : r0.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: java.util.List hostStatus> = $r17
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : r0.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: java.util.List hostStatus> = $r17 >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r18 = r0.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: java.util.List hosts>
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r18 = r0.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: java.util.List hosts> >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : if $r18 != null
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : if $r18 != null >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r19 = <org.apache.ambari.server.bootstrap.BSHostStatusCollector: org.apache.commons.logging.Log LOG>
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r19 = <org.apache.ambari.server.bootstrap.BSHostStatusCollector: org.apache.commons.logging.Log LOG> >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r20 = new java.lang.StringBuilder
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r20 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : specialinvoke $r20.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : specialinvoke $r20.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HostList for polling on ")
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HostList for polling on ") >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r22 = r0.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: java.util.List hosts>
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r22 = r0.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: java.util.List hosts> >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22)
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22) >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : interfaceinvoke $r19.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r24)
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : interfaceinvoke $r19.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r24) >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r25 = r0.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: java.util.List hosts>
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r25 = r0.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: java.util.List hosts> >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : r3 = interfaceinvoke $r25.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : r3 = interfaceinvoke $r25.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : if $z0 == 0
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : if $z0 == 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r26 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r26 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : r4 = (java.lang.String) $r26
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : r4 = (java.lang.String) $r26 >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r27 = new org.apache.ambari.server.bootstrap.BSHostStatus
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r27 = new org.apache.ambari.server.bootstrap.BSHostStatus >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r143 = new java.io.File
org.apache.ambari.server.bootstrap.BSRunner.run : $r143 = new java.io.File >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r143.<java.io.File: void <init>(java.lang.String)>(r139)
org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r143.<java.io.File: void <init>(java.lang.String)>(r139) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : virtualinvoke r16.<java.lang.ProcessBuilder: java.lang.ProcessBuilder redirectError(java.io.File)>($r143)
org.apache.ambari.server.bootstrap.BSRunner.run : virtualinvoke r16.<java.lang.ProcessBuilder: java.lang.ProcessBuilder redirectError(java.io.File)>($r143) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r17 = virtualinvoke r16.<java.lang.ProcessBuilder: java.util.Map environment()>()
org.apache.ambari.server.bootstrap.BSRunner.run : r17 = virtualinvoke r16.<java.lang.ProcessBuilder: java.util.Map environment()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : interfaceinvoke r17.<java.util.Map: void putAll(java.util.Map)>(r85)
org.apache.ambari.server.bootstrap.BSRunner.run : interfaceinvoke r17.<java.util.Map: void putAll(java.util.Map)>(r85) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r18 = virtualinvoke r16.<java.lang.ProcessBuilder: java.lang.Process start()>()
org.apache.ambari.server.bootstrap.BSRunner.run : r18 = virtualinvoke r16.<java.lang.ProcessBuilder: java.lang.Process start()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : specialinvoke $r27.<org.apache.ambari.server.bootstrap.BSHostStatus: void <init>()>()
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : specialinvoke $r27.<org.apache.ambari.server.bootstrap.BSHostStatus: void <init>()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : r5 = $r27
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : r5 = $r27 >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : virtualinvoke r5.<org.apache.ambari.server.bootstrap.BSHostStatus: void setHostName(java.lang.String)>(r4)
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : virtualinvoke r5.<org.apache.ambari.server.bootstrap.BSHostStatus: void setHostName(java.lang.String)>(r4) >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatus.setHostName : r0.<org.apache.ambari.server.bootstrap.BSHostStatus: java.lang.String hostName> = r1
org.apache.ambari.server.bootstrap.BSHostStatus.setHostName : r0.<org.apache.ambari.server.bootstrap.BSHostStatus: java.lang.String hostName> = r1 >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r28 = new java.io.File
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r28 = new java.io.File >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r29 = r0.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: java.io.File requestIdDir>
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r29 = r0.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: java.io.File requestIdDir> >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r6 = new java.lang.StringBuilder
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r6 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r30 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4)
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r30 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".done")
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".done") >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : specialinvoke $r28.<java.io.File: void <init>(java.io.File,java.lang.String)>($r29, $r32)
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : specialinvoke $r28.<java.io.File: void <init>(java.io.File,java.lang.String)>($r29, $r32) >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : r7 = $r28
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : r7 = $r28 >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r33 = new java.io.File
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r33 = new java.io.File >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r34 = r0.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: java.io.File requestIdDir>
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r34 = r0.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: java.io.File requestIdDir> >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r35 = new java.lang.StringBuilder
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r35 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : specialinvoke $r35.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : specialinvoke $r35.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4)
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".log")
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".log") >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : specialinvoke $r33.<java.io.File: void <init>(java.io.File,java.lang.String)>($r34, $r38)
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : specialinvoke $r33.<java.io.File: void <init>(java.io.File,java.lang.String)>($r34, $r38) >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : r8 = $r33
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : r8 = $r33 >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r39 = <org.apache.ambari.server.bootstrap.BSHostStatusCollector: org.apache.commons.logging.Log LOG>
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r39 = <org.apache.ambari.server.bootstrap.BSHostStatusCollector: org.apache.commons.logging.Log LOG> >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $z1 = interfaceinvoke $r39.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $z1 = interfaceinvoke $r39.<org.apache.commons.logging.Log: boolean isDebugEnabled()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : if $z1 == 0
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : if $z1 == 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $z4 = virtualinvoke r7.<java.io.File: boolean exists()>()
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $z4 = virtualinvoke r7.<java.io.File: boolean exists()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : if $z4 != 0
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : if $z4 != 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : virtualinvoke r5.<org.apache.ambari.server.bootstrap.BSHostStatus: void setStatus(java.lang.String)>("RUNNING")
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : virtualinvoke r5.<org.apache.ambari.server.bootstrap.BSHostStatus: void setStatus(java.lang.String)>("RUNNING") >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatus.setStatus : r0.<org.apache.ambari.server.bootstrap.BSHostStatus: java.lang.String status> = r1
org.apache.ambari.server.bootstrap.BSHostStatus.setStatus : r0.<org.apache.ambari.server.bootstrap.BSHostStatus: java.lang.String status> = r1 >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : goto [?= $z6 = virtualinvoke r8.<java.io.File: boolean exists()>()]
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : goto [?= $z6 = virtualinvoke r8.<java.io.File: boolean exists()>()] >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $z6 = virtualinvoke r8.<java.io.File: boolean exists()>()
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $z6 = virtualinvoke r8.<java.io.File: boolean exists()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : if $z6 != 0
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : if $z6 != 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : virtualinvoke r5.<org.apache.ambari.server.bootstrap.BSHostStatus: void setLog(java.lang.String)>("")
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : virtualinvoke r5.<org.apache.ambari.server.bootstrap.BSHostStatus: void setLog(java.lang.String)>("") >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatus.setLog : r0.<org.apache.ambari.server.bootstrap.BSHostStatus: java.lang.String log> = r1
org.apache.ambari.server.bootstrap.BSHostStatus.setLog : r0.<org.apache.ambari.server.bootstrap.BSHostStatus: java.lang.String log> = r1 >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : goto [?= $r79 = r0.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: java.util.List hostStatus>]
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : goto [?= $r79 = r0.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: java.util.List hostStatus>] >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r79 = r0.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: java.util.List hostStatus>
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r79 = r0.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: java.util.List hostStatus> >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : interfaceinvoke $r79.<java.util.List: boolean add(java.lang.Object)>(r5)
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : interfaceinvoke $r79.<java.util.List: boolean add(java.lang.Object)>(r5) >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : r3 = virtualinvoke r2.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: java.util.List getHostStatus()>()
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : r3 = virtualinvoke r2.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: java.util.List getHostStatus()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.getHostStatus : $r1 = r0.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: java.util.List hostStatus>
org.apache.ambari.server.bootstrap.BSHostStatusCollector.getHostStatus : $r1 = r0.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: java.util.List hostStatus> >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.getHostStatus : return $r1
org.apache.ambari.server.bootstrap.BSHostStatusCollector.getHostStatus : return $r1 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r10 = new org.apache.ambari.server.bootstrap.BootStrapStatus
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r10 = new org.apache.ambari.server.bootstrap.BootStrapStatus >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : specialinvoke $r10.<org.apache.ambari.server.bootstrap.BootStrapStatus: void <init>()>()
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : specialinvoke $r10.<org.apache.ambari.server.bootstrap.BootStrapStatus: void <init>()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : r4 = $r10
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : r4 = $r10 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : virtualinvoke r4.<org.apache.ambari.server.bootstrap.BootStrapStatus: void setHostsStatus(java.util.List)>(r3)
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : virtualinvoke r4.<org.apache.ambari.server.bootstrap.BootStrapStatus: void setHostsStatus(java.util.List)>(r3) >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapStatus.setHostsStatus : r0.<org.apache.ambari.server.bootstrap.BootStrapStatus: java.util.List hostsStatus> = r1
org.apache.ambari.server.bootstrap.BootStrapStatus.setHostsStatus : r0.<org.apache.ambari.server.bootstrap.BootStrapStatus: java.util.List hostsStatus> = r1 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : virtualinvoke r4.<org.apache.ambari.server.bootstrap.BootStrapStatus: void setLog(java.lang.String)>("")
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : virtualinvoke r4.<org.apache.ambari.server.bootstrap.BootStrapStatus: void setLog(java.lang.String)>("") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r11 = <org.apache.ambari.server.bootstrap.BootStrapStatus$BSStat: org.apache.ambari.server.bootstrap.BootStrapStatus$BSStat RUNNING>
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r11 = <org.apache.ambari.server.bootstrap.BootStrapStatus$BSStat: org.apache.ambari.server.bootstrap.BootStrapStatus$BSStat RUNNING> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : virtualinvoke r4.<org.apache.ambari.server.bootstrap.BootStrapStatus: void setStatus(org.apache.ambari.server.bootstrap.BootStrapStatus$BSStat)>($r11)
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : virtualinvoke r4.<org.apache.ambari.server.bootstrap.BootStrapStatus: void setStatus(org.apache.ambari.server.bootstrap.BootStrapStatus$BSStat)>($r11) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r12 = r0.<org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector: org.apache.ambari.server.bootstrap.BSRunner this$0>
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r12 = r0.<org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector: org.apache.ambari.server.bootstrap.BSRunner this$0> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r13 = staticinvoke <org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.BootStrapImpl access$300(org.apache.ambari.server.bootstrap.BSRunner)>($r12)
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r13 = staticinvoke <org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.BootStrapImpl access$300(org.apache.ambari.server.bootstrap.BSRunner)>($r12) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.access$300 : $r1 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.BootStrapImpl bsImpl>
org.apache.ambari.server.bootstrap.BSRunner.access$300 : $r1 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.BootStrapImpl bsImpl> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.access$300 : return $r1
org.apache.ambari.server.bootstrap.BSRunner.access$300 : return $r1 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r14 = r0.<org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector: org.apache.ambari.server.bootstrap.BSRunner this$0>
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r14 = r0.<org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector: org.apache.ambari.server.bootstrap.BSRunner this$0> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $i0 = staticinvoke <org.apache.ambari.server.bootstrap.BSRunner: int access$200(org.apache.ambari.server.bootstrap.BSRunner)>($r14)
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $i0 = staticinvoke <org.apache.ambari.server.bootstrap.BSRunner: int access$200(org.apache.ambari.server.bootstrap.BSRunner)>($r14) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.access$200 : $i0 = r0.<org.apache.ambari.server.bootstrap.BSRunner: int requestId>
org.apache.ambari.server.bootstrap.BSRunner.access$200 : $i0 = r0.<org.apache.ambari.server.bootstrap.BSRunner: int requestId> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.access$200 : return $i0
org.apache.ambari.server.bootstrap.BSRunner.access$200 : return $i0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $l1 = (long) $i0
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $l1 = (long) $i0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : virtualinvoke $r13.<org.apache.ambari.server.bootstrap.BootStrapImpl: void updateStatus(long,org.apache.ambari.server.bootstrap.BootStrapStatus)>($l1, r4)
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : virtualinvoke $r13.<org.apache.ambari.server.bootstrap.BootStrapImpl: void updateStatus(long,org.apache.ambari.server.bootstrap.BootStrapStatus)>($l1, r4) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r145 = new java.lang.StringBuilder
org.apache.ambari.server.bootstrap.BSRunner.run : $r145 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r145.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r145.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r146 = virtualinvoke $r145.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bootstrap output, log=")
org.apache.ambari.server.bootstrap.BSRunner.run : $r146 = virtualinvoke $r145.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bootstrap output, log=") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r147 = virtualinvoke $r146.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r139)
org.apache.ambari.server.bootstrap.BSRunner.run : $r147 = virtualinvoke $r146.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r139) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r148 = virtualinvoke $r147.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ")
org.apache.ambari.server.bootstrap.BSRunner.run : $r148 = virtualinvoke $r147.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r149 = virtualinvoke $r148.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r132)
org.apache.ambari.server.bootstrap.BSRunner.run : $r149 = virtualinvoke $r148.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r132) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r150 = virtualinvoke $r149.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at ")
org.apache.ambari.server.bootstrap.BSRunner.run : $r150 = virtualinvoke $r149.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at ") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r151 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.lang.String ambariHostname>
org.apache.ambari.server.bootstrap.BSRunner.run : $r151 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.lang.String ambariHostname> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r152 = virtualinvoke $r150.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r151)
org.apache.ambari.server.bootstrap.BSRunner.run : $r152 = virtualinvoke $r150.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r151) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r19 = virtualinvoke $r152.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.bootstrap.BSRunner.run : r19 = virtualinvoke $r152.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r153 = <org.apache.ambari.server.bootstrap.BSRunner: org.apache.commons.logging.Log LOG>
org.apache.ambari.server.bootstrap.BSRunner.run : $r153 = <org.apache.ambari.server.bootstrap.BSRunner: org.apache.commons.logging.Log LOG> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : interfaceinvoke $r153.<org.apache.commons.logging.Log: void info(java.lang.Object)>(r19)
org.apache.ambari.server.bootstrap.BSRunner.run : interfaceinvoke $r153.<org.apache.commons.logging.Log: void info(java.lang.Object)>(r19) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : i1 = 1
org.apache.ambari.server.bootstrap.BSRunner.run : i1 = 1 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : z0 = 0
org.apache.ambari.server.bootstrap.BSRunner.run : z0 = 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $z9 = specialinvoke r0.<org.apache.ambari.server.bootstrap.BSRunner: boolean waitForProcessTermination(java.lang.Process,long)>(r18, l0)
org.apache.ambari.server.bootstrap.BSRunner.run : $z9 = specialinvoke r0.<org.apache.ambari.server.bootstrap.BSRunner: boolean waitForProcessTermination(java.lang.Process,long)>(r18, l0) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.waitForProcessTermination : l1 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.ambari.server.bootstrap.BSRunner.waitForProcessTermination : l1 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.waitForProcessTermination : virtualinvoke r1.<java.lang.Process: int exitValue()>()
org.apache.ambari.server.bootstrap.BSRunner.waitForProcessTermination : virtualinvoke r1.<java.lang.Process: int exitValue()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.waitForProcessTermination : r2 = $r3
org.apache.ambari.server.bootstrap.BSRunner.waitForProcessTermination : r2 = $r3 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.waitForProcessTermination : staticinvoke <java.lang.Thread: void sleep(long)>(1000L)
org.apache.ambari.server.bootstrap.BSRunner.waitForProcessTermination : staticinvoke <java.lang.Thread: void sleep(long)>(1000L) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.waitForProcessTermination : $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.ambari.server.bootstrap.BSRunner.waitForProcessTermination : $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.waitForProcessTermination : $l4 = $l3 - l1
org.apache.ambari.server.bootstrap.BSRunner.waitForProcessTermination : $l4 = $l3 - l1 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.waitForProcessTermination : $b5 = $l4 cmp l0
org.apache.ambari.server.bootstrap.BSRunner.waitForProcessTermination : $b5 = $l4 cmp l0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.waitForProcessTermination : if $b5 < 0
org.apache.ambari.server.bootstrap.BSRunner.waitForProcessTermination : if $b5 < 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.waitForProcessTermination : $z0 = 1
org.apache.ambari.server.bootstrap.BSRunner.waitForProcessTermination : $z0 = 1 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.waitForProcessTermination : return $z0
org.apache.ambari.server.bootstrap.BSRunner.waitForProcessTermination : return $z0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : if $z9 == 0
org.apache.ambari.server.bootstrap.BSRunner.run : if $z9 == 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : i1 = virtualinvoke r18.<java.lang.Process: int exitValue()>()
org.apache.ambari.server.bootstrap.BSRunner.run : i1 = virtualinvoke r18.<java.lang.Process: int exitValue()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= r20 = ""]
org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= r20 = ""] >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r20 = ""
org.apache.ambari.server.bootstrap.BSRunner.run : r20 = "" >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r21 = ""
org.apache.ambari.server.bootstrap.BSRunner.run : r21 = "" >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r155 = new java.io.File
org.apache.ambari.server.bootstrap.BSRunner.run : $r155 = new java.io.File >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r155.<java.io.File: void <init>(java.lang.String)>(r132)
org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r155.<java.io.File: void <init>(java.lang.String)>(r132) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r20 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File)>($r155)
org.apache.ambari.server.bootstrap.BSRunner.run : r20 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File)>($r155) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r156 = new java.io.File
org.apache.ambari.server.bootstrap.BSRunner.run : $r156 = new java.io.File >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r156.<java.io.File: void <init>(java.lang.String)>(r139)
org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r156.<java.io.File: void <init>(java.lang.String)>(r139) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r21 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File)>($r156)
org.apache.ambari.server.bootstrap.BSRunner.run : r21 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File)>($r156) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= $r159 = new java.lang.StringBuilder]
org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= $r159 = new java.lang.StringBuilder] >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r159 = new java.lang.StringBuilder
org.apache.ambari.server.bootstrap.BSRunner.run : $r159 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r159.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r159.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r160 = virtualinvoke $r159.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20)
org.apache.ambari.server.bootstrap.BSRunner.run : $r160 = virtualinvoke $r159.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r161 = virtualinvoke $r160.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\n")
org.apache.ambari.server.bootstrap.BSRunner.run : $r161 = virtualinvoke $r160.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\n") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r162 = virtualinvoke $r161.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21)
org.apache.ambari.server.bootstrap.BSRunner.run : $r162 = virtualinvoke $r161.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r11 = virtualinvoke $r162.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.bootstrap.BSRunner.run : r11 = virtualinvoke $r162.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : if z0 == 0
org.apache.ambari.server.bootstrap.BSRunner.run : if z0 == 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r166 = <org.apache.ambari.server.bootstrap.BSRunner: org.apache.commons.logging.Log LOG>
org.apache.ambari.server.bootstrap.BSRunner.run : $r166 = <org.apache.ambari.server.bootstrap.BSRunner: org.apache.commons.logging.Log LOG> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r167 = new java.lang.StringBuilder
org.apache.ambari.server.bootstrap.BSRunner.run : $r167 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r167.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r167.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r168 = virtualinvoke $r167.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Script log Mesg ")
org.apache.ambari.server.bootstrap.BSRunner.run : $r168 = virtualinvoke $r167.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Script log Mesg ") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r169 = virtualinvoke $r168.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11)
org.apache.ambari.server.bootstrap.BSRunner.run : $r169 = virtualinvoke $r168.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r170 = virtualinvoke $r169.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.bootstrap.BSRunner.run : $r170 = virtualinvoke $r169.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : interfaceinvoke $r166.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r170)
org.apache.ambari.server.bootstrap.BSRunner.run : interfaceinvoke $r166.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r170) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : if i1 == 0
org.apache.ambari.server.bootstrap.BSRunner.run : if i1 == 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r10 = <org.apache.ambari.server.bootstrap.BootStrapStatus$BSStat: org.apache.ambari.server.bootstrap.BootStrapStatus$BSStat SUCCESS>
org.apache.ambari.server.bootstrap.BSRunner.run : r10 = <org.apache.ambari.server.bootstrap.BootStrapStatus$BSStat: org.apache.ambari.server.bootstrap.BootStrapStatus$BSStat SUCCESS> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r171 = new org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector
org.apache.ambari.server.bootstrap.BSRunner.run : $r171 = new org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r171.<org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector: void <init>(org.apache.ambari.server.bootstrap.BSRunner,org.apache.ambari.server.bootstrap.BSRunner$1)>(r0, null)
org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r171.<org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector: void <init>(org.apache.ambari.server.bootstrap.BSRunner,org.apache.ambari.server.bootstrap.BSRunner$1)>(r0, null) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r172 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>
org.apache.ambari.server.bootstrap.BSRunner.run : $r172 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : interfaceinvoke r2.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>($r171, 0L, $r172)
org.apache.ambari.server.bootstrap.BSRunner.run : interfaceinvoke r2.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>($r171, 0L, $r172) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : l10 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.ambari.server.bootstrap.BSRunner.run : l10 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r174 = <org.apache.ambari.server.bootstrap.BSRunner: org.apache.commons.logging.Log LOG>
org.apache.ambari.server.bootstrap.BSRunner.run : $r174 = <org.apache.ambari.server.bootstrap.BSRunner: org.apache.commons.logging.Log LOG> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $z10 = interfaceinvoke $r174.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()
org.apache.ambari.server.bootstrap.BSRunner.run : $z10 = interfaceinvoke $r174.<org.apache.commons.logging.Log: boolean isDebugEnabled()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : if $z10 == 0
org.apache.ambari.server.bootstrap.BSRunner.run : if $z10 == 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : z1 = 0
org.apache.ambari.server.bootstrap.BSRunner.run : z1 = 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r176 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.BootStrapImpl bsImpl>
org.apache.ambari.server.bootstrap.BSRunner.run : $r176 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.BootStrapImpl bsImpl> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $i11 = r0.<org.apache.ambari.server.bootstrap.BSRunner: int requestId>
org.apache.ambari.server.bootstrap.BSRunner.run : $i11 = r0.<org.apache.ambari.server.bootstrap.BSRunner: int requestId> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $l12 = (long) $i11
org.apache.ambari.server.bootstrap.BSRunner.run : $l12 = (long) $i11 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r23 = virtualinvoke $r176.<org.apache.ambari.server.bootstrap.BootStrapImpl: org.apache.ambari.server.bootstrap.BootStrapStatus getStatus(long)>($l12)
org.apache.ambari.server.bootstrap.BSRunner.run : r23 = virtualinvoke $r176.<org.apache.ambari.server.bootstrap.BootStrapImpl: org.apache.ambari.server.bootstrap.BootStrapStatus getStatus(long)>($l12) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r24 = virtualinvoke r23.<org.apache.ambari.server.bootstrap.BootStrapStatus: java.util.List getHostsStatus()>()
org.apache.ambari.server.bootstrap.BSRunner.run : r24 = virtualinvoke r23.<org.apache.ambari.server.bootstrap.BootStrapStatus: java.util.List getHostsStatus()>() >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapStatus.getHostsStatus : $r1 = r0.<org.apache.ambari.server.bootstrap.BootStrapStatus: java.util.List hostsStatus>
org.apache.ambari.server.bootstrap.BootStrapStatus.getHostsStatus : $r1 = r0.<org.apache.ambari.server.bootstrap.BootStrapStatus: java.util.List hostsStatus> >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapStatus.getHostsStatus : return $r1
org.apache.ambari.server.bootstrap.BootStrapStatus.getHostsStatus : return $r1 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : if r24 == null
org.apache.ambari.server.bootstrap.BSRunner.run : if r24 == null >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r25 = interfaceinvoke r24.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.bootstrap.BSRunner.run : r25 = interfaceinvoke r24.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $z11 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.bootstrap.BSRunner.run : $z11 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : if $z11 == 0
org.apache.ambari.server.bootstrap.BSRunner.run : if $z11 == 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r177 = interfaceinvoke r25.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.bootstrap.BSRunner.run : $r177 = interfaceinvoke r25.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r26 = (org.apache.ambari.server.bootstrap.BSHostStatus) $r177
org.apache.ambari.server.bootstrap.BSRunner.run : r26 = (org.apache.ambari.server.bootstrap.BSHostStatus) $r177 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r178 = virtualinvoke r26.<org.apache.ambari.server.bootstrap.BSHostStatus: java.lang.String getStatus()>()
org.apache.ambari.server.bootstrap.BSRunner.run : $r178 = virtualinvoke r26.<org.apache.ambari.server.bootstrap.BSHostStatus: java.lang.String getStatus()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatus.getStatus : $r1 = r0.<org.apache.ambari.server.bootstrap.BSHostStatus: java.lang.String status>
org.apache.ambari.server.bootstrap.BSHostStatus.getStatus : $r1 = r0.<org.apache.ambari.server.bootstrap.BSHostStatus: java.lang.String status> >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatus.getStatus : return $r1
org.apache.ambari.server.bootstrap.BSHostStatus.getStatus : return $r1 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $z12 = virtualinvoke $r178.<java.lang.String: boolean equals(java.lang.Object)>("RUNNING")
org.apache.ambari.server.bootstrap.BSRunner.run : $z12 = virtualinvoke $r178.<java.lang.String: boolean equals(java.lang.Object)>("RUNNING") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : if $z12 == 0
org.apache.ambari.server.bootstrap.BSRunner.run : if $z12 == 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : z1 = 1
org.apache.ambari.server.bootstrap.BSRunner.run : z1 = 1 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= $z11 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= $z11 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= $r179 = <org.apache.ambari.server.bootstrap.BSRunner: org.apache.commons.logging.Log LOG>]
org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= $r179 = <org.apache.ambari.server.bootstrap.BSRunner: org.apache.commons.logging.Log LOG>] >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r179 = <org.apache.ambari.server.bootstrap.BSRunner: org.apache.commons.logging.Log LOG>
org.apache.ambari.server.bootstrap.BSRunner.run : $r179 = <org.apache.ambari.server.bootstrap.BSRunner: org.apache.commons.logging.Log LOG> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $z13 = interfaceinvoke $r179.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()
org.apache.ambari.server.bootstrap.BSRunner.run : $z13 = interfaceinvoke $r179.<org.apache.commons.logging.Log: boolean isDebugEnabled()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : if $z13 == 0
org.apache.ambari.server.bootstrap.BSRunner.run : if $z13 == 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : if z1 != 0
org.apache.ambari.server.bootstrap.BSRunner.run : if z1 != 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : staticinvoke <java.lang.Thread: void sleep(long)>(1000L)
org.apache.ambari.server.bootstrap.BSRunner.run : staticinvoke <java.lang.Thread: void sleep(long)>(1000L) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= l13 = staticinvoke <java.lang.System: long currentTimeMillis()>()]
org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= l13 = staticinvoke <java.lang.System: long currentTimeMillis()>()] >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : l13 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.ambari.server.bootstrap.BSRunner.run : l13 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $l14 = l10 + 15000L
org.apache.ambari.server.bootstrap.BSRunner.run : $l14 = l10 + 15000L >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $b15 = l13 cmp $l14
org.apache.ambari.server.bootstrap.BSRunner.run : $b15 = l13 cmp $l14 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : if $b15 < 0
org.apache.ambari.server.bootstrap.BSRunner.run : if $b15 < 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= $r174 = <org.apache.ambari.server.bootstrap.BSRunner: org.apache.commons.logging.Log LOG>]
org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= $r174 = <org.apache.ambari.server.bootstrap.BSRunner: org.apache.commons.logging.Log LOG>] >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r187 = <org.apache.ambari.server.bootstrap.BSRunner: org.apache.commons.logging.Log LOG>
org.apache.ambari.server.bootstrap.BSRunner.run : $r187 = <org.apache.ambari.server.bootstrap.BSRunner: org.apache.commons.logging.Log LOG> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : interfaceinvoke $r187.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("Gave up waiting for hosts status to be updated")
org.apache.ambari.server.bootstrap.BSRunner.run : interfaceinvoke $r187.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("Gave up waiting for hosts status to be updated") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= interfaceinvoke r5.<java.util.concurrent.ScheduledFuture: boolean cancel(boolean)>(1)]
org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= interfaceinvoke r5.<java.util.concurrent.ScheduledFuture: boolean cancel(boolean)>(1)] >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : interfaceinvoke r5.<java.util.concurrent.ScheduledFuture: boolean cancel(boolean)>(1)
org.apache.ambari.server.bootstrap.BSRunner.run : interfaceinvoke r5.<java.util.concurrent.ScheduledFuture: boolean cancel(boolean)>(1) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r188 = new org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector
org.apache.ambari.server.bootstrap.BSRunner.run : $r188 = new org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r188.<org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector: void <init>(org.apache.ambari.server.bootstrap.BSRunner,org.apache.ambari.server.bootstrap.BSRunner$1)>(r0, null)
org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r188.<org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector: void <init>(org.apache.ambari.server.bootstrap.BSRunner,org.apache.ambari.server.bootstrap.BSRunner$1)>(r0, null) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r189 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>
org.apache.ambari.server.bootstrap.BSRunner.run : $r189 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : interfaceinvoke r2.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>($r188, 0L, $r189)
org.apache.ambari.server.bootstrap.BSRunner.run : interfaceinvoke r2.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>($r188, 0L, $r189) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : interfaceinvoke r2.<java.util.concurrent.ScheduledExecutorService: java.util.List shutdownNow()>()
org.apache.ambari.server.bootstrap.BSRunner.run : interfaceinvoke r2.<java.util.concurrent.ScheduledExecutorService: java.util.List shutdownNow()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r192 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>
org.apache.ambari.server.bootstrap.BSRunner.run : $r192 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : interfaceinvoke r2.<java.util.concurrent.ScheduledExecutorService: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(10L, $r192)
org.apache.ambari.server.bootstrap.BSRunner.run : interfaceinvoke r2.<java.util.concurrent.ScheduledExecutorService: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(10L, $r192) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= virtualinvoke r18.<java.lang.Process: void destroy()>()]
org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= virtualinvoke r18.<java.lang.Process: void destroy()>()] >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : virtualinvoke r18.<java.lang.Process: void destroy()>()
org.apache.ambari.server.bootstrap.BSRunner.run : virtualinvoke r18.<java.lang.Process: void destroy()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= $r207 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.BootStrapImpl bsImpl>]
org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= $r207 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.BootStrapImpl bsImpl>] >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r207 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.BootStrapImpl bsImpl>
org.apache.ambari.server.bootstrap.BSRunner.run : $r207 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.BootStrapImpl bsImpl> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $i16 = r0.<org.apache.ambari.server.bootstrap.BSRunner: int requestId>
org.apache.ambari.server.bootstrap.BSRunner.run : $i16 = r0.<org.apache.ambari.server.bootstrap.BSRunner: int requestId> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $l17 = (long) $i16
org.apache.ambari.server.bootstrap.BSRunner.run : $l17 = (long) $i16 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r208 = virtualinvoke $r207.<org.apache.ambari.server.bootstrap.BootStrapImpl: org.apache.ambari.server.bootstrap.BootStrapStatus getStatus(long)>($l17)
org.apache.ambari.server.bootstrap.BSRunner.run : r208 = virtualinvoke $r207.<org.apache.ambari.server.bootstrap.BootStrapImpl: org.apache.ambari.server.bootstrap.BootStrapStatus getStatus(long)>($l17) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r209 = virtualinvoke r208.<org.apache.ambari.server.bootstrap.BootStrapStatus: java.util.List getHostsStatus()>()
org.apache.ambari.server.bootstrap.BSRunner.run : r209 = virtualinvoke r208.<org.apache.ambari.server.bootstrap.BootStrapStatus: java.util.List getHostsStatus()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : if r209 == null
org.apache.ambari.server.bootstrap.BSRunner.run : if r209 == null >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r210 = interfaceinvoke r209.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.bootstrap.BSRunner.run : r210 = interfaceinvoke r209.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $z18 = interfaceinvoke r210.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.bootstrap.BSRunner.run : $z18 = interfaceinvoke r210.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : if $z18 == 0
org.apache.ambari.server.bootstrap.BSRunner.run : if $z18 == 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r211 = interfaceinvoke r210.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.bootstrap.BSRunner.run : $r211 = interfaceinvoke r210.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r212 = (org.apache.ambari.server.bootstrap.BSHostStatus) $r211
org.apache.ambari.server.bootstrap.BSRunner.run : r212 = (org.apache.ambari.server.bootstrap.BSHostStatus) $r211 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r213 = "FAILED"
org.apache.ambari.server.bootstrap.BSRunner.run : $r213 = "FAILED" >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r214 = virtualinvoke r212.<org.apache.ambari.server.bootstrap.BSHostStatus: java.lang.String getStatus()>()
org.apache.ambari.server.bootstrap.BSRunner.run : $r214 = virtualinvoke r212.<org.apache.ambari.server.bootstrap.BSHostStatus: java.lang.String getStatus()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $z19 = virtualinvoke $r213.<java.lang.String: boolean equals(java.lang.Object)>($r214)
org.apache.ambari.server.bootstrap.BSRunner.run : $z19 = virtualinvoke $r213.<java.lang.String: boolean equals(java.lang.Object)>($r214) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : if $z19 == 0
org.apache.ambari.server.bootstrap.BSRunner.run : if $z19 == 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= $z18 = interfaceinvoke r210.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= $z18 = interfaceinvoke r210.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= $r215 = new org.apache.ambari.server.bootstrap.BootStrapStatus]
org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= $r215 = new org.apache.ambari.server.bootstrap.BootStrapStatus] >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r215 = new org.apache.ambari.server.bootstrap.BootStrapStatus
org.apache.ambari.server.bootstrap.BSRunner.run : $r215 = new org.apache.ambari.server.bootstrap.BootStrapStatus >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r215.<org.apache.ambari.server.bootstrap.BootStrapStatus: void <init>()>()
org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r215.<org.apache.ambari.server.bootstrap.BootStrapStatus: void <init>()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r216 = $r215
org.apache.ambari.server.bootstrap.BSRunner.run : r216 = $r215 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : virtualinvoke r216.<org.apache.ambari.server.bootstrap.BootStrapStatus: void setHostsStatus(java.util.List)>(r209)
org.apache.ambari.server.bootstrap.BSRunner.run : virtualinvoke r216.<org.apache.ambari.server.bootstrap.BootStrapStatus: void setHostsStatus(java.util.List)>(r209) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : virtualinvoke r216.<org.apache.ambari.server.bootstrap.BootStrapStatus: void setLog(java.lang.String)>(r11)
org.apache.ambari.server.bootstrap.BSRunner.run : virtualinvoke r216.<org.apache.ambari.server.bootstrap.BootStrapStatus: void setLog(java.lang.String)>(r11) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : virtualinvoke r216.<org.apache.ambari.server.bootstrap.BootStrapStatus: void setStatus(org.apache.ambari.server.bootstrap.BootStrapStatus$BSStat)>(r10)
org.apache.ambari.server.bootstrap.BSRunner.run : virtualinvoke r216.<org.apache.ambari.server.bootstrap.BootStrapStatus: void setStatus(org.apache.ambari.server.bootstrap.BootStrapStatus$BSStat)>(r10) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r217 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File sshKeyFile>
org.apache.ambari.server.bootstrap.BSRunner.run : $r217 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File sshKeyFile> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : staticinvoke <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)>($r217)
org.apache.ambari.server.bootstrap.BSRunner.run : staticinvoke <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)>($r217) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= $r222 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File passwordFile>]
org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= $r222 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File passwordFile>] >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r222 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File passwordFile>
org.apache.ambari.server.bootstrap.BSRunner.run : $r222 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File passwordFile> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : if $r222 == null
org.apache.ambari.server.bootstrap.BSRunner.run : if $r222 == null >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r223 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File passwordFile>
org.apache.ambari.server.bootstrap.BSRunner.run : $r223 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File passwordFile> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : staticinvoke <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)>($r223)
org.apache.ambari.server.bootstrap.BSRunner.run : staticinvoke <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)>($r223) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= $r228 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.BootStrapImpl bsImpl>]
org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= $r228 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.BootStrapImpl bsImpl>] >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r228 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.BootStrapImpl bsImpl>
org.apache.ambari.server.bootstrap.BSRunner.run : $r228 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.BootStrapImpl bsImpl> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $i18 = r0.<org.apache.ambari.server.bootstrap.BSRunner: int requestId>
org.apache.ambari.server.bootstrap.BSRunner.run : $i18 = r0.<org.apache.ambari.server.bootstrap.BSRunner: int requestId> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $l19 = (long) $i18
org.apache.ambari.server.bootstrap.BSRunner.run : $l19 = (long) $i18 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : virtualinvoke $r228.<org.apache.ambari.server.bootstrap.BootStrapImpl: void updateStatus(long,org.apache.ambari.server.bootstrap.BootStrapStatus)>($l19, r216)
org.apache.ambari.server.bootstrap.BSRunner.run : virtualinvoke $r228.<org.apache.ambari.server.bootstrap.BootStrapImpl: void updateStatus(long,org.apache.ambari.server.bootstrap.BootStrapStatus)>($l19, r216) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r229 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.BootStrapImpl bsImpl>
org.apache.ambari.server.bootstrap.BSRunner.run : $r229 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.BootStrapImpl bsImpl> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : virtualinvoke $r229.<org.apache.ambari.server.bootstrap.BootStrapImpl: void reset()>()
org.apache.ambari.server.bootstrap.BSRunner.run : virtualinvoke $r229.<org.apache.ambari.server.bootstrap.BootStrapImpl: void reset()>() >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.reset : r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: org.apache.ambari.server.bootstrap.BSRunner bsRunner> = null
org.apache.ambari.server.bootstrap.BootStrapImpl.reset : r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: org.apache.ambari.server.bootstrap.BSRunner bsRunner> = null >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : virtualinvoke r0.<org.apache.ambari.server.bootstrap.BSRunner: void finished()>()
org.apache.ambari.server.bootstrap.BSRunner.run : virtualinvoke r0.<org.apache.ambari.server.bootstrap.BSRunner: void finished()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.finished : r0.<org.apache.ambari.server.bootstrap.BSRunner: boolean finished> = 1
org.apache.ambari.server.bootstrap.BSRunner.finished : r0.<org.apache.ambari.server.bootstrap.BSRunner: boolean finished> = 1 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= return]
org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= return] >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapStatus.getLog : $r1 = r0.<org.apache.ambari.server.bootstrap.BootStrapStatus: java.lang.String log>
org.apache.ambari.server.bootstrap.BootStrapStatus.getLog : $r1 = r0.<org.apache.ambari.server.bootstrap.BootStrapStatus: java.lang.String log> >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapStatus.getLog : return $r1
