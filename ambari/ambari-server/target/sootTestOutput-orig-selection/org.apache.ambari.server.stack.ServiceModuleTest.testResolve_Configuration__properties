org.apache.ambari.server.state.ServiceInfo.ensureMandatoryServiceProperties : $r2 = specialinvoke r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Map ensureVisibilityServiceProperties(java.util.Map)>(r1) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r2 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_INSTALLABLE_PROPERTY>
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r2 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_INSTALLABLE_PROPERTY> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r4 = virtualinvoke $r2.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>()
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r4 = virtualinvoke $r2.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $z0 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r4)
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $z0 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r4) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : if $z0 != 0
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : if $z0 != 0 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r5 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_INSTALLABLE_PROPERTY>
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r5 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_INSTALLABLE_PROPERTY> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r6 = virtualinvoke $r5.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>()
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r6 = virtualinvoke $r5.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r3 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_INSTALLABLE_PROPERTY>
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r3 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_INSTALLABLE_PROPERTY> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r7 = virtualinvoke $r3.<java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>()
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r7 = virtualinvoke $r3.<java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7)
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r9 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MANAGED_PROPERTY>
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r9 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MANAGED_PROPERTY> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r10 = virtualinvoke $r9.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>()
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r10 = virtualinvoke $r9.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $z1 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r10)
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $z1 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r10) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : if $z1 != 0
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : if $z1 != 0 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r11 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MANAGED_PROPERTY>
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r11 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MANAGED_PROPERTY> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r12 = virtualinvoke $r11.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>()
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r12 = virtualinvoke $r11.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r13 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MANAGED_PROPERTY>
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r13 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MANAGED_PROPERTY> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r14 = virtualinvoke $r13.<java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>()
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r14 = virtualinvoke $r13.<java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r14)
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r14) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r16 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MONITORED_PROPERTY>
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r16 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MONITORED_PROPERTY> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r17 = virtualinvoke $r16.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>()
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r17 = virtualinvoke $r16.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $z2 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r17)
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $z2 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r17) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : if $z2 != 0
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : if $z2 != 0 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r18 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MONITORED_PROPERTY>
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r18 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MONITORED_PROPERTY> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r19 = virtualinvoke $r18.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>()
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r19 = virtualinvoke $r18.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r20 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MONITORED_PROPERTY>
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r20 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MONITORED_PROPERTY> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r21 = virtualinvoke $r20.<java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>()
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r21 = virtualinvoke $r20.<java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, $r21)
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, $r21) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : return r1
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : return r1 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureMandatoryServiceProperties : return $r2
org.apache.ambari.server.state.ServiceInfo.ensureMandatoryServiceProperties : return $r2 >>>>>>>> org.apache.ambari.server.state.PropertyInfo.setName : r0.<org.apache.ambari.server.state.PropertyInfo: java.lang.String name> = r1
org.apache.ambari.server.state.PropertyInfo.setName : r0.<org.apache.ambari.server.state.PropertyInfo: java.lang.String name> = r1 >>>>>>>> org.apache.ambari.server.state.PropertyInfo.setValue : r0.<org.apache.ambari.server.state.PropertyInfo: java.lang.String value> = r1
org.apache.ambari.server.state.PropertyInfo.setValue : r0.<org.apache.ambari.server.state.PropertyInfo: java.lang.String value> = r1 >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo$Supports.getXmlAttributeName : $r1 = r0.<org.apache.ambari.server.stack.ConfigurationInfo$Supports: java.lang.String xmlAttributeName>
org.apache.ambari.server.stack.ConfigurationInfo$Supports.getXmlAttributeName : $r1 = r0.<org.apache.ambari.server.stack.ConfigurationInfo$Supports: java.lang.String xmlAttributeName> >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo$Supports.getXmlAttributeName : return $r1
org.apache.ambari.server.stack.ConfigurationInfo$Supports.getXmlAttributeName : return $r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationModule : $r3 = new org.apache.ambari.server.stack.ConfigurationInfo
org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationModule : $r3 = new org.apache.ambari.server.stack.ConfigurationInfo >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationModule : $r4 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>()
org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationModule : $r4 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationModule : specialinvoke $r3.<org.apache.ambari.server.stack.ConfigurationInfo: void <init>(java.util.Collection,java.util.Map)>(r2, $r4)
org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationModule : specialinvoke $r3.<org.apache.ambari.server.stack.ConfigurationInfo: void <init>(java.util.Collection,java.util.Map)>(r2, $r4) >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : $r2 = new java.util.HashMap
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : $r2 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : specialinvoke $r2.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : specialinvoke $r2.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : r3 = $r2
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : r3 = $r2 >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : $r9 = new java.util.HashMap
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : $r9 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : specialinvoke $r9.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : specialinvoke $r9.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : r4 = $r9
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : r4 = $r9 >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("supports", r4)
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("supports", r4) >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : $r11 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>()
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : $r11 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : r5 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : r5 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : if $z0 == 0
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : if $z0 == 0 >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : r0.<org.apache.ambari.server.stack.ConfigurationInfo: java.util.Map attributes> = r3
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : r0.<org.apache.ambari.server.stack.ConfigurationInfo: java.util.Map attributes> = r3 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationModule : r5 = $r3
org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationModule : r5 = $r3 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationModule : $r6 = new org.apache.ambari.server.stack.ConfigurationModule
org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationModule : $r6 = new org.apache.ambari.server.stack.ConfigurationModule >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationModule : specialinvoke $r6.<org.apache.ambari.server.stack.ConfigurationModule: void <init>(java.lang.String,org.apache.ambari.server.stack.ConfigurationInfo)>(r1, r5)
org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationModule : specialinvoke $r6.<org.apache.ambari.server.stack.ConfigurationModule: void <init>(java.lang.String,org.apache.ambari.server.stack.ConfigurationInfo)>(r1, r5) >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.isValid : $z0 = r0.<org.apache.ambari.server.stack.ConfigurationInfo: boolean valid>
org.apache.ambari.server.stack.ConfigurationInfo.isValid : $z0 = r0.<org.apache.ambari.server.stack.ConfigurationInfo: boolean valid> >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.isValid : return $z0
org.apache.ambari.server.stack.ConfigurationInfo.isValid : return $z0 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationModule : return $r6
org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationModule : return $r6 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationModule : $r4 = new org.apache.ambari.server.stack.ConfigurationInfo
org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationModule : $r4 = new org.apache.ambari.server.stack.ConfigurationInfo >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationModule : specialinvoke $r4.<org.apache.ambari.server.stack.ConfigurationInfo: void <init>(java.util.Collection,java.util.Map)>(r2, r3)
org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationModule : specialinvoke $r4.<org.apache.ambari.server.stack.ConfigurationInfo: void <init>(java.util.Collection,java.util.Map)>(r2, r3) >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : $r12 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : $r12 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : r6 = (java.util.Map$Entry) $r12
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : r6 = (java.util.Map$Entry) $r12 >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : $r13 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>()
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : $r13 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : r7 = (java.lang.String) $r13
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : r7 = (java.lang.String) $r13 >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : r8 = staticinvoke <org.apache.ambari.server.stack.ConfigurationInfo$Supports: org.apache.ambari.server.stack.ConfigurationInfo$Supports attributeNameValueOf(java.lang.String)>(r7)
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : r8 = staticinvoke <org.apache.ambari.server.stack.ConfigurationInfo$Supports: org.apache.ambari.server.stack.ConfigurationInfo$Supports attributeNameValueOf(java.lang.String)>(r7) >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo$Supports.attributeNameValueOf : r1 = staticinvoke <org.apache.ambari.server.stack.ConfigurationInfo$Supports: org.apache.ambari.server.stack.ConfigurationInfo$Supports[] values()>()
org.apache.ambari.server.stack.ConfigurationInfo$Supports.attributeNameValueOf : r1 = staticinvoke <org.apache.ambari.server.stack.ConfigurationInfo$Supports: org.apache.ambari.server.stack.ConfigurationInfo$Supports[] values()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo$Supports.values : $r0 = <org.apache.ambari.server.stack.ConfigurationInfo$Supports: org.apache.ambari.server.stack.ConfigurationInfo$Supports[] $VALUES>
org.apache.ambari.server.stack.ConfigurationInfo$Supports.values : $r0 = <org.apache.ambari.server.stack.ConfigurationInfo$Supports: org.apache.ambari.server.stack.ConfigurationInfo$Supports[] $VALUES> >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo$Supports.values : $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>()
org.apache.ambari.server.stack.ConfigurationInfo$Supports.values : $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo$Supports.values : $r2 = (org.apache.ambari.server.stack.ConfigurationInfo$Supports[]) $r1
org.apache.ambari.server.stack.ConfigurationInfo$Supports.values : $r2 = (org.apache.ambari.server.stack.ConfigurationInfo$Supports[]) $r1 >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo$Supports.values : return $r2
org.apache.ambari.server.stack.ConfigurationInfo$Supports.values : return $r2 >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo$Supports.attributeNameValueOf : i0 = lengthof r1
org.apache.ambari.server.stack.ConfigurationInfo$Supports.attributeNameValueOf : i0 = lengthof r1 >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo$Supports.attributeNameValueOf : i1 = 0
org.apache.ambari.server.stack.ConfigurationInfo$Supports.attributeNameValueOf : i1 = 0 >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo$Supports.attributeNameValueOf : if i1 >= i0
org.apache.ambari.server.stack.ConfigurationInfo$Supports.attributeNameValueOf : if i1 >= i0 >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo$Supports.attributeNameValueOf : r2 = r1[i1]
org.apache.ambari.server.stack.ConfigurationInfo$Supports.attributeNameValueOf : r2 = r1[i1] >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo$Supports.attributeNameValueOf : $r3 = virtualinvoke r2.<org.apache.ambari.server.stack.ConfigurationInfo$Supports: java.lang.String getXmlAttributeName()>()
org.apache.ambari.server.stack.ConfigurationInfo$Supports.attributeNameValueOf : $r3 = virtualinvoke r2.<org.apache.ambari.server.stack.ConfigurationInfo$Supports: java.lang.String getXmlAttributeName()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo$Supports.attributeNameValueOf : $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r0)
org.apache.ambari.server.stack.ConfigurationInfo$Supports.attributeNameValueOf : $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r0) >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo$Supports.attributeNameValueOf : if $z0 == 0
org.apache.ambari.server.stack.ConfigurationInfo$Supports.attributeNameValueOf : if $z0 == 0 >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo$Supports.attributeNameValueOf : i1 = i1 + 1
org.apache.ambari.server.stack.ConfigurationInfo$Supports.attributeNameValueOf : i1 = i1 + 1 >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo$Supports.attributeNameValueOf : goto [?= (branch)]
org.apache.ambari.server.stack.ConfigurationInfo$Supports.attributeNameValueOf : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo$Supports.attributeNameValueOf : return r2
org.apache.ambari.server.stack.ConfigurationInfo$Supports.attributeNameValueOf : return r2 >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : if r8 == null
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : if r8 == null >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : $r14 = virtualinvoke r8.<org.apache.ambari.server.stack.ConfigurationInfo$Supports: java.lang.String getPropertyName()>()
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : $r14 = virtualinvoke r8.<org.apache.ambari.server.stack.ConfigurationInfo$Supports: java.lang.String getPropertyName()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo$Supports.getPropertyName : $r1 = virtualinvoke r0.<org.apache.ambari.server.stack.ConfigurationInfo$Supports: java.lang.String name()>()
org.apache.ambari.server.stack.ConfigurationInfo$Supports.getPropertyName : $r1 = virtualinvoke r0.<org.apache.ambari.server.stack.ConfigurationInfo$Supports: java.lang.String name()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo$Supports.getPropertyName : $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>()
org.apache.ambari.server.stack.ConfigurationInfo$Supports.getPropertyName : $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo$Supports.getPropertyName : return $r2
org.apache.ambari.server.stack.ConfigurationInfo$Supports.getPropertyName : return $r2 >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : $r15 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>()
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : $r15 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : $r16 = (java.lang.String) $r15
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : $r16 = (java.lang.String) $r15 >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r16)
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r16) >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : $r18 = virtualinvoke $r17.<java.lang.Boolean: java.lang.String toString()>()
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : $r18 = virtualinvoke $r17.<java.lang.Boolean: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r18)
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r18) >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : goto [?= (branch)]
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : goto [?= $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : goto [?= $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationModule : r5 = $r4
org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationModule : r5 = $r4 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : r3 = virtualinvoke r1.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getName()>()
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : r3 = virtualinvoke r1.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getName()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getName : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String name>
org.apache.ambari.server.state.ServiceInfo.getName : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String name> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getName : return $r1
org.apache.ambari.server.state.ServiceInfo.getName : return $r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : $r4 = virtualinvoke r1.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getName()>()
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : $r4 = virtualinvoke r1.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getName()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : if $r4 != null
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : if $r4 != null >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : virtualinvoke r1.<org.apache.ambari.server.state.ServiceInfo: void setName(java.lang.String)>("service1")
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : virtualinvoke r1.<org.apache.ambari.server.state.ServiceInfo: void setName(java.lang.String)>("service1") >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setName : r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String name> = r1
org.apache.ambari.server.state.ServiceInfo.setName : r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String name> = r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : $r5 = specialinvoke r0.<org.apache.ambari.server.stack.ServiceModuleTest: org.apache.ambari.server.stack.StackContext createStackContext(java.lang.String,boolean)>(r3, 1)
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : $r5 = specialinvoke r0.<org.apache.ambari.server.stack.ServiceModuleTest: org.apache.ambari.server.stack.StackContext createStackContext(java.lang.String,boolean)>(r3, 1) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : $r3 = staticinvoke <org.easymock.EasyMock: java.lang.Object createStrictMock(java.lang.Class)>(class "org/apache/ambari/server/stack/StackContext")
org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : $r3 = staticinvoke <org.easymock.EasyMock: java.lang.Object createStrictMock(java.lang.Class)>(class "org/apache/ambari/server/stack/StackContext") >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : r2 = (org.apache.ambari.server.stack.StackContext) $r3
org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : r2 = (org.apache.ambari.server.stack.StackContext) $r3 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : if z0 == 0
org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : if z0 == 0 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : virtualinvoke r2.<org.apache.ambari.server.stack.StackContext: void registerServiceCheck(java.lang.String)>(r1)
org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : virtualinvoke r2.<org.apache.ambari.server.stack.StackContext: void registerServiceCheck(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : $r4 = newarray (java.lang.Object)[1]
org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : $r4 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : $r4[0] = r2
org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : $r4[0] = r2 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : staticinvoke <org.easymock.EasyMock: void replay(java.lang.Object[])>($r4)
org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : staticinvoke <org.easymock.EasyMock: void replay(java.lang.Object[])>($r4) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : return r2
org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : return r2 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : $r6 = specialinvoke r0.<org.apache.ambari.server.stack.ServiceModuleTest: org.apache.ambari.server.stack.ServiceModule createServiceModule(org.apache.ambari.server.state.ServiceInfo,java.util.Collection,org.apache.ambari.server.stack.StackContext)>(r1, r2, $r5)
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : $r6 = specialinvoke r0.<org.apache.ambari.server.stack.ServiceModuleTest: org.apache.ambari.server.stack.ServiceModule createServiceModule(org.apache.ambari.server.state.ServiceInfo,java.util.Collection,org.apache.ambari.server.stack.StackContext)>(r1, r2, $r5) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : $r6 = virtualinvoke r1.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getName()>()
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : $r6 = virtualinvoke r1.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getName()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : if $r6 != null
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : if $r6 != null >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : r4 = specialinvoke r0.<org.apache.ambari.server.stack.ServiceModuleTest: org.apache.ambari.server.stack.ConfigurationDirectory createConfigurationDirectory(java.util.Collection)>(r2)
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : r4 = specialinvoke r0.<org.apache.ambari.server.stack.ServiceModuleTest: org.apache.ambari.server.stack.ConfigurationDirectory createConfigurationDirectory(java.util.Collection)>(r2) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationDirectory : $r3 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/stack/ConfigurationDirectory")
