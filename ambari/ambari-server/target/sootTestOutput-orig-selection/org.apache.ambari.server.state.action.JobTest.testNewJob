org.apache.ambari.server.state.action.JobTest.createNewJob : $r2 = new org.apache.ambari.server.state.action.ActionId >>>>>>>> org.apache.ambari.server.state.action.JobTest.createNewJob : $r3 = new org.apache.ambari.server.state.action.ActionType
org.apache.ambari.server.state.action.JobTest.createNewJob : $r3 = new org.apache.ambari.server.state.action.ActionType >>>>>>>> org.apache.ambari.server.state.action.JobTest.createNewJob : specialinvoke $r3.<org.apache.ambari.server.state.action.ActionType: void <init>(java.lang.String)>(r1)
org.apache.ambari.server.state.action.JobTest.createNewJob : specialinvoke $r3.<org.apache.ambari.server.state.action.ActionType: void <init>(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.state.action.JobTest.createNewJob : specialinvoke $r2.<org.apache.ambari.server.state.action.ActionId: void <init>(long,org.apache.ambari.server.state.action.ActionType)>(l0, $r3)
org.apache.ambari.server.state.action.JobTest.createNewJob : specialinvoke $r2.<org.apache.ambari.server.state.action.ActionId: void <init>(long,org.apache.ambari.server.state.action.ActionType)>(l0, $r3) >>>>>>>> org.apache.ambari.server.state.action.JobTest.createNewJob : r4 = $r2
org.apache.ambari.server.state.action.JobTest.createNewJob : r4 = $r2 >>>>>>>> org.apache.ambari.server.state.action.JobTest.createNewJob : $r6 = new org.apache.ambari.server.state.action.ActionImpl
org.apache.ambari.server.state.action.JobTest.createNewJob : $r6 = new org.apache.ambari.server.state.action.ActionImpl >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory.addTransition : $r5 = new org.apache.ambari.server.state.fsm.StateMachineFactory
org.apache.ambari.server.state.fsm.StateMachineFactory.addTransition : $r5 = new org.apache.ambari.server.state.fsm.StateMachineFactory >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory.addTransition : $r6 = new org.apache.ambari.server.state.fsm.StateMachineFactory$ApplicableSingleOrMultipleTransition
org.apache.ambari.server.state.fsm.StateMachineFactory.addTransition : $r6 = new org.apache.ambari.server.state.fsm.StateMachineFactory$ApplicableSingleOrMultipleTransition >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory.addTransition : $r7 = new org.apache.ambari.server.state.fsm.StateMachineFactory$SingleInternalArc
org.apache.ambari.server.state.fsm.StateMachineFactory.addTransition : $r7 = new org.apache.ambari.server.state.fsm.StateMachineFactory$SingleInternalArc >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory.addTransition : specialinvoke $r7.<org.apache.ambari.server.state.fsm.StateMachineFactory$SingleInternalArc: void <init>(org.apache.ambari.server.state.fsm.StateMachineFactory,java.lang.Enum,org.apache.ambari.server.state.fsm.SingleArcTransition)>(r0, r2, r4)
org.apache.ambari.server.state.fsm.StateMachineFactory.addTransition : specialinvoke $r7.<org.apache.ambari.server.state.fsm.StateMachineFactory$SingleInternalArc: void <init>(org.apache.ambari.server.state.fsm.StateMachineFactory,java.lang.Enum,org.apache.ambari.server.state.fsm.SingleArcTransition)>(r0, r2, r4) >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory.addTransition : specialinvoke $r6.<org.apache.ambari.server.state.fsm.StateMachineFactory$ApplicableSingleOrMultipleTransition: void <init>(java.lang.Enum,java.lang.Enum,org.apache.ambari.server.state.fsm.StateMachineFactory$Transition)>(r1, r3, $r7)
org.apache.ambari.server.state.fsm.StateMachineFactory.addTransition : specialinvoke $r6.<org.apache.ambari.server.state.fsm.StateMachineFactory$ApplicableSingleOrMultipleTransition: void <init>(java.lang.Enum,java.lang.Enum,org.apache.ambari.server.state.fsm.StateMachineFactory$Transition)>(r1, r3, $r7) >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory.addTransition : specialinvoke $r5.<org.apache.ambari.server.state.fsm.StateMachineFactory: void <init>(org.apache.ambari.server.state.fsm.StateMachineFactory,org.apache.ambari.server.state.fsm.StateMachineFactory$ApplicableTransition)>(r0, $r6)
org.apache.ambari.server.state.fsm.StateMachineFactory.addTransition : specialinvoke $r5.<org.apache.ambari.server.state.fsm.StateMachineFactory: void <init>(org.apache.ambari.server.state.fsm.StateMachineFactory,org.apache.ambari.server.state.fsm.StateMachineFactory$ApplicableTransition)>(r0, $r6) >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory.addTransition : return $r5
org.apache.ambari.server.state.fsm.StateMachineFactory.addTransition : return $r5 >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory.installTopology : $r1 = new org.apache.ambari.server.state.fsm.StateMachineFactory
org.apache.ambari.server.state.fsm.StateMachineFactory.installTopology : $r1 = new org.apache.ambari.server.state.fsm.StateMachineFactory >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory.installTopology : specialinvoke $r1.<org.apache.ambari.server.state.fsm.StateMachineFactory: void <init>(org.apache.ambari.server.state.fsm.StateMachineFactory,boolean)>(r0, 1)
org.apache.ambari.server.state.fsm.StateMachineFactory.installTopology : specialinvoke $r1.<org.apache.ambari.server.state.fsm.StateMachineFactory: void <init>(org.apache.ambari.server.state.fsm.StateMachineFactory,boolean)>(r0, 1) >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory.makeStateMachineTable : $r1 = new java.util.Stack
org.apache.ambari.server.state.fsm.StateMachineFactory.makeStateMachineTable : $r1 = new java.util.Stack >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory.makeStateMachineTable : specialinvoke $r1.<java.util.Stack: void <init>()>()
org.apache.ambari.server.state.fsm.StateMachineFactory.makeStateMachineTable : specialinvoke $r1.<java.util.Stack: void <init>()>() >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory.makeStateMachineTable : r2 = $r1
org.apache.ambari.server.state.fsm.StateMachineFactory.makeStateMachineTable : r2 = $r1 >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory.makeStateMachineTable : $r5 = new java.util.HashMap
org.apache.ambari.server.state.fsm.StateMachineFactory.makeStateMachineTable : $r5 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory.makeStateMachineTable : specialinvoke $r5.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.state.fsm.StateMachineFactory.makeStateMachineTable : specialinvoke $r5.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory.makeStateMachineTable : r3 = $r5
org.apache.ambari.server.state.fsm.StateMachineFactory.makeStateMachineTable : r3 = $r5 >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory.makeStateMachineTable : $r6 = r0.<org.apache.ambari.server.state.fsm.StateMachineFactory: java.lang.Enum defaultInitialState>
org.apache.ambari.server.state.fsm.StateMachineFactory.makeStateMachineTable : $r6 = r0.<org.apache.ambari.server.state.fsm.StateMachineFactory: java.lang.Enum defaultInitialState> >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory.makeStateMachineTable : interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, null)
org.apache.ambari.server.state.fsm.StateMachineFactory.makeStateMachineTable : interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, null) >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory.makeStateMachineTable : $r8 = new java.util.EnumMap
org.apache.ambari.server.state.fsm.StateMachineFactory.makeStateMachineTable : $r8 = new java.util.EnumMap >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory.makeStateMachineTable : specialinvoke $r8.<java.util.EnumMap: void <init>(java.util.Map)>(r3)
org.apache.ambari.server.state.fsm.StateMachineFactory.makeStateMachineTable : specialinvoke $r8.<java.util.EnumMap: void <init>(java.util.Map)>(r3) >>>>>>>> org.apache.ambari.server.state.action.ActionState.values : $r0 = <org.apache.ambari.server.state.action.ActionState: org.apache.ambari.server.state.action.ActionState[] $VALUES>
org.apache.ambari.server.state.action.ActionState.values : $r0 = <org.apache.ambari.server.state.action.ActionState: org.apache.ambari.server.state.action.ActionState[] $VALUES> >>>>>>>> org.apache.ambari.server.state.action.ActionState.values : $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>()
org.apache.ambari.server.state.action.ActionState.values : $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> org.apache.ambari.server.state.action.ActionState.values : $r2 = (org.apache.ambari.server.state.action.ActionState[]) $r1
org.apache.ambari.server.state.action.ActionState.values : $r2 = (org.apache.ambari.server.state.action.ActionState[]) $r1 >>>>>>>> org.apache.ambari.server.state.action.ActionState.values : return $r2
org.apache.ambari.server.state.action.ActionState.values : return $r2 >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory.makeStateMachineTable : r0.<org.apache.ambari.server.state.fsm.StateMachineFactory: java.util.Map stateMachineTable> = $r8
org.apache.ambari.server.state.fsm.StateMachineFactory.makeStateMachineTable : r0.<org.apache.ambari.server.state.fsm.StateMachineFactory: java.util.Map stateMachineTable> = $r8 >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory.makeStateMachineTable : r4 = r0.<org.apache.ambari.server.state.fsm.StateMachineFactory: org.apache.ambari.server.state.fsm.StateMachineFactory$TransitionsListNode transitionsListNode>
org.apache.ambari.server.state.fsm.StateMachineFactory.makeStateMachineTable : r4 = r0.<org.apache.ambari.server.state.fsm.StateMachineFactory: org.apache.ambari.server.state.fsm.StateMachineFactory$TransitionsListNode transitionsListNode> >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory.makeStateMachineTable : if r4 == null
org.apache.ambari.server.state.fsm.StateMachineFactory.makeStateMachineTable : if r4 == null >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory.makeStateMachineTable : $r9 = r4.<org.apache.ambari.server.state.fsm.StateMachineFactory$TransitionsListNode: org.apache.ambari.server.state.fsm.StateMachineFactory$ApplicableTransition transition>
org.apache.ambari.server.state.fsm.StateMachineFactory.makeStateMachineTable : $r9 = r4.<org.apache.ambari.server.state.fsm.StateMachineFactory$TransitionsListNode: org.apache.ambari.server.state.fsm.StateMachineFactory$ApplicableTransition transition> >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory.makeStateMachineTable : virtualinvoke r2.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r9)
org.apache.ambari.server.state.fsm.StateMachineFactory.makeStateMachineTable : virtualinvoke r2.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r9) >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory.makeStateMachineTable : r4 = r4.<org.apache.ambari.server.state.fsm.StateMachineFactory$TransitionsListNode: org.apache.ambari.server.state.fsm.StateMachineFactory$TransitionsListNode next>
org.apache.ambari.server.state.fsm.StateMachineFactory.makeStateMachineTable : r4 = r4.<org.apache.ambari.server.state.fsm.StateMachineFactory$TransitionsListNode: org.apache.ambari.server.state.fsm.StateMachineFactory$TransitionsListNode next> >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory.makeStateMachineTable : goto [?= (branch)]
org.apache.ambari.server.state.fsm.StateMachineFactory.makeStateMachineTable : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory.makeStateMachineTable : $z0 = virtualinvoke r2.<java.util.Stack: boolean isEmpty()>()
org.apache.ambari.server.state.fsm.StateMachineFactory.makeStateMachineTable : $z0 = virtualinvoke r2.<java.util.Stack: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory.makeStateMachineTable : if $z0 != 0
org.apache.ambari.server.state.fsm.StateMachineFactory.makeStateMachineTable : if $z0 != 0 >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory.makeStateMachineTable : $r11 = virtualinvoke r2.<java.util.Stack: java.lang.Object pop()>()
org.apache.ambari.server.state.fsm.StateMachineFactory.makeStateMachineTable : $r11 = virtualinvoke r2.<java.util.Stack: java.lang.Object pop()>() >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory.makeStateMachineTable : $r12 = (org.apache.ambari.server.state.fsm.StateMachineFactory$ApplicableTransition) $r11
org.apache.ambari.server.state.fsm.StateMachineFactory.makeStateMachineTable : $r12 = (org.apache.ambari.server.state.fsm.StateMachineFactory$ApplicableTransition) $r11 >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory.makeStateMachineTable : interfaceinvoke $r12.<org.apache.ambari.server.state.fsm.StateMachineFactory$ApplicableTransition: void apply(org.apache.ambari.server.state.fsm.StateMachineFactory)>(r0)
org.apache.ambari.server.state.fsm.StateMachineFactory.makeStateMachineTable : interfaceinvoke $r12.<org.apache.ambari.server.state.fsm.StateMachineFactory$ApplicableTransition: void apply(org.apache.ambari.server.state.fsm.StateMachineFactory)>(r0) >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory$ApplicableSingleOrMultipleTransition.apply : $r3 = staticinvoke <org.apache.ambari.server.state.fsm.StateMachineFactory: java.util.Map access$000(org.apache.ambari.server.state.fsm.StateMachineFactory)>(r1)
org.apache.ambari.server.state.fsm.StateMachineFactory$ApplicableSingleOrMultipleTransition.apply : $r3 = staticinvoke <org.apache.ambari.server.state.fsm.StateMachineFactory: java.util.Map access$000(org.apache.ambari.server.state.fsm.StateMachineFactory)>(r1) >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory.access$000 : $r1 = r0.<org.apache.ambari.server.state.fsm.StateMachineFactory: java.util.Map stateMachineTable>
org.apache.ambari.server.state.fsm.StateMachineFactory.access$000 : $r1 = r0.<org.apache.ambari.server.state.fsm.StateMachineFactory: java.util.Map stateMachineTable> >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory.access$000 : return $r1
org.apache.ambari.server.state.fsm.StateMachineFactory.access$000 : return $r1 >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory$ApplicableSingleOrMultipleTransition.apply : $r4 = r0.<org.apache.ambari.server.state.fsm.StateMachineFactory$ApplicableSingleOrMultipleTransition: java.lang.Enum preState>
org.apache.ambari.server.state.fsm.StateMachineFactory$ApplicableSingleOrMultipleTransition.apply : $r4 = r0.<org.apache.ambari.server.state.fsm.StateMachineFactory$ApplicableSingleOrMultipleTransition: java.lang.Enum preState> >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory$ApplicableSingleOrMultipleTransition.apply : $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4)
org.apache.ambari.server.state.fsm.StateMachineFactory$ApplicableSingleOrMultipleTransition.apply : $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4) >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory$ApplicableSingleOrMultipleTransition.apply : r2 = (java.util.Map) $r5
org.apache.ambari.server.state.fsm.StateMachineFactory$ApplicableSingleOrMultipleTransition.apply : r2 = (java.util.Map) $r5 >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory$ApplicableSingleOrMultipleTransition.apply : if r2 != null
org.apache.ambari.server.state.fsm.StateMachineFactory$ApplicableSingleOrMultipleTransition.apply : if r2 != null >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory$ApplicableSingleOrMultipleTransition.apply : $r6 = new java.util.HashMap
org.apache.ambari.server.state.fsm.StateMachineFactory$ApplicableSingleOrMultipleTransition.apply : $r6 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory$ApplicableSingleOrMultipleTransition.apply : specialinvoke $r6.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.state.fsm.StateMachineFactory$ApplicableSingleOrMultipleTransition.apply : specialinvoke $r6.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory$ApplicableSingleOrMultipleTransition.apply : r2 = $r6
org.apache.ambari.server.state.fsm.StateMachineFactory$ApplicableSingleOrMultipleTransition.apply : r2 = $r6 >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory$ApplicableSingleOrMultipleTransition.apply : $r7 = staticinvoke <org.apache.ambari.server.state.fsm.StateMachineFactory: java.util.Map access$000(org.apache.ambari.server.state.fsm.StateMachineFactory)>(r1)
org.apache.ambari.server.state.fsm.StateMachineFactory$ApplicableSingleOrMultipleTransition.apply : $r7 = staticinvoke <org.apache.ambari.server.state.fsm.StateMachineFactory: java.util.Map access$000(org.apache.ambari.server.state.fsm.StateMachineFactory)>(r1) >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory$ApplicableSingleOrMultipleTransition.apply : $r8 = r0.<org.apache.ambari.server.state.fsm.StateMachineFactory$ApplicableSingleOrMultipleTransition: java.lang.Enum preState>
org.apache.ambari.server.state.fsm.StateMachineFactory$ApplicableSingleOrMultipleTransition.apply : $r8 = r0.<org.apache.ambari.server.state.fsm.StateMachineFactory$ApplicableSingleOrMultipleTransition: java.lang.Enum preState> >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory$ApplicableSingleOrMultipleTransition.apply : interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, r2)
org.apache.ambari.server.state.fsm.StateMachineFactory$ApplicableSingleOrMultipleTransition.apply : interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, r2) >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory$ApplicableSingleOrMultipleTransition.apply : $r10 = r0.<org.apache.ambari.server.state.fsm.StateMachineFactory$ApplicableSingleOrMultipleTransition: java.lang.Enum eventType>
org.apache.ambari.server.state.fsm.StateMachineFactory$ApplicableSingleOrMultipleTransition.apply : $r10 = r0.<org.apache.ambari.server.state.fsm.StateMachineFactory$ApplicableSingleOrMultipleTransition: java.lang.Enum eventType> >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory$ApplicableSingleOrMultipleTransition.apply : $r11 = r0.<org.apache.ambari.server.state.fsm.StateMachineFactory$ApplicableSingleOrMultipleTransition: org.apache.ambari.server.state.fsm.StateMachineFactory$Transition transition>
org.apache.ambari.server.state.fsm.StateMachineFactory$ApplicableSingleOrMultipleTransition.apply : $r11 = r0.<org.apache.ambari.server.state.fsm.StateMachineFactory$ApplicableSingleOrMultipleTransition: org.apache.ambari.server.state.fsm.StateMachineFactory$Transition transition> >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory$ApplicableSingleOrMultipleTransition.apply : interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r11)
org.apache.ambari.server.state.fsm.StateMachineFactory$ApplicableSingleOrMultipleTransition.apply : interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r11) >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory.makeStateMachineTable : goto [?= $z0 = virtualinvoke r2.<java.util.Stack: boolean isEmpty()>()]
org.apache.ambari.server.state.fsm.StateMachineFactory.makeStateMachineTable : goto [?= $z0 = virtualinvoke r2.<java.util.Stack: boolean isEmpty()>()] >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory.installTopology : return $r1
org.apache.ambari.server.state.fsm.StateMachineFactory.installTopology : return $r1 >>>>>>>> org.apache.ambari.server.state.action.JobTest.createNewJob : specialinvoke $r6.<org.apache.ambari.server.state.action.ActionImpl: void <init>(org.apache.ambari.server.state.action.ActionId,long)>(r4, l1)
org.apache.ambari.server.state.action.JobTest.createNewJob : specialinvoke $r6.<org.apache.ambari.server.state.action.ActionImpl: void <init>(org.apache.ambari.server.state.action.ActionId,long)>(r4, l1) >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory.make : $r2 = new org.apache.ambari.server.state.fsm.StateMachineFactory$InternalStateMachine
org.apache.ambari.server.state.fsm.StateMachineFactory.make : $r2 = new org.apache.ambari.server.state.fsm.StateMachineFactory$InternalStateMachine >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory.make : $r3 = r0.<org.apache.ambari.server.state.fsm.StateMachineFactory: java.lang.Enum defaultInitialState>
org.apache.ambari.server.state.fsm.StateMachineFactory.make : $r3 = r0.<org.apache.ambari.server.state.fsm.StateMachineFactory: java.lang.Enum defaultInitialState> >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory.make : specialinvoke $r2.<org.apache.ambari.server.state.fsm.StateMachineFactory$InternalStateMachine: void <init>(org.apache.ambari.server.state.fsm.StateMachineFactory,java.lang.Object,java.lang.Enum)>(r0, r1, $r3)
org.apache.ambari.server.state.fsm.StateMachineFactory.make : specialinvoke $r2.<org.apache.ambari.server.state.fsm.StateMachineFactory$InternalStateMachine: void <init>(org.apache.ambari.server.state.fsm.StateMachineFactory,java.lang.Object,java.lang.Enum)>(r0, r1, $r3) >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory.access$100 : $z0 = r0.<org.apache.ambari.server.state.fsm.StateMachineFactory: boolean optimized>
org.apache.ambari.server.state.fsm.StateMachineFactory.access$100 : $z0 = r0.<org.apache.ambari.server.state.fsm.StateMachineFactory: boolean optimized> >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory.access$100 : return $z0
org.apache.ambari.server.state.fsm.StateMachineFactory.access$100 : return $z0 >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory.make : return $r2
org.apache.ambari.server.state.fsm.StateMachineFactory.make : return $r2 >>>>>>>> org.apache.ambari.server.state.action.JobTest.createNewJob : r5 = $r6
org.apache.ambari.server.state.action.JobTest.createNewJob : r5 = $r6 >>>>>>>> org.apache.ambari.server.state.action.JobTest.createNewJob : return r5
org.apache.ambari.server.state.action.JobTest.createNewJob : return r5 >>>>>>>> org.apache.ambari.server.state.action.JobTest.verifyNewJob : $r2 = <org.apache.ambari.server.state.action.ActionState: org.apache.ambari.server.state.action.ActionState INIT>
org.apache.ambari.server.state.action.JobTest.verifyNewJob : $r2 = <org.apache.ambari.server.state.action.ActionState: org.apache.ambari.server.state.action.ActionState INIT> >>>>>>>> org.apache.ambari.server.state.action.JobTest.verifyNewJob : $r3 = interfaceinvoke r1.<org.apache.ambari.server.state.action.Action: org.apache.ambari.server.state.action.ActionState getState()>()
org.apache.ambari.server.state.action.JobTest.verifyNewJob : $r3 = interfaceinvoke r1.<org.apache.ambari.server.state.action.Action: org.apache.ambari.server.state.action.ActionState getState()>() >>>>>>>> org.apache.ambari.server.state.action.ActionImpl.getState : $r3 = r0.<org.apache.ambari.server.state.action.ActionImpl: java.util.concurrent.locks.Lock readLock>
org.apache.ambari.server.state.action.ActionImpl.getState : $r3 = r0.<org.apache.ambari.server.state.action.ActionImpl: java.util.concurrent.locks.Lock readLock> >>>>>>>> org.apache.ambari.server.state.action.ActionImpl.getState : interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void lock()>()
org.apache.ambari.server.state.action.ActionImpl.getState : interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void lock()>() >>>>>>>> org.apache.ambari.server.state.action.ActionImpl.getState : $r4 = r0.<org.apache.ambari.server.state.action.ActionImpl: org.apache.ambari.server.state.fsm.StateMachine stateMachine>
org.apache.ambari.server.state.action.ActionImpl.getState : $r4 = r0.<org.apache.ambari.server.state.action.ActionImpl: org.apache.ambari.server.state.fsm.StateMachine stateMachine> >>>>>>>> org.apache.ambari.server.state.action.ActionImpl.getState : $r5 = interfaceinvoke $r4.<org.apache.ambari.server.state.fsm.StateMachine: java.lang.Enum getCurrentState()>()
org.apache.ambari.server.state.action.ActionImpl.getState : $r5 = interfaceinvoke $r4.<org.apache.ambari.server.state.fsm.StateMachine: java.lang.Enum getCurrentState()>() >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory$InternalStateMachine.getCurrentState : $r1 = r0.<org.apache.ambari.server.state.fsm.StateMachineFactory$InternalStateMachine: java.lang.Enum currentState>
org.apache.ambari.server.state.fsm.StateMachineFactory$InternalStateMachine.getCurrentState : $r1 = r0.<org.apache.ambari.server.state.fsm.StateMachineFactory$InternalStateMachine: java.lang.Enum currentState> >>>>>>>> org.apache.ambari.server.state.fsm.StateMachineFactory$InternalStateMachine.getCurrentState : return $r1
org.apache.ambari.server.state.fsm.StateMachineFactory$InternalStateMachine.getCurrentState : return $r1 >>>>>>>> org.apache.ambari.server.state.action.ActionImpl.getState : r1 = (org.apache.ambari.server.state.action.ActionState) $r5
org.apache.ambari.server.state.action.ActionImpl.getState : r1 = (org.apache.ambari.server.state.action.ActionState) $r5 >>>>>>>> org.apache.ambari.server.state.action.ActionImpl.getState : $r6 = r0.<org.apache.ambari.server.state.action.ActionImpl: java.util.concurrent.locks.Lock readLock>
org.apache.ambari.server.state.action.ActionImpl.getState : $r6 = r0.<org.apache.ambari.server.state.action.ActionImpl: java.util.concurrent.locks.Lock readLock> >>>>>>>> org.apache.ambari.server.state.action.ActionImpl.getState : interfaceinvoke $r6.<java.util.concurrent.locks.Lock: void unlock()>()
org.apache.ambari.server.state.action.ActionImpl.getState : interfaceinvoke $r6.<java.util.concurrent.locks.Lock: void unlock()>() >>>>>>>> org.apache.ambari.server.state.action.ActionImpl.getState : return r1
org.apache.ambari.server.state.action.ActionImpl.getState : return r1 >>>>>>>> org.apache.ambari.server.state.action.JobTest.verifyNewJob : staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r2, $r3)
org.apache.ambari.server.state.action.JobTest.verifyNewJob : staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r2, $r3) >>>>>>>> org.apache.ambari.server.state.action.JobTest.verifyNewJob : $l1 = interfaceinvoke r1.<org.apache.ambari.server.state.action.Action: long getStartTime()>()
org.apache.ambari.server.state.action.JobTest.verifyNewJob : $l1 = interfaceinvoke r1.<org.apache.ambari.server.state.action.Action: long getStartTime()>() >>>>>>>> org.apache.ambari.server.state.action.ActionImpl.getStartTime : $r2 = r0.<org.apache.ambari.server.state.action.ActionImpl: java.util.concurrent.locks.Lock readLock>
org.apache.ambari.server.state.action.ActionImpl.getStartTime : $r2 = r0.<org.apache.ambari.server.state.action.ActionImpl: java.util.concurrent.locks.Lock readLock> >>>>>>>> org.apache.ambari.server.state.action.ActionImpl.getStartTime : interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void lock()>()
org.apache.ambari.server.state.action.ActionImpl.getStartTime : interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void lock()>() >>>>>>>> org.apache.ambari.server.state.action.ActionImpl.getStartTime : l0 = r0.<org.apache.ambari.server.state.action.ActionImpl: long startTime>
org.apache.ambari.server.state.action.ActionImpl.getStartTime : l0 = r0.<org.apache.ambari.server.state.action.ActionImpl: long startTime> >>>>>>>> org.apache.ambari.server.state.action.ActionImpl.getStartTime : $r3 = r0.<org.apache.ambari.server.state.action.ActionImpl: java.util.concurrent.locks.Lock readLock>
org.apache.ambari.server.state.action.ActionImpl.getStartTime : $r3 = r0.<org.apache.ambari.server.state.action.ActionImpl: java.util.concurrent.locks.Lock readLock> >>>>>>>> org.apache.ambari.server.state.action.ActionImpl.getStartTime : interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>()
org.apache.ambari.server.state.action.ActionImpl.getStartTime : interfaceinvoke $r3.<java.util.concurrent.locks.Lock: void unlock()>() >>>>>>>> org.apache.ambari.server.state.action.ActionImpl.getStartTime : return l0
org.apache.ambari.server.state.action.ActionImpl.getStartTime : return l0 >>>>>>>> org.apache.ambari.server.state.action.JobTest.verifyNewJob : staticinvoke <org.junit.Assert: void assertEquals(long,long)>(l0, $l1)
