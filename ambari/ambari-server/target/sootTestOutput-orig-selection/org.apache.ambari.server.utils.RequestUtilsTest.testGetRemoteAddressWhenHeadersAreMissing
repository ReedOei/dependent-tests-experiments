org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : r1 = null >>>>>>>> org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : $r4 = <org.apache.ambari.server.utils.RequestUtils: java.util.Set headersToCheck>
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : $r4 = <org.apache.ambari.server.utils.RequestUtils: java.util.Set headersToCheck> >>>>>>>> org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : if $z0 == 0
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : if $z0 == 0 >>>>>>>> org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : r3 = (java.lang.String) $r5
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : r3 = (java.lang.String) $r5 >>>>>>>> org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : r1 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>(r3)
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : r1 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>(r3) >>>>>>>> org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : $z1 = staticinvoke <org.apache.ambari.server.utils.RequestUtils: boolean isRemoteAddressUnknown(java.lang.String)>(r1)
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : $z1 = staticinvoke <org.apache.ambari.server.utils.RequestUtils: boolean isRemoteAddressUnknown(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.utils.RequestUtils.isRemoteAddressUnknown : if r0 == null
org.apache.ambari.server.utils.RequestUtils.isRemoteAddressUnknown : if r0 == null >>>>>>>> org.apache.ambari.server.utils.RequestUtils.isRemoteAddressUnknown : $z1 = 1
org.apache.ambari.server.utils.RequestUtils.isRemoteAddressUnknown : $z1 = 1 >>>>>>>> org.apache.ambari.server.utils.RequestUtils.isRemoteAddressUnknown : goto [?= return $z1]
org.apache.ambari.server.utils.RequestUtils.isRemoteAddressUnknown : goto [?= return $z1] >>>>>>>> org.apache.ambari.server.utils.RequestUtils.isRemoteAddressUnknown : return $z1
org.apache.ambari.server.utils.RequestUtils.isRemoteAddressUnknown : return $z1 >>>>>>>> org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : if $z1 != 0
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : if $z1 != 0 >>>>>>>> org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : $z2 = staticinvoke <org.apache.ambari.server.utils.RequestUtils: boolean isRemoteAddressUnknown(java.lang.String)>(r1)
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : $z2 = staticinvoke <org.apache.ambari.server.utils.RequestUtils: boolean isRemoteAddressUnknown(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : if $z2 == 0
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : if $z2 == 0 >>>>>>>> org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : r1 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getRemoteAddr()>()
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : r1 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getRemoteAddr()>() >>>>>>>> org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : $z3 = staticinvoke <org.apache.ambari.server.utils.RequestUtils: boolean containsMultipleRemoteAddresses(java.lang.String)>(r1)
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : $z3 = staticinvoke <org.apache.ambari.server.utils.RequestUtils: boolean containsMultipleRemoteAddresses(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.utils.RequestUtils.containsMultipleRemoteAddresses : if r0 == null
org.apache.ambari.server.utils.RequestUtils.containsMultipleRemoteAddresses : if r0 == null >>>>>>>> org.apache.ambari.server.utils.RequestUtils.containsMultipleRemoteAddresses : $i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>(",")
org.apache.ambari.server.utils.RequestUtils.containsMultipleRemoteAddresses : $i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>(",") >>>>>>>> org.apache.ambari.server.utils.RequestUtils.containsMultipleRemoteAddresses : if $i0 <= 0
org.apache.ambari.server.utils.RequestUtils.containsMultipleRemoteAddresses : if $i0 <= 0 >>>>>>>> org.apache.ambari.server.utils.RequestUtils.containsMultipleRemoteAddresses : $z0 = 0
org.apache.ambari.server.utils.RequestUtils.containsMultipleRemoteAddresses : $z0 = 0 >>>>>>>> org.apache.ambari.server.utils.RequestUtils.containsMultipleRemoteAddresses : return $z0
org.apache.ambari.server.utils.RequestUtils.containsMultipleRemoteAddresses : return $z0 >>>>>>>> org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : if $z3 == 0
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : if $z3 == 0 >>>>>>>> org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : return r1
