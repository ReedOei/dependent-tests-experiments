org.apache.ambari.server.api.services.DeleteRequestTest.getTestRequest : $r8 = new org.apache.ambari.server.api.services.DeleteRequestTest$1 >>>>>>>> org.apache.ambari.server.api.services.DeleteRequestTest.getTestRequest : specialinvoke $r8.<org.apache.ambari.server.api.services.DeleteRequestTest$1: void <init>(org.apache.ambari.server.api.services.DeleteRequestTest,javax.ws.rs.core.HttpHeaders,org.apache.ambari.server.api.services.RequestBody,javax.ws.rs.core.UriInfo,org.apache.ambari.server.api.resources.ResourceInstance,org.apache.ambari.server.api.predicate.PredicateCompiler,org.apache.ambari.server.api.handlers.RequestHandler,org.apache.ambari.server.api.services.ResultPostProcessor)>(r0, r1, r2, r3, r7, r4, r5, r6)
org.apache.ambari.server.api.services.DeleteRequestTest.getTestRequest : specialinvoke $r8.<org.apache.ambari.server.api.services.DeleteRequestTest$1: void <init>(org.apache.ambari.server.api.services.DeleteRequestTest,javax.ws.rs.core.HttpHeaders,org.apache.ambari.server.api.services.RequestBody,javax.ws.rs.core.UriInfo,org.apache.ambari.server.api.resources.ResourceInstance,org.apache.ambari.server.api.predicate.PredicateCompiler,org.apache.ambari.server.api.handlers.RequestHandler,org.apache.ambari.server.api.services.ResultPostProcessor)>(r0, r1, r2, r3, r7, r4, r5, r6) >>>>>>>> org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : $z0 = staticinvoke <org.apache.ambari.server.utils.RequestUtils: boolean hasValidRequest()>()
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : $z0 = staticinvoke <org.apache.ambari.server.utils.RequestUtils: boolean hasValidRequest()>() >>>>>>>> org.apache.ambari.server.utils.RequestUtils.hasValidRequest : $r0 = staticinvoke <org.springframework.web.context.request.RequestContextHolder: org.springframework.web.context.request.RequestAttributes getRequestAttributes()>()
org.apache.ambari.server.utils.RequestUtils.hasValidRequest : $r0 = staticinvoke <org.springframework.web.context.request.RequestContextHolder: org.springframework.web.context.request.RequestAttributes getRequestAttributes()>() >>>>>>>> org.apache.ambari.server.utils.RequestUtils.hasValidRequest : if $r0 == null
org.apache.ambari.server.utils.RequestUtils.hasValidRequest : if $r0 == null >>>>>>>> org.apache.ambari.server.utils.RequestUtils.hasValidRequest : $z1 = 0
org.apache.ambari.server.utils.RequestUtils.hasValidRequest : $z1 = 0 >>>>>>>> org.apache.ambari.server.utils.RequestUtils.hasValidRequest : return $z1
org.apache.ambari.server.utils.RequestUtils.hasValidRequest : return $z1 >>>>>>>> org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : if $z0 == 0
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : if $z0 == 0 >>>>>>>> org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : return null
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : return null >>>>>>>> org.apache.ambari.server.api.services.DeleteRequestTest.getTestRequest : return $r8
org.apache.ambari.server.api.services.DeleteRequestTest.getTestRequest : return $r8 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r9 = r0.<org.apache.ambari.server.api.services.BaseRequest: javax.ws.rs.core.UriInfo m_uriInfo>
org.apache.ambari.server.api.services.BaseRequest.getFields : $r9 = r0.<org.apache.ambari.server.api.services.BaseRequest: javax.ws.rs.core.UriInfo m_uriInfo> >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r10 = interfaceinvoke $r9.<javax.ws.rs.core.UriInfo: javax.ws.rs.core.MultivaluedMap getQueryParameters()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $r10 = interfaceinvoke $r9.<javax.ws.rs.core.UriInfo: javax.ws.rs.core.MultivaluedMap getQueryParameters()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r11 = interfaceinvoke $r10.<javax.ws.rs.core.MultivaluedMap: java.lang.Object getFirst(java.lang.Object)>("fields")
org.apache.ambari.server.api.services.BaseRequest.getFields : $r11 = interfaceinvoke $r10.<javax.ws.rs.core.MultivaluedMap: java.lang.Object getFirst(java.lang.Object)>("fields") >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r1 = (java.lang.String) $r11
org.apache.ambari.server.api.services.BaseRequest.getFields : r1 = (java.lang.String) $r11 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : if r1 != null
org.apache.ambari.server.api.services.BaseRequest.getFields : if r1 != null >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r12 = new java.util.HashSet
org.apache.ambari.server.api.services.BaseRequest.getFields : $r12 = new java.util.HashSet >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : specialinvoke $r12.<java.util.HashSet: void <init>()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : specialinvoke $r12.<java.util.HashSet: void <init>()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r3 = $r12
org.apache.ambari.server.api.services.BaseRequest.getFields : r3 = $r12 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r4 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[^,\\[]*?\\[[^\\]]*?\\]|[^,]+")
org.apache.ambari.server.api.services.BaseRequest.getFields : r4 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[^,\\[]*?\\[[^\\]]*?\\]|[^,]+") >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r5 = virtualinvoke r4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1)
org.apache.ambari.server.api.services.BaseRequest.getFields : r5 = virtualinvoke r4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $z0 = virtualinvoke r5.<java.util.regex.Matcher: boolean find()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $z0 = virtualinvoke r5.<java.util.regex.Matcher: boolean find()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : if $z0 == 0
org.apache.ambari.server.api.services.BaseRequest.getFields : if $z0 == 0 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : i0 = 0
org.apache.ambari.server.api.services.BaseRequest.getFields : i0 = 0 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i4 = virtualinvoke r5.<java.util.regex.Matcher: int groupCount()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $i4 = virtualinvoke r5.<java.util.regex.Matcher: int groupCount()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i5 = $i4 + 1
org.apache.ambari.server.api.services.BaseRequest.getFields : $i5 = $i4 + 1 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : if i0 >= $i5
org.apache.ambari.server.api.services.BaseRequest.getFields : if i0 >= $i5 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r13 = virtualinvoke r5.<java.util.regex.Matcher: java.lang.String group(int)>(i0)
org.apache.ambari.server.api.services.BaseRequest.getFields : $r13 = virtualinvoke r5.<java.util.regex.Matcher: java.lang.String group(int)>(i0) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>($r13)
org.apache.ambari.server.api.services.BaseRequest.getFields : interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>($r13) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : i0 = i0 + 1
org.apache.ambari.server.api.services.BaseRequest.getFields : i0 = i0 + 1 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : goto [?= $i4 = virtualinvoke r5.<java.util.regex.Matcher: int groupCount()>()]
org.apache.ambari.server.api.services.BaseRequest.getFields : goto [?= $i4 = virtualinvoke r5.<java.util.regex.Matcher: int groupCount()>()] >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : goto [?= $z0 = virtualinvoke r5.<java.util.regex.Matcher: boolean find()>()]
org.apache.ambari.server.api.services.BaseRequest.getFields : goto [?= $z0 = virtualinvoke r5.<java.util.regex.Matcher: boolean find()>()] >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r14 = new java.util.HashMap
org.apache.ambari.server.api.services.BaseRequest.getFields : $r14 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i6 = interfaceinvoke r3.<java.util.Set: int size()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $i6 = interfaceinvoke r3.<java.util.Set: int size()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : specialinvoke $r14.<java.util.HashMap: void <init>(int)>($i6)
org.apache.ambari.server.api.services.BaseRequest.getFields : specialinvoke $r14.<java.util.HashMap: void <init>(int)>($i6) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r2 = $r14
org.apache.ambari.server.api.services.BaseRequest.getFields : r2 = $r14 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r15 = interfaceinvoke r3.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : r15 = interfaceinvoke r3.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $z2 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $z2 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : if $z2 == 0
org.apache.ambari.server.api.services.BaseRequest.getFields : if $z2 == 0 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r16 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $r16 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r6 = (java.lang.String) $r16
org.apache.ambari.server.api.services.BaseRequest.getFields : r6 = (java.lang.String) $r16 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r7 = null
org.apache.ambari.server.api.services.BaseRequest.getFields : r7 = null >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $z3 = virtualinvoke r6.<java.lang.String: boolean contains(java.lang.CharSequence)>("[")
org.apache.ambari.server.api.services.BaseRequest.getFields : $z3 = virtualinvoke r6.<java.lang.String: boolean contains(java.lang.CharSequence)>("[") >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : if $z3 == 0
org.apache.ambari.server.api.services.BaseRequest.getFields : if $z3 == 0 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i7 = virtualinvoke r6.<java.lang.String: int indexOf(int)>(91)
org.apache.ambari.server.api.services.BaseRequest.getFields : $i7 = virtualinvoke r6.<java.lang.String: int indexOf(int)>(91) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i8 = $i7 + 1
org.apache.ambari.server.api.services.BaseRequest.getFields : $i8 = $i7 + 1 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i9 = virtualinvoke r6.<java.lang.String: int indexOf(int)>(93)
org.apache.ambari.server.api.services.BaseRequest.getFields : $i9 = virtualinvoke r6.<java.lang.String: int indexOf(int)>(93) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r17 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int,int)>($i8, $i9)
org.apache.ambari.server.api.services.BaseRequest.getFields : $r17 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int,int)>($i8, $i9) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r8 = virtualinvoke $r17.<java.lang.String: java.lang.String[] split(java.lang.String)>(",")
org.apache.ambari.server.api.services.BaseRequest.getFields : r8 = virtualinvoke $r17.<java.lang.String: java.lang.String[] split(java.lang.String)>(",") >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i10 = virtualinvoke r6.<java.lang.String: int indexOf(int)>(91)
org.apache.ambari.server.api.services.BaseRequest.getFields : $i10 = virtualinvoke r6.<java.lang.String: int indexOf(int)>(91) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r6 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int,int)>(0, $i10)
org.apache.ambari.server.api.services.BaseRequest.getFields : r6 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int,int)>(0, $i10) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r18 = r8[0]
org.apache.ambari.server.api.services.BaseRequest.getFields : $r18 = r8[0] >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r19 = virtualinvoke $r18.<java.lang.String: java.lang.String trim()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $r19 = virtualinvoke $r18.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r19)
org.apache.ambari.server.api.services.BaseRequest.getFields : l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r19) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : l2 = -1L
org.apache.ambari.server.api.services.BaseRequest.getFields : l2 = -1L >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : l3 = -1L
org.apache.ambari.server.api.services.BaseRequest.getFields : l3 = -1L >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i11 = lengthof r8
org.apache.ambari.server.api.services.BaseRequest.getFields : $i11 = lengthof r8 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : if $i11 < 2
org.apache.ambari.server.api.services.BaseRequest.getFields : if $i11 < 2 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r20 = r8[1]
org.apache.ambari.server.api.services.BaseRequest.getFields : $r20 = r8[1] >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r21 = virtualinvoke $r20.<java.lang.String: java.lang.String trim()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $r21 = virtualinvoke $r20.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : l2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r21)
org.apache.ambari.server.api.services.BaseRequest.getFields : l2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r21) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i12 = lengthof r8
org.apache.ambari.server.api.services.BaseRequest.getFields : $i12 = lengthof r8 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : if $i12 != 3
org.apache.ambari.server.api.services.BaseRequest.getFields : if $i12 != 3 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r22 = r8[2]
org.apache.ambari.server.api.services.BaseRequest.getFields : $r22 = r8[2] >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r23 = virtualinvoke $r22.<java.lang.String: java.lang.String trim()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $r23 = virtualinvoke $r22.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : l3 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r23)
org.apache.ambari.server.api.services.BaseRequest.getFields : l3 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r23) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r24 = new org.apache.ambari.server.controller.internal.TemporalInfoImpl
org.apache.ambari.server.api.services.BaseRequest.getFields : $r24 = new org.apache.ambari.server.controller.internal.TemporalInfoImpl >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : specialinvoke $r24.<org.apache.ambari.server.controller.internal.TemporalInfoImpl: void <init>(long,long,long)>(l1, l2, l3)
org.apache.ambari.server.api.services.BaseRequest.getFields : specialinvoke $r24.<org.apache.ambari.server.controller.internal.TemporalInfoImpl: void <init>(long,long,long)>(l1, l2, l3) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r7 = $r24
org.apache.ambari.server.api.services.BaseRequest.getFields : r7 = $r24 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r7)
org.apache.ambari.server.api.services.BaseRequest.getFields : interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r7) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : goto [?= $z2 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.api.services.BaseRequest.getFields : goto [?= $z2 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : return r2
org.apache.ambari.server.api.services.PutRequestTest.getTestRequest : $r8 = new org.apache.ambari.server.api.services.PutRequestTest$1 >>>>>>>> org.apache.ambari.server.api.services.PutRequestTest.getTestRequest : specialinvoke $r8.<org.apache.ambari.server.api.services.PutRequestTest$1: void <init>(org.apache.ambari.server.api.services.PutRequestTest,javax.ws.rs.core.HttpHeaders,org.apache.ambari.server.api.services.RequestBody,javax.ws.rs.core.UriInfo,org.apache.ambari.server.api.resources.ResourceInstance,org.apache.ambari.server.api.predicate.PredicateCompiler,org.apache.ambari.server.api.handlers.RequestHandler,org.apache.ambari.server.api.services.ResultPostProcessor)>(r0, r1, r2, r3, r7, r4, r5, r6)
org.apache.ambari.server.api.services.PutRequestTest.getTestRequest : specialinvoke $r8.<org.apache.ambari.server.api.services.PutRequestTest$1: void <init>(org.apache.ambari.server.api.services.PutRequestTest,javax.ws.rs.core.HttpHeaders,org.apache.ambari.server.api.services.RequestBody,javax.ws.rs.core.UriInfo,org.apache.ambari.server.api.resources.ResourceInstance,org.apache.ambari.server.api.predicate.PredicateCompiler,org.apache.ambari.server.api.handlers.RequestHandler,org.apache.ambari.server.api.services.ResultPostProcessor)>(r0, r1, r2, r3, r7, r4, r5, r6) >>>>>>>> org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : $z0 = staticinvoke <org.apache.ambari.server.utils.RequestUtils: boolean hasValidRequest()>()
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : $z0 = staticinvoke <org.apache.ambari.server.utils.RequestUtils: boolean hasValidRequest()>() >>>>>>>> org.apache.ambari.server.utils.RequestUtils.hasValidRequest : $r0 = staticinvoke <org.springframework.web.context.request.RequestContextHolder: org.springframework.web.context.request.RequestAttributes getRequestAttributes()>()
org.apache.ambari.server.utils.RequestUtils.hasValidRequest : $r0 = staticinvoke <org.springframework.web.context.request.RequestContextHolder: org.springframework.web.context.request.RequestAttributes getRequestAttributes()>() >>>>>>>> org.apache.ambari.server.utils.RequestUtils.hasValidRequest : if $r0 == null
org.apache.ambari.server.utils.RequestUtils.hasValidRequest : if $r0 == null >>>>>>>> org.apache.ambari.server.utils.RequestUtils.hasValidRequest : $z1 = 0
org.apache.ambari.server.utils.RequestUtils.hasValidRequest : $z1 = 0 >>>>>>>> org.apache.ambari.server.utils.RequestUtils.hasValidRequest : return $z1
org.apache.ambari.server.utils.RequestUtils.hasValidRequest : return $z1 >>>>>>>> org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : if $z0 == 0
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : if $z0 == 0 >>>>>>>> org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : return null
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : return null >>>>>>>> org.apache.ambari.server.api.services.PutRequestTest.getTestRequest : return $r8
org.apache.ambari.server.api.services.PutRequestTest.getTestRequest : return $r8 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r9 = r0.<org.apache.ambari.server.api.services.BaseRequest: javax.ws.rs.core.UriInfo m_uriInfo>
org.apache.ambari.server.api.services.BaseRequest.getFields : $r9 = r0.<org.apache.ambari.server.api.services.BaseRequest: javax.ws.rs.core.UriInfo m_uriInfo> >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r10 = interfaceinvoke $r9.<javax.ws.rs.core.UriInfo: javax.ws.rs.core.MultivaluedMap getQueryParameters()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $r10 = interfaceinvoke $r9.<javax.ws.rs.core.UriInfo: javax.ws.rs.core.MultivaluedMap getQueryParameters()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r11 = interfaceinvoke $r10.<javax.ws.rs.core.MultivaluedMap: java.lang.Object getFirst(java.lang.Object)>("fields")
org.apache.ambari.server.api.services.BaseRequest.getFields : $r11 = interfaceinvoke $r10.<javax.ws.rs.core.MultivaluedMap: java.lang.Object getFirst(java.lang.Object)>("fields") >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r1 = (java.lang.String) $r11
org.apache.ambari.server.api.services.BaseRequest.getFields : r1 = (java.lang.String) $r11 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : if r1 != null
org.apache.ambari.server.api.services.BaseRequest.getFields : if r1 != null >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r12 = new java.util.HashSet
org.apache.ambari.server.api.services.BaseRequest.getFields : $r12 = new java.util.HashSet >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : specialinvoke $r12.<java.util.HashSet: void <init>()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : specialinvoke $r12.<java.util.HashSet: void <init>()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r3 = $r12
org.apache.ambari.server.api.services.BaseRequest.getFields : r3 = $r12 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r4 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[^,\\[]*?\\[[^\\]]*?\\]|[^,]+")
org.apache.ambari.server.api.services.BaseRequest.getFields : r4 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[^,\\[]*?\\[[^\\]]*?\\]|[^,]+") >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r5 = virtualinvoke r4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1)
org.apache.ambari.server.api.services.BaseRequest.getFields : r5 = virtualinvoke r4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $z0 = virtualinvoke r5.<java.util.regex.Matcher: boolean find()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $z0 = virtualinvoke r5.<java.util.regex.Matcher: boolean find()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : if $z0 == 0
org.apache.ambari.server.api.services.BaseRequest.getFields : if $z0 == 0 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : i0 = 0
org.apache.ambari.server.api.services.BaseRequest.getFields : i0 = 0 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i4 = virtualinvoke r5.<java.util.regex.Matcher: int groupCount()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $i4 = virtualinvoke r5.<java.util.regex.Matcher: int groupCount()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i5 = $i4 + 1
org.apache.ambari.server.api.services.BaseRequest.getFields : $i5 = $i4 + 1 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : if i0 >= $i5
org.apache.ambari.server.api.services.BaseRequest.getFields : if i0 >= $i5 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r13 = virtualinvoke r5.<java.util.regex.Matcher: java.lang.String group(int)>(i0)
org.apache.ambari.server.api.services.BaseRequest.getFields : $r13 = virtualinvoke r5.<java.util.regex.Matcher: java.lang.String group(int)>(i0) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>($r13)
org.apache.ambari.server.api.services.BaseRequest.getFields : interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>($r13) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : i0 = i0 + 1
org.apache.ambari.server.api.services.BaseRequest.getFields : i0 = i0 + 1 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : goto [?= $i4 = virtualinvoke r5.<java.util.regex.Matcher: int groupCount()>()]
org.apache.ambari.server.api.services.BaseRequest.getFields : goto [?= $i4 = virtualinvoke r5.<java.util.regex.Matcher: int groupCount()>()] >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : goto [?= $z0 = virtualinvoke r5.<java.util.regex.Matcher: boolean find()>()]
org.apache.ambari.server.api.services.BaseRequest.getFields : goto [?= $z0 = virtualinvoke r5.<java.util.regex.Matcher: boolean find()>()] >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r14 = new java.util.HashMap
org.apache.ambari.server.api.services.BaseRequest.getFields : $r14 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i6 = interfaceinvoke r3.<java.util.Set: int size()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $i6 = interfaceinvoke r3.<java.util.Set: int size()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : specialinvoke $r14.<java.util.HashMap: void <init>(int)>($i6)
org.apache.ambari.server.api.services.BaseRequest.getFields : specialinvoke $r14.<java.util.HashMap: void <init>(int)>($i6) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r2 = $r14
org.apache.ambari.server.api.services.BaseRequest.getFields : r2 = $r14 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r15 = interfaceinvoke r3.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : r15 = interfaceinvoke r3.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $z2 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $z2 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : if $z2 == 0
org.apache.ambari.server.api.services.BaseRequest.getFields : if $z2 == 0 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r16 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $r16 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r6 = (java.lang.String) $r16
org.apache.ambari.server.api.services.BaseRequest.getFields : r6 = (java.lang.String) $r16 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r7 = null
org.apache.ambari.server.api.services.BaseRequest.getFields : r7 = null >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $z3 = virtualinvoke r6.<java.lang.String: boolean contains(java.lang.CharSequence)>("[")
org.apache.ambari.server.api.services.BaseRequest.getFields : $z3 = virtualinvoke r6.<java.lang.String: boolean contains(java.lang.CharSequence)>("[") >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : if $z3 == 0
org.apache.ambari.server.api.services.BaseRequest.getFields : if $z3 == 0 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i7 = virtualinvoke r6.<java.lang.String: int indexOf(int)>(91)
org.apache.ambari.server.api.services.BaseRequest.getFields : $i7 = virtualinvoke r6.<java.lang.String: int indexOf(int)>(91) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i8 = $i7 + 1
org.apache.ambari.server.api.services.BaseRequest.getFields : $i8 = $i7 + 1 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i9 = virtualinvoke r6.<java.lang.String: int indexOf(int)>(93)
org.apache.ambari.server.api.services.BaseRequest.getFields : $i9 = virtualinvoke r6.<java.lang.String: int indexOf(int)>(93) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r17 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int,int)>($i8, $i9)
org.apache.ambari.server.api.services.BaseRequest.getFields : $r17 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int,int)>($i8, $i9) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r8 = virtualinvoke $r17.<java.lang.String: java.lang.String[] split(java.lang.String)>(",")
org.apache.ambari.server.api.services.BaseRequest.getFields : r8 = virtualinvoke $r17.<java.lang.String: java.lang.String[] split(java.lang.String)>(",") >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i10 = virtualinvoke r6.<java.lang.String: int indexOf(int)>(91)
org.apache.ambari.server.api.services.BaseRequest.getFields : $i10 = virtualinvoke r6.<java.lang.String: int indexOf(int)>(91) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r6 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int,int)>(0, $i10)
org.apache.ambari.server.api.services.BaseRequest.getFields : r6 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int,int)>(0, $i10) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r18 = r8[0]
org.apache.ambari.server.api.services.BaseRequest.getFields : $r18 = r8[0] >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r19 = virtualinvoke $r18.<java.lang.String: java.lang.String trim()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $r19 = virtualinvoke $r18.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r19)
org.apache.ambari.server.api.services.BaseRequest.getFields : l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r19) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : l2 = -1L
org.apache.ambari.server.api.services.BaseRequest.getFields : l2 = -1L >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : l3 = -1L
org.apache.ambari.server.api.services.BaseRequest.getFields : l3 = -1L >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i11 = lengthof r8
org.apache.ambari.server.api.services.BaseRequest.getFields : $i11 = lengthof r8 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : if $i11 < 2
org.apache.ambari.server.api.services.BaseRequest.getFields : if $i11 < 2 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r20 = r8[1]
org.apache.ambari.server.api.services.BaseRequest.getFields : $r20 = r8[1] >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r21 = virtualinvoke $r20.<java.lang.String: java.lang.String trim()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $r21 = virtualinvoke $r20.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : l2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r21)
org.apache.ambari.server.api.services.BaseRequest.getFields : l2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r21) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i12 = lengthof r8
org.apache.ambari.server.api.services.BaseRequest.getFields : $i12 = lengthof r8 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : if $i12 != 3
org.apache.ambari.server.api.services.BaseRequest.getFields : if $i12 != 3 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r22 = r8[2]
org.apache.ambari.server.api.services.BaseRequest.getFields : $r22 = r8[2] >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r23 = virtualinvoke $r22.<java.lang.String: java.lang.String trim()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $r23 = virtualinvoke $r22.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : l3 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r23)
org.apache.ambari.server.api.services.BaseRequest.getFields : l3 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r23) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r24 = new org.apache.ambari.server.controller.internal.TemporalInfoImpl
org.apache.ambari.server.api.services.BaseRequest.getFields : $r24 = new org.apache.ambari.server.controller.internal.TemporalInfoImpl >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : specialinvoke $r24.<org.apache.ambari.server.controller.internal.TemporalInfoImpl: void <init>(long,long,long)>(l1, l2, l3)
org.apache.ambari.server.api.services.BaseRequest.getFields : specialinvoke $r24.<org.apache.ambari.server.controller.internal.TemporalInfoImpl: void <init>(long,long,long)>(l1, l2, l3) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r7 = $r24
org.apache.ambari.server.api.services.BaseRequest.getFields : r7 = $r24 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r7)
org.apache.ambari.server.api.services.BaseRequest.getFields : interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r7) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : goto [?= $z2 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.api.services.BaseRequest.getFields : goto [?= $z2 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : return r2
org.apache.ambari.server.api.services.QueryPostRequestTest.getTestRequest : $r8 = new org.apache.ambari.server.api.services.QueryPostRequestTest$1 >>>>>>>> org.apache.ambari.server.api.services.QueryPostRequestTest.getTestRequest : specialinvoke $r8.<org.apache.ambari.server.api.services.QueryPostRequestTest$1: void <init>(org.apache.ambari.server.api.services.QueryPostRequestTest,javax.ws.rs.core.HttpHeaders,org.apache.ambari.server.api.services.RequestBody,javax.ws.rs.core.UriInfo,org.apache.ambari.server.api.resources.ResourceInstance,org.apache.ambari.server.api.predicate.PredicateCompiler,org.apache.ambari.server.api.handlers.RequestHandler,org.apache.ambari.server.api.services.ResultPostProcessor)>(r0, r1, r2, r3, r7, r4, r5, r6)
org.apache.ambari.server.api.services.QueryPostRequestTest.getTestRequest : specialinvoke $r8.<org.apache.ambari.server.api.services.QueryPostRequestTest$1: void <init>(org.apache.ambari.server.api.services.QueryPostRequestTest,javax.ws.rs.core.HttpHeaders,org.apache.ambari.server.api.services.RequestBody,javax.ws.rs.core.UriInfo,org.apache.ambari.server.api.resources.ResourceInstance,org.apache.ambari.server.api.predicate.PredicateCompiler,org.apache.ambari.server.api.handlers.RequestHandler,org.apache.ambari.server.api.services.ResultPostProcessor)>(r0, r1, r2, r3, r7, r4, r5, r6) >>>>>>>> org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : $z0 = staticinvoke <org.apache.ambari.server.utils.RequestUtils: boolean hasValidRequest()>()
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : $z0 = staticinvoke <org.apache.ambari.server.utils.RequestUtils: boolean hasValidRequest()>() >>>>>>>> org.apache.ambari.server.utils.RequestUtils.hasValidRequest : $r0 = staticinvoke <org.springframework.web.context.request.RequestContextHolder: org.springframework.web.context.request.RequestAttributes getRequestAttributes()>()
org.apache.ambari.server.utils.RequestUtils.hasValidRequest : $r0 = staticinvoke <org.springframework.web.context.request.RequestContextHolder: org.springframework.web.context.request.RequestAttributes getRequestAttributes()>() >>>>>>>> org.apache.ambari.server.utils.RequestUtils.hasValidRequest : if $r0 == null
org.apache.ambari.server.utils.RequestUtils.hasValidRequest : if $r0 == null >>>>>>>> org.apache.ambari.server.utils.RequestUtils.hasValidRequest : $z1 = 0
org.apache.ambari.server.utils.RequestUtils.hasValidRequest : $z1 = 0 >>>>>>>> org.apache.ambari.server.utils.RequestUtils.hasValidRequest : return $z1
org.apache.ambari.server.utils.RequestUtils.hasValidRequest : return $z1 >>>>>>>> org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : if $z0 == 0
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : if $z0 == 0 >>>>>>>> org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : return null
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : return null >>>>>>>> org.apache.ambari.server.api.services.QueryPostRequestTest.getTestRequest : return $r8
org.apache.ambari.server.api.services.QueryPostRequestTest.getTestRequest : return $r8 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r9 = r0.<org.apache.ambari.server.api.services.BaseRequest: javax.ws.rs.core.UriInfo m_uriInfo>
org.apache.ambari.server.api.services.BaseRequest.getFields : $r9 = r0.<org.apache.ambari.server.api.services.BaseRequest: javax.ws.rs.core.UriInfo m_uriInfo> >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r10 = interfaceinvoke $r9.<javax.ws.rs.core.UriInfo: javax.ws.rs.core.MultivaluedMap getQueryParameters()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $r10 = interfaceinvoke $r9.<javax.ws.rs.core.UriInfo: javax.ws.rs.core.MultivaluedMap getQueryParameters()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r11 = interfaceinvoke $r10.<javax.ws.rs.core.MultivaluedMap: java.lang.Object getFirst(java.lang.Object)>("fields")
org.apache.ambari.server.api.services.BaseRequest.getFields : $r11 = interfaceinvoke $r10.<javax.ws.rs.core.MultivaluedMap: java.lang.Object getFirst(java.lang.Object)>("fields") >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r1 = (java.lang.String) $r11
org.apache.ambari.server.api.services.BaseRequest.getFields : r1 = (java.lang.String) $r11 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : if r1 != null
org.apache.ambari.server.api.services.BaseRequest.getFields : if r1 != null >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r12 = new java.util.HashSet
org.apache.ambari.server.api.services.BaseRequest.getFields : $r12 = new java.util.HashSet >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : specialinvoke $r12.<java.util.HashSet: void <init>()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : specialinvoke $r12.<java.util.HashSet: void <init>()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r3 = $r12
org.apache.ambari.server.api.services.BaseRequest.getFields : r3 = $r12 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r4 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[^,\\[]*?\\[[^\\]]*?\\]|[^,]+")
org.apache.ambari.server.api.services.BaseRequest.getFields : r4 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[^,\\[]*?\\[[^\\]]*?\\]|[^,]+") >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r5 = virtualinvoke r4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1)
org.apache.ambari.server.api.services.BaseRequest.getFields : r5 = virtualinvoke r4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $z0 = virtualinvoke r5.<java.util.regex.Matcher: boolean find()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $z0 = virtualinvoke r5.<java.util.regex.Matcher: boolean find()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : if $z0 == 0
org.apache.ambari.server.api.services.BaseRequest.getFields : if $z0 == 0 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : i0 = 0
org.apache.ambari.server.api.services.BaseRequest.getFields : i0 = 0 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i4 = virtualinvoke r5.<java.util.regex.Matcher: int groupCount()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $i4 = virtualinvoke r5.<java.util.regex.Matcher: int groupCount()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i5 = $i4 + 1
org.apache.ambari.server.api.services.BaseRequest.getFields : $i5 = $i4 + 1 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : if i0 >= $i5
org.apache.ambari.server.api.services.BaseRequest.getFields : if i0 >= $i5 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r13 = virtualinvoke r5.<java.util.regex.Matcher: java.lang.String group(int)>(i0)
org.apache.ambari.server.api.services.BaseRequest.getFields : $r13 = virtualinvoke r5.<java.util.regex.Matcher: java.lang.String group(int)>(i0) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>($r13)
org.apache.ambari.server.api.services.BaseRequest.getFields : interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>($r13) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : i0 = i0 + 1
org.apache.ambari.server.api.services.BaseRequest.getFields : i0 = i0 + 1 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : goto [?= $i4 = virtualinvoke r5.<java.util.regex.Matcher: int groupCount()>()]
org.apache.ambari.server.api.services.BaseRequest.getFields : goto [?= $i4 = virtualinvoke r5.<java.util.regex.Matcher: int groupCount()>()] >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : goto [?= $z0 = virtualinvoke r5.<java.util.regex.Matcher: boolean find()>()]
org.apache.ambari.server.api.services.BaseRequest.getFields : goto [?= $z0 = virtualinvoke r5.<java.util.regex.Matcher: boolean find()>()] >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r14 = new java.util.HashMap
org.apache.ambari.server.api.services.BaseRequest.getFields : $r14 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i6 = interfaceinvoke r3.<java.util.Set: int size()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $i6 = interfaceinvoke r3.<java.util.Set: int size()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : specialinvoke $r14.<java.util.HashMap: void <init>(int)>($i6)
org.apache.ambari.server.api.services.BaseRequest.getFields : specialinvoke $r14.<java.util.HashMap: void <init>(int)>($i6) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r2 = $r14
org.apache.ambari.server.api.services.BaseRequest.getFields : r2 = $r14 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r15 = interfaceinvoke r3.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : r15 = interfaceinvoke r3.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $z2 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $z2 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : if $z2 == 0
org.apache.ambari.server.api.services.BaseRequest.getFields : if $z2 == 0 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r16 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $r16 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r6 = (java.lang.String) $r16
org.apache.ambari.server.api.services.BaseRequest.getFields : r6 = (java.lang.String) $r16 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r7 = null
org.apache.ambari.server.api.services.BaseRequest.getFields : r7 = null >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $z3 = virtualinvoke r6.<java.lang.String: boolean contains(java.lang.CharSequence)>("[")
org.apache.ambari.server.api.services.BaseRequest.getFields : $z3 = virtualinvoke r6.<java.lang.String: boolean contains(java.lang.CharSequence)>("[") >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : if $z3 == 0
org.apache.ambari.server.api.services.BaseRequest.getFields : if $z3 == 0 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i7 = virtualinvoke r6.<java.lang.String: int indexOf(int)>(91)
org.apache.ambari.server.api.services.BaseRequest.getFields : $i7 = virtualinvoke r6.<java.lang.String: int indexOf(int)>(91) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i8 = $i7 + 1
org.apache.ambari.server.api.services.BaseRequest.getFields : $i8 = $i7 + 1 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i9 = virtualinvoke r6.<java.lang.String: int indexOf(int)>(93)
org.apache.ambari.server.api.services.BaseRequest.getFields : $i9 = virtualinvoke r6.<java.lang.String: int indexOf(int)>(93) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r17 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int,int)>($i8, $i9)
org.apache.ambari.server.api.services.BaseRequest.getFields : $r17 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int,int)>($i8, $i9) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r8 = virtualinvoke $r17.<java.lang.String: java.lang.String[] split(java.lang.String)>(",")
org.apache.ambari.server.api.services.BaseRequest.getFields : r8 = virtualinvoke $r17.<java.lang.String: java.lang.String[] split(java.lang.String)>(",") >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i10 = virtualinvoke r6.<java.lang.String: int indexOf(int)>(91)
org.apache.ambari.server.api.services.BaseRequest.getFields : $i10 = virtualinvoke r6.<java.lang.String: int indexOf(int)>(91) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r6 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int,int)>(0, $i10)
org.apache.ambari.server.api.services.BaseRequest.getFields : r6 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int,int)>(0, $i10) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r18 = r8[0]
org.apache.ambari.server.api.services.BaseRequest.getFields : $r18 = r8[0] >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r19 = virtualinvoke $r18.<java.lang.String: java.lang.String trim()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $r19 = virtualinvoke $r18.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r19)
org.apache.ambari.server.api.services.BaseRequest.getFields : l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r19) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : l2 = -1L
org.apache.ambari.server.api.services.BaseRequest.getFields : l2 = -1L >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : l3 = -1L
org.apache.ambari.server.api.services.BaseRequest.getFields : l3 = -1L >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i11 = lengthof r8
org.apache.ambari.server.api.services.BaseRequest.getFields : $i11 = lengthof r8 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : if $i11 < 2
org.apache.ambari.server.api.services.BaseRequest.getFields : if $i11 < 2 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r20 = r8[1]
org.apache.ambari.server.api.services.BaseRequest.getFields : $r20 = r8[1] >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r21 = virtualinvoke $r20.<java.lang.String: java.lang.String trim()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $r21 = virtualinvoke $r20.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : l2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r21)
org.apache.ambari.server.api.services.BaseRequest.getFields : l2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r21) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i12 = lengthof r8
org.apache.ambari.server.api.services.BaseRequest.getFields : $i12 = lengthof r8 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : if $i12 != 3
org.apache.ambari.server.api.services.BaseRequest.getFields : if $i12 != 3 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r22 = r8[2]
org.apache.ambari.server.api.services.BaseRequest.getFields : $r22 = r8[2] >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r23 = virtualinvoke $r22.<java.lang.String: java.lang.String trim()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $r23 = virtualinvoke $r22.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : l3 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r23)
org.apache.ambari.server.api.services.BaseRequest.getFields : l3 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r23) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r24 = new org.apache.ambari.server.controller.internal.TemporalInfoImpl
org.apache.ambari.server.api.services.BaseRequest.getFields : $r24 = new org.apache.ambari.server.controller.internal.TemporalInfoImpl >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : specialinvoke $r24.<org.apache.ambari.server.controller.internal.TemporalInfoImpl: void <init>(long,long,long)>(l1, l2, l3)
org.apache.ambari.server.api.services.BaseRequest.getFields : specialinvoke $r24.<org.apache.ambari.server.controller.internal.TemporalInfoImpl: void <init>(long,long,long)>(l1, l2, l3) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r7 = $r24
org.apache.ambari.server.api.services.BaseRequest.getFields : r7 = $r24 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r7)
org.apache.ambari.server.api.services.BaseRequest.getFields : interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r7) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : goto [?= $z2 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.api.services.BaseRequest.getFields : goto [?= $z2 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : return r2
org.apache.ambari.server.api.services.GetRequestTest.getTestRequest : $r8 = new org.apache.ambari.server.api.services.GetRequestTest$1 >>>>>>>> org.apache.ambari.server.api.services.GetRequestTest.getTestRequest : specialinvoke $r8.<org.apache.ambari.server.api.services.GetRequestTest$1: void <init>(org.apache.ambari.server.api.services.GetRequestTest,javax.ws.rs.core.HttpHeaders,org.apache.ambari.server.api.services.RequestBody,javax.ws.rs.core.UriInfo,org.apache.ambari.server.api.resources.ResourceInstance,org.apache.ambari.server.api.predicate.PredicateCompiler,org.apache.ambari.server.api.handlers.RequestHandler,org.apache.ambari.server.api.services.ResultPostProcessor)>(r0, r1, r2, r3, r7, r4, r5, r6)
org.apache.ambari.server.api.services.GetRequestTest.getTestRequest : specialinvoke $r8.<org.apache.ambari.server.api.services.GetRequestTest$1: void <init>(org.apache.ambari.server.api.services.GetRequestTest,javax.ws.rs.core.HttpHeaders,org.apache.ambari.server.api.services.RequestBody,javax.ws.rs.core.UriInfo,org.apache.ambari.server.api.resources.ResourceInstance,org.apache.ambari.server.api.predicate.PredicateCompiler,org.apache.ambari.server.api.handlers.RequestHandler,org.apache.ambari.server.api.services.ResultPostProcessor)>(r0, r1, r2, r3, r7, r4, r5, r6) >>>>>>>> org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : $z0 = staticinvoke <org.apache.ambari.server.utils.RequestUtils: boolean hasValidRequest()>()
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : $z0 = staticinvoke <org.apache.ambari.server.utils.RequestUtils: boolean hasValidRequest()>() >>>>>>>> org.apache.ambari.server.utils.RequestUtils.hasValidRequest : $r0 = staticinvoke <org.springframework.web.context.request.RequestContextHolder: org.springframework.web.context.request.RequestAttributes getRequestAttributes()>()
org.apache.ambari.server.utils.RequestUtils.hasValidRequest : $r0 = staticinvoke <org.springframework.web.context.request.RequestContextHolder: org.springframework.web.context.request.RequestAttributes getRequestAttributes()>() >>>>>>>> org.apache.ambari.server.utils.RequestUtils.hasValidRequest : if $r0 == null
org.apache.ambari.server.utils.RequestUtils.hasValidRequest : if $r0 == null >>>>>>>> org.apache.ambari.server.utils.RequestUtils.hasValidRequest : $z1 = 0
org.apache.ambari.server.utils.RequestUtils.hasValidRequest : $z1 = 0 >>>>>>>> org.apache.ambari.server.utils.RequestUtils.hasValidRequest : return $z1
org.apache.ambari.server.utils.RequestUtils.hasValidRequest : return $z1 >>>>>>>> org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : if $z0 == 0
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : if $z0 == 0 >>>>>>>> org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : return null
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : return null >>>>>>>> org.apache.ambari.server.api.services.GetRequestTest.getTestRequest : return $r8
org.apache.ambari.server.api.services.GetRequestTest.getTestRequest : return $r8 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r9 = r0.<org.apache.ambari.server.api.services.BaseRequest: javax.ws.rs.core.UriInfo m_uriInfo>
org.apache.ambari.server.api.services.BaseRequest.getFields : $r9 = r0.<org.apache.ambari.server.api.services.BaseRequest: javax.ws.rs.core.UriInfo m_uriInfo> >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r10 = interfaceinvoke $r9.<javax.ws.rs.core.UriInfo: javax.ws.rs.core.MultivaluedMap getQueryParameters()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $r10 = interfaceinvoke $r9.<javax.ws.rs.core.UriInfo: javax.ws.rs.core.MultivaluedMap getQueryParameters()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r11 = interfaceinvoke $r10.<javax.ws.rs.core.MultivaluedMap: java.lang.Object getFirst(java.lang.Object)>("fields")
org.apache.ambari.server.api.services.BaseRequest.getFields : $r11 = interfaceinvoke $r10.<javax.ws.rs.core.MultivaluedMap: java.lang.Object getFirst(java.lang.Object)>("fields") >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r1 = (java.lang.String) $r11
org.apache.ambari.server.api.services.BaseRequest.getFields : r1 = (java.lang.String) $r11 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : if r1 != null
org.apache.ambari.server.api.services.BaseRequest.getFields : if r1 != null >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r12 = new java.util.HashSet
org.apache.ambari.server.api.services.BaseRequest.getFields : $r12 = new java.util.HashSet >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : specialinvoke $r12.<java.util.HashSet: void <init>()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : specialinvoke $r12.<java.util.HashSet: void <init>()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r3 = $r12
org.apache.ambari.server.api.services.BaseRequest.getFields : r3 = $r12 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r4 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[^,\\[]*?\\[[^\\]]*?\\]|[^,]+")
org.apache.ambari.server.api.services.BaseRequest.getFields : r4 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[^,\\[]*?\\[[^\\]]*?\\]|[^,]+") >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r5 = virtualinvoke r4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1)
org.apache.ambari.server.api.services.BaseRequest.getFields : r5 = virtualinvoke r4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $z0 = virtualinvoke r5.<java.util.regex.Matcher: boolean find()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $z0 = virtualinvoke r5.<java.util.regex.Matcher: boolean find()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : if $z0 == 0
org.apache.ambari.server.api.services.BaseRequest.getFields : if $z0 == 0 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : i0 = 0
org.apache.ambari.server.api.services.BaseRequest.getFields : i0 = 0 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i4 = virtualinvoke r5.<java.util.regex.Matcher: int groupCount()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $i4 = virtualinvoke r5.<java.util.regex.Matcher: int groupCount()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i5 = $i4 + 1
org.apache.ambari.server.api.services.BaseRequest.getFields : $i5 = $i4 + 1 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : if i0 >= $i5
org.apache.ambari.server.api.services.BaseRequest.getFields : if i0 >= $i5 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r13 = virtualinvoke r5.<java.util.regex.Matcher: java.lang.String group(int)>(i0)
org.apache.ambari.server.api.services.BaseRequest.getFields : $r13 = virtualinvoke r5.<java.util.regex.Matcher: java.lang.String group(int)>(i0) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>($r13)
org.apache.ambari.server.api.services.BaseRequest.getFields : interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>($r13) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : i0 = i0 + 1
org.apache.ambari.server.api.services.BaseRequest.getFields : i0 = i0 + 1 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : goto [?= $i4 = virtualinvoke r5.<java.util.regex.Matcher: int groupCount()>()]
org.apache.ambari.server.api.services.BaseRequest.getFields : goto [?= $i4 = virtualinvoke r5.<java.util.regex.Matcher: int groupCount()>()] >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : goto [?= $z0 = virtualinvoke r5.<java.util.regex.Matcher: boolean find()>()]
org.apache.ambari.server.api.services.BaseRequest.getFields : goto [?= $z0 = virtualinvoke r5.<java.util.regex.Matcher: boolean find()>()] >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r14 = new java.util.HashMap
org.apache.ambari.server.api.services.BaseRequest.getFields : $r14 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i6 = interfaceinvoke r3.<java.util.Set: int size()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $i6 = interfaceinvoke r3.<java.util.Set: int size()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : specialinvoke $r14.<java.util.HashMap: void <init>(int)>($i6)
org.apache.ambari.server.api.services.BaseRequest.getFields : specialinvoke $r14.<java.util.HashMap: void <init>(int)>($i6) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r2 = $r14
org.apache.ambari.server.api.services.BaseRequest.getFields : r2 = $r14 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r15 = interfaceinvoke r3.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : r15 = interfaceinvoke r3.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $z2 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $z2 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : if $z2 == 0
org.apache.ambari.server.api.services.BaseRequest.getFields : if $z2 == 0 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r16 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $r16 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r6 = (java.lang.String) $r16
org.apache.ambari.server.api.services.BaseRequest.getFields : r6 = (java.lang.String) $r16 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r7 = null
org.apache.ambari.server.api.services.BaseRequest.getFields : r7 = null >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $z3 = virtualinvoke r6.<java.lang.String: boolean contains(java.lang.CharSequence)>("[")
org.apache.ambari.server.api.services.BaseRequest.getFields : $z3 = virtualinvoke r6.<java.lang.String: boolean contains(java.lang.CharSequence)>("[") >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : if $z3 == 0
org.apache.ambari.server.api.services.BaseRequest.getFields : if $z3 == 0 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i7 = virtualinvoke r6.<java.lang.String: int indexOf(int)>(91)
org.apache.ambari.server.api.services.BaseRequest.getFields : $i7 = virtualinvoke r6.<java.lang.String: int indexOf(int)>(91) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i8 = $i7 + 1
org.apache.ambari.server.api.services.BaseRequest.getFields : $i8 = $i7 + 1 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i9 = virtualinvoke r6.<java.lang.String: int indexOf(int)>(93)
org.apache.ambari.server.api.services.BaseRequest.getFields : $i9 = virtualinvoke r6.<java.lang.String: int indexOf(int)>(93) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r17 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int,int)>($i8, $i9)
org.apache.ambari.server.api.services.BaseRequest.getFields : $r17 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int,int)>($i8, $i9) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r8 = virtualinvoke $r17.<java.lang.String: java.lang.String[] split(java.lang.String)>(",")
org.apache.ambari.server.api.services.BaseRequest.getFields : r8 = virtualinvoke $r17.<java.lang.String: java.lang.String[] split(java.lang.String)>(",") >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i10 = virtualinvoke r6.<java.lang.String: int indexOf(int)>(91)
org.apache.ambari.server.api.services.BaseRequest.getFields : $i10 = virtualinvoke r6.<java.lang.String: int indexOf(int)>(91) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r6 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int,int)>(0, $i10)
org.apache.ambari.server.api.services.BaseRequest.getFields : r6 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int,int)>(0, $i10) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r18 = r8[0]
org.apache.ambari.server.api.services.BaseRequest.getFields : $r18 = r8[0] >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r19 = virtualinvoke $r18.<java.lang.String: java.lang.String trim()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $r19 = virtualinvoke $r18.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r19)
org.apache.ambari.server.api.services.BaseRequest.getFields : l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r19) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : l2 = -1L
org.apache.ambari.server.api.services.BaseRequest.getFields : l2 = -1L >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : l3 = -1L
org.apache.ambari.server.api.services.BaseRequest.getFields : l3 = -1L >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i11 = lengthof r8
org.apache.ambari.server.api.services.BaseRequest.getFields : $i11 = lengthof r8 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : if $i11 < 2
org.apache.ambari.server.api.services.BaseRequest.getFields : if $i11 < 2 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r20 = r8[1]
org.apache.ambari.server.api.services.BaseRequest.getFields : $r20 = r8[1] >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r21 = virtualinvoke $r20.<java.lang.String: java.lang.String trim()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $r21 = virtualinvoke $r20.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : l2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r21)
org.apache.ambari.server.api.services.BaseRequest.getFields : l2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r21) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i12 = lengthof r8
org.apache.ambari.server.api.services.BaseRequest.getFields : $i12 = lengthof r8 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : if $i12 != 3
org.apache.ambari.server.api.services.BaseRequest.getFields : if $i12 != 3 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r22 = r8[2]
org.apache.ambari.server.api.services.BaseRequest.getFields : $r22 = r8[2] >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r23 = virtualinvoke $r22.<java.lang.String: java.lang.String trim()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $r23 = virtualinvoke $r22.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : l3 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r23)
org.apache.ambari.server.api.services.BaseRequest.getFields : l3 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r23) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r24 = new org.apache.ambari.server.controller.internal.TemporalInfoImpl
org.apache.ambari.server.api.services.BaseRequest.getFields : $r24 = new org.apache.ambari.server.controller.internal.TemporalInfoImpl >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : specialinvoke $r24.<org.apache.ambari.server.controller.internal.TemporalInfoImpl: void <init>(long,long,long)>(l1, l2, l3)
org.apache.ambari.server.api.services.BaseRequest.getFields : specialinvoke $r24.<org.apache.ambari.server.controller.internal.TemporalInfoImpl: void <init>(long,long,long)>(l1, l2, l3) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r7 = $r24
org.apache.ambari.server.api.services.BaseRequest.getFields : r7 = $r24 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r7)
org.apache.ambari.server.api.services.BaseRequest.getFields : interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r7) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : goto [?= $z2 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.api.services.BaseRequest.getFields : goto [?= $z2 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : return r2
org.apache.ambari.server.api.services.PostRequestTest.getTestRequest : $r8 = new org.apache.ambari.server.api.services.PostRequestTest$1 >>>>>>>> org.apache.ambari.server.api.services.PostRequestTest.getTestRequest : specialinvoke $r8.<org.apache.ambari.server.api.services.PostRequestTest$1: void <init>(org.apache.ambari.server.api.services.PostRequestTest,javax.ws.rs.core.HttpHeaders,org.apache.ambari.server.api.services.RequestBody,javax.ws.rs.core.UriInfo,org.apache.ambari.server.api.resources.ResourceInstance,org.apache.ambari.server.api.predicate.PredicateCompiler,org.apache.ambari.server.api.handlers.RequestHandler,org.apache.ambari.server.api.services.ResultPostProcessor)>(r0, r1, r2, r3, r7, r4, r5, r6)
org.apache.ambari.server.api.services.PostRequestTest.getTestRequest : specialinvoke $r8.<org.apache.ambari.server.api.services.PostRequestTest$1: void <init>(org.apache.ambari.server.api.services.PostRequestTest,javax.ws.rs.core.HttpHeaders,org.apache.ambari.server.api.services.RequestBody,javax.ws.rs.core.UriInfo,org.apache.ambari.server.api.resources.ResourceInstance,org.apache.ambari.server.api.predicate.PredicateCompiler,org.apache.ambari.server.api.handlers.RequestHandler,org.apache.ambari.server.api.services.ResultPostProcessor)>(r0, r1, r2, r3, r7, r4, r5, r6) >>>>>>>> org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : $z0 = staticinvoke <org.apache.ambari.server.utils.RequestUtils: boolean hasValidRequest()>()
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : $z0 = staticinvoke <org.apache.ambari.server.utils.RequestUtils: boolean hasValidRequest()>() >>>>>>>> org.apache.ambari.server.utils.RequestUtils.hasValidRequest : $r0 = staticinvoke <org.springframework.web.context.request.RequestContextHolder: org.springframework.web.context.request.RequestAttributes getRequestAttributes()>()
org.apache.ambari.server.utils.RequestUtils.hasValidRequest : $r0 = staticinvoke <org.springframework.web.context.request.RequestContextHolder: org.springframework.web.context.request.RequestAttributes getRequestAttributes()>() >>>>>>>> org.apache.ambari.server.utils.RequestUtils.hasValidRequest : if $r0 == null
org.apache.ambari.server.utils.RequestUtils.hasValidRequest : if $r0 == null >>>>>>>> org.apache.ambari.server.utils.RequestUtils.hasValidRequest : $z1 = 0
org.apache.ambari.server.utils.RequestUtils.hasValidRequest : $z1 = 0 >>>>>>>> org.apache.ambari.server.utils.RequestUtils.hasValidRequest : return $z1
org.apache.ambari.server.utils.RequestUtils.hasValidRequest : return $z1 >>>>>>>> org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : if $z0 == 0
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : if $z0 == 0 >>>>>>>> org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : return null
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : return null >>>>>>>> org.apache.ambari.server.api.services.PostRequestTest.getTestRequest : return $r8
org.apache.ambari.server.api.services.PostRequestTest.getTestRequest : return $r8 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r9 = r0.<org.apache.ambari.server.api.services.BaseRequest: javax.ws.rs.core.UriInfo m_uriInfo>
org.apache.ambari.server.api.services.BaseRequest.getFields : $r9 = r0.<org.apache.ambari.server.api.services.BaseRequest: javax.ws.rs.core.UriInfo m_uriInfo> >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r10 = interfaceinvoke $r9.<javax.ws.rs.core.UriInfo: javax.ws.rs.core.MultivaluedMap getQueryParameters()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $r10 = interfaceinvoke $r9.<javax.ws.rs.core.UriInfo: javax.ws.rs.core.MultivaluedMap getQueryParameters()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r11 = interfaceinvoke $r10.<javax.ws.rs.core.MultivaluedMap: java.lang.Object getFirst(java.lang.Object)>("fields")
org.apache.ambari.server.api.services.BaseRequest.getFields : $r11 = interfaceinvoke $r10.<javax.ws.rs.core.MultivaluedMap: java.lang.Object getFirst(java.lang.Object)>("fields") >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r1 = (java.lang.String) $r11
org.apache.ambari.server.api.services.BaseRequest.getFields : r1 = (java.lang.String) $r11 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : if r1 != null
org.apache.ambari.server.api.services.BaseRequest.getFields : if r1 != null >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r12 = new java.util.HashSet
org.apache.ambari.server.api.services.BaseRequest.getFields : $r12 = new java.util.HashSet >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : specialinvoke $r12.<java.util.HashSet: void <init>()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : specialinvoke $r12.<java.util.HashSet: void <init>()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r3 = $r12
org.apache.ambari.server.api.services.BaseRequest.getFields : r3 = $r12 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r4 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[^,\\[]*?\\[[^\\]]*?\\]|[^,]+")
org.apache.ambari.server.api.services.BaseRequest.getFields : r4 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[^,\\[]*?\\[[^\\]]*?\\]|[^,]+") >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r5 = virtualinvoke r4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1)
org.apache.ambari.server.api.services.BaseRequest.getFields : r5 = virtualinvoke r4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $z0 = virtualinvoke r5.<java.util.regex.Matcher: boolean find()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $z0 = virtualinvoke r5.<java.util.regex.Matcher: boolean find()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : if $z0 == 0
org.apache.ambari.server.api.services.BaseRequest.getFields : if $z0 == 0 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : i0 = 0
org.apache.ambari.server.api.services.BaseRequest.getFields : i0 = 0 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i4 = virtualinvoke r5.<java.util.regex.Matcher: int groupCount()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $i4 = virtualinvoke r5.<java.util.regex.Matcher: int groupCount()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i5 = $i4 + 1
org.apache.ambari.server.api.services.BaseRequest.getFields : $i5 = $i4 + 1 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : if i0 >= $i5
org.apache.ambari.server.api.services.BaseRequest.getFields : if i0 >= $i5 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r13 = virtualinvoke r5.<java.util.regex.Matcher: java.lang.String group(int)>(i0)
org.apache.ambari.server.api.services.BaseRequest.getFields : $r13 = virtualinvoke r5.<java.util.regex.Matcher: java.lang.String group(int)>(i0) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>($r13)
org.apache.ambari.server.api.services.BaseRequest.getFields : interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>($r13) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : i0 = i0 + 1
org.apache.ambari.server.api.services.BaseRequest.getFields : i0 = i0 + 1 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : goto [?= $i4 = virtualinvoke r5.<java.util.regex.Matcher: int groupCount()>()]
org.apache.ambari.server.api.services.BaseRequest.getFields : goto [?= $i4 = virtualinvoke r5.<java.util.regex.Matcher: int groupCount()>()] >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : goto [?= $z0 = virtualinvoke r5.<java.util.regex.Matcher: boolean find()>()]
org.apache.ambari.server.api.services.BaseRequest.getFields : goto [?= $z0 = virtualinvoke r5.<java.util.regex.Matcher: boolean find()>()] >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r14 = new java.util.HashMap
org.apache.ambari.server.api.services.BaseRequest.getFields : $r14 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i6 = interfaceinvoke r3.<java.util.Set: int size()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $i6 = interfaceinvoke r3.<java.util.Set: int size()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : specialinvoke $r14.<java.util.HashMap: void <init>(int)>($i6)
org.apache.ambari.server.api.services.BaseRequest.getFields : specialinvoke $r14.<java.util.HashMap: void <init>(int)>($i6) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r2 = $r14
org.apache.ambari.server.api.services.BaseRequest.getFields : r2 = $r14 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r15 = interfaceinvoke r3.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : r15 = interfaceinvoke r3.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $z2 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $z2 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : if $z2 == 0
org.apache.ambari.server.api.services.BaseRequest.getFields : if $z2 == 0 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r16 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $r16 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r6 = (java.lang.String) $r16
org.apache.ambari.server.api.services.BaseRequest.getFields : r6 = (java.lang.String) $r16 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r7 = null
org.apache.ambari.server.api.services.BaseRequest.getFields : r7 = null >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $z3 = virtualinvoke r6.<java.lang.String: boolean contains(java.lang.CharSequence)>("[")
org.apache.ambari.server.api.services.BaseRequest.getFields : $z3 = virtualinvoke r6.<java.lang.String: boolean contains(java.lang.CharSequence)>("[") >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : if $z3 == 0
org.apache.ambari.server.api.services.BaseRequest.getFields : if $z3 == 0 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i7 = virtualinvoke r6.<java.lang.String: int indexOf(int)>(91)
org.apache.ambari.server.api.services.BaseRequest.getFields : $i7 = virtualinvoke r6.<java.lang.String: int indexOf(int)>(91) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i8 = $i7 + 1
org.apache.ambari.server.api.services.BaseRequest.getFields : $i8 = $i7 + 1 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i9 = virtualinvoke r6.<java.lang.String: int indexOf(int)>(93)
org.apache.ambari.server.api.services.BaseRequest.getFields : $i9 = virtualinvoke r6.<java.lang.String: int indexOf(int)>(93) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r17 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int,int)>($i8, $i9)
org.apache.ambari.server.api.services.BaseRequest.getFields : $r17 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int,int)>($i8, $i9) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r8 = virtualinvoke $r17.<java.lang.String: java.lang.String[] split(java.lang.String)>(",")
org.apache.ambari.server.api.services.BaseRequest.getFields : r8 = virtualinvoke $r17.<java.lang.String: java.lang.String[] split(java.lang.String)>(",") >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i10 = virtualinvoke r6.<java.lang.String: int indexOf(int)>(91)
org.apache.ambari.server.api.services.BaseRequest.getFields : $i10 = virtualinvoke r6.<java.lang.String: int indexOf(int)>(91) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r6 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int,int)>(0, $i10)
org.apache.ambari.server.api.services.BaseRequest.getFields : r6 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int,int)>(0, $i10) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r18 = r8[0]
org.apache.ambari.server.api.services.BaseRequest.getFields : $r18 = r8[0] >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r19 = virtualinvoke $r18.<java.lang.String: java.lang.String trim()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $r19 = virtualinvoke $r18.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r19)
org.apache.ambari.server.api.services.BaseRequest.getFields : l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r19) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : l2 = -1L
org.apache.ambari.server.api.services.BaseRequest.getFields : l2 = -1L >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : l3 = -1L
org.apache.ambari.server.api.services.BaseRequest.getFields : l3 = -1L >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i11 = lengthof r8
org.apache.ambari.server.api.services.BaseRequest.getFields : $i11 = lengthof r8 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : if $i11 < 2
org.apache.ambari.server.api.services.BaseRequest.getFields : if $i11 < 2 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r20 = r8[1]
org.apache.ambari.server.api.services.BaseRequest.getFields : $r20 = r8[1] >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r21 = virtualinvoke $r20.<java.lang.String: java.lang.String trim()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $r21 = virtualinvoke $r20.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : l2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r21)
org.apache.ambari.server.api.services.BaseRequest.getFields : l2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r21) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $i12 = lengthof r8
org.apache.ambari.server.api.services.BaseRequest.getFields : $i12 = lengthof r8 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : if $i12 != 3
org.apache.ambari.server.api.services.BaseRequest.getFields : if $i12 != 3 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r22 = r8[2]
org.apache.ambari.server.api.services.BaseRequest.getFields : $r22 = r8[2] >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r23 = virtualinvoke $r22.<java.lang.String: java.lang.String trim()>()
org.apache.ambari.server.api.services.BaseRequest.getFields : $r23 = virtualinvoke $r22.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : l3 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r23)
org.apache.ambari.server.api.services.BaseRequest.getFields : l3 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r23) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : $r24 = new org.apache.ambari.server.controller.internal.TemporalInfoImpl
org.apache.ambari.server.api.services.BaseRequest.getFields : $r24 = new org.apache.ambari.server.controller.internal.TemporalInfoImpl >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : specialinvoke $r24.<org.apache.ambari.server.controller.internal.TemporalInfoImpl: void <init>(long,long,long)>(l1, l2, l3)
org.apache.ambari.server.api.services.BaseRequest.getFields : specialinvoke $r24.<org.apache.ambari.server.controller.internal.TemporalInfoImpl: void <init>(long,long,long)>(l1, l2, l3) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : r7 = $r24
org.apache.ambari.server.api.services.BaseRequest.getFields : r7 = $r24 >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r7)
org.apache.ambari.server.api.services.BaseRequest.getFields : interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r7) >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : goto [?= $z2 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.api.services.BaseRequest.getFields : goto [?= $z2 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getFields : return r2
