org.apache.ambari.server.security.SslExecutionTest$SecurityModule.configure : $r1 = virtualinvoke r0.<org.apache.ambari.server.security.SslExecutionTest$SecurityModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "java/util/Properties") >>>>>>>> org.apache.ambari.server.security.SslExecutionTest$SecurityModule.configure : $r2 = r0.<org.apache.ambari.server.security.SslExecutionTest$SecurityModule: org.apache.ambari.server.security.SslExecutionTest this$0>
org.apache.ambari.server.security.SslExecutionTest$SecurityModule.configure : $r2 = r0.<org.apache.ambari.server.security.SslExecutionTest$SecurityModule: org.apache.ambari.server.security.SslExecutionTest this$0> >>>>>>>> org.apache.ambari.server.security.SslExecutionTest$SecurityModule.configure : $r3 = virtualinvoke $r2.<org.apache.ambari.server.security.SslExecutionTest: java.util.Properties buildTestProperties()>()
org.apache.ambari.server.security.SslExecutionTest$SecurityModule.configure : $r3 = virtualinvoke $r2.<org.apache.ambari.server.security.SslExecutionTest: java.util.Properties buildTestProperties()>() >>>>>>>> org.apache.ambari.server.security.SslExecutionTest.buildTestProperties : $r2 = r0.<org.apache.ambari.server.security.SslExecutionTest: org.junit.rules.TemporaryFolder temp>
org.apache.ambari.server.security.SslExecutionTest.buildTestProperties : $r2 = r0.<org.apache.ambari.server.security.SslExecutionTest: org.junit.rules.TemporaryFolder temp> >>>>>>>> org.apache.ambari.server.security.SslExecutionTest.buildTestProperties : virtualinvoke $r2.<org.junit.rules.TemporaryFolder: void create()>()
org.apache.ambari.server.security.SslExecutionTest.buildTestProperties : virtualinvoke $r2.<org.junit.rules.TemporaryFolder: void create()>() >>>>>>>> org.apache.ambari.server.security.SslExecutionTest.buildTestProperties : goto [?= $r4 = new java.util.Properties]
org.apache.ambari.server.security.SslExecutionTest.buildTestProperties : goto [?= $r4 = new java.util.Properties] >>>>>>>> org.apache.ambari.server.security.SslExecutionTest.buildTestProperties : $r4 = new java.util.Properties
org.apache.ambari.server.security.SslExecutionTest.buildTestProperties : $r4 = new java.util.Properties >>>>>>>> org.apache.ambari.server.security.SslExecutionTest.buildTestProperties : specialinvoke $r4.<java.util.Properties: void <init>()>()
org.apache.ambari.server.security.SslExecutionTest.buildTestProperties : specialinvoke $r4.<java.util.Properties: void <init>()>() >>>>>>>> org.apache.ambari.server.security.SslExecutionTest.buildTestProperties : r5 = $r4
org.apache.ambari.server.security.SslExecutionTest.buildTestProperties : r5 = $r4 >>>>>>>> org.apache.ambari.server.security.SslExecutionTest.buildTestProperties : $r6 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SRVR_KSTR_DIR>
org.apache.ambari.server.security.SslExecutionTest.buildTestProperties : $r6 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SRVR_KSTR_DIR> >>>>>>>> org.apache.ambari.server.security.SslExecutionTest.buildTestProperties : $r7 = virtualinvoke $r6.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.security.SslExecutionTest.buildTestProperties : $r7 = virtualinvoke $r6.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getKey : $r1 = r0.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String m_key>
org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getKey : $r1 = r0.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String m_key> >>>>>>>> org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getKey : return $r1
org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getKey : return $r1 >>>>>>>> org.apache.ambari.server.security.SslExecutionTest.buildTestProperties : $r8 = r0.<org.apache.ambari.server.security.SslExecutionTest: org.junit.rules.TemporaryFolder temp>
org.apache.ambari.server.security.SslExecutionTest.buildTestProperties : $r8 = r0.<org.apache.ambari.server.security.SslExecutionTest: org.junit.rules.TemporaryFolder temp> >>>>>>>> org.apache.ambari.server.security.SslExecutionTest.buildTestProperties : $r9 = virtualinvoke $r8.<org.junit.rules.TemporaryFolder: java.io.File getRoot()>()
org.apache.ambari.server.security.SslExecutionTest.buildTestProperties : $r9 = virtualinvoke $r8.<org.junit.rules.TemporaryFolder: java.io.File getRoot()>() >>>>>>>> org.apache.ambari.server.security.SslExecutionTest.buildTestProperties : $r10 = virtualinvoke $r9.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.ambari.server.security.SslExecutionTest.buildTestProperties : $r10 = virtualinvoke $r9.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.ambari.server.security.SslExecutionTest.buildTestProperties : virtualinvoke r5.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r7, $r10)
org.apache.ambari.server.security.SslExecutionTest.buildTestProperties : virtualinvoke r5.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r7, $r10) >>>>>>>> org.apache.ambari.server.security.SslExecutionTest.buildTestProperties : return r5
org.apache.ambari.server.security.SslExecutionTest.buildTestProperties : return r5 >>>>>>>> org.apache.ambari.server.security.SslExecutionTest$SecurityModule.configure : interfaceinvoke $r1.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r3)
org.apache.ambari.server.security.SslExecutionTest$SecurityModule.configure : interfaceinvoke $r1.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r3) >>>>>>>> org.apache.ambari.server.security.SslExecutionTest$SecurityModule.configure : $r4 = virtualinvoke r0.<org.apache.ambari.server.security.SslExecutionTest$SecurityModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "org/apache/ambari/server/configuration/Configuration")
org.apache.ambari.server.security.SslExecutionTest$SecurityModule.configure : $r4 = virtualinvoke r0.<org.apache.ambari.server.security.SslExecutionTest$SecurityModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "org/apache/ambari/server/configuration/Configuration") >>>>>>>> org.apache.ambari.server.security.SslExecutionTest$SecurityModule.configure : $r5 = r0.<org.apache.ambari.server.security.SslExecutionTest$SecurityModule: org.apache.ambari.server.security.SslExecutionTest this$0>
org.apache.ambari.server.security.SslExecutionTest$SecurityModule.configure : $r5 = r0.<org.apache.ambari.server.security.SslExecutionTest$SecurityModule: org.apache.ambari.server.security.SslExecutionTest this$0> >>>>>>>> org.apache.ambari.server.security.SslExecutionTest$SecurityModule.configure : $r6 = virtualinvoke $r5.<org.apache.ambari.server.security.SslExecutionTest: java.lang.reflect.Constructor getConfigurationConstructor()>()
org.apache.ambari.server.security.SslExecutionTest$SecurityModule.configure : $r6 = virtualinvoke $r5.<org.apache.ambari.server.security.SslExecutionTest: java.lang.reflect.Constructor getConfigurationConstructor()>() >>>>>>>> org.apache.ambari.server.security.SslExecutionTest.getConfigurationConstructor : $r1 = class "org/apache/ambari/server/configuration/Configuration"
org.apache.ambari.server.security.SslExecutionTest.getConfigurationConstructor : $r1 = class "org/apache/ambari/server/configuration/Configuration" >>>>>>>> org.apache.ambari.server.security.SslExecutionTest.getConfigurationConstructor : $r3 = newarray (java.lang.Class)[1]
org.apache.ambari.server.security.SslExecutionTest.getConfigurationConstructor : $r3 = newarray (java.lang.Class)[1] >>>>>>>> org.apache.ambari.server.security.SslExecutionTest.getConfigurationConstructor : $r3[0] = class "java/util/Properties"
org.apache.ambari.server.security.SslExecutionTest.getConfigurationConstructor : $r3[0] = class "java/util/Properties" >>>>>>>> org.apache.ambari.server.security.SslExecutionTest.getConfigurationConstructor : $r4 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r3)
org.apache.ambari.server.security.SslExecutionTest.getConfigurationConstructor : $r4 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r3) >>>>>>>> org.apache.ambari.server.security.SslExecutionTest.getConfigurationConstructor : return $r4
org.apache.ambari.server.security.SslExecutionTest.getConfigurationConstructor : return $r4 >>>>>>>> org.apache.ambari.server.security.SslExecutionTest$SecurityModule.configure : interfaceinvoke $r4.<com.google.inject.binder.AnnotatedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder toConstructor(java.lang.reflect.Constructor)>($r6)
org.apache.ambari.server.security.SslExecutionTest$SecurityModule.configure : interfaceinvoke $r4.<com.google.inject.binder.AnnotatedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder toConstructor(java.lang.reflect.Constructor)>($r6) >>>>>>>> org.apache.ambari.server.security.SslExecutionTest$SecurityModule.configure : $r8 = virtualinvoke r0.<org.apache.ambari.server.security.SslExecutionTest$SecurityModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "org/apache/ambari/server/state/stack/OsFamily")
org.apache.ambari.server.security.SslExecutionTest$SecurityModule.configure : $r8 = virtualinvoke r0.<org.apache.ambari.server.security.SslExecutionTest$SecurityModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "org/apache/ambari/server/state/stack/OsFamily") >>>>>>>> org.apache.ambari.server.security.SslExecutionTest$SecurityModule.configure : $r9 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/state/stack/OsFamily")
org.apache.ambari.server.security.SslExecutionTest$SecurityModule.configure : $r9 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/state/stack/OsFamily") >>>>>>>> org.apache.ambari.server.security.SslExecutionTest$SecurityModule.configure : interfaceinvoke $r8.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r9)
org.apache.ambari.server.security.SslExecutionTest$SecurityModule.configure : interfaceinvoke $r8.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r9) >>>>>>>> org.apache.ambari.server.security.SslExecutionTest$SecurityModule.configure : $r10 = newarray (java.lang.Class)[1]
org.apache.ambari.server.security.SslExecutionTest$SecurityModule.configure : $r10 = newarray (java.lang.Class)[1] >>>>>>>> org.apache.ambari.server.security.SslExecutionTest$SecurityModule.configure : $r10[0] = class "org/apache/ambari/server/security/SslExecutionTest"
org.apache.ambari.server.security.SslExecutionTest$SecurityModule.configure : $r10[0] = class "org/apache/ambari/server/security/SslExecutionTest" >>>>>>>> org.apache.ambari.server.security.SslExecutionTest$SecurityModule.configure : virtualinvoke r0.<org.apache.ambari.server.security.SslExecutionTest$SecurityModule: void requestStaticInjection(java.lang.Class[])>($r10)
org.apache.ambari.server.security.SslExecutionTest$SecurityModule.configure : virtualinvoke r0.<org.apache.ambari.server.security.SslExecutionTest$SecurityModule: void requestStaticInjection(java.lang.Class[])>($r10) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : r2 = null
org.apache.ambari.server.configuration.Configuration.getProperty : r2 = null >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : $r3 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object getDefaultValue()>()
org.apache.ambari.server.configuration.Configuration.getProperty : $r3 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object getDefaultValue()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getDefaultValue : $r1 = r0.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object m_defaultValue>
org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getDefaultValue : $r1 = r0.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object m_defaultValue> >>>>>>>> org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getDefaultValue : return $r1
org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getDefaultValue : return $r1 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : if null == $r3
org.apache.ambari.server.configuration.Configuration.getProperty : if null == $r3 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : $r4 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object getDefaultValue()>()
org.apache.ambari.server.configuration.Configuration.getProperty : $r4 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object getDefaultValue()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4)
org.apache.ambari.server.configuration.Configuration.getProperty : r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : $r5 = r0.<org.apache.ambari.server.configuration.Configuration: java.util.Properties properties>
org.apache.ambari.server.configuration.Configuration.getProperty : $r5 = r0.<org.apache.ambari.server.configuration.Configuration: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : $r6 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.configuration.Configuration.getProperty : $r6 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : $r7 = virtualinvoke $r5.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>($r6, r2)
org.apache.ambari.server.configuration.Configuration.getProperty : $r7 = virtualinvoke $r5.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>($r6, r2) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : return $r7
org.apache.ambari.server.configuration.Configuration.getProperty : return $r7 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setUnixFilePermissions : $z0 = <org.apache.ambari.server.utils.ShellCommandUtil: boolean LINUX>
org.apache.ambari.server.utils.ShellCommandUtil.setUnixFilePermissions : $z0 = <org.apache.ambari.server.utils.ShellCommandUtil: boolean LINUX> >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setUnixFilePermissions : if $z0 == 0
org.apache.ambari.server.utils.ShellCommandUtil.setUnixFilePermissions : if $z0 == 0 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setUnixFilePermissions : $r3 = newarray (java.lang.String)[3]
org.apache.ambari.server.utils.ShellCommandUtil.setUnixFilePermissions : $r3 = newarray (java.lang.String)[3] >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setUnixFilePermissions : $r3[0] = "chmod"
org.apache.ambari.server.utils.ShellCommandUtil.setUnixFilePermissions : $r3[0] = "chmod" >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setUnixFilePermissions : $r3[1] = r0
org.apache.ambari.server.utils.ShellCommandUtil.setUnixFilePermissions : $r3[1] = r0 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setUnixFilePermissions : $r3[2] = r1
org.apache.ambari.server.utils.ShellCommandUtil.setUnixFilePermissions : $r3[2] = r1 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setUnixFilePermissions : staticinvoke <org.apache.ambari.server.utils.ShellCommandUtil: org.apache.ambari.server.utils.ShellCommandUtil$Result runCommand(java.lang.String[])>($r3)
org.apache.ambari.server.utils.ShellCommandUtil.setUnixFilePermissions : staticinvoke <org.apache.ambari.server.utils.ShellCommandUtil: org.apache.ambari.server.utils.ShellCommandUtil$Result runCommand(java.lang.String[])>($r3) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : $r1 = staticinvoke <org.apache.ambari.server.utils.ShellCommandUtil: org.apache.ambari.server.utils.ShellCommandUtil$Result runCommand(java.lang.String[],java.util.Map)>(r0, null)
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : $r1 = staticinvoke <org.apache.ambari.server.utils.ShellCommandUtil: org.apache.ambari.server.utils.ShellCommandUtil$Result runCommand(java.lang.String[],java.util.Map)>(r0, null) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : $r2 = staticinvoke <org.apache.ambari.server.utils.ShellCommandUtil: org.apache.ambari.server.utils.ShellCommandUtil$Result runCommand(java.lang.String[],java.util.Map,org.apache.ambari.server.utils.ShellCommandUtil$InteractiveHandler,boolean)>(r0, r1, null, 0)
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : $r2 = staticinvoke <org.apache.ambari.server.utils.ShellCommandUtil: org.apache.ambari.server.utils.ShellCommandUtil$Result runCommand(java.lang.String[],java.util.Map,org.apache.ambari.server.utils.ShellCommandUtil$InteractiveHandler,boolean)>(r0, r1, null, 0) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : if z0 == 0
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : if z0 == 0 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : r3 = r0
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : r3 = r0 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : $r12 = new java.lang.ProcessBuilder
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : $r12 = new java.lang.ProcessBuilder >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : specialinvoke $r12.<java.lang.ProcessBuilder: void <init>(java.lang.String[])>(r3)
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : specialinvoke $r12.<java.lang.ProcessBuilder: void <init>(java.lang.String[])>(r3) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : r4 = $r12
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : r4 = $r12 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : if r1 == null
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : if r1 == null >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : $z1 = <org.apache.ambari.server.utils.ShellCommandUtil: boolean WINDOWS>
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : $z1 = <org.apache.ambari.server.utils.ShellCommandUtil: boolean WINDOWS> >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : if $z1 == 0
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : if $z1 == 0 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : r14 = virtualinvoke r4.<java.lang.ProcessBuilder: java.lang.Process start()>()
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : r14 = virtualinvoke r4.<java.lang.ProcessBuilder: java.lang.Process start()>() >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : r16 = virtualinvoke r14.<java.lang.Process: java.io.InputStream getInputStream()>()
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : r16 = virtualinvoke r14.<java.lang.Process: java.io.InputStream getInputStream()>() >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : if r2 == null
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : if r2 == null >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : virtualinvoke r14.<java.lang.Process: int waitFor()>()
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : virtualinvoke r14.<java.lang.Process: int waitFor()>() >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : r29 = staticinvoke <org.apache.ambari.server.utils.ShellCommandUtil: java.lang.String streamToString(java.io.InputStream)>(r16)
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : r29 = staticinvoke <org.apache.ambari.server.utils.ShellCommandUtil: java.lang.String streamToString(java.io.InputStream)>(r16) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.streamToString : $r1 = new java.io.InputStreamReader
org.apache.ambari.server.utils.ShellCommandUtil.streamToString : $r1 = new java.io.InputStreamReader >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.streamToString : specialinvoke $r1.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r0)
org.apache.ambari.server.utils.ShellCommandUtil.streamToString : specialinvoke $r1.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r0) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.streamToString : r2 = $r1
org.apache.ambari.server.utils.ShellCommandUtil.streamToString : r2 = $r1 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.streamToString : $r5 = new java.io.BufferedReader
org.apache.ambari.server.utils.ShellCommandUtil.streamToString : $r5 = new java.io.BufferedReader >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.streamToString : specialinvoke $r5.<java.io.BufferedReader: void <init>(java.io.Reader)>(r2)
org.apache.ambari.server.utils.ShellCommandUtil.streamToString : specialinvoke $r5.<java.io.BufferedReader: void <init>(java.io.Reader)>(r2) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.streamToString : r3 = $r5
org.apache.ambari.server.utils.ShellCommandUtil.streamToString : r3 = $r5 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.streamToString : $r6 = new java.lang.StringBuilder
org.apache.ambari.server.utils.ShellCommandUtil.streamToString : $r6 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.streamToString : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.utils.ShellCommandUtil.streamToString : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.streamToString : r4 = $r6
org.apache.ambari.server.utils.ShellCommandUtil.streamToString : r4 = $r6 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.streamToString : n0 = null
org.apache.ambari.server.utils.ShellCommandUtil.streamToString : n0 = null >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.streamToString : $r7 = virtualinvoke r3.<java.io.BufferedReader: java.lang.String readLine()>()
org.apache.ambari.server.utils.ShellCommandUtil.streamToString : $r7 = virtualinvoke r3.<java.io.BufferedReader: java.lang.String readLine()>() >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.streamToString : r8 = $r7
org.apache.ambari.server.utils.ShellCommandUtil.streamToString : r8 = $r7 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.streamToString : if $r7 == null
org.apache.ambari.server.utils.ShellCommandUtil.streamToString : if $r7 == null >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.streamToString : $r11 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.utils.ShellCommandUtil.streamToString : $r11 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.streamToString : return $r11
org.apache.ambari.server.utils.ShellCommandUtil.streamToString : return $r11 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : $r30 = virtualinvoke r14.<java.lang.Process: java.io.InputStream getErrorStream()>()
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : $r30 = virtualinvoke r14.<java.lang.Process: java.io.InputStream getErrorStream()>() >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : r31 = staticinvoke <org.apache.ambari.server.utils.ShellCommandUtil: java.lang.String streamToString(java.io.InputStream)>($r30)
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : r31 = staticinvoke <org.apache.ambari.server.utils.ShellCommandUtil: java.lang.String streamToString(java.io.InputStream)>($r30) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : i6 = virtualinvoke r14.<java.lang.Process: int exitValue()>()
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : i6 = virtualinvoke r14.<java.lang.Process: int exitValue()>() >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : $r32 = new org.apache.ambari.server.utils.ShellCommandUtil$Result
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : $r32 = new org.apache.ambari.server.utils.ShellCommandUtil$Result >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : specialinvoke $r32.<org.apache.ambari.server.utils.ShellCommandUtil$Result: void <init>(int,java.lang.String,java.lang.String)>(i6, r29, r31)
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : specialinvoke $r32.<org.apache.ambari.server.utils.ShellCommandUtil$Result: void <init>(int,java.lang.String,java.lang.String)>(i6, r29, r31) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : return $r32
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : return $r32 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : return $r2
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : return $r2 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : return $r1
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : return $r1 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setUnixFilePermissions : goto [?= return]
org.apache.ambari.server.utils.ShellCommandUtil.setUnixFilePermissions : goto [?= return] >>>>>>>> org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty API_USE_SSL>
org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty API_USE_SSL> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1)
org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r2)
org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r2) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : return $z0
org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : return $z0 >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r1 = new org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r1 = new org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : specialinvoke $r1.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: void <init>()>()
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : specialinvoke $r1.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: void <init>()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : r2 = $r1
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : r2 = $r1 >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r3 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty KERBEROS_AUTH_ENABLED>
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r3 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty KERBEROS_AUTH_ENABLED> >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r13 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r3)
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r13 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r3) >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r13)
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r13) >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $z0 = virtualinvoke $r14.<java.lang.Boolean: boolean booleanValue()>()
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $z0 = virtualinvoke $r14.<java.lang.Boolean: boolean booleanValue()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : virtualinvoke r2.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: void setKerberosAuthenticationEnabled(boolean)>($z0)
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : virtualinvoke r2.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: void setKerberosAuthenticationEnabled(boolean)>($z0) >>>>>>>> org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.setKerberosAuthenticationEnabled : r0.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean kerberosAuthenticationEnabled> = z0
org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.setKerberosAuthenticationEnabled : r0.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean kerberosAuthenticationEnabled> = z0 >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $z1 = virtualinvoke r2.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean isKerberosAuthenticationEnabled()>()
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $z1 = virtualinvoke r2.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean isKerberosAuthenticationEnabled()>() >>>>>>>> org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.isKerberosAuthenticationEnabled : $z0 = r0.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean kerberosAuthenticationEnabled>
org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.isKerberosAuthenticationEnabled : $z0 = r0.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean kerberosAuthenticationEnabled> >>>>>>>> org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.isKerberosAuthenticationEnabled : return $z0
org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.isKerberosAuthenticationEnabled : return $z0 >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : if $z1 != 0
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : if $z1 != 0 >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : return r2
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : return r2 >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_PATH>
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_PATH> >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r4 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1)
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r4 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1) >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : if $r4 == null
org.apache.ambari.server.configuration.Configuration.loadSSLParams : if $r4 == null >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r7 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_PASSWORD>
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r7 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_PASSWORD> >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r8 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r7)
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r8 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r7) >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : if $r8 == null
org.apache.ambari.server.configuration.Configuration.loadSSLParams : if $r8 == null >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r15 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_TYPE>
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r15 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_TYPE> >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r16 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r15)
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r16 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r15) >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : if $r16 == null
org.apache.ambari.server.configuration.Configuration.loadSSLParams : if $r16 == null >>>>>>>> org.apache.ambari.server.security.SslExecutionTest.init : <org.apache.ambari.server.security.SslExecutionTest: org.apache.ambari.server.security.CertificateManager certMan> = r0
org.apache.ambari.server.security.SslExecutionTest.init : <org.apache.ambari.server.security.SslExecutionTest: org.apache.ambari.server.security.CertificateManager certMan> = r0 >>>>>>>> org.apache.ambari.server.security.CertificateManager.initRootCert : $r1 = <org.apache.ambari.server.security.CertificateManager: org.slf4j.Logger LOG>
org.apache.ambari.server.security.CertificateManager.initRootCert : $r1 = <org.apache.ambari.server.security.CertificateManager: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.security.CertificateManager.initRootCert : interfaceinvoke $r1.<org.slf4j.Logger: void info(java.lang.String)>("Initialization of root certificate")
org.apache.ambari.server.security.CertificateManager.initRootCert : interfaceinvoke $r1.<org.slf4j.Logger: void info(java.lang.String)>("Initialization of root certificate") >>>>>>>> org.apache.ambari.server.security.CertificateManager.initRootCert : z0 = specialinvoke r0.<org.apache.ambari.server.security.CertificateManager: boolean isCertExists()>()
org.apache.ambari.server.security.CertificateManager.initRootCert : z0 = specialinvoke r0.<org.apache.ambari.server.security.CertificateManager: boolean isCertExists()>() >>>>>>>> org.apache.ambari.server.security.CertificateManager.isCertExists : $r7 = r0.<org.apache.ambari.server.security.CertificateManager: org.apache.ambari.server.configuration.Configuration configs>
org.apache.ambari.server.security.CertificateManager.isCertExists : $r7 = r0.<org.apache.ambari.server.security.CertificateManager: org.apache.ambari.server.configuration.Configuration configs> >>>>>>>> org.apache.ambari.server.security.CertificateManager.isCertExists : r1 = virtualinvoke $r7.<org.apache.ambari.server.configuration.Configuration: java.util.Map getConfigsMap()>()
org.apache.ambari.server.security.CertificateManager.isCertExists : r1 = virtualinvoke $r7.<org.apache.ambari.server.configuration.Configuration: java.util.Map getConfigsMap()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.getConfigsMap : $r1 = r0.<org.apache.ambari.server.configuration.Configuration: java.util.Map configsMap>
org.apache.ambari.server.configuration.Configuration.getConfigsMap : $r1 = r0.<org.apache.ambari.server.configuration.Configuration: java.util.Map configsMap> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getConfigsMap : return $r1
org.apache.ambari.server.configuration.Configuration.getConfigsMap : return $r1 >>>>>>>> org.apache.ambari.server.security.CertificateManager.isCertExists : $r2 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SRVR_KSTR_DIR>
org.apache.ambari.server.security.CertificateManager.isCertExists : $r2 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SRVR_KSTR_DIR> >>>>>>>> org.apache.ambari.server.security.CertificateManager.isCertExists : $r8 = virtualinvoke $r2.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.security.CertificateManager.isCertExists : $r8 = virtualinvoke $r2.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.security.CertificateManager.isCertExists : $r9 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8)
org.apache.ambari.server.security.CertificateManager.isCertExists : $r9 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8) >>>>>>>> org.apache.ambari.server.security.CertificateManager.isCertExists : r3 = (java.lang.String) $r9
org.apache.ambari.server.security.CertificateManager.isCertExists : r3 = (java.lang.String) $r9 >>>>>>>> org.apache.ambari.server.security.CertificateManager.isCertExists : $r10 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SRVR_CRT_NAME>
org.apache.ambari.server.security.CertificateManager.isCertExists : $r10 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SRVR_CRT_NAME> >>>>>>>> org.apache.ambari.server.security.CertificateManager.isCertExists : $r11 = virtualinvoke $r10.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.security.CertificateManager.isCertExists : $r11 = virtualinvoke $r10.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.security.CertificateManager.isCertExists : $r12 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r11)
org.apache.ambari.server.security.CertificateManager.isCertExists : $r12 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r11) >>>>>>>> org.apache.ambari.server.security.CertificateManager.isCertExists : r4 = (java.lang.String) $r12
org.apache.ambari.server.security.CertificateManager.isCertExists : r4 = (java.lang.String) $r12 >>>>>>>> org.apache.ambari.server.security.CertificateManager.isCertExists : $r13 = new java.io.File
org.apache.ambari.server.security.CertificateManager.isCertExists : $r13 = new java.io.File >>>>>>>> org.apache.ambari.server.security.CertificateManager.isCertExists : $r5 = new java.lang.StringBuilder
org.apache.ambari.server.security.CertificateManager.isCertExists : $r5 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.security.CertificateManager.isCertExists : specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.security.CertificateManager.isCertExists : specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.security.CertificateManager.isCertExists : $r14 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3)
org.apache.ambari.server.security.CertificateManager.isCertExists : $r14 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) >>>>>>>> org.apache.ambari.server.security.CertificateManager.isCertExists : $r15 = <java.io.File: java.lang.String separator>
org.apache.ambari.server.security.CertificateManager.isCertExists : $r15 = <java.io.File: java.lang.String separator> >>>>>>>> org.apache.ambari.server.security.CertificateManager.isCertExists : $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15)
org.apache.ambari.server.security.CertificateManager.isCertExists : $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15) >>>>>>>> org.apache.ambari.server.security.CertificateManager.isCertExists : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4)
org.apache.ambari.server.security.CertificateManager.isCertExists : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) >>>>>>>> org.apache.ambari.server.security.CertificateManager.isCertExists : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.security.CertificateManager.isCertExists : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.security.CertificateManager.isCertExists : specialinvoke $r13.<java.io.File: void <init>(java.lang.String)>($r18)
org.apache.ambari.server.security.CertificateManager.isCertExists : specialinvoke $r13.<java.io.File: void <init>(java.lang.String)>($r18) >>>>>>>> org.apache.ambari.server.security.CertificateManager.isCertExists : r6 = $r13
org.apache.ambari.server.security.CertificateManager.isCertExists : r6 = $r13 >>>>>>>> org.apache.ambari.server.security.CertificateManager.isCertExists : $r19 = <org.apache.ambari.server.security.CertificateManager: org.slf4j.Logger LOG>
org.apache.ambari.server.security.CertificateManager.isCertExists : $r19 = <org.apache.ambari.server.security.CertificateManager: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.security.CertificateManager.isCertExists : $r20 = new java.lang.StringBuilder
org.apache.ambari.server.security.CertificateManager.isCertExists : $r20 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.security.CertificateManager.isCertExists : specialinvoke $r20.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.security.CertificateManager.isCertExists : specialinvoke $r20.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.security.CertificateManager.isCertExists : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("srvrKstrDir = ")
org.apache.ambari.server.security.CertificateManager.isCertExists : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("srvrKstrDir = ") >>>>>>>> org.apache.ambari.server.security.CertificateManager.isCertExists : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3)
org.apache.ambari.server.security.CertificateManager.isCertExists : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) >>>>>>>> org.apache.ambari.server.security.CertificateManager.isCertExists : $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.security.CertificateManager.isCertExists : $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.security.CertificateManager.isCertExists : interfaceinvoke $r19.<org.slf4j.Logger: void debug(java.lang.String)>($r23)
org.apache.ambari.server.security.CertificateManager.isCertExists : interfaceinvoke $r19.<org.slf4j.Logger: void debug(java.lang.String)>($r23) >>>>>>>> org.apache.ambari.server.security.CertificateManager.isCertExists : $r24 = <org.apache.ambari.server.security.CertificateManager: org.slf4j.Logger LOG>
org.apache.ambari.server.security.CertificateManager.isCertExists : $r24 = <org.apache.ambari.server.security.CertificateManager: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.security.CertificateManager.isCertExists : $r25 = new java.lang.StringBuilder
org.apache.ambari.server.security.CertificateManager.isCertExists : $r25 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.security.CertificateManager.isCertExists : specialinvoke $r25.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.security.CertificateManager.isCertExists : specialinvoke $r25.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.security.CertificateManager.isCertExists : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("srvrCrtName = ")
org.apache.ambari.server.security.CertificateManager.isCertExists : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("srvrCrtName = ") >>>>>>>> org.apache.ambari.server.security.CertificateManager.isCertExists : $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4)
org.apache.ambari.server.security.CertificateManager.isCertExists : $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) >>>>>>>> org.apache.ambari.server.security.CertificateManager.isCertExists : $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.security.CertificateManager.isCertExists : $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.security.CertificateManager.isCertExists : interfaceinvoke $r24.<org.slf4j.Logger: void debug(java.lang.String)>($r28)
org.apache.ambari.server.security.CertificateManager.isCertExists : interfaceinvoke $r24.<org.slf4j.Logger: void debug(java.lang.String)>($r28) >>>>>>>> org.apache.ambari.server.security.CertificateManager.isCertExists : $r29 = <org.apache.ambari.server.security.CertificateManager: org.slf4j.Logger LOG>
org.apache.ambari.server.security.CertificateManager.isCertExists : $r29 = <org.apache.ambari.server.security.CertificateManager: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.security.CertificateManager.isCertExists : $r30 = new java.lang.StringBuilder
org.apache.ambari.server.security.CertificateManager.isCertExists : $r30 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.security.CertificateManager.isCertExists : specialinvoke $r30.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.security.CertificateManager.isCertExists : specialinvoke $r30.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.security.CertificateManager.isCertExists : $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("certFile = ")
org.apache.ambari.server.security.CertificateManager.isCertExists : $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("certFile = ") >>>>>>>> org.apache.ambari.server.security.CertificateManager.isCertExists : $r32 = virtualinvoke r6.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.ambari.server.security.CertificateManager.isCertExists : $r32 = virtualinvoke r6.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.ambari.server.security.CertificateManager.isCertExists : $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32)
org.apache.ambari.server.security.CertificateManager.isCertExists : $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32) >>>>>>>> org.apache.ambari.server.security.CertificateManager.isCertExists : $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.security.CertificateManager.isCertExists : $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.security.CertificateManager.isCertExists : interfaceinvoke $r29.<org.slf4j.Logger: void debug(java.lang.String)>($r34)
org.apache.ambari.server.security.CertificateManager.isCertExists : interfaceinvoke $r29.<org.slf4j.Logger: void debug(java.lang.String)>($r34) >>>>>>>> org.apache.ambari.server.security.CertificateManager.isCertExists : $z0 = virtualinvoke r6.<java.io.File: boolean exists()>()
org.apache.ambari.server.security.CertificateManager.isCertExists : $z0 = virtualinvoke r6.<java.io.File: boolean exists()>() >>>>>>>> org.apache.ambari.server.security.CertificateManager.isCertExists : return $z0
org.apache.ambari.server.security.CertificateManager.isCertExists : return $z0 >>>>>>>> org.apache.ambari.server.security.CertificateManager.initRootCert : $r2 = <org.apache.ambari.server.security.CertificateManager: org.slf4j.Logger LOG>
org.apache.ambari.server.security.CertificateManager.initRootCert : $r2 = <org.apache.ambari.server.security.CertificateManager: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.security.CertificateManager.initRootCert : $r3 = new java.lang.StringBuilder
org.apache.ambari.server.security.CertificateManager.initRootCert : $r3 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.security.CertificateManager.initRootCert : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.security.CertificateManager.initRootCert : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.security.CertificateManager.initRootCert : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Certificate exists:")
org.apache.ambari.server.security.CertificateManager.initRootCert : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Certificate exists:") >>>>>>>> org.apache.ambari.server.security.CertificateManager.initRootCert : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0)
org.apache.ambari.server.security.CertificateManager.initRootCert : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0) >>>>>>>> org.apache.ambari.server.security.CertificateManager.initRootCert : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.security.CertificateManager.initRootCert : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.security.CertificateManager.initRootCert : interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String)>($r6)
org.apache.ambari.server.security.CertificateManager.initRootCert : interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String)>($r6) >>>>>>>> org.apache.ambari.server.security.CertificateManager.initRootCert : if z0 != 0
org.apache.ambari.server.security.CertificateManager.initRootCert : if z0 != 0 >>>>>>>> org.apache.ambari.server.security.CertificateManager.initRootCert : specialinvoke r0.<org.apache.ambari.server.security.CertificateManager: void generateServerCertificate()>()
org.apache.ambari.server.security.CertificateManager.initRootCert : specialinvoke r0.<org.apache.ambari.server.security.CertificateManager: void generateServerCertificate()>() >>>>>>>> org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r1 = <org.apache.ambari.server.security.CertificateManager: org.slf4j.Logger LOG>
org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r1 = <org.apache.ambari.server.security.CertificateManager: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.security.CertificateManager.generateServerCertificate : interfaceinvoke $r1.<org.slf4j.Logger: void info(java.lang.String)>("Generation of server certificate")
org.apache.ambari.server.security.CertificateManager.generateServerCertificate : interfaceinvoke $r1.<org.slf4j.Logger: void info(java.lang.String)>("Generation of server certificate") >>>>>>>> org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r11 = r0.<org.apache.ambari.server.security.CertificateManager: org.apache.ambari.server.configuration.Configuration configs>
org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r11 = r0.<org.apache.ambari.server.security.CertificateManager: org.apache.ambari.server.configuration.Configuration configs> >>>>>>>> org.apache.ambari.server.security.CertificateManager.generateServerCertificate : r2 = virtualinvoke $r11.<org.apache.ambari.server.configuration.Configuration: java.util.Map getConfigsMap()>()
org.apache.ambari.server.security.CertificateManager.generateServerCertificate : r2 = virtualinvoke $r11.<org.apache.ambari.server.configuration.Configuration: java.util.Map getConfigsMap()>() >>>>>>>> org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r12 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SRVR_KSTR_DIR>
org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r12 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SRVR_KSTR_DIR> >>>>>>>> org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r13 = virtualinvoke $r12.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r13 = virtualinvoke $r12.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r14 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r13)
org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r14 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r13) >>>>>>>> org.apache.ambari.server.security.CertificateManager.generateServerCertificate : r3 = (java.lang.String) $r14
org.apache.ambari.server.security.CertificateManager.generateServerCertificate : r3 = (java.lang.String) $r14 >>>>>>>> org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r15 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SRVR_CRT_NAME>
org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r15 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SRVR_CRT_NAME> >>>>>>>> org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r16 = virtualinvoke $r15.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r16 = virtualinvoke $r15.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r17 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r16)
org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r17 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r16) >>>>>>>> org.apache.ambari.server.security.CertificateManager.generateServerCertificate : r4 = (java.lang.String) $r17
org.apache.ambari.server.security.CertificateManager.generateServerCertificate : r4 = (java.lang.String) $r17 >>>>>>>> org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r18 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SRVR_CSR_NAME>
org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r18 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SRVR_CSR_NAME> >>>>>>>> org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r19 = virtualinvoke $r18.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r19 = virtualinvoke $r18.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r20 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r19)
org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r20 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r19) >>>>>>>> org.apache.ambari.server.security.CertificateManager.generateServerCertificate : r5 = (java.lang.String) $r20
org.apache.ambari.server.security.CertificateManager.generateServerCertificate : r5 = (java.lang.String) $r20 >>>>>>>> org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r21 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SRVR_KEY_NAME>
org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r21 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SRVR_KEY_NAME> >>>>>>>> org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r22 = virtualinvoke $r21.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r22 = virtualinvoke $r21.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r23 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r22)
org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r23 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r22) >>>>>>>> org.apache.ambari.server.security.CertificateManager.generateServerCertificate : r6 = (java.lang.String) $r23
org.apache.ambari.server.security.CertificateManager.generateServerCertificate : r6 = (java.lang.String) $r23 >>>>>>>> org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r24 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty KSTR_NAME>
org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r24 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty KSTR_NAME> >>>>>>>> org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r25 = virtualinvoke $r24.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r25 = virtualinvoke $r24.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r26 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r25)
org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r26 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r25) >>>>>>>> org.apache.ambari.server.security.CertificateManager.generateServerCertificate : r7 = (java.lang.String) $r26
org.apache.ambari.server.security.CertificateManager.generateServerCertificate : r7 = (java.lang.String) $r26 >>>>>>>> org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r27 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SRVR_CRT_PASS>
org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r27 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SRVR_CRT_PASS> >>>>>>>> org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r28 = virtualinvoke $r27.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r28 = virtualinvoke $r27.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r29 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r28)
org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r29 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r28) >>>>>>>> org.apache.ambari.server.security.CertificateManager.generateServerCertificate : r8 = (java.lang.String) $r29
org.apache.ambari.server.security.CertificateManager.generateServerCertificate : r8 = (java.lang.String) $r29 >>>>>>>> org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r30 = newarray (java.lang.Object)[6]
org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r30 = newarray (java.lang.Object)[6] >>>>>>>> org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r30[0] = r8
org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r30[0] = r8 >>>>>>>> org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r30[1] = r3
org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r30[1] = r3 >>>>>>>> org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r30[2] = r6
org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r30[2] = r6 >>>>>>>> org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r30[3] = r4
org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r30[3] = r4 >>>>>>>> org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r30[4] = r7
org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r30[4] = r7 >>>>>>>> org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r30[5] = r5
org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r30[5] = r5 >>>>>>>> org.apache.ambari.server.security.CertificateManager.generateServerCertificate : r9 = $r30
org.apache.ambari.server.security.CertificateManager.generateServerCertificate : r9 = $r30 >>>>>>>> org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r31 = <org.apache.ambari.server.security.CertificateManager: java.lang.String GEN_SRVR_KEY>
org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r31 = <org.apache.ambari.server.security.CertificateManager: java.lang.String GEN_SRVR_KEY> >>>>>>>> org.apache.ambari.server.security.CertificateManager.generateServerCertificate : r10 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($r31, r9)
org.apache.ambari.server.security.CertificateManager.generateServerCertificate : r10 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($r31, r9) >>>>>>>> org.apache.ambari.server.security.CertificateManager.generateServerCertificate : virtualinvoke r0.<org.apache.ambari.server.security.CertificateManager: int runCommand(java.lang.String)>(r10)
org.apache.ambari.server.security.CertificateManager.generateServerCertificate : virtualinvoke r0.<org.apache.ambari.server.security.CertificateManager: int runCommand(java.lang.String)>(r10) >>>>>>>> org.apache.ambari.server.security.CertificateManager.runCommand : n0 = null
org.apache.ambari.server.security.CertificateManager.runCommand : n0 = null >>>>>>>> org.apache.ambari.server.security.CertificateManager.runCommand : n1 = null
org.apache.ambari.server.security.CertificateManager.runCommand : n1 = null >>>>>>>> org.apache.ambari.server.security.CertificateManager.runCommand : r2 = null
org.apache.ambari.server.security.CertificateManager.runCommand : r2 = null >>>>>>>> org.apache.ambari.server.security.CertificateManager.runCommand : $r7 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>()
org.apache.ambari.server.security.CertificateManager.runCommand : $r7 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>() >>>>>>>> org.apache.ambari.server.security.CertificateManager.runCommand : r8 = virtualinvoke $r7.<java.lang.Runtime: java.lang.Process exec(java.lang.String)>(r1)
org.apache.ambari.server.security.CertificateManager.runCommand : r8 = virtualinvoke $r7.<java.lang.Runtime: java.lang.Process exec(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.security.CertificateManager.runCommand : $r9 = new java.io.BufferedReader
org.apache.ambari.server.security.CertificateManager.runCommand : $r9 = new java.io.BufferedReader >>>>>>>> org.apache.ambari.server.security.CertificateManager.runCommand : $r3 = new java.io.InputStreamReader
org.apache.ambari.server.security.CertificateManager.runCommand : $r3 = new java.io.InputStreamReader >>>>>>>> org.apache.ambari.server.security.CertificateManager.runCommand : $r10 = virtualinvoke r8.<java.lang.Process: java.io.InputStream getInputStream()>()
org.apache.ambari.server.security.CertificateManager.runCommand : $r10 = virtualinvoke r8.<java.lang.Process: java.io.InputStream getInputStream()>() >>>>>>>> org.apache.ambari.server.security.CertificateManager.runCommand : $r11 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF8")
org.apache.ambari.server.security.CertificateManager.runCommand : $r11 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF8") >>>>>>>> org.apache.ambari.server.security.CertificateManager.runCommand : specialinvoke $r3.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>($r10, $r11)
org.apache.ambari.server.security.CertificateManager.runCommand : specialinvoke $r3.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>($r10, $r11) >>>>>>>> org.apache.ambari.server.security.CertificateManager.runCommand : specialinvoke $r9.<java.io.BufferedReader: void <init>(java.io.Reader)>($r3)
org.apache.ambari.server.security.CertificateManager.runCommand : specialinvoke $r9.<java.io.BufferedReader: void <init>(java.io.Reader)>($r3) >>>>>>>> org.apache.ambari.server.security.CertificateManager.runCommand : r2 = $r9
org.apache.ambari.server.security.CertificateManager.runCommand : r2 = $r9 >>>>>>>> org.apache.ambari.server.security.CertificateManager.runCommand : $r12 = virtualinvoke r2.<java.io.BufferedReader: java.lang.String readLine()>()
org.apache.ambari.server.security.CertificateManager.runCommand : $r12 = virtualinvoke r2.<java.io.BufferedReader: java.lang.String readLine()>() >>>>>>>> org.apache.ambari.server.security.CertificateManager.runCommand : r13 = $r12
org.apache.ambari.server.security.CertificateManager.runCommand : r13 = $r12 >>>>>>>> org.apache.ambari.server.security.CertificateManager.runCommand : if $r12 == null
org.apache.ambari.server.security.CertificateManager.runCommand : if $r12 == null >>>>>>>> org.apache.ambari.server.security.CertificateManager.runCommand : virtualinvoke r8.<java.lang.Process: int waitFor()>()
org.apache.ambari.server.security.CertificateManager.runCommand : virtualinvoke r8.<java.lang.Process: int waitFor()>() >>>>>>>> org.apache.ambari.server.security.CertificateManager.runCommand : $i2 = virtualinvoke r8.<java.lang.Process: int exitValue()>()
org.apache.ambari.server.security.CertificateManager.runCommand : $i2 = virtualinvoke r8.<java.lang.Process: int exitValue()>() >>>>>>>> org.apache.ambari.server.security.CertificateManager.runCommand : staticinvoke <org.apache.ambari.server.utils.ShellCommandUtil: void logOpenSslExitCode(java.lang.String,int)>(r1, $i2)
org.apache.ambari.server.security.CertificateManager.runCommand : staticinvoke <org.apache.ambari.server.utils.ShellCommandUtil: void logOpenSslExitCode(java.lang.String,int)>(r1, $i2) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.logOpenSslExitCode : if i0 != 0
org.apache.ambari.server.utils.ShellCommandUtil.logOpenSslExitCode : if i0 != 0 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.logOpenSslExitCode : $r1 = <org.apache.ambari.server.utils.ShellCommandUtil: org.apache.commons.logging.Log LOG>
org.apache.ambari.server.utils.ShellCommandUtil.logOpenSslExitCode : $r1 = <org.apache.ambari.server.utils.ShellCommandUtil: org.apache.commons.logging.Log LOG> >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.logOpenSslExitCode : $r2 = staticinvoke <org.apache.ambari.server.utils.ShellCommandUtil: java.lang.String getOpenSslCommandResult(java.lang.String,int)>(r0, i0)
org.apache.ambari.server.utils.ShellCommandUtil.logOpenSslExitCode : $r2 = staticinvoke <org.apache.ambari.server.utils.ShellCommandUtil: java.lang.String getOpenSslCommandResult(java.lang.String,int)>(r0, i0) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.getOpenSslCommandResult : $r1 = new java.lang.StringBuilder
org.apache.ambari.server.utils.ShellCommandUtil.getOpenSslCommandResult : $r1 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.getOpenSslCommandResult : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.utils.ShellCommandUtil.getOpenSslCommandResult : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.getOpenSslCommandResult : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Command ")
org.apache.ambari.server.utils.ShellCommandUtil.getOpenSslCommandResult : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Command ") >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.getOpenSslCommandResult : $r3 = staticinvoke <org.apache.ambari.server.utils.ShellCommandUtil: java.lang.String hideOpenSslPassword(java.lang.String)>(r0)
org.apache.ambari.server.utils.ShellCommandUtil.getOpenSslCommandResult : $r3 = staticinvoke <org.apache.ambari.server.utils.ShellCommandUtil: java.lang.String hideOpenSslPassword(java.lang.String)>(r0) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.hideOpenSslPassword : $z0 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>("pass:")
org.apache.ambari.server.utils.ShellCommandUtil.hideOpenSslPassword : $z0 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>("pass:") >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.hideOpenSslPassword : if $z0 == 0
org.apache.ambari.server.utils.ShellCommandUtil.hideOpenSslPassword : if $z0 == 0 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.hideOpenSslPassword : $i1 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("pass:")
org.apache.ambari.server.utils.ShellCommandUtil.hideOpenSslPassword : $i1 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("pass:") >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.hideOpenSslPassword : $r2 = "pass:"
org.apache.ambari.server.utils.ShellCommandUtil.hideOpenSslPassword : $r2 = "pass:" >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.hideOpenSslPassword : $i2 = virtualinvoke $r2.<java.lang.String: int length()>()
org.apache.ambari.server.utils.ShellCommandUtil.hideOpenSslPassword : $i2 = virtualinvoke $r2.<java.lang.String: int length()>() >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.hideOpenSslPassword : i0 = $i1 + $i2
org.apache.ambari.server.utils.ShellCommandUtil.hideOpenSslPassword : i0 = $i1 + $i2 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.hideOpenSslPassword : goto [?= $i5 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String,int)>(" ", i0)]
org.apache.ambari.server.utils.ShellCommandUtil.hideOpenSslPassword : goto [?= $i5 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String,int)>(" ", i0)] >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.hideOpenSslPassword : $i5 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String,int)>(" ", i0)
org.apache.ambari.server.utils.ShellCommandUtil.hideOpenSslPassword : $i5 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String,int)>(" ", i0) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.hideOpenSslPassword : r1 = virtualinvoke r0.<java.lang.String: java.lang.CharSequence subSequence(int,int)>(i0, $i5)
org.apache.ambari.server.utils.ShellCommandUtil.hideOpenSslPassword : r1 = virtualinvoke r0.<java.lang.String: java.lang.CharSequence subSequence(int,int)>(i0, $i5) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.hideOpenSslPassword : $r4 = virtualinvoke r0.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(r1, "****")
org.apache.ambari.server.utils.ShellCommandUtil.hideOpenSslPassword : $r4 = virtualinvoke r0.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(r1, "****") >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.hideOpenSslPassword : return $r4
org.apache.ambari.server.utils.ShellCommandUtil.hideOpenSslPassword : return $r4 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.getOpenSslCommandResult : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3)
org.apache.ambari.server.utils.ShellCommandUtil.getOpenSslCommandResult : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.getOpenSslCommandResult : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was finished with exit code: ")
org.apache.ambari.server.utils.ShellCommandUtil.getOpenSslCommandResult : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was finished with exit code: ") >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.getOpenSslCommandResult : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)
org.apache.ambari.server.utils.ShellCommandUtil.getOpenSslCommandResult : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.getOpenSslCommandResult : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - ")
org.apache.ambari.server.utils.ShellCommandUtil.getOpenSslCommandResult : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - ") >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.getOpenSslCommandResult : $r8 = staticinvoke <org.apache.ambari.server.utils.ShellCommandUtil: java.lang.String getOpenSslExitCodeDescription(int)>(i0)
org.apache.ambari.server.utils.ShellCommandUtil.getOpenSslCommandResult : $r8 = staticinvoke <org.apache.ambari.server.utils.ShellCommandUtil: java.lang.String getOpenSslExitCodeDescription(int)>(i0) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.getOpenSslExitCodeDescription : tableswitch(i0) {     case 0:
org.apache.ambari.server.utils.ShellCommandUtil.getOpenSslExitCodeDescription : tableswitch(i0) {     case 0: >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.getOpenSslExitCodeDescription : return "the operation was completely successfully."
org.apache.ambari.server.utils.ShellCommandUtil.getOpenSslExitCodeDescription : return "the operation was completely successfully." >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.getOpenSslCommandResult : $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)
org.apache.ambari.server.utils.ShellCommandUtil.getOpenSslCommandResult : $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.getOpenSslCommandResult : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.utils.ShellCommandUtil.getOpenSslCommandResult : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.getOpenSslCommandResult : return $r10
org.apache.ambari.server.utils.ShellCommandUtil.getOpenSslCommandResult : return $r10 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.logOpenSslExitCode : interfaceinvoke $r1.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r2)
org.apache.ambari.server.utils.ShellCommandUtil.logOpenSslExitCode : interfaceinvoke $r1.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r2) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.logOpenSslExitCode : goto [?= return]
org.apache.ambari.server.utils.ShellCommandUtil.logOpenSslExitCode : goto [?= return] >>>>>>>> org.apache.ambari.server.security.CertificateManager.runCommand : i0 = virtualinvoke r8.<java.lang.Process: int exitValue()>()
org.apache.ambari.server.security.CertificateManager.runCommand : i0 = virtualinvoke r8.<java.lang.Process: int exitValue()>() >>>>>>>> org.apache.ambari.server.security.CertificateManager.runCommand : if r2 == null
org.apache.ambari.server.security.CertificateManager.runCommand : if r2 == null >>>>>>>> org.apache.ambari.server.security.CertificateManager.runCommand : virtualinvoke r2.<java.io.BufferedReader: void close()>()
org.apache.ambari.server.security.CertificateManager.runCommand : virtualinvoke r2.<java.io.BufferedReader: void close()>() >>>>>>>> org.apache.ambari.server.security.CertificateManager.runCommand : goto [?= return i0]
org.apache.ambari.server.security.CertificateManager.runCommand : goto [?= return i0] >>>>>>>> org.apache.ambari.server.security.CertificateManager.runCommand : return i0
org.apache.ambari.server.security.CertificateManager.runCommand : return i0 >>>>>>>> org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r32 = <org.apache.ambari.server.security.CertificateManager: java.lang.String GEN_SRVR_REQ>
org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r32 = <org.apache.ambari.server.security.CertificateManager: java.lang.String GEN_SRVR_REQ> >>>>>>>> org.apache.ambari.server.security.CertificateManager.generateServerCertificate : r33 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($r32, r9)
org.apache.ambari.server.security.CertificateManager.generateServerCertificate : r33 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($r32, r9) >>>>>>>> org.apache.ambari.server.security.CertificateManager.generateServerCertificate : virtualinvoke r0.<org.apache.ambari.server.security.CertificateManager: int runCommand(java.lang.String)>(r33)
org.apache.ambari.server.security.CertificateManager.generateServerCertificate : virtualinvoke r0.<org.apache.ambari.server.security.CertificateManager: int runCommand(java.lang.String)>(r33) >>>>>>>> org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r34 = <org.apache.ambari.server.security.CertificateManager: java.lang.String SIGN_SRVR_CRT>
org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r34 = <org.apache.ambari.server.security.CertificateManager: java.lang.String SIGN_SRVR_CRT> >>>>>>>> org.apache.ambari.server.security.CertificateManager.generateServerCertificate : r35 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($r34, r9)
org.apache.ambari.server.security.CertificateManager.generateServerCertificate : r35 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($r34, r9) >>>>>>>> org.apache.ambari.server.security.CertificateManager.generateServerCertificate : virtualinvoke r0.<org.apache.ambari.server.security.CertificateManager: int runCommand(java.lang.String)>(r35)
org.apache.ambari.server.security.CertificateManager.generateServerCertificate : virtualinvoke r0.<org.apache.ambari.server.security.CertificateManager: int runCommand(java.lang.String)>(r35) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.logOpenSslExitCode : $r3 = <org.apache.ambari.server.utils.ShellCommandUtil: org.apache.commons.logging.Log LOG>
org.apache.ambari.server.utils.ShellCommandUtil.logOpenSslExitCode : $r3 = <org.apache.ambari.server.utils.ShellCommandUtil: org.apache.commons.logging.Log LOG> >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.logOpenSslExitCode : $r4 = staticinvoke <org.apache.ambari.server.utils.ShellCommandUtil: java.lang.String getOpenSslCommandResult(java.lang.String,int)>(r0, i0)
org.apache.ambari.server.utils.ShellCommandUtil.logOpenSslExitCode : $r4 = staticinvoke <org.apache.ambari.server.utils.ShellCommandUtil: java.lang.String getOpenSslCommandResult(java.lang.String,int)>(r0, i0) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.hideOpenSslPassword : $z1 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>("-key ")
org.apache.ambari.server.utils.ShellCommandUtil.hideOpenSslPassword : $z1 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>("-key ") >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.hideOpenSslPassword : if $z1 == 0
org.apache.ambari.server.utils.ShellCommandUtil.hideOpenSslPassword : if $z1 == 0 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.hideOpenSslPassword : $i3 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("-key ")
org.apache.ambari.server.utils.ShellCommandUtil.hideOpenSslPassword : $i3 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("-key ") >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.hideOpenSslPassword : $r3 = "-key "
org.apache.ambari.server.utils.ShellCommandUtil.hideOpenSslPassword : $r3 = "-key " >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.hideOpenSslPassword : $i4 = virtualinvoke $r3.<java.lang.String: int length()>()
org.apache.ambari.server.utils.ShellCommandUtil.hideOpenSslPassword : $i4 = virtualinvoke $r3.<java.lang.String: int length()>() >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.hideOpenSslPassword : i0 = $i3 + $i4
org.apache.ambari.server.utils.ShellCommandUtil.hideOpenSslPassword : i0 = $i3 + $i4 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.getOpenSslExitCodeDescription : return "an error occurred parsing the command options."
org.apache.ambari.server.utils.ShellCommandUtil.getOpenSslExitCodeDescription : return "an error occurred parsing the command options." >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.logOpenSslExitCode : interfaceinvoke $r3.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r4)
org.apache.ambari.server.utils.ShellCommandUtil.logOpenSslExitCode : interfaceinvoke $r3.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r4) >>>>>>>> org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r36 = <org.apache.ambari.server.security.CertificateManager: java.lang.String EXPRT_KSTR>
org.apache.ambari.server.security.CertificateManager.generateServerCertificate : $r36 = <org.apache.ambari.server.security.CertificateManager: java.lang.String EXPRT_KSTR> >>>>>>>> org.apache.ambari.server.security.CertificateManager.generateServerCertificate : r37 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($r36, r9)
org.apache.ambari.server.security.CertificateManager.generateServerCertificate : r37 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($r36, r9) >>>>>>>> org.apache.ambari.server.security.CertificateManager.generateServerCertificate : virtualinvoke r0.<org.apache.ambari.server.security.CertificateManager: int runCommand(java.lang.String)>(r37)
org.apache.ambari.server.security.CertificateManager.generateServerCertificate : virtualinvoke r0.<org.apache.ambari.server.security.CertificateManager: int runCommand(java.lang.String)>(r37) >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r4 = new org.apache.ambari.server.security.SignCertResponse
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r4 = new org.apache.ambari.server.security.SignCertResponse >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : specialinvoke $r4.<org.apache.ambari.server.security.SignCertResponse: void <init>()>()
org.apache.ambari.server.security.CertificateManager.signAgentCrt : specialinvoke $r4.<org.apache.ambari.server.security.SignCertResponse: void <init>()>() >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : r5 = $r4
org.apache.ambari.server.security.CertificateManager.signAgentCrt : r5 = $r4 >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r19 = <org.apache.ambari.server.security.CertificateManager: org.slf4j.Logger LOG>
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r19 = <org.apache.ambari.server.security.CertificateManager: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : interfaceinvoke $r19.<org.slf4j.Logger: void info(java.lang.String)>("Signing agent certificate")
org.apache.ambari.server.security.CertificateManager.signAgentCrt : interfaceinvoke $r19.<org.slf4j.Logger: void info(java.lang.String)>("Signing agent certificate") >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : r20 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String trim(java.lang.String)>(r1)
org.apache.ambari.server.security.CertificateManager.signAgentCrt : r20 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String trim(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r20)
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r20) >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : if $z0 == 0
org.apache.ambari.server.security.CertificateManager.signAgentCrt : if $z0 == 0 >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r22 = r0.<org.apache.ambari.server.security.CertificateManager: org.apache.ambari.server.configuration.Configuration configs>
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r22 = r0.<org.apache.ambari.server.security.CertificateManager: org.apache.ambari.server.configuration.Configuration configs> >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $z1 = virtualinvoke $r22.<org.apache.ambari.server.configuration.Configuration: boolean validateAgentHostnames()>()
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $z1 = virtualinvoke $r22.<org.apache.ambari.server.configuration.Configuration: boolean validateAgentHostnames()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.validateAgentHostnames : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SRVR_AGENT_HOSTNAME_VALIDATE>
org.apache.ambari.server.configuration.Configuration.validateAgentHostnames : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SRVR_AGENT_HOSTNAME_VALIDATE> >>>>>>>> org.apache.ambari.server.configuration.Configuration.validateAgentHostnames : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1)
org.apache.ambari.server.configuration.Configuration.validateAgentHostnames : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1) >>>>>>>> org.apache.ambari.server.configuration.Configuration.validateAgentHostnames : $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r2)
org.apache.ambari.server.configuration.Configuration.validateAgentHostnames : $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r2) >>>>>>>> org.apache.ambari.server.configuration.Configuration.validateAgentHostnames : return $z0
org.apache.ambari.server.configuration.Configuration.validateAgentHostnames : return $z0 >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : if $z1 == 0
org.apache.ambari.server.security.CertificateManager.signAgentCrt : if $z1 == 0 >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r23 = <org.apache.ambari.server.security.CertificateManager: org.slf4j.Logger LOG>
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r23 = <org.apache.ambari.server.security.CertificateManager: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : interfaceinvoke $r23.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Validating agent hostname: {}", r20)
org.apache.ambari.server.security.CertificateManager.signAgentCrt : interfaceinvoke $r23.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Validating agent hostname: {}", r20) >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $z2 = staticinvoke <org.apache.ambari.server.utils.HostUtils: boolean isValidHostname(java.lang.String)>(r20)
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $z2 = staticinvoke <org.apache.ambari.server.utils.HostUtils: boolean isValidHostname(java.lang.String)>(r20) >>>>>>>> org.apache.ambari.server.utils.HostUtils.isValidHostname : if r0 == null
org.apache.ambari.server.utils.HostUtils.isValidHostname : if r0 == null >>>>>>>> org.apache.ambari.server.utils.HostUtils.isValidHostname : $r1 = <org.apache.ambari.server.utils.HostUtils: java.util.regex.Pattern REGEX_VALID_HOSTNAME>
org.apache.ambari.server.utils.HostUtils.isValidHostname : $r1 = <org.apache.ambari.server.utils.HostUtils: java.util.regex.Pattern REGEX_VALID_HOSTNAME> >>>>>>>> org.apache.ambari.server.utils.HostUtils.isValidHostname : $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0)
org.apache.ambari.server.utils.HostUtils.isValidHostname : $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0) >>>>>>>> org.apache.ambari.server.utils.HostUtils.isValidHostname : $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean matches()>()
org.apache.ambari.server.utils.HostUtils.isValidHostname : $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean matches()>() >>>>>>>> org.apache.ambari.server.utils.HostUtils.isValidHostname : if $z0 == 0
org.apache.ambari.server.utils.HostUtils.isValidHostname : if $z0 == 0 >>>>>>>> org.apache.ambari.server.utils.HostUtils.isValidHostname : $z1 = 1
org.apache.ambari.server.utils.HostUtils.isValidHostname : $z1 = 1 >>>>>>>> org.apache.ambari.server.utils.HostUtils.isValidHostname : goto [?= return $z1]
org.apache.ambari.server.utils.HostUtils.isValidHostname : goto [?= return $z1] >>>>>>>> org.apache.ambari.server.utils.HostUtils.isValidHostname : return $z1
org.apache.ambari.server.utils.HostUtils.isValidHostname : return $z1 >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : if $z2 != 0
org.apache.ambari.server.security.CertificateManager.signAgentCrt : if $z2 != 0 >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r26 = <org.apache.ambari.server.security.CertificateManager: org.slf4j.Logger LOG>
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r26 = <org.apache.ambari.server.security.CertificateManager: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : interfaceinvoke $r26.<org.slf4j.Logger: void info(java.lang.String)>("Verifying passphrase")
org.apache.ambari.server.security.CertificateManager.signAgentCrt : interfaceinvoke $r26.<org.slf4j.Logger: void info(java.lang.String)>("Verifying passphrase") >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r27 = r0.<org.apache.ambari.server.security.CertificateManager: org.apache.ambari.server.configuration.Configuration configs>
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r27 = r0.<org.apache.ambari.server.security.CertificateManager: org.apache.ambari.server.configuration.Configuration configs> >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r28 = virtualinvoke $r27.<org.apache.ambari.server.configuration.Configuration: java.util.Map getConfigsMap()>()
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r28 = virtualinvoke $r27.<org.apache.ambari.server.configuration.Configuration: java.util.Map getConfigsMap()>() >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r29 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty PASSPHRASE>
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r29 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty PASSPHRASE> >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r30 = virtualinvoke $r29.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r30 = virtualinvoke $r29.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r31 = interfaceinvoke $r28.<java.util.Map: java.lang.Object get(java.lang.Object)>($r30)
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r31 = interfaceinvoke $r28.<java.util.Map: java.lang.Object get(java.lang.Object)>($r30) >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r32 = (java.lang.String) $r31
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r32 = (java.lang.String) $r31 >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : r6 = virtualinvoke $r32.<java.lang.String: java.lang.String trim()>()
org.apache.ambari.server.security.CertificateManager.signAgentCrt : r6 = virtualinvoke $r32.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r33 = virtualinvoke r3.<java.lang.String: java.lang.String trim()>()
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r33 = virtualinvoke r3.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $z3 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>($r33)
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $z3 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>($r33) >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : if $z3 != 0
org.apache.ambari.server.security.CertificateManager.signAgentCrt : if $z3 != 0 >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r35 = r0.<org.apache.ambari.server.security.CertificateManager: org.apache.ambari.server.configuration.Configuration configs>
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r35 = r0.<org.apache.ambari.server.security.CertificateManager: org.apache.ambari.server.configuration.Configuration configs> >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : r7 = virtualinvoke $r35.<org.apache.ambari.server.configuration.Configuration: java.util.Map getConfigsMap()>()
org.apache.ambari.server.security.CertificateManager.signAgentCrt : r7 = virtualinvoke $r35.<org.apache.ambari.server.configuration.Configuration: java.util.Map getConfigsMap()>() >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r36 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SRVR_KSTR_DIR>
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r36 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SRVR_KSTR_DIR> >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r37 = virtualinvoke $r36.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r37 = virtualinvoke $r36.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r38 = interfaceinvoke r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r37)
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r38 = interfaceinvoke r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r37) >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : r8 = (java.lang.String) $r38
org.apache.ambari.server.security.CertificateManager.signAgentCrt : r8 = (java.lang.String) $r38 >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r39 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SRVR_CRT_PASS>
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r39 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SRVR_CRT_PASS> >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r40 = virtualinvoke $r39.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r40 = virtualinvoke $r39.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r41 = interfaceinvoke r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r40)
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r41 = interfaceinvoke r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r40) >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : r9 = (java.lang.String) $r41
org.apache.ambari.server.security.CertificateManager.signAgentCrt : r9 = (java.lang.String) $r41 >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r42 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SRVR_CRT_NAME>
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r42 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SRVR_CRT_NAME> >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r43 = virtualinvoke $r42.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r43 = virtualinvoke $r42.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r44 = interfaceinvoke r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r43)
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r44 = interfaceinvoke r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r43) >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : r10 = (java.lang.String) $r44
org.apache.ambari.server.security.CertificateManager.signAgentCrt : r10 = (java.lang.String) $r44 >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r45 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SRVR_KEY_NAME>
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r45 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SRVR_KEY_NAME> >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r46 = virtualinvoke $r45.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r46 = virtualinvoke $r45.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r47 = interfaceinvoke r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r46)
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r47 = interfaceinvoke r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r46) >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : r11 = (java.lang.String) $r47
org.apache.ambari.server.security.CertificateManager.signAgentCrt : r11 = (java.lang.String) $r47 >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r48 = new java.lang.StringBuilder
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r48 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : specialinvoke $r48.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.security.CertificateManager.signAgentCrt : specialinvoke $r48.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20)
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20) >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".csr")
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".csr") >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : r12 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.security.CertificateManager.signAgentCrt : r12 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r51 = new java.lang.StringBuilder
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r51 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : specialinvoke $r51.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.security.CertificateManager.signAgentCrt : specialinvoke $r51.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20)
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20) >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".crt")
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".crt") >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : r13 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.security.CertificateManager.signAgentCrt : r13 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r54 = newarray (java.lang.Object)[6]
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r54 = newarray (java.lang.Object)[6] >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r54[0] = r8
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r54[0] = r8 >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r54[1] = r12
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r54[1] = r12 >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r54[2] = r13
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r54[2] = r13 >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r54[3] = r9
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r54[3] = r9 >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r54[4] = r11
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r54[4] = r11 >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r54[5] = r10
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r54[5] = r10 >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : r14 = $r54
org.apache.ambari.server.security.CertificateManager.signAgentCrt : r14 = $r54 >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r55 = new java.io.File
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r55 = new java.io.File >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r56 = new java.lang.StringBuilder
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r56 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : specialinvoke $r56.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.security.CertificateManager.signAgentCrt : specialinvoke $r56.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8)
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8) >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r58 = <java.io.File: java.lang.String separator>
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r58 = <java.io.File: java.lang.String separator> >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r59 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r58)
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r59 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r58) >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13)
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13) >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : specialinvoke $r55.<java.io.File: void <init>(java.lang.String)>($r61)
org.apache.ambari.server.security.CertificateManager.signAgentCrt : specialinvoke $r55.<java.io.File: void <init>(java.lang.String)>($r61) >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : r15 = $r55
org.apache.ambari.server.security.CertificateManager.signAgentCrt : r15 = $r55 >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $z4 = virtualinvoke r15.<java.io.File: boolean exists()>()
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $z4 = virtualinvoke r15.<java.io.File: boolean exists()>() >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : if $z4 == 0
org.apache.ambari.server.security.CertificateManager.signAgentCrt : if $z4 == 0 >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r70 = new java.io.File
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r70 = new java.io.File >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r71 = new java.lang.StringBuilder
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r71 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : specialinvoke $r71.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.security.CertificateManager.signAgentCrt : specialinvoke $r71.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8)
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8) >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r73 = <java.io.File: java.lang.String separator>
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r73 = <java.io.File: java.lang.String separator> >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r74 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r73)
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r74 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r73) >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12)
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12) >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r76 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r76 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : specialinvoke $r70.<java.io.File: void <init>(java.lang.String)>($r76)
org.apache.ambari.server.security.CertificateManager.signAgentCrt : specialinvoke $r70.<java.io.File: void <init>(java.lang.String)>($r76) >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : r77 = $r70
org.apache.ambari.server.security.CertificateManager.signAgentCrt : r77 = $r70 >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String)>(r77, r2)
org.apache.ambari.server.security.CertificateManager.signAgentCrt : staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String)>(r77, r2) >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : goto [?= $r80 = <org.apache.ambari.server.security.CertificateManager: java.lang.String SIGN_AGENT_CRT>]
org.apache.ambari.server.security.CertificateManager.signAgentCrt : goto [?= $r80 = <org.apache.ambari.server.security.CertificateManager: java.lang.String SIGN_AGENT_CRT>] >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r80 = <org.apache.ambari.server.security.CertificateManager: java.lang.String SIGN_AGENT_CRT>
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r80 = <org.apache.ambari.server.security.CertificateManager: java.lang.String SIGN_AGENT_CRT> >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : r81 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($r80, r14)
org.apache.ambari.server.security.CertificateManager.signAgentCrt : r81 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>($r80, r14) >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r82 = <org.apache.ambari.server.security.CertificateManager: org.slf4j.Logger LOG>
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r82 = <org.apache.ambari.server.security.CertificateManager: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r83 = staticinvoke <org.apache.ambari.server.utils.ShellCommandUtil: java.lang.String hideOpenSslPassword(java.lang.String)>(r81)
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r83 = staticinvoke <org.apache.ambari.server.utils.ShellCommandUtil: java.lang.String hideOpenSslPassword(java.lang.String)>(r81) >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : interfaceinvoke $r82.<org.slf4j.Logger: void debug(java.lang.String)>($r83)
org.apache.ambari.server.security.CertificateManager.signAgentCrt : interfaceinvoke $r82.<org.slf4j.Logger: void debug(java.lang.String)>($r83) >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : i1 = virtualinvoke r0.<org.apache.ambari.server.security.CertificateManager: int runCommand(java.lang.String)>(r81)
org.apache.ambari.server.security.CertificateManager.signAgentCrt : i1 = virtualinvoke r0.<org.apache.ambari.server.security.CertificateManager: int runCommand(java.lang.String)>(r81) >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : if i1 == 0
org.apache.ambari.server.security.CertificateManager.signAgentCrt : if i1 == 0 >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : virtualinvoke r5.<org.apache.ambari.server.security.SignCertResponse: void setResult(java.lang.String)>("ERROR")
org.apache.ambari.server.security.CertificateManager.signAgentCrt : virtualinvoke r5.<org.apache.ambari.server.security.SignCertResponse: void setResult(java.lang.String)>("ERROR") >>>>>>>> org.apache.ambari.server.security.SignCertResponse.setResult : r0.<org.apache.ambari.server.security.SignCertResponse: java.lang.String result> = r1
org.apache.ambari.server.security.SignCertResponse.setResult : r0.<org.apache.ambari.server.security.SignCertResponse: java.lang.String result> = r1 >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r84 = staticinvoke <org.apache.ambari.server.utils.ShellCommandUtil: java.lang.String getOpenSslCommandResult(java.lang.String,int)>(r81, i1)
org.apache.ambari.server.security.CertificateManager.signAgentCrt : $r84 = staticinvoke <org.apache.ambari.server.utils.ShellCommandUtil: java.lang.String getOpenSslCommandResult(java.lang.String,int)>(r81, i1) >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : virtualinvoke r5.<org.apache.ambari.server.security.SignCertResponse: void setMessage(java.lang.String)>($r84)
org.apache.ambari.server.security.CertificateManager.signAgentCrt : virtualinvoke r5.<org.apache.ambari.server.security.SignCertResponse: void setMessage(java.lang.String)>($r84) >>>>>>>> org.apache.ambari.server.security.SignCertResponse.setMessage : r0.<org.apache.ambari.server.security.SignCertResponse: java.lang.String message> = r1
org.apache.ambari.server.security.SignCertResponse.setMessage : r0.<org.apache.ambari.server.security.SignCertResponse: java.lang.String message> = r1 >>>>>>>> org.apache.ambari.server.security.CertificateManager.signAgentCrt : return r5
org.apache.ambari.server.security.CertificateManager.signAgentCrt : return r5 >>>>>>>> org.apache.ambari.server.security.SignCertResponse.getMessage : $r1 = r0.<org.apache.ambari.server.security.SignCertResponse: java.lang.String message>
org.apache.ambari.server.security.SignCertResponse.getMessage : $r1 = r0.<org.apache.ambari.server.security.SignCertResponse: java.lang.String message> >>>>>>>> org.apache.ambari.server.security.SignCertResponse.getMessage : return $r1
org.apache.ambari.server.security.SignCertResponse.getMessage : return $r1 >>>>>>>> org.apache.ambari.server.security.SignCertResponse.getResult : $r1 = r0.<org.apache.ambari.server.security.SignCertResponse: java.lang.String result>
org.apache.ambari.server.security.SignCertResponse.getResult : $r1 = r0.<org.apache.ambari.server.security.SignCertResponse: java.lang.String result> >>>>>>>> org.apache.ambari.server.security.SignCertResponse.getResult : return $r1
