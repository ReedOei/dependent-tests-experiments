org.apache.ambari.server.controller.PrereqCheckRequest.setPrerequisiteCheckConfig : r0.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.state.stack.UpgradePack$PrerequisiteCheckConfig m_prereqCheckConfig> = r1 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : if r2 == null
org.apache.ambari.server.state.StackId.parseStackIdHelper : if r2 == null >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $z0 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>()
org.apache.ambari.server.state.StackId.parseStackIdHelper : $z0 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : if $z0 == 0
org.apache.ambari.server.state.StackId.parseStackIdHelper : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : i0 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(45)
org.apache.ambari.server.state.StackId.parseStackIdHelper : i0 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(45) >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : if i0 == -1
org.apache.ambari.server.state.StackId.parseStackIdHelper : if i0 == -1 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $i1 = virtualinvoke r2.<java.lang.String: int length()>()
org.apache.ambari.server.state.StackId.parseStackIdHelper : $i1 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $i2 = i0 + 1
org.apache.ambari.server.state.StackId.parseStackIdHelper : $i2 = i0 + 1 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : if $i1 > $i2
org.apache.ambari.server.state.StackId.parseStackIdHelper : if $i1 > $i2 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $r8 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0)
org.apache.ambari.server.state.StackId.parseStackIdHelper : $r8 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0) >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : r1.<org.apache.ambari.server.state.StackId: java.lang.String stackName> = $r8
org.apache.ambari.server.state.StackId.parseStackIdHelper : r1.<org.apache.ambari.server.state.StackId: java.lang.String stackName> = $r8 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $i3 = i0 + 1
org.apache.ambari.server.state.StackId.parseStackIdHelper : $i3 = i0 + 1 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $r9 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i3)
org.apache.ambari.server.state.StackId.parseStackIdHelper : $r9 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i3) >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : r1.<org.apache.ambari.server.state.StackId: java.lang.String stackVersion> = $r9
org.apache.ambari.server.state.StackId.parseStackIdHelper : r1.<org.apache.ambari.server.state.StackId: java.lang.String stackVersion> = $r9 >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.setSourceStackId : r0.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.state.StackId m_sourceStackId> = r1
org.apache.ambari.server.controller.PrereqCheckRequest.setSourceStackId : r0.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.state.StackId m_sourceStackId> = r1 >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.setTargetStackId : r0.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.state.StackId m_targetStackId> = r1
org.apache.ambari.server.controller.PrereqCheckRequest.setTargetStackId : r0.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.state.StackId m_targetStackId> = r1 >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $r3 = new java.util.ArrayList
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $r3 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : specialinvoke $r3.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : specialinvoke $r3.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : r4 = $r3
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : r4 = $r3 >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : r5 = virtualinvoke r0.<org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck: java.lang.String getProperty(org.apache.ambari.server.controller.PrereqCheckRequest,java.lang.String,java.lang.String)>(r2, "hive-site", "hive.server2.support.dynamic.service.discovery")
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : r5 = virtualinvoke r0.<org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck: java.lang.String getProperty(org.apache.ambari.server.controller.PrereqCheckRequest,java.lang.String,java.lang.String)>(r2, "hive-site", "hive.server2.support.dynamic.service.discovery") >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : r4 = virtualinvoke r1.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getClusterName()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : r4 = virtualinvoke r1.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getClusterName()>() >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String m_clusterName>
org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String m_clusterName> >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : return $r1
org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : return $r1 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : $r10 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: com.google.inject.Provider clustersProvider>
org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : $r10 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: com.google.inject.Provider clustersProvider> >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : $r11 = interfaceinvoke $r10.<com.google.inject.Provider: java.lang.Object get()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : $r11 = interfaceinvoke $r10.<com.google.inject.Provider: java.lang.Object get()>() >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheckTest$1.get : $r1 = virtualinvoke r0.<org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheckTest$1: org.apache.ambari.server.state.Clusters get()>()
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheckTest$1.get : $r1 = virtualinvoke r0.<org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheckTest$1: org.apache.ambari.server.state.Clusters get()>() >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheckTest$1.get : $r1 = r0.<org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheckTest$1: org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheckTest this$0>
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheckTest$1.get : $r1 = r0.<org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheckTest$1: org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheckTest this$0> >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheckTest$1.get : $r2 = staticinvoke <org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheckTest: org.apache.ambari.server.state.Clusters access$000(org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheckTest)>($r1)
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheckTest$1.get : $r2 = staticinvoke <org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheckTest: org.apache.ambari.server.state.Clusters access$000(org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheckTest)>($r1) >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheckTest.access$000 : $r1 = r0.<org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheckTest: org.apache.ambari.server.state.Clusters m_clusters>
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheckTest.access$000 : $r1 = r0.<org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheckTest: org.apache.ambari.server.state.Clusters m_clusters> >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheckTest.access$000 : return $r1
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheckTest.access$000 : return $r1 >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheckTest$1.get : return $r2
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheckTest$1.get : return $r2 >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheckTest$1.get : return $r1
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheckTest$1.get : return $r1 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : $r12 = (org.apache.ambari.server.state.Clusters) $r11
org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : $r12 = (org.apache.ambari.server.state.Clusters) $r11 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : r5 = interfaceinvoke $r12.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>(r4)
org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : r5 = interfaceinvoke $r12.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>(r4) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : r6 = interfaceinvoke r5.<org.apache.ambari.server.state.Cluster: java.util.Map getDesiredConfigs()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : r6 = interfaceinvoke r5.<org.apache.ambari.server.state.Cluster: java.util.Map getDesiredConfigs()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : $r13 = interfaceinvoke r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2)
org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : $r13 = interfaceinvoke r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : r7 = (org.apache.ambari.server.state.DesiredConfig) $r13
org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : r7 = (org.apache.ambari.server.state.DesiredConfig) $r13 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : if null != r7
org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : if null != r7 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : $r14 = virtualinvoke r7.<org.apache.ambari.server.state.DesiredConfig: java.lang.String getTag()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : $r14 = virtualinvoke r7.<org.apache.ambari.server.state.DesiredConfig: java.lang.String getTag()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : r8 = interfaceinvoke r5.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.Config getConfig(java.lang.String,java.lang.String)>(r2, $r14)
org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : r8 = interfaceinvoke r5.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.Config getConfig(java.lang.String,java.lang.String)>(r2, $r14) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : r9 = interfaceinvoke r8.<org.apache.ambari.server.state.Config: java.util.Map getProperties()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : r9 = interfaceinvoke r8.<org.apache.ambari.server.state.Config: java.util.Map getProperties()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : $r15 = interfaceinvoke r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3)
org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : $r15 = interfaceinvoke r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : $r16 = (java.lang.String) $r15
org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : $r16 = (java.lang.String) $r15 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : return $r16
org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : return $r16 >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : r6 = virtualinvoke r0.<org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck: java.lang.String getProperty(org.apache.ambari.server.controller.PrereqCheckRequest,java.lang.String,java.lang.String)>(r2, "hive-site", "hive.zookeeper.quorum")
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : r6 = virtualinvoke r0.<org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck: java.lang.String getProperty(org.apache.ambari.server.controller.PrereqCheckRequest,java.lang.String,java.lang.String)>(r2, "hive-site", "hive.zookeeper.quorum") >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : r7 = virtualinvoke r0.<org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck: java.lang.String getProperty(org.apache.ambari.server.controller.PrereqCheckRequest,java.lang.String,java.lang.String)>(r2, "hive-site", "hive.server2.zookeeper.namespace")
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : r7 = virtualinvoke r0.<org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck: java.lang.String getProperty(org.apache.ambari.server.controller.PrereqCheckRequest,java.lang.String,java.lang.String)>(r2, "hive-site", "hive.server2.zookeeper.namespace") >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : if null == r5
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : if null == r5 >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $r15 = virtualinvoke r0.<org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck: java.lang.String getFailReason(java.lang.String,org.apache.ambari.server.state.stack.PrerequisiteCheck,org.apache.ambari.server.controller.PrereqCheckRequest)>("hive.dynamic-service.discovery.enabled.key", r1, r2)
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $r15 = virtualinvoke r0.<org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck: java.lang.String getFailReason(java.lang.String,org.apache.ambari.server.state.stack.PrerequisiteCheck,org.apache.ambari.server.controller.PrereqCheckRequest)>("hive.dynamic-service.discovery.enabled.key", r1, r2) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $r13 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: org.apache.ambari.server.checks.CheckDescription m_description>
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $r13 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: org.apache.ambari.server.checks.CheckDescription m_description> >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : r4 = virtualinvoke $r13.<org.apache.ambari.server.checks.CheckDescription: java.lang.String getFail(java.lang.String)>(r1)
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : r4 = virtualinvoke $r13.<org.apache.ambari.server.checks.CheckDescription: java.lang.String getFail(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : $r2 = r0.<org.apache.ambari.server.checks.CheckDescription: java.util.Map m_fails>
org.apache.ambari.server.checks.CheckDescription.getFail : $r2 = r0.<org.apache.ambari.server.checks.CheckDescription: java.util.Map m_fails> >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1)
org.apache.ambari.server.checks.CheckDescription.getFail : $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : if $z0 == 0
org.apache.ambari.server.checks.CheckDescription.getFail : if $z0 == 0 >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : $r3 = r0.<org.apache.ambari.server.checks.CheckDescription: java.util.Map m_fails>
org.apache.ambari.server.checks.CheckDescription.getFail : $r3 = r0.<org.apache.ambari.server.checks.CheckDescription: java.util.Map m_fails> >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.ambari.server.checks.CheckDescription.getFail : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : $r5 = (java.lang.String) $r4
org.apache.ambari.server.checks.CheckDescription.getFail : $r5 = (java.lang.String) $r4 >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : goto [?= return $r5]
org.apache.ambari.server.checks.CheckDescription.getFail : goto [?= return $r5] >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : return $r5
org.apache.ambari.server.checks.CheckDescription.getFail : return $r5 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $z0 = virtualinvoke r4.<java.lang.String: boolean contains(java.lang.CharSequence)>("{{version}}")
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $z0 = virtualinvoke r4.<java.lang.String: boolean contains(java.lang.CharSequence)>("{{version}}") >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : if $z0 == 0
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : if $z0 == 0 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $z1 = virtualinvoke r4.<java.lang.String: boolean contains(java.lang.CharSequence)>("{{fails}}")
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $z1 = virtualinvoke r4.<java.lang.String: boolean contains(java.lang.CharSequence)>("{{fails}}") >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : if $z1 == 0
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : if $z1 == 0 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : return r4
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : return r4 >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r15)
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r15) >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $z2 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isBlank(java.lang.String)>(r6)
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $z2 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isBlank(java.lang.String)>(r6) >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : if $z2 == 0
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : if $z2 == 0 >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $r16 = virtualinvoke r0.<org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck: java.lang.String getFailReason(java.lang.String,org.apache.ambari.server.state.stack.PrerequisiteCheck,org.apache.ambari.server.controller.PrereqCheckRequest)>("hive.dynamic-service.discovery.zk-quorum.key", r1, r2)
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $r16 = virtualinvoke r0.<org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck: java.lang.String getFailReason(java.lang.String,org.apache.ambari.server.state.stack.PrerequisiteCheck,org.apache.ambari.server.controller.PrereqCheckRequest)>("hive.dynamic-service.discovery.zk-quorum.key", r1, r2) >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r16)
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r16) >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $z4 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isBlank(java.lang.String)>(r7)
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $z4 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isBlank(java.lang.String)>(r7) >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : if $z4 == 0
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : if $z4 == 0 >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $r17 = virtualinvoke r0.<org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck: java.lang.String getFailReason(java.lang.String,org.apache.ambari.server.state.stack.PrerequisiteCheck,org.apache.ambari.server.controller.PrereqCheckRequest)>("hive.dynamic-service.zk-namespace.key", r1, r2)
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $r17 = virtualinvoke r0.<org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck: java.lang.String getFailReason(java.lang.String,org.apache.ambari.server.state.stack.PrerequisiteCheck,org.apache.ambari.server.controller.PrereqCheckRequest)>("hive.dynamic-service.zk-namespace.key", r1, r2) >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r17)
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r17) >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : r8 = null
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : r8 = null >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : r9 = virtualinvoke r2.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.state.stack.UpgradePack$PrerequisiteCheckConfig getPrerequisiteCheckConfig()>()
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : r9 = virtualinvoke r2.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.state.stack.UpgradePack$PrerequisiteCheckConfig getPrerequisiteCheckConfig()>() >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getPrerequisiteCheckConfig : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.state.stack.UpgradePack$PrerequisiteCheckConfig m_prereqCheckConfig>
org.apache.ambari.server.controller.PrereqCheckRequest.getPrerequisiteCheckConfig : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.state.stack.UpgradePack$PrerequisiteCheckConfig m_prereqCheckConfig> >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getPrerequisiteCheckConfig : return $r1
org.apache.ambari.server.controller.PrereqCheckRequest.getPrerequisiteCheckConfig : return $r1 >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : r10 = null
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : r10 = null >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : if r9 == null
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : if r9 == null >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $r18 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>()
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $r18 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $r19 = virtualinvoke $r18.<java.lang.Class: java.lang.String getName()>()
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $r19 = virtualinvoke $r18.<java.lang.Class: java.lang.String getName()>() >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : r10 = virtualinvoke r9.<org.apache.ambari.server.state.stack.UpgradePack$PrerequisiteCheckConfig: java.util.Map getCheckProperties(java.lang.String)>($r19)
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : r10 = virtualinvoke r9.<org.apache.ambari.server.state.stack.UpgradePack$PrerequisiteCheckConfig: java.util.Map getCheckProperties(java.lang.String)>($r19) >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : if r10 == null
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : if r10 == null >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $z6 = interfaceinvoke r10.<java.util.Map: boolean containsKey(java.lang.Object)>("min-failure-stack-version")
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $z6 = interfaceinvoke r10.<java.util.Map: boolean containsKey(java.lang.Object)>("min-failure-stack-version") >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : if $z6 == 0
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : if $z6 == 0 >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $r20 = interfaceinvoke r10.<java.util.Map: java.lang.Object get(java.lang.Object)>("min-failure-stack-version")
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $r20 = interfaceinvoke r10.<java.util.Map: java.lang.Object get(java.lang.Object)>("min-failure-stack-version") >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : r8 = (java.lang.String) $r20
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : r8 = (java.lang.String) $r20 >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $z7 = interfaceinvoke r4.<java.util.List: boolean isEmpty()>()
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $z7 = interfaceinvoke r4.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : if $z7 != 0
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : if $z7 != 0 >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $r21 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String join(java.util.Collection,java.lang.String)>(r4, " ")
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $r21 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String join(java.util.Collection,java.lang.String)>(r4, " ") >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void setFailReason(java.lang.String)>($r21)
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void setFailReason(java.lang.String)>($r21) >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.setFailReason : r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.lang.String m_failReason> = r1
org.apache.ambari.server.state.stack.PrerequisiteCheck.setFailReason : r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.lang.String m_failReason> = r1 >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $r22 = virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet getFailedOn()>()
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $r22 = virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet getFailedOn()>() >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.getFailedOn : $r1 = r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet m_failedOn>
org.apache.ambari.server.state.stack.PrerequisiteCheck.getFailedOn : $r1 = r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet m_failedOn> >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.getFailedOn : return $r1
org.apache.ambari.server.state.stack.PrerequisiteCheck.getFailedOn : return $r1 >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : virtualinvoke $r22.<java.util.LinkedHashSet: boolean add(java.lang.Object)>("HIVE")
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : virtualinvoke $r22.<java.util.LinkedHashSet: boolean add(java.lang.Object)>("HIVE") >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : r11 = <org.apache.ambari.server.state.stack.PrereqCheckStatus: org.apache.ambari.server.state.stack.PrereqCheckStatus FAIL>
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : r11 = <org.apache.ambari.server.state.stack.PrereqCheckStatus: org.apache.ambari.server.state.stack.PrereqCheckStatus FAIL> >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : if r8 == null
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : if r8 == null >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $z9 = virtualinvoke r8.<java.lang.String: boolean isEmpty()>()
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $z9 = virtualinvoke r8.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : if $z9 != 0
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : if $z9 != 0 >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : r12 = virtualinvoke r8.<java.lang.String: java.lang.String[] split(java.lang.String)>("-")
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : r12 = virtualinvoke r8.<java.lang.String: java.lang.String[] split(java.lang.String)>("-") >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $i0 = lengthof r12
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $i0 = lengthof r12 >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : if $i0 != 2
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : if $i0 != 2 >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : r13 = r12[0]
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : r13 = r12[0] >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : r14 = r12[1]
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : r14 = r12[1] >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $r23 = virtualinvoke r2.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.state.StackId getSourceStackId()>()
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $r23 = virtualinvoke r2.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.state.StackId getSourceStackId()>() >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getSourceStackId : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.state.StackId m_sourceStackId>
org.apache.ambari.server.controller.PrereqCheckRequest.getSourceStackId : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.state.StackId m_sourceStackId> >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getSourceStackId : return $r1
org.apache.ambari.server.controller.PrereqCheckRequest.getSourceStackId : return $r1 >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $r24 = virtualinvoke $r23.<org.apache.ambari.server.state.StackId: java.lang.String getStackName()>()
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $r24 = virtualinvoke $r23.<org.apache.ambari.server.state.StackId: java.lang.String getStackName()>() >>>>>>>> org.apache.ambari.server.state.StackId.getStackName : $r1 = r0.<org.apache.ambari.server.state.StackId: java.lang.String stackName>
org.apache.ambari.server.state.StackId.getStackName : $r1 = r0.<org.apache.ambari.server.state.StackId: java.lang.String stackName> >>>>>>>> org.apache.ambari.server.state.StackId.getStackName : return $r1
org.apache.ambari.server.state.StackId.getStackName : return $r1 >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $z10 = virtualinvoke r13.<java.lang.String: boolean equals(java.lang.Object)>($r24)
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $z10 = virtualinvoke r13.<java.lang.String: boolean equals(java.lang.Object)>($r24) >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : if $z10 == 0
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : if $z10 == 0 >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $r25 = virtualinvoke r2.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.state.StackId getSourceStackId()>()
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $r25 = virtualinvoke r2.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.state.StackId getSourceStackId()>() >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $r26 = virtualinvoke $r25.<org.apache.ambari.server.state.StackId: java.lang.String getStackVersion()>()
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $r26 = virtualinvoke $r25.<org.apache.ambari.server.state.StackId: java.lang.String getStackVersion()>() >>>>>>>> org.apache.ambari.server.state.StackId.getStackVersion : $r1 = r0.<org.apache.ambari.server.state.StackId: java.lang.String stackVersion>
org.apache.ambari.server.state.StackId.getStackVersion : $r1 = r0.<org.apache.ambari.server.state.StackId: java.lang.String stackVersion> >>>>>>>> org.apache.ambari.server.state.StackId.getStackVersion : return $r1
org.apache.ambari.server.state.StackId.getStackVersion : return $r1 >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $i1 = staticinvoke <org.apache.ambari.server.utils.VersionUtils: int compareVersions(java.lang.String,java.lang.String)>($r26, r14)
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $i1 = staticinvoke <org.apache.ambari.server.utils.VersionUtils: int compareVersions(java.lang.String,java.lang.String)>($r26, r14) >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $i0 = staticinvoke <org.apache.ambari.server.utils.VersionUtils: int compareVersions(java.lang.String,java.lang.String,int)>(r0, r1, 0)
org.apache.ambari.server.utils.VersionUtils.compareVersions : $i0 = staticinvoke <org.apache.ambari.server.utils.VersionUtils: int compareVersions(java.lang.String,java.lang.String,int)>(r0, r1, 0) >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : if r0 != null
org.apache.ambari.server.utils.VersionUtils.compareVersions : if r0 != null >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : if r1 != null
org.apache.ambari.server.utils.VersionUtils.compareVersions : if r1 != null >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : r9 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String trim(java.lang.String)>(r0)
org.apache.ambari.server.utils.VersionUtils.compareVersions : r9 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String trim(java.lang.String)>(r0) >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : r10 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String trim(java.lang.String)>(r1)
org.apache.ambari.server.utils.VersionUtils.compareVersions : r10 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String trim(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $i4 = virtualinvoke r9.<java.lang.String: int indexOf(int)>(45)
org.apache.ambari.server.utils.VersionUtils.compareVersions : $i4 = virtualinvoke r9.<java.lang.String: int indexOf(int)>(45) >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : if $i4 < 0
org.apache.ambari.server.utils.VersionUtils.compareVersions : if $i4 < 0 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $i6 = virtualinvoke r10.<java.lang.String: int indexOf(int)>(45)
org.apache.ambari.server.utils.VersionUtils.compareVersions : $i6 = virtualinvoke r10.<java.lang.String: int indexOf(int)>(45) >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : if $i6 < 0
org.apache.ambari.server.utils.VersionUtils.compareVersions : if $i6 < 0 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $z0 = virtualinvoke r9.<java.lang.String: boolean isEmpty()>()
org.apache.ambari.server.utils.VersionUtils.compareVersions : $z0 = virtualinvoke r9.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : if $z0 == 0
org.apache.ambari.server.utils.VersionUtils.compareVersions : if $z0 == 0 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $z1 = virtualinvoke r10.<java.lang.String: boolean isEmpty()>()
org.apache.ambari.server.utils.VersionUtils.compareVersions : $z1 = virtualinvoke r10.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : if $z1 == 0
org.apache.ambari.server.utils.VersionUtils.compareVersions : if $z1 == 0 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : if i0 >= 0
org.apache.ambari.server.utils.VersionUtils.compareVersions : if i0 >= 0 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $r14 = "${ambariVersion}"
org.apache.ambari.server.utils.VersionUtils.compareVersions : $r14 = "${ambariVersion}" >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $r15 = virtualinvoke r9.<java.lang.String: java.lang.String trim()>()
org.apache.ambari.server.utils.VersionUtils.compareVersions : $r15 = virtualinvoke r9.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $z2 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r15)
org.apache.ambari.server.utils.VersionUtils.compareVersions : $z2 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r15) >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : if $z2 == 0
org.apache.ambari.server.utils.VersionUtils.compareVersions : if $z2 == 0 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : r2 = virtualinvoke r9.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\.")
org.apache.ambari.server.utils.VersionUtils.compareVersions : r2 = virtualinvoke r9.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\.") >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : r3 = virtualinvoke r10.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\.")
org.apache.ambari.server.utils.VersionUtils.compareVersions : r3 = virtualinvoke r10.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\.") >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $i8 = lengthof r2
org.apache.ambari.server.utils.VersionUtils.compareVersions : $i8 = lengthof r2 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $i9 = lengthof r3
org.apache.ambari.server.utils.VersionUtils.compareVersions : $i9 = lengthof r3 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : i1 = staticinvoke <java.lang.Math: int max(int,int)>($i8, $i9)
org.apache.ambari.server.utils.VersionUtils.compareVersions : i1 = staticinvoke <java.lang.Math: int max(int,int)>($i8, $i9) >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : if i0 == 0
org.apache.ambari.server.utils.VersionUtils.compareVersions : if i0 == 0 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $i10 = i1
org.apache.ambari.server.utils.VersionUtils.compareVersions : $i10 = i1 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : goto [?= i11 = $i10]
org.apache.ambari.server.utils.VersionUtils.compareVersions : goto [?= i11 = $i10] >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : i11 = $i10
org.apache.ambari.server.utils.VersionUtils.compareVersions : i11 = $i10 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $r16 = new java.util.ArrayList
org.apache.ambari.server.utils.VersionUtils.compareVersions : $r16 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : specialinvoke $r16.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.utils.VersionUtils.compareVersions : specialinvoke $r16.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : r4 = $r16
org.apache.ambari.server.utils.VersionUtils.compareVersions : r4 = $r16 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $r17 = new java.util.ArrayList
org.apache.ambari.server.utils.VersionUtils.compareVersions : $r17 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : specialinvoke $r17.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.utils.VersionUtils.compareVersions : specialinvoke $r17.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : r5 = $r17
org.apache.ambari.server.utils.VersionUtils.compareVersions : r5 = $r17 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : i2 = 0
org.apache.ambari.server.utils.VersionUtils.compareVersions : i2 = 0 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : if i2 >= i11
org.apache.ambari.server.utils.VersionUtils.compareVersions : if i2 >= i11 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $i12 = lengthof r2
org.apache.ambari.server.utils.VersionUtils.compareVersions : $i12 = lengthof r2 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : if i2 >= $i12
org.apache.ambari.server.utils.VersionUtils.compareVersions : if i2 >= $i12 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $r18 = r2[i2]
org.apache.ambari.server.utils.VersionUtils.compareVersions : $r18 = r2[i2] >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $i13 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r18)
org.apache.ambari.server.utils.VersionUtils.compareVersions : $i13 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r18) >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : goto [?= i3 = $i13]
org.apache.ambari.server.utils.VersionUtils.compareVersions : goto [?= i3 = $i13] >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : i3 = $i13
org.apache.ambari.server.utils.VersionUtils.compareVersions : i3 = $i13 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3)
org.apache.ambari.server.utils.VersionUtils.compareVersions : $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3) >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r19)
org.apache.ambari.server.utils.VersionUtils.compareVersions : interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r19) >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : goto [?= $i14 = lengthof r3]
org.apache.ambari.server.utils.VersionUtils.compareVersions : goto [?= $i14 = lengthof r3] >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $i14 = lengthof r3
org.apache.ambari.server.utils.VersionUtils.compareVersions : $i14 = lengthof r3 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : if i2 >= $i14
org.apache.ambari.server.utils.VersionUtils.compareVersions : if i2 >= $i14 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $r23 = r3[i2]
org.apache.ambari.server.utils.VersionUtils.compareVersions : $r23 = r3[i2] >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $i15 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r23)
org.apache.ambari.server.utils.VersionUtils.compareVersions : $i15 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r23) >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : goto [?= i16 = $i15]
org.apache.ambari.server.utils.VersionUtils.compareVersions : goto [?= i16 = $i15] >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : i16 = $i15
org.apache.ambari.server.utils.VersionUtils.compareVersions : i16 = $i15 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i16)
org.apache.ambari.server.utils.VersionUtils.compareVersions : $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i16) >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r24)
org.apache.ambari.server.utils.VersionUtils.compareVersions : interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>($r24) >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : goto [?= i2 = i2 + 1]
org.apache.ambari.server.utils.VersionUtils.compareVersions : goto [?= i2 = i2 + 1] >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : i2 = i2 + 1
org.apache.ambari.server.utils.VersionUtils.compareVersions : i2 = i2 + 1 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : goto [?= (branch)]
org.apache.ambari.server.utils.VersionUtils.compareVersions : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $i17 = interfaceinvoke r4.<java.util.List: int size()>()
org.apache.ambari.server.utils.VersionUtils.compareVersions : $i17 = interfaceinvoke r4.<java.util.List: int size()>() >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $i18 = interfaceinvoke r5.<java.util.List: int size()>()
org.apache.ambari.server.utils.VersionUtils.compareVersions : $i18 = interfaceinvoke r5.<java.util.List: int size()>() >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : i19 = staticinvoke <java.lang.Math: int max(int,int)>($i17, $i18)
org.apache.ambari.server.utils.VersionUtils.compareVersions : i19 = staticinvoke <java.lang.Math: int max(int,int)>($i17, $i18) >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : i20 = 0
org.apache.ambari.server.utils.VersionUtils.compareVersions : i20 = 0 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : if i20 >= i19
org.apache.ambari.server.utils.VersionUtils.compareVersions : if i20 >= i19 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $r28 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i20)
org.apache.ambari.server.utils.VersionUtils.compareVersions : $r28 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i20) >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : r29 = (java.lang.Integer) $r28
org.apache.ambari.server.utils.VersionUtils.compareVersions : r29 = (java.lang.Integer) $r28 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $r30 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(i20)
org.apache.ambari.server.utils.VersionUtils.compareVersions : $r30 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(i20) >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : r6 = (java.lang.Integer) $r30
org.apache.ambari.server.utils.VersionUtils.compareVersions : r6 = (java.lang.Integer) $r30 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $i21 = virtualinvoke r29.<java.lang.Integer: int intValue()>()
org.apache.ambari.server.utils.VersionUtils.compareVersions : $i21 = virtualinvoke r29.<java.lang.Integer: int intValue()>() >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $i22 = virtualinvoke r6.<java.lang.Integer: int intValue()>()
org.apache.ambari.server.utils.VersionUtils.compareVersions : $i22 = virtualinvoke r6.<java.lang.Integer: int intValue()>() >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : if $i21 >= $i22
org.apache.ambari.server.utils.VersionUtils.compareVersions : if $i21 >= $i22 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $i23 = virtualinvoke r29.<java.lang.Integer: int intValue()>()
org.apache.ambari.server.utils.VersionUtils.compareVersions : $i23 = virtualinvoke r29.<java.lang.Integer: int intValue()>() >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $i24 = virtualinvoke r6.<java.lang.Integer: int intValue()>()
org.apache.ambari.server.utils.VersionUtils.compareVersions : $i24 = virtualinvoke r6.<java.lang.Integer: int intValue()>() >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : if $i23 <= $i24
org.apache.ambari.server.utils.VersionUtils.compareVersions : if $i23 <= $i24 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : i20 = i20 + 1
org.apache.ambari.server.utils.VersionUtils.compareVersions : i20 = i20 + 1 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : return -1
org.apache.ambari.server.utils.VersionUtils.compareVersions : return -1 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : return $i0
org.apache.ambari.server.utils.VersionUtils.compareVersions : return $i0 >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : if $i1 >= 0
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : if $i1 >= 0 >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $r27 = virtualinvoke r2.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.state.StackId getTargetStackId()>()
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $r27 = virtualinvoke r2.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.state.StackId getTargetStackId()>() >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getTargetStackId : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.state.StackId m_targetStackId>
org.apache.ambari.server.controller.PrereqCheckRequest.getTargetStackId : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.state.StackId m_targetStackId> >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getTargetStackId : return $r1
org.apache.ambari.server.controller.PrereqCheckRequest.getTargetStackId : return $r1 >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $r28 = virtualinvoke $r27.<org.apache.ambari.server.state.StackId: java.lang.String getStackVersion()>()
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $r28 = virtualinvoke $r27.<org.apache.ambari.server.state.StackId: java.lang.String getStackVersion()>() >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $i2 = staticinvoke <org.apache.ambari.server.utils.VersionUtils: int compareVersions(java.lang.String,java.lang.String)>($r28, r14)
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $i2 = staticinvoke <org.apache.ambari.server.utils.VersionUtils: int compareVersions(java.lang.String,java.lang.String)>($r28, r14) >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : if $i2 >= 0
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : if $i2 >= 0 >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $r29 = virtualinvoke r2.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.state.StackId getSourceStackId()>()
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $r29 = virtualinvoke r2.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.state.StackId getSourceStackId()>() >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $r30 = virtualinvoke $r29.<org.apache.ambari.server.state.StackId: java.lang.String getStackVersion()>()
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $r30 = virtualinvoke $r29.<org.apache.ambari.server.state.StackId: java.lang.String getStackVersion()>() >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $r31 = virtualinvoke r2.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.state.StackId getTargetStackId()>()
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $r31 = virtualinvoke r2.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.state.StackId getTargetStackId()>() >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $r32 = virtualinvoke $r31.<org.apache.ambari.server.state.StackId: java.lang.String getStackVersion()>()
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $r32 = virtualinvoke $r31.<org.apache.ambari.server.state.StackId: java.lang.String getStackVersion()>() >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $i3 = staticinvoke <org.apache.ambari.server.utils.VersionUtils: int compareVersions(java.lang.String,java.lang.String)>($r30, $r32)
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $i3 = staticinvoke <org.apache.ambari.server.utils.VersionUtils: int compareVersions(java.lang.String,java.lang.String)>($r30, $r32) >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : if $i3 >= 0
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : if $i3 >= 0 >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : r11 = <org.apache.ambari.server.state.stack.PrereqCheckStatus: org.apache.ambari.server.state.stack.PrereqCheckStatus WARNING>
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : r11 = <org.apache.ambari.server.state.stack.PrereqCheckStatus: org.apache.ambari.server.state.stack.PrereqCheckStatus WARNING> >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void setStatus(org.apache.ambari.server.state.stack.PrereqCheckStatus)>(r11)
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void setStatus(org.apache.ambari.server.state.stack.PrereqCheckStatus)>(r11) >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.setStatus : r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: org.apache.ambari.server.state.stack.PrereqCheckStatus m_status> = r1
org.apache.ambari.server.state.stack.PrerequisiteCheck.setStatus : r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: org.apache.ambari.server.state.stack.PrereqCheckStatus m_status> = r1 >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.getStatus : $r1 = r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: org.apache.ambari.server.state.stack.PrereqCheckStatus m_status>
org.apache.ambari.server.state.stack.PrerequisiteCheck.getStatus : $r1 = r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: org.apache.ambari.server.state.stack.PrereqCheckStatus m_status> >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.getStatus : return $r1
org.apache.ambari.server.state.stack.PrerequisiteCheck.getStatus : return $r1 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : return 1
org.apache.ambari.server.utils.VersionUtils.compareVersions : return 1 >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r5)
org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r5) >>>>>>>> org.apache.ambari.server.checks.HiveDynamicServiceDiscoveryCheck.perform : if $z0 != 0
