org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : $r6 = newarray (com.google.inject.Module)[1] >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : $r0 = new org.apache.ambari.server.security.CertGenerationTest$SecurityModule
org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : $r0 = new org.apache.ambari.server.security.CertGenerationTest$SecurityModule >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : specialinvoke $r0.<org.apache.ambari.server.security.CertGenerationTest$SecurityModule: void <init>(org.apache.ambari.server.security.CertGenerationTest$1)>(null)
org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : specialinvoke $r0.<org.apache.ambari.server.security.CertGenerationTest$SecurityModule: void <init>(org.apache.ambari.server.security.CertGenerationTest$1)>(null) >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : $r6[0] = $r0
org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : $r6[0] = $r0 >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : $r7 = staticinvoke <com.google.inject.Guice: com.google.inject.Injector createInjector(com.google.inject.Module[])>($r6)
org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : $r7 = staticinvoke <com.google.inject.Guice: com.google.inject.Injector createInjector(com.google.inject.Module[])>($r6) >>>>>>>> org.apache.ambari.server.security.CertGenerationTest$SecurityModule.configure : $r1 = virtualinvoke r0.<org.apache.ambari.server.security.CertGenerationTest$SecurityModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "java/util/Properties")
org.apache.ambari.server.security.CertGenerationTest$SecurityModule.configure : $r1 = virtualinvoke r0.<org.apache.ambari.server.security.CertGenerationTest$SecurityModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "java/util/Properties") >>>>>>>> org.apache.ambari.server.security.CertGenerationTest$SecurityModule.configure : $r2 = staticinvoke <org.apache.ambari.server.security.CertGenerationTest: java.util.Properties buildTestProperties()>()
org.apache.ambari.server.security.CertGenerationTest$SecurityModule.configure : $r2 = staticinvoke <org.apache.ambari.server.security.CertGenerationTest: java.util.Properties buildTestProperties()>() >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : $r0 = <org.apache.ambari.server.security.CertGenerationTest: org.junit.rules.TemporaryFolder temp>
org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : $r0 = <org.apache.ambari.server.security.CertGenerationTest: org.junit.rules.TemporaryFolder temp> >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : virtualinvoke $r0.<org.junit.rules.TemporaryFolder: void create()>()
org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : virtualinvoke $r0.<org.junit.rules.TemporaryFolder: void create()>() >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : goto [?= $r4 = new java.util.Properties]
org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : goto [?= $r4 = new java.util.Properties] >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : $r4 = new java.util.Properties
org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : $r4 = new java.util.Properties >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : specialinvoke $r4.<java.util.Properties: void <init>()>()
org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : specialinvoke $r4.<java.util.Properties: void <init>()>() >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : r5 = $r4
org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : r5 = $r4 >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : $r6 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SRVR_KSTR_DIR>
org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : $r6 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SRVR_KSTR_DIR> >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : $r7 = virtualinvoke $r6.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : $r7 = virtualinvoke $r6.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getKey : $r1 = r0.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String m_key>
org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getKey : $r1 = r0.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String m_key> >>>>>>>> org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getKey : return $r1
org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getKey : return $r1 >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : $r2 = <org.apache.ambari.server.security.CertGenerationTest: org.junit.rules.TemporaryFolder temp>
org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : $r2 = <org.apache.ambari.server.security.CertGenerationTest: org.junit.rules.TemporaryFolder temp> >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : $r8 = virtualinvoke $r2.<org.junit.rules.TemporaryFolder: java.io.File getRoot()>()
org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : $r8 = virtualinvoke $r2.<org.junit.rules.TemporaryFolder: java.io.File getRoot()>() >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : $r9 = virtualinvoke $r8.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : $r9 = virtualinvoke $r8.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : virtualinvoke r5.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r7, $r9)
org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : virtualinvoke r5.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r7, $r9) >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : $r11 = new java.util.Random
org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : $r11 = new java.util.Random >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : specialinvoke $r11.<java.util.Random: void <init>()>()
org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : specialinvoke $r11.<java.util.Random: void <init>()>() >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : $f0 = virtualinvoke $r11.<java.util.Random: float nextFloat()>()
org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : $f0 = virtualinvoke $r11.<java.util.Random: float nextFloat()>() >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : $f1 = $f0 * 100.0F
org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : $f1 = $f0 * 100.0F >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : $f2 = staticinvoke <java.lang.Math: float abs(float)>($f1)
org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : $f2 = staticinvoke <java.lang.Math: float abs(float)>($f1) >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : $i0 = (int) $f2
org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : $i0 = (int) $f2 >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : <org.apache.ambari.server.security.CertGenerationTest: int passLen> = $i0
org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : <org.apache.ambari.server.security.CertGenerationTest: int passLen> = $i0 >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : $r12 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SRVR_CRT_PASS_LEN>
org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : $r12 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SRVR_CRT_PASS_LEN> >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : $r13 = virtualinvoke $r12.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : $r13 = virtualinvoke $r12.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : $i1 = <org.apache.ambari.server.security.CertGenerationTest: int passLen>
org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : $i1 = <org.apache.ambari.server.security.CertGenerationTest: int passLen> >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : $r14 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i1)
org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : $r14 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i1) >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : virtualinvoke r5.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r13, $r14)
org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : virtualinvoke r5.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r13, $r14) >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : $r16 = staticinvoke <org.apache.commons.lang.RandomStringUtils: java.lang.String randomAlphabetic(int)>(20)
org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : $r16 = staticinvoke <org.apache.commons.lang.RandomStringUtils: java.lang.String randomAlphabetic(int)>(20) >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : <org.apache.ambari.server.security.CertGenerationTest: java.lang.String passFileName> = $r16
org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : <org.apache.ambari.server.security.CertGenerationTest: java.lang.String passFileName> = $r16 >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : $r17 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SRVR_CRT_PASS_FILE>
org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : $r17 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SRVR_CRT_PASS_FILE> >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : $r18 = virtualinvoke $r17.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : $r18 = virtualinvoke $r17.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : $r19 = <org.apache.ambari.server.security.CertGenerationTest: java.lang.String passFileName>
org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : $r19 = <org.apache.ambari.server.security.CertGenerationTest: java.lang.String passFileName> >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : virtualinvoke r5.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r18, $r19)
org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : virtualinvoke r5.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r18, $r19) >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : return r5
org.apache.ambari.server.security.CertGenerationTest.buildTestProperties : return r5 >>>>>>>> org.apache.ambari.server.security.CertGenerationTest$SecurityModule.configure : interfaceinvoke $r1.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r2)
org.apache.ambari.server.security.CertGenerationTest$SecurityModule.configure : interfaceinvoke $r1.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r2) >>>>>>>> org.apache.ambari.server.security.CertGenerationTest$SecurityModule.configure : $r3 = virtualinvoke r0.<org.apache.ambari.server.security.CertGenerationTest$SecurityModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "org/apache/ambari/server/configuration/Configuration")
org.apache.ambari.server.security.CertGenerationTest$SecurityModule.configure : $r3 = virtualinvoke r0.<org.apache.ambari.server.security.CertGenerationTest$SecurityModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "org/apache/ambari/server/configuration/Configuration") >>>>>>>> org.apache.ambari.server.security.CertGenerationTest$SecurityModule.configure : $r4 = staticinvoke <org.apache.ambari.server.security.CertGenerationTest: java.lang.reflect.Constructor getConfigurationConstructor()>()
org.apache.ambari.server.security.CertGenerationTest$SecurityModule.configure : $r4 = staticinvoke <org.apache.ambari.server.security.CertGenerationTest: java.lang.reflect.Constructor getConfigurationConstructor()>() >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.getConfigurationConstructor : $r0 = class "org/apache/ambari/server/configuration/Configuration"
org.apache.ambari.server.security.CertGenerationTest.getConfigurationConstructor : $r0 = class "org/apache/ambari/server/configuration/Configuration" >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.getConfigurationConstructor : $r2 = newarray (java.lang.Class)[1]
org.apache.ambari.server.security.CertGenerationTest.getConfigurationConstructor : $r2 = newarray (java.lang.Class)[1] >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.getConfigurationConstructor : $r2[0] = class "java/util/Properties"
org.apache.ambari.server.security.CertGenerationTest.getConfigurationConstructor : $r2[0] = class "java/util/Properties" >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.getConfigurationConstructor : $r3 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r2)
org.apache.ambari.server.security.CertGenerationTest.getConfigurationConstructor : $r3 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r2) >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.getConfigurationConstructor : return $r3
org.apache.ambari.server.security.CertGenerationTest.getConfigurationConstructor : return $r3 >>>>>>>> org.apache.ambari.server.security.CertGenerationTest$SecurityModule.configure : interfaceinvoke $r3.<com.google.inject.binder.AnnotatedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder toConstructor(java.lang.reflect.Constructor)>($r4)
org.apache.ambari.server.security.CertGenerationTest$SecurityModule.configure : interfaceinvoke $r3.<com.google.inject.binder.AnnotatedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder toConstructor(java.lang.reflect.Constructor)>($r4) >>>>>>>> org.apache.ambari.server.security.CertGenerationTest$SecurityModule.configure : $r6 = virtualinvoke r0.<org.apache.ambari.server.security.CertGenerationTest$SecurityModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "org/apache/ambari/server/state/stack/OsFamily")
org.apache.ambari.server.security.CertGenerationTest$SecurityModule.configure : $r6 = virtualinvoke r0.<org.apache.ambari.server.security.CertGenerationTest$SecurityModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "org/apache/ambari/server/state/stack/OsFamily") >>>>>>>> org.apache.ambari.server.security.CertGenerationTest$SecurityModule.configure : $r7 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/state/stack/OsFamily")
org.apache.ambari.server.security.CertGenerationTest$SecurityModule.configure : $r7 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/state/stack/OsFamily") >>>>>>>> org.apache.ambari.server.security.CertGenerationTest$SecurityModule.configure : interfaceinvoke $r6.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r7)
org.apache.ambari.server.security.CertGenerationTest$SecurityModule.configure : interfaceinvoke $r6.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r7) >>>>>>>> org.apache.ambari.server.security.CertGenerationTest$SecurityModule.configure : $r8 = newarray (java.lang.Class)[1]
org.apache.ambari.server.security.CertGenerationTest$SecurityModule.configure : $r8 = newarray (java.lang.Class)[1] >>>>>>>> org.apache.ambari.server.security.CertGenerationTest$SecurityModule.configure : $r8[0] = class "org/apache/ambari/server/security/CertGenerationTest"
org.apache.ambari.server.security.CertGenerationTest$SecurityModule.configure : $r8[0] = class "org/apache/ambari/server/security/CertGenerationTest" >>>>>>>> org.apache.ambari.server.security.CertGenerationTest$SecurityModule.configure : virtualinvoke r0.<org.apache.ambari.server.security.CertGenerationTest$SecurityModule: void requestStaticInjection(java.lang.Class[])>($r8)
org.apache.ambari.server.security.CertGenerationTest$SecurityModule.configure : virtualinvoke r0.<org.apache.ambari.server.security.CertGenerationTest$SecurityModule: void requestStaticInjection(java.lang.Class[])>($r8) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : r2 = null
org.apache.ambari.server.configuration.Configuration.getProperty : r2 = null >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : $r3 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object getDefaultValue()>()
org.apache.ambari.server.configuration.Configuration.getProperty : $r3 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object getDefaultValue()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getDefaultValue : $r1 = r0.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object m_defaultValue>
org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getDefaultValue : $r1 = r0.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object m_defaultValue> >>>>>>>> org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getDefaultValue : return $r1
org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getDefaultValue : return $r1 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : if null == $r3
org.apache.ambari.server.configuration.Configuration.getProperty : if null == $r3 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : $r4 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object getDefaultValue()>()
org.apache.ambari.server.configuration.Configuration.getProperty : $r4 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object getDefaultValue()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4)
org.apache.ambari.server.configuration.Configuration.getProperty : r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : $r5 = r0.<org.apache.ambari.server.configuration.Configuration: java.util.Properties properties>
org.apache.ambari.server.configuration.Configuration.getProperty : $r5 = r0.<org.apache.ambari.server.configuration.Configuration: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : $r6 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.configuration.Configuration.getProperty : $r6 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : $r7 = virtualinvoke $r5.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>($r6, r2)
org.apache.ambari.server.configuration.Configuration.getProperty : $r7 = virtualinvoke $r5.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>($r6, r2) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : return $r7
org.apache.ambari.server.configuration.Configuration.getProperty : return $r7 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setUnixFilePermissions : $z0 = <org.apache.ambari.server.utils.ShellCommandUtil: boolean LINUX>
org.apache.ambari.server.utils.ShellCommandUtil.setUnixFilePermissions : $z0 = <org.apache.ambari.server.utils.ShellCommandUtil: boolean LINUX> >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setUnixFilePermissions : if $z0 == 0
org.apache.ambari.server.utils.ShellCommandUtil.setUnixFilePermissions : if $z0 == 0 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setUnixFilePermissions : $r3 = newarray (java.lang.String)[3]
org.apache.ambari.server.utils.ShellCommandUtil.setUnixFilePermissions : $r3 = newarray (java.lang.String)[3] >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setUnixFilePermissions : $r3[0] = "chmod"
org.apache.ambari.server.utils.ShellCommandUtil.setUnixFilePermissions : $r3[0] = "chmod" >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setUnixFilePermissions : $r3[1] = r0
org.apache.ambari.server.utils.ShellCommandUtil.setUnixFilePermissions : $r3[1] = r0 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setUnixFilePermissions : $r3[2] = r1
org.apache.ambari.server.utils.ShellCommandUtil.setUnixFilePermissions : $r3[2] = r1 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setUnixFilePermissions : staticinvoke <org.apache.ambari.server.utils.ShellCommandUtil: org.apache.ambari.server.utils.ShellCommandUtil$Result runCommand(java.lang.String[])>($r3)
org.apache.ambari.server.utils.ShellCommandUtil.setUnixFilePermissions : staticinvoke <org.apache.ambari.server.utils.ShellCommandUtil: org.apache.ambari.server.utils.ShellCommandUtil$Result runCommand(java.lang.String[])>($r3) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : $r1 = staticinvoke <org.apache.ambari.server.utils.ShellCommandUtil: org.apache.ambari.server.utils.ShellCommandUtil$Result runCommand(java.lang.String[],java.util.Map)>(r0, null)
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : $r1 = staticinvoke <org.apache.ambari.server.utils.ShellCommandUtil: org.apache.ambari.server.utils.ShellCommandUtil$Result runCommand(java.lang.String[],java.util.Map)>(r0, null) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : $r2 = staticinvoke <org.apache.ambari.server.utils.ShellCommandUtil: org.apache.ambari.server.utils.ShellCommandUtil$Result runCommand(java.lang.String[],java.util.Map,org.apache.ambari.server.utils.ShellCommandUtil$InteractiveHandler,boolean)>(r0, r1, null, 0)
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : $r2 = staticinvoke <org.apache.ambari.server.utils.ShellCommandUtil: org.apache.ambari.server.utils.ShellCommandUtil$Result runCommand(java.lang.String[],java.util.Map,org.apache.ambari.server.utils.ShellCommandUtil$InteractiveHandler,boolean)>(r0, r1, null, 0) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : if z0 == 0
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : if z0 == 0 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : r3 = r0
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : r3 = r0 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : $r12 = new java.lang.ProcessBuilder
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : $r12 = new java.lang.ProcessBuilder >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : specialinvoke $r12.<java.lang.ProcessBuilder: void <init>(java.lang.String[])>(r3)
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : specialinvoke $r12.<java.lang.ProcessBuilder: void <init>(java.lang.String[])>(r3) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : r4 = $r12
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : r4 = $r12 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : if r1 == null
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : if r1 == null >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : $z1 = <org.apache.ambari.server.utils.ShellCommandUtil: boolean WINDOWS>
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : $z1 = <org.apache.ambari.server.utils.ShellCommandUtil: boolean WINDOWS> >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : if $z1 == 0
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : if $z1 == 0 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : r14 = virtualinvoke r4.<java.lang.ProcessBuilder: java.lang.Process start()>()
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : r14 = virtualinvoke r4.<java.lang.ProcessBuilder: java.lang.Process start()>() >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : r16 = virtualinvoke r14.<java.lang.Process: java.io.InputStream getInputStream()>()
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : r16 = virtualinvoke r14.<java.lang.Process: java.io.InputStream getInputStream()>() >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : if r2 == null
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : if r2 == null >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : virtualinvoke r14.<java.lang.Process: int waitFor()>()
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : virtualinvoke r14.<java.lang.Process: int waitFor()>() >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : r29 = staticinvoke <org.apache.ambari.server.utils.ShellCommandUtil: java.lang.String streamToString(java.io.InputStream)>(r16)
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : r29 = staticinvoke <org.apache.ambari.server.utils.ShellCommandUtil: java.lang.String streamToString(java.io.InputStream)>(r16) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.streamToString : $r1 = new java.io.InputStreamReader
org.apache.ambari.server.utils.ShellCommandUtil.streamToString : $r1 = new java.io.InputStreamReader >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.streamToString : specialinvoke $r1.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r0)
org.apache.ambari.server.utils.ShellCommandUtil.streamToString : specialinvoke $r1.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r0) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.streamToString : r2 = $r1
org.apache.ambari.server.utils.ShellCommandUtil.streamToString : r2 = $r1 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.streamToString : $r5 = new java.io.BufferedReader
org.apache.ambari.server.utils.ShellCommandUtil.streamToString : $r5 = new java.io.BufferedReader >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.streamToString : specialinvoke $r5.<java.io.BufferedReader: void <init>(java.io.Reader)>(r2)
org.apache.ambari.server.utils.ShellCommandUtil.streamToString : specialinvoke $r5.<java.io.BufferedReader: void <init>(java.io.Reader)>(r2) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.streamToString : r3 = $r5
org.apache.ambari.server.utils.ShellCommandUtil.streamToString : r3 = $r5 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.streamToString : $r6 = new java.lang.StringBuilder
org.apache.ambari.server.utils.ShellCommandUtil.streamToString : $r6 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.streamToString : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.utils.ShellCommandUtil.streamToString : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.streamToString : r4 = $r6
org.apache.ambari.server.utils.ShellCommandUtil.streamToString : r4 = $r6 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.streamToString : n0 = null
org.apache.ambari.server.utils.ShellCommandUtil.streamToString : n0 = null >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.streamToString : $r7 = virtualinvoke r3.<java.io.BufferedReader: java.lang.String readLine()>()
org.apache.ambari.server.utils.ShellCommandUtil.streamToString : $r7 = virtualinvoke r3.<java.io.BufferedReader: java.lang.String readLine()>() >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.streamToString : r8 = $r7
org.apache.ambari.server.utils.ShellCommandUtil.streamToString : r8 = $r7 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.streamToString : if $r7 == null
org.apache.ambari.server.utils.ShellCommandUtil.streamToString : if $r7 == null >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.streamToString : $r11 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.utils.ShellCommandUtil.streamToString : $r11 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.streamToString : return $r11
org.apache.ambari.server.utils.ShellCommandUtil.streamToString : return $r11 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : $r30 = virtualinvoke r14.<java.lang.Process: java.io.InputStream getErrorStream()>()
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : $r30 = virtualinvoke r14.<java.lang.Process: java.io.InputStream getErrorStream()>() >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : r31 = staticinvoke <org.apache.ambari.server.utils.ShellCommandUtil: java.lang.String streamToString(java.io.InputStream)>($r30)
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : r31 = staticinvoke <org.apache.ambari.server.utils.ShellCommandUtil: java.lang.String streamToString(java.io.InputStream)>($r30) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : i6 = virtualinvoke r14.<java.lang.Process: int exitValue()>()
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : i6 = virtualinvoke r14.<java.lang.Process: int exitValue()>() >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : $r32 = new org.apache.ambari.server.utils.ShellCommandUtil$Result
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : $r32 = new org.apache.ambari.server.utils.ShellCommandUtil$Result >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : specialinvoke $r32.<org.apache.ambari.server.utils.ShellCommandUtil$Result: void <init>(int,java.lang.String,java.lang.String)>(i6, r29, r31)
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : specialinvoke $r32.<org.apache.ambari.server.utils.ShellCommandUtil$Result: void <init>(int,java.lang.String,java.lang.String)>(i6, r29, r31) >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : return $r32
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : return $r32 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : return $r2
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : return $r2 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.runCommand : return $r1
org.apache.ambari.server.utils.ShellCommandUtil.runCommand : return $r1 >>>>>>>> org.apache.ambari.server.utils.ShellCommandUtil.setUnixFilePermissions : goto [?= return]
org.apache.ambari.server.utils.ShellCommandUtil.setUnixFilePermissions : goto [?= return] >>>>>>>> org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty API_USE_SSL>
org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty API_USE_SSL> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1)
org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r2)
org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r2) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : return $z0
org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : return $z0 >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r1 = new org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r1 = new org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : specialinvoke $r1.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: void <init>()>()
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : specialinvoke $r1.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: void <init>()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : r2 = $r1
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : r2 = $r1 >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r3 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty KERBEROS_AUTH_ENABLED>
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r3 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty KERBEROS_AUTH_ENABLED> >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r13 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r3)
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r13 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r3) >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r13)
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r13) >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $z0 = virtualinvoke $r14.<java.lang.Boolean: boolean booleanValue()>()
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $z0 = virtualinvoke $r14.<java.lang.Boolean: boolean booleanValue()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : virtualinvoke r2.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: void setKerberosAuthenticationEnabled(boolean)>($z0)
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : virtualinvoke r2.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: void setKerberosAuthenticationEnabled(boolean)>($z0) >>>>>>>> org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.setKerberosAuthenticationEnabled : r0.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean kerberosAuthenticationEnabled> = z0
org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.setKerberosAuthenticationEnabled : r0.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean kerberosAuthenticationEnabled> = z0 >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $z1 = virtualinvoke r2.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean isKerberosAuthenticationEnabled()>()
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $z1 = virtualinvoke r2.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean isKerberosAuthenticationEnabled()>() >>>>>>>> org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.isKerberosAuthenticationEnabled : $z0 = r0.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean kerberosAuthenticationEnabled>
org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.isKerberosAuthenticationEnabled : $z0 = r0.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean kerberosAuthenticationEnabled> >>>>>>>> org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.isKerberosAuthenticationEnabled : return $z0
org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.isKerberosAuthenticationEnabled : return $z0 >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : if $z1 != 0
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : if $z1 != 0 >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : return r2
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : return r2 >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_PATH>
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_PATH> >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r4 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1)
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r4 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1) >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : if $r4 == null
org.apache.ambari.server.configuration.Configuration.loadSSLParams : if $r4 == null >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r7 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_PASSWORD>
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r7 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_PASSWORD> >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r8 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r7)
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r8 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r7) >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : if $r8 == null
org.apache.ambari.server.configuration.Configuration.loadSSLParams : if $r8 == null >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r15 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_TYPE>
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r15 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_TYPE> >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r16 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r15)
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r16 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r15) >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : if $r16 == null
org.apache.ambari.server.configuration.Configuration.loadSSLParams : if $r16 == null >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.init : <org.apache.ambari.server.security.CertGenerationTest: org.apache.ambari.server.security.CertificateManager certMan> = r0
org.apache.ambari.server.security.CertGenerationTest.init : <org.apache.ambari.server.security.CertGenerationTest: org.apache.ambari.server.security.CertificateManager certMan> = r0 >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : <org.apache.ambari.server.security.CertGenerationTest: com.google.inject.Injector injector> = $r7
org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : <org.apache.ambari.server.security.CertGenerationTest: com.google.inject.Injector injector> = $r7 >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : $r8 = <org.apache.ambari.server.security.CertGenerationTest: com.google.inject.Injector injector>
org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : $r8 = <org.apache.ambari.server.security.CertGenerationTest: com.google.inject.Injector injector> >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : $r9 = interfaceinvoke $r8.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "org/apache/ambari/server/security/CertificateManager")
org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : $r9 = interfaceinvoke $r8.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "org/apache/ambari/server/security/CertificateManager") >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : $r10 = (org.apache.ambari.server.security.CertificateManager) $r9
org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : $r10 = (org.apache.ambari.server.security.CertificateManager) $r9 >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : <org.apache.ambari.server.security.CertGenerationTest: org.apache.ambari.server.security.CertificateManager certMan> = $r10
org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : <org.apache.ambari.server.security.CertGenerationTest: org.apache.ambari.server.security.CertificateManager certMan> = $r10 >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : $r11 = new java.io.File
org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : $r11 = new java.io.File >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : specialinvoke $r11.<java.io.File: void <init>(java.lang.String)>("conf/unix/ca.config")
org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : specialinvoke $r11.<java.io.File: void <init>(java.lang.String)>("conf/unix/ca.config") >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : r1 = $r11
org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : r1 = $r11 >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : $r12 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name")
org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : $r12 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name") >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : $z0 = virtualinvoke $r12.<java.lang.String: boolean contains(java.lang.CharSequence)>("Windows")
org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : $z0 = virtualinvoke $r12.<java.lang.String: boolean contains(java.lang.CharSequence)>("Windows") >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : if $z0 == 0
org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : if $z0 == 0 >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : $r20 = new java.io.File
org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : $r20 = new java.io.File >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : $r21 = <org.apache.ambari.server.security.CertGenerationTest: org.junit.rules.TemporaryFolder temp>
org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : $r21 = <org.apache.ambari.server.security.CertGenerationTest: org.junit.rules.TemporaryFolder temp> >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : $r22 = virtualinvoke $r21.<org.junit.rules.TemporaryFolder: java.io.File getRoot()>()
org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : $r22 = virtualinvoke $r21.<org.junit.rules.TemporaryFolder: java.io.File getRoot()>() >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : $r23 = virtualinvoke $r22.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : $r23 = virtualinvoke $r22.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : specialinvoke $r20.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r23, "ca.config")
org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : specialinvoke $r20.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r23, "ca.config") >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : r2 = $r20
org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : r2 = $r20 >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : $r24 = new java.io.File
org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : $r24 = new java.io.File >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : $r25 = <org.apache.ambari.server.security.CertGenerationTest: org.junit.rules.TemporaryFolder temp>
org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : $r25 = <org.apache.ambari.server.security.CertGenerationTest: org.junit.rules.TemporaryFolder temp> >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : $r26 = virtualinvoke $r25.<org.junit.rules.TemporaryFolder: java.io.File getRoot()>()
org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : $r26 = virtualinvoke $r25.<org.junit.rules.TemporaryFolder: java.io.File getRoot()>() >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : $r27 = virtualinvoke $r26.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : $r27 = virtualinvoke $r26.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : specialinvoke $r24.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r27, "newcerts")
org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : specialinvoke $r24.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r27, "newcerts") >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : r3 = $r24
org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : r3 = $r24 >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : virtualinvoke r3.<java.io.File: boolean mkdirs()>()
org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : virtualinvoke r3.<java.io.File: boolean mkdirs()>() >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : $r28 = new java.io.File
org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : $r28 = new java.io.File >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : $r29 = <org.apache.ambari.server.security.CertGenerationTest: org.junit.rules.TemporaryFolder temp>
org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : $r29 = <org.apache.ambari.server.security.CertGenerationTest: org.junit.rules.TemporaryFolder temp> >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : $r30 = virtualinvoke $r29.<org.junit.rules.TemporaryFolder: java.io.File getRoot()>()
org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : $r30 = virtualinvoke $r29.<org.junit.rules.TemporaryFolder: java.io.File getRoot()>() >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : $r31 = virtualinvoke $r30.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : $r31 = virtualinvoke $r30.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : specialinvoke $r28.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r31, "index.txt")
org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : specialinvoke $r28.<java.io.File: void <init>(java.lang.String,java.lang.String)>($r31, "index.txt") >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : r4 = $r28
org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : r4 = $r28 >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : virtualinvoke r4.<java.io.File: boolean createNewFile()>()
org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : virtualinvoke r4.<java.io.File: boolean createNewFile()>() >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : $r32 = new java.io.FileInputStream
org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : $r32 = new java.io.FileInputStream >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : specialinvoke $r32.<java.io.FileInputStream: void <init>(java.io.File)>(r1)
org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : specialinvoke $r32.<java.io.FileInputStream: void <init>(java.io.File)>(r1) >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : r44 = $r43
org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : r44 = $r43 >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : virtualinvoke r44.<java.io.IOException: void printStackTrace()>()
org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : virtualinvoke r44.<java.io.IOException: void printStackTrace()>() >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : staticinvoke <junit.framework.TestCase: void fail()>()
org.apache.ambari.server.security.CertGenerationTest.setUpBeforeClass : staticinvoke <junit.framework.TestCase: void fail()>() >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.tearDownAfterClass : $r0 = <org.apache.ambari.server.security.CertGenerationTest: org.junit.rules.TemporaryFolder temp>
org.apache.ambari.server.security.CertGenerationTest.tearDownAfterClass : $r0 = <org.apache.ambari.server.security.CertGenerationTest: org.junit.rules.TemporaryFolder temp> >>>>>>>> org.apache.ambari.server.security.CertGenerationTest.tearDownAfterClass : virtualinvoke $r0.<org.junit.rules.TemporaryFolder: void delete()>()
org.apache.ambari.server.security.CertGenerationTest.tearDownAfterClass : virtualinvoke $r0.<org.junit.rules.TemporaryFolder: void delete()>() >>>>>>>> org.apache.ambari.server.customactions.ActionDefinitionManager.readCustomActionDefinitions : if r1 == null
org.apache.ambari.server.customactions.ActionDefinitionManager.readCustomActionDefinitions : if r1 == null >>>>>>>> org.apache.ambari.server.customactions.ActionDefinitionManager.readCustomActionDefinitions : $z0 = virtualinvoke r1.<java.io.File: boolean exists()>()
org.apache.ambari.server.customactions.ActionDefinitionManager.readCustomActionDefinitions : $z0 = virtualinvoke r1.<java.io.File: boolean exists()>() >>>>>>>> org.apache.ambari.server.customactions.ActionDefinitionManager.readCustomActionDefinitions : if $z0 == 0
org.apache.ambari.server.customactions.ActionDefinitionManager.readCustomActionDefinitions : if $z0 == 0 >>>>>>>> org.apache.ambari.server.customactions.ActionDefinitionManager.readCustomActionDefinitions : $r13 = <org.apache.ambari.server.customactions.ActionDefinitionManager: org.slf4j.Logger LOG>
org.apache.ambari.server.customactions.ActionDefinitionManager.readCustomActionDefinitions : $r13 = <org.apache.ambari.server.customactions.ActionDefinitionManager: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.customactions.ActionDefinitionManager.readCustomActionDefinitions : $r2 = new java.lang.StringBuilder
org.apache.ambari.server.customactions.ActionDefinitionManager.readCustomActionDefinitions : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.customactions.ActionDefinitionManager.readCustomActionDefinitions : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.customactions.ActionDefinitionManager.readCustomActionDefinitions : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.customactions.ActionDefinitionManager.readCustomActionDefinitions : $r14 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot read custom action definitions. ")
org.apache.ambari.server.customactions.ActionDefinitionManager.readCustomActionDefinitions : $r14 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot read custom action definitions. ") >>>>>>>> org.apache.ambari.server.customactions.ActionDefinitionManager.readCustomActionDefinitions : $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1)
org.apache.ambari.server.customactions.ActionDefinitionManager.readCustomActionDefinitions : $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.customactions.ActionDefinitionManager.readCustomActionDefinitions : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.customactions.ActionDefinitionManager.readCustomActionDefinitions : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.customactions.ActionDefinitionManager.readCustomActionDefinitions : if $r16 != null
org.apache.ambari.server.customactions.ActionDefinitionManager.readCustomActionDefinitions : if $r16 != null >>>>>>>> org.apache.ambari.server.customactions.ActionDefinitionManager.readCustomActionDefinitions : $r18 = new java.lang.StringBuilder
org.apache.ambari.server.customactions.ActionDefinitionManager.readCustomActionDefinitions : $r18 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.customactions.ActionDefinitionManager.readCustomActionDefinitions : specialinvoke $r18.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.customactions.ActionDefinitionManager.readCustomActionDefinitions : specialinvoke $r18.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.customactions.ActionDefinitionManager.readCustomActionDefinitions : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Check path ")
org.apache.ambari.server.customactions.ActionDefinitionManager.readCustomActionDefinitions : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Check path ") >>>>>>>> org.apache.ambari.server.customactions.ActionDefinitionManager.readCustomActionDefinitions : $r20 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.ambari.server.customactions.ActionDefinitionManager.readCustomActionDefinitions : $r20 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.ambari.server.customactions.ActionDefinitionManager.readCustomActionDefinitions : $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20)
org.apache.ambari.server.customactions.ActionDefinitionManager.readCustomActionDefinitions : $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) >>>>>>>> org.apache.ambari.server.customactions.ActionDefinitionManager.readCustomActionDefinitions : $r17 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.customactions.ActionDefinitionManager.readCustomActionDefinitions : $r17 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.customactions.ActionDefinitionManager.readCustomActionDefinitions : interfaceinvoke $r13.<org.slf4j.Logger: void warn(java.lang.String)>($r17)
org.apache.ambari.server.customactions.ActionDefinitionManager.readCustomActionDefinitions : interfaceinvoke $r13.<org.slf4j.Logger: void warn(java.lang.String)>($r17) >>>>>>>> org.apache.ambari.server.customactions.ActionDefinitionManager.readCustomActionDefinitions : $r22 = <org.apache.ambari.server.api.services.AmbariMetaInfo: java.io.FilenameFilter FILENAME_FILTER>
org.apache.ambari.server.customactions.ActionDefinitionManager.readCustomActionDefinitions : $r22 = <org.apache.ambari.server.api.services.AmbariMetaInfo: java.io.FilenameFilter FILENAME_FILTER> >>>>>>>> org.apache.ambari.server.customactions.ActionDefinitionManager.readCustomActionDefinitions : r3 = virtualinvoke r1.<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>($r22)
org.apache.ambari.server.customactions.ActionDefinitionManager.readCustomActionDefinitions : r3 = virtualinvoke r1.<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>($r22) >>>>>>>> org.apache.ambari.server.customactions.ActionDefinitionManager.readCustomActionDefinitions : if r3 == null
org.apache.ambari.server.customactions.ActionDefinitionManager.readCustomActionDefinitions : if r3 == null >>>>>>>> org.apache.ambari.server.customactions.ActionDefinitionManager.getAllActionDefinition : $r1 = new java.util.ArrayList
org.apache.ambari.server.customactions.ActionDefinitionManager.getAllActionDefinition : $r1 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.customactions.ActionDefinitionManager.getAllActionDefinition : $r2 = r0.<org.apache.ambari.server.customactions.ActionDefinitionManager: java.util.Map actionDefinitionMap>
org.apache.ambari.server.customactions.ActionDefinitionManager.getAllActionDefinition : $r2 = r0.<org.apache.ambari.server.customactions.ActionDefinitionManager: java.util.Map actionDefinitionMap> >>>>>>>> org.apache.ambari.server.customactions.ActionDefinitionManager.getAllActionDefinition : $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>()
org.apache.ambari.server.customactions.ActionDefinitionManager.getAllActionDefinition : $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.ambari.server.customactions.ActionDefinitionManager.getAllActionDefinition : specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r3)
org.apache.ambari.server.customactions.ActionDefinitionManager.getAllActionDefinition : specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r3) >>>>>>>> org.apache.ambari.server.customactions.ActionDefinitionManager.getAllActionDefinition : return $r1
