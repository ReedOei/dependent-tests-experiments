org.apache.ambari.server.view.ViewURLStreamProvider.readFrom : if r3 != null >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.readFrom : $r9 = staticinvoke <org.apache.commons.io.IOUtils: byte[] toByteArray(java.io.InputStream)>(r3)
org.apache.ambari.server.view.ViewURLStreamProvider.readFrom : $r9 = staticinvoke <org.apache.commons.io.IOUtils: byte[] toByteArray(java.io.InputStream)>(r3) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.readFrom : $r10 = specialinvoke r0.<org.apache.ambari.server.view.ViewURLStreamProvider: java.io.InputStream getInputStream(java.lang.String,java.lang.String,java.util.Map,byte[])>(r1, r2, r4, $r9)
org.apache.ambari.server.view.ViewURLStreamProvider.readFrom : $r10 = specialinvoke r0.<org.apache.ambari.server.view.ViewURLStreamProvider: java.io.InputStream getInputStream(java.lang.String,java.lang.String,java.util.Map,byte[])>(r1, r2, r4, $r9) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getInputStream : $z0 = virtualinvoke r0.<org.apache.ambari.server.view.ViewURLStreamProvider: boolean isProxyCallAllowed(java.lang.String)>(r1)
org.apache.ambari.server.view.ViewURLStreamProvider.getInputStream : $z0 = virtualinvoke r0.<org.apache.ambari.server.view.ViewURLStreamProvider: boolean isProxyCallAllowed(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isNotBlank(java.lang.String)>(r1)
org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isNotBlank(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : if $z0 == 0
org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : if $z0 == 0 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : $r3 = specialinvoke r0.<org.apache.ambari.server.view.ViewURLStreamProvider: org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler getHostPortRestrictionHandler()>()
org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : $r3 = specialinvoke r0.<org.apache.ambari.server.view.ViewURLStreamProvider: org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler getHostPortRestrictionHandler()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : $r3 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider: org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler hostPortRestrictionHandler>
org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : $r3 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider: org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler hostPortRestrictionHandler> >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : if $r3 != null
org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : if $r3 != null >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : $r4 = new org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler
org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : $r4 = new org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : $r5 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider: org.apache.ambari.view.ViewContext viewContext>
org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : $r5 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider: org.apache.ambari.view.ViewContext viewContext> >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty PROXY_ALLOWED_HOST_PORTS>
org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty PROXY_ALLOWED_HOST_PORTS> >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : $r6 = virtualinvoke $r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : $r6 = virtualinvoke $r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getKey : $r1 = r0.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String m_key>
org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getKey : $r1 = r0.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String m_key> >>>>>>>> org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getKey : return $r1
org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getKey : return $r1 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : $r7 = interfaceinvoke $r5.<org.apache.ambari.view.ViewContext: java.lang.String getAmbariProperty(java.lang.String)>($r6)
org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : $r7 = interfaceinvoke $r5.<org.apache.ambari.view.ViewContext: java.lang.String getAmbariProperty(java.lang.String)>($r6) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : specialinvoke $r4.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: void <init>(org.apache.ambari.server.view.ViewURLStreamProvider,java.lang.String)>(r0, $r7)
org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : specialinvoke $r4.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: void <init>(org.apache.ambari.server.view.ViewURLStreamProvider,java.lang.String)>(r0, $r7) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.access$000 : $r0 = <org.apache.ambari.server.view.ViewURLStreamProvider: org.apache.commons.logging.Log LOG>
org.apache.ambari.server.view.ViewURLStreamProvider.access$000 : $r0 = <org.apache.ambari.server.view.ViewURLStreamProvider: org.apache.commons.logging.Log LOG> >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.access$000 : return $r0
org.apache.ambari.server.view.ViewURLStreamProvider.access$000 : return $r0 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : r2 = $r4
org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : r2 = $r4 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : r0.<org.apache.ambari.server.view.ViewURLStreamProvider: org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler hostPortRestrictionHandler> = r2
org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : r0.<org.apache.ambari.server.view.ViewURLStreamProvider: org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler hostPortRestrictionHandler> = r2 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : $r8 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider: org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler hostPortRestrictionHandler>
org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : $r8 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider: org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler hostPortRestrictionHandler> >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : return $r8
org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : return $r8 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : $r4 = virtualinvoke $r3.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.lang.Boolean proxyCallRestricted()>()
org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : $r4 = virtualinvoke $r3.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.lang.Boolean proxyCallRestricted()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.proxyCallRestricted : $r1 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.util.Map allowedHostPorts>
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.proxyCallRestricted : $r1 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.util.Map allowedHostPorts> >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.proxyCallRestricted : if $r1 != null
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.proxyCallRestricted : if $r1 != null >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.proxyCallRestricted : specialinvoke r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: void initializeAllowedHostPorts()>()
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.proxyCallRestricted : specialinvoke r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: void initializeAllowedHostPorts()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : z0 = 0
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : z0 = 0 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r7 = new java.util.HashMap
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r7 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : specialinvoke $r7.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : specialinvoke $r7.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : r1 = $r7
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : r1 = $r7 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r8 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.lang.String allowedHostPortsValue>
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r8 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.lang.String allowedHostPortsValue> >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $z1 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isNotBlank(java.lang.String)>($r8)
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $z1 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isNotBlank(java.lang.String)>($r8) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : if $z1 == 0
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : if $z1 == 0 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.util.Map allowedHostPorts> = r1
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.util.Map allowedHostPorts> = r1 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r45 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0)
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r45 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.lang.Boolean isProxyCallRestricted> = $r45
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.lang.Boolean isProxyCallRestricted> = $r45 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.proxyCallRestricted : $r2 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.lang.Boolean isProxyCallRestricted>
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.proxyCallRestricted : $r2 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.lang.Boolean isProxyCallRestricted> >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.proxyCallRestricted : return $r2
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.proxyCallRestricted : return $r2 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : $z1 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>()
org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : $z1 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : if $z1 == 0
org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : if $z1 == 0 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : return 1
org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : return 1 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getInputStream : if $z0 != 0
org.apache.ambari.server.view.ViewURLStreamProvider.getInputStream : if $z0 != 0 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getInputStream : r5 = specialinvoke r0.<org.apache.ambari.server.view.ViewURLStreamProvider: java.net.HttpURLConnection getHttpURLConnection(java.lang.String,java.lang.String,java.util.Map,byte[])>(r1, r2, r3, r4)
org.apache.ambari.server.view.ViewURLStreamProvider.getInputStream : r5 = specialinvoke r0.<org.apache.ambari.server.view.ViewURLStreamProvider: java.net.HttpURLConnection getHttpURLConnection(java.lang.String,java.lang.String,java.util.Map,byte[])>(r1, r2, r3, r4) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $z0 = virtualinvoke r0.<org.apache.ambari.server.view.ViewURLStreamProvider: boolean isProxyCallAllowed(java.lang.String)>(r1)
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $z0 = virtualinvoke r0.<org.apache.ambari.server.view.ViewURLStreamProvider: boolean isProxyCallAllowed(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : if $z0 != 0
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : if $z0 != 0 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r20 = new java.util.HashMap
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r20 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : specialinvoke $r20.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : specialinvoke $r20.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : r5 = $r20
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : r5 = $r20 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r21 = interfaceinvoke r3.<java.util.Map: java.util.Set entrySet()>()
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r21 = interfaceinvoke r3.<java.util.Map: java.util.Set entrySet()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : r6 = interfaceinvoke $r21.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : r6 = interfaceinvoke $r21.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : if $z1 == 0
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : if $z1 == 0 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r22 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r22 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : r7 = (java.util.Map$Entry) $r22
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : r7 = (java.util.Map$Entry) $r22 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r23 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>()
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r23 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r24 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>()
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r24 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r25 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r24)
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r25 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r24) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : interfaceinvoke r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r23, $r25)
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : interfaceinvoke r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r23, $r25) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : goto [?= $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : goto [?= $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r27 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider: org.apache.ambari.server.controller.internal.URLStreamProvider streamProvider>
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r27 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider: org.apache.ambari.server.controller.internal.URLStreamProvider streamProvider> >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r28 = virtualinvoke $r27.<org.apache.ambari.server.controller.internal.URLStreamProvider: java.net.HttpURLConnection processURL(java.lang.String,java.lang.String,byte[],java.util.Map)>(r1, r2, r4, r5)
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r28 = virtualinvoke $r27.<org.apache.ambari.server.controller.internal.URLStreamProvider: java.net.HttpURLConnection processURL(java.lang.String,java.lang.String,byte[],java.util.Map)>(r1, r2, r4, r5) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : return $r28
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : return $r28 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getInputStream : i0 = virtualinvoke r5.<java.net.HttpURLConnection: int getResponseCode()>()
org.apache.ambari.server.view.ViewURLStreamProvider.getInputStream : i0 = virtualinvoke r5.<java.net.HttpURLConnection: int getResponseCode()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getInputStream : $i1 = <org.apache.ambari.server.proxy.ProxyService: int HTTP_ERROR_RANGE_START>
org.apache.ambari.server.view.ViewURLStreamProvider.getInputStream : $i1 = <org.apache.ambari.server.proxy.ProxyService: int HTTP_ERROR_RANGE_START> >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getInputStream : if i0 < $i1
org.apache.ambari.server.view.ViewURLStreamProvider.getInputStream : if i0 < $i1 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getInputStream : $r18 = virtualinvoke r5.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>()
org.apache.ambari.server.view.ViewURLStreamProvider.getInputStream : $r18 = virtualinvoke r5.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getInputStream : return $r18
org.apache.ambari.server.view.ViewURLStreamProvider.getInputStream : return $r18 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.readFrom : return $r10
