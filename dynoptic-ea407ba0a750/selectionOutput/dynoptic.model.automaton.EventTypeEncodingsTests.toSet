dynoptic.model.automaton.EventTypeEncodingsTests.toSet : $r2 = new java.util.LinkedHashSet >>>>>>>> dynoptic.model.automaton.EventTypeEncodingsTests.toSet : specialinvoke $r2.<java.util.LinkedHashSet: void <init>()>()
dynoptic.model.automaton.EventTypeEncodingsTests.toSet : specialinvoke $r2.<java.util.LinkedHashSet: void <init>()>() >>>>>>>> dynoptic.model.automaton.EventTypeEncodingsTests.toSet : r3 = $r2
dynoptic.model.automaton.EventTypeEncodingsTests.toSet : r3 = $r2 >>>>>>>> dynoptic.model.automaton.EventTypeEncodingsTests.toSet : r4 = r1
dynoptic.model.automaton.EventTypeEncodingsTests.toSet : r4 = r1 >>>>>>>> dynoptic.model.automaton.EventTypeEncodingsTests.toSet : i0 = lengthof r4
dynoptic.model.automaton.EventTypeEncodingsTests.toSet : i0 = lengthof r4 >>>>>>>> dynoptic.model.automaton.EventTypeEncodingsTests.toSet : i1 = 0
dynoptic.model.automaton.EventTypeEncodingsTests.toSet : i1 = 0 >>>>>>>> dynoptic.model.automaton.EventTypeEncodingsTests.toSet : if i1 >= i0
dynoptic.model.automaton.EventTypeEncodingsTests.toSet : if i1 >= i0 >>>>>>>> dynoptic.model.automaton.EventTypeEncodingsTests.toSet : r5 = r4[i1]
dynoptic.model.automaton.EventTypeEncodingsTests.toSet : if i1 >= i0 >>>>>>>> dynoptic.model.automaton.EventTypeEncodingsTests.toSet : return r3
dynoptic.model.automaton.EventTypeEncodingsTests.toSet : r5 = r4[i1] >>>>>>>> dynoptic.model.automaton.EventTypeEncodingsTests.toSet : interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>(r5)
dynoptic.model.automaton.EventTypeEncodingsTests.toSet : interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>(r5) >>>>>>>> dynoptic.model.automaton.EventTypeEncodingsTests.toSet : i1 = i1 + 1
dynoptic.model.automaton.EventTypeEncodingsTests.toSet : i1 = i1 + 1 >>>>>>>> dynoptic.model.automaton.EventTypeEncodingsTests.toSet : goto [?= (branch)]
dynoptic.model.automaton.EventTypeEncodingsTests.toSet : goto [?= (branch)] >>>>>>>> dynoptic.model.automaton.EventTypeEncodingsTests.toSet : if i1 >= i0
