dynoptic.model.AbsFSMState.statesEvalToTrue : r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.AbsFSMState.statesEvalToTrue : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.AbsFSMState.statesEvalToTrue : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.AbsFSMState.statesEvalToTrue : if $z0 == 0
dynoptic.model.AbsFSMState.statesEvalToTrue : if $z0 == 0 >>>>>>>> dynoptic.model.AbsFSMState.statesEvalToTrue : $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
dynoptic.model.AbsFSMState.statesEvalToTrue : if $z0 == 0 >>>>>>>> dynoptic.model.AbsFSMState.statesEvalToTrue : return 1
dynoptic.model.AbsFSMState.statesEvalToTrue : $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> dynoptic.model.AbsFSMState.statesEvalToTrue : r3 = (dynoptic.model.AbsFSMState) $r4
dynoptic.model.AbsFSMState.statesEvalToTrue : r3 = (dynoptic.model.AbsFSMState) $r4 >>>>>>>> dynoptic.model.AbsFSMState.statesEvalToTrue : $z1 = interfaceinvoke r1.<dynoptic.model.AbsFSMState$IStateToBooleanFn: boolean eval(java.lang.Object)>(r3)
dynoptic.model.AbsFSMState.statesEvalToTrue : $z1 = interfaceinvoke r1.<dynoptic.model.AbsFSMState$IStateToBooleanFn: boolean eval(java.lang.Object)>(r3) >>>>>>>> dynoptic.model.AbsFSMState.statesEvalToTrue : if $z1 != 0
dynoptic.model.AbsFSMState.statesEvalToTrue : if $z1 != 0 >>>>>>>> dynoptic.model.AbsFSMState.statesEvalToTrue : return 0
dynoptic.model.AbsFSMState.statesEvalToTrue : if $z1 != 0 >>>>>>>> dynoptic.model.AbsFSMState.statesEvalToTrue : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
dynoptic.model.AbsFSMState.statesEvalToTrue : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> dynoptic.model.AbsFSMState.statesEvalToTrue : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
