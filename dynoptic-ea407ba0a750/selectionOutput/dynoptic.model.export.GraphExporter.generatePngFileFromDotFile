dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r1 = new java.io.File >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>(r0)
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>(r0) >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : r2 = $r1
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : r2 = $r1 >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : r3 = staticinvoke <dynoptic.model.export.GraphExporter: java.lang.String getDotCommand()>()
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : r3 = staticinvoke <dynoptic.model.export.GraphExporter: java.lang.String getDotCommand()>() >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : if r3 != null
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : if r3 != null >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : return
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : if r3 != null >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : r4 = "png"
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : r4 = "png" >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r8 = new java.lang.StringBuilder
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r8 = new java.lang.StringBuilder >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : specialinvoke $r8.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3)
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -O -T")
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -O -T") >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4)
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ")
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ") >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r13 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>()
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r13 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13)
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13) >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : r5 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : r5 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r15 = <dynoptic.model.export.GraphExporter: java.util.logging.Logger logger>
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r15 = <dynoptic.model.export.GraphExporter: java.util.logging.Logger logger> >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r16 = new java.lang.StringBuilder
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r16 = new java.lang.StringBuilder >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : specialinvoke $r16.<java.lang.StringBuilder: void <init>()>()
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : specialinvoke $r16.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exporting graph to: ")
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exporting graph to: ") >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r18 = virtualinvoke r2.<java.io.File: java.lang.String toString()>()
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r18 = virtualinvoke r2.<java.io.File: java.lang.String toString()>() >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18)
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".")
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".") >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4)
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : virtualinvoke $r15.<java.util.logging.Logger: void info(java.lang.String)>($r22)
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : virtualinvoke $r15.<java.util.logging.Logger: void info(java.lang.String)>($r22) >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r23 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>()
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : virtualinvoke $r15.<java.util.logging.Logger: void info(java.lang.String)>($r22) >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r24 := @caughtexception
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : r7 = $r24 >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r25 = <dynoptic.model.export.GraphExporter: java.util.logging.Logger logger>
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r25 = <dynoptic.model.export.GraphExporter: java.util.logging.Logger logger> >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r26 = new java.lang.StringBuilder
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r26 = new java.lang.StringBuilder >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : specialinvoke $r26.<java.lang.StringBuilder: void <init>()>()
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : specialinvoke $r26.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not run dotCommand \'")
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not run dotCommand \'") >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5)
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5) >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': ")
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': ") >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r30 = virtualinvoke r7.<java.io.IOException: java.lang.String getMessage()>()
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r30 = virtualinvoke r7.<java.io.IOException: java.lang.String getMessage()>() >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30)
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30) >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : virtualinvoke $r25.<java.util.logging.Logger: void severe(java.lang.String)>($r32)
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : virtualinvoke $r25.<java.util.logging.Logger: void severe(java.lang.String)>($r32) >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : return
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r23 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>() >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : r6 = virtualinvoke $r23.<java.lang.Runtime: java.lang.Process exec(java.lang.String)>(r5)
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r23 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>() >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r24 := @caughtexception
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : r6 = virtualinvoke $r23.<java.lang.Runtime: java.lang.Process exec(java.lang.String)>(r5) >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : goto [?= virtualinvoke r6.<java.lang.Process: int waitFor()>()]
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : r6 = virtualinvoke $r23.<java.lang.Runtime: java.lang.Process exec(java.lang.String)>(r5) >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r24 := @caughtexception
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : goto [?= virtualinvoke r6.<java.lang.Process: int waitFor()>()] >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : virtualinvoke r6.<java.lang.Process: int waitFor()>()
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : goto [?= virtualinvoke r6.<java.lang.Process: int waitFor()>()] >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r33 := @caughtexception
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : r34 = $r33 >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r35 = <dynoptic.model.export.GraphExporter: java.util.logging.Logger logger>
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r35 = <dynoptic.model.export.GraphExporter: java.util.logging.Logger logger> >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r36 = new java.lang.StringBuilder
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r36 = new java.lang.StringBuilder >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : specialinvoke $r36.<java.lang.StringBuilder: void <init>()>()
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : specialinvoke $r36.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Waiting for dot process interrupted \'")
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Waiting for dot process interrupted \'") >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5)
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5) >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': ")
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': ") >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r40 = virtualinvoke r34.<java.lang.InterruptedException: java.lang.String getMessage()>()
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r40 = virtualinvoke r34.<java.lang.InterruptedException: java.lang.String getMessage()>() >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40)
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40) >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : virtualinvoke $r35.<java.util.logging.Logger: void severe(java.lang.String)>($r42)
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : virtualinvoke $r35.<java.util.logging.Logger: void severe(java.lang.String)>($r42) >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : return
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : virtualinvoke r6.<java.lang.Process: int waitFor()>() >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : goto [?= return]
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : virtualinvoke r6.<java.lang.Process: int waitFor()>() >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r33 := @caughtexception
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : goto [?= return] >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : return
