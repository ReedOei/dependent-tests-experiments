dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r2 = <dynoptic.mc.mcscm.McScMResult: java.util.regex.Pattern eventTypeRecvPat> >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1)
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1) >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $z0 = virtualinvoke r3.<java.util.regex.Matcher: boolean find()>()
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $z0 = virtualinvoke r3.<java.util.regex.Matcher: boolean find()>() >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : if $z0 == 0
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : if $z0 == 0 >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $z1 = <dynoptic.mc.mcscm.McScMResult: boolean $assertionsDisabled>
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : if $z0 == 0 >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r14 = <dynoptic.mc.mcscm.McScMResult: java.util.regex.Pattern eventTypeSendPat>
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r14 = <dynoptic.mc.mcscm.McScMResult: java.util.regex.Pattern eventTypeSendPat> >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : r15 = virtualinvoke $r14.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1)
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : r15 = virtualinvoke $r14.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1) >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $z3 = virtualinvoke r15.<java.util.regex.Matcher: boolean find()>()
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $z3 = virtualinvoke r15.<java.util.regex.Matcher: boolean find()>() >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : if $z3 != 0
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : if $z3 != 0 >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r16 = new dynoptic.mc.mcscm.VerifyOutputParseException
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : if $z3 != 0 >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $z4 = <dynoptic.mc.mcscm.McScMResult: boolean $assertionsDisabled>
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $z4 = <dynoptic.mc.mcscm.McScMResult: boolean $assertionsDisabled> >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : if $z4 != 0
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : if $z4 != 0 >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $i3 = virtualinvoke r15.<java.util.regex.Matcher: int groupCount()>()
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : if $z4 != 0 >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r21 = virtualinvoke r15.<java.util.regex.Matcher: java.lang.String group(int)>(1)
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r21 = virtualinvoke r15.<java.util.regex.Matcher: java.lang.String group(int)>(1) >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r21)
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r21) >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $z5 = <dynoptic.mc.mcscm.McScMResult: boolean $assertionsDisabled>
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $z5 = <dynoptic.mc.mcscm.McScMResult: boolean $assertionsDisabled> >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : if $z5 != 0
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : if $z5 != 0 >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : if i4 < 0
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : if $z5 != 0 >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r24 = r0.<dynoptic.mc.mcscm.McScMResult: java.util.List cids>
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r24 = r0.<dynoptic.mc.mcscm.McScMResult: java.util.List cids> >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r25 = interfaceinvoke $r24.<java.util.List: java.lang.Object get(int)>(i4)
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r25 = interfaceinvoke $r24.<java.util.List: java.lang.Object get(int)>(i4) >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : r26 = (synoptic.model.channelid.ChannelId) $r25
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : r26 = (synoptic.model.channelid.ChannelId) $r25 >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $z6 = r26 instanceof dynoptic.model.fifosys.channel.channelid.InvChannelId
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $z6 = r26 instanceof dynoptic.model.fifosys.channel.channelid.InvChannelId >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : if $z6 == 0
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : if $z6 == 0 >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : return null
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : if $z6 == 0 >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $z7 = r26 instanceof dynoptic.model.fifosys.channel.channelid.LocalEventsChannelId
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $z7 = r26 instanceof dynoptic.model.fifosys.channel.channelid.LocalEventsChannelId >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : if $z7 == 0
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : if $z7 == 0 >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r27 = (dynoptic.model.fifosys.channel.channelid.LocalEventsChannelId) r26
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : if $z7 == 0 >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r30 = virtualinvoke r15.<java.util.regex.Matcher: java.lang.String group(int)>(2)
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r30 = virtualinvoke r15.<java.util.regex.Matcher: java.lang.String group(int)>(2) >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r31 = staticinvoke <synoptic.model.event.DistEventType: synoptic.model.event.DistEventType SendEvent(java.lang.String,synoptic.model.channelid.ChannelId)>($r30, r26)
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r31 = staticinvoke <synoptic.model.event.DistEventType: synoptic.model.event.DistEventType SendEvent(java.lang.String,synoptic.model.channelid.ChannelId)>($r30, r26) >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : return $r31
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r27 = (dynoptic.model.fifosys.channel.channelid.LocalEventsChannelId) r26 >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r28 = virtualinvoke r15.<java.util.regex.Matcher: java.lang.String group(int)>(2)
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r28 = virtualinvoke r15.<java.util.regex.Matcher: java.lang.String group(int)>(2) >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r29 = virtualinvoke $r27.<dynoptic.model.fifosys.channel.channelid.LocalEventsChannelId: synoptic.model.event.DistEventType getEventType(java.lang.String)>($r28)
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r29 = virtualinvoke $r27.<dynoptic.model.fifosys.channel.channelid.LocalEventsChannelId: synoptic.model.event.DistEventType getEventType(java.lang.String)>($r28) >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : return $r29
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : if i4 < 0 >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r22 = r0.<dynoptic.mc.mcscm.McScMResult: java.util.List cids>
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : if i4 < 0 >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r23 = new java.lang.AssertionError
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r23 = new java.lang.AssertionError >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : specialinvoke $r23.<java.lang.AssertionError: void <init>()>()
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : specialinvoke $r23.<java.lang.AssertionError: void <init>()>() >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : throw $r23
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r22 = r0.<dynoptic.mc.mcscm.McScMResult: java.util.List cids> >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $i5 = interfaceinvoke $r22.<java.util.List: int size()>()
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $i5 = interfaceinvoke $r22.<java.util.List: int size()>() >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : if i4 < $i5
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : if i4 < $i5 >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r23 = new java.lang.AssertionError
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : if i4 < $i5 >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r24 = r0.<dynoptic.mc.mcscm.McScMResult: java.util.List cids>
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $i3 = virtualinvoke r15.<java.util.regex.Matcher: int groupCount()>() >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : if $i3 == 2
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : if $i3 == 2 >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r20 = new java.lang.AssertionError
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : if $i3 == 2 >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r21 = virtualinvoke r15.<java.util.regex.Matcher: java.lang.String group(int)>(1)
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r20 = new java.lang.AssertionError >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : specialinvoke $r20.<java.lang.AssertionError: void <init>()>()
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : specialinvoke $r20.<java.lang.AssertionError: void <init>()>() >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : throw $r20
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r16 = new dynoptic.mc.mcscm.VerifyOutputParseException >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r5 = new java.lang.StringBuilder
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r5 = new java.lang.StringBuilder >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r17 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not parse event in an McScm counter-example: ")
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r17 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not parse event in an McScm counter-example: ") >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : specialinvoke $r16.<dynoptic.mc.mcscm.VerifyOutputParseException: void <init>(java.lang.String)>($r19)
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : specialinvoke $r16.<dynoptic.mc.mcscm.VerifyOutputParseException: void <init>(java.lang.String)>($r19) >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : throw $r16
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $z1 = <dynoptic.mc.mcscm.McScMResult: boolean $assertionsDisabled> >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : if $z1 != 0
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : if $z1 != 0 >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $i1 = virtualinvoke r3.<java.util.regex.Matcher: int groupCount()>()
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : if $z1 != 0 >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r7 = virtualinvoke r3.<java.util.regex.Matcher: java.lang.String group(int)>(1)
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r7 = virtualinvoke r3.<java.util.regex.Matcher: java.lang.String group(int)>(1) >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r7)
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r7) >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $z2 = <dynoptic.mc.mcscm.McScMResult: boolean $assertionsDisabled>
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $z2 = <dynoptic.mc.mcscm.McScMResult: boolean $assertionsDisabled> >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : if $z2 != 0
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : if $z2 != 0 >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : if i0 < 0
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : if $z2 != 0 >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r10 = r0.<dynoptic.mc.mcscm.McScMResult: java.util.List cids>
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r10 = r0.<dynoptic.mc.mcscm.McScMResult: java.util.List cids> >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r11 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>(i0)
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r11 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>(i0) >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : r4 = (synoptic.model.channelid.ChannelId) $r11
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : r4 = (synoptic.model.channelid.ChannelId) $r11 >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r12 = virtualinvoke r3.<java.util.regex.Matcher: java.lang.String group(int)>(2)
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r12 = virtualinvoke r3.<java.util.regex.Matcher: java.lang.String group(int)>(2) >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r13 = staticinvoke <synoptic.model.event.DistEventType: synoptic.model.event.DistEventType RecvEvent(java.lang.String,synoptic.model.channelid.ChannelId)>($r12, r4)
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r13 = staticinvoke <synoptic.model.event.DistEventType: synoptic.model.event.DistEventType RecvEvent(java.lang.String,synoptic.model.channelid.ChannelId)>($r12, r4) >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : return $r13
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : if i0 < 0 >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r8 = r0.<dynoptic.mc.mcscm.McScMResult: java.util.List cids>
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : if i0 < 0 >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r9 = new java.lang.AssertionError
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r9 = new java.lang.AssertionError >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : specialinvoke $r9.<java.lang.AssertionError: void <init>()>()
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : specialinvoke $r9.<java.lang.AssertionError: void <init>()>() >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : throw $r9
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r8 = r0.<dynoptic.mc.mcscm.McScMResult: java.util.List cids> >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $i2 = interfaceinvoke $r8.<java.util.List: int size()>()
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $i2 = interfaceinvoke $r8.<java.util.List: int size()>() >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : if i0 < $i2
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : if i0 < $i2 >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r9 = new java.lang.AssertionError
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : if i0 < $i2 >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r10 = r0.<dynoptic.mc.mcscm.McScMResult: java.util.List cids>
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $i1 = virtualinvoke r3.<java.util.regex.Matcher: int groupCount()>() >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : if $i1 == 2
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : if $i1 == 2 >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r6 = new java.lang.AssertionError
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : if $i1 == 2 >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r7 = virtualinvoke r3.<java.util.regex.Matcher: java.lang.String group(int)>(1)
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : $r6 = new java.lang.AssertionError >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : specialinvoke $r6.<java.lang.AssertionError: void <init>()>()
dynoptic.mc.mcscm.McScMResult.parseScmEventStr : specialinvoke $r6.<java.lang.AssertionError: void <init>()>() >>>>>>>> dynoptic.mc.mcscm.McScMResult.parseScmEventStr : throw $r6
