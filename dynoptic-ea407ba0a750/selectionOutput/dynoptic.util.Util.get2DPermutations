dynoptic.util.Util.get2DPermutations : r2 = staticinvoke <dynoptic.util.Util: java.util.List newList()>() >>>>>>>> dynoptic.util.Util.get2DPermutations : r3 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>()
dynoptic.util.Util.get2DPermutations : r3 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> dynoptic.util.Util.get2DPermutations : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
dynoptic.util.Util.get2DPermutations : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.util.Util.get2DPermutations : if $z0 == 0
dynoptic.util.Util.get2DPermutations : if $z0 == 0 >>>>>>>> dynoptic.util.Util.get2DPermutations : $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
dynoptic.util.Util.get2DPermutations : if $z0 == 0 >>>>>>>> dynoptic.util.Util.get2DPermutations : return r2
dynoptic.util.Util.get2DPermutations : $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> dynoptic.util.Util.get2DPermutations : r4 = (java.util.List) $r8
dynoptic.util.Util.get2DPermutations : r4 = (java.util.List) $r8 >>>>>>>> dynoptic.util.Util.get2DPermutations : r5 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>()
dynoptic.util.Util.get2DPermutations : r5 = interfaceinvoke r1.<java.lang.Iterable: java.util.Iterator iterator()>() >>>>>>>> dynoptic.util.Util.get2DPermutations : $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()
dynoptic.util.Util.get2DPermutations : $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.util.Util.get2DPermutations : if $z1 == 0
dynoptic.util.Util.get2DPermutations : if $z1 == 0 >>>>>>>> dynoptic.util.Util.get2DPermutations : r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>()
dynoptic.util.Util.get2DPermutations : if $z1 == 0 >>>>>>>> dynoptic.util.Util.get2DPermutations : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
dynoptic.util.Util.get2DPermutations : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> dynoptic.util.Util.get2DPermutations : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
dynoptic.util.Util.get2DPermutations : r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> dynoptic.util.Util.get2DPermutations : r7 = staticinvoke <dynoptic.util.Util: java.util.List newList()>()
dynoptic.util.Util.get2DPermutations : r7 = staticinvoke <dynoptic.util.Util: java.util.List newList()>() >>>>>>>> dynoptic.util.Util.get2DPermutations : interfaceinvoke r7.<java.util.List: boolean addAll(java.util.Collection)>(r4)
dynoptic.util.Util.get2DPermutations : interfaceinvoke r7.<java.util.List: boolean addAll(java.util.Collection)>(r4) >>>>>>>> dynoptic.util.Util.get2DPermutations : interfaceinvoke r7.<java.util.List: boolean add(java.lang.Object)>(r6)
dynoptic.util.Util.get2DPermutations : interfaceinvoke r7.<java.util.List: boolean add(java.lang.Object)>(r6) >>>>>>>> dynoptic.util.Util.get2DPermutations : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r7)
dynoptic.util.Util.get2DPermutations : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r7) >>>>>>>> dynoptic.util.Util.get2DPermutations : goto [?= $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]
dynoptic.util.Util.get2DPermutations : goto [?= $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> dynoptic.util.Util.get2DPermutations : $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()
