dynoptic.model.automaton.EncodedAutomatonTests.toSet : r2 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>() >>>>>>>> dynoptic.model.automaton.EncodedAutomatonTests.toSet : r3 = r1
dynoptic.model.automaton.EncodedAutomatonTests.toSet : r3 = r1 >>>>>>>> dynoptic.model.automaton.EncodedAutomatonTests.toSet : i0 = lengthof r3
dynoptic.model.automaton.EncodedAutomatonTests.toSet : i0 = lengthof r3 >>>>>>>> dynoptic.model.automaton.EncodedAutomatonTests.toSet : i1 = 0
dynoptic.model.automaton.EncodedAutomatonTests.toSet : i1 = 0 >>>>>>>> dynoptic.model.automaton.EncodedAutomatonTests.toSet : if i1 >= i0
dynoptic.model.automaton.EncodedAutomatonTests.toSet : if i1 >= i0 >>>>>>>> dynoptic.model.automaton.EncodedAutomatonTests.toSet : r4 = r3[i1]
dynoptic.model.automaton.EncodedAutomatonTests.toSet : if i1 >= i0 >>>>>>>> dynoptic.model.automaton.EncodedAutomatonTests.toSet : return r2
dynoptic.model.automaton.EncodedAutomatonTests.toSet : r4 = r3[i1] >>>>>>>> dynoptic.model.automaton.EncodedAutomatonTests.toSet : interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>(r4)
dynoptic.model.automaton.EncodedAutomatonTests.toSet : interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>(r4) >>>>>>>> dynoptic.model.automaton.EncodedAutomatonTests.toSet : i1 = i1 + 1
dynoptic.model.automaton.EncodedAutomatonTests.toSet : i1 = i1 + 1 >>>>>>>> dynoptic.model.automaton.EncodedAutomatonTests.toSet : goto [?= (branch)]
dynoptic.model.automaton.EncodedAutomatonTests.toSet : goto [?= (branch)] >>>>>>>> dynoptic.model.automaton.EncodedAutomatonTests.toSet : if i1 >= i0
