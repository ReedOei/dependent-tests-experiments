dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $i0 = r0.<dynoptic.model.fifosys.cfsm.CFSM: int numProcesses> >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : if $i0 != 1
dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : if $i0 != 1 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : r2 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>()
dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : if $i0 != 1 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $z2 = <dynoptic.model.fifosys.cfsm.CFSM: boolean $assertionsDisabled>
dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $z2 = <dynoptic.model.fifosys.cfsm.CFSM: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : if $z2 != 0
dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : if $z2 != 0 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $i1 = r0.<dynoptic.model.fifosys.cfsm.CFSM: int numProcesses>
dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : if $z2 != 0 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $r12 = r0.<dynoptic.model.fifosys.cfsm.CFSM: java.util.List fsms>
dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $r12 = r0.<dynoptic.model.fifosys.cfsm.CFSM: java.util.List fsms> >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(0)
dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(0) >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $r14 = (dynoptic.model.AbsFSM) $r13
dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $r14 = (dynoptic.model.AbsFSM) $r13 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $r15 = interfaceinvoke r1.<dynoptic.model.fifosys.cfsm.CFSM$IFSMToStateSetFn: java.util.Set eval(dynoptic.model.AbsFSM)>($r14)
dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $r15 = interfaceinvoke r1.<dynoptic.model.fifosys.cfsm.CFSM$IFSMToStateSetFn: java.util.Set eval(dynoptic.model.AbsFSM)>($r14) >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $r16 = r0.<dynoptic.model.fifosys.cfsm.CFSM: java.util.List fsms>
dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $r16 = r0.<dynoptic.model.fifosys.cfsm.CFSM: java.util.List fsms> >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $r17 = interfaceinvoke $r16.<java.util.List: java.lang.Object get(int)>(1)
dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $r17 = interfaceinvoke $r16.<java.util.List: java.lang.Object get(int)>(1) >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $r18 = (dynoptic.model.AbsFSM) $r17
dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $r18 = (dynoptic.model.AbsFSM) $r17 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $r19 = interfaceinvoke r1.<dynoptic.model.fifosys.cfsm.CFSM$IFSMToStateSetFn: java.util.Set eval(dynoptic.model.AbsFSM)>($r18)
dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $r19 = interfaceinvoke r1.<dynoptic.model.fifosys.cfsm.CFSM$IFSMToStateSetFn: java.util.Set eval(dynoptic.model.AbsFSM)>($r18) >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : r20 = staticinvoke <dynoptic.util.Util: java.util.List get2DPermutations(java.lang.Iterable,java.lang.Iterable)>($r15, $r19)
dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : r20 = staticinvoke <dynoptic.util.Util: java.util.List get2DPermutations(java.lang.Iterable,java.lang.Iterable)>($r15, $r19) >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : i2 = 2
dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : i2 = 2 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $i3 = r0.<dynoptic.model.fifosys.cfsm.CFSM: int numProcesses>
dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $i3 = r0.<dynoptic.model.fifosys.cfsm.CFSM: int numProcesses> >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : if i2 == $i3
dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : if i2 == $i3 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $r21 = r0.<dynoptic.model.fifosys.cfsm.CFSM: java.util.List fsms>
dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : if i2 == $i3 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $r25 = staticinvoke <dynoptic.model.fifosys.cfsm.CFSMState: java.util.Set CFSMStatesFromFSMListLists(java.util.List)>(r20)
dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $r25 = staticinvoke <dynoptic.model.fifosys.cfsm.CFSMState: java.util.Set CFSMStatesFromFSMListLists(java.util.List)>(r20) >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : return $r25
dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $r21 = r0.<dynoptic.model.fifosys.cfsm.CFSM: java.util.List fsms> >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $r22 = interfaceinvoke $r21.<java.util.List: java.lang.Object get(int)>(i2)
dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $r22 = interfaceinvoke $r21.<java.util.List: java.lang.Object get(int)>(i2) >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $r23 = (dynoptic.model.AbsFSM) $r22
dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $r23 = (dynoptic.model.AbsFSM) $r22 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $r24 = interfaceinvoke r1.<dynoptic.model.fifosys.cfsm.CFSM$IFSMToStateSetFn: java.util.Set eval(dynoptic.model.AbsFSM)>($r23)
dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $r24 = interfaceinvoke r1.<dynoptic.model.fifosys.cfsm.CFSM$IFSMToStateSetFn: java.util.Set eval(dynoptic.model.AbsFSM)>($r23) >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : r20 = staticinvoke <dynoptic.util.Util: java.util.List get2DPermutations(java.util.List,java.lang.Iterable)>(r20, $r24)
dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : r20 = staticinvoke <dynoptic.util.Util: java.util.List get2DPermutations(java.util.List,java.lang.Iterable)>(r20, $r24) >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : i2 = i2 + 1
dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : i2 = i2 + 1 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : goto [?= $i3 = r0.<dynoptic.model.fifosys.cfsm.CFSM: int numProcesses>]
dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : goto [?= $i3 = r0.<dynoptic.model.fifosys.cfsm.CFSM: int numProcesses>] >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $i3 = r0.<dynoptic.model.fifosys.cfsm.CFSM: int numProcesses>
dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $i1 = r0.<dynoptic.model.fifosys.cfsm.CFSM: int numProcesses> >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : if $i1 > 1
dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : if $i1 > 1 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $r11 = new java.lang.AssertionError
dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : if $i1 > 1 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $r12 = r0.<dynoptic.model.fifosys.cfsm.CFSM: java.util.List fsms>
dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $r11 = new java.lang.AssertionError >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : specialinvoke $r11.<java.lang.AssertionError: void <init>()>()
dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : specialinvoke $r11.<java.lang.AssertionError: void <init>()>() >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : throw $r11
dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : r2 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>() >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $r5 = r0.<dynoptic.model.fifosys.cfsm.CFSM: java.util.List fsms>
dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $r5 = r0.<dynoptic.model.fifosys.cfsm.CFSM: java.util.List fsms> >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(0)
dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(0) >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $r7 = (dynoptic.model.AbsFSM) $r6
dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $r7 = (dynoptic.model.AbsFSM) $r6 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $r8 = interfaceinvoke r1.<dynoptic.model.fifosys.cfsm.CFSM$IFSMToStateSetFn: java.util.Set eval(dynoptic.model.AbsFSM)>($r7)
dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $r8 = interfaceinvoke r1.<dynoptic.model.fifosys.cfsm.CFSM$IFSMToStateSetFn: java.util.Set eval(dynoptic.model.AbsFSM)>($r7) >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : r3 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : r3 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : if $z0 == 0
dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : return r2
dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : r4 = (dynoptic.model.fifosys.cfsm.fsm.FSMState) $r9
dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : r4 = (dynoptic.model.fifosys.cfsm.fsm.FSMState) $r9 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $r10 = new dynoptic.model.fifosys.cfsm.CFSMState
dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $r10 = new dynoptic.model.fifosys.cfsm.CFSMState >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : specialinvoke $r10.<dynoptic.model.fifosys.cfsm.CFSMState: void <init>(dynoptic.model.fifosys.cfsm.fsm.FSMState)>(r4)
dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : specialinvoke $r10.<dynoptic.model.fifosys.cfsm.CFSMState: void <init>(dynoptic.model.fifosys.cfsm.fsm.FSMState)>(r4) >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>($r10)
dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>($r10) >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.deriveAllPermsOfStates : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
