dynoptic.model.fifosys.gfsm.GFSM.addToQueueContentsHashMap : $r4 = virtualinvoke r2.<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState getChannelStates()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.addToQueueContentsHashMap : i0 = virtualinvoke $r4.<dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: int topOfQueuesHash()>()
dynoptic.model.fifosys.gfsm.GFSM.addToQueueContentsHashMap : i0 = virtualinvoke $r4.<dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: int topOfQueuesHash()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.addToQueueContentsHashMap : $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)
dynoptic.model.fifosys.gfsm.GFSM.addToQueueContentsHashMap : $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.addToQueueContentsHashMap : $z0 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r5)
dynoptic.model.fifosys.gfsm.GFSM.addToQueueContentsHashMap : $z0 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r5) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.addToQueueContentsHashMap : if $z0 != 0
dynoptic.model.fifosys.gfsm.GFSM.addToQueueContentsHashMap : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.addToQueueContentsHashMap : $r6 = <dynoptic.model.fifosys.gfsm.GFSM: java.util.logging.Logger logger>
dynoptic.model.fifosys.gfsm.GFSM.addToQueueContentsHashMap : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.addToQueueContentsHashMap : $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)
dynoptic.model.fifosys.gfsm.GFSM.addToQueueContentsHashMap : $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.addToQueueContentsHashMap : $r16 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r15)
dynoptic.model.fifosys.gfsm.GFSM.addToQueueContentsHashMap : $r16 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r15) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.addToQueueContentsHashMap : $r17 = (java.util.Set) $r16
dynoptic.model.fifosys.gfsm.GFSM.addToQueueContentsHashMap : $r17 = (java.util.Set) $r16 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.addToQueueContentsHashMap : interfaceinvoke $r17.<java.util.Set: boolean add(java.lang.Object)>(r2)
dynoptic.model.fifosys.gfsm.GFSM.addToQueueContentsHashMap : interfaceinvoke $r17.<java.util.Set: boolean add(java.lang.Object)>(r2) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.addToQueueContentsHashMap : return
dynoptic.model.fifosys.gfsm.GFSM.addToQueueContentsHashMap : $r6 = <dynoptic.model.fifosys.gfsm.GFSM: java.util.logging.Logger logger> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.addToQueueContentsHashMap : $r7 = new java.lang.StringBuilder
dynoptic.model.fifosys.gfsm.GFSM.addToQueueContentsHashMap : $r7 = new java.lang.StringBuilder >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.addToQueueContentsHashMap : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()
dynoptic.model.fifosys.gfsm.GFSM.addToQueueContentsHashMap : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.addToQueueContentsHashMap : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Creating a new partition for ch-states like: ")
dynoptic.model.fifosys.gfsm.GFSM.addToQueueContentsHashMap : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Creating a new partition for ch-states like: ") >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.addToQueueContentsHashMap : $r9 = virtualinvoke r2.<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState getChannelStates()>()
dynoptic.model.fifosys.gfsm.GFSM.addToQueueContentsHashMap : $r9 = virtualinvoke r2.<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState getChannelStates()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.addToQueueContentsHashMap : $r10 = virtualinvoke $r9.<dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: java.lang.String toString()>()
dynoptic.model.fifosys.gfsm.GFSM.addToQueueContentsHashMap : $r10 = virtualinvoke $r9.<dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: java.lang.String toString()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.addToQueueContentsHashMap : $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10)
dynoptic.model.fifosys.gfsm.GFSM.addToQueueContentsHashMap : $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.addToQueueContentsHashMap : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.model.fifosys.gfsm.GFSM.addToQueueContentsHashMap : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.addToQueueContentsHashMap : virtualinvoke $r6.<java.util.logging.Logger: void info(java.lang.String)>($r12)
dynoptic.model.fifosys.gfsm.GFSM.addToQueueContentsHashMap : virtualinvoke $r6.<java.util.logging.Logger: void info(java.lang.String)>($r12) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.addToQueueContentsHashMap : r3 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>()
dynoptic.model.fifosys.gfsm.GFSM.addToQueueContentsHashMap : r3 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.addToQueueContentsHashMap : $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)
dynoptic.model.fifosys.gfsm.GFSM.addToQueueContentsHashMap : $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.addToQueueContentsHashMap : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, r3)
dynoptic.model.fifosys.gfsm.GFSM.addToQueueContentsHashMap : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, r3) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.addToQueueContentsHashMap : $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)
